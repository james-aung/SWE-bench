{"repo": "matplotlib/matplotlib", "pull_number": 28720, "instance_id": "matplotlib__matplotlib-28720", "issue_numbers": ["28612"], "base_commit": "315da107bfe927cf0c38cae79ac9aff7638aedcf", "patch": "diff --git a/galleries/users_explain/artists/transforms_tutorial.py b/galleries/users_explain/artists/transforms_tutorial.py\nindex 8eed53c812b8..0be5fa3c2e21 100644\n--- a/galleries/users_explain/artists/transforms_tutorial.py\n+++ b/galleries/users_explain/artists/transforms_tutorial.py\n@@ -22,6 +22,7 @@\n :class:`~matplotlib.figure.Figure` instance, and ``subfigure`` is a\n :class:`~matplotlib.figure.SubFigure` instance.\n \n+.. _coordinate-systems:\n \n +----------------+-----------------------------------+-----------------------------+\n |Coordinate      |Description                        |Transformation object        |\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 598a954f8819..243c175a1e5f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -767,20 +767,25 @@ def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None,\n     @_docstring.dedent_interpd\n     def axhline(self, y=0, xmin=0, xmax=1, **kwargs):\n         \"\"\"\n-        Add a horizontal line across the Axes.\n+        Add a horizontal line spanning the whole or fraction of the Axes.\n+\n+        Note: If you want to set x-limits in data coordinates, use\n+        `~.Axes.hlines` instead.\n \n         Parameters\n         ----------\n         y : float, default: 0\n-            y position in data coordinates of the horizontal line.\n+            y position in :ref:`data coordinates <coordinate-systems>`.\n \n         xmin : float, default: 0\n-            Should be between 0 and 1, 0 being the far left of the plot, 1 the\n-            far right of the plot.\n+            The start x-position in :ref:`axes coordinates <coordinate-systems>`.\n+            Should be between 0 and 1, 0 being the far left of the plot,\n+            1 the far right of the plot.\n \n         xmax : float, default: 1\n-            Should be between 0 and 1, 0 being the far left of the plot, 1 the\n-            far right of the plot.\n+            The end x-position in :ref:`axes coordinates <coordinate-systems>`.\n+            Should be between 0 and 1, 0 being the far left of the plot,\n+            1 the far right of the plot.\n \n         Returns\n         -------\n@@ -836,18 +841,23 @@ def axhline(self, y=0, xmin=0, xmax=1, **kwargs):\n     @_docstring.dedent_interpd\n     def axvline(self, x=0, ymin=0, ymax=1, **kwargs):\n         \"\"\"\n-        Add a vertical line across the Axes.\n+        Add a vertical line spanning the whole or fraction of the Axes.\n+\n+        Note: If you want to set y-limits in data coordinates, use\n+        `~.Axes.vlines` instead.\n \n         Parameters\n         ----------\n         x : float, default: 0\n-            x position in data coordinates of the vertical line.\n+            y position in :ref:`data coordinates <coordinate-systems>`.\n \n         ymin : float, default: 0\n+            The start y-position in :ref:`axes coordinates <coordinate-systems>`.\n             Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n             top of the plot.\n \n         ymax : float, default: 1\n+            The end y-position in :ref:`axes coordinates <coordinate-systems>`.\n             Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n             top of the plot.\n \n", "test_patch": "", "problem_statement": "[ENH]:  matplotlib.pyplot.axvline does not support datetime for xmin/xmax\n### Problem\n\nI am trying to create a figure with dates on the x-axis.\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nfig, ax = plt.subplots()\r\ndt = pd.to_datetime('1980-01-01 00:00:00')\r\n```\r\n\r\n\r\nMatplotlib already supports entering datetime as x-coordinate for vertical lines:\r\n\r\n`ax.axvline(dt)`\r\n\r\n\r\nBut it does not allow me to use datetimes as xmin and xmax for horizontal lines:\r\n\r\n```\r\nax.axhline(0, dt)\r\n  File \"/home/miniconda3/envs/stata/lib/python3.12/site-packages/matplotlib/axes/_axes.py\", line 773, in axhline\r\n    self._check_no_units([xmin, xmax], ['xmin', 'xmax'])\r\n  File \"/home/miniconda3/envs/stata/lib/python3.12/site-packages/matplotlib/axes/_axes.py\", line 863, in _check_no_units\r\n    raise ValueError(f\"{name} must be a single scalar value, \"\r\nValueError: xmin must be a single scalar value, but got 1980-01-01 00:00:00\r\n```\r\n\r\n\r\n\r\n\n\n### Proposed solution\n\n_No response_\n", "hints_text": "`xmin` and `xmax` are in Axes units, not data units; using a datetime there would not work. Are you sure you didn't mean `ax.axhline(dt)`?\r\n\r\nThe same error would occur with `ax.axvline(0, dt)`, since `ymin`/`ymax` have the same usage.\nI know that it doesn't work currently -- that is why it's a feature request. It appears very odd that I can easily specify my vertical line on a data coordinate, but if I want to specify the start and end points of a horizontal line, I can no longer use data coordinates.\nThere is no difference between `axvline` and `axhline`; you are calling them differently and passing your datetime to a different argument that does a different thing.\r\n\r\n`axhline` and `axvline` are meant to be in mixed coordinate spaces, one data space and one Axes space. If you are trying to use data coordinates for both, then you should use `plot`.\nTo use **_axhline_** effectively with dates on the x-axis, you'll need to simulate a horizontal line across a range of dates by combining **_axhline_** with **_ax.set_xlim( )_**. Since **_axhline_** _doesn't directly support date ranges for **xmin** and **xmax**_, you use **_axhline_** to draw the line at a specific y-value and then adjust the x-axis limits to ensure that the horizontal line spans the desired range of dates.\r\n\r\n# Here\u2019s how to do it:\r\n\r\n- Draw the Horizontal Line: Use axhline to add the line at a specific y-value.\r\n- Adjust X-Axis Limits: Ensure that the x-axis limits include the range of dates you want to span.\r\n\nAs mentioned [above](https://github.com/matplotlib/matplotlib/issues/28612#issuecomment-2249637612), `axhline` x limits are in Axes units (span the full or a fraction of the axis). It's not intended for data units. Use `plot([xmin, xmax], [y, y])`  or `hlines(y, xmin, xmax)` if you want x in data units.\r\n\r\n**Action:** The documentation should be improved [axhline](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.axhline.html) reads \"Add a horizontal line across the Axes\", which is technically correct, but it's not obvious that it's not for data coordinates. We should make this more clear.", "created_at": "2024-08-14T12:42:13Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28718, "instance_id": "matplotlib__matplotlib-28718", "issue_numbers": ["28715", "0000"], "base_commit": "702aeda72486ad25f8d9bc8fd20350e863e47a3b", "patch": "diff --git a/doc/missing-references.json b/doc/missing-references.json\nindex 7eb45863589d..a93a03b6ef73 100644\n--- a/doc/missing-references.json\n+++ b/doc/missing-references.json\n@@ -81,28 +81,28 @@\n       \"lib/matplotlib/scale.py:docstring of matplotlib.scale.ScaleBase:8\"\n     ],\n     \"output_dims\": [\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.AitoffAxes.AitoffTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.HammerAxes.HammerTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.HammerAxes.InvertedHammerTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.LambertAxes.LambertTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.MollweideAxes.MollweideTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.AffineBase.transform:14\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.AffineBase.transform_affine:21\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.AffineBase.transform_non_affine:20\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.CompositeGenericTransform.transform_affine:21\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.CompositeGenericTransform.transform_non_affine:20\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.IdentityTransform.transform:14\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.IdentityTransform.transform_affine:21\",\n-      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.IdentityTransform.transform_non_affine:20\"\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.AitoffAxes.AitoffTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.HammerAxes.HammerTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.HammerAxes.InvertedHammerTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.LambertAxes.InvertedLambertTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.LambertAxes.LambertTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/projections/geo.py:docstring of matplotlib.projections.geo.MollweideAxes.MollweideTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.AffineBase.transform:16\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.AffineBase.transform_affine:23\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.AffineBase.transform_non_affine:22\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.CompositeGenericTransform.transform_affine:23\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.CompositeGenericTransform.transform_non_affine:22\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.IdentityTransform.transform:16\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.IdentityTransform.transform_affine:23\",\n+      \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.IdentityTransform.transform_non_affine:22\"\n     ],\n     \"triangulation\": [\n       \"lib/matplotlib/tri/_trirefine.py:docstring of matplotlib.tri._trirefine.UniformTriRefiner.refine_triangulation:2\"\n     ],\n     \"use_sticky_edges\": [\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.margins:57\"\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.margins:59\"\n     ],\n     \"width\": [\n       \"lib/matplotlib/transforms.py:docstring of matplotlib.transforms.Bbox.bounds:2\"\n@@ -274,11 +274,11 @@\n   },\n   \"py:data\": {\n     \"matplotlib.axes.Axes.transAxes\": [\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.legend:248\",\n-      \"lib/matplotlib/figure.py:docstring of matplotlib.figure.FigureBase.legend:249\",\n-      \"lib/matplotlib/legend.py:docstring of matplotlib.legend.Legend:201\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.figlegend:249\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.legend:248\"\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.legend:250\",\n+      \"lib/matplotlib/figure.py:docstring of matplotlib.figure.FigureBase.legend:251\",\n+      \"lib/matplotlib/legend.py:docstring of matplotlib.legend.Legend:209\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.figlegend:251\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.legend:250\"\n     ]\n   },\n   \"py:meth\": {\n@@ -299,13 +299,13 @@\n       \"lib/matplotlib/quiver.py:docstring of matplotlib.quiver.Barbs:9\"\n     ],\n     \"matplotlib.collections._CollectionWithSizes.set_sizes\": [\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.barbs:177\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.broken_barh:82\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.fill_between:118\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.fill_betweenx:118\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.hexbin:211\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.pcolor:180\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.quiver:213\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.barbs:179\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.broken_barh:84\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.fill_between:120\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.fill_betweenx:120\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.hexbin:213\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.pcolor:182\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.quiver:215\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.AsteriskPolygonCollection.set:44\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.CircleCollection.set:44\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.PathCollection.set:44\",\n@@ -313,25 +313,25 @@\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.PolyQuadMesh.set:44\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.RegularPolyCollection.set:44\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.StarPolygonCollection.set:44\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.barbs:177\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.broken_barh:82\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.fill_between:118\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.fill_betweenx:118\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.hexbin:211\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.pcolor:180\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.quiver:213\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.barbs:179\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.broken_barh:84\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.fill_between:120\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.fill_betweenx:120\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.hexbin:213\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.pcolor:182\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.quiver:215\",\n       \"lib/matplotlib/quiver.py:docstring of matplotlib.artist.Barbs.set:45\",\n       \"lib/matplotlib/quiver.py:docstring of matplotlib.artist.Quiver.set:45\",\n-      \"lib/matplotlib/quiver.py:docstring of matplotlib.quiver.Barbs:210\",\n-      \"lib/matplotlib/quiver.py:docstring of matplotlib.quiver.Quiver:249\",\n+      \"lib/matplotlib/quiver.py:docstring of matplotlib.quiver.Barbs:212\",\n+      \"lib/matplotlib/quiver.py:docstring of matplotlib.quiver.Quiver:251\",\n       \"lib/mpl_toolkits/mplot3d/art3d.py:docstring of matplotlib.artist.Path3DCollection.set:46\",\n       \"lib/mpl_toolkits/mplot3d/art3d.py:docstring of matplotlib.artist.Poly3DCollection.set:44\"\n     ],\n     \"matplotlib.collections._MeshData.set_array\": [\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.pcolormesh:162\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.pcolormesh:164\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.PolyQuadMesh.set:17\",\n       \"lib/matplotlib/collections.py:docstring of matplotlib.artist.QuadMesh.set:17\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.pcolormesh:162\"\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.pcolormesh:164\"\n     ]\n   },\n   \"py:obj\": {\n@@ -359,10 +359,10 @@\n       \"doc/users/explain/figure/event_handling.rst:568\"\n     ],\n     \"QuadContourSet.changed()\": [\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.contour:154\",\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.contourf:154\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.contour:154\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.contourf:154\"\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.contour:156\",\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.contourf:156\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.contour:156\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.contourf:156\"\n     ],\n     \"Rectangle.contains\": [\n       \"doc/users/explain/figure/event_handling.rst:280\"\n@@ -377,7 +377,7 @@\n     ],\n     \"ToolContainer\": [\n       \"lib/matplotlib/backend_bases.py:docstring of matplotlib.backend_bases.ToolContainerBase.remove_toolitem:8\",\n-      \"lib/matplotlib/backend_bases.py:docstring of matplotlib.backend_bases.ToolContainerBase:20\"\n+      \"lib/matplotlib/backend_bases.py:docstring of matplotlib.backend_bases.ToolContainerBase:9\"\n     ],\n     \"_iter_collection\": [\n       \"lib/matplotlib/backend_bases.py:docstring of matplotlib.backend_bases.RendererBase.draw_path_collection:15\",\n@@ -394,21 +394,21 @@\n       \"lib/matplotlib/patheffects.py:docstring of matplotlib.patheffects.PathEffectRenderer.draw_path_collection:15\"\n     ],\n     \"_read\": [\n-      \"lib/matplotlib/dviread.py:docstring of matplotlib.dviread.Vf:20\"\n+      \"lib/matplotlib/dviread.py:docstring of matplotlib.dviread.Vf:22\"\n     ],\n     \"active\": [\n-      \"lib/matplotlib/widgets.py:docstring of matplotlib.widgets.AxesWidget:32\"\n+      \"lib/matplotlib/widgets.py:docstring of matplotlib.widgets.AxesWidget:21\"\n     ],\n     \"ax.transAxes\": [\n       \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.indicate_inset:19\",\n       \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.inset_axes:11\"\n     ],\n     \"axes.bbox\": [\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.legend:144\",\n-      \"lib/matplotlib/figure.py:docstring of matplotlib.figure.FigureBase.legend:145\",\n-      \"lib/matplotlib/legend.py:docstring of matplotlib.legend.Legend:97\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.figlegend:145\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.legend:144\"\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.legend:146\",\n+      \"lib/matplotlib/figure.py:docstring of matplotlib.figure.FigureBase.legend:147\",\n+      \"lib/matplotlib/legend.py:docstring of matplotlib.legend.Legend:105\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.figlegend:147\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.legend:146\"\n     ],\n     \"can_composite\": [\n       \"lib/matplotlib/image.py:docstring of matplotlib.image.composite_images:9\"\n@@ -420,11 +420,11 @@\n       \"lib/matplotlib/backends/backend_agg.py:docstring of matplotlib.backends.backend_agg.RendererAgg.option_scale_image:2\"\n     ],\n     \"figure.bbox\": [\n-      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.legend:144\",\n-      \"lib/matplotlib/figure.py:docstring of matplotlib.figure.FigureBase.legend:145\",\n-      \"lib/matplotlib/legend.py:docstring of matplotlib.legend.Legend:97\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.figlegend:145\",\n-      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.legend:144\"\n+      \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.legend:146\",\n+      \"lib/matplotlib/figure.py:docstring of matplotlib.figure.FigureBase.legend:147\",\n+      \"lib/matplotlib/legend.py:docstring of matplotlib.legend.Legend:105\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.figlegend:147\",\n+      \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.legend:146\"\n     ],\n     \"fmt_xdata\": [\n       \"lib/matplotlib/axes/_base.py:docstring of matplotlib.axes._base._AxesBase.format_xdata:4\"\n@@ -439,12 +439,12 @@\n       \"doc/users/explain/figure/interactive.rst:361\"\n     ],\n     \"kde.covariance_factor\": [\n-      \"lib/matplotlib/mlab.py:docstring of matplotlib.mlab.GaussianKDE:40\"\n+      \"lib/matplotlib/mlab.py:docstring of matplotlib.mlab.GaussianKDE:29\"\n     ],\n     \"kde.factor\": [\n       \"lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.violinplot:58\",\n       \"lib/matplotlib/mlab.py:docstring of matplotlib.mlab.GaussianKDE:12\",\n-      \"lib/matplotlib/mlab.py:docstring of matplotlib.mlab.GaussianKDE:44\",\n+      \"lib/matplotlib/mlab.py:docstring of matplotlib.mlab.GaussianKDE:33\",\n       \"lib/matplotlib/pyplot.py:docstring of matplotlib.pyplot.violinplot:58\"\n     ],\n     \"make_image\": [\n", "test_patch": "", "problem_statement": "[Bug]: CI doc builds fail since a couple of days\n### Bug summary\r\n\r\nWe get 86 warnings that references could not be resolved like\r\n\r\n> /home/circleci/project/lib/matplotlib/axes/_axes.py:docstring of matplotlib.axes._axes.Axes.barbs:179: WARNING: py:meth reference target not found: matplotlib.collections._CollectionWithSizes.set_sizes [ref.meth]\r\n\r\nOne of the last clean builds seem to be https://app.circleci.com/pipelines/github/matplotlib/matplotlib/32390/workflows/b3701e27-4810-49ef-a165-951f5847d699/jobs/84333\r\n\r\nNote that this uses the latest sphinx=8.0.2 so it's not a sphinx update that broke us.\r\n\r\nA possible candidate could be #28632, which was merged about that time. I haven't looked into it but this would be my first step to investigate.\r\n\r\n\r\n\r\n### Code for reproduction\r\n\r\nCI run of PR against main (not doc-only)\r\n\n", "hints_text": "The update that broke it was `numpydoc` 1.8.0; I am investigating why exactly it did.", "created_at": "2024-08-13T20:46:32Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28704, "instance_id": "matplotlib__matplotlib-28704", "issue_numbers": ["28698"], "base_commit": "9f49b07ba92d71b967c1098e31d6b96bd0c28a3d", "patch": "diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex bc75e6923879..ed676543fc5b 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -4326,6 +4326,7 @@ def get_connectionstyle(self):\n         \"\"\"Return the `ConnectionStyle` used.\"\"\"\n         return self._connector\n \n+    @_docstring.dedent_interpd\n     def set_arrowstyle(self, arrowstyle=None, **kwargs):\n         \"\"\"\n         Set the arrow style, possibly with further attributes.\n", "test_patch": "", "problem_statement": "[bug]: arrowstyle doc interpolation in FancyPatch.set_arrow()\n### Documentation Link\n\nhttps://matplotlib.org/devdocs/api/_as_gen/matplotlib.patches.FancyArrowPatch.html#matplotlib.patches.FancyArrowPatch.set_arrowstyle\n\n### Problem\n\nThe documentation interpolation isn't working here, so its not showing the table of arrowstyles\r\n\r\n![image](https://github.com/user-attachments/assets/87762e9e-c352-4306-8c8b-41151fab7737)\r\n\r\nThe string looks correct though:\r\nhttps://github.com/matplotlib/matplotlib/blob/1e983776e9210fbc7426f28ce6e7eeadea18f9e9/lib/matplotlib/patches.py#L4347-L4349\n\n### Suggested improvement\n\nShould be interpolated so that the table shows here:\r\n![image](https://github.com/user-attachments/assets/0d4d287c-2b28-4415-8018-e8919c0b86d3)\n", "hints_text": "Just missing the `@_docstring.interpd` decorator?\n### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\n\ud83e\udd26\u200d\u2640\ufe0f on my part, but also then a good first issue b/c presumably the fix is to add the decorator above the function:\n\nhttps://github.com/matplotlib/matplotlib/blob/1e983776e9210fbc7426f28ce6e7eeadea18f9e9/lib%2Fmatplotlib%2Fpatches.py#L4329\n\nLike here (don't change the signature!)\n\nhttps://github.com/matplotlib/matplotlib/blob/1e983776e9210fbc7426f28ce6e7eeadea18f9e9/lib/matplotlib/patches.py#L1396-L1397", "created_at": "2024-08-11T13:34:35Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28650, "instance_id": "matplotlib__matplotlib-28650", "issue_numbers": ["28626", "0000"], "base_commit": "adb97e848ca88f0b9abc5b1c5085f548847e3f8f", "patch": "diff --git a/lib/matplotlib/animation.py b/lib/matplotlib/animation.py\nindex 9108b727b50c..00b16d240740 100644\n--- a/lib/matplotlib/animation.py\n+++ b/lib/matplotlib/animation.py\n@@ -1,23 +1,3 @@\n-# TODO:\n-# * Documentation -- this will need a new section of the User's Guide.\n-#      Both for Animations and just timers.\n-#   - Also need to update\n-#     https://scipy-cookbook.readthedocs.io/items/Matplotlib_Animations.html\n-# * Blit\n-#   * Currently broken with Qt4 for widgets that don't start on screen\n-#   * Still a few edge cases that aren't working correctly\n-#   * Can this integrate better with existing matplotlib animation artist flag?\n-#     - If animated removes from default draw(), perhaps we could use this to\n-#       simplify initial draw.\n-# * Example\n-#   * Frameless animation - pure procedural with no loop\n-#   * Need example that uses something like inotify or subprocess\n-#   * Complex syncing examples\n-# * Movies\n-#   * Can blit be enabled for movies?\n-# * Need to consider event sources to allow clicking through multiple figures\n-\n-\n import abc\n import base64\n import contextlib\n", "test_patch": "", "problem_statement": "[Doc]: Remove old TODO's from animation.py\n### Documentation Link\n\nhttps://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/animation.py\n\n### Problem\n\nThere are some TODO's that appear to be out of date:\r\n\r\n- TODO for documentation to be created\r\n- The SciPy Cookbook looks like it isn't really maintained anymore, should we remove the TODO to update?\r\n- TODO for blit on Qt4 - Qt4 has been unsupported since 2015.\r\n\r\n```\r\n TODO:\r\n * Documentation -- this will need a new section of the User's Guide.\r\n      Both for Animations and just timers.\r\n   - Also need to update\r\n     https://scipy-cookbook.readthedocs.io/items/Matplotlib_Animations.html\r\n * Blit\r\n   * Currently broken with Qt4 for widgets that don't start on screen\r\n```\r\n\n\n### Suggested improvement\n\nRemove old and out-of-date TODO's\n", "hints_text": "Thanks for catching this! The documentation todo is I think covered by #27687 \r\n\r\nWould you like to open the PR to remove these TODOs?\nSure, I'll get on that", "created_at": "2024-08-02T18:56:37Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28649, "instance_id": "matplotlib__matplotlib-28649", "issue_numbers": ["28648"], "base_commit": "adb97e848ca88f0b9abc5b1c5085f548847e3f8f", "patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 981365d852be..24aaa349ee05 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1365,7 +1365,9 @@ def format_cursor_data(self, data):\n                     delta = np.diff(\n                         self.norm.boundaries[neigh_idx:cur_idx + 2]\n                     ).max()\n-\n+                elif self.norm.vmin == self.norm.vmax:\n+                    # singular norms, use delta of 10% of only value\n+                    delta = np.abs(self.norm.vmin * .1)\n                 else:\n                     # Midpoints of neighboring color intervals.\n                     neighbors = self.norm.inverse(\ndiff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex e4f60aac37a8..2411784af3ec 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -2252,6 +2252,10 @@ def _g_sig_digits(value, delta):\n     it is known with an error of *delta*.\n     \"\"\"\n     if delta == 0:\n+        if value == 0:\n+            # if both value and delta are 0, np.spacing below returns 5e-324\n+            # which results in rather silly results\n+            return 3\n         # delta = 0 may occur when trying to format values over a tiny range;\n         # in that case, replace it by the distance to the closest float.\n         delta = abs(np.spacing(value))\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py\nindex dfacfccb3e0e..6de1754f9ed7 100644\n--- a/lib/matplotlib/tests/test_image.py\n+++ b/lib/matplotlib/tests/test_image.py\n@@ -390,7 +390,8 @@ def test_cursor_data_nonuniform(xy, data):\n         ([[.123, .987]], \"[0.123]\"),\n         ([[np.nan, 1, 2]], \"[]\"),\n         ([[1, 1+1e-15]], \"[1.0000000000000000]\"),\n-        ([[-1, -1]], \"[-1.0000000000000000]\"),\n+        ([[-1, -1]], \"[-1.0]\"),\n+        ([[0, 0]], \"[0.00]\"),\n     ])\n def test_format_cursor_data(data, text):\n     from matplotlib.backend_bases import MouseEvent\n", "problem_statement": "[Bug]: format_image_data on an image of only zeros produces a large number of zeros\n### Bug summary\n\nIf you use imshow, and then mouseover the image, the value is listed at the bottom of the plot.\r\nHowever, if the image contains only zeros, the result is a comical number of zeros.\n\n### Code for reproduction\n\n```Python\nimport matplotlib\r\nimport numpy as np\r\nmatplotlib.use('TkAgg')\r\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\nim = ax.imshow(np.zeros((4, 4)))\r\nfig.show()\n```\n\n\n### Actual outcome\n\nWhen you mouse-over the image it shows a large number of zeros (see bottom of image).\r\n![image](https://github.com/user-attachments/assets/e1cb7d31-31a2-48f8-afd5-0dd57446ec38)\n\n### Expected outcome\n\n0.0 should be at the bottom of the page and the window should retain its original size:\r\n![image](https://github.com/user-attachments/assets/25f03995-ea55-4eea-b9ee-1763513c7cbf)\r\n\n\n### Additional information\n\ntest_image.py\u2192test_image_cursor_formatting()  should test this perscise functionality, but there is a bug in this test where \r\n```py\r\n    data = np.ma.masked_array([0], mask=[False])\r\n    assert im.format_cursor_data(data) == '[0]'\r\n```\r\nshould be\r\n```py\r\n    data = np.ma.masked_array(0, mask=[False])\r\n    assert im.format_cursor_data(data) == '[0]'\r\n```\r\nAnd this causes `im.format_cursor_data` to fallback and '0' is returned. \r\nThis test should be updated as part of a PR to fix this bug. \r\n\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\nmatplotlib_dev, 3.8.2\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout\n", "hints_text": "The issue is singular norms.  We do a bunch of extra logic it https://github.com/matplotlib/matplotlib/blob/adb97e848ca88f0b9abc5b1c5085f548847e3f8f/lib/matplotlib/artist.py#L1349-L1377 to estimate a \"good\" number of digits via https://github.com/matplotlib/matplotlib/blob/adb97e848ca88f0b9abc5b1c5085f548847e3f8f/lib/matplotlib/cbook.py#L2249-L2267\r\n\r\n\r\n```\r\nIn [10]: import matplotlib.cbook as mc\r\n\r\nIn [11]: mc._g_sig_digits(0, 0)\r\nOut[13]: 325\r\n\r\nIn [14]: mc._g_sig_digits(0, .1)\r\nOut[14]: 2\r\n\r\nIn [15]: mc._g_sig_digits(0, 0)\r\nOut[15]: 325\r\n\r\nIn [16]: mc._g_sig_digits(0, .00001)\r\nOut[16]: 6\r\n\r\nIn [17]: mc._g_sig_digits(0, .000001)\r\nOut[17]: 7\r\n\r\nIn [18]: mc._g_sig_digits(0, .0001)\r\nOut[18]: 5\r\n\r\nIn [19]: mc._g_sig_digits(.1, 0)\r\nOut[19]: 17\r\n```\r\n\r\nI have some ideas, will open a PR shortly.", "created_at": "2024-08-02T16:28:55Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28644, "instance_id": "matplotlib__matplotlib-28644", "issue_numbers": ["28639"], "base_commit": "f4f40ba46f4ba073d932df1a8884a06272aa775f", "patch": "diff --git a/doc/conf.py b/doc/conf.py\nindex 882370b7e255..7e8c58489618 100644\n--- a/doc/conf.py\n+++ b/doc/conf.py\n@@ -514,10 +514,9 @@ def js_tag_with_cache_busting(js):\n             f\"https://matplotlib.org/devdocs/_static/switcher.json?{SHA}\"\n         ),\n         \"version_match\": (\n-            # The start version to show. This must be in switcher.json.\n-            # We either go to 'stable' or to 'devdocs'\n-            'stable' if matplotlib.__version_info__.releaselevel == 'final'\n-            else 'devdocs')\n+            matplotlib.__version__\n+            if matplotlib.__version_info__.releaselevel == 'final'\n+            else 'dev')\n     },\n     \"navbar_end\": [\"theme-switcher\", \"version-switcher\", \"mpl_icon_links\"],\n     \"navbar_persistent\": [\"search-button\"],\n", "test_patch": "", "problem_statement": "[Doc]: Version switcher is broken\n### Documentation Link\r\n\r\n_No response_\r\n\r\n### Problem\r\n\r\n- Start at: https://matplotlib.org/stable/ - the switcher shows \"choose version\" (?)\r\n- In the switcher select \"3.10 (dev)\" - you are directed to the correct page but the switcher still shows \"choose version\"\r\n- In the switcher select \"3.9 (stabe)\" - you are directed to the correct page but the switcher still shows \"choose version\"\r\n- In the switcher select \"3.8\" - you are directed to the correct page but the switcher still shows \"stable\"\r\n- In the switcher select \"3.87 - you are directed to the correct page but the switcher again shows \"stable\" and is now broken (i.e. does not have a dropdown anymore)\r\n\r\n\r\n\r\n### Suggested improvement\r\n\r\nI'm not really sure what's going on. https://matplotlib.org/devdocs/_static/switcher.json is used, which is the correct file.\r\n\r\nquestions:\r\n- is `version: \"3.9.1\"` in switcher.json correct or should this be `version: \"stable\"`?\r\n- I don't really understand the config `switcher` / `version_match`. [pydata-sphinx-theme docs](https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/version-dropdown.html#version-switcher-dropdowns) say\r\n\r\n  > a string stating the version of the documentation that is currently being browsed.\r\n\r\n  Is the change in #23175 ok to set this to \"stable\" or does this have to be a unique name across versions?\n", "hints_text": "", "created_at": "2024-08-01T23:36:19Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28632, "instance_id": "matplotlib__matplotlib-28632", "issue_numbers": ["28250"], "base_commit": "3d37d7a0cb32298680828a29b5d98e59c753ef92", "patch": "diff --git a/doc/conf.py b/doc/conf.py\nindex 7e8c58489618..ea1e75c20af5 100644\n--- a/doc/conf.py\n+++ b/doc/conf.py\n@@ -276,7 +276,8 @@ def tutorials_download_error(record):\n     'matplotlib_animations': True,\n     'min_reported_time': 1,\n     'plot_gallery': 'True',  # sphinx-gallery/913\n-    'reference_url': {'matplotlib': None},\n+    'reference_url': {'matplotlib': None, 'mpl_toolkits': None},\n+    'prefer_full_module': {r'mpl_toolkits\\.'},\n     'remove_config_comments': True,\n     'reset_modules': ('matplotlib', clear_basic_units),\n     'subsection_order': gallery_order_sectionorder,\n", "test_patch": "", "problem_statement": "[Doc]: Sphinx gallery links mispointed for Axes3D methods \n### Documentation Link\r\n\r\nhttps://matplotlib.org/devdocs/gallery/mplot3d/lines3d.html#sphx-glr-gallery-mplot3d-lines3d-py\r\n\r\n### Problem\r\n\r\nThe `Axes3D` methods which are automatically linked in example code in the docs all incorrectly point towards the `Axes` methods instead.\r\n\r\nFor example `ax.plot` [here](https://matplotlib.org/devdocs/gallery/mplot3d/lines3d.html#sphx-glr-gallery-mplot3d-lines3d-py) links to [matplotlib.axes.Axes.plot](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot) instead of [mpl_toolkits.mplot3d.axes3d.Axes3D.plot](https://matplotlib.org/devdocs/api/_as_gen/mpl_toolkits.mplot3d.axes3d.Axes3D.plot.html#mpl_toolkits.mplot3d.axes3d.Axes3D.plot)\r\n![image](https://github.com/matplotlib/matplotlib/assets/14363975/6c53d962-e8c0-459d-a93f-a6bd8c021826)\r\n\r\n\r\n### Suggested improvement\r\n\r\nNot sure if there's a way to type hint this in all the example code, or somehow make Sphinx recognize this.\n", "hints_text": "Hmm wonder changing the config to prefer full module names might work?  https://sphinx-gallery.github.io/stable/configuration.html#resolving-module-paths\n\nFar as I can tell we're not doing that right now\nhttps://github.com/matplotlib/matplotlib/blob/main/doc%2Fconf.py#L252\nGood find @story645 I'll give that a shot!\nDid not work unfortunately\nSo after I couldn't get any configuration to work, I went down the rabbit hole of trying to figure out how sphinx-gallery is parsing this and uh [link to collab](https://colab.research.google.com/drive/1tXcEGsEjUhiHymUBjTK7oyxRZ8NmBx8d?usp=sharing) I'm not sure if it's parsing down to the chaining -> pandas doesn't use sphinx gallery and seaborn doesn't seem to have the code linking feature enabled. \r\n\r\nUh @larsoner  any ideas? \nUnfortunately not. It is a bit of a rabbit hole and I have to spend a lot of time to figure out why it does the wrong thing sometimes. In theory it should look at the `__class__` of the instance and resolve  `mpl_toolkits.mplot3d.axes3d.Axes3D` properly, not sure why it wouldn't. Maybe becaues of the `mpl_toolkits` namespace instead of `matplotlib` or something?\nsphinx-gallery 0.17.0 is out now with the above fix, so this should be fixed the next time the docs are built.\nIs there an example of a working docs build to check this? I'm not seeing one at the moment in the pipelines.\nUnfortunately, 0.17.0 also broke some things, so there hasn't been a working build on CircleCI; I am discussing fixes with upstream right now, so it might have to wait for 0.17.1.\nSorry, looking at it again, this isn't fixed yet even with 0.17.0. It turns out that I've only fixed multiple modules if resolving via intersphinx, i.e., when you are _using_ Matplotlib. It didn't fix things for when you're building something and it consists of multiple modules.", "created_at": "2024-08-01T07:10:33Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28629, "instance_id": "matplotlib__matplotlib-28629", "issue_numbers": ["28623", "0000"], "base_commit": "30f803b2e9b5e237c5c31df57f657ae69bec240d", "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex 483c9a3db15f..158d4a02ee61 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1362,7 +1362,7 @@ def get_tightbbox(self, renderer=None, *, for_layout_only=False):\n         collapsed to near zero.  This allows tight/constrained_layout to ignore\n         too-long labels when doing their layout.\n         \"\"\"\n-        if not self.get_visible():\n+        if not self.get_visible() or for_layout_only and not self.get_in_layout():\n             return\n         if renderer is None:\n             renderer = self.figure._get_renderer()\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axis.py b/lib/matplotlib/tests/test_axis.py\nindex 97b5f88dede1..33af30662a33 100644\n--- a/lib/matplotlib/tests/test_axis.py\n+++ b/lib/matplotlib/tests/test_axis.py\n@@ -8,3 +8,24 @@ def test_tick_labelcolor_array():\n     # Smoke test that we can instantiate a Tick with labelcolor as array.\n     ax = plt.axes()\n     XTick(ax, 0, labelcolor=np.array([1, 0, 0, 1]))\n+\n+\n+def test_axis_not_in_layout():\n+    fig1, (ax1_left, ax1_right) = plt.subplots(ncols=2, layout='constrained')\n+    fig2, (ax2_left, ax2_right) = plt.subplots(ncols=2, layout='constrained')\n+\n+    # 100 label overlapping the end of the axis\n+    ax1_left.set_xlim([0, 100])\n+    # 100 label not overlapping the end of the axis\n+    ax2_left.set_xlim([0, 120])\n+\n+    for ax in ax1_left, ax2_left:\n+        ax.set_xticks([0, 100])\n+        ax.xaxis.set_in_layout(False)\n+\n+    for fig in fig1, fig2:\n+        fig.draw_without_rendering()\n+\n+    # Positions should not be affected by overlapping 100 label\n+    assert ax1_left.get_position().bounds == ax2_left.get_position().bounds\n+    assert ax1_right.get_position().bounds == ax2_right.get_position().bounds\n", "problem_statement": "[Bug]: `Axis.set_in_layout` not respected?\n### Bug summary\r\n\r\nIf a tick label appears right at the end of an axis, constrained layout increases the gap between the subplots to accommodate it.  This is reasonable behaviour, but sometimes I would like to turn it off.  I tried setting `xaxis.set_in_layout(False)`, but that doesn't seem to make a difference.  Should it work?\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\ndef example_plot(xmax):   \r\n    fig, (ax1, ax2) = plt.subplots(ncols=2, layout='constrained')\r\n    \r\n    ax1.set_xlim([0, xmax])\r\n    ax1.set_xticks([0, 100])\r\n    ax1.xaxis.set_in_layout(False)\r\n    \r\n    fig.savefig(f'example_x{xmax}.png')\r\n    \r\n    plt.close(fig)\r\n    \r\n    \r\nfor xmax in 100, 120:\r\n    example_plot(xmax)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n`example_x120.png`\r\n![example_x120](https://github.com/user-attachments/assets/986b6055-55c4-4c8e-beb0-10c61d36fcba)\r\n`example_x100.png`\r\n![example_x100](https://github.com/user-attachments/assets/4a3feefb-b26c-4384-b5ce-2d8ef99e200f)\r\n\r\nWhen the \"100\" tick label is at the end of the x-axis the gap between the subplots is bigger.\r\n\r\n### Expected outcome\r\n\r\nI would like the gap between the subplots to not depend on the \"100\" label.\r\n\r\n### Additional information\r\n\r\nI haven't tried, but suspect we could make this work by just returning `None` here if `for_layout_only` is `True` and `self.get_in_layout` is `False`.\r\nhttps://github.com/matplotlib/matplotlib/blob/040091e9ea35df756ee838fe8b83a9deabe16f26/lib/matplotlib/axis.py#L1365-L1366\r\n\r\n### Operating system\r\n\r\nRHEL7\r\n\r\n### Matplotlib Version\r\n\r\n3.9.1\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.12.4\r\n\r\n### Jupyter version\r\n\r\nN/A\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "I don't see why it should not be allowed to work, and your propped change seems good.\nHaving semi-recently looked at #28574, I'm fairly certain that none of the `Axis`, `Spine`, or `Tick`s obey `set_in_layout`, but only because they were never set up that way.\nI assumed it  would be futile to try to set it on the individual tick because of the way they are dynamically generated (my \"real\" example uses `MaxNLocator` on a colorbar).\r\n\r\nI'm unclear why `Spine`s wouldn't work properly as they appear to be handled within the general list of artists:\r\nhttps://github.com/matplotlib/matplotlib/blob/30f803b2e9b5e237c5c31df57f657ae69bec240d/lib/matplotlib/axes/_base.py#L4391-L4421", "created_at": "2024-07-30T16:54:25Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28625, "instance_id": "matplotlib__matplotlib-28625", "issue_numbers": ["28624"], "base_commit": "f7b3def52b39a070064e0e713042cd948c985643", "patch": "diff --git a/lib/matplotlib/axes/_base.pyi b/lib/matplotlib/axes/_base.pyi\nindex 1fdc0750f0bc..362d644d11f2 100644\n--- a/lib/matplotlib/axes/_base.pyi\n+++ b/lib/matplotlib/axes/_base.pyi\n@@ -4,6 +4,7 @@ import datetime\n from collections.abc import Callable, Iterable, Iterator, Sequence\n from matplotlib import cbook\n from matplotlib.artist import Artist\n+from matplotlib.axes import Axes\n from matplotlib.axis import XAxis, YAxis, Tick\n from matplotlib.backend_bases import RendererBase, MouseButton, MouseEvent\n from matplotlib.cbook import CallbackRegistry\n@@ -384,8 +385,8 @@ class _AxesBase(martist.Artist):\n         bbox_extra_artists: Sequence[Artist] | None = ...,\n         for_layout_only: bool = ...\n     ) -> Bbox | None: ...\n-    def twinx(self) -> _AxesBase: ...\n-    def twiny(self) -> _AxesBase: ...\n+    def twinx(self) -> Axes: ...\n+    def twiny(self) -> Axes: ...\n     def get_shared_x_axes(self) -> cbook.GrouperView: ...\n     def get_shared_y_axes(self) -> cbook.GrouperView: ...\n     def label_outer(self, remove_inner_ticks: bool = ...) -> None: ...\n", "test_patch": "", "problem_statement": "[Bug]: Bad type hint in `_AxesBase.twinx()`\n### Bug summary\r\n\r\nIncorrect type annotation for `_AxesBase.twinx()` (should be `Self`, not `_AxesBase`).\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# First create some toy data:\r\nx = np.linspace(0, 2 * np.pi, 400)\r\ny = np.sin(x**2)\r\nz = np.cos(x**2)\r\n\r\n# Create four polar Axes and access them through the returned array\r\nfig, axsA = plt.subplots()\r\naxsA.plot(x, y)\r\naxsB = axsA.twinx()\r\naxsB.plot(x, z)  # <-- Cannot access attribute \"plot\" for class \"_AxesBase\"\r\n```\r\n\r\n### Actual outcome\r\n\r\naxsB is of type `_AxesBase`\r\n\r\n### Expected outcome\r\n\r\nThe type of `axsB` should be the same as the type of `axsA`.\r\n\r\n### Matplotlib Version\r\n\r\n3.9.1\n", "hints_text": "Potentially fixing this requires adding `typing_extensions` as a dependency, since `typing.Self` is not available in 3.10.\r\nOtherwise, users might not have it in their virtual environment when installing `matplotlib`, leaving the stubs broken.", "created_at": "2024-07-29T18:06:28Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28609, "instance_id": "matplotlib__matplotlib-28609", "issue_numbers": ["28595", "0000"], "base_commit": "e6f2b0c72be421f3b324a55fca1dbc367405cce5", "patch": "diff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py\nindex 84e4f96ad4a7..623e1eb9ad82 100644\n--- a/lib/matplotlib/backends/backend_svg.py\n+++ b/lib/matplotlib/backends/backend_svg.py\n@@ -715,6 +715,8 @@ def draw_markers(\n             self._markers[dictkey] = oid\n \n         writer.start('g', **self._get_clip_attrs(gc))\n+        if gc.get_url() is not None:\n+            self.writer.start('a', {'xlink:href': gc.get_url()})\n         trans_and_flip = self._make_flip_transform(trans)\n         attrib = {'xlink:href': f'#{oid}'}\n         clip = (0, 0, self.width*72, self.height*72)\n@@ -726,6 +728,8 @@ def draw_markers(\n                 attrib['y'] = _short_float_fmt(y)\n                 attrib['style'] = self._get_style(gc, rgbFace)\n                 writer.element('use', attrib=attrib)\n+        if gc.get_url() is not None:\n+            self.writer.end('a')\n         writer.end('g')\n \n     def draw_path_collection(self, gc, master_transform, paths, all_transforms,\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 689495eb31ac..b850a9ab6ff5 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -343,13 +343,17 @@ def test_url():\n     s.set_urls(['https://example.com/foo', 'https://example.com/bar', None])\n \n     # Line2D\n-    p, = plt.plot([1, 3], [6, 5])\n+    p, = plt.plot([2, 3, 4], [4, 5, 6])\n     p.set_url('https://example.com/baz')\n \n+    # Line2D markers-only\n+    p, = plt.plot([3, 4, 5], [4, 5, 6], linestyle='none', marker='x')\n+    p.set_url('https://example.com/quux')\n+\n     b = BytesIO()\n     fig.savefig(b, format='svg')\n     b = b.getvalue()\n-    for v in [b'foo', b'bar', b'baz']:\n+    for v in [b'foo', b'bar', b'baz', b'quux']:\n         assert b'https://example.com/' + v in b\n \n \n", "problem_statement": "[Bug]: set_url without effect for instances of Line2D with linestyle 'none'\n### Bug summary\n\nBug summary\r\nUsing SVG-backend, set_url does nothing for for instances of Line2D with linestyle='none', whereas it works for other objects.\r\nRelated to closed issue: https://github.com/matplotlib/matplotlib/issues/17336\n\n### Code for reproduction\n\n```Python\nfrom matplotlib import pyplot as plt\r\n\r\nf = plt.figure()\r\ns = plt.scatter([1, 2, 3], [4, 5, 6])\r\ns.set_urls(['http://www.bbc.co.uk/news', 'http://www.google.com', None])\r\np = plt.plot([1, 3], [6, 5], linestyle='none', color='green', marker='x')\r\np[0].set_url('http://www.duckduckgo.com')\r\n\r\nprint(s.get_urls())\r\nprint(p[0].get_url())\r\n\r\nimport io\r\nsvg = io.StringIO()\r\nf.savefig(svg, format='svg')\r\nf.savefig('test.svg', format='svg')\r\n\r\nassert \"http://www.google.com\" in svg.getvalue()\r\nassert \"http://www.duckduckgo.com\" in svg.getvalue()\n```\n\n\n### Actual outcome\n\nException has occurred: AssertionError\r\nexception: no description\r\n  File \"/home/peunting/from matplotlib import pyplot as plt.py\", line 18, in <module>\r\n    assert \"http://www.duckduckgo.com\" in svg.getvalue()\r\nAssertionError: \n\n### Expected outcome\n\nBoth http://www.google.com and http://www.duckduckgo.com should be present in the svg. When the svg is opened in a browser, the plot markers of the line plot should be clickable as well.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nRocky\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\n3.10.12\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "I think in lines.py, line 812, the urls for the markers should be set:\r\nhttps://github.com/matplotlib/matplotlib/blob/ed17e00da9b8119c0a01290ebcace64bc0120b84/lib/matplotlib/lines.py#L809-L814\r\n@QuLogic : Do you have an idea why it is not working?\nYes, that code means the backend receives the URL, but doesn't necessarily mean the backend does anything with it. For SVG, I don't see any handling of URLs for plain markers:\r\nhttps://github.com/matplotlib/matplotlib/blob/e6f2b0c72be421f3b324a55fca1dbc367405cce5/lib/matplotlib/backends/backend_svg.py#L692-L729", "created_at": "2024-07-23T20:37:00Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28594, "instance_id": "matplotlib__matplotlib-28594", "issue_numbers": ["28590"], "base_commit": "a04e35f76f15020b43d06b4644b5e3d544b07deb", "patch": "diff --git a/lib/matplotlib/projections/geo.py b/lib/matplotlib/projections/geo.py\nindex 498b2f72ebb4..89a9de7618be 100644\n--- a/lib/matplotlib/projections/geo.py\n+++ b/lib/matplotlib/projections/geo.py\n@@ -151,6 +151,15 @@ def set_xlim(self, *args, **kwargs):\n                         \"not supported.  Please consider using Cartopy.\")\n \n     set_ylim = set_xlim\n+    set_xbound = set_xlim\n+    set_ybound = set_ylim\n+\n+    def invert_xaxis(self):\n+        \"\"\"Not supported. Please consider using Cartopy.\"\"\"\n+        raise TypeError(\"Changing axes limits of a geographic projection is \"\n+                        \"not supported.  Please consider using Cartopy.\")\n+\n+    invert_yaxis = invert_xaxis\n \n     def format_coord(self, lon, lat):\n         \"\"\"Return a format string formatting the coordinate.\"\"\"\n", "test_patch": "", "problem_statement": "[ENH]: Geo Projections support for inverting axis\n### Problem\n\nIt is common in astronomy to plot the x-axis inverted from the typical direction, for example:\r\n![image](https://github.com/user-attachments/assets/bfdc10c2-860e-4adf-8069-13a5efde8d51)\r\n\r\nCurrently if you attempt to invert the x axis of a geo projection, nothing happens:\r\n\r\n``` python\r\nax = plt.subplot(2, 1, 1, projection=\"mollweide\")\r\nax.invert_xaxis()    \r\nplt.subplot(2, 1, 2, projection=\"mollweide\")\r\n```\r\n![image](https://github.com/user-attachments/assets/6542c030-762c-4d2f-a757-de8030f08c4e)\r\n\r\nThe current work around is to manually invert the inputs and labels. I have seen this solution implemented in at least one astronomy package. \r\n\r\nThanks for everything, I have been a regular user of matplotlib for over a decade! Great stuff!\r\n\r\nI did some digging attempting to figure out how to implement this change myself, but I cannot figure out the internal structure of what is happening.\n\n### Proposed solution\n\n_No response_\n", "hints_text": "Hi @dahlend have you tried with Cartopy?  I believe it works there https://github.com/SciTools/cartopy/issues/1606 (my field is not astronomy, so I have no deep knowledge or experience).", "created_at": "2024-07-19T08:31:00Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28587, "instance_id": "matplotlib__matplotlib-28587", "issue_numbers": ["18608", "0000"], "base_commit": "f7b3def52b39a070064e0e713042cd948c985643", "patch": "diff --git a/doc/users/next_whats_new/diverging_colormaps.rst b/doc/users/next_whats_new/diverging_colormaps.rst\nnew file mode 100644\nindex 000000000000..8137acbf13d2\n--- /dev/null\n+++ b/doc/users/next_whats_new/diverging_colormaps.rst\n@@ -0,0 +1,24 @@\n+Dark-mode diverging colormaps\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Three diverging colormaps have been added: \"berlin\", \"managua\", and \"vanimo\".\n+They are dark-mode diverging colormaps, with minimum lightness at the center,\n+and maximum at the extremes. These are taken from F. Crameri's Scientific\n+colour maps version 8.0.1 (DOI: https://doi.org/10.5281/zenodo.1243862).\n+\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Example figures using \"imshow\" with dark-mode diverging colormaps on positive and negative data. First panel: \"berlin\" (blue to red with a black center); second panel: \"managua\" (orange to cyan with a dark purple center); third panel: \"vanimo\" (pink to green with a black center).\n+\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    vals = np.linspace(-5, 5, 100)\n+    x, y = np.meshgrid(vals, vals)\n+    img = np.sin(x*y)\n+\n+    _, ax = plt.subplots(1, 3)\n+    ax[0].imshow(img, cmap=plt.cm.berlin)\n+    ax[1].imshow(img, cmap=plt.cm.managua)\n+    ax[2].imshow(img, cmap=plt.cm.vanimo)\ndiff --git a/galleries/examples/color/colormap_reference.py b/galleries/examples/color/colormap_reference.py\nindex ee01d7432b37..38e91ad25408 100644\n--- a/galleries/examples/color/colormap_reference.py\n+++ b/galleries/examples/color/colormap_reference.py\n@@ -29,7 +29,8 @@\n             'hot', 'afmhot', 'gist_heat', 'copper']),\n          ('Diverging', [\n             'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',\n-            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic']),\n+            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic',\n+            'berlin', 'managua', 'vanimo']),\n          ('Cyclic', ['twilight', 'twilight_shifted', 'hsv']),\n          ('Qualitative', [\n             'Pastel1', 'Pastel2', 'Paired', 'Accent',\ndiff --git a/galleries/users_explain/colors/colormaps.py b/galleries/users_explain/colors/colormaps.py\nindex 92b56d298976..ff146cacf170 100644\n--- a/galleries/users_explain/colors/colormaps.py\n+++ b/galleries/users_explain/colors/colormaps.py\n@@ -175,10 +175,15 @@ def plot_color_gradients(category, cmap_list):\n # equal minimum :math:`L^*` values at opposite ends of the colormap. By these\n # measures, BrBG and RdBu are good options. coolwarm is a good option, but it\n # doesn't span a wide range of :math:`L^*` values (see grayscale section below).\n+#\n+# Berlin, Managua, and Vanimo are dark-mode diverging colormaps, with minimum\n+# lightness at the center, and maximum at the extremes. These are taken from\n+# F. Crameri's [scientific colour maps]_ version 8.0.1.\n \n plot_color_gradients('Diverging',\n                      ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',\n-                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])\n+                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic',\n+                      'berlin', 'managua', 'vanimo'])\n \n # %%\n # Cyclic\n@@ -441,3 +446,4 @@ def plot_color_gradients(cmap_category, cmap_list):\n # .. [colorblindness] http://www.color-blindness.com/\n # .. [IBM] https://doi.org/10.1109/VISUAL.1995.480803\n # .. [turbo] https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html\n+# .. [scientific colour maps] https://doi.org/10.5281/zenodo.1243862\ndiff --git a/lib/matplotlib/_cm_listed.py b/lib/matplotlib/_cm_listed.py\nindex a331ad74a5f0..b90e0a23acb0 100644\n--- a/lib/matplotlib/_cm_listed.py\n+++ b/lib/matplotlib/_cm_listed.py\n@@ -2057,6 +2057,779 @@\n                [0.49321, 0.01963, 0.00955],\n                [0.47960, 0.01583, 0.01055]]\n \n+_berlin_data = [\n+    [0.62108, 0.69018, 0.99951],\n+    [0.61216, 0.68923, 0.99537],\n+    [0.6032, 0.68825, 0.99124],\n+    [0.5942, 0.68726, 0.98709],\n+    [0.58517, 0.68625, 0.98292],\n+    [0.57609, 0.68522, 0.97873],\n+    [0.56696, 0.68417, 0.97452],\n+    [0.55779, 0.6831, 0.97029],\n+    [0.54859, 0.68199, 0.96602],\n+    [0.53933, 0.68086, 0.9617],\n+    [0.53003, 0.67969, 0.95735],\n+    [0.52069, 0.67848, 0.95294],\n+    [0.51129, 0.67723, 0.94847],\n+    [0.50186, 0.67591, 0.94392],\n+    [0.49237, 0.67453, 0.9393],\n+    [0.48283, 0.67308, 0.93457],\n+    [0.47324, 0.67153, 0.92975],\n+    [0.46361, 0.6699, 0.92481],\n+    [0.45393, 0.66815, 0.91974],\n+    [0.44421, 0.66628, 0.91452],\n+    [0.43444, 0.66427, 0.90914],\n+    [0.42465, 0.66212, 0.90359],\n+    [0.41482, 0.65979, 0.89785],\n+    [0.40498, 0.65729, 0.89191],\n+    [0.39514, 0.65458, 0.88575],\n+    [0.3853, 0.65167, 0.87937],\n+    [0.37549, 0.64854, 0.87276],\n+    [0.36574, 0.64516, 0.8659],\n+    [0.35606, 0.64155, 0.8588],\n+    [0.34645, 0.63769, 0.85145],\n+    [0.33698, 0.63357, 0.84386],\n+    [0.32764, 0.62919, 0.83602],\n+    [0.31849, 0.62455, 0.82794],\n+    [0.30954, 0.61966, 0.81963],\n+    [0.30078, 0.6145, 0.81111],\n+    [0.29231, 0.60911, 0.80238],\n+    [0.2841, 0.60348, 0.79347],\n+    [0.27621, 0.59763, 0.78439],\n+    [0.26859, 0.59158, 0.77514],\n+    [0.26131, 0.58534, 0.76578],\n+    [0.25437, 0.57891, 0.7563],\n+    [0.24775, 0.57233, 0.74672],\n+    [0.24146, 0.5656, 0.73707],\n+    [0.23552, 0.55875, 0.72735],\n+    [0.22984, 0.5518, 0.7176],\n+    [0.2245, 0.54475, 0.7078],\n+    [0.21948, 0.53763, 0.698],\n+    [0.21469, 0.53043, 0.68819],\n+    [0.21017, 0.52319, 0.67838],\n+    [0.20589, 0.5159, 0.66858],\n+    [0.20177, 0.5086, 0.65879],\n+    [0.19788, 0.50126, 0.64903],\n+    [0.19417, 0.4939, 0.63929],\n+    [0.19056, 0.48654, 0.62957],\n+    [0.18711, 0.47918, 0.6199],\n+    [0.18375, 0.47183, 0.61024],\n+    [0.1805, 0.46447, 0.60062],\n+    [0.17737, 0.45712, 0.59104],\n+    [0.17426, 0.44979, 0.58148],\n+    [0.17122, 0.44247, 0.57197],\n+    [0.16824, 0.43517, 0.56249],\n+    [0.16529, 0.42788, 0.55302],\n+    [0.16244, 0.42061, 0.5436],\n+    [0.15954, 0.41337, 0.53421],\n+    [0.15674, 0.40615, 0.52486],\n+    [0.15391, 0.39893, 0.51552],\n+    [0.15112, 0.39176, 0.50623],\n+    [0.14835, 0.38459, 0.49697],\n+    [0.14564, 0.37746, 0.48775],\n+    [0.14288, 0.37034, 0.47854],\n+    [0.14014, 0.36326, 0.46939],\n+    [0.13747, 0.3562, 0.46024],\n+    [0.13478, 0.34916, 0.45115],\n+    [0.13208, 0.34215, 0.44209],\n+    [0.1294, 0.33517, 0.43304],\n+    [0.12674, 0.3282, 0.42404],\n+    [0.12409, 0.32126, 0.41507],\n+    [0.12146, 0.31435, 0.40614],\n+    [0.1189, 0.30746, 0.39723],\n+    [0.11632, 0.30061, 0.38838],\n+    [0.11373, 0.29378, 0.37955],\n+    [0.11119, 0.28698, 0.37075],\n+    [0.10861, 0.28022, 0.362],\n+    [0.10616, 0.2735, 0.35328],\n+    [0.10367, 0.26678, 0.34459],\n+    [0.10118, 0.26011, 0.33595],\n+    [0.098776, 0.25347, 0.32734],\n+    [0.096347, 0.24685, 0.31878],\n+    [0.094059, 0.24026, 0.31027],\n+    [0.091788, 0.23373, 0.30176],\n+    [0.089506, 0.22725, 0.29332],\n+    [0.087341, 0.2208, 0.28491],\n+    [0.085142, 0.21436, 0.27658],\n+    [0.083069, 0.20798, 0.26825],\n+    [0.081098, 0.20163, 0.25999],\n+    [0.07913, 0.19536, 0.25178],\n+    [0.077286, 0.18914, 0.24359],\n+    [0.075571, 0.18294, 0.2355],\n+    [0.073993, 0.17683, 0.22743],\n+    [0.07241, 0.17079, 0.21943],\n+    [0.071045, 0.1648, 0.2115],\n+    [0.069767, 0.1589, 0.20363],\n+    [0.068618, 0.15304, 0.19582],\n+    [0.06756, 0.14732, 0.18812],\n+    [0.066665, 0.14167, 0.18045],\n+    [0.065923, 0.13608, 0.17292],\n+    [0.065339, 0.1307, 0.16546],\n+    [0.064911, 0.12535, 0.15817],\n+    [0.064636, 0.12013, 0.15095],\n+    [0.064517, 0.11507, 0.14389],\n+    [0.064554, 0.11022, 0.13696],\n+    [0.064749, 0.10543, 0.13023],\n+    [0.0651, 0.10085, 0.12357],\n+    [0.065383, 0.096469, 0.11717],\n+    [0.065574, 0.092338, 0.11101],\n+    [0.065892, 0.088201, 0.10498],\n+    [0.066388, 0.084134, 0.099288],\n+    [0.067108, 0.080051, 0.093829],\n+    [0.068193, 0.076099, 0.08847],\n+    [0.06972, 0.072283, 0.083025],\n+    [0.071639, 0.068654, 0.077544],\n+    [0.073978, 0.065058, 0.07211],\n+    [0.076596, 0.061657, 0.066651],\n+    [0.079637, 0.05855, 0.061133],\n+    [0.082963, 0.055666, 0.055745],\n+    [0.086537, 0.052997, 0.050336],\n+    [0.090315, 0.050699, 0.04504],\n+    [0.09426, 0.048753, 0.039773],\n+    [0.098319, 0.047041, 0.034683],\n+    [0.10246, 0.045624, 0.030074],\n+    [0.10673, 0.044705, 0.026012],\n+    [0.11099, 0.043972, 0.022379],\n+    [0.11524, 0.043596, 0.01915],\n+    [0.11955, 0.043567, 0.016299],\n+    [0.12381, 0.043861, 0.013797],\n+    [0.1281, 0.044459, 0.011588],\n+    [0.13232, 0.045229, 0.0095315],\n+    [0.13645, 0.046164, 0.0078947],\n+    [0.14063, 0.047374, 0.006502],\n+    [0.14488, 0.048634, 0.0053266],\n+    [0.14923, 0.049836, 0.0043455],\n+    [0.15369, 0.050997, 0.0035374],\n+    [0.15831, 0.05213, 0.0028824],\n+    [0.16301, 0.053218, 0.0023628],\n+    [0.16781, 0.05424, 0.0019629],\n+    [0.17274, 0.055172, 0.001669],\n+    [0.1778, 0.056018, 0.0014692],\n+    [0.18286, 0.05682, 0.0013401],\n+    [0.18806, 0.057574, 0.0012617],\n+    [0.19323, 0.058514, 0.0012261],\n+    [0.19846, 0.05955, 0.0012271],\n+    [0.20378, 0.060501, 0.0012601],\n+    [0.20909, 0.061486, 0.0013221],\n+    [0.21447, 0.06271, 0.0014116],\n+    [0.2199, 0.063823, 0.0015287],\n+    [0.22535, 0.065027, 0.0016748],\n+    [0.23086, 0.066297, 0.0018529],\n+    [0.23642, 0.067645, 0.0020675],\n+    [0.24202, 0.069092, 0.0023247],\n+    [0.24768, 0.070458, 0.0026319],\n+    [0.25339, 0.071986, 0.0029984],\n+    [0.25918, 0.07364, 0.003435],\n+    [0.265, 0.075237, 0.0039545],\n+    [0.27093, 0.076965, 0.004571],\n+    [0.27693, 0.078822, 0.0053006],\n+    [0.28302, 0.080819, 0.0061608],\n+    [0.2892, 0.082879, 0.0071713],\n+    [0.29547, 0.085075, 0.0083494],\n+    [0.30186, 0.08746, 0.0097258],\n+    [0.30839, 0.089912, 0.011455],\n+    [0.31502, 0.09253, 0.013324],\n+    [0.32181, 0.095392, 0.015413],\n+    [0.32874, 0.098396, 0.01778],\n+    [0.3358, 0.10158, 0.020449],\n+    [0.34304, 0.10498, 0.02344],\n+    [0.35041, 0.10864, 0.026771],\n+    [0.35795, 0.11256, 0.030456],\n+    [0.36563, 0.11666, 0.034571],\n+    [0.37347, 0.12097, 0.039115],\n+    [0.38146, 0.12561, 0.043693],\n+    [0.38958, 0.13046, 0.048471],\n+    [0.39785, 0.13547, 0.053136],\n+    [0.40622, 0.1408, 0.057848],\n+    [0.41469, 0.14627, 0.062715],\n+    [0.42323, 0.15198, 0.067685],\n+    [0.43184, 0.15791, 0.073044],\n+    [0.44044, 0.16403, 0.07862],\n+    [0.44909, 0.17027, 0.084644],\n+    [0.4577, 0.17667, 0.090869],\n+    [0.46631, 0.18321, 0.097335],\n+    [0.4749, 0.18989, 0.10406],\n+    [0.48342, 0.19668, 0.11104],\n+    [0.49191, 0.20352, 0.11819],\n+    [0.50032, 0.21043, 0.1255],\n+    [0.50869, 0.21742, 0.13298],\n+    [0.51698, 0.22443, 0.14062],\n+    [0.5252, 0.23154, 0.14835],\n+    [0.53335, 0.23862, 0.15626],\n+    [0.54144, 0.24575, 0.16423],\n+    [0.54948, 0.25292, 0.17226],\n+    [0.55746, 0.26009, 0.1804],\n+    [0.56538, 0.26726, 0.18864],\n+    [0.57327, 0.27446, 0.19692],\n+    [0.58111, 0.28167, 0.20524],\n+    [0.58892, 0.28889, 0.21362],\n+    [0.59672, 0.29611, 0.22205],\n+    [0.60448, 0.30335, 0.23053],\n+    [0.61223, 0.31062, 0.23905],\n+    [0.61998, 0.31787, 0.24762],\n+    [0.62771, 0.32513, 0.25619],\n+    [0.63544, 0.33244, 0.26481],\n+    [0.64317, 0.33975, 0.27349],\n+    [0.65092, 0.34706, 0.28218],\n+    [0.65866, 0.3544, 0.29089],\n+    [0.66642, 0.36175, 0.29964],\n+    [0.67419, 0.36912, 0.30842],\n+    [0.68198, 0.37652, 0.31722],\n+    [0.68978, 0.38392, 0.32604],\n+    [0.6976, 0.39135, 0.33493],\n+    [0.70543, 0.39879, 0.3438],\n+    [0.71329, 0.40627, 0.35272],\n+    [0.72116, 0.41376, 0.36166],\n+    [0.72905, 0.42126, 0.37062],\n+    [0.73697, 0.4288, 0.37962],\n+    [0.7449, 0.43635, 0.38864],\n+    [0.75285, 0.44392, 0.39768],\n+    [0.76083, 0.45151, 0.40675],\n+    [0.76882, 0.45912, 0.41584],\n+    [0.77684, 0.46676, 0.42496],\n+    [0.78488, 0.47441, 0.43409],\n+    [0.79293, 0.48208, 0.44327],\n+    [0.80101, 0.48976, 0.45246],\n+    [0.80911, 0.49749, 0.46167],\n+    [0.81722, 0.50521, 0.47091],\n+    [0.82536, 0.51296, 0.48017],\n+    [0.83352, 0.52073, 0.48945],\n+    [0.84169, 0.52853, 0.49876],\n+    [0.84988, 0.53634, 0.5081],\n+    [0.85809, 0.54416, 0.51745],\n+    [0.86632, 0.55201, 0.52683],\n+    [0.87457, 0.55988, 0.53622],\n+    [0.88283, 0.56776, 0.54564],\n+    [0.89111, 0.57567, 0.55508],\n+    [0.89941, 0.58358, 0.56455],\n+    [0.90772, 0.59153, 0.57404],\n+    [0.91603, 0.59949, 0.58355],\n+    [0.92437, 0.60747, 0.59309],\n+    [0.93271, 0.61546, 0.60265],\n+    [0.94108, 0.62348, 0.61223],\n+    [0.94945, 0.63151, 0.62183],\n+    [0.95783, 0.63956, 0.63147],\n+    [0.96622, 0.64763, 0.64111],\n+    [0.97462, 0.65572, 0.65079],\n+    [0.98303, 0.66382, 0.66049],\n+    [0.99145, 0.67194, 0.67022],\n+    [0.99987, 0.68007, 0.67995]]\n+\n+_managua_data = [\n+    [1, 0.81263, 0.40424],\n+    [0.99516, 0.80455, 0.40155],\n+    [0.99024, 0.79649, 0.39888],\n+    [0.98532, 0.78848, 0.39622],\n+    [0.98041, 0.7805, 0.39356],\n+    [0.97551, 0.77257, 0.39093],\n+    [0.97062, 0.76468, 0.3883],\n+    [0.96573, 0.75684, 0.38568],\n+    [0.96087, 0.74904, 0.3831],\n+    [0.95601, 0.74129, 0.38052],\n+    [0.95116, 0.7336, 0.37795],\n+    [0.94631, 0.72595, 0.37539],\n+    [0.94149, 0.71835, 0.37286],\n+    [0.93667, 0.7108, 0.37034],\n+    [0.93186, 0.7033, 0.36784],\n+    [0.92706, 0.69585, 0.36536],\n+    [0.92228, 0.68845, 0.36289],\n+    [0.9175, 0.68109, 0.36042],\n+    [0.91273, 0.67379, 0.358],\n+    [0.90797, 0.66653, 0.35558],\n+    [0.90321, 0.65932, 0.35316],\n+    [0.89846, 0.65216, 0.35078],\n+    [0.89372, 0.64503, 0.34839],\n+    [0.88899, 0.63796, 0.34601],\n+    [0.88426, 0.63093, 0.34367],\n+    [0.87953, 0.62395, 0.34134],\n+    [0.87481, 0.617, 0.33902],\n+    [0.87009, 0.61009, 0.3367],\n+    [0.86538, 0.60323, 0.33442],\n+    [0.86067, 0.59641, 0.33213],\n+    [0.85597, 0.58963, 0.32987],\n+    [0.85125, 0.5829, 0.3276],\n+    [0.84655, 0.57621, 0.32536],\n+    [0.84185, 0.56954, 0.32315],\n+    [0.83714, 0.56294, 0.32094],\n+    [0.83243, 0.55635, 0.31874],\n+    [0.82772, 0.54983, 0.31656],\n+    [0.82301, 0.54333, 0.31438],\n+    [0.81829, 0.53688, 0.31222],\n+    [0.81357, 0.53046, 0.3101],\n+    [0.80886, 0.52408, 0.30796],\n+    [0.80413, 0.51775, 0.30587],\n+    [0.7994, 0.51145, 0.30375],\n+    [0.79466, 0.50519, 0.30167],\n+    [0.78991, 0.49898, 0.29962],\n+    [0.78516, 0.4928, 0.29757],\n+    [0.7804, 0.48668, 0.29553],\n+    [0.77564, 0.48058, 0.29351],\n+    [0.77086, 0.47454, 0.29153],\n+    [0.76608, 0.46853, 0.28954],\n+    [0.76128, 0.46255, 0.28756],\n+    [0.75647, 0.45663, 0.28561],\n+    [0.75166, 0.45075, 0.28369],\n+    [0.74682, 0.44491, 0.28178],\n+    [0.74197, 0.4391, 0.27988],\n+    [0.73711, 0.43333, 0.27801],\n+    [0.73223, 0.42762, 0.27616],\n+    [0.72732, 0.42192, 0.2743],\n+    [0.72239, 0.41628, 0.27247],\n+    [0.71746, 0.41067, 0.27069],\n+    [0.71247, 0.40508, 0.26891],\n+    [0.70747, 0.39952, 0.26712],\n+    [0.70244, 0.39401, 0.26538],\n+    [0.69737, 0.38852, 0.26367],\n+    [0.69227, 0.38306, 0.26194],\n+    [0.68712, 0.37761, 0.26025],\n+    [0.68193, 0.37219, 0.25857],\n+    [0.67671, 0.3668, 0.25692],\n+    [0.67143, 0.36142, 0.25529],\n+    [0.6661, 0.35607, 0.25367],\n+    [0.66071, 0.35073, 0.25208],\n+    [0.65528, 0.34539, 0.25049],\n+    [0.6498, 0.34009, 0.24895],\n+    [0.64425, 0.3348, 0.24742],\n+    [0.63866, 0.32953, 0.2459],\n+    [0.633, 0.32425, 0.24442],\n+    [0.62729, 0.31901, 0.24298],\n+    [0.62152, 0.3138, 0.24157],\n+    [0.6157, 0.3086, 0.24017],\n+    [0.60983, 0.30341, 0.23881],\n+    [0.60391, 0.29826, 0.23752],\n+    [0.59793, 0.29314, 0.23623],\n+    [0.59191, 0.28805, 0.235],\n+    [0.58585, 0.28302, 0.23377],\n+    [0.57974, 0.27799, 0.23263],\n+    [0.57359, 0.27302, 0.23155],\n+    [0.56741, 0.26808, 0.23047],\n+    [0.5612, 0.26321, 0.22948],\n+    [0.55496, 0.25837, 0.22857],\n+    [0.54871, 0.25361, 0.22769],\n+    [0.54243, 0.24891, 0.22689],\n+    [0.53614, 0.24424, 0.22616],\n+    [0.52984, 0.23968, 0.22548],\n+    [0.52354, 0.2352, 0.22487],\n+    [0.51724, 0.23076, 0.22436],\n+    [0.51094, 0.22643, 0.22395],\n+    [0.50467, 0.22217, 0.22363],\n+    [0.49841, 0.21802, 0.22339],\n+    [0.49217, 0.21397, 0.22325],\n+    [0.48595, 0.21, 0.22321],\n+    [0.47979, 0.20618, 0.22328],\n+    [0.47364, 0.20242, 0.22345],\n+    [0.46756, 0.1988, 0.22373],\n+    [0.46152, 0.19532, 0.22413],\n+    [0.45554, 0.19195, 0.22465],\n+    [0.44962, 0.18873, 0.22534],\n+    [0.44377, 0.18566, 0.22616],\n+    [0.43799, 0.18266, 0.22708],\n+    [0.43229, 0.17987, 0.22817],\n+    [0.42665, 0.17723, 0.22938],\n+    [0.42111, 0.17474, 0.23077],\n+    [0.41567, 0.17238, 0.23232],\n+    [0.41033, 0.17023, 0.23401],\n+    [0.40507, 0.16822, 0.2359],\n+    [0.39992, 0.1664, 0.23794],\n+    [0.39489, 0.16475, 0.24014],\n+    [0.38996, 0.16331, 0.24254],\n+    [0.38515, 0.16203, 0.24512],\n+    [0.38046, 0.16093, 0.24792],\n+    [0.37589, 0.16, 0.25087],\n+    [0.37143, 0.15932, 0.25403],\n+    [0.36711, 0.15883, 0.25738],\n+    [0.36292, 0.15853, 0.26092],\n+    [0.35885, 0.15843, 0.26466],\n+    [0.35494, 0.15853, 0.26862],\n+    [0.35114, 0.15882, 0.27276],\n+    [0.34748, 0.15931, 0.27711],\n+    [0.34394, 0.15999, 0.28164],\n+    [0.34056, 0.16094, 0.28636],\n+    [0.33731, 0.16207, 0.29131],\n+    [0.3342, 0.16338, 0.29642],\n+    [0.33121, 0.16486, 0.3017],\n+    [0.32837, 0.16658, 0.30719],\n+    [0.32565, 0.16847, 0.31284],\n+    [0.3231, 0.17056, 0.31867],\n+    [0.32066, 0.17283, 0.32465],\n+    [0.31834, 0.1753, 0.33079],\n+    [0.31616, 0.17797, 0.3371],\n+    [0.3141, 0.18074, 0.34354],\n+    [0.31216, 0.18373, 0.35011],\n+    [0.31038, 0.1869, 0.35682],\n+    [0.3087, 0.19021, 0.36363],\n+    [0.30712, 0.1937, 0.37056],\n+    [0.3057, 0.19732, 0.3776],\n+    [0.30435, 0.20106, 0.38473],\n+    [0.30314, 0.205, 0.39195],\n+    [0.30204, 0.20905, 0.39924],\n+    [0.30106, 0.21323, 0.40661],\n+    [0.30019, 0.21756, 0.41404],\n+    [0.29944, 0.22198, 0.42151],\n+    [0.29878, 0.22656, 0.42904],\n+    [0.29822, 0.23122, 0.4366],\n+    [0.29778, 0.23599, 0.44419],\n+    [0.29745, 0.24085, 0.45179],\n+    [0.29721, 0.24582, 0.45941],\n+    [0.29708, 0.2509, 0.46703],\n+    [0.29704, 0.25603, 0.47465],\n+    [0.2971, 0.26127, 0.48225],\n+    [0.29726, 0.26658, 0.48983],\n+    [0.2975, 0.27194, 0.4974],\n+    [0.29784, 0.27741, 0.50493],\n+    [0.29828, 0.28292, 0.51242],\n+    [0.29881, 0.28847, 0.51987],\n+    [0.29943, 0.29408, 0.52728],\n+    [0.30012, 0.29976, 0.53463],\n+    [0.3009, 0.30548, 0.54191],\n+    [0.30176, 0.31122, 0.54915],\n+    [0.30271, 0.317, 0.5563],\n+    [0.30373, 0.32283, 0.56339],\n+    [0.30483, 0.32866, 0.5704],\n+    [0.30601, 0.33454, 0.57733],\n+    [0.30722, 0.34042, 0.58418],\n+    [0.30853, 0.34631, 0.59095],\n+    [0.30989, 0.35224, 0.59763],\n+    [0.3113, 0.35817, 0.60423],\n+    [0.31277, 0.3641, 0.61073],\n+    [0.31431, 0.37005, 0.61715],\n+    [0.3159, 0.376, 0.62347],\n+    [0.31752, 0.38195, 0.62969],\n+    [0.3192, 0.3879, 0.63583],\n+    [0.32092, 0.39385, 0.64188],\n+    [0.32268, 0.39979, 0.64783],\n+    [0.32446, 0.40575, 0.6537],\n+    [0.3263, 0.41168, 0.65948],\n+    [0.32817, 0.41763, 0.66517],\n+    [0.33008, 0.42355, 0.67079],\n+    [0.33201, 0.4295, 0.67632],\n+    [0.33398, 0.43544, 0.68176],\n+    [0.33596, 0.44137, 0.68715],\n+    [0.33798, 0.44731, 0.69246],\n+    [0.34003, 0.45327, 0.69769],\n+    [0.3421, 0.45923, 0.70288],\n+    [0.34419, 0.4652, 0.70799],\n+    [0.34631, 0.4712, 0.71306],\n+    [0.34847, 0.4772, 0.71808],\n+    [0.35064, 0.48323, 0.72305],\n+    [0.35283, 0.48928, 0.72798],\n+    [0.35506, 0.49537, 0.73288],\n+    [0.3573, 0.50149, 0.73773],\n+    [0.35955, 0.50763, 0.74256],\n+    [0.36185, 0.51381, 0.74736],\n+    [0.36414, 0.52001, 0.75213],\n+    [0.36649, 0.52627, 0.75689],\n+    [0.36884, 0.53256, 0.76162],\n+    [0.37119, 0.53889, 0.76633],\n+    [0.37359, 0.54525, 0.77103],\n+    [0.376, 0.55166, 0.77571],\n+    [0.37842, 0.55809, 0.78037],\n+    [0.38087, 0.56458, 0.78503],\n+    [0.38333, 0.5711, 0.78966],\n+    [0.38579, 0.57766, 0.79429],\n+    [0.38828, 0.58426, 0.7989],\n+    [0.39078, 0.59088, 0.8035],\n+    [0.39329, 0.59755, 0.8081],\n+    [0.39582, 0.60426, 0.81268],\n+    [0.39835, 0.61099, 0.81725],\n+    [0.4009, 0.61774, 0.82182],\n+    [0.40344, 0.62454, 0.82637],\n+    [0.406, 0.63137, 0.83092],\n+    [0.40856, 0.63822, 0.83546],\n+    [0.41114, 0.6451, 0.83999],\n+    [0.41372, 0.65202, 0.84451],\n+    [0.41631, 0.65896, 0.84903],\n+    [0.4189, 0.66593, 0.85354],\n+    [0.42149, 0.67294, 0.85805],\n+    [0.4241, 0.67996, 0.86256],\n+    [0.42671, 0.68702, 0.86705],\n+    [0.42932, 0.69411, 0.87156],\n+    [0.43195, 0.70123, 0.87606],\n+    [0.43457, 0.70839, 0.88056],\n+    [0.4372, 0.71557, 0.88506],\n+    [0.43983, 0.72278, 0.88956],\n+    [0.44248, 0.73004, 0.89407],\n+    [0.44512, 0.73732, 0.89858],\n+    [0.44776, 0.74464, 0.9031],\n+    [0.45042, 0.752, 0.90763],\n+    [0.45308, 0.75939, 0.91216],\n+    [0.45574, 0.76682, 0.9167],\n+    [0.45841, 0.77429, 0.92124],\n+    [0.46109, 0.78181, 0.9258],\n+    [0.46377, 0.78936, 0.93036],\n+    [0.46645, 0.79694, 0.93494],\n+    [0.46914, 0.80458, 0.93952],\n+    [0.47183, 0.81224, 0.94412],\n+    [0.47453, 0.81995, 0.94872],\n+    [0.47721, 0.8277, 0.95334],\n+    [0.47992, 0.83549, 0.95796],\n+    [0.48261, 0.84331, 0.96259],\n+    [0.4853, 0.85117, 0.96722],\n+    [0.48801, 0.85906, 0.97186],\n+    [0.49071, 0.86699, 0.97651],\n+    [0.49339, 0.87495, 0.98116],\n+    [0.49607, 0.88294, 0.98581],\n+    [0.49877, 0.89096, 0.99047],\n+    [0.50144, 0.89901, 0.99512],\n+    [0.50411, 0.90708, 0.99978]]\n+\n+_vanimo_data = [\n+    [1, 0.80346, 0.99215],\n+    [0.99397, 0.79197, 0.98374],\n+    [0.98791, 0.78052, 0.97535],\n+    [0.98185, 0.7691, 0.96699],\n+    [0.97578, 0.75774, 0.95867],\n+    [0.96971, 0.74643, 0.95037],\n+    [0.96363, 0.73517, 0.94211],\n+    [0.95755, 0.72397, 0.93389],\n+    [0.95147, 0.71284, 0.9257],\n+    [0.94539, 0.70177, 0.91756],\n+    [0.93931, 0.69077, 0.90945],\n+    [0.93322, 0.67984, 0.90137],\n+    [0.92713, 0.66899, 0.89334],\n+    [0.92104, 0.65821, 0.88534],\n+    [0.91495, 0.64751, 0.87738],\n+    [0.90886, 0.63689, 0.86946],\n+    [0.90276, 0.62634, 0.86158],\n+    [0.89666, 0.61588, 0.85372],\n+    [0.89055, 0.60551, 0.84591],\n+    [0.88444, 0.59522, 0.83813],\n+    [0.87831, 0.58503, 0.83039],\n+    [0.87219, 0.57491, 0.82268],\n+    [0.86605, 0.5649, 0.815],\n+    [0.8599, 0.55499, 0.80736],\n+    [0.85373, 0.54517, 0.79974],\n+    [0.84756, 0.53544, 0.79216],\n+    [0.84138, 0.52583, 0.78461],\n+    [0.83517, 0.5163, 0.77709],\n+    [0.82896, 0.5069, 0.76959],\n+    [0.82272, 0.49761, 0.76212],\n+    [0.81647, 0.48841, 0.75469],\n+    [0.81018, 0.47934, 0.74728],\n+    [0.80389, 0.47038, 0.7399],\n+    [0.79757, 0.46154, 0.73255],\n+    [0.79123, 0.45283, 0.72522],\n+    [0.78487, 0.44424, 0.71792],\n+    [0.77847, 0.43578, 0.71064],\n+    [0.77206, 0.42745, 0.70339],\n+    [0.76562, 0.41925, 0.69617],\n+    [0.75914, 0.41118, 0.68897],\n+    [0.75264, 0.40327, 0.68179],\n+    [0.74612, 0.39549, 0.67465],\n+    [0.73957, 0.38783, 0.66752],\n+    [0.73297, 0.38034, 0.66041],\n+    [0.72634, 0.37297, 0.65331],\n+    [0.71967, 0.36575, 0.64623],\n+    [0.71293, 0.35864, 0.63915],\n+    [0.70615, 0.35166, 0.63206],\n+    [0.69929, 0.34481, 0.62496],\n+    [0.69236, 0.33804, 0.61782],\n+    [0.68532, 0.33137, 0.61064],\n+    [0.67817, 0.32479, 0.6034],\n+    [0.67091, 0.3183, 0.59609],\n+    [0.66351, 0.31184, 0.5887],\n+    [0.65598, 0.30549, 0.58123],\n+    [0.64828, 0.29917, 0.57366],\n+    [0.64045, 0.29289, 0.56599],\n+    [0.63245, 0.28667, 0.55822],\n+    [0.6243, 0.28051, 0.55035],\n+    [0.61598, 0.27442, 0.54237],\n+    [0.60752, 0.26838, 0.53428],\n+    [0.59889, 0.2624, 0.5261],\n+    [0.59012, 0.25648, 0.51782],\n+    [0.5812, 0.25063, 0.50944],\n+    [0.57214, 0.24483, 0.50097],\n+    [0.56294, 0.23914, 0.4924],\n+    [0.55359, 0.23348, 0.48376],\n+    [0.54413, 0.22795, 0.47505],\n+    [0.53454, 0.22245, 0.46623],\n+    [0.52483, 0.21706, 0.45736],\n+    [0.51501, 0.21174, 0.44843],\n+    [0.50508, 0.20651, 0.43942],\n+    [0.49507, 0.20131, 0.43036],\n+    [0.48495, 0.19628, 0.42125],\n+    [0.47476, 0.19128, 0.4121],\n+    [0.4645, 0.18639, 0.4029],\n+    [0.45415, 0.18157, 0.39367],\n+    [0.44376, 0.17688, 0.38441],\n+    [0.43331, 0.17225, 0.37513],\n+    [0.42282, 0.16773, 0.36585],\n+    [0.41232, 0.16332, 0.35655],\n+    [0.40178, 0.15897, 0.34726],\n+    [0.39125, 0.15471, 0.33796],\n+    [0.38071, 0.15058, 0.32869],\n+    [0.37017, 0.14651, 0.31945],\n+    [0.35969, 0.14258, 0.31025],\n+    [0.34923, 0.13872, 0.30106],\n+    [0.33883, 0.13499, 0.29196],\n+    [0.32849, 0.13133, 0.28293],\n+    [0.31824, 0.12778, 0.27396],\n+    [0.30808, 0.12431, 0.26508],\n+    [0.29805, 0.12097, 0.25631],\n+    [0.28815, 0.11778, 0.24768],\n+    [0.27841, 0.11462, 0.23916],\n+    [0.26885, 0.11169, 0.23079],\n+    [0.25946, 0.10877, 0.22259],\n+    [0.25025, 0.10605, 0.21455],\n+    [0.24131, 0.10341, 0.20673],\n+    [0.23258, 0.10086, 0.19905],\n+    [0.2241, 0.098494, 0.19163],\n+    [0.21593, 0.096182, 0.18443],\n+    [0.20799, 0.094098, 0.17748],\n+    [0.20032, 0.092102, 0.17072],\n+    [0.19299, 0.09021, 0.16425],\n+    [0.18596, 0.088461, 0.15799],\n+    [0.17918, 0.086861, 0.15197],\n+    [0.17272, 0.08531, 0.14623],\n+    [0.16658, 0.084017, 0.14075],\n+    [0.1607, 0.082745, 0.13546],\n+    [0.15515, 0.081683, 0.13049],\n+    [0.1499, 0.080653, 0.1257],\n+    [0.14493, 0.07978, 0.12112],\n+    [0.1402, 0.079037, 0.11685],\n+    [0.13578, 0.078426, 0.11282],\n+    [0.13168, 0.077944, 0.10894],\n+    [0.12782, 0.077586, 0.10529],\n+    [0.12422, 0.077332, 0.1019],\n+    [0.12091, 0.077161, 0.098724],\n+    [0.11793, 0.077088, 0.095739],\n+    [0.11512, 0.077124, 0.092921],\n+    [0.11267, 0.077278, 0.090344],\n+    [0.11042, 0.077557, 0.087858],\n+    [0.10835, 0.077968, 0.085431],\n+    [0.10665, 0.078516, 0.083233],\n+    [0.105, 0.079207, 0.081185],\n+    [0.10368, 0.080048, 0.079202],\n+    [0.10245, 0.081036, 0.077408],\n+    [0.10143, 0.082173, 0.075793],\n+    [0.1006, 0.083343, 0.074344],\n+    [0.099957, 0.084733, 0.073021],\n+    [0.099492, 0.086174, 0.071799],\n+    [0.099204, 0.087868, 0.070716],\n+    [0.099092, 0.089631, 0.069813],\n+    [0.099154, 0.091582, 0.069047],\n+    [0.099384, 0.093597, 0.068337],\n+    [0.099759, 0.095871, 0.067776],\n+    [0.10029, 0.098368, 0.067351],\n+    [0.10099, 0.101, 0.067056],\n+    [0.10185, 0.1039, 0.066891],\n+    [0.1029, 0.10702, 0.066853],\n+    [0.10407, 0.11031, 0.066942],\n+    [0.10543, 0.1138, 0.067155],\n+    [0.10701, 0.1175, 0.067485],\n+    [0.10866, 0.12142, 0.067929],\n+    [0.11059, 0.12561, 0.06849],\n+    [0.11265, 0.12998, 0.069162],\n+    [0.11483, 0.13453, 0.069842],\n+    [0.11725, 0.13923, 0.07061],\n+    [0.11985, 0.14422, 0.071528],\n+    [0.12259, 0.14937, 0.072403],\n+    [0.12558, 0.15467, 0.073463],\n+    [0.12867, 0.16015, 0.074429],\n+    [0.13196, 0.16584, 0.075451],\n+    [0.1354, 0.17169, 0.076499],\n+    [0.13898, 0.17771, 0.077615],\n+    [0.14273, 0.18382, 0.078814],\n+    [0.14658, 0.1901, 0.080098],\n+    [0.15058, 0.19654, 0.081473],\n+    [0.15468, 0.20304, 0.08282],\n+    [0.15891, 0.20968, 0.084315],\n+    [0.16324, 0.21644, 0.085726],\n+    [0.16764, 0.22326, 0.087378],\n+    [0.17214, 0.23015, 0.088955],\n+    [0.17673, 0.23717, 0.090617],\n+    [0.18139, 0.24418, 0.092314],\n+    [0.18615, 0.25132, 0.094071],\n+    [0.19092, 0.25846, 0.095839],\n+    [0.19578, 0.26567, 0.097702],\n+    [0.20067, 0.2729, 0.099539],\n+    [0.20564, 0.28016, 0.10144],\n+    [0.21062, 0.28744, 0.10342],\n+    [0.21565, 0.29475, 0.10534],\n+    [0.22072, 0.30207, 0.10737],\n+    [0.22579, 0.30942, 0.10942],\n+    [0.23087, 0.31675, 0.11146],\n+    [0.236, 0.32407, 0.11354],\n+    [0.24112, 0.3314, 0.11563],\n+    [0.24625, 0.33874, 0.11774],\n+    [0.25142, 0.34605, 0.11988],\n+    [0.25656, 0.35337, 0.12202],\n+    [0.26171, 0.36065, 0.12422],\n+    [0.26686, 0.36793, 0.12645],\n+    [0.272, 0.37519, 0.12865],\n+    [0.27717, 0.38242, 0.13092],\n+    [0.28231, 0.38964, 0.13316],\n+    [0.28741, 0.39682, 0.13541],\n+    [0.29253, 0.40398, 0.13773],\n+    [0.29763, 0.41111, 0.13998],\n+    [0.30271, 0.4182, 0.14232],\n+    [0.30778, 0.42527, 0.14466],\n+    [0.31283, 0.43231, 0.14699],\n+    [0.31787, 0.43929, 0.14937],\n+    [0.32289, 0.44625, 0.15173],\n+    [0.32787, 0.45318, 0.15414],\n+    [0.33286, 0.46006, 0.1566],\n+    [0.33781, 0.46693, 0.15904],\n+    [0.34276, 0.47374, 0.16155],\n+    [0.34769, 0.48054, 0.16407],\n+    [0.3526, 0.48733, 0.16661],\n+    [0.35753, 0.4941, 0.16923],\n+    [0.36245, 0.50086, 0.17185],\n+    [0.36738, 0.50764, 0.17458],\n+    [0.37234, 0.51443, 0.17738],\n+    [0.37735, 0.52125, 0.18022],\n+    [0.38238, 0.52812, 0.18318],\n+    [0.38746, 0.53505, 0.18626],\n+    [0.39261, 0.54204, 0.18942],\n+    [0.39783, 0.54911, 0.19272],\n+    [0.40311, 0.55624, 0.19616],\n+    [0.40846, 0.56348, 0.1997],\n+    [0.4139, 0.57078, 0.20345],\n+    [0.41942, 0.57819, 0.20734],\n+    [0.42503, 0.5857, 0.2114],\n+    [0.43071, 0.59329, 0.21565],\n+    [0.43649, 0.60098, 0.22009],\n+    [0.44237, 0.60878, 0.2247],\n+    [0.44833, 0.61667, 0.22956],\n+    [0.45439, 0.62465, 0.23468],\n+    [0.46053, 0.63274, 0.23997],\n+    [0.46679, 0.64092, 0.24553],\n+    [0.47313, 0.64921, 0.25138],\n+    [0.47959, 0.6576, 0.25745],\n+    [0.48612, 0.66608, 0.26382],\n+    [0.49277, 0.67466, 0.27047],\n+    [0.49951, 0.68335, 0.2774],\n+    [0.50636, 0.69213, 0.28464],\n+    [0.51331, 0.70101, 0.2922],\n+    [0.52035, 0.70998, 0.30008],\n+    [0.5275, 0.71905, 0.30828],\n+    [0.53474, 0.72821, 0.31682],\n+    [0.54207, 0.73747, 0.32567],\n+    [0.5495, 0.74682, 0.33491],\n+    [0.55702, 0.75625, 0.34443],\n+    [0.56461, 0.76577, 0.35434],\n+    [0.5723, 0.77537, 0.36457],\n+    [0.58006, 0.78506, 0.37515],\n+    [0.58789, 0.79482, 0.38607],\n+    [0.59581, 0.80465, 0.39734],\n+    [0.60379, 0.81455, 0.40894],\n+    [0.61182, 0.82453, 0.42086],\n+    [0.61991, 0.83457, 0.43311],\n+    [0.62805, 0.84467, 0.44566],\n+    [0.63623, 0.85482, 0.45852],\n+    [0.64445, 0.86503, 0.47168],\n+    [0.6527, 0.8753, 0.48511],\n+    [0.66099, 0.88562, 0.49882],\n+    [0.6693, 0.89599, 0.51278],\n+    [0.67763, 0.90641, 0.52699],\n+    [0.68597, 0.91687, 0.54141],\n+    [0.69432, 0.92738, 0.55605],\n+    [0.70269, 0.93794, 0.5709],\n+    [0.71107, 0.94855, 0.58593],\n+    [0.71945, 0.9592, 0.60112],\n+    [0.72782, 0.96989, 0.61646],\n+    [0.7362, 0.98063, 0.63191],\n+    [0.74458, 0.99141, 0.64748]]\n \n cmaps = {\n     name: ListedColormap(data, name=name) for name, data in [\n@@ -2068,4 +2841,7 @@\n         ('twilight', _twilight_data),\n         ('twilight_shifted', _twilight_shifted_data),\n         ('turbo', _turbo_data),\n+        ('berlin', _berlin_data),\n+        ('managua', _managua_data),\n+        ('vanimo', _vanimo_data),\n     ]}\n", "test_patch": "", "problem_statement": "Feature proposal: \"Dark mode\" divergent colormaps\nSince version 2.0, matplotlib has done a good job encouraging users to use perceptually uniform colormaps, distinguishing between divergent and sequential colormaps, etc. In my job, I find divergent colormaps very useful; there is a good selection of them, but they all have a very light \"zero\" colour: typically white or yellow, except one which is light gray. They can be seen [here](https://matplotlib.org/3.3.0/_images/sphx_glr_colormaps_004.png). This is an example of what can be done:\r\n![light](https://user-images.githubusercontent.com/11293950/94562053-23c50900-0265-11eb-87cb-9b66334de927.png)\r\n\r\n\r\nWith the explosion of \"dark mode\" in apps, websites and in the tastes of end-users, it would be very nice to have a divergent colormap that has a dark default colour.\r\n\r\n### Proposed Solution\r\n\r\nTo add two or more colormaps which fulfill all the conditions of divergent colormaps, but have a dark colour as a middle colour. At least one of these should use pure black.\r\n\r\n### Additional context and prior art\r\n\r\nCurrently, the closest approximation is `plt.cmap.twilight`, however, it does not look sufficiently symmetric to me. Moreover, it's cyclic, so it ends with the same colour on both sides, which is undesirable. This is how it looks like: \r\n![dark](https://user-images.githubusercontent.com/11293950/94562105-33dce880-0265-11eb-8f95-e26dc8c6ff48.png)\r\n\r\nIt's quite close to what I'm suggesting, except for the details I mentioned above (and I would add one or two more, including at least one with a black background).\r\n\n", "hints_text": "I don't think matplotlib has **any** built-in perceptually uniform divergent maps. The ones you linked to are mostly drawn from ColorBrewer and have pretty good properties, but they are not perceptually uniform in the same color space as viridis et al.\r\n\r\nThere are several existing implementations, mostly with relatively low contrast (i.e. the extremes are medium-luminance saturated colors) in [colorcet](https://colorcet.holoviz.org/).\r\n\r\nseaborn also has a high-contrast diverging map with a dark center (\"icefire\"): http://seaborn.pydata.org/tutorial/color_palettes.html#diverging-color-palettes\nI agree that we don't have a dark-centred diverging colormap, and I think that would be a reasonable addition. \r\n\r\nI think its fair to say the consensus is that matplotlib should be conservative about adding new colormaps.   It stops our colormap palette from becoming unmanageable, and saves PRs where pet colormaps are proposed, folks argue about which shade of chartreuse should be used, or whether the Smithetal02 definition of colormap uniformity is the right model or Jonesetal09.  \r\n\r\nThe best way to get a colormap in is to argue that it is unique from the offered ones.  i.e. `twilight` was properly cyclic, and that was deemed unique enough.  These days it helps to argue perceptual uniformity, though I personally don't think that should be a deal-killer.   It really helps to show that it has already been used in publications somewhere, or that it is very similar to published data.  \r\n\r\n\nThe consensus seems reasonable in not wanting to add too many new colormaps. However I do think that this is, as you say, something unique and substantially different from all the existing ones, and not just a variation on shades.\r\n\r\nI'm not an expert in colour and I'm not familiar with the literature -- I'm suggesting this in my role as an end user of matplotlib. However, I think a choice similar to Seaborn's `icefire`, suggested by @mwaskom above, would be great. It's divergent, perceptually uniform, and I think likely colorblind-safe.\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nReading through, looks like there's some consensus around adding one-few diveriging colormaps suitable for a darkmode, provided that they're:\r\n1) perceptually uniform\r\n2) well documented, preferably in an academic paper \nHi there are several packages available with perceptually uniform colourmaps. I'm aware of CMasher\r\nhttps://joss.theoj.org/papers/10.21105/joss.02004\r\nand Fabio Crameri's scientific colormaps\r\nhttps://www.nature.com/articles/s41467-020-19160-7\r\nhttps://www.fabiocrameri.ch/colourmaps/\r\n\r\nI think adding diverging colormaps with dark central colors would be a great addition to matplotlib, it would certainly be useful for some outreach activities (at least the one that I'm involved in)\n_(Note: most of this comment is to help anyone looking for a workaround until there are other colormaps for dark mode, but also to resurface the issue and provide additional motivation)_\r\n\r\nLooking at https://matplotlib.org/stable/users/explain/colors/colormaps.html and trying to make a dark mode heat map plot using `imshow` that works just as well on the screen in a Jupyter notebook as when saved to file, I'm noticing that:\r\n\r\n- All of the Perceptually Uniform Sequential colormaps have some shade of yellow-ish at one endpoint, making it an awful choice for white text if you have data at that extreme\r\n- All of the Sequential colormaps have white at one endpoint, making it a bad choice to set the text to white if you have data at that extreme\r\n- Almost all of the Sequential (2) have the same problem, some with white, some with yellow; the exceptions of winter, cool, and copper also have an endpoint that doesn't look good with white text, though they are better than yellow or white endpionts\r\n- As already mentioned, the Divergent colormaps have a very light \"zero color\", usually white, maybe yellow, so again, not a good choice for white text\r\n- The rest of the colormaps, while not being a good choice for a heat map, also have white or very light colors, and/or yellow\r\n- A quick perusal of the links in ingwag's comment above shows they all basically have the same issues: either a light or a white or a yellow endpoint, or a midpoint of the same.\r\n\r\nAll the above notwithstanding, white text covers the most ground. My current workaround is to abuse the vmin/vmax.\r\nWith `winter` and `Purples_r` I can only use about 50%-60% of the colormap range, but with `viridis` and `gist_heat` I can use about 80% of the range (maybe 85%, but that's pushing it); and how well that works depends on how much variance there is in my data. Here's the gist of my workaround:\r\n\r\n```python\r\n    # data: pandas.DataFrame\r\n    colormap = 'gist_heat'\r\n    plt.style.use('dark_background')\r\n\r\n    # Determine vmin / vmax to make the colormap work better (no white text on yellow / light green / white)\r\n    max_value = max(data.max())\r\n    min_value = min(data.min())\r\n    value_range = max_value - min_value\r\n    full_range = value_range / 0.8\r\n    difference = full_range - value_range\r\n    desired_vmin = min_value\r\n    desired_vmax = max_value + difference\r\n\r\n    fig, ax = plt.subplots()\r\n    im = ax.imshow(\r\n        data,\r\n        cmap=colormap,\r\n        vmin=desired_vmin,\r\n        vmax=desired_vmax,\r\n    )\r\n```\r\n\r\nI really like the `Purples_r` in dark mode, and if I use a `PowerNorm` with `gamma=1.5` I can use closer to 75% of the range with pretty decent results, but still pushing it on my max values, and if I have data clustered toward vmin, there's not a lot of color variation for the lower values. Using a similar technique with `viridis`  also works to avoid the yellow endpoint and use slightly more of the range.\r\n\r\nAnother option (having just discovered `AsinhNorm` while tweaking things) would be to use `AsinhNorm`, something like:\r\n```python\r\n    # data: pandas.DataFrame\r\n    colormap = 'gist_heat'\r\n    plt.style.use('dark_background')\r\n    \r\n    # Determine vmin / vmax to make the colormap work better (no white text on yellow / light green / white)\r\n    max_value = max(data.max())\r\n    min_value = min(data.min())\r\n    std_dev = data.stack().std()\r\n    value_range = max_value - min_value\r\n    full_range = value_range / 0.7\r\n    difference = full_range - value_range\r\n    desired_vmin = min_value\r\n    desired_vmax = max_value + difference\r\n    desired_linear_width = std_dev * ((value_range * 0.75) / std_dev)\r\n    # print(f'{desired_vmin=}, {desired_vmax=}, {desired_linear_width=}, {std_dev=}')\r\n\r\n    fig, ax = plt.subplots()\r\n    im = ax.imshow(\r\n        data,\r\n        cmap=colormap,\r\n        norm=colors.AsinhNorm(\r\n            linear_width=desired_linear_width,\r\n            vmin=desired_vmin,\r\n            vmax=desired_vmax,\r\n            clip=False,\r\n        )\r\n    )\r\n```\r\nSo far, this works great with `gist_heat` and `viridis`, and pretty good for `winter`. With `Purples` and `Purples_r` if I reduce the range to 35%-40%, and increase the `value_range` multiplier for the `desired_linear_width` to `0.95`,  the white text is more visible, and the color variance in my low-value clusters is better (and almost good enough to use purples instead of `viridis` or `gist_heat`). Those same settings also wok oaky with `viridis` and `gist_heat`, but not as well as the 0.7 / 0.75 in the code example above (0.7 / 0.9 also works well).\r\n\r\nIf there were a way to adjust the colormap by saying \"Give me this colormap, but ignore the top X%, and map my data to the rest of the colormap\" that would be cool. Alternatively, new colormaps that effectively did the same, so that the troublesome white or yellow endpoints could be removed, would also work.\nI looked at @ingwag's suggestion of Fabio Crameri's work (@crameri), which seems to be scientifically based and well thought of. First, I note that in [his paper](https://doi.org/10.1038/s41467-020-19160-7)'s \"Guideline for choosing the right scienti\ufb01c colour map\" (figure 6), we are clearly missing the dark-coloured-centre colourmap.\r\n\r\nThese are his colourmaps:\r\n![image](https://i0.wp.com/s-ink.org/wp-content/uploads/ScientificColourMaps8-FabioCrameri.png)\r\n\r\nI suggest we need a couple:\r\n- one that has black as a center colour, and one that doesn't\r\n- one that has blue and red as lateral colours, and one with less symbolic colours\r\n\r\nSo having _vanimo_ and _managua_ or something like that could be a choice.\r\n\r\nNote that  he releases some matplotlib code ready made with those colormaps, under MIT license.  Would it be feasible to add it as-is to matplotlib, carrying the MIT license over? Otherwise, we should make our own similar colormaps.\nIf you are interested, I would be very happy to have some (or all) of the Scientific colour maps implemented in Matplotlib and made directly available to your users as long as (i) a reference to the repository and the specific version number of the included Scientific colour maps (see https://zenodo.org/records/5501399) are stated somewhere, and (ii) the names of the colour maps are maintained. \nThis is up to the maintainers then. I could _try_ (I'm not that familiar with mpl source) to submit a PR, if the maintainers are ok with this and if they can suggest the number of such colourmaps that could be accommodated.\nI think a subset of these that are distinct from those in Matplotlib would be welcome.  \r\n\r\n> (i) a reference to the repository and the specific version number of the included Scientific colour maps\r\n\r\nThis seems fine, but where do you just mean? in the source code?  Because we don't really have documentation for individual colormaps, though linking out to your collection would be great in the narrative docs (eg Choosing a Colormap)\r\n\r\nAlso we have had issues with seaborn's style sheets where they get changed in seaborn and ours drift.  We consider changing a colormap or a style a breaking change, so you would need to be OK with that, or we would need to talk about mechanisms to allow them not to drift.  \r\n", "created_at": "2024-07-17T14:29:59Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28582, "instance_id": "matplotlib__matplotlib-28582", "issue_numbers": ["28567", "0000"], "base_commit": "9b8a8c7246c4a8e78095675f33e7f10c9d815dc4", "patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 4606e5c01aec..a29583668a17 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2962,22 +2962,16 @@ def handle_single_axis(\n \n             # Prevent margin addition from crossing a sticky value.  A small\n             # tolerance must be added due to floating point issues with\n-            # streamplot; it is defined relative to x0, x1, x1-x0 but has\n+            # streamplot; it is defined relative to x1-x0 but has\n             # no absolute term (e.g. \"+1e-8\") to avoid issues when working with\n             # datasets where all values are tiny (less than 1e-8).\n-            tol = 1e-5 * max(abs(x0), abs(x1), abs(x1 - x0))\n+            tol = 1e-5 * abs(x1 - x0)\n             # Index of largest element < x0 + tol, if any.\n             i0 = stickies.searchsorted(x0 + tol) - 1\n             x0bound = stickies[i0] if i0 != -1 else None\n-            # Ensure the boundary acts only if the sticky is the extreme value\n-            if x0bound is not None and x0bound > x0:\n-                x0bound = None\n             # Index of smallest element > x1 - tol, if any.\n             i1 = stickies.searchsorted(x1 - tol)\n             x1bound = stickies[i1] if i1 != len(stickies) else None\n-            # Ensure the boundary acts only if the sticky is the extreme value\n-            if x1bound is not None and x1bound < x1:\n-                x1bound = None\n \n             # Add the margin in figure space and then transform back, to handle\n             # non-linear scales.\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_axes/sticky_tolerance_cf.png b/lib/matplotlib/tests/baseline_images/test_axes/sticky_tolerance_cf.png\nnew file mode 100644\nindex 000000000000..a2e185c2769d\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_axes/sticky_tolerance_cf.png differ\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 13c181b68492..3791763f323f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -701,6 +701,16 @@ def test_sticky_tolerance():\n     axs.flat[3].barh(y=1, width=width, left=-20000.1)\n \n \n+@image_comparison(['sticky_tolerance_cf.png'], remove_text=True, style=\"mpl20\")\n+def test_sticky_tolerance_contourf():\n+    fig, ax = plt.subplots()\n+\n+    x = y = [14496.71, 14496.75]\n+    data = [[0, 1], [2, 3]]\n+\n+    ax.contourf(x, y, data)\n+\n+\n def test_nargs_stem():\n     with pytest.raises(TypeError, match='0 were given'):\n         # stem() takes 1-3 arguments.\n", "problem_statement": "[Bug]: sticky edge related changes for datetime plots\n### Bug summary\r\n\r\nHaving just picked up v3.9.1, we are seeing downstream image test failures due to additional whitespace in `contourf` and `pcolor` plots that use datetimes.  The change bisects to #28393.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport datetime\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndts = [datetime.datetime(2009, 9, 9, 17, 0) + datetime.timedelta(minutes=n) for n in range(10, 61, 10)]\r\nfoo = range(5)\r\ndata = np.arange(30).reshape(6, 5)\r\n\r\nplt.contourf(foo, dts, data)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https://github.com/user-attachments/assets/4f616f86-14d7-4335-b0c1-e5dfc637cdbc)\r\n\r\n\r\n### Expected outcome\r\n\r\nBefore #28393 I get\r\n![image](https://github.com/user-attachments/assets/e9dc1e03-2945-428b-bb71-eceb1114f5d4)\r\n\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nUbuntu\r\n\r\n### Matplotlib Version\r\n\r\nv3.9.1 and `main`\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.12\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "If I get hold of the contourset and the axes here, I have\r\n\r\n```python\r\nIn [4]: cs.sticky_edges.y[0] == ax.dataLim.ymin\r\nOut[4]: np.True_\r\n\r\nIn [5]: cs.sticky_edges.y[1] == ax.dataLim.ymax\r\nOut[5]: np.True_\r\n\r\nIn [6]: cs.sticky_edges.x[0] == ax.dataLim.xmin\r\nOut[6]: np.True_\r\n\r\nIn [7]: cs.sticky_edges.x[1] == ax.dataLim.xmax\r\nOut[7]: np.True_\r\n\r\n```\r\n:confused: \nIt seems like, by the time we get the the relevant comparison, somehow the sticky limits got flipped:\r\n\r\n```diff\r\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\r\nindex 4606e5c01a..9d5274d9e6 100644\r\n--- a/lib/matplotlib/axes/_base.py\r\n+++ b/lib/matplotlib/axes/_base.py\r\n@@ -2969,12 +2969,14 @@ class _AxesBase(martist.Artist):\r\n             # Index of largest element < x0 + tol, if any.\r\n             i0 = stickies.searchsorted(x0 + tol) - 1\r\n             x0bound = stickies[i0] if i0 != -1 else None\r\n+            print(f'{x0bound=}, {x0=}')\r\n             # Ensure the boundary acts only if the sticky is the extreme value\r\n             if x0bound is not None and x0bound > x0:\r\n                 x0bound = None\r\n             # Index of smallest element > x1 - tol, if any.\r\n             i1 = stickies.searchsorted(x1 - tol)\r\n             x1bound = stickies[i1] if i1 != len(stickies) else None\r\n+            print(f'{x1bound=}, {x1=}')\r\n             # Ensure the boundary acts only if the sticky is the extreme value\r\n             if x1bound is not None and x1bound < x1:\r\n                 x1bound = None\r\n```\r\n```\r\nx0bound=np.float64(14496.75), x0=np.float64(14496.715277777777)\r\nx1bound=np.float64(14496.715277777777), x1=np.float64(14496.75)\r\n```\nSo I guess the problem is basically the same as #28223 in that the data range is less than the tolerance.  If I make the tolerance only a function of the range\r\n\r\n```python\r\ntol = 1e-5 * abs(x1 - x0)\r\n```\r\nas suggested at https://github.com/matplotlib/matplotlib/pull/28393#issuecomment-2168453717, this is fixed and no existing tests break.\nYeah, I came to the same conclusion... I think that works, and makes more sense to me... I can't think of a case where the absolute magnitude is preferred to the range of the data for this computation.", "created_at": "2024-07-16T19:42:29Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28577, "instance_id": "matplotlib__matplotlib-28577", "issue_numbers": ["28574", "0000"], "base_commit": "c51103a068db018bad1152f78141d6c7360c29ff", "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex 483c9a3db15f..d1bbd095da87 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -33,12 +33,6 @@\n _gridline_param_names = ['grid_' + name\n                          for name in _line_param_names + _line_param_aliases]\n \n-_MARKER_DICT = {\n-    'out': (mlines.TICKDOWN, mlines.TICKUP),\n-    'in': (mlines.TICKUP, mlines.TICKDOWN),\n-    'inout': ('|', '|'),\n-}\n-\n \n class Tick(martist.Artist):\n     \"\"\"\n@@ -204,18 +198,21 @@ def _set_labelrotation(self, labelrotation):\n         _api.check_in_list(['auto', 'default'], labelrotation=mode)\n         self._labelrotation = (mode, angle)\n \n+    @property\n+    def _pad(self):\n+        return self._base_pad + self.get_tick_padding()\n+\n     def _apply_tickdir(self, tickdir):\n         \"\"\"Set tick direction.  Valid values are 'out', 'in', 'inout'.\"\"\"\n-        # This method is responsible for updating `_pad`, and, in subclasses,\n-        # for setting the tick{1,2}line markers as well.  From the user\n-        # perspective this should always be called through _apply_params, which\n-        # further updates ticklabel positions using the new pads.\n+        # This method is responsible for verifying input and, in subclasses, for setting\n+        # the tick{1,2}line markers.  From the user perspective this should always be\n+        # called through _apply_params, which further updates ticklabel positions using\n+        # the new pads.\n         if tickdir is None:\n             tickdir = mpl.rcParams[f'{self.__name__}.direction']\n         else:\n             _api.check_in_list(['in', 'out', 'inout'], tickdir=tickdir)\n         self._tickdir = tickdir\n-        self._pad = self._base_pad + self.get_tick_padding()\n \n     def get_tickdir(self):\n         return self._tickdir\n@@ -425,7 +422,11 @@ def _get_text2_transform(self):\n     def _apply_tickdir(self, tickdir):\n         # docstring inherited\n         super()._apply_tickdir(tickdir)\n-        mark1, mark2 = _MARKER_DICT[self._tickdir]\n+        mark1, mark2 = {\n+            'out': (mlines.TICKDOWN, mlines.TICKUP),\n+            'in': (mlines.TICKUP, mlines.TICKDOWN),\n+            'inout': ('|', '|'),\n+        }[self._tickdir]\n         self.tick1line.set_marker(mark1)\n         self.tick2line.set_marker(mark2)\n \n@@ -1617,6 +1618,14 @@ def _copy_tick_props(self, src, dest):\n         dest.tick1line.update_from(src.tick1line)\n         dest.tick2line.update_from(src.tick2line)\n         dest.gridline.update_from(src.gridline)\n+        dest.update_from(src)\n+        dest._loc = src._loc\n+        dest._size = src._size\n+        dest._width = src._width\n+        dest._base_pad = src._base_pad\n+        dest._labelrotation = src._labelrotation\n+        dest._zorder = src._zorder\n+        dest._tickdir = src._tickdir\n \n     def get_label_text(self):\n         \"\"\"Get the text of the label.\"\"\"\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex e5ae14c6e66b..2c10a93796fa 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5741,6 +5741,28 @@ def test_reset_ticks(fig_test, fig_ref):\n         ax.yaxis.reset_ticks()\n \n \n+@mpl.style.context('mpl20')\n+def test_context_ticks():\n+    with plt.rc_context({\n+            'xtick.direction': 'in', 'xtick.major.size': 30, 'xtick.major.width': 5,\n+            'xtick.color': 'C0', 'xtick.major.pad': 12,\n+            'xtick.bottom': True, 'xtick.top': True,\n+            'xtick.labelsize': 14, 'xtick.labelcolor': 'C1'}):\n+        fig, ax = plt.subplots()\n+    # Draw outside the context so that all-but-first tick are generated with the normal\n+    # mpl20 style in place.\n+    fig.draw_without_rendering()\n+\n+    first_tick = ax.xaxis.majorTicks[0]\n+    for tick in ax.xaxis.majorTicks[1:]:\n+        assert tick._size == first_tick._size\n+        assert tick._width == first_tick._width\n+        assert tick._base_pad == first_tick._base_pad\n+        assert tick._labelrotation == first_tick._labelrotation\n+        assert tick._zorder == first_tick._zorder\n+        assert tick._tickdir == first_tick._tickdir\n+\n+\n def test_vline_limit():\n     fig = plt.figure()\n     ax = fig.gca()\n", "problem_statement": "[Bug]: Nondeterministic behavior with subplot spacing and constrained layout\n### Bug summary\r\n\r\nI'm trying to get constrained layout to remove all space between subplots when no artists should be preventing it. In this example I've set all necessary rc params accordingly and changed the axes limits to ensure the x-axis tick labels don't spill beyond the axis extent. The resulting space between the axes is nondeterministic.\r\n\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\n%matplotlib inline\r\n\r\nimport matplotlib.pyplot as plt\r\nrc = {\r\n    \"xtick.direction\": \"in\", \r\n    \"ytick.direction\": \"in\",\r\n    \"figure.constrained_layout.use\": True,\r\n    \"figure.constrained_layout.h_pad\": 0,\r\n    \"figure.constrained_layout.w_pad\": 0,\r\n    \"figure.constrained_layout.wspace\": 0,\r\n    \"figure.constrained_layout.hspace\": 0,\r\n    \"axes.labelpad\": 0,\r\n}\r\n\r\nfor _ in range(2):\r\n    with plt.style.context(rc):\r\n        fig, axes = plt.subplots(1, 2, figsize=(6, 2), sharey=True)\r\n        \r\n        for ax in axes.flat:\r\n            ax.set_xlim(-0.1, 1.1)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nExample output (ran a handful of times until one of each result showed):\r\n![image](https://github.com/user-attachments/assets/23564beb-f5c1-4a03-a2f5-35cfb4083907)\r\n\r\n### Expected outcome\r\n\r\nZero spacing between the axes, deterministically.\r\n\r\n### Additional information\r\n\r\nI noticed that the results became deterministic (with zero space between panels) when saving the figure (that is, the result that displayed in the notebook, not just the saved figure). Inserting a `fig.canvas.draw()` at the end likewise ensures zero space deterministically.\r\n\r\n### Operating system\r\n\r\nRocky Linux\r\n\r\n### Matplotlib Version\r\n\r\n3.9.1\r\n\r\n### Matplotlib Backend\r\n\r\ninline\r\n\r\n### Python version\r\n\r\n3.11.9\r\n\r\n### Jupyter version\r\n\r\n4.2.3\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "", "created_at": "2024-07-15T03:28:04Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28573, "instance_id": "matplotlib__matplotlib-28573", "issue_numbers": ["27878", "0000"], "base_commit": "c4510cae31e37f5dd8fe7ac8c3843e72ec8492ee", "patch": "diff --git a/doc/users/next_whats_new/exception_prop_name.rst b/doc/users/next_whats_new/exception_prop_name.rst\nnew file mode 100644\nindex 000000000000..c887b879393c\n--- /dev/null\n+++ b/doc/users/next_whats_new/exception_prop_name.rst\n@@ -0,0 +1,26 @@\n+Exception handling control\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+The exception raised when an invalid keyword parameter is passed now includes\n+that parameter name as the exception's ``name`` property.  This provides more\n+control for exception handling:\n+\n+\n+.. code-block:: python\n+\n+    import matplotlib.pyplot as plt\n+\n+    def wobbly_plot(args, **kwargs):\n+        w = kwargs.pop('wobble_factor', None)\n+\n+        try:\n+            plt.plot(args, **kwargs)\n+        except AttributeError as e:\n+            raise AttributeError(f'wobbly_plot does not take parameter {e.name}') from e\n+\n+\n+    wobbly_plot([0, 1], wibble_factor=5)\n+\n+.. code-block::\n+\n+    AttributeError: wobbly_plot does not take parameter wibble_factor\ndiff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex baf3b01ee6e5..345a61bfc16a 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1190,7 +1190,8 @@ def _update_props(self, props, errfmt):\n         Helper for `.Artist.set` and `.Artist.update`.\n \n         *errfmt* is used to generate error messages for invalid property\n-        names; it gets formatted with ``type(self)`` and the property name.\n+        names; it gets formatted with ``type(self)`` for \"{cls}\" and the\n+        property name for \"{prop_name}\".\n         \"\"\"\n         ret = []\n         with cbook._setattr_cm(self, eventson=False):\n@@ -1203,7 +1204,8 @@ def _update_props(self, props, errfmt):\n                     func = getattr(self, f\"set_{k}\", None)\n                     if not callable(func):\n                         raise AttributeError(\n-                            errfmt.format(cls=type(self), prop_name=k))\n+                            errfmt.format(cls=type(self), prop_name=k),\n+                            name=k)\n                     ret.append(func(v))\n         if ret:\n             self.pchanged()\n", "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\nindex be988c31ee75..f519b42098e5 100644\n--- a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n@@ -1501,8 +1501,9 @@ def test_calling_conventions(self):\n             ax.voxels(x, y)\n         # x, y, z are positional only - this passes them on as attributes of\n         # Poly3DCollection\n-        with pytest.raises(AttributeError):\n+        with pytest.raises(AttributeError, match=\"keyword argument 'x'\") as exec_info:\n             ax.voxels(filled=filled, x=x, y=y, z=z)\n+        assert exec_info.value.name == 'x'\n \n \n def test_line3d_set_get_data_3d():\n", "problem_statement": "[ENH]: AttributeError('... got an unexpected keyword argument ...') should set the .name attribute to the keyword\n### Problem\n\nI am in the process to write a library that uses the matplotlib library for its graphics needs. As such, most of \"our\" graphics functions are wrappers around existing matplotlib functions such as tripcolor, tricontour\u2026 A typical function of ours would be:\r\n\r\n```\r\ndef fun_name_altered(lib_objects, **kwargs):\r\n    args = prepare_args(lib_objects, **kwargs)\r\n    plt.fun_name(*args, **kwargs)\r\n```\r\n\r\nIn this case the `kwargs` dictionnary may contain keywords aimed at the `prepare_args` process and keywords aimed at controlling the plotting. At the moment, `prepare_args` removes keywords from the dictionnary when used so that in principle, when `kwargs` arrive at `plt.fun_name`, it should only contain keywords known to `plt.fun_name`\r\n\r\nHowever, if the user makes a mistake while setting the keyword for OUR part, it is not properly handled by `prepare_args` and it does remain inside `kwargs` and then is passed to `plt.fun_name` which then raises an `AttributeError('... got an unexpected keyword argument ...')`.\r\n\r\nI would like to be able to try and recover if that happens.\n\n### Proposed solution\n\nFrom the  [Built-in Exceptions documentation page](https://docs.python.org/3/library/exceptions.html#bltin-exceptions)\r\n\r\n> The name and obj attributes can be set using keyword-only arguments to the constructor. When set they represent the name of the attribute that was attempted to be accessed and the object that was accessed for said attribute, respectively.\r\nChanged in version 3.10: Added the name and obj attributes\r\n\r\nI looked at the matplotlib codebase but I am not an expert programmer so I may be wrong but I think what I would like was that `Artist._update_props`  set the `name` attribute to `k` when raising the `AttributeError`.\r\n\r\nSince I am using Python 3.11 this would allow me to try and remove spurious keywords.\n", "hints_text": "This seems reasonable to me.  My understanding is the same and it should just be a case of adding `name=k` here:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/0da2da00d5a884db9c7991c31ee81d1b5dc57b63/lib/matplotlib/artist.py#L1193-L1194\r\n\r\nThis will break for python 3.9 but, according to the [NEP29 schedule](https://numpy.org/neps/nep-0029-deprecation_policy.html#support-table), we should be dropping support for that in April anyway.  So if we target this for Matplotlib 3.10 there will be no problem.", "created_at": "2024-07-14T07:49:51Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28571, "instance_id": "matplotlib__matplotlib-28571", "issue_numbers": ["28533", "28533"], "base_commit": "dc649460f7691daf5845f1a9bee77f0fd5518f3a", "patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex dd579bcd5877..43da57c25da5 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -64,6 +64,9 @@ def stackplot(axes, x, *args,\n         of provided *y*, in which case the styles will repeat from the\n         beginning.\n \n+        .. versionadded:: 3.9\n+           Support for list input\n+\n     data : indexable object, optional\n         DATA_PARAMETER_PLACEHOLDER\n \n", "test_patch": "", "problem_statement": "[Doc]: Stackplot hatch functionality has version dependencies\n### Documentation Link\n\nhttps://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.stackplot.html\n\n### Problem\n\nThe documentation for `matplotlib.pyplot.stackplot()` should indicate that matplotlib version 3.9.x or greater supports `hatch` being a list. In version 3.8.3 I was getting errors when passing a list of hatch symbols, regardless of the simplicity or complexity of the example.\r\n\r\nIf it's easier I can revisit this once I complete the body of work where this became an issue and I can submit a PR to update the documentation myself, just let me know.\n\n### Suggested improvement\n\n_No response_\n[Doc]: Stackplot hatch functionality has version dependencies\n### Documentation Link\n\nhttps://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.stackplot.html\n\n### Problem\n\nThe documentation for `matplotlib.pyplot.stackplot()` should indicate that matplotlib version 3.9.x or greater supports `hatch` being a list. In version 3.8.3 I was getting errors when passing a list of hatch symbols, regardless of the simplicity or complexity of the example.\r\n\r\nIf it's easier I can revisit this once I complete the body of work where this became an issue and I can submit a PR to update the documentation myself, just let me know.\n\n### Suggested improvement\n\n_No response_\n", "hints_text": "Sorry about missing that in review, yes if you don't mind adding a version added directive that'd be great! \n\nhttps://matplotlib.org/devdocs/devel/api_changes.html#announce-new-and-deprecated-api\nAlso the documented type is wrong:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/2836374/c7e798d5-833a-428d-8236-a6043a75b061)\r\n\r\nIt should be\r\n```\r\nhatch : str or list of str, optional\r\n```\r\nand include in the explanation that a single str applies the same hatch to all datasets.\n### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nSorry about missing that in review, yes if you don't mind adding a version added directive that'd be great! \n\nhttps://matplotlib.org/devdocs/devel/api_changes.html#announce-new-and-deprecated-api\nAlso the documented type is wrong:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/2836374/c7e798d5-833a-428d-8236-a6043a75b061)\r\n\r\nIt should be\r\n```\r\nhatch : str or list of str, optional\r\n```\r\nand include in the explanation that a single str applies the same hatch to all datasets.\n### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https://matplotlib.org/stable/devel/contributing.html#get-connected).", "created_at": "2024-07-13T23:39:40Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28541, "instance_id": "matplotlib__matplotlib-28541", "issue_numbers": ["28538", "0000"], "base_commit": "830361d544ccca824e4df745eabf25dd4afdd26f", "patch": "diff --git a/lib/matplotlib/font_manager.py b/lib/matplotlib/font_manager.py\nindex 813bee6eb623..d9560ec0cc0f 100644\n--- a/lib/matplotlib/font_manager.py\n+++ b/lib/matplotlib/font_manager.py\n@@ -965,11 +965,11 @@ def json_dump(data, filename):\n     This function temporarily locks the output file to prevent multiple\n     processes from overwriting one another's output.\n     \"\"\"\n-    with cbook._lock_path(filename), open(filename, 'w') as fh:\n-        try:\n+    try:\n+        with cbook._lock_path(filename), open(filename, 'w') as fh:\n             json.dump(data, fh, cls=_JSONEncoder, indent=2)\n-        except OSError as e:\n-            _log.warning('Could not save font_manager cache %s', e)\n+    except OSError as e:\n+        _log.warning('Could not save font_manager cache %s', e)\n \n \n def json_load(filename):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_font_manager.py b/lib/matplotlib/tests/test_font_manager.py\nindex 2dc530bf984b..c6fc422ca613 100644\n--- a/lib/matplotlib/tests/test_font_manager.py\n+++ b/lib/matplotlib/tests/test_font_manager.py\n@@ -16,7 +16,7 @@\n     json_dump, json_load, get_font, is_opentype_cff_font,\n     MSUserFontDirectories, _get_fontconfig_fonts, ttfFontProperty)\n from matplotlib import cbook, ft2font, pyplot as plt, rc_context, figure as mfigure\n-from matplotlib.testing import subprocess_run_helper\n+from matplotlib.testing import subprocess_run_helper, subprocess_run_for_testing\n \n \n has_fclist = shutil.which('fc-list') is not None\n@@ -287,6 +287,28 @@ def test_fontcache_thread_safe():\n     subprocess_run_helper(_test_threading, timeout=10)\n \n \n+def test_lockfilefailure(tmp_path):\n+    # The logic here:\n+    # 1. get a temp directory from pytest\n+    # 2. import matplotlib which makes sure it exists\n+    # 3. get the cache dir (where we check it is writable)\n+    # 4. make it not writable\n+    # 5. try to write into it via font manager\n+    proc = subprocess_run_for_testing(\n+        [\n+            sys.executable,\n+            \"-c\",\n+            \"import matplotlib;\"\n+            \"import os;\"\n+            \"p = matplotlib.get_cachedir();\"\n+            \"os.chmod(p, 0o555);\"\n+            \"import matplotlib.font_manager;\"\n+        ],\n+        env={**os.environ, 'MPLCONFIGDIR': str(tmp_path)},\n+        check=True\n+    )\n+\n+\n def test_fontentry_dataclass():\n     fontent = FontEntry(name='font-name')\n \n", "problem_statement": "[Bug]: Permission denied when importing matplotlib.pyplot\n### Bug summary\r\n\r\nOnce I type \" import matplotlib.pyplot as plt\" and run it, jupyter always returns\uff1a\r\n\uff02Matplotlib is building the font cache; this may take a moment.\uff02\r\n\uff03Then the return messages will end up as \uff1a\r\n \"PermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\J\\\\.matplotlib\\\\fontlist-v330.json.matplotlib-lock'\r\n\r\nAnd the functions of matplotlib.pyplot can not be excuted.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\nMatplotlib is building the font cache; this may take a moment.\r\n\r\nPermissionError                           Traceback (most recent call last)\r\nCell In[3], line 1\r\n----> 1 import matplotlib.pyplot as plt\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\pyplot.py:56\r\n     54 from cycler import cycler\r\n     55 import matplotlib\r\n---> 56 import matplotlib.colorbar\r\n     57 import matplotlib.image\r\n     58 from matplotlib import _api\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\colorbar.py:19\r\n     16 import numpy as np\r\n     18 import matplotlib as mpl\r\n---> 19 from matplotlib import _api, cbook, collections, cm, colors, contour, ticker\r\n     20 import matplotlib.artist as martist\r\n     21 import matplotlib.patches as mpatches\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\contour.py:15\r\n     13 import matplotlib as mpl\r\n     14 from matplotlib import _api, _docstring\r\n---> 15 from matplotlib.backend_bases import MouseButton\r\n     16 from matplotlib.lines import Line2D\r\n     17 from matplotlib.path import Path\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\backend_bases.py:46\r\n     43 import numpy as np\r\n     45 import matplotlib as mpl\r\n---> 46 from matplotlib import (\r\n     47     _api, backend_tools as tools, cbook, colors, _docstring, text,\r\n     48     _tight_bbox, transforms, widgets, is_interactive, rcParams)\r\n     49 from matplotlib._pylab_helpers import Gcf\r\n     50 from matplotlib.backend_managers import ToolManager\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\text.py:16\r\n     14 from . import _api, artist, cbook, _docstring\r\n     15 from .artist import Artist\r\n---> 16 from .font_manager import FontProperties\r\n     17 from .patches import FancyArrowPatch, FancyBboxPatch, Rectangle\r\n     18 from .textpath import TextPath, TextToPath  # noqa # Logically located here\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\font_manager.py:1582\r\n   1578     _log.info(\"generated new fontManager\")\r\n   1579     return fm\r\n-> 1582 fontManager = _load_fontmanager()\r\n   1583 findfont = fontManager.findfont\r\n   1584 get_font_names = fontManager.get_font_names\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\font_manager.py:1577, in _load_fontmanager(try_read_cache)\r\n   1575             return fm\r\n   1576 fm = FontManager()\r\n-> 1577 json_dump(fm, fm_path)\r\n   1578 _log.info(\"generated new fontManager\")\r\n   1579 return fm\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\font_manager.py:963, in json_dump(data, filename)\r\n    946 def json_dump(data, filename):\r\n    947     \"\"\"\r\n    948     Dump `FontManager` *data* as JSON to the file named *filename*.\r\n    949 \r\n   (...)\r\n    961     processes from overwriting one another's output.\r\n    962     \"\"\"\r\n--> 963     with cbook._lock_path(filename), open(filename, 'w') as fh:\r\n    964         try:\r\n    965             json.dump(data, fh, cls=_JSONEncoder, indent=2)\r\n\r\nFile ~\\anaconda3\\Lib\\contextlib.py:137, in _GeneratorContextManager.__enter__(self)\r\n    135 del self.args, self.kwds, self.func\r\n    136 try:\r\n--> 137     return next(self.gen)\r\n    138 except StopIteration:\r\n    139     raise RuntimeError(\"generator didn't yield\") from None\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\cbook.py:1821, in _lock_path(path)\r\n   1819 for _ in range(retries):\r\n   1820     try:\r\n-> 1821         with lock_path.open(\"xb\"):\r\n   1822             break\r\n   1823     except FileExistsError:\r\n\r\nFile ~\\anaconda3\\Lib\\pathlib.py:1013, in Path.open(self, mode, buffering, encoding, errors, newline)\r\n   1011 if \"b\" not in mode:\r\n   1012     encoding = io.text_encoding(encoding)\r\n-> 1013 return io.open(self, mode, buffering, encoding, errors, newline)\r\n\r\nPermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\happy\\\\.matplotlib\\\\fontlist-v330.json.matplotlib-lock'\r\n\r\n### Expected outcome\r\n\r\nThe expected outcome is to successful import matplotlib.pyplot. \r\n(\uff33\uff4f\uff52\uff52\uff59\u3000\uff54\uff4f\u3000\uff42\uff4f\uff54\uff48\uff45\uff52\u3000\uff59\uff4f\uff55\uff0e\r\nI have struggled with this for more than 2 weeks and searched different methods to resolve it. But, ...\r\nPlease help me to out of this, many many thanks!)\r\n\r\n### Additional information\r\n\r\n\uff0aWhat are the conditions under which this bug happens? input parameters, edge cases, etc?\r\nAns: When I type \" import matplotlib.pyplot as plt\" and run it in the Jupyter Notebook.\r\n\uff0aHas this worked in earlier versions? \r\nAns:\u3000No. \r\n\uff0aDo you know why this bug is happening?\r\n\uff21\uff4e\uff53\uff1a\u3000 No. \r\n\uff0aDo you maybe even know a fix? \r\n\uff21\uff4e\uff53\uff1aNo.\r\nI have tried a lot of times to figure out this import problem, including uninstall/reinstall anaconda, python, upgrade the version of matplotlib......\r\n Based on the google search results, I also tried to type\r\n \"import matplotlib matplotlib.use('TkAgg')\" \r\nbefore I import matplotlib.pyplot. \r\nBut it returns me \r\n\uff02Cell In[2], \r\nline 1     import matplotlib matplotlib.use('TkAgg')                       \r\n^ SyntaxError: invalid syntax\uff02\r\n```\r\n\r\n### Operating system\r\n\r\n\uff37\uff49\uff4e\uff44\uff4f\uff57\uff53\r\n\r\n### Matplotlib Version\r\n\r\nmatplotlib 3.8.4\r\n\r\n### Matplotlib Backend\r\n\r\nmatplotlib-inline 0.1.6\r\n\r\n### Python version\r\n\r\nPython 3.12.3\r\n\r\n### Jupyter version\r\n\r\n\uff2a\uff55\uff50\uff59\uff54\uff45\uff52\u30007.0.8\r\n\r\n### Installation\r\n\r\nconda\r\n\r\n\r\n[TAC edited to add markup]\n", "hints_text": "The error is that you don't have permission to create `C:\\Users\\J\\.matplotlib\\fontlist-v330.json.matplotlib-lock`. This is unusual, but I doubt there is a bug in matplotlib. You need to see what the permissions are for the `C:\\Users\\J\\.matplotlib\\` folder. I am assuming that you are logged in as the user `J`?\nAgree that this is a permissions issue and you should sort out why a process running as your user can not create the lock file.  I would try removing `C:\\Users\\J\\.matplotlib` and letting us re-generate it on the next import.  On startup we check that the path exists, is a directory, and is writable.  It would be good to sort out how you got to this state so we can make our test more correct.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/6b7b99927458de5980f8d5590073dd81e44e4cc5/lib/matplotlib/__init__.py#L520-L534\r\n\r\nis how we are currently checking that we can write to the cache directory.\r\n\r\nThat said, we do have the behavior that if the config directory is not writable we skip writing and continue on.  \r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/6b7b99927458de5980f8d5590073dd81e44e4cc5/lib/matplotlib/font_manager.py#L968-L972\r\n\r\nWe are being careful about the json writing failing, but not careful about the lock failing!  \n> The error is that you don't have permission to create `C:\\Users\\J\\.matplotlib\\fontlist-v330.json.matplotlib-lock`. This is unusual, but I doubt there is a bug in matplotlib. You need to see what the permissions are for the `C:\\Users\\J\\.matplotlib\\` folder. I am assuming that you are logged in as the user `J`?\r\n\r\n\r\n\r\nDear WeatherGod  and tacaswell,\r\nThank you so much for your suggestion.\r\nYes, I am login as \"J\". \r\nI will try what your suggestions to see whether it can be resolved or not.\r\n\r\nActually, when I bumped into that import problem, I had tried to figure it out by reinstall my Anaconda and Python, therefor I remove both of them through the \"Uninstall or change a program\"  of \"Control panel\". \r\nAfter the removing, I did the re-install of Anaconda. But one message is shown up as:\r\n \"A version of Python 3.12(64-bit) is alreadt at C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.12_3.12.1264.O_x64_qbz5n2kfra8pO\r\nWe recommend that if you want Anaconda3 registered as your system Python, you unregister this Python first. If you really know this is what you want, click OK, otherwise click cancel to continue.\"\r\nTherefor, I went back to check the existence of Python form  the \"Uninstall or change a program\" , but there is nothing left.\r\nThen, I tried to reach the Python 3.12 mentioned in the above message to remove it. But I was prohibited from accessing the C:\\Program Files\\.\r\nSo I went back to the Anaconda installation and finish it.\r\nAfter that, I checked the versions of Anaconda, Python. Open the jupyter notebook and type the \"import matplotlib.pyplot as plt\" and run it, and, the Denied Message shown it self again to me.\r\nI am wondering whether this event being related with this import denied problem since before that, the use of jupyter and importing of matplotlib.pyplot were smooth.\r\n\r\nA lot of thanks for your great suggestions. I will try it! Thank you!\nIt is highly unlikely that the installation and uninstallation problems\r\nhave anything to do with the permission issues.\r\n\r\nOn Thu, Jul 11, 2024 at 12:24\u202fPM JCisCS ***@***.***> wrote:\r\n\r\n> The error is that you don't have permission to create\r\n> C:\\Users\\J\\.matplotlib\\fontlist-v330.json.matplotlib-lock. This is\r\n> unusual, but I doubt there is a bug in matplotlib. You need to see what the\r\n> permissions are for the C:\\Users\\J\\.matplotlib\\ folder. I am assuming\r\n> that you are logged in as the user J?\r\n>\r\n> Dear WeatherGod and tacaswell,\r\n> Thank you so much for your suggestion.\r\n> Yes, I am login as \"J\".\r\n> I will try what your suggestions to see whether it can be resolved or not.\r\n>\r\n> Actually, when I bumped into that import problem, I had tried to figure it\r\n> out by reinstall my Anaconda and Python, therefor I remove both of them\r\n> through the \"Uninstall or change a program\" of \"Control panel\".\r\n> After the removing, I did the re-install of Anaconda. But one message is\r\n> shown up as:\r\n> \"A version of Python 3.12(64-bit) is alreadt at C:\\Program\r\n> Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.12_3.12.1264.O_x64_qbz5n2kfra8pO\r\n> We recommend that if you want Anaconda3 registered as your system Python,\r\n> you unregister this Python first. If you really know this is what you want,\r\n> click OK, otherwise click cancel to continue.\"\r\n> Therefor, I went back to check the existence of Python form the \"Uninstall\r\n> or change a program\" , but there is nothing left.\r\n> Then, I tried to reach the Python 3.12 mentioned in the above message to\r\n> remove it. But I was prohibited from accessing the C:\\Program Files.\r\n> So I went back to the Anaconda installation and finish it.\r\n> After that, I checked the versions of Anaconda, Python. Open the jupyter\r\n> notebook and type the \"import matplotlib.pyplot as plt\" and run it, and,\r\n> the Denied Message shown it self again to me.\r\n> I am wondering whether this event being related with this import denied\r\n> problem since before that, the use of jupyter and importing of\r\n> matplotlib.pyplot were smooth.\r\n>\r\n> A lot of thanks for your great suggestions. I will try it! Thank you!\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/28538#issuecomment-2223363412>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AACHF6CSFKKV7AT5QNNLS7LZL2WUFAVCNFSM6AAAAABKWUVYHWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMRTGM3DGNBRGI>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n\nI'm going to re-open this as we should not be failing to import due to failure to write the cache.", "created_at": "2024-07-11T20:43:11Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28503, "instance_id": "matplotlib__matplotlib-28503", "issue_numbers": ["28489", "0000"], "base_commit": "e5225b4a5d3486637852fff2d37dc129da12fce4", "patch": "diff --git a/.circleci/config.yml b/.circleci/config.yml\nindex 5b4cbf5570b8..7436698c8068 100644\n--- a/.circleci/config.yml\n+++ b/.circleci/config.yml\n@@ -216,9 +216,9 @@ commands:\n #\n \n jobs:\n-  docs-python39:\n+  docs-python310:\n     docker:\n-      - image: cimg/python:3.9\n+      - image: cimg/python:3.10\n     resource_class: large\n     steps:\n       - checkout\n@@ -259,4 +259,4 @@ workflows:\n     jobs:\n       # NOTE: If you rename this job, then you must update the `if` condition\n       # and `circleci-jobs` option in `.github/workflows/circleci.yml`.\n-      - docs-python39\n+      - docs-python310\ndiff --git a/.github/workflows/cibuildwheel.yml b/.github/workflows/cibuildwheel.yml\nindex 050ff16cfbbd..50adc91980de 100644\n--- a/.github/workflows/cibuildwheel.yml\n+++ b/.github/workflows/cibuildwheel.yml\n@@ -46,7 +46,7 @@ jobs:\n       - uses: actions/setup-python@v5\n         name: Install Python\n         with:\n-          python-version: 3.9\n+          python-version: '3.10'\n \n       # Something changed somewhere that prevents the downloaded-at-build-time\n       # licenses from being included in built wheels, so pre-download them so\n@@ -158,22 +158,14 @@ jobs:\n           CIBW_BUILD: \"cp310-*\"\n           CIBW_ARCHS: ${{ matrix.cibw_archs }}\n \n-      - name: Build wheels for CPython 3.9\n-        uses: pypa/cibuildwheel@7e5a838a63ac8128d71ab2dfd99e4634dd1bca09  # v2.19.2\n-        with:\n-          package-dir: dist/${{ needs.build_sdist.outputs.SDIST_NAME }}\n-        env:\n-          CIBW_BUILD: \"cp39-*\"\n-          CIBW_ARCHS: ${{ matrix.cibw_archs }}\n-\n       - name: Build wheels for PyPy\n         uses: pypa/cibuildwheel@7e5a838a63ac8128d71ab2dfd99e4634dd1bca09  # v2.19.2\n         with:\n           package-dir: dist/${{ needs.build_sdist.outputs.SDIST_NAME }}\n         env:\n-          CIBW_BUILD: \"pp39-*\"\n+          CIBW_BUILD: \"pp310-*\"\n           CIBW_ARCHS: ${{ matrix.cibw_archs }}\n-        if: matrix.cibw_archs != 'aarch64'\n+        if: matrix.cibw_archs != 'aarch64' && matrix.os != 'windows-latest'\n \n       - uses: actions/upload-artifact@v4\n         with:\ndiff --git a/.github/workflows/circleci.yml b/.github/workflows/circleci.yml\nindex 3aead720cf20..c96dbecda7a1 100644\n--- a/.github/workflows/circleci.yml\n+++ b/.github/workflows/circleci.yml\n@@ -3,7 +3,7 @@ name: \"CircleCI artifact handling\"\n on: [status]\n jobs:\n   circleci_artifacts_redirector_job:\n-    if: \"${{ github.event.context == 'ci/circleci: docs-python39' }}\"\n+    if: \"${{ github.event.context == 'ci/circleci: docs-python310' }}\"\n     permissions:\n       statuses: write\n     runs-on: ubuntu-latest\n@@ -16,11 +16,11 @@ jobs:\n           repo-token: ${{ secrets.GITHUB_TOKEN }}\n           api-token: ${{ secrets.CIRCLECI_TOKEN }}\n           artifact-path: 0/doc/build/html/index.html\n-          circleci-jobs: docs-python39\n+          circleci-jobs: docs-python310\n           job-title: View the built docs\n \n   post_warnings_as_review:\n-    if: \"${{ github.event.context == 'ci/circleci: docs-python39' }}\"\n+    if: \"${{ github.event.context == 'ci/circleci: docs-python310' }}\"\n     permissions:\n       contents: read\n       checks: write\ndiff --git a/.github/workflows/cygwin.yml b/.github/workflows/cygwin.yml\nindex 58c132315b6f..b8bb4400f2f3 100644\n--- a/.github/workflows/cygwin.yml\n+++ b/.github/workflows/cygwin.yml\n@@ -49,10 +49,12 @@ jobs:\n   test-cygwin:\n     runs-on: windows-latest\n     name: Python 3.${{ matrix.python-minor-version }} on Cygwin\n+    # Enable these when Cygwin has Python 3.12.\n     if: >-\n       github.event_name == 'workflow_dispatch' ||\n-      github.event_name == 'schedule' ||\n+      (false && github.event_name == 'schedule') ||\n       (\n+        false &&\n         github.repository == 'matplotlib/matplotlib' &&\n         !contains(github.event.head_commit.message, '[ci skip]') &&\n         !contains(github.event.head_commit.message, '[skip ci]') &&\n@@ -72,7 +74,7 @@ jobs:\n       )\n     strategy:\n       matrix:\n-        python-minor-version: [9]\n+        python-minor-version: [12]\n \n     steps:\n       - name: Fix line endings\ndiff --git a/.github/workflows/reviewdog.yml b/.github/workflows/reviewdog.yml\nindex fbd724571d80..12b59d866e42 100644\n--- a/.github/workflows/reviewdog.yml\n+++ b/.github/workflows/reviewdog.yml\n@@ -17,7 +17,7 @@ jobs:\n       - name: Set up Python 3\n         uses: actions/setup-python@v5\n         with:\n-          python-version: 3.9\n+          python-version: '3.10'\n \n       - name: Install flake8\n         run: pip3 install -r requirements/testing/flake8.txt\n@@ -42,7 +42,7 @@ jobs:\n       - name: Set up Python 3\n         uses: actions/setup-python@v5\n         with:\n-          python-version: 3.9\n+          python-version: '3.10'\n \n       - name: Install mypy\n         run: pip3 install -r requirements/testing/mypy.txt -r requirements/testing/all.txt\ndiff --git a/azure-pipelines.yml b/azure-pipelines.yml\nindex 91e653b033f2..35c95c3b1f94 100644\n--- a/azure-pipelines.yml\n+++ b/azure-pipelines.yml\n@@ -49,29 +49,20 @@ stages:\n       - job: Pytest\n         strategy:\n           matrix:\n-            Linux_py39:\n-              vmImage: 'ubuntu-20.04'  # keep one job pinned to the oldest image\n-              python.version: '3.9'\n             Linux_py310:\n-              vmImage: 'ubuntu-latest'\n+              vmImage: 'ubuntu-20.04'  # keep one job pinned to the oldest image\n               python.version: '3.10'\n             Linux_py311:\n               vmImage: 'ubuntu-latest'\n               python.version: '3.11'\n-            macOS_py39:\n-              vmImage: 'macOS-latest'\n-              python.version: '3.9'\n             macOS_py310:\n               vmImage: 'macOS-latest'\n               python.version: '3.10'\n             macOS_py311:\n               vmImage: 'macOS-latest'\n               python.version: '3.11'\n-            Windows_py39:\n-              vmImage: 'windows-2019'  # keep one job pinned to the oldest image\n-              python.version: '3.9'\n             Windows_py310:\n-              vmImage: 'windows-latest'\n+              vmImage: 'windows-2019'  # keep one job pinned to the oldest image\n               python.version: '3.10'\n             Windows_py311:\n               vmImage: 'windows-latest'\ndiff --git a/doc/api/next_api_changes/development/28503-ES.rst b/doc/api/next_api_changes/development/28503-ES.rst\nnew file mode 100644\nindex 000000000000..e9b109cb8515\n--- /dev/null\n+++ b/doc/api/next_api_changes/development/28503-ES.rst\n@@ -0,0 +1,14 @@\n+Increase to minimum supported versions of dependencies\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+For Matplotlib 3.10, the :ref:`minimum supported versions <dependencies>` are\n+being bumped:\n+\n++------------+-----------------+----------------+\n+| Dependency |  min in mpl3.9  | min in mpl3.10 |\n++============+=================+================+\n+|   Python   |       3.9       |      3.10      |\n++------------+-----------------+----------------+\n+\n+This is consistent with our :ref:`min_deps_policy` and `SPEC0\n+<https://scientific-python.org/specs/spec-0000/>`__\ndiff --git a/doc/install/dependencies.rst b/doc/install/dependencies.rst\nindex 8da22a16753b..3d921d2d10c9 100644\n--- a/doc/install/dependencies.rst\n+++ b/doc/install/dependencies.rst\n@@ -20,7 +20,7 @@ When installing through a package manager like ``pip`` or ``conda``, the\n mandatory dependencies are automatically installed. This list is mainly for\n reference.\n \n-* `Python <https://www.python.org/downloads/>`_ (>= 3.9)\n+* `Python <https://www.python.org/downloads/>`_ (>= 3.10)\n * `contourpy <https://pypi.org/project/contourpy/>`_ (>= 1.0.1)\n * `cycler <https://matplotlib.org/cycler/>`_ (>= 0.10.0)\n * `dateutil <https://pypi.org/project/python-dateutil/>`_ (>= 2.7)\n@@ -30,8 +30,6 @@ reference.\n * `packaging <https://pypi.org/project/packaging/>`_ (>= 20.0)\n * `Pillow <https://pillow.readthedocs.io/en/latest/>`_ (>= 8.0)\n * `pyparsing <https://pypi.org/project/pyparsing/>`_ (>= 2.3.1)\n-* `importlib-resources <https://pypi.org/project/importlib-resources/>`_\n-  (>= 3.2.0; only required on Python < 3.10)\n \n \n .. _optional_dependencies:\ndiff --git a/doc/install/index.rst b/doc/install/index.rst\nindex 867e4600a77e..99ccc163a82e 100644\n--- a/doc/install/index.rst\n+++ b/doc/install/index.rst\n@@ -267,9 +267,9 @@ at the Terminal.app command line::\n \n You should see something like ::\n \n-  3.6.0 /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/__init__.py\n+  3.10.0 /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/matplotlib/__init__.py\n \n-where ``3.6.0`` is the Matplotlib version you just installed, and the path\n+where ``3.10.0`` is the Matplotlib version you just installed, and the path\n following depends on whether you are using Python.org Python, Homebrew or\n Macports.  If you see another version, or you get an error like ::\n \ndiff --git a/environment.yml b/environment.yml\nindex ccd5270e9149..264f02800690 100644\n--- a/environment.yml\n+++ b/environment.yml\n@@ -24,6 +24,7 @@ dependencies:\n   - pygobject\n   - pyparsing>=2.3.1\n   - pyqt\n+  - python>=3.10\n   - python-dateutil>=2.1\n   - setuptools_scm\n   - wxpython\ndiff --git a/galleries/users_explain/customizing.py b/galleries/users_explain/customizing.py\nindex b0aaee03239e..05b75ba7d0a4 100644\n--- a/galleries/users_explain/customizing.py\n+++ b/galleries/users_explain/customizing.py\n@@ -234,8 +234,8 @@ def plotting_function():\n #\n # 4. :file:`{INSTALL}/matplotlib/mpl-data/matplotlibrc`, where\n #    :file:`{INSTALL}` is something like\n-#    :file:`/usr/lib/python3.9/site-packages` on Linux, and maybe\n-#    :file:`C:\\\\Python39\\\\Lib\\\\site-packages` on Windows. Every time you\n+#    :file:`/usr/lib/python3.10/site-packages` on Linux, and maybe\n+#    :file:`C:\\\\Python310\\\\Lib\\\\site-packages` on Windows. Every time you\n #    install matplotlib, this file will be overwritten, so if you want\n #    your customizations to be saved, please move this file to your\n #    user-specific matplotlib directory.\ndiff --git a/lib/matplotlib/_api/__init__.pyi b/lib/matplotlib/_api/__init__.pyi\nindex 4baff7cd804c..8dbef9528a82 100644\n--- a/lib/matplotlib/_api/__init__.pyi\n+++ b/lib/matplotlib/_api/__init__.pyi\n@@ -1,5 +1,6 @@\n from collections.abc import Callable, Generator, Mapping, Sequence\n from typing import Any, Iterable, TypeVar, overload\n+from typing_extensions import Self  # < Py 3.11\n \n from numpy.typing import NDArray\n \n@@ -25,9 +26,8 @@ class classproperty(Any):\n         fdel: None = ...,\n         doc: str | None = None,\n     ): ...\n-    # Replace return with Self when py3.9 is dropped\n     @overload\n-    def __get__(self, instance: None, owner: None) -> classproperty: ...\n+    def __get__(self, instance: None, owner: None) -> Self: ...\n     @overload\n     def __get__(self, instance: object, owner: type[object]) -> Any: ...\n     @property\ndiff --git a/lib/matplotlib/_api/deprecation.pyi b/lib/matplotlib/_api/deprecation.pyi\nindex 9619d1b484fc..d0d04d987410 100644\n--- a/lib/matplotlib/_api/deprecation.pyi\n+++ b/lib/matplotlib/_api/deprecation.pyi\n@@ -1,8 +1,7 @@\n from collections.abc import Callable\n import contextlib\n-from typing import Any, TypedDict, TypeVar, overload\n+from typing import Any, ParamSpec, TypedDict, TypeVar, overload\n from typing_extensions import (\n-    ParamSpec,  # < Py 3.10\n     Unpack,  # < Py 3.11\n )\n \ndiff --git a/lib/matplotlib/axis.pyi b/lib/matplotlib/axis.pyi\nindex e23ae381c338..8f69fe4039a8 100644\n--- a/lib/matplotlib/axis.pyi\n+++ b/lib/matplotlib/axis.pyi\n@@ -1,6 +1,7 @@\n from collections.abc import Callable, Iterable, Sequence\n import datetime\n from typing import Any, Literal, overload\n+from typing_extensions import Self  # < Py 3.11\n \n import numpy as np\n from numpy.typing import ArrayLike\n@@ -93,9 +94,8 @@ class Ticker:\n \n class _LazyTickList:\n     def __init__(self, major: bool) -> None: ...\n-    # Replace return with Self when py3.9 is dropped\n     @overload\n-    def __get__(self, instance: None, owner: None) -> _LazyTickList: ...\n+    def __get__(self, instance: None, owner: None) -> Self: ...\n     @overload\n     def __get__(self, instance: Axis, owner: type[Axis]) -> list[Tick]: ...\n \ndiff --git a/lib/matplotlib/backends/registry.py b/lib/matplotlib/backends/registry.py\nindex e08817bb089b..3c85a9b47d7b 100644\n--- a/lib/matplotlib/backends/registry.py\n+++ b/lib/matplotlib/backends/registry.py\n@@ -132,14 +132,8 @@ def _read_entry_points(self):\n         #   [project.entry-points.\"matplotlib.backend\"]\n         #   inline = \"matplotlib_inline.backend_inline\"\n         import importlib.metadata as im\n-        import sys\n-\n-        # entry_points group keyword not available before Python 3.10\n-        group = \"matplotlib.backend\"\n-        if sys.version_info >= (3, 10):\n-            entry_points = im.entry_points(group=group)\n-        else:\n-            entry_points = im.entry_points().get(group, ())\n+\n+        entry_points = im.entry_points(group=\"matplotlib.backend\")\n         entries = [(entry.name, entry.value) for entry in entry_points]\n \n         # For backward compatibility, if matplotlib-inline and/or ipympl are installed\ndiff --git a/lib/matplotlib/dviread.pyi b/lib/matplotlib/dviread.pyi\nindex bf5cfcbe317a..270818278f17 100644\n--- a/lib/matplotlib/dviread.pyi\n+++ b/lib/matplotlib/dviread.pyi\n@@ -5,6 +5,7 @@ from enum import Enum\n from collections.abc import Generator\n \n from typing import NamedTuple\n+from typing_extensions import Self  # < Py 3.11\n \n class _dvistate(Enum):\n     pre: int\n@@ -47,8 +48,7 @@ class Dvi:\n     fonts: dict[int, DviFont]\n     state: _dvistate\n     def __init__(self, filename: str | os.PathLike, dpi: float | None) -> None: ...\n-    # Replace return with Self when py3.9 is dropped\n-    def __enter__(self) -> Dvi: ...\n+    def __enter__(self) -> Self: ...\n     def __exit__(self, etype, evalue, etrace) -> None: ...\n     def __iter__(self) -> Generator[Page, None, None]: ...\n     def close(self) -> None: ...\n@@ -83,8 +83,7 @@ class PsFont(NamedTuple):\n     filename: str\n \n class PsfontsMap:\n-    # Replace return with Self when py3.9 is dropped\n-    def __new__(cls, filename: str | os.PathLike) -> PsfontsMap: ...\n+    def __new__(cls, filename: str | os.PathLike) -> Self: ...\n     def __getitem__(self, texname: bytes) -> PsFont: ...\n \n def find_tex_file(filename: str | os.PathLike) -> str: ...\ndiff --git a/lib/matplotlib/sankey.pyi b/lib/matplotlib/sankey.pyi\nindex 4a40c31e3c6a..33565b998a9c 100644\n--- a/lib/matplotlib/sankey.pyi\n+++ b/lib/matplotlib/sankey.pyi\n@@ -2,6 +2,7 @@ from matplotlib.axes import Axes\n \n from collections.abc import Callable, Iterable\n from typing import Any\n+from typing_extensions import Self  # < Py 3.11\n \n import numpy as np\n \n@@ -56,6 +57,5 @@ class Sankey:\n         connect: tuple[int, int] = ...,\n         rotation: float = ...,\n         **kwargs\n-        # Replace return with Self when py3.9 is dropped\n-    ) -> Sankey: ...\n+    ) -> Self: ...\n     def finish(self) -> list[Any]: ...\ndiff --git a/lib/matplotlib/style/core.py b/lib/matplotlib/style/core.py\nindex 7e9008c56165..e36c3c37a882 100644\n--- a/lib/matplotlib/style/core.py\n+++ b/lib/matplotlib/style/core.py\n@@ -12,19 +12,12 @@\n \"\"\"\n \n import contextlib\n+import importlib.resources\n import logging\n import os\n from pathlib import Path\n-import sys\n import warnings\n \n-if sys.version_info >= (3, 10):\n-    import importlib.resources as importlib_resources\n-else:\n-    # Even though Py3.9 has importlib.resources, it doesn't properly handle\n-    # modules added in sys.path.\n-    import importlib_resources\n-\n import matplotlib as mpl\n from matplotlib import _api, _docstring, _rc_params_in_file, rcParamsDefault\n \n@@ -121,8 +114,7 @@ def use(style):\n             elif \".\" in style:\n                 pkg, _, name = style.rpartition(\".\")\n                 try:\n-                    path = (importlib_resources.files(pkg)\n-                            / f\"{name}.{STYLE_EXTENSION}\")\n+                    path = importlib.resources.files(pkg) / f\"{name}.{STYLE_EXTENSION}\"\n                     style = _rc_params_in_file(path)\n                 except (ModuleNotFoundError, OSError, TypeError) as exc:\n                     # There is an ambiguity whether a dotted name refers to a\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 14ad28d23603..40222fe266da 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -16,7 +16,6 @@ classifiers=[\n     \"License :: OSI Approved :: Python Software Foundation License\",\n     \"Programming Language :: Python\",\n     \"Programming Language :: Python :: 3\",\n-    \"Programming Language :: Python :: 3.9\",\n     \"Programming Language :: Python :: 3.10\",\n     \"Programming Language :: Python :: 3.11\",\n     \"Programming Language :: Python :: 3.12\",\n@@ -40,9 +39,8 @@ dependencies = [\n     \"pillow >= 8\",\n     \"pyparsing >= 2.3.1\",\n     \"python-dateutil >= 2.7\",\n-    \"importlib-resources >= 3.2.0; python_version < '3.10'\",\n ]\n-requires-python = \">=3.9\"\n+requires-python = \">=3.10\"\n \n [project.optional-dependencies]\n # Should be a copy of the build dependencies below.\n@@ -160,7 +158,7 @@ external = [\n   \"E703\",\n ]\n \n-target-version = \"py39\"\n+target-version = \"py310\"\n \n [tool.ruff.pydocstyle]\n convention = \"numpy\"\ndiff --git a/tools/boilerplate.py b/tools/boilerplate.py\nindex a0943df00866..db93b102fce9 100644\n--- a/tools/boilerplate.py\n+++ b/tools/boilerplate.py\n@@ -27,31 +27,9 @@\n import numpy as np\n from matplotlib import _api, mlab\n from matplotlib.axes import Axes\n-from matplotlib.backend_bases import MouseButton\n from matplotlib.figure import Figure\n \n \n-# we need to define a custom str because py310 change\n-# In Python 3.10 the repr and str representation of Enums changed from\n-#\n-#  str: 'ClassName.NAME' -> 'NAME'\n-#  repr: '<ClassName.NAME: value>' -> 'ClassName.NAME'\n-#\n-# which is more consistent with what str/repr should do, however this breaks\n-# boilerplate which needs to get the ClassName.NAME version in all versions of\n-# Python. Thus, we locally monkey patch our preferred str representation in\n-# here.\n-#\n-# bpo-40066\n-# https://github.com/python/cpython/pull/22392/\n-def enum_str_back_compat_patch(self):\n-    return f'{type(self).__name__}.{self.name}'\n-\n-# only monkey patch if we have to.\n-if str(MouseButton.LEFT) != 'MouseButton.Left':\n-    MouseButton.__str__ = enum_str_back_compat_patch\n-\n-\n # This is the magic line that must exist in pyplot, after which the boilerplate\n # content will be appended.\n PYPLOT_MAGIC_HEADER = (\n@@ -112,7 +90,7 @@ def __init__(self, value):\n             self._repr = \"_api.deprecation._deprecated_parameter\"\n         elif isinstance(value, Enum):\n             # Enum str is Class.Name whereas their repr is <Class.Name: value>.\n-            self._repr = str(value)\n+            self._repr = f'{type(value).__name__}.{value.name}'\n         else:\n             self._repr = repr(value)\n \ndiff --git a/tox.ini b/tox.ini\nindex cb2fcc979076..00ea746c8923 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -4,7 +4,7 @@\n # and then run \"tox\" from this directory.\n \n [tox]\n-envlist = py38, py39, py310, stubtest\n+envlist = py310, py311, py312, stubtest\n \n [testenv]\n changedir = /tmp\n", "test_patch": "diff --git a/.github/workflows/mypy-stubtest.yml b/.github/workflows/mypy-stubtest.yml\nindex 969aacccad74..5b29a93b7533 100644\n--- a/.github/workflows/mypy-stubtest.yml\n+++ b/.github/workflows/mypy-stubtest.yml\n@@ -16,7 +16,7 @@ jobs:\n       - name: Set up Python 3\n         uses: actions/setup-python@v5\n         with:\n-          python-version: 3.9\n+          python-version: '3.10'\n \n       - name: Set up reviewdog\n         uses: reviewdog/action-setup@v1\n@@ -30,7 +30,7 @@ jobs:\n         run: |\n           set -o pipefail\n           tox -e stubtest | \\\n-              sed -e \"s!.tox/stubtest/lib/python3.9/site-packages!lib!g\" | \\\n+              sed -e \"s!.tox/stubtest/lib/python3.10/site-packages!lib!g\" | \\\n               reviewdog \\\n                 -efm '%Eerror: %m' \\\n                 -efm '%CStub: in file %f:%l' \\\ndiff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex 8875a38cc1bb..230c42c136d5 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -50,31 +50,28 @@ jobs:\n         include:\n           - name-suffix: \"(Minimum Versions)\"\n             os: ubuntu-20.04\n-            python-version: 3.9\n+            python-version: '3.10'\n             extra-requirements: '-c requirements/testing/minver.txt'\n-            pyqt5-ver: '==5.12.2 sip==5.0.0'  # oldest versions with a Py3.9 wheel.\n-            pyqt6-ver: '==6.1.0 PyQt6-Qt6==6.1.0'\n-            pyside2-ver: '==5.15.1'  # oldest version with working Py3.9 wheel.\n-            pyside6-ver: '==6.0.0'\n             delete-font-cache: true\n+            # Oldest versions with Py3.10 wheels.\n+            pyqt5-ver: '==5.15.5 sip==6.3.0'\n+            pyqt6-ver: '==6.2.0 PyQt6-Qt6==6.2.0'\n+            pyside2-ver: '==5.15.2.1'\n+            pyside6-ver: '==6.2.0'\n           - os: ubuntu-20.04\n-            python-version: 3.9\n+            python-version: '3.10'\n             # One CI run tests ipython/matplotlib-inline before backend mapping moved to mpl\n-            extra-requirements: '-r requirements/testing/extra.txt \"ipython==7.19\" \"matplotlib-inline<0.1.7\"'\n+            extra-requirements:\n+              -r requirements/testing/extra.txt\n+              \"ipython==7.29.0\"\n+              \"ipykernel==5.5.6\"\n+              \"matplotlib-inline<0.1.7\"\n             CFLAGS: \"-fno-lto\"  # Ensure that disabling LTO works.\n             # https://github.com/matplotlib/matplotlib/pull/26052#issuecomment-1574595954\n             # https://www.riverbankcomputing.com/pipermail/pyqt/2023-November/045606.html\n             pyqt6-ver: '!=6.5.1,!=6.6.0'\n             # https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-2346\n             pyside6-ver: '!=6.5.1'\n-          - os: ubuntu-20.04\n-            python-version: '3.10'\n-            extra-requirements: '-r requirements/testing/extra.txt'\n-            # https://github.com/matplotlib/matplotlib/pull/26052#issuecomment-1574595954\n-            # https://www.riverbankcomputing.com/pipermail/pyqt/2023-November/045606.html\n-            pyqt6-ver: '!=6.5.1,!=6.6.0'\n-            # https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-2346\n-            pyside6-ver: '!=6.5.1'\n           - os: ubuntu-22.04\n             python-version: '3.11'\n             # https://www.riverbankcomputing.com/pipermail/pyqt/2023-November/045606.html\n@@ -88,8 +85,8 @@ jobs:\n             pyqt6-ver: '!=6.6.0'\n             # https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-2346\n             pyside6-ver: '!=6.5.1'\n-          - os: macos-12  # This runnre is on Intel chips.\n-            python-version: 3.9\n+          - os: macos-12  # This runner is on Intel chips.\n+            python-version: '3.10'\n             # https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-2346\n             pyside6-ver: '!=6.5.1'\n           - os: macos-14  # This runner is on M1 (arm64) chips.\ndiff --git a/doc/devel/testing.rst b/doc/devel/testing.rst\nindex 668d4bd56b83..72f787eca746 100644\n--- a/doc/devel/testing.rst\n+++ b/doc/devel/testing.rst\n@@ -252,7 +252,7 @@ Using tox\n \n `Tox <https://tox.readthedocs.io/en/latest/>`_ is a tool for running tests\n against multiple Python environments, including multiple versions of Python\n-(e.g., 3.7, 3.8) and even different Python implementations altogether\n+(e.g., 3.10, 3.11) and even different Python implementations altogether\n (e.g., CPython, PyPy, Jython, etc.), as long as all these versions are\n available on your system's $PATH (consider using your system package manager,\n e.g. apt-get, yum, or Homebrew, to install them).\n@@ -269,7 +269,7 @@ You can also run tox on a subset of environments:\n \n .. code-block:: bash\n \n-    $ tox -e py38,py39\n+    $ tox -e py310,py311\n \n Tox processes everything serially so it can take a long time to test\n several environments. To speed it up, you might try using a new,\ndiff --git a/lib/matplotlib/tests/test_backend_inline.py b/lib/matplotlib/tests/test_backend_inline.py\nindex 4112eb213e2c..6f0d67d51756 100644\n--- a/lib/matplotlib/tests/test_backend_inline.py\n+++ b/lib/matplotlib/tests/test_backend_inline.py\n@@ -1,7 +1,6 @@\n import os\n from pathlib import Path\n from tempfile import TemporaryDirectory\n-import sys\n \n import pytest\n \n@@ -13,7 +12,6 @@\n pytest.importorskip('matplotlib_inline')\n \n \n-@pytest.mark.skipif(sys.version_info[:2] <= (3, 9), reason=\"Requires Python 3.10+\")\n def test_ipynb():\n     nb_path = Path(__file__).parent / 'test_inline_01.ipynb'\n \ndiff --git a/lib/matplotlib/tests/test_sphinxext.py b/lib/matplotlib/tests/test_sphinxext.py\nindex 6624e3b17ba5..24efecbeae9d 100644\n--- a/lib/matplotlib/tests/test_sphinxext.py\n+++ b/lib/matplotlib/tests/test_sphinxext.py\n@@ -10,8 +10,7 @@\n import pytest\n \n \n-pytest.importorskip('sphinx',\n-                    minversion=None if sys.version_info < (3, 10) else '4.1.3')\n+pytest.importorskip('sphinx', minversion='4.1.3')\n \n \n def build_sphinx_html(source_dir, doctree_dir, html_dir, extra_args=None):\ndiff --git a/requirements/testing/extra.txt b/requirements/testing/extra.txt\nindex b3e9009b561c..a5c1bef5f03a 100644\n--- a/requirements/testing/extra.txt\n+++ b/requirements/testing/extra.txt\n@@ -1,4 +1,4 @@\n-# Extra pip requirements for the Python 3.9+ builds\n+# Extra pip requirements for the Python 3.10+ builds\n \n --prefer-binary\n ipykernel\ndiff --git a/requirements/testing/minver.txt b/requirements/testing/minver.txt\nindex 1a95367eff14..3932e68eb015 100644\n--- a/requirements/testing/minver.txt\n+++ b/requirements/testing/minver.txt\n@@ -4,12 +4,12 @@ contourpy==1.0.1\n cycler==0.10\n fonttools==4.22.0\n importlib-resources==3.2.0\n-kiwisolver==1.3.1\n+kiwisolver==1.3.2\n meson-python==0.13.1\n meson==1.1.0\n numpy==1.23.0\n packaging==20.0\n-pillow==8.0.0\n+pillow==8.3.2\n pyparsing==2.3.1\n pytest==7.0.0\n python-dateutil==2.7\ndiff --git a/requirements/testing/mypy.txt b/requirements/testing/mypy.txt\nindex a5ca15cfbdad..9e3738556a8f 100644\n--- a/requirements/testing/mypy.txt\n+++ b/requirements/testing/mypy.txt\n@@ -25,5 +25,3 @@ pyparsing>=2.3.1\n python-dateutil>=2.7\n setuptools_scm>=7\n setuptools>=64\n-\n-importlib-resources>=3.2.0 ; python_version < \"3.10\"\n", "problem_statement": "[TST] Upcoming dependency test failures\nThe weekly build with nightly wheels from numpy and pandas\nhas failed. Check the logs for any updates that need to be\nmade in matplotlib.\nhttps://github.com/matplotlib/matplotlib/actions/runs/9721989654\n", "hints_text": "It looks like Pandas just recently bumped minimum Python to 3.10, so we aren't getting any 3.9 wheels from the nightly index any more.\nIt is time for us to do the same on main.", "created_at": "2024-07-03T04:15:30Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28487, "instance_id": "matplotlib__matplotlib-28487", "issue_numbers": ["28341", "0000"], "base_commit": "74c7f9a598c4e32b3f551f75ed965f446d786ab1", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 328dda4a6a71..5e69bcb57d7f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1028,7 +1028,7 @@ def axhspan(self, ymin, ymax, xmin=0, xmax=1, **kwargs):\n         # For Rectangles and non-separable transforms, add_patch can be buggy\n         # and update the x limits even though it shouldn't do so for an\n         # yaxis_transformed patch, so undo that update.\n-        ix = self.dataLim.intervalx\n+        ix = self.dataLim.intervalx.copy()\n         mx = self.dataLim.minposx\n         self.add_patch(p)\n         self.dataLim.intervalx = ix\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 48121ee04939..13c181b68492 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8250,10 +8250,10 @@ def test_relative_ticklabel_sizes(size):\n def test_multiplot_autoscale():\n     fig = plt.figure()\n     ax1, ax2 = fig.subplots(2, 1, sharex='all')\n-    ax1.scatter([1, 2, 3, 4], [2, 3, 2, 3])\n+    ax1.plot([18000, 18250, 18500, 18750], [2, 3, 2, 3])\n     ax2.axhspan(-5, 5)\n     xlim = ax1.get_xlim()\n-    assert np.allclose(xlim, [0.5, 4.5])\n+    assert np.allclose(xlim, [18000, 18800])\n \n \n def test_sharing_does_not_link_positions():\n", "problem_statement": "[Bug]: Incorrect X-axis scaling with date values\n### Bug summary\n\nIn matplotlib 3.9.0, when plotting dates on the X-axis, calling axhspan unexpectedly expands the X-axis range from 1970 to 2024. This behavior did not occur in version 3.8.4, where the X-axis correctly ranges from 2020 to 2024.\n\n### Code for reproduction\n\n```Python\nimport datetime\r\nimport matplotlib.pyplot as plt\r\n\r\nx = [datetime.date(year, 1, 1) for year in range(2020, 2024)]\r\ny = range(4)\r\n\r\nplt.plot(x, y)\r\nplt.axhspan(1, 2)\n```\n\n\n### Actual outcome\n\n![3 9 0](https://github.com/matplotlib/matplotlib/assets/6249977/104927cc-75f7-4a3d-abc7-d66d84b16d93)\r\n\n\n### Expected outcome\n\n![3 8 4](https://github.com/matplotlib/matplotlib/assets/6249977/3b628921-5cc3-4b9b-b2ce-1570d82d0bb4)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nFedora\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\ninline or Agg\n\n### Python version\n\n3.12.3\n\n### Jupyter version\n\n4.2.1\n\n### Installation\n\npip\n", "hints_text": "This is a regression in 3.9.\nMost likely related to https://github.com/matplotlib/matplotlib/pull/26788 \nA bisect does indeed point to that commit; I'm a bit confused though as it seems like that change is supposed to try and avoid changing the datalimits, but maybe it's something to do with using date/units.\r\n\r\ncc @anntzer\nWoops.  The fix is easy:\r\n```patch\r\ndiff --git i/lib/matplotlib/axes/_axes.py w/lib/matplotlib/axes/_axes.py\r\nindex 9a2b367fb5..7efbd6562f 100644\r\n--- i/lib/matplotlib/axes/_axes.py\r\n+++ w/lib/matplotlib/axes/_axes.py\r\n@@ -1028,7 +1028,7 @@ class Axes(_AxesBase):\r\n         # For Rectangles and non-separable transforms, add_patch can be buggy\r\n         # and update the x limits even though it shouldn't do so for an\r\n         # yaxis_transformed patch, so undo that update.\r\n-        ix = self.dataLim.intervalx\r\n+        ix = self.dataLim.intervalx.copy()\r\n         mx = self.dataLim.minposx\r\n         self.add_patch(p)\r\n         self.dataLim.intervalx = ix\r\n```\r\n(intervalx is an array and thus vulnerable to getting mutated in place).  Note that axvspan already has the necessary copy() call, only axhspan was missing it.\r\nCan you take over the patch?", "created_at": "2024-06-28T11:05:42Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28486, "instance_id": "matplotlib__matplotlib-28486", "issue_numbers": ["28383", "28383"], "base_commit": "74c7f9a598c4e32b3f551f75ed965f446d786ab1", "patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex 5003e2113930..3575bd1fc14d 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -1423,7 +1423,7 @@ def contains_branch_seperately(self, other_transform):\n                              'transforms with 2 output dimensions')\n         # for a non-blended transform each separate dimension is the same, so\n         # just return the appropriate shape.\n-        return [self.contains_branch(other_transform)] * 2\n+        return (self.contains_branch(other_transform), ) * 2\n \n     def __sub__(self, other):\n         \"\"\"\n@@ -2404,6 +2404,15 @@ def _iter_break_from_left_to_right(self):\n         for left, right in self._b._iter_break_from_left_to_right():\n             yield self._a + left, right\n \n+    def contains_branch_seperately(self, other_transform):\n+        # docstring inherited\n+        if self.output_dims != 2:\n+            raise ValueError('contains_branch_seperately only supports '\n+                             'transforms with 2 output dimensions')\n+        if self == other_transform:\n+            return (True, True)\n+        return self._b.contains_branch_seperately(other_transform)\n+\n     depth = property(lambda self: self._a.depth + self._b.depth)\n     is_affine = property(lambda self: self._a.is_affine and self._b.is_affine)\n     is_separable = property(\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_transforms.py b/lib/matplotlib/tests/test_transforms.py\nindex 959814de82db..3d12b90d5210 100644\n--- a/lib/matplotlib/tests/test_transforms.py\n+++ b/lib/matplotlib/tests/test_transforms.py\n@@ -667,6 +667,13 @@ def test_contains_branch(self):\n \n         assert not self.stack1.contains_branch(self.tn1 + self.ta2)\n \n+        blend = mtransforms.BlendedGenericTransform(self.tn2, self.stack2)\n+        x, y = blend.contains_branch_seperately(self.stack2_subset)\n+        stack_blend = self.tn3 + blend\n+        sx, sy = stack_blend.contains_branch_seperately(self.stack2_subset)\n+        assert x is sx is False\n+        assert y is sy is True\n+\n     def test_affine_simplification(self):\n         # tests that a transform stack only calls as much is absolutely\n         # necessary \"non-affine\" allowing the best possible optimization with\n", "problem_statement": "[Bug]: axvspan no longer participating in limit calculations\n### Bug summary\n\nSince upgrading to matplotlib 3.9, axvspan plots no longer seem to be included in limit calculations.  I suspect this is due to the change from Polygon to Rectangle, but it does seem to have some unintended consequences.\n\n### Code for reproduction\n\n```Python\nIn [2]: fig, ax = plt.subplots()\r\n\r\nIn [3]: ax.axvspan(0.5, 1.0)\r\nOut[3]: <matplotlib.patches.Rectangle object at 0x7080118bbf80>\r\n\r\nIn [4]: ax.set(title='Matplotlib 3.9.0')\r\nOut[4]: [Text(0.5, 1.0, 'Matplotlib 3.9.0')]\n```\n\n\n### Actual outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/1190540/417455cd-c184-4c3a-a446-24994c989284)\r\n\r\nNote that the axis limits are still centered at 0, and the vspan is out of frame.\n\n### Expected outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/1190540/498e2ff9-43bd-45b0-9757-7da51357fbb2)\r\n\r\nIn 3.8.4, the limits would adapt to the location of the generated artist.\n\n### Additional information\n\nThis is causing us some problems in mir_eval, where we have high-level plot constructors that are built entirely from axvspans for showing time-series segmentation labels.\n\n### Operating system\n\nall\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\ntkagg, but shouldn't matter\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nn/a\n\n### Installation\n\npip\n[Bug]: axvspan no longer participating in limit calculations\n### Bug summary\n\nSince upgrading to matplotlib 3.9, axvspan plots no longer seem to be included in limit calculations.  I suspect this is due to the change from Polygon to Rectangle, but it does seem to have some unintended consequences.\n\n### Code for reproduction\n\n```Python\nIn [2]: fig, ax = plt.subplots()\r\n\r\nIn [3]: ax.axvspan(0.5, 1.0)\r\nOut[3]: <matplotlib.patches.Rectangle object at 0x7080118bbf80>\r\n\r\nIn [4]: ax.set(title='Matplotlib 3.9.0')\r\nOut[4]: [Text(0.5, 1.0, 'Matplotlib 3.9.0')]\n```\n\n\n### Actual outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/1190540/417455cd-c184-4c3a-a446-24994c989284)\r\n\r\nNote that the axis limits are still centered at 0, and the vspan is out of frame.\n\n### Expected outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/1190540/498e2ff9-43bd-45b0-9757-7da51357fbb2)\r\n\r\nIn 3.8.4, the limits would adapt to the location of the generated artist.\n\n### Additional information\n\nThis is causing us some problems in mir_eval, where we have high-level plot constructors that are built entirely from axvspans for showing time-series segmentation labels.\n\n### Operating system\n\nall\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\ntkagg, but shouldn't matter\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nn/a\n\n### Installation\n\npip\n", "hints_text": "This may be duplicate of #28341, which has a patch, but has not been put into a PR yet, I believe.\r\n\r\nThat said, the discussion there was about `axhspan` and indicated that `axvspan` was unaffected, so may not be exactly the same...\n> That said, the discussion there was about `axhspan` and indicated that `axvspan` was unaffected, so may not be exactly the same...\r\n\r\nI took a look at the proposed patch in #28341, and I don't think it addresses the issue.\r\n\r\nIn axhspan, the proposed fix was to .copy() the horizontal interval when updating the datalim:\r\nhttps://github.com/matplotlib/matplotlib/blob/54729dbcb59c6f46c44241fc3193a2e67d5983e8/lib/matplotlib/axes/_axes.py#L1028-L1031\r\nand the post in thread indicates that this is unnecessary for vspan, which already has the .copy():\r\nhttps://github.com/matplotlib/matplotlib/blob/54729dbcb59c6f46c44241fc3193a2e67d5983e8/lib/matplotlib/axes/_axes.py#L1091-L1094\r\nHowever, that's only applied to the y-axis, and it's the x-axis that is causing the issue here.\r\n\r\nSo I think these are two related, but distinct problems.\nSo the problem here is that for patches, we ask for whether it contains the data transform:\r\nhttps://github.com/matplotlib/matplotlib/blob/d347c3227f8de8a99aa327390fee619310452a96/lib/matplotlib/axes/_base.py#L2445-L2448\r\nand for `Rectangle` this returns `False` for both x&y. This is likely because a `Rectangle` is a unit rectangle, with a scaling transform + the data transform.\r\n\r\nSince `Patch.get_transform()` == patch transform + data transform, it's possible that we may want to check data transform, and then use patch transform directly for the datalim update. Something like:\r\n```patch\r\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\r\nindex 1cf56c90cc..5f37710ee6 100644\r\n--- a/lib/matplotlib/axes/_base.py\r\n+++ b/lib/matplotlib/axes/_base.py\r\n@@ -2415,17 +2415,17 @@ class _AxesBase(martist.Artist):\r\n         if len(vertices):\r\n             vertices = np.vstack(vertices)\r\n \r\n-        patch_trf = patch.get_transform()\r\n-        updatex, updatey = patch_trf.contains_branch_seperately(self.transData)\r\n+        data_trf = patch.get_data_transform()\r\n+        updatex, updatey = data_trf.contains_branch_seperately(self.transData)\r\n         if not (updatex or updatey):\r\n             return\r\n         if self.name != \"rectilinear\":\r\n             # As in _update_line_limits, but for axvspan.\r\n-            if updatex and patch_trf == self.get_yaxis_transform():\r\n+            if updatex and data_trf == self.get_yaxis_transform():\r\n                 updatex = False\r\n-            if updatey and patch_trf == self.get_xaxis_transform():\r\n+            if updatey and data_trf == self.get_xaxis_transform():\r\n                 updatey = False\r\n-        trf_to_data = patch_trf - self.transData\r\n+        trf_to_data = patch.get_patch_transform()\r\n         xys = trf_to_data.transform(vertices)\r\n         self.update_datalim(xys, updatex=updatex, updatey=updatey)\r\n ```\nThis may be duplicate of #28341, which has a patch, but has not been put into a PR yet, I believe.\r\n\r\nThat said, the discussion there was about `axhspan` and indicated that `axvspan` was unaffected, so may not be exactly the same...\n> That said, the discussion there was about `axhspan` and indicated that `axvspan` was unaffected, so may not be exactly the same...\r\n\r\nI took a look at the proposed patch in #28341, and I don't think it addresses the issue.\r\n\r\nIn axhspan, the proposed fix was to .copy() the horizontal interval when updating the datalim:\r\nhttps://github.com/matplotlib/matplotlib/blob/54729dbcb59c6f46c44241fc3193a2e67d5983e8/lib/matplotlib/axes/_axes.py#L1028-L1031\r\nand the post in thread indicates that this is unnecessary for vspan, which already has the .copy():\r\nhttps://github.com/matplotlib/matplotlib/blob/54729dbcb59c6f46c44241fc3193a2e67d5983e8/lib/matplotlib/axes/_axes.py#L1091-L1094\r\nHowever, that's only applied to the y-axis, and it's the x-axis that is causing the issue here.\r\n\r\nSo I think these are two related, but distinct problems.\nSo the problem here is that for patches, we ask for whether it contains the data transform:\r\nhttps://github.com/matplotlib/matplotlib/blob/d347c3227f8de8a99aa327390fee619310452a96/lib/matplotlib/axes/_base.py#L2445-L2448\r\nand for `Rectangle` this returns `False` for both x&y. This is likely because a `Rectangle` is a unit rectangle, with a scaling transform + the data transform.\r\n\r\nSince `Patch.get_transform()` == patch transform + data transform, it's possible that we may want to check data transform, and then use patch transform directly for the datalim update. Something like:\r\n```patch\r\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\r\nindex 1cf56c90cc..5f37710ee6 100644\r\n--- a/lib/matplotlib/axes/_base.py\r\n+++ b/lib/matplotlib/axes/_base.py\r\n@@ -2415,17 +2415,17 @@ class _AxesBase(martist.Artist):\r\n         if len(vertices):\r\n             vertices = np.vstack(vertices)\r\n \r\n-        patch_trf = patch.get_transform()\r\n-        updatex, updatey = patch_trf.contains_branch_seperately(self.transData)\r\n+        data_trf = patch.get_data_transform()\r\n+        updatex, updatey = data_trf.contains_branch_seperately(self.transData)\r\n         if not (updatex or updatey):\r\n             return\r\n         if self.name != \"rectilinear\":\r\n             # As in _update_line_limits, but for axvspan.\r\n-            if updatex and patch_trf == self.get_yaxis_transform():\r\n+            if updatex and data_trf == self.get_yaxis_transform():\r\n                 updatex = False\r\n-            if updatey and patch_trf == self.get_xaxis_transform():\r\n+            if updatey and data_trf == self.get_xaxis_transform():\r\n                 updatey = False\r\n-        trf_to_data = patch_trf - self.transData\r\n+        trf_to_data = patch.get_patch_transform()\r\n         xys = trf_to_data.transform(vertices)\r\n         self.update_datalim(xys, updatex=updatex, updatey=updatey)\r\n ```", "created_at": "2024-06-28T10:22:43Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28474, "instance_id": "matplotlib__matplotlib-28474", "issue_numbers": ["28467", "0000"], "base_commit": "d347c3227f8de8a99aa327390fee619310452a96", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 52c99b125d36..328dda4a6a71 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -3533,11 +3533,11 @@ def errorbar(self, x, y, yerr=None, xerr=None,\n         `.ErrorbarContainer`\n             The container contains:\n \n-            - plotline: `~matplotlib.lines.Line2D` instance of x, y plot markers\n+            - data_line : A `~matplotlib.lines.Line2D` instance of x, y plot markers\n               and/or line.\n-            - caplines: A tuple of `~matplotlib.lines.Line2D` instances of the error\n+            - caplines : A tuple of `~matplotlib.lines.Line2D` instances of the error\n               bar caps.\n-            - barlinecols: A tuple of `.LineCollection` with the horizontal and\n+            - barlinecols : A tuple of `.LineCollection` with the horizontal and\n               vertical error ranges.\n \n         Other Parameters\ndiff --git a/lib/matplotlib/container.py b/lib/matplotlib/container.py\nindex 0f082e298afc..b6dd43724f34 100644\n--- a/lib/matplotlib/container.py\n+++ b/lib/matplotlib/container.py\n@@ -87,12 +87,12 @@ class ErrorbarContainer(Container):\n     lines : tuple\n         Tuple of ``(data_line, caplines, barlinecols)``.\n \n-        - data_line : :class:`~matplotlib.lines.Line2D` instance of\n-          x, y plot markers and/or line.\n-        - caplines : tuple of :class:`~matplotlib.lines.Line2D` instances of\n-          the error bar caps.\n-        - barlinecols : list of :class:`~matplotlib.collections.LineCollection`\n-          with the horizontal and vertical error ranges.\n+        - data_line : A `~matplotlib.lines.Line2D` instance of x, y plot markers\n+          and/or line.\n+        - caplines : A tuple of `~matplotlib.lines.Line2D` instances of the error\n+          bar caps.\n+        - barlinecols : A tuple of `~matplotlib.collections.LineCollection` with the\n+          horizontal and vertical error ranges.\n \n     has_xerr, has_yerr : bool\n         ``True`` if the errorbar has x/y errors.\n@@ -115,13 +115,13 @@ class StemContainer(Container):\n \n     Attributes\n     ----------\n-    markerline :  :class:`~matplotlib.lines.Line2D`\n+    markerline : `~matplotlib.lines.Line2D`\n         The artist of the markers at the stem heads.\n \n-    stemlines : list of :class:`~matplotlib.lines.Line2D`\n+    stemlines : `~matplotlib.collections.LineCollection`\n         The artists of the vertical lines for all stems.\n \n-    baseline : :class:`~matplotlib.lines.Line2D`\n+    baseline : `~matplotlib.lines.Line2D`\n         The artist of the horizontal baseline.\n     \"\"\"\n     def __init__(self, markerline_stemlines_baseline, **kwargs):\n@@ -130,7 +130,7 @@ def __init__(self, markerline_stemlines_baseline, **kwargs):\n         ----------\n         markerline_stemlines_baseline : tuple\n             Tuple of ``(markerline, stemlines, baseline)``.\n-            ``markerline`` contains the `.LineCollection` of the markers,\n+            ``markerline`` contains the `.Line2D` of the markers,\n             ``stemlines`` is a `.LineCollection` of the main lines,\n             ``baseline`` is the `.Line2D` of the baseline.\n         \"\"\"\ndiff --git a/lib/matplotlib/container.pyi b/lib/matplotlib/container.pyi\nindex 9cc2e1ac2acc..c66e7ba4b4c3 100644\n--- a/lib/matplotlib/container.pyi\n+++ b/lib/matplotlib/container.pyi\n@@ -34,12 +34,12 @@ class BarContainer(Container):\n     ) -> None: ...\n \n class ErrorbarContainer(Container):\n-    lines: tuple[Line2D, Line2D, LineCollection]\n+    lines: tuple[Line2D, tuple[Line2D, ...], tuple[LineCollection, ...]]\n     has_xerr: bool\n     has_yerr: bool\n     def __init__(\n         self,\n-        lines: tuple[Line2D, Line2D, LineCollection],\n+        lines: tuple[Line2D, tuple[Line2D, ...], tuple[LineCollection, ...]],\n         has_xerr: bool = ...,\n         has_yerr: bool = ...,\n         **kwargs\n", "test_patch": "", "problem_statement": "[Bug]: Incorrect type stub for `ErrorbarContainer`'s `lines` attribute.\n### Bug summary\r\n\r\nThe type stub for `ErrorbarContainer` in `lib/matplotlib/container.pyi` is incorrect.\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/78515468/28ee0752-7581-46c4-823c-38642106edc3)\r\n\r\nIt is also inconsistent with the online documentation.\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/78515468/2ca9149d-3cdb-4b7b-8097-f8720cb1632c)\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nfrom matplotlib import pyplot as plt\r\n\r\n\r\nfig = plt.figure()\r\naxis = fig.add_subplot(111)\r\n\r\ncontainer = axis.errorbar([0, 1, 2], [-0.5, 0.2, 0.3], yerr=[0.01, 0.02, 0.01])\r\nprint(container.lines)\r\nfor idx, elem in enumerate(container.lines):\r\n    print(f\"Element {idx}: {elem} | Type = {type(elem)}\")\r\n\r\nplt.show()\r\nplt.close()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/78515468/ab028593-09a0-4d19-8d87-092c7ff4ae1a)\r\n\r\n### Expected outcome\r\n\r\nAssuming the type stub is correct:\r\n\r\n1. The first element should be a `Line2D` which is correct\r\n2. The second element should be a `Line2D` which is incorrect as it is actually an empty tuple\r\n3. The third element should be a `LineCollection` which is incorrect as it is a tuple containing a single `LineCollection`.\r\n\r\n### Additional information\r\n\r\nI'm not sure if the type stub was always incorrect or it became incorrect over time however it should be fixed as it causes spurious type checker errors.\r\n\r\nObviously we would need to fix the type stub annotation however I am unsure about the true types as it seems that the return types are dynamic dependent on the input arguments to plt.errorbar.\r\n\r\n### Operating system\r\n\r\nDebian\r\n\r\n### Matplotlib Version\r\n\r\n3.8.4\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.12.4\r\n\r\n### Jupyter version\r\n\r\nNot applicable\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "", "created_at": "2024-06-26T23:23:33Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28473, "instance_id": "matplotlib__matplotlib-28473", "issue_numbers": ["28432", "0000"], "base_commit": "664b45729aa6ac2d6ef9459d8c0ad04f50af847c", "patch": "diff --git a/lib/matplotlib/backends/registry.py b/lib/matplotlib/backends/registry.py\nindex 47d5f65e350e..e08817bb089b 100644\n--- a/lib/matplotlib/backends/registry.py\n+++ b/lib/matplotlib/backends/registry.py\n@@ -93,6 +93,9 @@ def __init__(self):\n         }\n \n     def _backend_module_name(self, backend):\n+        if backend.startswith(\"module://\"):\n+            return backend[9:]\n+\n         # Return name of module containing the specified backend.\n         # Does not check if the backend is valid, use is_valid_backend for that.\n         backend = backend.lower()\n@@ -224,7 +227,8 @@ def is_valid_backend(self, backend):\n         bool\n             True if backend is valid, False otherwise.\n         \"\"\"\n-        backend = backend.lower()\n+        if not backend.startswith(\"module://\"):\n+            backend = backend.lower()\n \n         # For backward compatibility, convert ipympl and matplotlib-inline long\n         # module:// names to their shortened forms.\n@@ -342,7 +346,8 @@ def resolve_backend(self, backend):\n             The GUI framework, which will be None for a backend that is non-interactive.\n         \"\"\"\n         if isinstance(backend, str):\n-            backend = backend.lower()\n+            if not backend.startswith(\"module://\"):\n+                backend = backend.lower()\n         else:  # Might be _auto_backend_sentinel or None\n             # Use whatever is already running...\n             from matplotlib import get_backend\n@@ -395,7 +400,8 @@ def resolve_gui_or_backend(self, gui_or_backend):\n         framework : str or None\n             The GUI framework, which will be None for a backend that is non-interactive.\n         \"\"\"\n-        gui_or_backend = gui_or_backend.lower()\n+        if not gui_or_backend.startswith(\"module://\"):\n+            gui_or_backend = gui_or_backend.lower()\n \n         # First check if it is a gui loop name.\n         backend = self.backend_for_gui_framework(gui_or_backend)\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_registry.py b/lib/matplotlib/tests/test_backend_registry.py\nindex 141ffd69c266..80c2ce4fc51a 100644\n--- a/lib/matplotlib/tests/test_backend_registry.py\n+++ b/lib/matplotlib/tests/test_backend_registry.py\n@@ -86,6 +86,15 @@ def test_is_valid_backend(backend, is_valid):\n     assert backend_registry.is_valid_backend(backend) == is_valid\n \n \n+@pytest.mark.parametrize(\"backend, normalized\", [\n+    (\"agg\", \"matplotlib.backends.backend_agg\"),\n+    (\"QtAgg\", \"matplotlib.backends.backend_qtagg\"),\n+    (\"module://Anything\", \"Anything\"),\n+])\n+def test_backend_normalization(backend, normalized):\n+    assert backend_registry._backend_module_name(backend) == normalized\n+\n+\n def test_deprecated_rcsetup_attributes():\n     match = \"was deprecated in Matplotlib 3.9\"\n     with pytest.warns(mpl.MatplotlibDeprecationWarning, match=match):\ndiff --git a/lib/matplotlib/tests/test_backend_template.py b/lib/matplotlib/tests/test_backend_template.py\nindex d7e2a5cd1266..964d15c1559a 100644\n--- a/lib/matplotlib/tests/test_backend_template.py\n+++ b/lib/matplotlib/tests/test_backend_template.py\n@@ -49,3 +49,14 @@ def test_show_old_global_api(monkeypatch):\n     mpl.use(\"module://mpl_test_backend\")\n     plt.show()\n     mock_show.assert_called_with()\n+\n+\n+def test_load_case_sensitive(monkeypatch):\n+    mpl_test_backend = SimpleNamespace(**vars(backend_template))\n+    mock_show = MagicMock()\n+    monkeypatch.setattr(\n+        mpl_test_backend.FigureManagerTemplate, \"pyplot_show\", mock_show)\n+    monkeypatch.setitem(sys.modules, \"mpl_Test_Backend\", mpl_test_backend)\n+    mpl.use(\"module://mpl_Test_Backend\")\n+    plt.show()\n+    mock_show.assert_called_with()\n", "problem_statement": "[Bug]: Backend name specified as module gets lowercased since 3.9\n### Bug summary\r\n\r\n`MPLBACKEND=\"module://foo.Bar\"` now tries to import the `foo.bar` module as opposed to `foo.Bar`, as before.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nMPLBACKEND=\"module://foo.Bar\"\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n`foo.bar` is imported\r\n\r\n### Expected outcome\r\n\r\n`foo.Bar` is imported\r\n\r\n### Additional information\r\n\r\nThis probably regressed in https://github.com/matplotlib/matplotlib/pull/27948.\r\n\r\n### Operating system\r\n\r\nFedora Linux 39\r\n\r\n### Matplotlib Version\r\n\r\n3.9.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n", "hints_text": "", "created_at": "2024-06-26T20:54:45Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28465, "instance_id": "matplotlib__matplotlib-28465", "issue_numbers": ["28464"], "base_commit": "57cd5eb22af1590eaf771a9e5f0d60f6bec2354d", "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 9139b2ed262f..7bb06814f389 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2227,7 +2227,6 @@ def __init__(self, parent, subplotspec, *,\n         self.subplotpars = parent.subplotpars\n         self.dpi_scale_trans = parent.dpi_scale_trans\n         self._axobservers = parent._axobservers\n-        self.canvas = parent.canvas\n         self.transFigure = parent.transFigure\n         self.bbox_relative = Bbox.null()\n         self._redo_transform_rel_fig()\n@@ -2244,6 +2243,10 @@ def __init__(self, parent, subplotspec, *,\n         self._set_artist_props(self.patch)\n         self.patch.set_antialiased(False)\n \n+    @property\n+    def canvas(self):\n+        return self._parent.canvas\n+\n     @property\n     def dpi(self):\n         return self._parent.dpi\ndiff --git a/lib/matplotlib/figure.pyi b/lib/matplotlib/figure.pyi\nindex 21de9159d56c..b079312695c1 100644\n--- a/lib/matplotlib/figure.pyi\n+++ b/lib/matplotlib/figure.pyi\n@@ -263,7 +263,6 @@ class SubFigure(FigureBase):\n     figure: Figure\n     subplotpars: SubplotParams\n     dpi_scale_trans: Affine2D\n-    canvas: FigureCanvasBase\n     transFigure: Transform\n     bbox_relative: Bbox\n     figbbox: BboxBase\n@@ -282,6 +281,8 @@ class SubFigure(FigureBase):\n         **kwargs\n     ) -> None: ...\n     @property\n+    def canvas(self) -> FigureCanvasBase: ...\n+    @property\n     def dpi(self) -> float: ...\n     @dpi.setter\n     def dpi(self, value: float) -> None: ...\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 7e7ccc14bf8f..0cba4f392035 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -93,6 +93,11 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4, label='$-.5 x$')\n     plt.legend(draggable=True)\n \n+    # Ensure subfigure parenting works.\n+    subfigs = fig_ref.subfigures(2)\n+    subfigs[0].subplots(1, 2)\n+    subfigs[1].subplots(1, 2)\n+\n     fig_ref.align_ylabels()  # Test handling of _align_label_groups Groupers.\n \n \n", "problem_statement": "[Bug]: figure with subfigures cannot be pickled\n### Bug summary\r\n\r\nI tried to pickle figures with subfigures nested.\r\nReturns error with the following code.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\n#!/usr/bin/env python3\r\nimport pickle\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure()\r\nsubfigs = fig.subfigures(2,2)\r\nwith open('fig.p', 'wb') as file:\r\n    pickle.dump(fig, file)\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nCell In[1], line 8\r\n      6 subfigs = fig.subfigures(2,2)\r\n      7 with open('fig.p', 'wb') as file:\r\n----> 8     pickle.dump(fig, file)\r\n\r\nTypeError: cannot pickle 'FigureCanvasQTAgg' object\r\n```\r\n\r\n### Expected outcome\r\n\r\nA pickle file should be saved to the working directory.\r\n\r\n### Additional information\r\n\r\nI know the API is still provisional but I couldn't find other reports so I decided to post.\r\nI believe this is caused by the \"subfigures\" API, as skipping that line makes the script work.\r\nIt's my first time to report a issue, so I'm a bit worried if I'm doing things right.\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.9.0\r\n\r\n### Matplotlib Backend\r\n\r\nqtagg\r\n\r\n### Python version\r\n\r\n3.12.1\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "", "created_at": "2024-06-26T07:13:10Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28458, "instance_id": "matplotlib__matplotlib-28458", "issue_numbers": ["28448"], "base_commit": "d7d1bba818ef36b2475b5d73cad6394841710211", "patch": "diff --git a/src/_image_wrapper.cpp b/src/_image_wrapper.cpp\nindex 65c8c8324ebc..856dcf4ea3ce 100644\n--- a/src/_image_wrapper.cpp\n+++ b/src/_image_wrapper.cpp\n@@ -173,20 +173,20 @@ image_resample(py::array input_array,\n \n     if (auto resampler =\n             (ndim == 2) ? (\n-                (dtype.is(py::dtype::of<std::uint8_t>())) ? resample<agg::gray8> :\n-                (dtype.is(py::dtype::of<std::int8_t>())) ? resample<agg::gray8> :\n-                (dtype.is(py::dtype::of<std::uint16_t>())) ? resample<agg::gray16> :\n-                (dtype.is(py::dtype::of<std::int16_t>())) ? resample<agg::gray16> :\n-                (dtype.is(py::dtype::of<float>())) ? resample<agg::gray32> :\n-                (dtype.is(py::dtype::of<double>())) ? resample<agg::gray64> :\n+                (dtype.equal(py::dtype::of<std::uint8_t>())) ? resample<agg::gray8> :\n+                (dtype.equal(py::dtype::of<std::int8_t>())) ? resample<agg::gray8> :\n+                (dtype.equal(py::dtype::of<std::uint16_t>())) ? resample<agg::gray16> :\n+                (dtype.equal(py::dtype::of<std::int16_t>())) ? resample<agg::gray16> :\n+                (dtype.equal(py::dtype::of<float>())) ? resample<agg::gray32> :\n+                (dtype.equal(py::dtype::of<double>())) ? resample<agg::gray64> :\n                 nullptr) : (\n             // ndim == 3\n-                (dtype.is(py::dtype::of<std::uint8_t>())) ? resample<agg::rgba8> :\n-                (dtype.is(py::dtype::of<std::int8_t>())) ? resample<agg::rgba8> :\n-                (dtype.is(py::dtype::of<std::uint16_t>())) ? resample<agg::rgba16> :\n-                (dtype.is(py::dtype::of<std::int16_t>())) ? resample<agg::rgba16> :\n-                (dtype.is(py::dtype::of<float>())) ? resample<agg::rgba32> :\n-                (dtype.is(py::dtype::of<double>())) ? resample<agg::rgba64> :\n+                (dtype.equal(py::dtype::of<std::uint8_t>())) ? resample<agg::rgba8> :\n+                (dtype.equal(py::dtype::of<std::int8_t>())) ? resample<agg::rgba8> :\n+                (dtype.equal(py::dtype::of<std::uint16_t>())) ? resample<agg::rgba16> :\n+                (dtype.equal(py::dtype::of<std::int16_t>())) ? resample<agg::rgba16> :\n+                (dtype.equal(py::dtype::of<float>())) ? resample<agg::rgba32> :\n+                (dtype.equal(py::dtype::of<double>())) ? resample<agg::rgba64> :\n                 nullptr)) {\n         Py_BEGIN_ALLOW_THREADS\n         resampler(\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py\nindex 599265a2d4d8..8d7970078efa 100644\n--- a/lib/matplotlib/tests/test_image.py\n+++ b/lib/matplotlib/tests/test_image.py\n@@ -1576,3 +1576,20 @@ def test_non_transdata_image_does_not_touch_aspect():\n     assert ax.get_aspect() == 1\n     ax.imshow(im, transform=ax.transAxes, aspect=2)\n     assert ax.get_aspect() == 2\n+\n+\n+@pytest.mark.parametrize(\n+    'dtype',\n+    ('float64', 'float32', 'int16', 'uint16', 'int8', 'uint8'),\n+)\n+@pytest.mark.parametrize('ndim', (2, 3))\n+def test_resample_dtypes(dtype, ndim):\n+    # Issue 28448, incorrect dtype comparisons in C++ image_resample can raise\n+    # ValueError: arrays must be of dtype byte, short, float32 or float64\n+    rng = np.random.default_rng(4181)\n+    shape = (2, 2) if ndim == 2 else (2, 2, 3)\n+    data = rng.uniform(size=shape).astype(np.dtype(dtype, copy=True))\n+    fig, ax = plt.subplots()\n+    axes_image = ax.imshow(data)\n+    # Before fix the following raises ValueError for some dtypes.\n+    axes_image.make_image(None)[0]\n", "problem_statement": "[Bug]: Making an RGB image from pickled data throws error\n### Bug summary\r\n\r\nGetting an error when saving an animated RGB image that was loaded from a pickled figure. I've isolated the error to matplotlib 3.9.0, with this code working in 3.8.3, which makes me think that this is to do with the pybind11 upgrade in https://github.com/matplotlib/matplotlib/pull/26275?\r\n\r\nThings I've tried:\r\n* Grayscale images (eg `data = np.random.rand(100, 100)`) work.\r\n* Numpy v1.26.4 and v2.0.0 show no difference in behavior\r\n* This shows up at least on WSL and Ubuntu  \r\n* In the debugger, both `data.dtype` and `out.dtype` are showing `'float64'` prior to the `_image.resample` call.\r\n    * However, if I re-cast the arrays with `data = data.astype('float64')`, `out = ...`, then the `_image.resample` call no longer fails! \r\n     * If I re-cast only one, then `out.dtype == data.dtype` returns `True`, but on the function call I get the error `ValueError: Input and output arrays have mismatched types`\r\n     * ... so something is up with the types, and the C++ code is bombing. But python is saying things line up.\r\n\r\n\r\nSee these parts of the source: \r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/d7d1bba818ef36b2475b5d73cad6394841710211/lib/matplotlib/image.py#L205-L213\r\nhttps://github.com/matplotlib/matplotlib/blob/d7d1bba818ef36b2475b5d73cad6394841710211/src/_image_wrapper.cpp#L174-L199\r\n\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport io\r\nimport pickle\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom pathlib import Path\r\nfrom matplotlib.animation import FuncAnimation\r\n\r\ndir = Path(__file__).parent.resolve()\r\n\r\n# generate random rgb data\r\nfig, ax = plt.subplots()\r\nnp.random.seed(0)\r\ndata = np.random.rand(100, 100, 3)\r\nax.imshow(data)\r\n\r\n# pick the figure and reload\r\nbuf = io.BytesIO()\r\npickle.dump(fig, buf)\r\nbuf.seek(0)\r\nfig_pickled = pickle.load(buf)\r\n\r\n# Animate\r\ndef update(frame):\r\n    return ax,\r\n\r\nani = FuncAnimation(fig_pickled, update, frames=2)\r\n\r\n# Save the animation\r\nfilepath = dir / 'test.gif' \r\nani.save(filepath)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nException has occurred: ValueError\r\narrays must be of dtype byte, short, float32 or float64\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/image.py\", line 208, in _resample\r\n    _image.resample(data, out, transform,\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/image.py\", line 567, in _make_image\r\n    output = _resample(  # resample rgb channels\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/image.py\", line 952, in make_image\r\n    return self._make_image(self._A, bbox, transformed_bbox, clip,\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/image.py\", line 653, in draw\r\n    im, l, b, trans = self.make_image(\r\n                      ^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/axes/_base.py\", line 3110, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/figure.py\", line 3157, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/backends/backend_agg.py\", line 387, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/backends/backend_agg.py\", line 432, in print_raw\r\n    FigureCanvasAgg.draw(self)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/backend_bases.py\", line 2054, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n                                                                 ^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/backend_bases.py\", line 2204, in print_figure\r\n    result = print_method(\r\n             ^^^^^^^^^^^^^\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/backends/backend_qtagg.py\", line 75, in print_figure\r\n    super().print_figure(*args, **kwargs)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/figure.py\", line 3390, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/animation.py\", line 371, in grab_frame\r\n    self.fig.savefig(self._proc.stdin, format=self.frame_format,\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/lib/matplotlib/animation.py\", line 1109, in save\r\n    writer.grab_frame(**savefig_kwargs)\r\n  File \"/mnt/c/Users/Scott/Documents/Documents/Coding/matplotlib/_test_pybind11_error.py\", line 35, in <module>\r\n    ani.save(filepath)\r\nValueError: arrays must be of dtype byte, short, float32 or float64\r\n```\r\n\r\n### Matplotlib Version\r\n\r\n3.9.0\n", "hints_text": "I am able to work around this issue by manually re-casting the image data prior to the call, so my hunch is that this is an error to do with the pickling:\r\n\r\nUpdated example with workaround:\r\n```python\r\nimport io\r\nimport pickle\r\nimport numpy as np\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\nfrom pathlib import Path\r\nfrom matplotlib.animation import FuncAnimation\r\n\r\ndir = Path(__file__).parent.resolve()\r\n\r\n# generate random rgb data\r\nfig, ax = plt.subplots()\r\nnp.random.seed(0)\r\ndata = np.random.rand(100, 100, 3)\r\nax.imshow(data)\r\n\r\n# pick the figure and reload\r\nbuf = io.BytesIO()\r\npickle.dump(fig, buf)\r\nbuf.seek(0)\r\nfig_pickled = pickle.load(buf)\r\n\r\n# Workaround\r\nax = fig_pickled.get_axes()[0]\r\nartists = ax.get_children()\r\nfor artist in artists:\r\n    if isinstance(artist, mpl.image.AxesImage):\r\n        array = artist.get_array()\r\n        artist.set_array(array.data.astype('float64'))\r\n\r\n# Animate\r\ndef update(frame):\r\n    return ax,\r\n\r\nani = FuncAnimation(fig_pickled, update, frames=2)\r\n\r\n# Save the animation\r\nfilepath = dir / 'test.gif' \r\nani.save(filepath)\r\n```\nI can reproduce this on macOS without animation using:\r\n```python\r\nimport io\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\n\r\nfig, ax = plt.subplots()\r\n\r\nrng = np.random.default_rng(4181)\r\ndata = rng.uniform(size=(2, 2, 3))\r\naxes_image = ax.imshow(data)\r\nprint(axes_image._A.shape, axes_image._A.dtype)\r\nim = axes_image.make_image(None)[0]\r\n\r\nbuf = io.BytesIO()\r\npickle.dump(axes_image, buf)\r\nbuf.seek(0)\r\naxes_image2 = pickle.load(buf)\r\nprint(axes_image2._A.shape, axes_image2._A.dtype)\r\n\r\n#axes_image2._A = axes_image2._A.astype(\"float64\")\r\nprint(\"Same dtype?\", axes_image._A.dtype == axes_image2._A.dtype)\r\n\r\nim = axes_image2.make_image(None)[0]\r\n```\r\nUsing this you get a `ValueError: arrays must be of dtype byte, short, float32 or float64`. If you remove the # to force a dtype change it works fine.\r\n\r\nThe problem occurs on this line\r\nhttps://github.com/matplotlib/matplotlib/blob/d7d1bba818ef36b2475b5d73cad6394841710211/src/_image_wrapper.cpp#L189\r\nAfter pickling and unpickling the numpy array dtype is fine from a Python point of view, but from a C++ pybind11 point of view the dtype has all the right properties but its `PyObject` has a different address so we conclude that it is not really a `double` (i.e. `np.float64`) dtype. I haven't got any further than this yet, but If my analysis is correct it should be possible to write a reproducer that doesn't use Matplotlib at all.\nCan we fallback to eq in the c++ code instead of `is` ?  A version of this is reproducible without pickle:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots()\r\n\r\nrng = np.random.default_rng(4181)\r\ndata = rng.uniform(size=(2, 2, 3)).astype(np.dtype('float64', copy=True))\r\naxes_image = ax.imshow(data)\r\nprint(axes_image._A.shape, axes_image._A.dtype)\r\nim = axes_image.make_image(None)[0]\r\n```\n> Can we fallback to eq in the c++ code instead of `is` ?\r\n\r\nIt looks like `dtype1.equal(dtype2)` is good.", "created_at": "2024-06-25T17:58:44Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28451, "instance_id": "matplotlib__matplotlib-28451", "issue_numbers": ["0000", "25847"], "base_commit": "d7d1bba818ef36b2475b5d73cad6394841710211", "patch": "diff --git a/lib/matplotlib/backends/backend_gtk3cairo.py b/lib/matplotlib/backends/backend_gtk3cairo.py\nindex 24a26111f062..371b8dc1b31f 100644\n--- a/lib/matplotlib/backends/backend_gtk3cairo.py\n+++ b/lib/matplotlib/backends/backend_gtk3cairo.py\n@@ -13,15 +13,19 @@ def on_draw_event(self, widget, ctx):\n \n         with (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n               else nullcontext()):\n-            self._renderer.set_context(ctx)\n-            scale = self.device_pixel_ratio\n-            # Scale physical drawing to logical size.\n-            ctx.scale(1 / scale, 1 / scale)\n             allocation = self.get_allocation()\n+            # Render the background before scaling, as the allocated size here is in\n+            # logical pixels.\n             Gtk.render_background(\n                 self.get_style_context(), ctx,\n-                allocation.x, allocation.y,\n-                allocation.width, allocation.height)\n+                0, 0, allocation.width, allocation.height)\n+            scale = self.device_pixel_ratio\n+            # Scale physical drawing to logical size.\n+            ctx.scale(1 / scale, 1 / scale)\n+            self._renderer.set_context(ctx)\n+            # Set renderer to physical size so it renders in full resolution.\n+            self._renderer.width = allocation.width * scale\n+            self._renderer.height = allocation.height * scale\n             self._renderer.dpi = self.figure.dpi\n             self.figure.draw(self._renderer)\n \ndiff --git a/lib/matplotlib/backends/backend_gtk4.py b/lib/matplotlib/backends/backend_gtk4.py\nindex 256a8ec9e864..dd86ab628ce7 100644\n--- a/lib/matplotlib/backends/backend_gtk4.py\n+++ b/lib/matplotlib/backends/backend_gtk4.py\n@@ -34,7 +34,6 @@ class FigureCanvasGTK4(_FigureCanvasGTK, Gtk.DrawingArea):\n     required_interactive_framework = \"gtk4\"\n     supports_blit = False\n     manager_class = _api.classproperty(lambda cls: FigureManagerGTK4)\n-    _context_is_scaled = False\n \n     def __init__(self, figure=None):\n         super().__init__(figure=figure)\n@@ -228,13 +227,8 @@ def _post_draw(self, widget, ctx):\n \n         lw = 1\n         dash = 3\n-        if not self._context_is_scaled:\n-            x0, y0, w, h = (dim / self.device_pixel_ratio\n-                            for dim in self._rubberband_rect)\n-        else:\n-            x0, y0, w, h = self._rubberband_rect\n-            lw *= self.device_pixel_ratio\n-            dash *= self.device_pixel_ratio\n+        x0, y0, w, h = (dim / self.device_pixel_ratio\n+                        for dim in self._rubberband_rect)\n         x1 = x0 + w\n         y1 = y0 + h\n \ndiff --git a/lib/matplotlib/backends/backend_gtk4cairo.py b/lib/matplotlib/backends/backend_gtk4cairo.py\nindex b1d543704351..838ea03fcce6 100644\n--- a/lib/matplotlib/backends/backend_gtk4cairo.py\n+++ b/lib/matplotlib/backends/backend_gtk4cairo.py\n@@ -5,7 +5,10 @@\n \n \n class FigureCanvasGTK4Cairo(FigureCanvasCairo, FigureCanvasGTK4):\n-    _context_is_scaled = True\n+    def _set_device_pixel_ratio(self, ratio):\n+        # Cairo in GTK4 always uses logical pixels, so we don't need to do anything for\n+        # changes to the device pixel ratio.\n+        return False\n \n     def on_draw_event(self, widget, ctx):\n         if self._idle_draw_id:\n@@ -16,15 +19,11 @@ def on_draw_event(self, widget, ctx):\n         with (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n               else nullcontext()):\n             self._renderer.set_context(ctx)\n-            scale = self.device_pixel_ratio\n-            # Scale physical drawing to logical size.\n-            ctx.scale(1 / scale, 1 / scale)\n             allocation = self.get_allocation()\n             Gtk.render_background(\n                 self.get_style_context(), ctx,\n                 allocation.x, allocation.y,\n                 allocation.width, allocation.height)\n-            self._renderer.dpi = self.figure.dpi\n             self.figure.draw(self._renderer)\n \n \n", "test_patch": "", "problem_statement": "[Bug]: Graph gets cut off with scaled resolution using gtk4cairo backend\n### Bug summary\r\n\r\nWhen using the gtk4cairo backend, and using a scaled resolution, part of the graph will be cut off.\r\nFrom the bug reports on [Graphs](https://github.com/Sjoerd1993/Graphs/), it seems like with 200% scaling, only 1/2 of the screen is used, and at 300% scaling it's about 1/3 of the screen etc...\r\n\r\nSee attached screencast. It goes back to normal when scaling is set to 100%.\r\n\r\n[Screencast from 2023-05-10 10-45-40.webm](https://github.com/matplotlib/matplotlib/assets/68477016/2c74d5a4-84b2-4fb6-9e16-05be345c7236)\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib\r\nmatplotlib.use(\"gtk4cairo\")\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n\r\n\r\n# Data for plotting\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns = 1 + np.sin(2 * np.pi * t)\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(t, s)\r\n\r\nax.set(xlabel='time (s)', ylabel='voltage (mV)',\r\n       title='About as simple as it gets, folks')\r\nax.grid()\r\n\r\nfig.savefig(\"test.png\")\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nThe plot should always stretch over the entire area, and never cut off. \r\n\r\n### Expected outcome\r\n\r\nThe plot is cut off when using a scaled resolution. Note that it works fine with the gtk4agg backend, so it's definitely a bug in gtk4cairo. However, gtk4agg backend has other issues that prevent me from using that in Graphs.\r\n\r\n### Additional information\r\n\r\nI have been using Fedora 38 Silverblue on my computer, attached screencast is from a Fedora 36 toolbox. Problem persists in a Flatpak, and initial bug report on Graphs was from somebody running a Fedora 36 workstation desktop it seems.\r\n\r\nNote that the filled in versions below are from the environment that runs in my Toolbox container. But the problem persists in the Flatpak which runs Gnome 44 runtimes with Matplotlib 3.7.1 installed by Pip.\r\n\r\nSee issue on [Graphs](https://github.com/Sjoerd1993/Graphs/issues/259) for the context where I initially got confronted with this bug.\r\n\r\n### Operating system\r\n\r\nLinux Fedora Silverblue\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0\r\n\r\n### Matplotlib Backend\r\n\r\nGTK4Cairo\r\n\r\n### Python version\r\n\r\nPython 3.10.8\r\n\r\n### Jupyter version\r\n\r\n6.4.12\r\n\r\n### Installation\r\n\r\nLinux package manager\n", "hints_text": "This screencast I made in the bug report in Graphs, may be a bit more illustrative. It only cuts off with scaled resolutions, but works fine as soon as it gets back to the unscaled screen.  Clearly, this is not an issue on my own set-up (my dpi is too small to require scaling), but with the increasing popularity of high-dpi screens, this is quite relevant for a lot of people of course.\r\n\r\n[Schermopname van 2023-05-09 17-19-13.webm](https://github.com/Sjoerd1993/Graphs/assets/68477016/a8f03e36-b106-497c-a2bd-68e81631255c)\n@QuLogic has been working towards improved hidpi support recently. I'm not sure if this presentation has been directly in his sights as of yet, but may be at least related.\nThis should have been working since at least 3.5.0 #21025. If it's not working now, there's been a regression somewhere. I'm fairly certain I've tried it out more recently than that and it was fine, but don't remember exactly. Unfortunately, I can't really test this while my laptop is out of commission.\nI tried it directly using Matplotlib 3.6.3 with the same results. Yesterday I actually stumbled upon that PR and I'm fairly certain I tried it with the commit corresponding to that PR to compile Matplotlib, and also there the difference was not really different. Perhaps it's some changes in how gtk handles things? I'll check how it handles in X11 compared to Wayland as well. Maybe that can explain the difference.\r\n\r\nI tried using the \"plain\" Matplotlib 3.5.3, but I'm getting errors related to the css\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/app/lib/python3.10/site-packages/graphs/main.py\", line 140, in do_activate\r\n    self.canvas = Canvas(self)\r\n  File \"/app/lib/python3.10/site-packages/graphs/canvas.py\", line 34, in __init__\r\n    super().__init__(self.figure)\r\n  File \"/app/lib/python3.10/site-packages/matplotlib/backends/backend_gtk4cairo.py\", line 17, in __init__\r\n    super().__init__(figure)\r\n  File \"/app/lib/python3.10/site-packages/matplotlib/backends/backend_gtk4.py\", line 98, in __init__\r\n    css.load_from_data(b\".matplotlib-canvas { background-color: white; }\")\r\n```\r\n\nYou would need #25280, though you can just comment that out.\nThanks, I'll give it a try with that PR! \r\nAlso, Wayland or X11 doesn't matter. Same results. \nThanks for the pointer, so I tested out Matplotlib 3.5.3 with the fix from #25280 (I basically just took the latest build in the 3.5.x branch and copied the CSS fix in, see https://github.com/Sjoerd1993/matplotlib/tree/testbreanch), and there indeed the bug does not exist there, you were correct about it being a regression! \r\n\r\nI also tried the same with the Matplotlib 3.6.x branch, and there this bug is present. So the regression happened somewhere between 3.5.3 and the latest version of 3.6.x. ", "created_at": "2024-06-25T06:40:30Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28436, "instance_id": "matplotlib__matplotlib-28436", "issue_numbers": ["28434", "0000"], "base_commit": "53431a424fdf624a95de5b14540cfb3b5a5e6eb0", "patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex c4e5987fdf92..177557b371a6 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -225,7 +225,7 @@ def is_color_like(c):\n         return True\n     try:\n         to_rgba(c)\n-    except ValueError:\n+    except (TypeError, ValueError):\n         return False\n     else:\n         return True\n@@ -296,6 +296,11 @@ def to_rgba(c, alpha=None):\n         Tuple of floats ``(r, g, b, a)``, where each channel (red, green, blue,\n         alpha) can assume values between 0 and 1.\n     \"\"\"\n+    if isinstance(c, tuple) and len(c) == 2:\n+        if alpha is None:\n+            c, alpha = c\n+        else:\n+            c = c[0]\n     # Special-case nth color syntax because it should not be cached.\n     if _is_nth_color(c):\n         prop_cycler = mpl.rcParams['axes.prop_cycle']\n@@ -325,11 +330,6 @@ def _to_rgba_no_colorcycle(c, alpha=None):\n     *alpha* is ignored for the color value ``\"none\"`` (case-insensitive),\n     which always maps to ``(0, 0, 0, 0)``.\n     \"\"\"\n-    if isinstance(c, tuple) and len(c) == 2:\n-        if alpha is None:\n-            c, alpha = c\n-        else:\n-            c = c[0]\n     if alpha is not None and not 0 <= alpha <= 1:\n         raise ValueError(\"'alpha' must be between 0 and 1, inclusive\")\n     orig_c = c\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex c8b44b2dea14..d99dd91e9cf5 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -19,7 +19,7 @@\n import matplotlib.scale as mscale\n from matplotlib.rcsetup import cycler\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n-from matplotlib.colors import to_rgba_array\n+from matplotlib.colors import is_color_like, to_rgba_array\n \n \n @pytest.mark.parametrize('N, result', [\n@@ -1702,3 +1702,16 @@ def test_to_rgba_array_none_color_with_alpha_param():\n     assert_array_equal(\n         to_rgba_array(c, alpha), [[0., 0., 1., 1.], [0., 0., 0., 0.]]\n     )\n+\n+\n+@pytest.mark.parametrize('input, expected',\n+                         [('red', True),\n+                          (('red', 0.5), True),\n+                          (('red', 2), False),\n+                          (['red', 0.5], False),\n+                          (('red', 'blue'), False),\n+                          (['red', 'blue'], False),\n+                          ('C3', True),\n+                          (('C3', 0.5), True)])\n+def test_is_color_like(input, expected):\n+    assert is_color_like(input) is expected\n", "problem_statement": "[Bug]: Setting exactly 2 colors with tuple in `plot` method gives confusing error\n### Bug summary\n\nIf one attempts to set the `color` parameter to a tuple of length 2, a nonsense error message is returned.\n\n### Code for reproduction\n\n```Python\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nx = np.linspace(0, 10, 100)\r\ny = np.array([np.sin(x), np.cos(x)]).T\r\n\r\nplt.plot(x, y, label=(\"sin(x)\", \"cos(x)\")) # works\r\nplt.plot(x, y, label=(\"sin(x)\", \"cos(x)\"), color=(\"red\", \"blue\")) # causes strange error\r\nplt.legend()\r\nplt.show()\n```\n\n\n### Actual outcome\n\nTraceback (most recent call last):\r\n  File \"/Users/miles/Desktop/thing.py\", line 8, in <module>\r\n    plt.plot(x, y, label=(\"sin(x)\", \"cos(x)\"), color=(\"red\", \"blue\")) # causes error\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/pyplot.py\", line 3708, in plot\r\n    return gca().plot(\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/axes/_axes.py\", line 1779, in plot\r\n    lines = [*self._get_lines(self, *args, data=data, **kwargs)]\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 296, in __call__\r\n    yield from self._plot_args(\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 534, in _plot_args\r\n    return [l[0] for l in result]\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 534, in <listcomp>\r\n    return [l[0] for l in result]\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 527, in <genexpr>\r\n    result = (make_artist(axes, x[:, j % ncx], y[:, j % ncy], kw,\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 335, in _makeline\r\n    seg = mlines.Line2D(x, y, **kw)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/lines.py\", line 376, in __init__\r\n    self.set_color(color)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/lines.py\", line 1066, in set_color\r\n    mcolors._check_color_like(color=color)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/colors.py\", line 245, in _check_color_like\r\n    if not is_color_like(v):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/colors.py\", line 227, in is_color_like\r\n    to_rgba(c)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/colors.py\", line 309, in to_rgba\r\n    rgba = _to_rgba_no_colorcycle(c, alpha)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/matplotlib/colors.py\", line 334, in _to_rgba_no_colorcycle\r\n    if alpha is not None and not 0 <= alpha <= 1:\r\nTypeError: '<=' not supported between instances of 'int' and 'str'\n\n### Expected outcome\n\nEither: (1) works as expected as passing a tuple to `label` does, or, if this won't be supported, (2) a more sensical error message is returned, like if `[\"red\", \"blue\"]` were passed.\n\n### Additional information\n\nThis difficult-to-interpret error seems to be caused by the `if` statement of line 328 in `_to_rgba_no_colorcycle` in `colors.py`, which says `if isinstance(c, tuple) and len(c) == 2`. If I comment out this `if` statement, then the error message gives the normal `ValueError: ('red', 'blue') is not a valid value for color...` message. Of course, it would be great if multiple colors were supported here, but I understand if there is a bigger reason why it is not supported.\n\n### Operating system\n\nmacOS 14.4.1\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\nmacosx\n\n### Python version\n\n3.9.6\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "This is a result of the `(color, alpha)` version of specifying colors that was introduced in [3.8.0](https://matplotlib.org/stable/users/prev_whats_new/whats_new_3.8.0.html#add-a-new-valid-color-format-matplotlib-color-alpha)\r\n\r\nThat is why it is specifically tuples (not lists) and specifically length 2...\r\n\r\nMy gut reaction is that the new color specifier is useful enough and the workaround (casting to list) is easy enough that I'm inclined towards keeping current behavior...\r\n\r\nOn the other hand, it may be reasonable to narrow the condition further to \"is the second entry in a length 2 tuple a number\"... and if it is not, treat it as a standard sequence of 2 colors instead...\r\n\r\nAs long as numbers are not valid color specifiers, this would differentiate the cases. I believe that is the case (though _string_ floating point values _are_ valid color specifiers for shades of gray...). Because if a number were a valid color specifier, then this would be an ambiguous case.\nJust catching the `TypeError` within `is_color_like` makes the error consistent with the list case\r\n\r\n```patch\r\ndiff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\r\nindex c4e5987fdf..f6e78dc3e4 100644\r\n--- a/lib/matplotlib/colors.py\r\n+++ b/lib/matplotlib/colors.py\r\n@@ -225,7 +225,7 @@ def is_color_like(c):\r\n         return True\r\n     try:\r\n         to_rgba(c)\r\n-    except ValueError:\r\n+    except (ValueError, TypeError):\r\n         return False\r\n     else:\r\n         return True\r\n\r\n```\r\n```\r\nValueError: ('red', 'blue') is not a valid value for color: supported inputs are (r, g, b) and (r, g, b, a) 0-1 float tuples; '#rrggbb', '#rrggbbaa', '#rgb', '#rgba' strings; named color strings; string reprs of 0-1 floats for grayscale values; 'C0', 'C1', ... strings for colors of the color cycle; and pairs combining one of the above with an alpha value\r\n\r\n```\nNote there is no issue with functions that do take a color sequence\r\n```python\r\nplt.scatter([1, 2], [4, 5], c=(\"red\", \"blue\"))\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/f2504f6e-3159-4619-b090-f6ff81d81053)\r\n\n> Note there is no issue with functions that do take a color sequence\n\nDo we want to allow this function to take a color sequence? It would be in line w/ the other PRs that are vectorizing inputs.\nIt does seem odd that by default you get 2 colors but you cannot specify 2 colors.\nThe `_is_color_like` change proposed by @rcomer [above](https://github.com/matplotlib/matplotlib/issues/28434#issuecomment-2183340319) should be applied no matter what.\r\n\r\nI'm a bit hesitant on supporting sequences for color. If we do that, we'd have to expand to all parameters consistently. Note in particular that some parameters use sequences as single-value represenations already, e.g. colors and [linestyles](https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html#linestyles), so detection of sequence-of-parameters is non-trivial. It's not completely unreasonable to support seqnce-of-parameters, but adds significant complexity to an already very complex function. If somebody implements this, I'd like to see an as-clean-as possible implementation.\r\n\r\nWhen adding label sequences, we've explicitly done that as an exception without the promise to support sequences on all parameters. The argument is that all other parameters can be addressed through the property cycle, i.e. can be configured up-front to a multiple-data plot. That's not possible for labels. See https://github.com/matplotlib/matplotlib/pull/16178#issuecomment-750528043.", "created_at": "2024-06-22T08:25:09Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28430, "instance_id": "matplotlib__matplotlib-28430", "issue_numbers": ["22482", "0000"], "base_commit": "d347c3227f8de8a99aa327390fee619310452a96", "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex ed130e6854f2..a298f3ae3d6a 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -90,22 +90,6 @@ def ignore(self, event):\n         \"\"\"\n         return not self.active\n \n-    def _changed_canvas(self):\n-        \"\"\"\n-        Someone has switched the canvas on us!\n-\n-        This happens if `savefig` needs to save to a format the previous\n-        backend did not support (e.g. saving a figure using an Agg based\n-        backend saved to a vector format).\n-\n-        Returns\n-        -------\n-        bool\n-           True if the canvas has been changed.\n-\n-        \"\"\"\n-        return self.canvas is not self.ax.figure.canvas\n-\n \n class AxesWidget(Widget):\n     \"\"\"\n@@ -131,9 +115,10 @@ class AxesWidget(Widget):\n \n     def __init__(self, ax):\n         self.ax = ax\n-        self.canvas = ax.figure.canvas\n         self._cids = []\n \n+    canvas = property(lambda self: self.ax.figure.canvas)\n+\n     def connect_event(self, event, callback):\n         \"\"\"\n         Connect a callback function with an event.\n@@ -1100,7 +1085,7 @@ def __init__(self, ax, labels, actives=None, *, useblit=True,\n \n     def _clear(self, event):\n         \"\"\"Internal event handler to clear the buttons.\"\"\"\n-        if self.ignore(event) or self._changed_canvas():\n+        if self.ignore(event) or self.canvas.is_saving():\n             return\n         self._background = self.canvas.copy_from_bbox(self.ax.bbox)\n         self.ax.draw_artist(self._checks)\n@@ -1677,7 +1662,7 @@ def __init__(self, ax, labels, active=0, activecolor=None, *,\n \n     def _clear(self, event):\n         \"\"\"Internal event handler to clear the buttons.\"\"\"\n-        if self.ignore(event) or self._changed_canvas():\n+        if self.ignore(event) or self.canvas.is_saving():\n             return\n         self._background = self.canvas.copy_from_bbox(self.ax.bbox)\n         self.ax.draw_artist(self._buttons)\n@@ -1933,7 +1918,7 @@ def __init__(self, ax, *, horizOn=True, vertOn=True, useblit=False,\n \n     def clear(self, event):\n         \"\"\"Internal event handler to clear the cursor.\"\"\"\n-        if self.ignore(event) or self._changed_canvas():\n+        if self.ignore(event) or self.canvas.is_saving():\n             return\n         if self.useblit:\n             self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n@@ -2573,9 +2558,7 @@ def __init__(self, ax, onselect, direction, *, minspan=0, useblit=False,\n         self.drag_from_anywhere = drag_from_anywhere\n         self.ignore_event_outside = ignore_event_outside\n \n-        # Reset canvas so that `new_axes` connects events.\n-        self.canvas = None\n-        self.new_axes(ax, _props=props)\n+        self.new_axes(ax, _props=props, _init=True)\n \n         # Setup handles\n         self._handle_props = {\n@@ -2588,14 +2571,15 @@ def __init__(self, ax, onselect, direction, *, minspan=0, useblit=False,\n \n         self._active_handle = None\n \n-    def new_axes(self, ax, *, _props=None):\n+    def new_axes(self, ax, *, _props=None, _init=False):\n         \"\"\"Set SpanSelector to operate on a new Axes.\"\"\"\n-        self.ax = ax\n-        if self.canvas is not ax.figure.canvas:\n+        reconnect = False\n+        if _init or self.canvas is not ax.figure.canvas:\n             if self.canvas is not None:\n                 self.disconnect_events()\n-\n-            self.canvas = ax.figure.canvas\n+            reconnect = True\n+        self.ax = ax\n+        if reconnect:\n             self.connect_default_events()\n \n         # Reset\ndiff --git a/lib/matplotlib/widgets.pyi b/lib/matplotlib/widgets.pyi\nindex c85ad2158ee7..58adf85aae60 100644\n--- a/lib/matplotlib/widgets.pyi\n+++ b/lib/matplotlib/widgets.pyi\n@@ -33,8 +33,9 @@ class Widget:\n \n class AxesWidget(Widget):\n     ax: Axes\n-    canvas: FigureCanvasBase | None\n     def __init__(self, ax: Axes) -> None: ...\n+    @property\n+    def canvas(self) -> FigureCanvasBase | None: ...\n     def connect_event(self, event: Event, callback: Callable) -> None: ...\n     def disconnect_events(self) -> None: ...\n \n@@ -310,7 +311,6 @@ class SpanSelector(_SelectorWidget):\n     grab_range: float\n     drag_from_anywhere: bool\n     ignore_event_outside: bool\n-    canvas: FigureCanvasBase | None\n     def __init__(\n         self,\n         ax: Axes,\n@@ -330,7 +330,13 @@ class SpanSelector(_SelectorWidget):\n         ignore_event_outside: bool = ...,\n         snap_values: ArrayLike | None = ...,\n     ) -> None: ...\n-    def new_axes(self, ax: Axes, *, _props: dict[str, Any] | None = ...) -> None: ...\n+    def new_axes(\n+        self,\n+        ax: Axes,\n+        *,\n+        _props: dict[str, Any] | None = ...,\n+        _init: bool = ...,\n+    ) -> None: ...\n     def connect_default_events(self) -> None: ...\n     @property\n     def direction(self) -> Literal[\"horizontal\", \"vertical\"]: ...\n", "test_patch": "diff --git a/lib/matplotlib/testing/__init__.py b/lib/matplotlib/testing/__init__.py\nindex 8e60267ed608..19113d399626 100644\n--- a/lib/matplotlib/testing/__init__.py\n+++ b/lib/matplotlib/testing/__init__.py\n@@ -211,3 +211,24 @@ def ipython_in_subprocess(requested_backend_or_gui_framework, all_expected_backe\n     )\n \n     assert proc.stdout.strip().endswith(f\"'{expected_backend}'\")\n+\n+\n+def is_ci_environment():\n+    # Common CI variables\n+    ci_environment_variables = [\n+        'CI',        # Generic CI environment variable\n+        'CONTINUOUS_INTEGRATION',  # Generic CI environment variable\n+        'TRAVIS',    # Travis CI\n+        'CIRCLECI',  # CircleCI\n+        'JENKINS',   # Jenkins\n+        'GITLAB_CI',  # GitLab CI\n+        'GITHUB_ACTIONS',  # GitHub Actions\n+        'TEAMCITY_VERSION'  # TeamCity\n+        # Add other CI environment variables as needed\n+    ]\n+\n+    for env_var in ci_environment_variables:\n+        if os.getenv(env_var):\n+            return True\n+\n+    return False\ndiff --git a/lib/matplotlib/testing/__init__.pyi b/lib/matplotlib/testing/__init__.pyi\nindex 1f52a8ccb8ee..6917b6a5a380 100644\n--- a/lib/matplotlib/testing/__init__.pyi\n+++ b/lib/matplotlib/testing/__init__.pyi\n@@ -51,3 +51,4 @@ def ipython_in_subprocess(\n     requested_backend_or_gui_framework: str,\n     all_expected_backends: dict[tuple[int, int], str],\n ) -> None: ...\n+def is_ci_environment() -> bool: ...\ndiff --git a/lib/matplotlib/tests/test_backends_interactive.py b/lib/matplotlib/tests/test_backends_interactive.py\nindex 6830e7d5c845..d624b5db0ac2 100644\n--- a/lib/matplotlib/tests/test_backends_interactive.py\n+++ b/lib/matplotlib/tests/test_backends_interactive.py\n@@ -19,7 +19,7 @@\n import matplotlib as mpl\n from matplotlib import _c_internal_utils\n from matplotlib.backend_tools import ToolToggleBase\n-from matplotlib.testing import subprocess_run_helper as _run_helper\n+from matplotlib.testing import subprocess_run_helper as _run_helper, is_ci_environment\n \n \n class _WaitForStringPopen(subprocess.Popen):\n@@ -110,27 +110,6 @@ def _get_testable_interactive_backends():\n             for env, marks in _get_available_interactive_backends()]\n \n \n-def is_ci_environment():\n-    # Common CI variables\n-    ci_environment_variables = [\n-        'CI',        # Generic CI environment variable\n-        'CONTINUOUS_INTEGRATION',  # Generic CI environment variable\n-        'TRAVIS',    # Travis CI\n-        'CIRCLECI',  # CircleCI\n-        'JENKINS',   # Jenkins\n-        'GITLAB_CI',  # GitLab CI\n-        'GITHUB_ACTIONS',  # GitHub Actions\n-        'TEAMCITY_VERSION'  # TeamCity\n-        # Add other CI environment variables as needed\n-    ]\n-\n-    for env_var in ci_environment_variables:\n-        if os.getenv(env_var):\n-            return True\n-\n-    return False\n-\n-\n # Reasonable safe values for slower CI/Remote and local architectures.\n _test_timeout = 120 if is_ci_environment() else 20\n \ndiff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 0cba4f392035..1474a67d28aa 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,5 +1,7 @@\n from io import BytesIO\n import ast\n+import os\n+import sys\n import pickle\n import pickletools\n \n@@ -8,7 +10,7 @@\n \n import matplotlib as mpl\n from matplotlib import cm\n-from matplotlib.testing import subprocess_run_helper\n+from matplotlib.testing import subprocess_run_helper, is_ci_environment\n from matplotlib.testing.decorators import check_figures_equal\n from matplotlib.dates import rrulewrapper\n from matplotlib.lines import VertexSelector\n@@ -307,3 +309,23 @@ def test_cycler():\n     ax = pickle.loads(pickle.dumps(ax))\n     l, = ax.plot([3, 4])\n     assert l.get_color() == \"m\"\n+\n+\n+# Run under an interactive backend to test that we don't try to pickle the\n+# (interactive and non-picklable) canvas.\n+def _test_axeswidget_interactive():\n+    ax = plt.figure().add_subplot()\n+    pickle.dumps(mpl.widgets.Button(ax, \"button\"))\n+\n+\n+@pytest.mark.xfail(  # https://github.com/actions/setup-python/issues/649\n+        ('TF_BUILD' in os.environ or 'GITHUB_ACTION' in os.environ) and\n+        sys.platform == 'darwin' and sys.version_info[:2] < (3, 11),\n+        reason='Tk version mismatch on Azure macOS CI'\n+    )\n+def test_axeswidget_interactive():\n+    subprocess_run_helper(\n+        _test_axeswidget_interactive,\n+        timeout=120 if is_ci_environment() else 20,\n+        extra_env={'MPLBACKEND': 'tkagg'}\n+    )\n", "problem_statement": "[ENH]: pickle (or save) matplotlib figure with insteractive slider\n### Problem\n\nI'd like to save/pickle a matplotlib figure containing a `matplotlib.widgets.Widget` object to send it to a colleague without him having to run the code I use to generate it.\r\n\r\nI know since matplotlib version 1.2 `matplotlib.figure.Figure` are pickable. However, when the figure contains a `matplotlib.widgets.Widget`, pickle fails to save it.\r\n\r\nFor example consider this class:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.widgets as widgets\r\n\r\nimport numpy as np\r\n\r\nimport pickle as pkl\r\n\r\nclass interactive_plot():\r\n\r\n    def __init__(self, add_slider):\r\n\r\n        self.fig, self.axs = plt.subplots(2,1, gridspec_kw={'height_ratios':[10,1]})\r\n\r\n        self.x_plot = np.linspace(0,10,1000)\r\n        self.line = self.axs[0].plot(self.x_plot, self.x_plot*0)[0]\r\n        self.axs[0].set_ylim((0,10))\r\n        self.axs[0].grid()\r\n        self.axs[0].set_title(r'$y = x^\\alpha$')\r\n\r\n        if add_slider:\r\n            self.slider= widgets.Slider(\r\n                self.axs[1],\r\n                label   = r'$\\alpha$',\r\n                valmin  = 0,\r\n                valmax  = 5,\r\n                valinit = 0,\r\n                valstep = .01\r\n                )\r\n            self.slider.on_changed(self.update)\r\n\r\n    def update(self, val):\r\n        self.line.set_ydata(self.x_plot**val)\r\n```\r\n\r\nIf I run\r\n\r\n```\r\nh = interactive_plot(add_slider=False)\r\nwith open('test.pkl','wb') as f: pkl.dump(h, f)\r\n```\r\nall works properly. However\r\n```\r\nh = interactive_plot(add_slider=True)\r\nwith open('test.pkl','wb') as f: pkl.dump(h, f)\r\n```\r\nreturns\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"C:\\Users\\user\\Desktop\\test.py\", line 47, in <module>\r\n    with open('test.pkl','wb') as f: pkl.dump(h, f)\r\n\r\nTypeError: cannot pickle 'FigureCanvasQTAgg' object\r\n```\r\n\r\nIs there a way to workaround this?\r\n\r\nDISCLAIMER: The same question was posted here https://stackoverflow.com/questions/71145817/pickle-or-save-matplotlib-figure-with-insteractive-slider\n\n### Proposed solution\n\n_No response_\n", "hints_text": "```patch\r\ndiff --git i/lib/matplotlib/widgets.py w/lib/matplotlib/widgets.py\r\nindex 16e03f5624..a9f1145bf2 100644\r\n--- i/lib/matplotlib/widgets.py\r\n+++ w/lib/matplotlib/widgets.py\r\n@@ -115,9 +115,10 @@ class AxesWidget(Widget):\r\n \r\n     def __init__(self, ax):\r\n         self.ax = ax\r\n-        self.canvas = ax.figure.canvas\r\n         self._cids = []\r\n \r\n+    canvas = property(lambda self: self.ax.figure.canvas)\r\n+\r\n     def connect_event(self, event, callback):\r\n         \"\"\"\r\n         Connect a callback function with an event.\r\n```\r\n\"fixes\" the pickling itself (and seems like a reasonable patch regardless), but even then, the pickling process will drop any connected callbacks as functions can generally not be pickled.\n@anntzer is the dropping of callbacks when picking a figure builtin matplotlib ? or is it a limitation of the standard pickle module ? or is there some kind of criterion that make a function pickle-able or not ?\r\n\r\nI am in the same kind of  situation as @LucaAmerio, where I create matplotlib figure (with Qt backend) and callbacks connected to the figure and/or the axes. I'd like to be able to save and re-open those figure with the callbacks still active\nThe ability to pickle functions is limited per https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled.  We could consider pickling only whatever can actually be pickled and drop the rest, but I believe dropping everything (and asking whoever does the unpickling to reconnect things as needed) is not unreasonable either.", "created_at": "2024-06-20T15:34:29Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28414, "instance_id": "matplotlib__matplotlib-28414", "issue_numbers": ["28404", "0000"], "base_commit": "167a26e210a4226d04598609ccd19905a87eb0bc", "patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex eaa35e25440b..ed130e6854f2 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1001,14 +1001,8 @@ class CheckButtons(AxesWidget):\n     ----------\n     ax : `~matplotlib.axes.Axes`\n         The parent Axes for the widget.\n-\n     labels : list of `~matplotlib.text.Text`\n-\n-    rectangles : list of `~matplotlib.patches.Rectangle`\n-\n-    lines : list of (`.Line2D`, `.Line2D`) pairs\n-        List of lines for the x's in the checkboxes.  These lines exist for\n-        each box, but have ``set_visible(False)`` when its box is not checked.\n+        The text label objects of the check buttons.\n     \"\"\"\n \n     def __init__(self, ax, labels, actives=None, *, useblit=True,\n@@ -1571,8 +1565,6 @@ class RadioButtons(AxesWidget):\n         The color of the selected button.\n     labels : list of `.Text`\n         The button labels.\n-    circles : list of `~.patches.Circle`\n-        The buttons.\n     value_selected : str\n         The label text of the currently selected button.\n     index_selected : int\n@@ -1751,11 +1743,6 @@ def activecolor(self, activecolor):\n         colors._check_color_like(activecolor=activecolor)\n         self._activecolor = activecolor\n         self.set_radio_props({'facecolor': activecolor})\n-        # Make sure the deprecated version is updated.\n-        # Remove once circles is removed.\n-        labels = [label.get_text() for label in self.labels]\n-        with cbook._setattr_cm(self, eventson=False):\n-            self.set_active(labels.index(self.value_selected))\n \n     def set_active(self, index):\n         \"\"\"\n", "test_patch": "", "problem_statement": "[Doc]: matplotlib.widgets.CheckButtons no longer has .rectangles attribute, needs removed.\n### Documentation Link\n\nhttps://matplotlib.org/stable/api/widgets_api.html#matplotlib.widgets.CheckButtons\n\n### Problem\n\nCheckButtons.rectangles (and .lines) no longer attributes (deprecated in 3.7).\n\n### Suggested improvement\n\nCheckButton documentation needs updated (removing .rectangles / .lines attributes)\n", "hints_text": "", "created_at": "2024-06-18T01:30:20Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28401, "instance_id": "matplotlib__matplotlib-28401", "issue_numbers": ["28358"], "base_commit": "fa16860f58439735ddc4d2225876496545cb8e4e", "patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 7fc19c042a1f..af990ec1bf9f 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -606,9 +606,8 @@ def set_wrap(self, wrap):\n         \"\"\"\n         Set whether the text can be wrapped.\n \n-        Wrapping makes sure the text is completely within the figure box, i.e.\n-        it does not extend beyond the drawing area. It does not take into\n-        account any other artists.\n+        Wrapping makes sure the text is confined to the (sub)figure box. It\n+        does not take into account any other artists.\n \n         Parameters\n         ----------\n@@ -657,16 +656,16 @@ def _get_dist_to_box(self, rotation, x0, y0, figure_box):\n         \"\"\"\n         if rotation > 270:\n             quad = rotation - 270\n-            h1 = y0 / math.cos(math.radians(quad))\n+            h1 = (y0 - figure_box.y0) / math.cos(math.radians(quad))\n             h2 = (figure_box.x1 - x0) / math.cos(math.radians(90 - quad))\n         elif rotation > 180:\n             quad = rotation - 180\n-            h1 = x0 / math.cos(math.radians(quad))\n-            h2 = y0 / math.cos(math.radians(90 - quad))\n+            h1 = (x0 - figure_box.x0) / math.cos(math.radians(quad))\n+            h2 = (y0 - figure_box.y0) / math.cos(math.radians(90 - quad))\n         elif rotation > 90:\n             quad = rotation - 90\n             h1 = (figure_box.y1 - y0) / math.cos(math.radians(quad))\n-            h2 = x0 / math.cos(math.radians(90 - quad))\n+            h2 = (x0 - figure_box.x0) / math.cos(math.radians(90 - quad))\n         else:\n             h1 = (figure_box.x1 - x0) / math.cos(math.radians(rotation))\n             h2 = (figure_box.y1 - y0) / math.cos(math.radians(90 - rotation))\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_text.py b/lib/matplotlib/tests/test_text.py\nindex f8837d8a5f1b..8904337f68ba 100644\n--- a/lib/matplotlib/tests/test_text.py\n+++ b/lib/matplotlib/tests/test_text.py\n@@ -15,6 +15,7 @@\n from matplotlib.font_manager import FontProperties\n import matplotlib.patches as mpatches\n import matplotlib.pyplot as plt\n+from matplotlib.gridspec import GridSpec\n import matplotlib.transforms as mtransforms\n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n from matplotlib.testing._markers import needs_usetex\n@@ -707,9 +708,13 @@ def test_large_subscript_title():\n      (0.3, 0, 'right'),\n      (0.3, 185, 'left')])\n def test_wrap(x, rotation, halign):\n-    fig = plt.figure(figsize=(6, 6))\n+    fig = plt.figure(figsize=(18, 18))\n+    gs = GridSpec(nrows=3, ncols=3, figure=fig)\n+    subfig = fig.add_subfigure(gs[1, 1])\n+    # we only use the central subfigure, which does not align with any\n+    # figure boundary, to ensure only subfigure boundaries are relevant\n     s = 'This is a very long text that should be wrapped multiple times.'\n-    text = fig.text(x, 0.7, s, wrap=True, rotation=rotation, ha=halign)\n+    text = subfig.text(x, 0.7, s, wrap=True, rotation=rotation, ha=halign)\n     fig.canvas.draw()\n     assert text._get_wrapped_text() == ('This is a very long\\n'\n                                         'text that should be\\n'\n", "problem_statement": "[Bug]: Labels don't get wrapped when set_yticks() is used in subplots\n### Bug summary\r\n\r\nWhen plotting bar charts in subplots with very long labels, the option of wrapping text only works on the first plotted subplot, despite passing `wrap=True` to `set_yticks()` in both cases.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nlong_text_label = 'very long category label i want to wrap'\r\nlabels = [f\"{long_text_label}_{i}\" for i in range(5)]\r\nvalues = np.arange(1, 6)\r\n\r\nfig, axes = plt.subplots(1, 2)\r\n\r\naxes[0].barh(np.arange(len(labels)), values)\r\naxes[0].set_yticks(np.arange(len(labels)), labels=labels, wrap=True)\r\n\r\naxes[1].barh(np.arange(len(labels)), values)\r\naxes[1].set_yticks(np.arange(len(labels)), labels=labels, wrap=True)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![output](https://github.com/matplotlib/matplotlib/assets/35564508/137c042d-a536-4a27-9991-e4e0a67ea527)\r\n\r\n\r\n### Expected outcome\r\n\r\nThe label text on the y axis should appear wrapped on both subplots\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nmacOS 14.4 (23E214)\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nmodule://matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\nPython 3.11.8\r\n\r\n### Jupyter version\r\n\r\n4.2.0\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "Thanks for the clear report @soogui.  I confirm that I have reproduced this with our `main` development branch.\nI'm not clear what the correct behaviour is here though.  Currently it's wrapping on the edge of the figure.  What would the inner axes wrap on?  The axes to the left presumably, but that isn't conceptually straight forward as an axes knows about its figure but not about its neighbours, and it knows its own spine position but doesn't try to reserve space for itself outside those spines.  Note we usually do the opposite and make the axes further apart to accommodate the ytick labels.  \nFor the current architecture, this is the expected behavior. We should better document what `warp` can or can't do.\r\n\r\nI see two possible ways to improve:\r\n- hard: Assign each axes a bounding box. This should work well with subplots/subplot_mosaic, but I'm unclear how other axes creation methods would handle this. Up to now, the Axes is defined via the data area, ticks and labels just spill outside as far as they need.\r\n- medium: Expand the `wrap` functionality to allow wrapping after N characters and/or specifying a maximal width.\nI think the conceptually simplest is to not allow auto wrap for tick labels.  Folks can manually wrap if they need to.  \nWell, the case of one subplot with long tick labels works. IMHO we should not break that.\r\n\r\nJust documenting that wrapping is limited to the figure boundary is good enough to manage expectations on the current behavior.\n@jklymak When #28177 is in, we could switch the wrapping box (in `Text._get_wrap_line_width`) to subfigure instead of figure. IMHO this boundary makes more sense. And it would at least allow to get what the OP wants using subfigures:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nlong_text_label = 'very long category label i want to wrap'\r\nlabels = [f\"{long_text_label}_{i}\" for i in range(5)]\r\nvalues = np.arange(1, 6)\r\n\r\nfig = plt.figure()\r\nsubfigs = fig.subfigures(1, 2)\r\nax0 = subfigs[0].subplots()\r\nax1 = subfigs[1].subplots()\r\n\r\nax0.barh(np.arange(len(labels)), values)\r\nax0.set_yticks(np.arange(len(labels)), labels=labels, wrap=True)\r\n\r\nax1.barh(np.arange(len(labels)), values)\r\nax1.set_yticks(np.arange(len(labels)), labels=labels, wrap=True)\r\n```\r\n\r\n--> Created a separate issue for this #28378.\nThat's likely fine. However it should be noted that even in the single subplot situation the wrap is incompatible with layout management since that adjusts the size of the axes to account for the size of the labels versus wrapping the labels. \n\nAs stated I am mildly opposed to us jumping through hoops to allow wrapping tick labels because I don't think it s a generally useful thing to do. However if the issues with wrapping tick labels also extends to other text boxes in subfigures, that might merit some effort to fix.  ", "created_at": "2024-06-15T23:21:40Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28398, "instance_id": "matplotlib__matplotlib-28398", "issue_numbers": ["28387", "0000"], "base_commit": "b19794e126c1077b83eba90fe74ab1f67362b1ba", "patch": "diff --git a/src/_macosx.m b/src/_macosx.m\nindex fe93193eb053..77a04e38410a 100755\n--- a/src/_macosx.m\n+++ b/src/_macosx.m\n@@ -80,6 +80,9 @@ static int wait_for_stdin() {\n \n         // continuously run an event loop until the stdin_received flag is set to exit\n         while (!stdin_received && !stdin_sigint) {\n+            // This loop is similar to the main event loop and flush_events which have\n+            // Py_[BEGIN|END]_ALLOW_THREADS surrounding the loop.\n+            // This should not be necessary here because PyOS_InputHook releases the GIL for us.\n             while (true) {\n                 NSEvent *event = [NSApp nextEventMatchingMask: NSEventMaskAny\n                                                     untilDate: [NSDate distantPast]\n@@ -383,6 +386,9 @@ static CGFloat _get_device_scale(CGContextRef cr)\n     // to process, breaking out of the loop when no events remain and\n     // displaying the canvas if needed.\n     NSEvent *event;\n+\n+    Py_BEGIN_ALLOW_THREADS\n+\n     while (true) {\n         event = [NSApp nextEventMatchingMask: NSEventMaskAny\n                                    untilDate: [NSDate distantPast]\n@@ -393,6 +399,9 @@ static CGFloat _get_device_scale(CGContextRef cr)\n         }\n         [NSApp sendEvent:event];\n     }\n+\n+    Py_END_ALLOW_THREADS\n+\n     [self->view displayIfNeeded];\n     Py_RETURN_NONE;\n }\n", "test_patch": "", "problem_statement": "[Bug]: Can not close figure when using multiple figures on MacOS X\n### Bug summary\n\nI can not close figure when use multiple figures. \r\n\r\nI use\r\n- macOS 14.5 (23F79).\r\n- Apple M1 Pro\r\n\r\n \r\n\n\n### Code for reproduction\n\n```Python\nimport matplotlib.pyplot as plt\r\n\r\nimport numpy as np\r\n\r\na = np.arange(10)\r\ny = np.sin(a)\r\n\r\nplt.figure()\r\nplt.plot(a, y)\r\nplt.figure()\r\nplt.plot(a, y)\r\nplt.show()\n```\n\n\n### Actual outcome\n\n\r\nhttps://github.com/matplotlib/matplotlib/assets/37545115/86c03ed7-ed48-4af1-b918-ba132edb4c3b\r\n\r\n\n\n### Expected outcome\n\nI should close these figures immediately.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.8.4\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\n3.12.3\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n", "hints_text": "I can reproduce this, but only when using tabbed window mode: `plt.rcParams[\"macosx.window_mode\"] = \"tab\"`.\r\n\r\nIt looks like it was introduced by https://github.com/matplotlib/matplotlib/pull/27290 and reverting that commit does fix this issue on main for me. v3.8.1 works as expected, v3.8.2 is where this issue started to occur.\r\ncc @ksunden\nDoes reverting #27290 also bring back the segfault on py312?\r\n\r\nMy guess is that we have generated some sort of deadlock on the GIL and probably need to change some of our logic on close on macOS to be \"please exit when you can\" from \"please exit now, I'all wait\"\n> Does reverting https://github.com/matplotlib/matplotlib/pull/27290 also bring back the segfault on py312?\r\n\r\nYes, it sure does, sorry I shouldn't have implied we _should_ revert it, just that reverting does get us the old desired behavior with tabs.\r\n\r\n> My guess is that we have generated some sort of deadlock on the GIL and probably need to change some of our logic on close on macOS to be \"please exit when you can\" from \"please exit now, I'all wait\"\r\n\r\nI agree with this assumption of needing to update our logic.\nHmmm... interestingly, you can actually pull the tabs apart into separate windows, and then they close perfectly fine... \r\n\r\nI wonder if the deadlock is caused by dispatching the close signal to two tabs at once...\r\n\r\nI will note that it also freezes on hitting an individual tab close button, not just the red window close button.\r\n\r\nA few quick print debugging steps do in fact confirm that we are hanging at `PyGILState_Ensure` in `_buffer_release`. Though wonder if tracing back farther will be productive.\r\n\r\nFurther, during normal separated window closing, `_buffer_release` is _not_ called at all, so not sure why it is called when tabbed, perhaps it is closing one, triggering a draw on the other, even if they are closing?", "created_at": "2024-06-14T18:36:36Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28397, "instance_id": "matplotlib__matplotlib-28397", "issue_numbers": ["28384", "0000"], "base_commit": "b19794e126c1077b83eba90fe74ab1f67362b1ba", "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 9139b2ed262f..9f764cc2332f 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1636,6 +1636,8 @@ def add_subfigure(self, subplotspec, **kwargs):\n         sf = SubFigure(self, subplotspec, **kwargs)\n         self.subfigs += [sf]\n         sf._remove_method = self.subfigs.remove\n+        sf.stale_callback = _stale_figure_callback\n+        self.stale = True\n         return sf\n \n     def sca(self, a):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex e8edcf61815d..5a8894b10496 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1741,3 +1741,27 @@ def test_subfigure_row_order():\n     sf_arr = fig.subfigures(4, 3)\n     for a, b in zip(sf_arr.ravel(), fig.subfigs):\n         assert a is b\n+\n+\n+def test_subfigure_stale_propagation():\n+    fig = plt.figure()\n+\n+    fig.draw_without_rendering()\n+    assert not fig.stale\n+\n+    sfig1 = fig.subfigures()\n+    assert fig.stale\n+\n+    fig.draw_without_rendering()\n+    assert not fig.stale\n+    assert not sfig1.stale\n+\n+    sfig2 = sfig1.subfigures()\n+    assert fig.stale\n+\n+    fig.draw_without_rendering()\n+    assert not fig.stale\n+    assert not sfig2.stale\n+\n+    sfig2.stale = True\n+    assert fig.stale\n", "problem_statement": "[Bug]: subfigure artists not drawn interactively\n### Bug summary\n\nWhen artists are added to a subfigure in interactive mode, they do not appear until I force a draw by resizing the window.\n\n### Code for reproduction\n\n```Python\n$ ipython --matplotlib=qt\r\nPython 3.12.3 | packaged by conda-forge | (main, Apr 15 2024, 18:38:13) [GCC 12.3.0]\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.24.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import matplotlib.pyplot as plt\r\n\r\nIn [2]: fig = plt.figure()\r\n\r\nIn [3]: sfig1, sfig2 = fig.subfigures(ncols=2)\r\n\r\nIn [4]: sfig2.suptitle(\"My Title\")\r\nOut[4]: Text(0.5, 0.98, 'My Title')\r\n\r\nIn [5]: ax = sfig1.subplots()\r\n\r\nIn [6]: ax.plot([1, 3, 2])\r\nOut[6]: [<matplotlib.lines.Line2D at 0x73a220908ce0>]\n```\n\n\n### Actual outcome\n\nApparently empty figure\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/c6f531b3-cdb1-4af3-89ad-7f8d24c322b5)\r\n\n\n### Expected outcome\n\nIf I resize the window, the artists appear\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/223737ec-3f78-4d58-9e3c-c2bff4833a85)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n`main`\n\n### Matplotlib Backend\n\nQtAgg and TkAgg\n\n### Python version\n\n3.12.3\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout\n", "hints_text": "Very likely the issue is that `obj.stale` is not propogating up from the sub-figure to the parent.\nHuh. I never use interactive mode so didn't test that! Seems a pretty big oversight.  Thanks for finding. ", "created_at": "2024-06-14T17:55:24Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28393, "instance_id": "matplotlib__matplotlib-28393", "issue_numbers": ["28223", "0000"], "base_commit": "b19794e126c1077b83eba90fe74ab1f67362b1ba", "patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 1cf56c90cc6c..b810501ec7bb 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2942,9 +2942,15 @@ def handle_single_axis(\n             # Index of largest element < x0 + tol, if any.\n             i0 = stickies.searchsorted(x0 + tol) - 1\n             x0bound = stickies[i0] if i0 != -1 else None\n+            # Ensure the boundary acts only if the sticky is the extreme value\n+            if x0bound is not None and x0bound > x0:\n+                x0bound = None\n             # Index of smallest element > x1 - tol, if any.\n             i1 = stickies.searchsorted(x1 - tol)\n             x1bound = stickies[i1] if i1 != len(stickies) else None\n+            # Ensure the boundary acts only if the sticky is the extreme value\n+            if x1bound is not None and x1bound < x1:\n+                x1bound = None\n \n             # Add the margin in figure space and then transform back, to handle\n             # non-linear scales.\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_axes/sticky_tolerance.png b/lib/matplotlib/tests/baseline_images/test_axes/sticky_tolerance.png\nnew file mode 100644\nindex 000000000000..a3fb13d0716a\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_axes/sticky_tolerance.png differ\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex dd37d3d8ee80..48121ee04939 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -682,6 +682,25 @@ def test_sticky_shared_axes(fig_test, fig_ref):\n     ax0.pcolormesh(Z)\n \n \n+@image_comparison(['sticky_tolerance.png'], remove_text=True, style=\"mpl20\")\n+def test_sticky_tolerance():\n+    fig, axs = plt.subplots(2, 2)\n+\n+    width = .1\n+\n+    axs.flat[0].bar(x=0, height=width, bottom=20000.6)\n+    axs.flat[0].bar(x=1, height=width, bottom=20000.1)\n+\n+    axs.flat[1].bar(x=0, height=-width, bottom=20000.6)\n+    axs.flat[1].bar(x=1, height=-width, bottom=20000.1)\n+\n+    axs.flat[2].barh(y=0, width=-width, left=-20000.6)\n+    axs.flat[2].barh(y=1, width=-width, left=-20000.1)\n+\n+    axs.flat[3].barh(y=0, width=width, left=-20000.6)\n+    axs.flat[3].barh(y=1, width=width, left=-20000.1)\n+\n+\n def test_nargs_stem():\n     with pytest.raises(TypeError, match='0 were given'):\n         # stem() takes 1-3 arguments.\n", "problem_statement": "[Bug]: Inconsistent Visualization of Intervals in ax.barh for Different Duration Widths\n### Bug summary\n\n**Issue Description:**\r\n\r\nWhen using ax.barh to visualize intervals, the function fails to display all intervals under certain conditions, which appears to be linked to the width of the intervals specified as duration. Specifically, intervals with a duration of 3 hours are not displayed properly, while increasing the duration to 5 hours results in correct visualization. This issue suggests a potential problem with how interval widths are handled or rendered in ax.barh.\r\n\r\n**Steps to Reproduce:**\r\nRefer to \"code for reproduction\"\r\n\r\n**Expected Behavior:**\r\n\r\nAll intervals should be visualized consistently, regardless of their duration width.\r\n\r\n**Actual Behavior:**\r\n\r\nIntervals with a shorter duration (3 hours) are not visualized correctly, while longer durations (5 hours) are displayed as expected.\n\n### Code for reproduction\n\n```Python\nfrom datetime import datetime, timedelta\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\n\r\nduration = timedelta(hours=3)\r\n# duration = timedelta(hours=5)\r\nax.barh(y=0, width=duration, left=datetime(2024, 1, 1, 6))\r\nax.barh(y=1, width=duration, left=datetime(2024, 1, 1, 1))\r\n\r\nplt.xticks(rotation=45)\r\nplt.tight_layout()\r\nplt.savefig('bug.png')\n```\n\n\n### Actual outcome\n\nOnly one of two bars is rendered.\r\n![image](https://github.com/matplotlib/matplotlib/assets/78612439/9ad98184-b0bb-4f8d-a976-043ceab01e70)\r\n\n\n### Expected outcome\n\nI expect both bars to appear:\r\n![image](https://github.com/matplotlib/matplotlib/assets/78612439/e3833e42-0869-4c93-95c7-be81adc576bc)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu and Manjaro\n\n### Matplotlib Version\n\n3.8.4\n\n### Matplotlib Backend\n\nagg\n\n### Python version\n\n3.11.8\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "This is a bug with the auto-limits as first bar starts immediately on the  right limit\r\n\r\nIf you draw the edges on the patches:\r\n\r\n```python\r\nax.barh(y=0, width=duration, left=datetime(2024, 1, 1, 6), lw=10, ec='k')\r\nax.barh(y=1, width=duration, left=datetime(2024, 1, 1, 1), lw=10, ec='k')\r\n```\r\n\r\nyou can see the left edge of the blue bar peaking out\r\n\r\n![bug](https://github.com/matplotlib/matplotlib/assets/199813/90bce6a1-477c-481f-bcf2-e0605a18dcbd)\r\n\r\n\r\nWhy making the orange bar long enough to overlap \"fixes\" it is very surprising to me.\nIf you pan (or manually set the limits) the second bar renders correctly, it is just that it is off screen by default.\nWe discussed this on a call, and the problem isn't with units, but with the relative size of the positions vs the widths of the bars (i.e., when dates are made unitless, they are positioned at ~20000 vs a width of < 1 for hours). This causes some poor interaction with sticky edges. @ksunden will be opening a PR shortly.", "created_at": "2024-06-13T22:54:16Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28388, "instance_id": "matplotlib__matplotlib-28388", "issue_numbers": ["28367", "0000"], "base_commit": "bcaffa137e5724259c4bf96a658fe3a11191b25e", "patch": "diff --git a/lib/matplotlib/backends/registry.py b/lib/matplotlib/backends/registry.py\nindex 19b4cba254ab..47d5f65e350e 100644\n--- a/lib/matplotlib/backends/registry.py\n+++ b/lib/matplotlib/backends/registry.py\n@@ -168,8 +168,11 @@ def backward_compatible_entry_points(\n     def _validate_and_store_entry_points(self, entries):\n         # Validate and store entry points so that they can be used via matplotlib.use()\n         # in the normal manner. Entry point names cannot be of module:// format, cannot\n-        # shadow a built-in backend name, and cannot be duplicated.\n-        for name, module in entries:\n+        # shadow a built-in backend name, and there cannot be multiple entry points\n+        # with the same name but different modules. Multiple entry points with the same\n+        # name and value are permitted (it can sometimes happen outside of our control,\n+        # see https://github.com/matplotlib/matplotlib/issues/28367).\n+        for name, module in set(entries):\n             name = name.lower()\n             if name.startswith(\"module://\"):\n                 raise RuntimeError(\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_registry.py b/lib/matplotlib/tests/test_backend_registry.py\nindex eaf8417e7a5f..141ffd69c266 100644\n--- a/lib/matplotlib/tests/test_backend_registry.py\n+++ b/lib/matplotlib/tests/test_backend_registry.py\n@@ -121,6 +121,17 @@ def test_entry_point_name_duplicate(clear_backend_registry):\n             [('some_name', 'module1'), ('some_name', 'module2')])\n \n \n+def test_entry_point_identical(clear_backend_registry):\n+    # Issue https://github.com/matplotlib/matplotlib/issues/28367\n+    # Multiple entry points with the same name and value (value is the module)\n+    # are acceptable.\n+    n = len(backend_registry._name_to_module)\n+    backend_registry._validate_and_store_entry_points(\n+        [('some_name', 'some.module'), ('some_name', 'some.module')])\n+    assert len(backend_registry._name_to_module) == n+1\n+    assert backend_registry._name_to_module['some_name'] == 'module://some.module'\n+\n+\n def test_entry_point_name_is_module(clear_backend_registry):\n     with pytest.raises(RuntimeError):\n         backend_registry._validate_and_store_entry_points(\n", "problem_statement": "[Bug]: Backend entry points can be erroneously duplicated\n### Summary\n\nUnder certain circumstances outside of our control, an `entry_points`-registering backend such as `matplotlib-inline` can appear as two entry points so that we raise a `RuntimeError(f\"Entry point name '{name}' duplicated\")`. Reported on [Matplotlib Discourse](https://discourse.matplotlib.org/t/latest-versions-via-pip-jupyterlab-import-of-matplotlib-broken/24477/6).\n\n### Proposed fix\n\nThe `BackendRegistry` purposefully does not allow multiple entry points with the same name as it has no way to know which one to prefer. This has now caused a problem in the linked discussion when using system python 3.9 and a virtual environment on Rocky 9.4 Linux. Although there is only a single `entry_points.txt` file for e.g. `matplotlib-inline` the system python `importlib.metadata.entry_points` erroneously returns two identical items. I think this is because the virtualenv has both a `lib` directory and a `lib64` symlink to the `lib` directory, and this particular combination of Linux distribution, python version and use of `venv` does not check that they both refer to the same file. Regardless of where the problem really lies here, Matplotlib needs to be able to deal with it.\r\n\r\nI'll submit a PR later in the week. I think the simplest change is to allow (i.e. discard) entry points that have the same `group` (e.g. `matplotlib.backend`), `name` (e.g. `inline`) and `value` (e.g. `matplotlib_inline.backend_inline`), and then raise if there are multiple entry points of the same `group` and `name` but different `value`.\n", "hints_text": "", "created_at": "2024-06-13T12:00:20Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28377, "instance_id": "matplotlib__matplotlib-28377", "issue_numbers": ["28358"], "base_commit": "14a04a02789e5deab2325531b46d570f16a29986", "patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 40cd8c8cd6f7..7fc19c042a1f 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -606,6 +606,10 @@ def set_wrap(self, wrap):\n         \"\"\"\n         Set whether the text can be wrapped.\n \n+        Wrapping makes sure the text is completely within the figure box, i.e.\n+        it does not extend beyond the drawing area. It does not take into\n+        account any other artists.\n+\n         Parameters\n         ----------\n         wrap : bool\n", "test_patch": "", "problem_statement": "[Bug]: Labels don't get wrapped when set_yticks() is used in subplots\n### Bug summary\r\n\r\nWhen plotting bar charts in subplots with very long labels, the option of wrapping text only works on the first plotted subplot, despite passing `wrap=True` to `set_yticks()` in both cases.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nlong_text_label = 'very long category label i want to wrap'\r\nlabels = [f\"{long_text_label}_{i}\" for i in range(5)]\r\nvalues = np.arange(1, 6)\r\n\r\nfig, axes = plt.subplots(1, 2)\r\n\r\naxes[0].barh(np.arange(len(labels)), values)\r\naxes[0].set_yticks(np.arange(len(labels)), labels=labels, wrap=True)\r\n\r\naxes[1].barh(np.arange(len(labels)), values)\r\naxes[1].set_yticks(np.arange(len(labels)), labels=labels, wrap=True)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![output](https://github.com/matplotlib/matplotlib/assets/35564508/137c042d-a536-4a27-9991-e4e0a67ea527)\r\n\r\n\r\n### Expected outcome\r\n\r\nThe label text on the y axis should appear wrapped on both subplots\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nmacOS 14.4 (23E214)\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nmodule://matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\nPython 3.11.8\r\n\r\n### Jupyter version\r\n\r\n4.2.0\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "Thanks for the clear report @soogui.  I confirm that I have reproduced this with our `main` development branch.\nI'm not clear what the correct behaviour is here though.  Currently it's wrapping on the edge of the figure.  What would the inner axes wrap on?  The axes to the left presumably, but that isn't conceptually straight forward as an axes knows about its figure but not about its neighbours, and it knows its own spine position but doesn't try to reserve space for itself outside those spines.  Note we usually do the opposite and make the axes further apart to accommodate the ytick labels.  \nFor the current architecture, this is the expected behavior. We should better document what `warp` can or can't do.\r\n\r\nI see two possible ways to improve:\r\n- hard: Assign each axes a bounding box. This should work well with subplots/subplot_mosaic, but I'm unclear how other axes creation methods would handle this. Up to now, the Axes is defined via the data area, ticks and labels just spill outside as far as they need.\r\n- medium: Expand the `wrap` functionality to allow wrapping after N characters and/or specifying a maximal width.\nI think the conceptually simplest is to not allow auto wrap for tick labels.  Folks can manually wrap if they need to.  \nWell, the case of one subplot with long tick labels works. IMHO we should not break that.\r\n\r\nJust documenting that wrapping is limited to the figure boundary is good enough to manage expectations on the current behavior.", "created_at": "2024-06-12T07:45:58Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28363, "instance_id": "matplotlib__matplotlib-28363", "issue_numbers": ["28344", "0000"], "base_commit": "5d6acdf486d0b7ca0065ea5eef9573f2c24b07b3", "patch": "diff --git a/doc/api/next_api_changes/behavior/28363-TS.rst b/doc/api/next_api_changes/behavior/28363-TS.rst\nnew file mode 100644\nindex 000000000000..2242f3929e04\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/28363-TS.rst\n@@ -0,0 +1,6 @@\n+Subfigures\n+~~~~~~~~~~\n+\n+`.Figure.subfigures` are now added in row-major order to be consistent with\n+`.Figure.subplots`.  The return value of `~.Figure.subfigures` is not changed,\n+but the order of ``fig.subfigs`` is.\ndiff --git a/doc/users/next_whats_new/subfigures_change_order.rst b/doc/users/next_whats_new/subfigures_change_order.rst\nnew file mode 100644\nindex 000000000000..49a018a3fd96\n--- /dev/null\n+++ b/doc/users/next_whats_new/subfigures_change_order.rst\n@@ -0,0 +1,23 @@\n+Subfigures are now added in row-major order\n+-------------------------------------------\n+\n+``Figure.subfigures`` are now added in row-major order for API consistency.\n+\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Example of creating 3 by 3 subfigures.\n+\n+    import matplotlib.pyplot as plt\n+\n+    fig = plt.figure()\n+    subfigs = fig.subfigures(3, 3)\n+    x = np.linspace(0, 10, 100)\n+\n+    for i, sf in enumerate(fig.subfigs):\n+        ax = sf.subplots()\n+        ax.plot(x, np.sin(x + i), label=f'Subfigure {i+1}')\n+        sf.suptitle(f'Subfigure {i+1}')\n+        ax.set_xticks([])\n+        ax.set_yticks([])\n+    plt.show()\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 0a0ff01a2571..0aa90e716b1c 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1550,6 +1550,9 @@ def subfigures(self, nrows=1, ncols=1, squeeze=True,\n         .. note::\n             The *subfigure* concept is new in v3.4, and the API is still provisional.\n \n+        .. versionchanged:: 3.10\n+            subfigures are now added in row-major order.\n+\n         Parameters\n         ----------\n         nrows, ncols : int, default: 1\n@@ -1583,9 +1586,9 @@ def subfigures(self, nrows=1, ncols=1, squeeze=True,\n                       left=0, right=1, bottom=0, top=1)\n \n         sfarr = np.empty((nrows, ncols), dtype=object)\n-        for i in range(ncols):\n-            for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+        for i in range(nrows):\n+            for j in range(ncols):\n+                sfarr[i, j] = self.add_subfigure(gs[i, j], **kwargs)\n \n         if self.get_layout_engine() is None and (wspace is not None or\n                                                  hspace is not None):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 58aecd3dea8b..e8edcf61815d 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1733,3 +1733,11 @@ def test_warn_colorbar_mismatch():\n     subfig3_1.colorbar(im3_2)   # should not warn\n     with pytest.warns(UserWarning, match=\"different Figure\"):\n         subfig3_1.colorbar(im4_1)\n+\n+\n+def test_subfigure_row_order():\n+    # Test that subfigures are drawn in row-major order.\n+    fig = plt.figure()\n+    sf_arr = fig.subfigures(4, 3)\n+    for a, b in zip(sf_arr.ravel(), fig.subfigs):\n+        assert a is b\n", "problem_statement": "[Bug]: subfigures are added in column major order\n### Bug summary\n\nsubplots() adds axes in row-major order, but subfigures() add subfigures in column-major order\n\n### Code for reproduction\n\n```Python\nfrom pylab import *\r\n\r\nf = figure()\r\nf.subplots(3, 3)\r\nfor i, ax in enumerate(f.axes): ax.set_title(i)\r\nsavefig(\"/tmp/subplots.png\")\r\n\r\nf = figure()\r\nf.subfigures(3, 3)\r\nfor i, sf in enumerate(f.subfigs): sf.suptitle(i)\r\nsavefig(\"/tmp/subfigures.png\")\n```\n\n\n### Actual outcome\n\nsubplots\r\n![subplots](https://github.com/matplotlib/matplotlib/assets/1322974/0f972af4-492c-4621-941b-440cd9dab208)\r\n\r\nsubfigures\r\n![subfigures](https://github.com/matplotlib/matplotlib/assets/1322974/56b98e97-2b2c-476f-acd7-e9ebe2716ecb)\r\n\n\n### Expected outcome\n\nSubfigures are added in row-major axis, per standard numpy defaults.\n\n### Additional information\n\nIn practice this should rarely matter, as the subfigures don't overlap so drawing order should be irrelevant... perhaps unless some artists are positioned beyond the subfigure edge and not clipped.\r\n\r\nThe behavior directly arises from the iteration in subfigures:\r\n```python\r\n        sfarr = np.empty((nrows, ncols), dtype=object)\r\n        for i in range(ncols):\r\n            for j in range(nrows):\r\n                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\r\n```\n\n### Operating system\n\nmacOS\n\n### Matplotlib Version\n\n3.10.0.dev233+ga833d99e46\n\n### Matplotlib Backend\n\nqtagg\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nno\n\n### Installation\n\ngit checkout\n", "hints_text": "I am in favor of flipping `subfigures` to match `subplots`.   I think this is a case where we can not warn, but should just do it (and clearly document it).  I hope this won't bite too many people who are relying on the iteration order and get us out of explaining why it is different forever.\nIt should also be noted that subfigures as of 3.9 (I think) now respect z-order so you can move them up and down if you have to.", "created_at": "2024-06-09T07:04:08Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28340, "instance_id": "matplotlib__matplotlib-28340", "issue_numbers": ["28212", "0000"], "base_commit": "479bd7a0cad2b77ef522c1dd6d65080a4da62b4f", "patch": "diff --git a/lib/matplotlib/dviread.py b/lib/matplotlib/dviread.py\nindex 82f43b56292d..7d61367fd661 100644\n--- a/lib/matplotlib/dviread.py\n+++ b/lib/matplotlib/dviread.py\n@@ -230,6 +230,7 @@ def __init__(self, filename, dpi):\n         self.dpi = dpi\n         self.fonts = {}\n         self.state = _dvistate.pre\n+        self._missing_font = None\n \n     def __enter__(self):\n         \"\"\"Context manager enter method, does nothing.\"\"\"\n@@ -337,6 +338,8 @@ def _read(self):\n         while True:\n             byte = self.file.read(1)[0]\n             self._dtable[byte](self, byte)\n+            if self._missing_font:\n+                raise self._missing_font\n             name = self._dtable[byte].__name__\n             if name == \"_push\":\n                 down_stack.append(down_stack[-1])\n@@ -364,11 +367,15 @@ def _arg(self, nbytes, signed=False):\n     @_dispatch(min=0, max=127, state=_dvistate.inpage)\n     def _set_char_immediate(self, char):\n         self._put_char_real(char)\n+        if isinstance(self.fonts[self.f], FileNotFoundError):\n+            return\n         self.h += self.fonts[self.f]._width_of(char)\n \n     @_dispatch(min=128, max=131, state=_dvistate.inpage, args=('olen1',))\n     def _set_char(self, char):\n         self._put_char_real(char)\n+        if isinstance(self.fonts[self.f], FileNotFoundError):\n+            return\n         self.h += self.fonts[self.f]._width_of(char)\n \n     @_dispatch(132, state=_dvistate.inpage, args=('s4', 's4'))\n@@ -382,7 +389,9 @@ def _put_char(self, char):\n \n     def _put_char_real(self, char):\n         font = self.fonts[self.f]\n-        if font._vf is None:\n+        if isinstance(font, FileNotFoundError):\n+            self._missing_font = font\n+        elif font._vf is None:\n             self.text.append(Text(self.h, self.v, font, char,\n                                   font._width_of(char)))\n         else:\n@@ -486,7 +495,16 @@ def _fnt_def(self, k, c, s, d, a, l):\n     def _fnt_def_real(self, k, c, s, d, a, l):\n         n = self.file.read(a + l)\n         fontname = n[-l:].decode('ascii')\n-        tfm = _tfmfile(fontname)\n+        try:\n+            tfm = _tfmfile(fontname)\n+        except FileNotFoundError as exc:\n+            # Explicitly allow defining missing fonts for Vf support; we only\n+            # register an error when trying to load a glyph from a missing font\n+            # and throw that error in Dvi._read.  For Vf, _finalize_packet\n+            # checks whether a missing glyph has been used, and in that case\n+            # skips the glyph definition.\n+            self.fonts[k] = exc\n+            return\n         if c != 0 and tfm.checksum != 0 and c != tfm.checksum:\n             raise ValueError('tfm checksum mismatch: %s' % n)\n         try:\n@@ -712,12 +730,14 @@ def _init_packet(self, pl):\n         self.h, self.v, self.w, self.x, self.y, self.z = 0, 0, 0, 0, 0, 0\n         self.stack, self.text, self.boxes = [], [], []\n         self.f = self._first_font\n+        self._missing_font = None\n         return self.file.tell() + pl\n \n     def _finalize_packet(self, packet_char, packet_width):\n-        self._chars[packet_char] = Page(\n-            text=self.text, boxes=self.boxes, width=packet_width,\n-            height=None, descent=None)\n+        if not self._missing_font:  # Otherwise we don't have full glyph definition.\n+            self._chars[packet_char] = Page(\n+                text=self.text, boxes=self.boxes, width=packet_width,\n+                height=None, descent=None)\n         self.state = _dvistate.outer\n \n     def _pre(self, i, x, cs, ds):\n", "test_patch": "", "problem_statement": "[Bug]: Matplotlib not work with MiKTeX.\n### Bug summary\r\n\r\n`ax.xaxis.set_major_locator` will let matplotlib throw a font not found error. But if we remove `ax.xaxis.set_major_locator`, the error disappears.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nfrom matplotlib import ticker\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.rcParams['text.usetex'] = True\r\nplt.rcParams['font.family'] = 'serif'\r\nplt.rcParams['font.serif'] = 'Times'\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([1, 2, 3])\r\n\r\n#!!!!! If we comment out the following line, the code will run without error\r\nax.xaxis.set_major_locator(ticker.LinearLocator(numticks=5))\r\n\r\nfig.savefig('test.pdf')\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nThrows error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"e:\\research\\article\\\\bug.py\", line 14, in <module>\r\n    fig.savefig('test.pdf')\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\figure.py\", line 3390, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2193, in print_figure\r\n    result = print_method(\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2043, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backends\\backend_pdf.py\", line 2807, in print_pdf\r\n    self.figure.draw(renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\figure.py\", line 3154, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3070, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\axis.py\", line 1391, in draw\r\n    tick.draw(renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\axis.py\", line 295, in draw\r\n    artist.draw(renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\text.py\", line 793, in draw\r\n    textrenderer.draw_tex(gc, x, y, clean_line,\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backends\\backend_pdf.py\", line 2267, in draw_tex\r\n    pdfname = self.file.dviFontName(dvifont)\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backends\\backend_pdf.py\", line 938, in dviFontName\r\n    psfont = tex_font_map[dvifont.texname]\r\n  File \"E:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\dviread.py\", line 905, in __getitem__\r\n    raise LookupError(\r\nLookupError: An associated PostScript font (required by Matplotlib) could not be found for TeX font 'zptmcm7y' in 'E:/scoop/apps/miktex/current/texmfs/data/fonts/map/pdftex/pdftex.map'; this problem can often be solved by installing a suitable PostScript font package in your TeX package manager\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo error.\r\n\r\n### Additional information\r\nMiKTeX version\r\n```\r\nTeX is a trademark of the American Mathematical Society.\r\nusing bzip2 version 1.0.8, 13-Jul-2019\r\ncompiled with curl version 8.4.0; using libcurl/8.4.0 Schannel\r\ncompiled with expat version 2.5; using expat_2.5.0\r\ncompiled with jpeg version 9.5\r\ncompiled with liblzma version 50040002; using 50040002\r\ncompiled with libpng version 1.6.39; using 1.6.39\r\ncompiled with libressl version LibreSSL 3.8.1; using LibreSSL 3.8.1\r\ncompiled with MiKTeX Application Framework version 4.8; using 4.8\r\ncompiled with MiKTeX Core version 4.24; using 4.24\r\ncompiled with MiKTeX Archive Extractor version 4.1; using 4.1\r\ncompiled with MiKTeX Package Manager version 4.10; using 4.10\r\ncompiled with uriparser version 0.9.7\r\ncompiled with xpdf version 4.04\r\ncompiled with zlib version 1.2.13; using 1.2.13\r\n```\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.8.4\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\nPython 3.9.19\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "1) Do you get the same error with the following?\r\n```python\r\nfrom matplotlib import ticker\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.rcParams['text.usetex'] = True\r\nplt.rcParams['font.family'] = 'serif'\r\nplt.rcParams['font.serif'] = 'Times'\r\n\r\nplt.figtext(.5, .5, \"$-1$\")\r\n\r\nfig.savefig('test.pdf')\r\n```\r\n2) In either case, insert `plt.set_loglevel(\"debug\")` immediately after setting the rcparams and re-run the failing code.  In the output you should see lines of the form `DEBUG:matplotlib.dviread:Dvi: /path/to/.matplotlib/tex.cache/bd/69/bd69c059493a3cf42a641ebfa844039e.dvi` (with a different filename).  (If the code in 1) also fails for you it may be easier to use it as there will be fewer files to try.)  For each such dvi file, try running from the terminal (not python) `python -m matplotlib.dviread /path/to/the/dvifile.dvi` and post the output.\n@anntzer Thanks so much for you reply.\r\n\r\n1. Also get the same error.\r\n\r\n2. original output\r\n```\r\n(all) PS D:\\user\\Desktop\\matplotlib-bug> & D:/scoop/apps/miniconda3/current/envs/all/python.exe d:/user/Desktop/matplotlib-bug/bug.py\r\nDEBUG:matplotlib.pyplot:Loaded backend tkagg version 8.6.\r\nDEBUG:matplotlib.texmanager:family: serif, font: Times, info: \\usepackage{mathptmx}\r\nDEBUG:matplotlib.texmanager:DejaVu Sans font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Bitstream Vera Sans font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: sans-serif, font: Computer Modern Sans Serif, info: \\usepackage{type1ec}\r\nDEBUG:matplotlib.texmanager:Apple Chancery font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Textile font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: cursive, font: Zapf Chancery, info: \\usepackage{chancery}\r\nDEBUG:matplotlib.texmanager:DejaVu Sans Mono font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Bitstream Vera Sans Mono font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: monospace, font: Computer Modern Typewriter, info: \\usepackage{type1ec}\r\nDEBUG:matplotlib.dviread:Dvi: C:\\Users\\cesar\\.matplotlib\\tex.cache\\28\\05\\280592a6cb87d0a6f07f2be6c239ff4c.dvi\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: header=l3backend-dvips.pro\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: papersize=5203.43999pt,5203.43999pt\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/adobe/times/ptmr7t.tfm\r\nDEBUG:matplotlib.dviread:lh=18, bc=0, ec=170, nw=21, nh=16, nd=16\r\nDEBUG:matplotlib.dviread:Dvi: D:/scoop/apps/miktex/current/texmfs/install/fonts/vf/adobe/times/ptmr7t.vf\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/adobe/times/ptmr8r.tfm\r\nDEBUG:matplotlib.dviread:lh=18, bc=1, ec=255, nw=34, nh=16, nd=16\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Gamma'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Delta'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Theta'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Lambda'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Xi'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Pi'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Sigma'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Upsilon'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Phi'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Psi'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `Omega'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `dotlessj'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `lslashslash'\r\nDEBUG:matplotlib.texmanager:family: serif, font: Times, info: \\usepackage{mathptmx}\r\nDEBUG:matplotlib.texmanager:DejaVu Sans font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Bitstream Vera Sans font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: sans-serif, font: Computer Modern Sans Serif, info: \\usepackage{type1ec}\r\nDEBUG:matplotlib.texmanager:Apple Chancery font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Textile font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: cursive, font: Zapf Chancery, info: \\usepackage{chancery}\r\nDEBUG:matplotlib.texmanager:DejaVu Sans Mono font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Bitstream Vera Sans Mono font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: monospace, font: Computer Modern Typewriter, info: \\usepackage{type1ec}\r\nDEBUG:matplotlib.dviread:Dvi: C:\\Users\\cesar\\.matplotlib\\tex.cache\\af\\1f\\af1f4e0a95d1cb3284108346197a266e.dvi\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: header=l3backend-dvips.pro\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: papersize=5203.43999pt,5203.43999pt\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/adobe/times/zptmcm7y.tfm\r\nDEBUG:matplotlib.dviread:lh=18, bc=0, ec=127, nw=45, nh=16, nd=16\r\nDEBUG:matplotlib.dviread:Dvi: D:/scoop/apps/miktex/current/texmfs/install/fonts/vf/adobe/times/zptmcm7y.vf\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/public/cm/cmsy10.tfm\r\nDEBUG:matplotlib.dviread:lh=18, bc=0, ec=127, nw=44, nh=15, nd=16\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/adobe/symbol/psyr.tfm\r\nDEBUG:matplotlib.dviread:lh=17, bc=32, ec=254, nw=52, nh=16, nd=16\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/adobe/times/zptmcm7t.tfm\r\nDEBUG:matplotlib.dviread:lh=18, bc=0, ec=170, nw=33, nh=16, nd=16\r\nDEBUG:matplotlib.dviread:Dvi: D:/scoop/apps/miktex/current/texmfs/install/fonts/vf/adobe/times/zptmcm7t.vf\r\nDEBUG:matplotlib.dviread:opening tfm file D:/scoop/apps/miktex/current/texmfs/install/fonts/tfm/public/cm/cmr10.tfm\r\nDEBUG:matplotlib.dviread:lh=18, bc=0, ec=127, nw=36, nh=16, nd=10\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `dotlessj'\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: Warning: missing glyph `lslashslash'\r\nDEBUG:matplotlib.texmanager:family: serif, font: Times, info: \\usepackage{mathptmx}\r\nDEBUG:matplotlib.texmanager:DejaVu Sans font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Bitstream Vera Sans font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: sans-serif, font: Computer Modern Sans Serif, info: \\usepackage{type1ec}\r\nDEBUG:matplotlib.texmanager:Apple Chancery font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Textile font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: cursive, font: Zapf Chancery, info: \\usepackage{chancery}\r\nDEBUG:matplotlib.texmanager:DejaVu Sans Mono font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:Bitstream Vera Sans Mono font is not compatible with usetex.\r\nDEBUG:matplotlib.texmanager:family: monospace, font: Computer Modern Typewriter, info: \\usepackage{type1ec}\r\nDEBUG:matplotlib.dviread:Dvi: C:\\Users\\cesar\\.matplotlib\\tex.cache\\af\\1f\\af1f4e0a95d1cb3284108346197a266e.dvi\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: header=l3backend-dvips.pro\r\nDEBUG:matplotlib.dviread:Dvi._xxx: encountered special: papersize=5203.43999pt,5203.43999pt\r\nDEBUG:matplotlib.dviread:Dvi: D:/scoop/apps/miktex/current/texmfs/install/fonts/vf/adobe/times/zptmcm7y.vf\r\nTraceback (most recent call last):\r\n  File \"d:\\user\\Desktop\\matplotlib-bug\\bug.py\", line 10, in <module>\r\n    plt.savefig('test.pdf')\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\pyplot.py\", line 1134, in savefig\r\n    res = fig.savefig(*args, **kwargs)  # type: ignore[func-returns-value]\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\figure.py\", line 3390, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2193, in print_figure\r\n    result = print_method(\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2043, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backends\\backend_pdf.py\", line 2807, in print_pdf\r\n    self.figure.draw(renderer)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\figure.py\", line 3154, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\text.py\", line 793, in draw\r\n    textrenderer.draw_tex(gc, x, y, clean_line,\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backends\\backend_pdf.py\", line 2267, in draw_tex\r\n    pdfname = self.file.dviFontName(dvifont)\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\backends\\backend_pdf.py\", line 938, in dviFontName\r\n    psfont = tex_font_map[dvifont.texname]\r\n  File \"D:\\scoop\\apps\\miniconda3\\current\\envs\\all\\lib\\site-packages\\matplotlib\\dviread.py\", line 905, in __getitem__\r\n    raise LookupError(\r\nLookupError: An associated PostScript font (required by Matplotlib) could not be found for TeX font 'zptmcm7y' in 'D:/scoop/apps/miktex/current/texmfs/data/fonts/map/pdftex/pdftex.map'; this problem can often be solved by installing a suitable PostScript font package in your TeX package manager\r\n```\r\nmatplotlib.dviread output:\r\n```\r\n(all) PS D:\\user\\Desktop\\matplotlib-bug> python -m matplotlib.dviread C:\\Users\\cesar\\.matplotlib\\tex.cache\\28\\05\\280592a6cb87d0a6f07f2be6c239ff4c.dvi\r\n=== new page === (w: 509863, h: 444328, d: 141880)\r\nfont: 'ptmr8r'  scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n983040  1441792 108     l       182183\r\n1165223 1441792 112     p       327680\r\n(all) PS D:\\user\\Desktop\\matplotlib-bug> python -m matplotlib.dviread C:\\Users\\cesar\\.matplotlib\\tex.cache\\af\\1f\\af1f4e0a95d1cb3284108346197a266e.dvi\r\n=== new page === (w: 836888, h: 444328, d: 54392)\r\nfont: 'zptmcm7y'        scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n983040  1441792 0       .       509208\r\nfont: 'ptmr8r'  scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n1492248 1441792 49      1       327680\r\n```\nUpdates: I created a pure Windows 11 virtual machine. And install MiKTeX and Miniconda 3 from scratch. The bug can still be reproduced.\r\n\r\nThen, I tried TexLive, and it works. So the bug is that MiKTeX does not work well with Matplotlib?\nPossibly, though we should still try to fix that! I suspect this may be due to misconfiguration on your side (so perhaps the fix would be a better error message), but will need to investigate more (likely not in the very short term).\n> I suspect this may be due to misconfiguration on your side.\r\n\r\nFor this, I created a virtual machine with VMware (to control variables, I'm even using the English Windows version instead of the locale one I'm on). Install MiKTex and Python with its official installer.\r\n\r\nVMware reproduce steps:\r\n1. create Window 11 vm by its iso: https://software.download.prss.microsoft.com/dbazure/Win11_23H2_English_x64v2.iso\r\n2. install Python: https://www.python.org/downloads/release/python-3119/\r\n3. install MiKTeX: https://miktex.org/download\r\n4. check miktex updates and install updates\r\n5. pip install matplotlib\r\n6. python bug.py\r\n```python\r\nfrom matplotlib import ticker\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.rcParams['text.usetex'] = True\r\nplt.rcParams['font.family'] = 'serif'\r\nplt.rcParams['font.serif'] = 'Times'\r\n# plt.set_loglevel(\"debug\")\r\nplt.figtext(.5, .5, \"$-1$\")\r\n\r\nplt.savefig('test.pdf')\r\n```\r\n\r\nI compare the dvi file generated by texlive and miktex. Here is the result:\r\nMiKTeX: (another thing to be noted is I can compile to pdf successfully by MiKTeX.)\r\n\r\n```\r\n=== new page === (w: 836888, h: 444328, d: 54392)\r\nfont: 'zptmcm7y'        scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n983040  1441792 0       .       509208\r\nfont: 'ptmr8r'  scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n1492248 1441792 49      1       327680\r\n```\r\nTeXLive:\r\n```\r\n=== new page === (w: 836888, h: 444328, d: 0)\r\nfont: 'cmsy10'  scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n983040  1441792 0       .       509726\r\nfont: 'ptmr8r'  scale: 0.625\r\nx       y       glyph   chr     w       (glyphs)\r\n1492248 1441792 49      1       327680\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/35998162/9d910fd8-525e-4ad2-bf36-32e274854b07)\r\n\nThanks.  I have repro'd the issue (you can also install miktex on mac/linux) and the fix is not obvious :/\nOK, I *think* I figured this out.  The short writeup is that zptmcm7y is a so-called Virtual Font (vf), which is basically a kind of dvi file where each glyph is represented by a dvi page where glyph(s) from other \"real\" font(s) are drawn.  zptmcm7y.vf uses some glyphs from obscure \"real\" fonts (in this case, rsfs10.tfm) to represent some obscure glyphs, and these other fonts don't get installed by default.  This is not needed by TeX & friends, likely because they only load these other glyphs on demand.  On the contrary, Matplotlib's dvi parser (which is reused as a vf parser) tries to load everything immediately.  This ultimately leads to trying to load rsfs10.tfm, which is not present, causes a FileNotFoundError, which bubbles out and makes Matplotlib believe wrongly that zptmcm7y.vf is absent.  Matplotlib then interprets this as meaning that zptmcm7y is a real font itself, but the pdf renderer then fails to load it (as it indeed doesn't exist), hence the crash.\r\n\r\nThe fix seems likely to involve turning the Vf parser into something that lazy-loads the glyphs on demand (we can't really do that for the Dvi parser itself I think), which is a bit annoying work but should probably(?) not involve big technical difficulties...\nActually, looking at it again it wasn't that bad, the following patch fixes the issue, I believe (can you confirm?):\r\n```patch\r\ndiff --git i/lib/matplotlib/dviread.py w/lib/matplotlib/dviread.py\r\nindex 82f43b5629..7d61367fd6 100644\r\n--- i/lib/matplotlib/dviread.py\r\n+++ w/lib/matplotlib/dviread.py\r\n@@ -230,6 +230,7 @@ class Dvi:\r\n         self.dpi = dpi\r\n         self.fonts = {}\r\n         self.state = _dvistate.pre\r\n+        self._missing_font = None\r\n \r\n     def __enter__(self):\r\n         \"\"\"Context manager enter method, does nothing.\"\"\"\r\n@@ -337,6 +338,8 @@ class Dvi:\r\n         while True:\r\n             byte = self.file.read(1)[0]\r\n             self._dtable[byte](self, byte)\r\n+            if self._missing_font:\r\n+                raise self._missing_font\r\n             name = self._dtable[byte].__name__\r\n             if name == \"_push\":\r\n                 down_stack.append(down_stack[-1])\r\n@@ -364,11 +367,15 @@ class Dvi:\r\n     @_dispatch(min=0, max=127, state=_dvistate.inpage)\r\n     def _set_char_immediate(self, char):\r\n         self._put_char_real(char)\r\n+        if isinstance(self.fonts[self.f], FileNotFoundError):\r\n+            return\r\n         self.h += self.fonts[self.f]._width_of(char)\r\n \r\n     @_dispatch(min=128, max=131, state=_dvistate.inpage, args=('olen1',))\r\n     def _set_char(self, char):\r\n         self._put_char_real(char)\r\n+        if isinstance(self.fonts[self.f], FileNotFoundError):\r\n+            return\r\n         self.h += self.fonts[self.f]._width_of(char)\r\n \r\n     @_dispatch(132, state=_dvistate.inpage, args=('s4', 's4'))\r\n@@ -382,7 +389,9 @@ class Dvi:\r\n \r\n     def _put_char_real(self, char):\r\n         font = self.fonts[self.f]\r\n-        if font._vf is None:\r\n+        if isinstance(font, FileNotFoundError):\r\n+            self._missing_font = font\r\n+        elif font._vf is None:\r\n             self.text.append(Text(self.h, self.v, font, char,\r\n                                   font._width_of(char)))\r\n         else:\r\n@@ -486,7 +495,16 @@ class Dvi:\r\n     def _fnt_def_real(self, k, c, s, d, a, l):\r\n         n = self.file.read(a + l)\r\n         fontname = n[-l:].decode('ascii')\r\n-        tfm = _tfmfile(fontname)\r\n+        try:\r\n+            tfm = _tfmfile(fontname)\r\n+        except FileNotFoundError as exc:\r\n+            # Explicitly allow defining missing fonts for Vf support; we only\r\n+            # register an error when trying to load a glyph from a missing font\r\n+            # and throw that error in Dvi._read.  For Vf, _finalize_packet\r\n+            # checks whether a missing glyph has been used, and in that case\r\n+            # skips the glyph definition.\r\n+            self.fonts[k] = exc\r\n+            return\r\n         if c != 0 and tfm.checksum != 0 and c != tfm.checksum:\r\n             raise ValueError('tfm checksum mismatch: %s' % n)\r\n         try:\r\n@@ -712,12 +730,14 @@ class Vf(Dvi):\r\n         self.h, self.v, self.w, self.x, self.y, self.z = 0, 0, 0, 0, 0, 0\r\n         self.stack, self.text, self.boxes = [], [], []\r\n         self.f = self._first_font\r\n+        self._missing_font = None\r\n         return self.file.tell() + pl\r\n \r\n     def _finalize_packet(self, packet_char, packet_width):\r\n-        self._chars[packet_char] = Page(\r\n-            text=self.text, boxes=self.boxes, width=packet_width,\r\n-            height=None, descent=None)\r\n+        if not self._missing_font:  # Otherwise we don't have full glyph definition.\r\n+            self._chars[packet_char] = Page(\r\n+                text=self.text, boxes=self.boxes, width=packet_width,\r\n+                height=None, descent=None)\r\n         self.state = _dvistate.outer\r\n \r\n     def _pre(self, i, x, cs, ds):\r\n```\r\n(Overloading Dvi.fonts to also record exceptions is a bit ugly, but the quickest solution I found.)\r\n\r\nAssuming this works, turning this into a PR is left as an exercise to the reader.\n> can you confirm?\r\n\r\nIt did work now! Thanks so much.", "created_at": "2024-06-04T01:39:29Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28332, "instance_id": "matplotlib__matplotlib-28332", "issue_numbers": ["28324"], "base_commit": "622173694055d94be28ddc4cd16098a6b40c4c7f", "patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 8705cbc0266b..76f0bb269264 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -304,10 +304,12 @@ def install_repl_displayhook() -> None:\n         # This code can be removed when Python 3.12, the latest version supported by\n         # IPython < 8.24, reaches end-of-life in late 2028.\n         from IPython.core.pylabtools import backend2gui\n-        # trigger IPython's eventloop integration, if available\n         ipython_gui_name = backend2gui.get(get_backend())\n-        if ipython_gui_name:\n-            ip.enable_gui(ipython_gui_name)\n+    else:\n+        _, ipython_gui_name = backend_registry.resolve_backend(get_backend())\n+    # trigger IPython's eventloop integration, if available\n+    if ipython_gui_name:\n+        ip.enable_gui(ipython_gui_name)\n \n \n def uninstall_repl_displayhook() -> None:\n", "test_patch": "", "problem_statement": "[Bug]: show(block=False) freezes\n### Bug summary\n\nHi, I know that this topic was addressed multiple times on stackoverflow.com, but nothing worked for me. I used to use this method for almost 5 years, but my recent new installation causes this issue. Any help is greatly appreciated.\n\n### Code for reproduction\n\n```Python\nimport matplotlib.pyplot as plt \r\nplt.plot([1,2,3,5])\r\nplt.show(block=False)\n```\n\n\n### Actual outcome\n\nA new empty and frozen window. Force closing this window interrupts my iPython console as well.\n\n### Expected outcome\n\nA new working window, I could keep working with the iPython console.\n\n### Additional information\n\nI installed pyqt6 for the backend.\n\n### Operating system\n\nWindows 10 and 11\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\nqtagg\n\n### Python version\n\n3.10.14\n\n### Jupyter version\n\niPython 8.24.0\n\n### Installation\n\npip\n", "hints_text": "This is indeed a bug that I can reproduce on Linux, macOS and Windows. It only appears if using both `matplotlib >= 3.9.0` and `ipython >= 8.24.0`. There have been some significant changes behind the scenes in how Matplotlib backends are handled by IPython, and I am not surprised that some use cases have been broken by it.\r\n\r\nI will investigate and write a fix, which may be in either Matplotlib, IPython, or both. The bug only appears using `block=False` and the default Matplotlib backend (which can vary according to OS and what backends are installed). The workaround in the short term is to specify the backend when starting IPython, either use\r\n```bash\r\nipython --matplotlib=qt\r\n```\r\nor just start `ipython` and then use\r\n```ipython\r\n%matplotlib qt\r\n```\n@ianthomas23, I appreciate your response and the workaround; it also works well for `tkagg`, which I always have had problem with, by `ipython --matplotlib=tk` or `%matplotlib tk`. Thanks a lot.", "created_at": "2024-06-03T13:43:45Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28329, "instance_id": "matplotlib__matplotlib-28329", "issue_numbers": ["28239"], "base_commit": "0ab556738e56f99b6c698a9020da1d573b1ae50f", "patch": "diff --git a/galleries/examples/mplot3d/intersecting_planes.py b/galleries/examples/mplot3d/intersecting_planes.py\nnew file mode 100644\nindex 000000000000..b8aa08fd7e18\n--- /dev/null\n+++ b/galleries/examples/mplot3d/intersecting_planes.py\n@@ -0,0 +1,89 @@\n+\"\"\"\n+===================\n+Intersecting planes\n+===================\n+\n+This examples demonstrates drawing intersecting planes in 3D. It is a generalization\n+of :doc:`/gallery/mplot3d/imshow3d`.\n+\n+Drawing intersecting planes in `.mplot3d` is complicated, because `.mplot3d` is not a\n+real 3D renderer, but only projects the Artists into 3D and draws them in the right\n+order. This does not work correctly if Artists overlap each other mutually. In this\n+example, we lift the problem of mutual overlap by segmenting the planes at their\n+intersections, making four parts out of each plane.\n+\n+This examples only works correctly for planes that cut each other in haves. This\n+limitation is intentional to keep the code more readable. Cutting at arbitrary\n+positions would of course be possible but makes the code even more complex.\n+Thus, this example is more a demonstration of the concept how to work around\n+limitations of the 3D visualization, it's not a refined solution for drawing\n+arbitrary intersecting planes, which you can copy-and-paste as is.\n+\"\"\"\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+\n+def plot_quadrants(ax, array, fixed_coord, cmap):\n+    \"\"\"For a given 3d *array* plot a plane with *fixed_coord*, using four quadrants.\"\"\"\n+    nx, ny, nz = array.shape\n+    index = {\n+        'x': (nx // 2, slice(None), slice(None)),\n+        'y': (slice(None), ny // 2, slice(None)),\n+        'z': (slice(None), slice(None), nz // 2),\n+    }[fixed_coord]\n+    plane_data = array[index]\n+\n+    n0, n1 = plane_data.shape\n+    quadrants = [\n+        plane_data[:n0 // 2, :n1 // 2],\n+        plane_data[:n0 // 2, n1 // 2:],\n+        plane_data[n0 // 2:, :n1 // 2],\n+        plane_data[n0 // 2:, n1 // 2:]\n+    ]\n+\n+    min_val = array.min()\n+    max_val = array.max()\n+\n+    cmap = plt.get_cmap(cmap)\n+\n+    for i, quadrant in enumerate(quadrants):\n+        facecolors = cmap((quadrant - min_val) / (max_val - min_val))\n+        if fixed_coord == 'x':\n+            Y, Z = np.mgrid[0:ny // 2, 0:nz // 2]\n+            X = nx // 2 * np.ones_like(Y)\n+            Y_offset = (i // 2) * ny // 2\n+            Z_offset = (i % 2) * nz // 2\n+            ax.plot_surface(X, Y + Y_offset, Z + Z_offset, rstride=1, cstride=1,\n+                            facecolors=facecolors, shade=False)\n+        elif fixed_coord == 'y':\n+            X, Z = np.mgrid[0:nx // 2, 0:nz // 2]\n+            Y = ny // 2 * np.ones_like(X)\n+            X_offset = (i // 2) * nx // 2\n+            Z_offset = (i % 2) * nz // 2\n+            ax.plot_surface(X + X_offset, Y, Z + Z_offset, rstride=1, cstride=1,\n+                            facecolors=facecolors, shade=False)\n+        elif fixed_coord == 'z':\n+            X, Y = np.mgrid[0:nx // 2, 0:ny // 2]\n+            Z = nz // 2 * np.ones_like(X)\n+            X_offset = (i // 2) * nx // 2\n+            Y_offset = (i % 2) * ny // 2\n+            ax.plot_surface(X + X_offset, Y + Y_offset, Z, rstride=1, cstride=1,\n+                            facecolors=facecolors, shade=False)\n+\n+\n+def figure_3D_array_slices(array, cmap=None):\n+    \"\"\"Plot a 3d array using three intersecting centered planes.\"\"\"\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.set_box_aspect(array.shape)\n+    plot_quadrants(ax, array, 'x', cmap=cmap)\n+    plot_quadrants(ax, array, 'y', cmap=cmap)\n+    plot_quadrants(ax, array, 'z', cmap=cmap)\n+    return fig, ax\n+\n+\n+nx, ny, nz = 70, 100, 50\n+r_square = (np.mgrid[-1:1:1j * nx, -1:1:1j * ny, -1:1:1j * nz] ** 2).sum(0)\n+\n+figure_3D_array_slices(r_square, cmap='viridis_r')\n+plt.show()\n", "test_patch": "", "problem_statement": "[Doc]: Gallery example showing 3D slice planes\n@timhoffm suggested in https://github.com/matplotlib/matplotlib/issues/3919#issuecomment-2116282472 that we make a gallery example for plotting X Y Z planar slices through a volume.\r\n\r\nHis result and its code:\r\n\r\n![331397449-09310bdd-35b6-4587-b2bf-f0046d2f0b16](https://github.com/matplotlib/matplotlib/assets/14363975/f7dc6efc-aa18-4d0c-a40a-91254fbfd3f6)\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\ndef plot_quadrants(ax, array, fixed_coord, cmap):\r\n    \"\"\"For a given 3d *array* plot a plane with *fixed_coord*, using four individual quadrants.\"\"\"\r\n    nx, ny, nz = array.shape\r\n    index = {\r\n        'x': (nx//2, slice(None), slice(None)),\r\n        'y': (slice(None), ny//2, slice(None)),\r\n        'z': (slice(None), slice(None), nz//2),\r\n    }[fixed_coord]\r\n    plane_data = array[index]\r\n\r\n    n0, n1 = plane_data.shape\r\n    quadrants = [\r\n        plane_data[:n0//2, :n1//2],\r\n        plane_data[:n0//2, n1//2:],\r\n        plane_data[n0//2:, :n1//2],\r\n        plane_data[n0//2:, n1//2:]\r\n    ]\r\n\r\n    min_val = array.min()\r\n    max_val = array.max()\r\n    \r\n    cmap = plt.get_cmap(cmap)\r\n    \r\n    for i, quadrant in enumerate(quadrants):\r\n        facecolors = cmap((quadrant - min_val) / (max_val-min_val))\r\n        if fixed_coord == 'x':\r\n            Y, Z = np.mgrid[0:ny//2, 0:nz//2]\r\n            X = nx//2 * np.ones_like(Y)\r\n            Y_offset = (i // 2) * ny//2\r\n            Z_offset = (i % 2) * nz//2\r\n            ax.plot_surface(X, Y + Y_offset, Z + Z_offset, rstride=1, cstride=1, facecolors=facecolors, shade=False)\r\n        elif fixed_coord == 'y':\r\n            X, Z = np.mgrid[0:nx//2, 0:nz//2]\r\n            Y = ny//2 * np.ones_like(X)\r\n            X_offset = (i // 2) * nx//2\r\n            Z_offset = (i % 2) * nz//2\r\n            ax.plot_surface(X + X_offset, Y, Z + Z_offset, rstride=1, cstride=1, facecolors=facecolors, shade=False)\r\n        elif fixed_coord == 'z':\r\n            X, Y = np.mgrid[0:nx//2, 0:ny//2]\r\n            Z = nz//2 * np.ones_like(X)\r\n            X_offset = (i // 2) * nx//2\r\n            Y_offset = (i % 2) * ny//2\r\n            ax.plot_surface(X + X_offset, Y + Y_offset, Z, rstride=1, cstride=1, facecolors=facecolors, shade=False)\r\n\r\n\r\ndef figure_3D_array_slices(array, cmap=None):\r\n    \"\"\"Plot a 3d array using three intersecting centered planes.\"\"\"\r\n    fig = plt.figure()\r\n    ax = fig.add_subplot(projection='3d')\r\n    ax.set_box_aspect(array.shape)\r\n    plot_quadrants(ax, array, 'x', cmap=cmap)\r\n    plot_quadrants(ax, array, 'y', cmap=cmap)\r\n    plot_quadrants(ax, array, 'z', cmap=cmap)\r\n    return fig, ax\r\n\r\n\r\nnx, ny, nz = 70, 100, 50\r\nr_square = (np.mgrid[-1:1:1j*nx, -1:1:1j*ny, -1:1:1j*nz]**2).sum(0)\r\n\r\nfigure_3D_array_slices(r_square, cmap='viridis_r')\r\nplt.show()\r\n```\r\n\n", "hints_text": "Um can it be split up into three subplots, one for each axes? \n\nJust thinking through that while pretty, it might be a bit hard to follow from a \"what do I do to make this slice for one axes\"? \nNo. The point here is to illustrate multiple intersecting planes in one subplot, which requires the quadrant subdivision for correct drawing order.\r\n\r\nThis is somewhat inherently complex (with current API (?)) due to the involved indexing. Note also that indexing will get even worse if you don\u2019t split in the center (which I thus have refained from to generalize to). I rather see this as an illustration/proof of concept how you can work around limitations of the 3d rendering.\r\n\r\nSeparate planes (well, one would be enough then) is a simpler example that should be done separately. Also note that drawing a single color-coded plane is currently already quite a hassle because you have to use `plot_surface`. Some `quadmesh` like function to draw axes-aligned planes from 2D arrays would be reasonable. But that\u2019s even a bigger topic.\n> This is somewhat inherently complex (with current API (?)) due to the involved indexing.\n\nMy concern more is that in this case the complexity/way that it's written may make it hard to unravel and tweak for someone who wanted to make something similar but not identical.\n\nI wonder if this would work better as a tutorial where these stages were also included: \n* Separate planes (well, one would be enough then) is a simpler example that should be done separately. \n* Also note that drawing a single color-coded plane is currently already quite a hassle because you have to use plot_surface\n\nAnd build up to the figure above. \n> My concern more is that in this case the complexity/way that it's written may make it hard to unravel and tweak for someone who wanted to make something similar but not identical.\r\n\r\nIt is difficult, but better than nothing at all. We don't have the capacity to pamper users for every edge case.\r\n\r\nI'm -0.5 on a tutorial. First, I'd like to have both the separate plane and the intersecting plane show up in the [gallery overview](https://matplotlib.org/stable/gallery/index.html#d-plotting). Second, going into an extensive tutorial for working around limitations and insufficiencies of our API feels the wrong way. It would be better to invest that time into improving the API, i.e. the quadmesh-like parallel-axes plane.\r\n\r\nBut as always, if you are convinced that a tutorial is worth the effort, you are free to create one.\n> We don't have the capacity to pamper users for every edge case.\n\nMaybe the solution is more code comments and not wrapping the figure code in figure_3D_array_slices, but my concern is that the example as written might be hard to modify and cross apply to a slightly different use case, which I think is the core purpose of examples and not an edge case. And a very consistent complaint about the examples is that they tend to do too much in a way where it's hard to see what code is responsible for which aspect of the visualization. \n\n\n> Second, going into an extensive tutorial for working around limitations and insufficiencies of our API feels the wrong way. It would be better to invest that time into improving the API, i.e. the quadmesh-like parallel-axes plane.\n\nI think of it more as a tutorial showing how to use the existing API to build something that the API doesn't provide out of the box, but yeah if a new function makes more sense than I'm not  opposed to that.", "created_at": "2024-06-02T21:35:56Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28306, "instance_id": "matplotlib__matplotlib-28306", "issue_numbers": ["4568"], "base_commit": "81756c366400a4c7d2c3934b5ff1a359206f241a", "patch": "diff --git a/lib/matplotlib/projections/polar.py b/lib/matplotlib/projections/polar.py\nindex 8d3e03f64e7c..025155351f88 100644\n--- a/lib/matplotlib/projections/polar.py\n+++ b/lib/matplotlib/projections/polar.py\n@@ -1447,12 +1447,25 @@ def format_sig(value, delta, opt, fmt):\n                     cbook._g_sig_digits(value, delta))\n             return f\"{value:-{opt}.{prec}{fmt}}\"\n \n-        return ('\\N{GREEK SMALL LETTER THETA}={}\\N{GREEK SMALL LETTER PI} '\n-                '({}\\N{DEGREE SIGN}), r={}').format(\n+        # In case fmt_xdata was not specified, resort to default\n+\n+        if self.fmt_ydata is None:\n+            r_label = format_sig(r, delta_r, \"#\", \"g\")\n+        else:\n+            r_label = self.format_ydata(r)\n+\n+        if self.fmt_xdata is None:\n+            return ('\\N{GREEK SMALL LETTER THETA}={}\\N{GREEK SMALL LETTER PI} '\n+                    '({}\\N{DEGREE SIGN}), r={}').format(\n                     format_sig(theta_halfturns, delta_t_halfturns, \"\", \"f\"),\n                     format_sig(theta_degrees, delta_t_degrees, \"\", \"f\"),\n-                    format_sig(r, delta_r, \"#\", \"g\"),\n+                    r_label\n                 )\n+        else:\n+            return '\\N{GREEK SMALL LETTER THETA}={}, r={}'.format(\n+                        self.format_xdata(theta),\n+                        r_label\n+                        )\n \n     def get_data_ratio(self):\n         \"\"\"\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_polar.py b/lib/matplotlib/tests/test_polar.py\nindex 6b3c08d2eb3f..0bb41a50b2d4 100644\n--- a/lib/matplotlib/tests/test_polar.py\n+++ b/lib/matplotlib/tests/test_polar.py\n@@ -436,6 +436,33 @@ def test_cursor_precision():\n     assert ax.format_coord(2, 1) == \"\u03b8=0.637\u03c0 (114.6\u00b0), r=1.000\"\n \n \n+def test_custom_fmt_data():\n+    ax = plt.subplot(projection=\"polar\")\n+    def millions(x):\n+        return '$%1.1fM' % (x*1e-6)\n+\n+    # Test only x formatter\n+    ax.fmt_xdata = None\n+    ax.fmt_ydata = millions\n+    assert ax.format_coord(12, 2e7) == \"\u03b8=3.8197186342\u03c0 (687.54935416\u00b0), r=$20.0M\"\n+    assert ax.format_coord(1234, 2e6) == \"\u03b8=392.794399551\u03c0 (70702.9919191\u00b0), r=$2.0M\"\n+    assert ax.format_coord(3, 100) == \"\u03b8=0.95493\u03c0 (171.887\u00b0), r=$0.0M\"\n+\n+    # Test only y formatter\n+    ax.fmt_xdata = millions\n+    ax.fmt_ydata = None\n+    assert ax.format_coord(2e5, 1) == \"\u03b8=$0.2M, r=1.000\"\n+    assert ax.format_coord(1, .1) == \"\u03b8=$0.0M, r=0.100\"\n+    assert ax.format_coord(1e6, 0.005) == \"\u03b8=$1.0M, r=0.005\"\n+\n+    # Test both x and y formatters\n+    ax.fmt_xdata = millions\n+    ax.fmt_ydata = millions\n+    assert ax.format_coord(2e6, 2e4*3e5) == \"\u03b8=$2.0M, r=$6000.0M\"\n+    assert ax.format_coord(1e18, 12891328123) == \"\u03b8=$1000000000000.0M, r=$12891.3M\"\n+    assert ax.format_coord(63**7, 1081968*1024) == \"\u03b8=$3938980.6M, r=$1107.9M\"\n+\n+\n @image_comparison(['polar_log.png'], style='default')\n def test_polar_log():\n     fig = plt.figure()\n", "problem_statement": "Add `fmt_r` and `fmt_theta` methods to polar axes\nThe example here works in Cartesian coordinates:\n\nhttp://matplotlib.org/examples/pylab_examples/coords_report.html\n\nbut if you change \n\n`subplots()`\n\nto\n\n`subplots(subplot_kw={'polar':True})`\n\nThen the `millions()` function is never even called.\n\n( no response on mailing list: http://matplotlib.1069221.n5.nabble.com/fmt-xdata-fmt-ydata-on-polar-plot-td45838.html )\n\n", "hints_text": "Because the polar plot does not use those functions.  The message shown in the the gui are generated by calls to `axes.format_coords`, which is the case the the basic Cartesian coordinates the function is: https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/axes/_base.py#L3056 which looks at `self.fmt_xdata` and `self.fmt_ydata` (via `format_xdata` and `format_ydata`).  In contrast the same function on the `Axes` sub-class for polar axes (https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/projections/polar.py#L589) does not.  \n\nIf you want to change the message for polar coordinates, directly assign to `ax.format_coords` as shown in http://matplotlib.org/examples/api/image_zcoord.html.\n\nIt would be sensible to have a `fmt_r` and `fmt_theta` functions attached to polar axes.\n\nThanks for the solution!\n\nAs far as naming convention goes (if you do implement the new functions), I don't know if `fmt_r` and `fmt_theta` would make things more or less consistent... there are other cases in polar where we still use functions with 'x' and 'y' in the name... e.g. `set_yticklabels`.\n\nThe problem I have always had with PolarAxes is remembering whether x maps to r or theta. We need to use the x and y notations for subclassing purposes (that way the core matplotlib code can continue to work properly by treating PolarAxes like any other 2D axes object). Aliases to x and y for r and theta would be very useful to end-users in general, like we have now for some things in PolarAxes.\n\nHowever, I don't know how valuable it would be for this particular case. The way we advertise these formatting functions, we expect users to either monkey patch the particular method they want to modify, or to subclass and override the relevant method. If we had aliases, they won't get updated to the new methods, nor would they get used anyway by the internal methods.\n\nNo, I think the correct solution here is to make PolarAxes have a `fmt_xdata` and `fmt_ydata` method like most other classes do. I think the code we see in `format_coords` is intended to be compatibility code to help transition Axes objects that had not yet been updated to provide such methods.\n\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nhi there, @atpage @tacaswell is this issue still open?\nHi @antara-gandhi , unless the issue is closed (as seen on the GitHub interface) you are free to propose a PR or ask for guidance \ud83d\ude04 In this case, it would be nice to check if the issue is still present in recent versions and then propose a solution. Cheers!\nIs the goal to change the example code to use fmt_r and fmt_theta and be displayed as a polar graph or a way to standardize using fmt_r and fmt_theta to change coordinate plots to polar plots?\r\n\r\nMy second question is more if there is code I can modify, or do I need to come up with a way to standardize this?\r\n\nI changed and added to the example code is this correct?\r\n\r\n`def fmt_r(r):\r\n    \r\n    return f\"R={r:.2f}\"\r\n\r\ndef fmt_theta(theta, pos=None):\r\n    \r\n    return f\"Theta={np.degrees(theta):.2f}\u00b0\"\r\n\r\ndef millions(x, pos=None):\r\n    return '$%1.1fM' % (x*1e-6)\r\n\r\nx = np.random.rand(20)\r\ny = 1e7 * np.random.rand(20)\r\n\r\nfig, ax = plt.subplots(subplot_kw={'polar': True})\r\n\r\nax.set_yticklabels([fmt_r(label) for label in ax.get_yticks()])\r\n\r\nax.set_xticklabels([fmt_theta(label) for label in ax.get_xticks()])\r\n\r\nax.yaxis.set_major_formatter(plt.FuncFormatter(millions))\r\n\r\nax.plot(x, y, 'o')\r\n\r\nplt.show()`", "created_at": "2024-05-26T19:37:02Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28303, "instance_id": "matplotlib__matplotlib-28303", "issue_numbers": ["28221"], "base_commit": "b02aa82f3d3ba7f55e8a3fd431bc8763e3ae5c5c", "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex af61e4671ff4..156ea2ff6497 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -257,10 +257,6 @@ class Colorbar:\n         *location* is None, the ticks will be at the bottom for a horizontal\n         colorbar and at the right for a vertical.\n \n-    drawedges : bool\n-        Whether to draw lines at color boundaries.\n-\n-\n     %(_colormap_kw_doc)s\n \n     location : None or {'left', 'right', 'top', 'bottom'}\n", "test_patch": "", "problem_statement": "[Doc]: drawedges attribute described twice in matplotlib.colorbar documentation\n### Documentation Link\n\nhttps://matplotlib.org/stable/api/colorbar_api.html#matplotlib.colorbar.Colorbar\n\n### Problem\n\n`drawedges` attributed:\r\n```\r\ndrawedges : bool\r\n    Whether to draw lines at color boundaries.\r\n```\r\n\r\nis specified twice.\n\n### Suggested improvement\n\nRemove one definition from function docstring.\n", "hints_text": "### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nhttps://github.com/matplotlib/matplotlib/blob/955432c552d6da7250a76c4f623b33b5d4e6c215/lib/matplotlib/colorbar.py#L195-L276\r\n\r\nIt looks like this is a combination of explicitly written out docstrings and `@_docstring.interpd` interacting badly.\r\n\r\nThe work here is:\r\n\r\n1. verify that is actually the case\r\n2. (minimal) remove the explicit entry and rely on the interpolation to provide it\r\n3. (medium) add a (parameterized) test that uses numpydoc to parse the docstring and identify duplicate entries\r\n4. (maximal) investigate if we can automatically check in `@_docstring.interpd`\r\n5. (most maximal) push the check for duplicate entiries into numpydoc so they warn and then make sure our docs fail on the warning\nDear tacaswell, \r\n\r\nI am not familar with the matplotlib documentation and haven't contributed yet. I think the check wether a parameter is present or not is not dificult. Since the substituions are in a dictionary they can be checked for duplicates.  I include a simple example below using `re` to extract the paramter from the docstring. \r\n\r\nIs the approach correct or have I overlooked something?  \r\n\r\n```python\r\nclass Colorbar:\r\n    r\"\"\"\r\n    Draw a colorbar in an existing Axes.\r\n\r\n    Typically, colorbars are created using `.Figure.colorbar` or\r\n    `.pyplot.colorbar` and associated with `.ScalarMappable`\\s (such as an\r\n    `.AxesImage` generated via `~.axes.Axes.imshow`).\r\n\r\n    In order to draw a colorbar not associated with other elements in the\r\n    figure, e.g. when showing a colormap by itself, one can create an empty\r\n    `.ScalarMappable`, or directly pass *cmap* and *norm* instead of *mappable*\r\n    to `Colorbar`.\r\n\r\n    Useful public methods are :meth:`set_label` and :meth:`add_lines`.\r\n\r\n    Attributes\r\n    ----------\r\n    ax : `~matplotlib.axes.Axes`\r\n        The `~.axes.Axes` instance in which the colorbar is drawn.\r\n    lines : list\r\n        A list of `.LineCollection` (empty if no lines were drawn).\r\n    dividers : `.LineCollection`\r\n        A LineCollection (empty if *drawedges* is ``False``).\r\n\r\n    Parameters\r\n    ----------\r\n    ax : `~matplotlib.axes.Axes`\r\n        The `~.axes.Axes` instance in which the colorbar is drawn.\r\n\r\n    mappable : `.ScalarMappable`\r\n        The mappable whose colormap and norm will be used.\r\n\r\n        To show the under- and over- value colors, the mappable's norm should\r\n        be specified as ::\r\n\r\n            norm = colors.Normalize(clip=False)\r\n\r\n        To show the colors versus index instead of on a 0-1 scale, use::\r\n\r\n            norm=colors.NoNorm()\r\n\r\n    cmap : `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\r\n        The colormap to use.  This parameter is ignored, unless *mappable* is\r\n        None.\r\n\r\n    norm : `~matplotlib.colors.Normalize`\r\n        The normalization to use.  This parameter is ignored, unless *mappable*\r\n        is None.\r\n\r\n    alpha : float\r\n        The colorbar transparency between 0 (transparent) and 1 (opaque).\r\n\r\n    orientation : None or {'vertical', 'horizontal'}\r\n        If None, use the value determined by *location*. If both\r\n        *orientation* and *location* are None then defaults to 'vertical'.\r\n\r\n    ticklocation : {'auto', 'left', 'right', 'top', 'bottom'}\r\n        The location of the colorbar ticks. The *ticklocation* must match\r\n        *orientation*. For example, a horizontal colorbar can only have ticks\r\n        at the top or the bottom. If 'auto', the ticks will be the same as\r\n        *location*, so a colorbar to the left will have ticks to the left. If\r\n        *location* is None, the ticks will be at the bottom for a horizontal\r\n        colorbar and at the right for a vertical.\r\n\r\n    drawedges : bool\r\n        Whether to draw lines at color boundaries.\r\n\r\n\r\n    %(_colormap_kw_doc)s\r\n\r\n    location : None or {'left', 'right', 'top', 'bottom'}\r\n        Set the *orientation* and *ticklocation* of the colorbar using a\r\n        single argument. Colorbars on the left and right are vertical,\r\n        colorbars at the top and bottom are horizontal. The *ticklocation* is\r\n        the same as *location*, so if *location* is 'top', the ticks are on\r\n        the top. *orientation* and/or *ticklocation* can be provided as well\r\n        and overrides the value set by *location*, but there will be an error\r\n        for incompatible combinations.\r\n\r\n        .. versionadded:: 3.7\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        pass\r\n\r\n### Demo Code ###\r\n\r\nimport re\r\n\r\nsubstitutions = {\r\n    \"ax\": \"Some documentation for axis\",   # <-- duplicated parameter entry\r\n    \"some_new_argument\": \"A little more documentation\",  # <- new parameter entry\r\n}\r\n\r\ndocstring_parameter = re.findall(\r\n    pattern=r\"    (\\w+) : \",  # regex to match parameter according to docstring style\r\n    string=Colorbar.__doc__.split(\"Parameter\")[\r\n        1\r\n    ],  # only consider parameter section of docstring\r\n)\r\n\r\nassert all(\r\n    [substitution not in docstring_parameter for substitution in substitutions]\r\n), \"Something is off\"  # check if there are duplicats between docstring parameter and substitutions\r\n```\nIt seems better to me to use numpydoc rather than trying to do it with regex + splits.  For example if in the earlier section the sentence \"Parameters are set...\" appeared, the split would catch it.\r\n\r\nOn a bit more consideration I think (4) in my last post is a bad idea...we do not want to pay for this checking at every import.\nI had a look at `numpydoc` and thought about adding a check after the parsing process in `NumpyDocString` `__init__` method.\r\n\r\nhttps://github.com/numpy/numpydoc/blob/acad4ece8805328d8cf34279d2fe923205a1f79c/numpydoc/docscrape.py#L111-L569\r\n\r\nA possible check is shown here. Unfortunately I haven't figured out yet how to access the function/class name and location from within `NumpyDocString` to indicate where the duplicate is found. \r\n\r\n```python\r\nfrom collections import Counter\r\nimport warnings\r\n\r\nclass NumpyDocString(Mapping):\r\n    \"\"\"Parses a numpydoc string to an abstract representation\r\n\r\n    Instances define a mapping from section title to structured data.\r\n\r\n    \"\"\"\r\n\r\n    sections = {\r\n        \"Signature\": \"\",\r\n        \"Summary\": [\"\"],\r\n        \"Extended Summary\": [],\r\n        \"Parameters\": [],\r\n        \"Returns\": [],\r\n        \"Yields\": [],\r\n        \"Receives\": [],\r\n        \"Raises\": [],\r\n        \"Warns\": [],\r\n        \"Other Parameters\": [],\r\n        \"Attributes\": [],\r\n        \"Methods\": [],\r\n        \"See Also\": [],\r\n        \"Notes\": [],\r\n        \"Warnings\": [],\r\n        \"References\": \"\",\r\n        \"Examples\": \"\",\r\n        \"index\": {},\r\n    }\r\n\r\n    def __init__(self, docstring, config=None):\r\n        orig_docstring = docstring\r\n        docstring = textwrap.dedent(docstring).split(\"\\n\")\r\n\r\n        self._doc = Reader(docstring)\r\n        self._parsed_data = copy.deepcopy(self.sections)\r\n\r\n        try:\r\n            self._parse()\r\n        except ParseError as e:\r\n            e.docstring = orig_docstring\r\n            raise\r\n        \r\n        #### Added Code ####\r\n        for section, content in self._parsed_data.items():\r\n            parameters = [item.name for item in content if isinstance(item, Parameter)]\r\n            param_counts = Counter(parameters)\r\n            for parameter, count in param_counts.items():\r\n                if count > 1:\r\n                    warnings.warn(f\"Parameter '{parameter}' specified multiple times in section '{section}'\")\r\n```\r\n\r\nSample Output:\r\n\r\n```bash\r\nnumpydoc/numpydoc/docscrape.py:162: UserWarning: Parameter 'orientation' specified multiple times in section 'Parameters'\r\nnumpydoc/numpydoc/docscrape.py:162: UserWarning: Parameter 'drawedges' specified multiple times in section 'Parameters'\r\nnumpydoc/numpydoc/docscrape.py:162: UserWarning: Parameter 'location' specified multiple times in section 'Parameters'\r\n```\r\n\r\nWhat is your opinion on this approach?\nhi @tacswell ,In my pull request i failed some tests again, can you help me with what went wrong, last time it failed because i had an empty folder named matplotlib and it considered it as sub module or something", "created_at": "2024-05-26T11:17:21Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28289, "instance_id": "matplotlib__matplotlib-28289", "issue_numbers": ["28234", "0000"], "base_commit": "a833d99e46f5771aee7c25066276a70e6e7b9ef3", "patch": "diff --git a/doc/api/index.rst b/doc/api/index.rst\nindex e55a0ed3c5b2..70c3b5343e7a 100644\n--- a/doc/api/index.rst\n+++ b/doc/api/index.rst\n@@ -126,6 +126,7 @@ Alphabetical list of modules:\n    sphinxext_mathmpl_api.rst\n    sphinxext_plot_directive_api.rst\n    sphinxext_figmpl_directive_api.rst\n+   sphinxext_roles.rst\n    spines_api.rst\n    style_api.rst\n    table_api.rst\ndiff --git a/doc/api/next_api_changes/development/28289-ES.rst b/doc/api/next_api_changes/development/28289-ES.rst\nnew file mode 100644\nindex 000000000000..f891c63a64bf\n--- /dev/null\n+++ b/doc/api/next_api_changes/development/28289-ES.rst\n@@ -0,0 +1,7 @@\n+Documentation-specific custom Sphinx roles are now semi-public\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+For third-party packages that derive types from Matplotlib, our use of custom roles may\n+prevent Sphinx from building their docs. These custom Sphinx roles are now public solely\n+for the purposes of use within projects that derive from Matplotlib types. See\n+:mod:`matplotlib.sphinxext.roles` for details.\ndiff --git a/doc/api/sphinxext_roles.rst b/doc/api/sphinxext_roles.rst\nnew file mode 100644\nindex 000000000000..99959ff05d14\n--- /dev/null\n+++ b/doc/api/sphinxext_roles.rst\n@@ -0,0 +1,7 @@\n+==============================\n+``matplotlib.sphinxext.roles``\n+==============================\n+\n+.. automodule:: matplotlib.sphinxext.roles\n+   :no-undoc-members:\n+   :private-members: _rcparam_role, _mpltype_role\ndiff --git a/doc/conf.py b/doc/conf.py\nindex c9a475aecf9c..ff42246526b6 100644\n--- a/doc/conf.py\n+++ b/doc/conf.py\n@@ -116,9 +116,9 @@ def _parse_skip_subdirs_file():\n     'sphinx_gallery.gen_gallery',\n     'matplotlib.sphinxext.mathmpl',\n     'matplotlib.sphinxext.plot_directive',\n+    'matplotlib.sphinxext.roles',\n     'matplotlib.sphinxext.figmpl_directive',\n     'sphinxcontrib.inkscapeconverter',\n-    'sphinxext.custom_roles',\n     'sphinxext.github',\n     'sphinxext.math_symbol_table',\n     'sphinxext.missing_references',\ndiff --git a/doc/sphinxext/custom_roles.py b/doc/sphinxext/custom_roles.py\ndeleted file mode 100644\nindex d76c92709865..000000000000\n--- a/doc/sphinxext/custom_roles.py\n+++ /dev/null\n@@ -1,89 +0,0 @@\n-from urllib.parse import urlsplit, urlunsplit\n-\n-from docutils import nodes\n-\n-from matplotlib import rcParamsDefault\n-\n-\n-class QueryReference(nodes.Inline, nodes.TextElement):\n-    \"\"\"\n-    Wraps a reference or pending reference to add a query string.\n-\n-    The query string is generated from the attributes added to this node.\n-\n-    Also equivalent to a `~docutils.nodes.literal` node.\n-    \"\"\"\n-\n-    def to_query_string(self):\n-        \"\"\"Generate query string from node attributes.\"\"\"\n-        return '&'.join(f'{name}={value}' for name, value in self.attlist())\n-\n-\n-def visit_query_reference_node(self, node):\n-    \"\"\"\n-    Resolve *node* into query strings on its ``reference`` children.\n-\n-    Then act as if this is a `~docutils.nodes.literal`.\n-    \"\"\"\n-    query = node.to_query_string()\n-    for refnode in node.findall(nodes.reference):\n-        uri = urlsplit(refnode['refuri'])._replace(query=query)\n-        refnode['refuri'] = urlunsplit(uri)\n-\n-    self.visit_literal(node)\n-\n-\n-def depart_query_reference_node(self, node):\n-    \"\"\"\n-    Act as if this is a `~docutils.nodes.literal`.\n-    \"\"\"\n-    self.depart_literal(node)\n-\n-\n-def rcparam_role(name, rawtext, text, lineno, inliner, options={}, content=[]):\n-    # Generate a pending cross-reference so that Sphinx will ensure this link\n-    # isn't broken at some point in the future.\n-    title = f'rcParams[\"{text}\"]'\n-    target = 'matplotlibrc-sample'\n-    ref_nodes, messages = inliner.interpreted(title, f'{title} <{target}>',\n-                                              'ref', lineno)\n-\n-    qr = QueryReference(rawtext, highlight=text)\n-    qr += ref_nodes\n-    node_list = [qr]\n-\n-    # The default backend would be printed as \"agg\", but that's not correct (as\n-    # the default is actually determined by fallback).\n-    if text in rcParamsDefault and text != \"backend\":\n-        node_list.extend([\n-            nodes.Text(' (default: '),\n-            nodes.literal('', repr(rcParamsDefault[text])),\n-            nodes.Text(')'),\n-            ])\n-\n-    return node_list, messages\n-\n-\n-def mpltype_role(name, rawtext, text, lineno, inliner, options={}, content=[]):\n-    mpltype = text\n-    type_to_link_target = {\n-        'color': 'colors_def',\n-    }\n-    if mpltype not in type_to_link_target:\n-        raise ValueError(f\"Unknown mpltype: {mpltype!r}\")\n-\n-    node_list, messages = inliner.interpreted(\n-        mpltype, f'{mpltype} <{type_to_link_target[mpltype]}>', 'ref', lineno)\n-    return node_list, messages\n-\n-\n-def setup(app):\n-    app.add_role(\"rc\", rcparam_role)\n-    app.add_role(\"mpltype\", mpltype_role)\n-    app.add_node(\n-        QueryReference,\n-        html=(visit_query_reference_node, depart_query_reference_node),\n-        latex=(visit_query_reference_node, depart_query_reference_node),\n-        text=(visit_query_reference_node, depart_query_reference_node),\n-    )\n-    return {\"parallel_read_safe\": True, \"parallel_write_safe\": True}\ndiff --git a/lib/matplotlib/sphinxext/meson.build b/lib/matplotlib/sphinxext/meson.build\nindex 5dc7388384eb..35bb96fecbe1 100644\n--- a/lib/matplotlib/sphinxext/meson.build\n+++ b/lib/matplotlib/sphinxext/meson.build\n@@ -3,6 +3,7 @@ python_sources = [\n   'figmpl_directive.py',\n   'mathmpl.py',\n   'plot_directive.py',\n+  'roles.py',\n ]\n \n typing_sources = [\ndiff --git a/lib/matplotlib/sphinxext/roles.py b/lib/matplotlib/sphinxext/roles.py\nnew file mode 100644\nindex 000000000000..301adcd8a5f5\n--- /dev/null\n+++ b/lib/matplotlib/sphinxext/roles.py\n@@ -0,0 +1,147 @@\n+\"\"\"\n+Custom roles for the Matplotlib documentation.\n+\n+.. warning::\n+\n+    These roles are considered semi-public. They are only intended to be used in\n+    the Matplotlib documentation.\n+\n+However, it can happen that downstream packages end up pulling these roles into\n+their documentation, which will result in documentation build errors. The following\n+describes the exact mechanism and how to fix the errors.\n+\n+There are two ways, Matplotlib docstrings can end up in downstream documentation.\n+You have to subclass a Matplotlib class and either use the ``:inherited-members:``\n+option in your autodoc configuration, or you have to override a method without\n+specifying a new docstring; the new method will inherit the original docstring and\n+still render in your autodoc. If the docstring contains one of the custom sphinx\n+roles, you'll see one of the following error messages:\n+\n+.. code-block:: none\n+\n+    Unknown interpreted text role \"mpltype\".\n+    Unknown interpreted text role \"rc\".\n+\n+To fix this, you can add this module as extension to your sphinx :file:`conf.py`::\n+\n+    extensions = [\n+        'matplotlib.sphinxext.roles',\n+        # Other extensions.\n+    ]\n+\n+.. warning::\n+\n+    Direct use of these roles in other packages is not officially supported. We\n+    reserve the right to modify or remove these roles without prior notification.\n+\"\"\"\n+\n+from urllib.parse import urlsplit, urlunsplit\n+\n+from docutils import nodes\n+\n+import matplotlib\n+from matplotlib import rcParamsDefault\n+\n+\n+class _QueryReference(nodes.Inline, nodes.TextElement):\n+    \"\"\"\n+    Wraps a reference or pending reference to add a query string.\n+\n+    The query string is generated from the attributes added to this node.\n+\n+    Also equivalent to a `~docutils.nodes.literal` node.\n+    \"\"\"\n+\n+    def to_query_string(self):\n+        \"\"\"Generate query string from node attributes.\"\"\"\n+        return '&'.join(f'{name}={value}' for name, value in self.attlist())\n+\n+\n+def _visit_query_reference_node(self, node):\n+    \"\"\"\n+    Resolve *node* into query strings on its ``reference`` children.\n+\n+    Then act as if this is a `~docutils.nodes.literal`.\n+    \"\"\"\n+    query = node.to_query_string()\n+    for refnode in node.findall(nodes.reference):\n+        uri = urlsplit(refnode['refuri'])._replace(query=query)\n+        refnode['refuri'] = urlunsplit(uri)\n+\n+    self.visit_literal(node)\n+\n+\n+def _depart_query_reference_node(self, node):\n+    \"\"\"\n+    Act as if this is a `~docutils.nodes.literal`.\n+    \"\"\"\n+    self.depart_literal(node)\n+\n+\n+def _rcparam_role(name, rawtext, text, lineno, inliner, options=None, content=None):\n+    \"\"\"\n+    Sphinx role ``:rc:`` to highlight and link ``rcParams`` entries.\n+\n+    Usage: Give the desired ``rcParams`` key as parameter.\n+\n+    :code:`:rc:`figure.dpi`` will render as: :rc:`figure.dpi`\n+    \"\"\"\n+    # Generate a pending cross-reference so that Sphinx will ensure this link\n+    # isn't broken at some point in the future.\n+    title = f'rcParams[\"{text}\"]'\n+    target = 'matplotlibrc-sample'\n+    ref_nodes, messages = inliner.interpreted(title, f'{title} <{target}>',\n+                                              'ref', lineno)\n+\n+    qr = _QueryReference(rawtext, highlight=text)\n+    qr += ref_nodes\n+    node_list = [qr]\n+\n+    # The default backend would be printed as \"agg\", but that's not correct (as\n+    # the default is actually determined by fallback).\n+    if text in rcParamsDefault and text != \"backend\":\n+        node_list.extend([\n+            nodes.Text(' (default: '),\n+            nodes.literal('', repr(rcParamsDefault[text])),\n+            nodes.Text(')'),\n+            ])\n+\n+    return node_list, messages\n+\n+\n+def _mpltype_role(name, rawtext, text, lineno, inliner, options=None, content=None):\n+    \"\"\"\n+    Sphinx role ``:mpltype:`` for custom matplotlib types.\n+\n+    In Matplotlib, there are a number of type-like concepts that do not have a\n+    direct type representation; example: color. This role allows to properly\n+    highlight them in the docs and link to their definition.\n+\n+    Currently supported values:\n+\n+    - :code:`:mpltype:`color`` will render as: :mpltype:`color`\n+\n+    \"\"\"\n+    mpltype = text\n+    type_to_link_target = {\n+        'color': 'colors_def',\n+    }\n+    if mpltype not in type_to_link_target:\n+        raise ValueError(f\"Unknown mpltype: {mpltype!r}\")\n+\n+    node_list, messages = inliner.interpreted(\n+        mpltype, f'{mpltype} <{type_to_link_target[mpltype]}>', 'ref', lineno)\n+    return node_list, messages\n+\n+\n+def setup(app):\n+    app.add_role(\"rc\", _rcparam_role)\n+    app.add_role(\"mpltype\", _mpltype_role)\n+    app.add_node(\n+        _QueryReference,\n+        html=(_visit_query_reference_node, _depart_query_reference_node),\n+        latex=(_visit_query_reference_node, _depart_query_reference_node),\n+        text=(_visit_query_reference_node, _depart_query_reference_node),\n+    )\n+    return {\"version\": matplotlib.__version__,\n+            \"parallel_read_safe\": True, \"parallel_write_safe\": True}\ndiff --git a/pyproject.toml b/pyproject.toml\nindex a9fb7df68450..52bbe308c0f9 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -283,11 +283,11 @@ ignore_directives = [\n     \"include\"\n ]\n ignore_roles = [\n-    # sphinxext.custom_roles\n-    \"rc\",\n     # matplotlib.sphinxext.mathmpl\n     \"mathmpl\",\n     \"math-stix\",\n+    # matplotlib.sphinxext.roles\n+    \"rc\",\n     # sphinxext.github\n     \"ghissue\",\n     \"ghpull\",\n", "test_patch": "", "problem_statement": "[Bug]: mpltype custom role breaks sphinx build for third-party projects that have intersphinx links to matplotlib\n### Bug summary\n\nSphinx docs builds for third-party packages that have intersphinx cross-references to matplotlib are now failing with the following error message:\r\n\r\n```\r\nUnknown interpreted text role \"mpltype\".\r\n```\r\n\r\nThis is because #27557 and Matplotlib 3.9.0 added the `:mpltype:` custom role to the docs. Would you please provide some guidance for how packages that depend on Matplotlib should be building their sphinx docs?\n\n### Code for reproduction\n\n```Python\n# See https://git.ligo.org/lscsoft/ligo.skymap\n```\n\n\n### Actual outcome\n\nSee https://git.ligo.org/leo-singer/ligo.skymap/-/jobs/3342134\n\n### Expected outcome\n\nBuild should complete without errors\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "<s>As a temporary workaround can you explicitly link against previous matplotlib versions? https://matplotlib.org/3.8.4/objects.inv</s>\r\n\r\n*Edit:* Looking at the error message, I suspect this is not an intersphinx issue. Instead. You are deriving from Matplotlib and by that inherit the docstring from `Axes.__init__`, which contains the `:mpltype:` role. As a workaround, you can try to explicitly set a dummy docstring for `PPPlot.__init__`.\nTODO: Do we have to make this role publically available via `matplotlib.sphinxext` so that downstream libraries can include it in their sphinx conf? OTOH `:rc:` is also not publically available and given its wide use, I'm surpised that nobody has stumbled over that.\nMaybe it makes sense to make it publically available as well as `:rc:`, so that one can improve the documentation for third-party extensions (especially color would be great). \r\n\r\nBut isn't the reason for lack of earlier bug reports that very few projects inherit the doc-strings?\nI don't understand how sphinx registers things well enough, but could it be b/c :rc: is a node object (same with :mathmpl:) while I'm not sure what's going on with :mpltype:\nThere are two ways you can get Sphinx extensions:\r\n\r\n1. The docs/sphinxext folder. This is limited to the current docs.\r\n2. Via packages that are added to `extensions` in `conf.py`. These are portable and can be reused in other docs.\r\n\r\nWe currently have :mpltype: in (1), which I believed was enough because it\u2019s intended for internal use only. However, it\u2019s usage can leak into other documentations via docstring inheritance.\r\n\r\nThere are three ways we can handle this:\r\n\r\n1. move the extensions to `matplotlib.sphinxext`. Affected projects have to include them in their `conf.py`. To be checked whether the extensions would work in other documentations. Also we\u2019d need to document that these are not intended for general use and can change anytime.\r\n2. Create simpler/dummy extensions in `matplotlib.sphinxext` that are text-only. Reasonable if 1. does not work or we want to keep the full functionality strictly private.\r\n3. Tell downstream projects, that inherit from us to  overwrite docstrings when needed.\r\n\r\nI\u2018m inclined towards (3) because it\u2019s a rare effect and (3) is the least work for us.\n> Via packages that are added to extensions in conf.py. These are portable and can be reused in other docs\n\nAm slightly confused cause we do this in our conf far as I can tell: \nhttps://github.com/matplotlib/matplotlib/blob/b63d846dd0fb19511c38a936a85ff6de297ca2a7/doc/conf.py#L121\n(3) would mean that projects like mine would need to write dummy Sphinx extensions, right? If so, I would prefer (2).\nWe should promote `mpltype` to be publicly available.", "created_at": "2024-05-23T20:11:41Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28279, "instance_id": "matplotlib__matplotlib-28279", "issue_numbers": ["0000", "16263"], "base_commit": "31a2e1edb756e6b42ecd7ff405e488647d8ea27a", "patch": "diff --git a/doc/devel/min_dep_policy.rst b/doc/devel/min_dep_policy.rst\nindex 670957103ba9..6ff083ca6dc1 100644\n--- a/doc/devel/min_dep_policy.rst\n+++ b/doc/devel/min_dep_policy.rst\n@@ -51,6 +51,14 @@ versions no longer support our minimum NumPy or Python.\n \n We will work around bugs in our dependencies when practical.\n \n+IPython and Matplotlib do not formally depend on each other, however there is\n+practical coupling for the integration of Matplotlib's UI into IPython and\n+IPykernel.  We will ensure this integration works with at least minor or major\n+versions of IPython and IPykernel released in the 24 months prior to our\n+planned release date.  Matplotlib may or may not work with older versions and\n+we will not warn if used with IPython or IPykernel outside of this window.\n+\n+\n \n Test and documentation dependencies\n ===================================\n", "test_patch": "", "problem_statement": "Apply NEP29 (time-limited support) to IPython\nCurrently, Matplotlib maintains some code to support some extremely old versions of IPython (supposedly down to 1.x) even though it is quite possible that such versions don't even work with Py3.6+.  There are also some tricky points wrt backend switching which were fixed a while ago in ipython (https://github.com/ipython/ipython/pull/9287) but for which we still maintain backcompat for older versions.  (Backend switching is the motivation for this proposal.)\r\n\r\nEven though IPython is not a \"dependency\" of Matplotlib, there's obviously some rather tight coupling due to event loop integration, so I would suggest applying NEP29 (or rather our version of it, https://matplotlib.org/devdocs/devel/min_dep_policy.html#python-dependencies): \"we should support at least (...) minor versions initially released in the 12 months prior to our planed release date or the oldest that supports our minimum python\" (as there is no compiled code in IPython) -- right now this would mean ipython 7.3.0.  I'm not asking that we be super strict (we could e.g. also treat ipython like numpy, which means 24 months -- so IPython 6.3.0, right now), but unlimited support seems a bit too much.\r\n\r\nAssuming we agree on this, we also need to decide what to do if Matplotlib detects that it is running in an too-old-IPython: error out? print a warning?\n", "hints_text": ":+1: to removing work-around code for old versions of IPython.  50/50 on adding a warning for older versions of IPython.\nDo you suggest to not even bother checking if we're running a too-old ipython?\nTreating IPython like numpy seems reasonable. I\u2019m also 50/50 on even bothering to warn about old versions.\nPushing to 3.4 as it is not urgent.\r\n\r\nWe talked about this on the call, general agreement, but still want to think about if we should warn about old versions.\r\n\r\nThe code we use from IPython has been stable for an extremely long time so this maybe a moot point.\ncc @ianthomas23; I think this ties in with the backend registry?\n> cc @ianthomas23; I think this ties in with the backend registry?\r\n\r\nYes it does. Looking forward we have removed the hidden tight coupling between the two projects, such as matplotlib dynamically altering ipython's `backend2gui` mapping, and replaced it with the `BackendRegistry` public API. So it should be *much* easier in future to keep them in step.\r\n\r\nCan we claim to have done enough to close this issue now by informally adopting NEP29 for IPython backward compatibility and implementing tests to prove it in #28205? Or does there need to be a statement somewhere (code or docs) that this is a formal policy? \nI think what really matters is just that someone actually looked into the compatibility ranges, but a statement in the docs can't hurt... (I'm not insisting on it either.)", "created_at": "2024-05-22T17:09:56Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28269, "instance_id": "matplotlib__matplotlib-28269", "issue_numbers": ["28267", "0000"], "base_commit": "d6df77c12d2f30ba2775337d101dc63adc430548", "patch": "diff --git a/lib/matplotlib/backends/_backend_tk.py b/lib/matplotlib/backends/_backend_tk.py\nindex 295f6c41372d..df06440a9826 100644\n--- a/lib/matplotlib/backends/_backend_tk.py\n+++ b/lib/matplotlib/backends/_backend_tk.py\n@@ -44,7 +44,7 @@ def _restore_foreground_window_at_end():\n     try:\n         yield\n     finally:\n-        if mpl.rcParams['tk.window_focus']:\n+        if foreground and mpl.rcParams['tk.window_focus']:\n             _c_internal_utils.Win32_SetForegroundWindow(foreground)\n \n \ndiff --git a/src/_c_internal_utils.cpp b/src/_c_internal_utils.cpp\nindex 464aabcb2e3a..e118183ecc8b 100644\n--- a/src/_c_internal_utils.cpp\n+++ b/src/_c_internal_utils.cpp\n@@ -111,7 +111,11 @@ static py::object\n mpl_GetForegroundWindow(void)\n {\n #ifdef _WIN32\n-  return py::capsule(GetForegroundWindow(), \"HWND\");\n+  if (HWND hwnd = GetForegroundWindow()) {\n+    return py::capsule(hwnd, \"HWND\");\n+  } else {\n+    return py::none();\n+  }\n #else\n   return py::none();\n #endif\n", "test_patch": "", "problem_statement": "[Bug]: for Python 3.11.9 got ValueError: PyCapsule_New called with null pointer\n### Bug summary\n\nI got next error \r\nsrc\\tests\\test_cover.py:48: \r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    src\\tests\\test_cover.py:202: in draw_diagram\r\n        fig, ax = plt.subplots(figsize=(14, 5), layout='constrained')\r\n    .venv\\Lib\\site-packages\\matplotlib\\pyplot.py:1702: in subplots\r\n        fig = figure(**fig_kw)\r\n    .venv\\Lib\\site-packages\\matplotlib\\pyplot.py:1022: in figure\r\n        manager = new_figure_manager(\r\n    .venv\\Lib\\site-packages\\matplotlib\\pyplot.py:545: in new_figure_manager\r\n        return _get_backend_mod().new_figure_manager(*args, **kwargs)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backend_bases.py:3521: in new_figure_manager\r\n        return cls.new_figure_manager_given_figure(num, fig)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backend_bases.py:3526: in new_figure_manager_given_figure\r\n        return cls.FigureCanvas.new_manager(figure, num)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backend_bases.py:1811: in new_manager\r\n        return cls.manager_class.create_with_canvas(cls, figure, num)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py:479: in create_with_canvas\r\n        with _restore_foreground_window_at_end():\r\n    C:\\Users\\olapbuild\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py:137: in __enter__\r\n        return next(self.gen)\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    \r\n        @contextmanager\r\n        def _restore_foreground_window_at_end():\r\n    >       foreground = _c_internal_utils.Win32_GetForegroundWindow()\r\n    E       ValueError: PyCapsule_New called with null pointer\r\n    \r\n    .venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py:43: ValueError\n\n### Code for reproduction\n\n```Python\ndef draw_diagram():\r\n    width = 0.4  # \u0417\u0430\u0434\u0430\u0451\u043c \u0448\u0438\u0440\u0438\u043d\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\r\n    fig, ax = plt.subplots(figsize=(14, 5), layout='constrained')\r\n    ax.bar(labels, cowered_data, width, label='\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e\u043a\u0440\u044b\u0442\u044b\u0445 \u043c\u0435\u0440-\u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u0442\u0435\u0441\u0442\u0430\u043c\u0438')\r\n    ax.bar(labels, uncowered_data, width, bottom=cowered_data,\r\n           label='\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043d\u0435\u043f\u043e\u043a\u0440\u044b\u0442\u044b\u0445 \u043c\u0435\u0440-\u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u0439 \u0442\u0435\u0441\u0442\u0430\u043c\u0438')\r\n    ax.set_ylabel('% \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f')\r\n    ax.set_title('\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u0443\u0431\u043e\u0432 \u0442\u0435\u0441\u0442\u0430\u043c\u0438')\r\n    ax.legend()\r\n    plt.savefig('diagram.png')\n```\n\n\n### Actual outcome\n\nsrc\\tests\\test_cover.py:48: \r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    src\\tests\\test_cover.py:202: in draw_diagram\r\n        fig, ax = plt.subplots(figsize=(14, 5), layout='constrained')\r\n    .venv\\Lib\\site-packages\\matplotlib\\pyplot.py:1702: in subplots\r\n        fig = figure(**fig_kw)\r\n    .venv\\Lib\\site-packages\\matplotlib\\pyplot.py:1022: in figure\r\n        manager = new_figure_manager(\r\n    .venv\\Lib\\site-packages\\matplotlib\\pyplot.py:545: in new_figure_manager\r\n        return _get_backend_mod().new_figure_manager(*args, **kwargs)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backend_bases.py:3521: in new_figure_manager\r\n        return cls.new_figure_manager_given_figure(num, fig)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backend_bases.py:3526: in new_figure_manager_given_figure\r\n        return cls.FigureCanvas.new_manager(figure, num)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backend_bases.py:1811: in new_manager\r\n        return cls.manager_class.create_with_canvas(cls, figure, num)\r\n    .venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py:479: in create_with_canvas\r\n        with _restore_foreground_window_at_end():\r\n    C:\\Users\\olapbuild\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\contextlib.py:137: in __enter__\r\n        return next(self.gen)\r\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n    \r\n        @contextmanager\r\n        def _restore_foreground_window_at_end():\r\n    >       foreground = _c_internal_utils.Win32_GetForegroundWindow()\r\n    E       ValueError: PyCapsule_New called with null pointer\r\n    \r\n    .venv\\Lib\\site-packages\\matplotlib\\backends\\_backend_tk.py:43: ValueError\n\n### Expected outcome\n\n![diagram](https://github.com/matplotlib/matplotlib/assets/105438413/cca8af94-9e66-441f-9c5a-8790bdb67ffc)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows NT\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\ntkagg\n\n### Python version\n\n3.11.9, 3.12\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "", "created_at": "2024-05-21T17:07:13Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28261, "instance_id": "matplotlib__matplotlib-28261", "issue_numbers": ["28256"], "base_commit": "31a2e1edb756e6b42ecd7ff405e488647d8ea27a", "patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex d0f5c8d2b23b..677c2668d4e9 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -1524,6 +1524,7 @@ def _on_move(self, event):\n             dazim = -(dy/h)*180*np.sin(roll) - (dx/w)*180*np.cos(roll)\n             elev = self.elev + delev\n             azim = self.azim + dazim\n+            roll = self.roll\n             vertical_axis = self._axis_names[self._vertical_axis]\n             self.view_init(\n                 elev=elev,\n", "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\nindex ed56e5505d8e..c339e35e903c 100644\n--- a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n@@ -1766,6 +1766,31 @@ def test_shared_axes_retick():\n     assert ax2.get_zlim() == (-0.5, 2.5)\n \n \n+def test_rotate():\n+    \"\"\"Test rotating using the left mouse button.\"\"\"\n+    for roll in [0, 30]:\n+        fig = plt.figure()\n+        ax = fig.add_subplot(1, 1, 1, projection='3d')\n+        ax.view_init(0, 0, roll)\n+        ax.figure.canvas.draw()\n+\n+        # drag mouse horizontally to change azimuth\n+        dx = 0.1\n+        dy = 0.2\n+        ax._button_press(\n+            mock_event(ax, button=MouseButton.LEFT, xdata=0, ydata=0))\n+        ax._on_move(\n+            mock_event(ax, button=MouseButton.LEFT,\n+                           xdata=dx*ax._pseudo_w, ydata=dy*ax._pseudo_h))\n+        ax.figure.canvas.draw()\n+        roll_radians = np.deg2rad(ax.roll)\n+        cs = np.cos(roll_radians)\n+        sn = np.sin(roll_radians)\n+        assert ax.elev == (-dy*180*cs + dx*180*sn)\n+        assert ax.azim == (-dy*180*sn - dx*180*cs)\n+        assert ax.roll == roll\n+\n+\n def test_pan():\n     \"\"\"Test mouse panning using the middle mouse button.\"\"\"\n \n", "problem_statement": "[Bug]: axes3d.py's _on_move() converts the roll angle to radians, but then passes it to view_init() as if it were still in degrees\n### Bug summary\n\nIn \\lib\\mpl_toolkits\\mplot3d\\axes3d.py, `_on_move()` deals with rotation of 3d axes using the mouse.  In line 1522, the roll angle (in degrees) is converted to radians:\r\n`    roll = np.deg2rad(self.roll)`\r\nThis roll in radians is used to calculate a new elevation and azimuth, like so:\r\n```\r\n    delev = -(dy/h)*180*np.cos(roll) + (dx/w)*180*np.sin(roll)\r\n    dazim = -(dy/h)*180*np.sin(roll) - (dx/w)*180*np.cos(roll)\r\n    elev = self.elev + delev\r\n    azim = self.azim + dazim\r\n```\r\nA moment later, the view is updated:\r\n```\r\n    self.view_init(\r\n        elev=elev,\r\n        azim=azim,\r\n        roll=roll,\r\n        vertical_axis=vertical_axis,\r\n        share=True,\r\n    )\r\n```\r\nHowever, `view_init()` expects its parameters to be in degrees, not radians. As a consequence, the roll now diminishes by a factor pi/180 with every mouse movement. Not intended.\r\n\n\n### Code for reproduction\n\n```Python\n# Run the surface3d.py example, adding\r\nax.roll = 45\r\n# It shows the plot, in the intended funny orientation (roll=45)\r\n# Then move the mouse - you will see the orientation jump suddenly (to roll=0)\n```\n\n\n### Actual outcome\n\nThe figure orientation has jumped to roll=0, after trying to rotate it only slightly by dragging the mouse:\r\n![Figure_rotated](https://github.com/matplotlib/matplotlib/assets/122418839/ccbc7f47-dc27-499c-bee4-296b5b5164cb)\r\n\n\n### Expected outcome\n\nThe figure is close to its original orientation (before dragging the mouse), at roll=45:\r\n![Figure_1](https://github.com/matplotlib/matplotlib/assets/122418839/6e572bc9-e1f4-4a87-87f3-4b571ef06288)\r\n\n\n### Additional information\n\nFix: add a line:\r\n`roll = self.roll`\r\nright after updating `elev` and `azim` (i.e., after line 1526).\r\n\n\n### Operating system\n\nAll, presumably; but I noticed it on Windows\n\n### Matplotlib Version\n\n3.10.0.dev191+ge5af947d1b.d20240517\n\n### Matplotlib Backend\n\ntkagg\n\n### Python version\n\nPython 3.12.3\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "", "created_at": "2024-05-19T18:36:49Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28231, "instance_id": "matplotlib__matplotlib-28231", "issue_numbers": ["28002"], "base_commit": "80b08bd9281850a83942028d91f1ba7aec91ef29", "patch": "diff --git a/galleries/examples/event_handling/path_editor.py b/galleries/examples/event_handling/path_editor.py\nindex d6e84b454008..2af54bad53ed 100644\n--- a/galleries/examples/event_handling/path_editor.py\n+++ b/galleries/examples/event_handling/path_editor.py\n@@ -94,7 +94,6 @@ def on_draw(self, event):\n         self.background = self.canvas.copy_from_bbox(self.ax.bbox)\n         self.ax.draw_artist(self.pathpatch)\n         self.ax.draw_artist(self.line)\n-        self.canvas.blit(self.ax.bbox)\n \n     def on_button_press(self, event):\n         \"\"\"Callback for mouse button presses.\"\"\"\n", "test_patch": "", "problem_statement": "Segfault from path editor example with QtAgg\nI was playing with the [path editor](https://matplotlib.org/stable/gallery/event_handling/path_editor.html) example and found that with QtAgg if I resize the window I get\r\n```\r\nQWidget::repaint: Recursive repaint detected\r\nQWidget::paintEngine: Should no longer be called\r\nQPainter::begin: Paint device returned engine == 0, type: 1\r\nQPainter::end: Painter not active, aborted\r\nSegmentation fault (core dumped)\r\n```\r\nRemoving the blit line from draw as proposed at #11431 fixes this for me.  TkAgg works fine whether the blit line is there or not.\r\n\r\nI am on Ubuntu 22.04 and tested this with `main`.\r\n\r\n_Originally posted by @rcomer in https://github.com/matplotlib/matplotlib/issues/11431#issuecomment-2029655101_\r\n            \n", "hints_text": "Wow! I came across this too right now!\nWhich Qt bindings are you using? I do see the extra prints, but do not see any seg faults on my machine (I tried with both pyqt and pyside, qt6 and qt5).\r\n\r\nFrom a quick scan of the linked PR, it looks like this is a race condition, so that may explain why I'm not seeing it but you are, so that is extra fun.\nI have pyqt 5.15.9.  I created the environment using the [conda yml](https://github.com/matplotlib/matplotlib/blob/main/environment.yml).\r\n\r\nedit: though I created the env in December so perhaps I should make a new one and try again.\r\n\r\nedit 2: confirmed same result with a fresh environment.\nUninstalling PySide2 somehow fixed this for me\nI see this too with pyqt6.\r\n\nAlso confirmed that #27913 does not fix the problem.\n> I see this too with pyqt6.\r\n\r\nI don\u2019t know whether to \ud83c\udf89 or \u2639\ufe0f\nOn the plus side, I can get rid of the segfault \ud83c\udf89 \r\n\r\nOn the down side, the figure does not repaint properly on resize until you hit a keyboardkey....\n\r\nThis is what I have been playing with before I sign off for the night:\r\n\r\n\r\n```diff\r\ndiff --git a/galleries/examples/event_handling/path_editor.py b/galleries/examples/event_handling/path_editor.py\r\nindex d6e84b4540..f08637a188 100644\r\n--- a/galleries/examples/event_handling/path_editor.py\r\n+++ b/galleries/examples/event_handling/path_editor.py\r\n@@ -91,6 +91,7 @@ class PathInteractor:\r\n \r\n     def on_draw(self, event):\r\n         \"\"\"Callback for draws.\"\"\"\r\n+        print('in on draw cb')\r\n         self.background = self.canvas.copy_from_bbox(self.ax.bbox)\r\n         self.ax.draw_artist(self.pathpatch)\r\n         self.ax.draw_artist(self.line)\r\n@@ -120,7 +121,7 @@ class PathInteractor:\r\n             self.line.set_visible(self.showverts)\r\n             if not self.showverts:\r\n                 self._ind = None\r\n-        self.canvas.draw()\r\n+        self.canvas.draw_idle()\r\n \r\n     def on_mouse_move(self, event):\r\n         \"\"\"Callback for mouse movements.\"\"\"\r\n@@ -146,4 +147,5 @@ ax.set_title('drag vertices to update path')\r\n ax.set_xlim(-3, 4)\r\n ax.set_ylim(-3, 4)\r\n \r\n+fig.canvas.draw()\r\n plt.show()\r\ndiff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\r\nindex e90c110c19..2479a07322 100644\r\n--- a/lib/matplotlib/backend_bases.py\r\n+++ b/lib/matplotlib/backend_bases.py\r\n@@ -1806,9 +1806,11 @@ class FigureCanvasBase:\r\n     def _idle_draw_cntx(self):\r\n         self._is_idle_drawing = True\r\n         try:\r\n+            print(\"enter idle conext\")\r\n             yield\r\n         finally:\r\n             self._is_idle_drawing = False\r\n+            print(\"exit idle conext\")\r\n \r\n     def is_saving(self):\r\n         \"\"\"\r\n@@ -1892,6 +1894,7 @@ class FigureCanvasBase:\r\n         before saving output to disk. For example computing limits,\r\n         auto-limits, and tick values.\r\n         \"\"\"\r\n+        print(\"womp womp\")\r\n \r\n     def draw_idle(self, *args, **kwargs):\r\n         \"\"\"\r\ndiff --git a/lib/matplotlib/backends/backend_agg.py b/lib/matplotlib/backends/backend_agg.py\r\nindex 92253c02c1..b1d7ec8f6d 100644\r\n--- a/lib/matplotlib/backends/backend_agg.py\r\n+++ b/lib/matplotlib/backends/backend_agg.py\r\n@@ -379,6 +379,7 @@ class FigureCanvasAgg(FigureCanvasBase):\r\n \r\n     def draw(self):\r\n         # docstring inherited\r\n+        print(\"In the real Agg draw\")\r\n         self.renderer = self.get_renderer()\r\n         self.renderer.clear()\r\n         # Acquire a lock on the shared font cache.\r\ndiff --git a/lib/matplotlib/backends/backend_qt.py b/lib/matplotlib/backends/backend_qt.py\r\nindex db593ae77d..c288af2150 100644\r\n--- a/lib/matplotlib/backends/backend_qt.py\r\n+++ b/lib/matplotlib/backends/backend_qt.py\r\n@@ -385,6 +385,7 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):\r\n             QtWidgets.QWidget.resizeEvent(self, event)\r\n             # emit our resize events\r\n             ResizeEvent(\"resize_event\", self)._process()\r\n+            print(\"in resize event\")\r\n             self.draw_idle()\r\n         finally:\r\n             self._in_resize_event = False\r\n@@ -457,17 +458,13 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):\r\n             self._event_loop.quit()\r\n \r\n     def draw(self):\r\n-        \"\"\"Render the figure, and queue a request for a Qt draw.\"\"\"\r\n-        # The renderer draw is done here; delaying causes problems with code\r\n-        # that uses the result of the draw() to update plot elements.\r\n-        if self._is_drawing:\r\n-            return\r\n-        with cbook._setattr_cm(self, _is_drawing=True):\r\n-            super().draw()\r\n+        print(\"hit og draw\")\r\n+        self._draw()\r\n         self.update()\r\n \r\n     def draw_idle(self):\r\n         \"\"\"Queue redraw of the Agg buffer and request Qt paintEvent.\"\"\"\r\n+        print(\"in draw idle\")\r\n         # The Agg draw needs to be handled by the same thread Matplotlib\r\n         # modifies the scene graph from. Post Agg draw request to the\r\n         # current event loop in order to ensure thread affinity and to\r\n@@ -475,11 +472,17 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):\r\n         # TODO: queued signal connection might be safer than singleShot\r\n         if not (getattr(self, '_draw_pending', False) or\r\n                 getattr(self, '_is_drawing', False)):\r\n+            print(\"   and did something\")\r\n             self._draw_pending = True\r\n-            QtCore.QTimer.singleShot(0, self._draw_idle)\r\n+\r\n+            print(f\"   {self._draw_pending=}\")\r\n+            #QtCore.QTimer.singleShot(0, self._draw_idle)\r\n+        self.update()\r\n+\r\n \r\n     def blit(self, bbox=None):\r\n         # docstring inherited\r\n+        print(\"in blit\")\r\n         if bbox is None and self.figure:\r\n             bbox = self.figure.bbox  # Blit the entire canvas if bbox is None.\r\n         # repaint uses logical pixels, not physical pixels like the renderer.\r\n@@ -488,14 +491,18 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):\r\n         self.repaint(l, self.rect().height() - t, w, h)\r\n \r\n     def _draw_idle(self):\r\n+        print(f\"called with {self._draw_pending=}\")\r\n+        if not self._draw_pending:\r\n+            return\r\n+        if self._is_idle_drawing:\r\n+            return\r\n+\r\n         with self._idle_draw_cntx():\r\n-            if not self._draw_pending:\r\n-                return\r\n             self._draw_pending = False\r\n             if self.height() < 0 or self.width() < 0:\r\n                 return\r\n             try:\r\n-                self.draw()\r\n+                self._draw()\r\n             except Exception:\r\n                 # Uncaught exceptions are fatal for PyQt5, so catch them.\r\n                 traceback.print_exc()\r\ndiff --git a/lib/matplotlib/backends/backend_qtagg.py b/lib/matplotlib/backends/backend_qtagg.py\r\nindex 256e50a3d1..afca423520 100644\r\n--- a/lib/matplotlib/backends/backend_qtagg.py\r\n+++ b/lib/matplotlib/backends/backend_qtagg.py\r\n@@ -5,6 +5,7 @@ Render to qt from agg.\r\n import ctypes\r\n \r\n from matplotlib.transforms import Bbox\r\n+from matplotlib import cbook\r\n \r\n from .qt_compat import QT_API, QtCore, QtGui\r\n from .backend_agg import FigureCanvasAgg\r\n@@ -15,6 +16,18 @@ from .backend_qt import (  # noqa: F401 # pylint: disable=W0611\r\n \r\n class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT):\r\n \r\n+    def _draw(self):\r\n+        \"\"\"Render the figure, and queue a request for a Qt draw.\"\"\"\r\n+        # The renderer draw is done here; delaying causes problems with code\r\n+        # that uses the result of the draw() to update plot elements.\r\n+        print(\"entered real draw\")\r\n+        if self._is_drawing:\r\n+            return\r\n+        with cbook._setattr_cm(self, _is_drawing=True):\r\n+            print(type(self).mro())\r\n+            super().draw()\r\n+        print(\"finished real draw\")\r\n+\r\n     def paintEvent(self, event):\r\n         \"\"\"\r\n         Copy the image from the Agg canvas to the qt.drawable.\r\n@@ -22,11 +35,13 @@ class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT):\r\n         In Qt, all drawing should be done inside of here when a widget is\r\n         shown onscreen.\r\n         \"\"\"\r\n+        print(\"in paintEvent\")\r\n         self._draw_idle()  # Only does something if a draw is pending.\r\n \r\n         # If the canvas does not have a renderer, then give up and wait for\r\n         # FigureCanvasAgg.draw(self) to be called.\r\n         if not hasattr(self, 'renderer'):\r\n+            print(\"no renderer\")\r\n             return\r\n \r\n         painter = QtGui.QPainter(self)\r\n@@ -61,7 +76,9 @@ class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT):\r\n             qimage.setDevicePixelRatio(self.device_pixel_ratio)\r\n             # set origin using original QT coordinates\r\n             origin = QtCore.QPoint(rect.left(), rect.top())\r\n+            print(\"about to paint image\")\r\n             painter.drawImage(origin, qimage)\r\n+            print(\"painted image\")\r\n             # Adjust the buf reference count to work around a memory\r\n             # leak bug in QImage under PySide.\r\n             if QT_API == \"PySide2\" and QtCore.__version_info__ < (5, 12):\r\n\r\n```\r\n\r\nI think the current problem is some multiple inheritance issue\r\n\r\n```\r\n\r\nclass A:\r\n    def foo(self):\r\n        print(\"A foo\")\r\n\r\nclass B(A):\r\n    def foo(self):\r\n        print(\"B foo\")\r\n        super().foo()\r\n\r\n\r\nclass C(A):\r\n    def bar(self):\r\n        print(\"C bar\")\r\n        super().foo()\r\n\r\nclass D(B, C):\r\n    ...\r\n\r\n\r\n\r\nd = D()\r\n```\r\n\r\ngives\r\n\r\n```\r\nIn [26]: d.bar()\r\nC bar\r\nA foo\r\n\r\n```\r\n\r\nbut\r\n\r\n```\r\nclass C(A):\r\n    def bar(self):\r\n        print(\"C bar\")\r\n        self.foo()\r\n\r\n```\r\n\r\nworks in the toy.\r\n\r\nSomething is not right with the draw/draw_idle/their private versions / update but I have not sort it out yet.   It looks like we have two generations of attempts to make draw_idle work correctly layered on top of eachother (and neither fully works).\nRelated: For those trying to use the path editor example in current JupyterLab and Jupyter Notebook 7+, see [here](https://stackoverflow.com/q/78429762/8508004).", "created_at": "2024-05-15T20:06:57Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28230, "instance_id": "matplotlib__matplotlib-28230", "issue_numbers": ["28022", "0000"], "base_commit": "80b08bd9281850a83942028d91f1ba7aec91ef29", "patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 00e623dd649e..3b1a01c28408 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -90,6 +90,9 @@\n     import PIL.Image\n     from numpy.typing import ArrayLike\n \n+    import matplotlib.axes\n+    import matplotlib.artist\n+    import matplotlib.backend_bases\n     from matplotlib.axis import Tick\n     from matplotlib.axes._base import _AxesBase\n     from matplotlib.backend_bases import RendererBase, Event\n", "test_patch": "", "problem_statement": "[Bug]: Type of Axes is unknown pyright\n### Bug summary\r\n\r\n`plt.axes` should return `Axes` and not `matplotlib.axes.Axes`\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\n@_docstring.dedent_interpd\r\ndef axes(\r\n    arg: None | tuple[float, float, float, float] = None,\r\n    **kwargs\r\n) -> matplotlib.axes.Axes: #axes is not a known member of module 'matplotlib' #type of axes is unknown #type of Axes is unknown\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nSame as above\r\n\r\n### Expected outcome\r\n\r\n```python3\r\n@_docstring.dedent_interpd\r\ndef axes(\r\n    arg: None | tuple[float, float, float, float] = None,\r\n    **kwargs\r\n) -> Axes:\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.12\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "The technical location of the class is `matplotlib.axes._axes.Axes` but it's re-imported in `matplotlib.axes`, which is our canonical public point of contact. Maybe pyright is stumbling over that?\nPyright understands matplotlib and goes under `__init__.py` but cannot find any source of axes there.\r\n\r\nWhy not use `Axes` as the return type instead? It is imported in `pyplot.py ` too. The same is used for  functions returning `Figure`. I can make a PR if this is the intended direction.\nYes, changing `matplotlib.axes.Axes` to `Axes` in type annotations in pyplot seems the right thing to do. ping @ksunden do you agree? A PR is welcome!\nSee full explanations here:\r\n\r\n- https://github.com/matplotlib/matplotlib/pull/24976#discussion_r1093784988\r\n- https://github.com/matplotlib/matplotlib/pull/24976/files#r1152766000\r\n\r\nShort version is that sphinx had trouble resolving some things, so I resorted to the fully specified names in some cases. I think this particular example should be fine to be shortened, but the other places in `pyplot.py` where `Axes` was referred to as a union type broke sphinx in ways that I could not at the time figure out how to resolve.\r\n\r\nIt is possible sphinx has changed how it resolves links in type hints since then, I have not checked.\r\n\r\n\r\nThat said, this reference should work for type checkers, I'm pretty sure (and does work for mypy for instance, which is what we use for our CI).\r\n\r\nIt is true that `matplotlib.axes` is not imported by default:\r\n\r\n```python\r\n>>> import matplotlib\r\n>>> matplotlib.axes\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/kyle/src/scipy/matplotlib/lib/matplotlib/_api/__init__.py\", line 217, in __getattr__\r\n    raise AttributeError(\r\nAttributeError: module 'matplotlib' has no attribute 'axes'\r\n```\r\n\r\nAdding the explicit imports (I just did it in the `if TYPE_CHECKING:` block since its working around type checker limitations) appears to fix the problems (for some reason did not fix one of the `backend_bases` flags, not sure why):\r\n\r\n```diff\r\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\r\nindex 2376c62439..426892afca 100644\r\n--- a/lib/matplotlib/pyplot.py\r\n+++ b/lib/matplotlib/pyplot.py\r\n@@ -90,6 +90,9 @@ if TYPE_CHECKING:\r\n     import PIL.Image\r\n     from numpy.typing import ArrayLike\r\n \r\n+    import matplotlib.axes\r\n+    import matplotlib.artist\r\n+    import matplotlib.backend_bases\r\n     from matplotlib.axis import Tick\r\n     from matplotlib.axes._base import _AxesBase\r\n     from matplotlib.backend_bases import RendererBase, Event\r\n```\r\n\r\nThe remaining flags I see from pyright in pyplot.py are largely due to either:\r\n\r\na) types are narrowed in ways pyright doesn't (or can't) know e.g.:\r\n   - we looked up an rcParam, so we know the type narrowed\r\n   - we do a `hasattr` check before accessing an optional attribute\r\n   \r\nb) a small handful of artist functions that do not get type hints because of the complexity of doing so (its not impossible, just never got around to it and didn't hold the rest of the work on it)\r\n   - https://github.com/ksunden/matplotlib/blob/bd4469d1e4eebaa3d21f5e80aac4d76267a6a2d4/tools/boilerplate.py#L419\r\n   \r\nI have no issue with paring down the number of flags we get with pyright, though mypy remains my preference for CI purposes for now (not totally opposed to both, but did not optimize for pyright). There were ~3000 flags from pyright that mypy did not flag when we first added type hints (10k if you include tests), so not trivial.\r\n\r\nI do use a pyright-based LSP/editor integration, but it doesn't play well with editable meson installs, so mostly don't get mpl flags unless I go looking for them.\r\n\nI like the `if TYPE_CHECKING` solution better. It works for now and would not bother sphinx as well.\r\n\r\nLet me know if you want a PR for that.\r\n\r\nOff topic: I prefer pyright for now as it does not hang up once an error is encountered unlike pyright. Also it seems to have support for PEP 695 generics, and it has some strong arguments in its comparison to [mypy](https://github.com/microsoft/pyright/blob/main/docs/mypy-comparison.md). I would prefer mypy but it automatically skips if a type cannot be inferred and that to me is a big bummer. Pyright on the other hand does not need to append `None` on functions that do not return anything which is a bit less clutter imo.", "created_at": "2024-05-15T17:52:16Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28201, "instance_id": "matplotlib__matplotlib-28201", "issue_numbers": ["28199", "0000"], "base_commit": "eb172732c4fb3eaa692a1a5c7c4f5a528cc598ff", "patch": "diff --git a/doc/api/next_api_changes/deprecations/28201-AT.rst b/doc/api/next_api_changes/deprecations/28201-AT.rst\nnew file mode 100644\nindex 000000000000..56205315a7c1\n--- /dev/null\n+++ b/doc/api/next_api_changes/deprecations/28201-AT.rst\n@@ -0,0 +1,3 @@\n+``Poly3DCollection.get_vector``\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+... is deprecated with no replacement.\ndiff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 44585ccd05e7..ec4ab07e4874 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -14,7 +14,7 @@\n from contextlib import contextmanager\n \n from matplotlib import (\n-    artist, cbook, colors as mcolors, lines, text as mtext,\n+    _api, artist, cbook, colors as mcolors, lines, text as mtext,\n     path as mpath)\n from matplotlib.collections import (\n     Collection, LineCollection, PolyCollection, PatchCollection, PathCollection)\n@@ -948,7 +948,11 @@ def set_zsort(self, zsort):\n         self._sort_zpos = None\n         self.stale = True\n \n+    @_api.deprecated(\"3.10\")\n     def get_vector(self, segments3d):\n+        return self._get_vector(segments3d)\n+\n+    def _get_vector(self, segments3d):\n         \"\"\"Optimize points for projection.\"\"\"\n         if len(segments3d):\n             xs, ys, zs = np.vstack(segments3d).T\n@@ -974,7 +978,7 @@ def set_verts(self, verts, closed=True):\n             Whether the polygon should be closed by adding a CLOSEPOLY\n             connection at the end.\n         \"\"\"\n-        self.get_vector(verts)\n+        self._get_vector(verts)\n         # 2D verts will be updated at draw time\n         super().set_verts([], False)\n         self._closed = closed\n", "test_patch": "", "problem_statement": "[MNT]: Misleading function name `Poly3DCollection.get_vector()`\n### Summary\n\nI came across this function `Poly3DCollection.get_vector()`, that just sets some internal variables. It's only called once in the codebase at `Poly3DCollection.set_vector()`, and isn't overriding anything from parent classes.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/d67f08e449a114a08c694c614ac847c565fbb372/lib/mpl_toolkits/mplot3d/art3d.py#L951-L962\n\n### Proposed fix\n\n`Poly3DCollection.get_vector()` should be renamed to something more appropriate, or deprecated and function code moved into `Poly3DCollection.set_vector()`\n", "hints_text": "This should be made private and public access deprecated.  It is technically public so should go through the normal deprecation cycle.\r\n\r\nI think renaming to `_get_vector` (or similar) is the first step as if we inline it we would have to carry two copies for the deprecation cycle (even though we are _sure_ no one is using it because we have been \"sure\" and wrong in the past).\r\n\r\nIt looks like this method came into the code base in edd492e866b0d43b497540f7c0fccc7fbba1021f in 2009 as part of the initial merged of mplot3d into the main codebase (!!).  It looks like this name makes sense when used in context of `set_verts`.", "created_at": "2024-05-09T18:14:36Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28186, "instance_id": "matplotlib__matplotlib-28186", "issue_numbers": ["28180", "0000"], "base_commit": "ce15014066654ec176e3244d33dbd07137b09f8d", "patch": "diff --git a/lib/matplotlib/_mathtext.py b/lib/matplotlib/_mathtext.py\nindex 6e4df209b1f9..e47c58c72f63 100644\n--- a/lib/matplotlib/_mathtext.py\n+++ b/lib/matplotlib/_mathtext.py\n@@ -2278,14 +2278,14 @@ def symbol(self, s: str, loc: int,\n \n         if c in self._spaced_symbols:\n             # iterate until we find previous character, needed for cases\n-            # such as ${ -2}$, $ -2$, or $   -2$.\n+            # such as $=-2$, ${ -2}$, $ -2$, or $   -2$.\n             prev_char = next((c for c in s[:loc][::-1] if c != ' '), '')\n             # Binary operators at start of string should not be spaced\n             # Also, operators in sub- or superscripts should not be spaced\n             if (self._in_subscript_or_superscript or (\n                     c in self._binary_operators and (\n-                    len(s[:loc].split()) == 0 or prev_char == '{' or\n-                    prev_char in self._left_delims))):\n+                    len(s[:loc].split()) == 0 or prev_char in {\n+                        '{', *self._left_delims, *self._relation_symbols}))):\n                 return [char]\n             else:\n                 return [Hlist([self._make_space(0.2),\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.pdf b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.pdf\nnew file mode 100644\nindex 000000000000..31ec241a04fc\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.pdf differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.png b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.png\nnew file mode 100644\nindex 000000000000..a4ce71fb244b\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.svg b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.svg\nnew file mode 100644\nindex 000000000000..01650aa1cfc5\n--- /dev/null\n+++ b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_cm_83.svg\n@@ -0,0 +1,199 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n+  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n+<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"378pt\" height=\"54pt\" viewBox=\"0 0 378 54\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n+ <metadata>\n+  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n+   <cc:Work>\n+    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n+    <dc:date>2024-05-08T19:52:27.776189</dc:date>\n+    <dc:format>image/svg+xml</dc:format>\n+    <dc:creator>\n+     <cc:Agent>\n+      <dc:title>Matplotlib v3.10.0.dev150+gec4808956b.d20240508, https://matplotlib.org/</dc:title>\n+     </cc:Agent>\n+    </dc:creator>\n+   </cc:Work>\n+  </rdf:RDF>\n+ </metadata>\n+ <defs>\n+  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n+ </defs>\n+ <g id=\"figure_1\">\n+  <g id=\"patch_1\">\n+   <path d=\"M 0 54 \n+L 378 54 \n+L 378 0 \n+L 0 0 \n+z\n+\" style=\"fill: #ffffff\"/>\n+  </g>\n+  <g id=\"text_1\">\n+   <!-- $a=-b-c$ -->\n+   <g transform=\"translate(162.42 30.31125) scale(0.12 -0.12)\">\n+    <defs>\n+     <path id=\"Cmmi10-61\" d=\"M 1113 -72 \n+Q 709 -72 476 233 \n+Q 244 538 244 953 \n+Q 244 1363 456 1803 \n+Q 669 2244 1030 2536 \n+Q 1391 2828 1806 2828 \n+Q 1997 2828 2147 2725 \n+Q 2297 2622 2381 2444 \n+Q 2453 2700 2663 2700 \n+Q 2744 2700 2798 2651 \n+Q 2853 2603 2853 2522 \n+Q 2853 2503 2851 2493 \n+Q 2850 2484 2847 2472 \n+L 2400 684 \n+Q 2356 494 2356 372 \n+Q 2356 97 2541 97 \n+Q 2741 97 2845 351 \n+Q 2950 606 3022 941 \n+Q 3034 978 3072 978 \n+L 3150 978 \n+Q 3175 978 3190 956 \n+Q 3206 934 3206 916 \n+Q 3094 469 2961 198 \n+Q 2828 -72 2528 -72 \n+Q 2313 -72 2147 54 \n+Q 1981 181 1941 391 \n+Q 1528 -72 1113 -72 \n+z\n+M 1119 97 \n+Q 1350 97 1567 270 \n+Q 1784 444 1941 678 \n+Q 1947 684 1947 697 \n+L 2291 2088 \n+L 2297 2106 \n+Q 2259 2334 2132 2498 \n+Q 2006 2663 1791 2663 \n+Q 1575 2663 1389 2486 \n+Q 1203 2309 1075 2069 \n+Q 950 1813 836 1366 \n+Q 722 919 722 672 \n+Q 722 450 817 273 \n+Q 913 97 1119 97 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"Cmr10-3d\" d=\"M 481 850 \n+Q 428 850 393 890 \n+Q 359 931 359 978 \n+Q 359 1031 393 1068 \n+Q 428 1106 481 1106 \n+L 4500 1106 \n+Q 4547 1106 4581 1068 \n+Q 4616 1031 4616 978 \n+Q 4616 931 4581 890 \n+Q 4547 850 4500 850 \n+L 481 850 \n+z\n+M 481 2094 \n+Q 428 2094 393 2131 \n+Q 359 2169 359 2222 \n+Q 359 2269 393 2309 \n+Q 428 2350 481 2350 \n+L 4500 2350 \n+Q 4547 2350 4581 2309 \n+Q 4616 2269 4616 2222 \n+Q 4616 2169 4581 2131 \n+Q 4547 2094 4500 2094 \n+L 481 2094 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"Cmsy10-a1\" d=\"M 653 1472 \n+Q 600 1472 565 1512 \n+Q 531 1553 531 1600 \n+Q 531 1647 565 1687 \n+Q 600 1728 653 1728 \n+L 4325 1728 \n+Q 4375 1728 4408 1687 \n+Q 4441 1647 4441 1600 \n+Q 4441 1553 4408 1512 \n+Q 4375 1472 4325 1472 \n+L 653 1472 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"Cmmi10-62\" d=\"M 1106 -72 \n+Q 719 -72 503 231 \n+Q 288 534 288 941 \n+Q 288 1000 317 1173 \n+Q 347 1347 347 1388 \n+L 966 3872 \n+Q 991 3981 997 4044 \n+Q 997 4147 581 4147 \n+Q 519 4147 519 4231 \n+Q 522 4247 533 4287 \n+Q 544 4328 561 4350 \n+Q 578 4372 609 4372 \n+L 1472 4441 \n+Q 1550 4441 1550 4359 \n+L 1075 2472 \n+Q 1438 2828 1806 2828 \n+Q 2078 2828 2273 2684 \n+Q 2469 2541 2566 2306 \n+Q 2663 2072 2663 1806 \n+Q 2663 1497 2542 1167 \n+Q 2422 838 2209 555 \n+Q 1997 272 1712 100 \n+Q 1428 -72 1106 -72 \n+z\n+M 1119 97 \n+Q 1338 97 1528 280 \n+Q 1719 463 1838 691 \n+Q 1966 947 2077 1386 \n+Q 2188 1825 2188 2088 \n+Q 2188 2316 2092 2489 \n+Q 1997 2663 1791 2663 \n+Q 1559 2663 1348 2492 \n+Q 1138 2322 978 2088 \n+L 800 1363 \n+Q 697 959 691 716 \n+Q 691 475 795 286 \n+Q 900 97 1119 97 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"Cmmi10-63\" d=\"M 750 763 \n+Q 750 484 892 290 \n+Q 1034 97 1300 97 \n+Q 1681 97 2032 272 \n+Q 2384 447 2606 756 \n+Q 2625 775 2656 775 \n+Q 2688 775 2720 739 \n+Q 2753 703 2753 672 \n+Q 2753 647 2741 634 \n+Q 2506 306 2109 117 \n+Q 1713 -72 1288 -72 \n+Q 981 -72 747 73 \n+Q 513 219 384 462 \n+Q 256 706 256 1013 \n+Q 256 1444 497 1869 \n+Q 738 2294 1138 2561 \n+Q 1538 2828 1978 2828 \n+Q 2266 2828 2495 2689 \n+Q 2725 2550 2725 2278 \n+Q 2725 2103 2623 1979 \n+Q 2522 1856 2350 1856 \n+Q 2247 1856 2176 1920 \n+Q 2106 1984 2106 2088 \n+Q 2106 2238 2215 2344 \n+Q 2325 2450 2472 2450 \n+L 2484 2450 \n+Q 2409 2559 2267 2611 \n+Q 2125 2663 1972 2663 \n+Q 1597 2663 1315 2342 \n+Q 1034 2022 892 1576 \n+Q 750 1131 750 763 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+    </defs>\n+    <use xlink:href=\"#Cmmi10-61\" transform=\"translate(0 0.609375)\"/>\n+    <use xlink:href=\"#Cmr10-3d\" transform=\"translate(70.341797 0.609375)\"/>\n+    <use xlink:href=\"#Cmsy10-a1\" transform=\"translate(165.585938 0.609375)\"/>\n+    <use xlink:href=\"#Cmmi10-62\" transform=\"translate(243.271484 0.609375)\"/>\n+    <use xlink:href=\"#Cmsy10-a1\" transform=\"translate(303.75 0.609375)\"/>\n+    <use xlink:href=\"#Cmmi10-63\" transform=\"translate(398.994141 0.609375)\"/>\n+   </g>\n+  </g>\n+ </g>\n+</svg>\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.pdf b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.pdf\nnew file mode 100644\nindex 000000000000..e09af853ea1f\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.pdf differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.png b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.png\nnew file mode 100644\nindex 000000000000..8a03c6e92bc6\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.svg b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.svg\nnew file mode 100644\nindex 000000000000..b0a6fe95cfa3\n--- /dev/null\n+++ b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavusans_83.svg\n@@ -0,0 +1,159 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n+  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n+<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"378pt\" height=\"54pt\" viewBox=\"0 0 378 54\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n+ <metadata>\n+  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n+   <cc:Work>\n+    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n+    <dc:date>2024-05-08T19:52:35.349617</dc:date>\n+    <dc:format>image/svg+xml</dc:format>\n+    <dc:creator>\n+     <cc:Agent>\n+      <dc:title>Matplotlib v3.10.0.dev150+gec4808956b.d20240508, https://matplotlib.org/</dc:title>\n+     </cc:Agent>\n+    </dc:creator>\n+   </cc:Work>\n+  </rdf:RDF>\n+ </metadata>\n+ <defs>\n+  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n+ </defs>\n+ <g id=\"figure_1\">\n+  <g id=\"patch_1\">\n+   <path d=\"M 0 54 \n+L 378 54 \n+L 378 0 \n+L 0 0 \n+z\n+\" style=\"fill: #ffffff\"/>\n+  </g>\n+  <g id=\"text_1\">\n+   <!-- $a=-b-c$ -->\n+   <g transform=\"translate(158.4 30.31125) scale(0.12 -0.12)\">\n+    <defs>\n+     <path id=\"DejaVuSans-Oblique-61\" d=\"M 3438 1997 \n+L 3047 0 \n+L 2472 0 \n+L 2578 531 \n+Q 2325 219 2001 64 \n+Q 1678 -91 1281 -91 \n+Q 834 -91 548 182 \n+Q 263 456 263 884 \n+Q 263 1497 752 1853 \n+Q 1241 2209 2100 2209 \n+L 2900 2209 \n+L 2931 2363 \n+Q 2938 2388 2941 2417 \n+Q 2944 2447 2944 2509 \n+Q 2944 2788 2717 2942 \n+Q 2491 3097 2081 3097 \n+Q 1800 3097 1504 3025 \n+Q 1209 2953 897 2809 \n+L 997 3341 \n+Q 1322 3463 1633 3523 \n+Q 1944 3584 2234 3584 \n+Q 2853 3584 3176 3315 \n+Q 3500 3047 3500 2534 \n+Q 3500 2431 3484 2292 \n+Q 3469 2153 3438 1997 \n+z\n+M 2816 1759 \n+L 2241 1759 \n+Q 1534 1759 1195 1570 \n+Q 856 1381 856 984 \n+Q 856 709 1029 553 \n+Q 1203 397 1509 397 \n+Q 1978 397 2328 733 \n+Q 2678 1069 2791 1631 \n+L 2816 1759 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSans-3d\" d=\"M 678 2906 \n+L 4684 2906 \n+L 4684 2381 \n+L 678 2381 \n+L 678 2906 \n+z\n+M 678 1631 \n+L 4684 1631 \n+L 4684 1100 \n+L 678 1100 \n+L 678 1631 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSans-2212\" d=\"M 678 2272 \n+L 4684 2272 \n+L 4684 1741 \n+L 678 1741 \n+L 678 2272 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSans-Oblique-62\" d=\"M 3169 2138 \n+Q 3169 2591 2961 2847 \n+Q 2753 3103 2388 3103 \n+Q 2122 3103 1889 2973 \n+Q 1656 2844 1484 2597 \n+Q 1303 2338 1198 1995 \n+Q 1094 1653 1094 1313 \n+Q 1094 881 1298 636 \n+Q 1503 391 1863 391 \n+Q 2134 391 2365 517 \n+Q 2597 644 2772 891 \n+Q 2950 1147 3059 1487 \n+Q 3169 1828 3169 2138 \n+z\n+M 1381 2969 \n+Q 1594 3256 1914 3420 \n+Q 2234 3584 2584 3584 \n+Q 3122 3584 3439 3221 \n+Q 3756 2859 3756 2241 \n+Q 3756 1734 3570 1259 \n+Q 3384 784 3041 416 \n+Q 2816 172 2522 40 \n+Q 2228 -91 1906 -91 \n+Q 1566 -91 1316 65 \n+Q 1066 222 909 531 \n+L 806 0 \n+L 231 0 \n+L 1178 4863 \n+L 1753 4863 \n+L 1381 2969 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSans-Oblique-63\" d=\"M 3431 3366 \n+L 3316 2797 \n+Q 3109 2947 2876 3022 \n+Q 2644 3097 2394 3097 \n+Q 2119 3097 1870 3000 \n+Q 1622 2903 1453 2725 \n+Q 1184 2453 1037 2087 \n+Q 891 1722 891 1331 \n+Q 891 859 1127 628 \n+Q 1363 397 1844 397 \n+Q 2081 397 2348 469 \n+Q 2616 541 2906 684 \n+L 2797 116 \n+Q 2547 13 2283 -39 \n+Q 2019 -91 1741 -91 \n+Q 1044 -91 669 257 \n+Q 294 606 294 1253 \n+Q 294 1797 489 2255 \n+Q 684 2713 1069 3078 \n+Q 1331 3328 1684 3456 \n+Q 2038 3584 2456 3584 \n+Q 2700 3584 2940 3529 \n+Q 3181 3475 3431 3366 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+    </defs>\n+    <use xlink:href=\"#DejaVuSans-Oblique-61\" transform=\"translate(0 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSans-3d\" transform=\"translate(80.761719 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSans-2212\" transform=\"translate(184.033203 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSans-Oblique-62\" transform=\"translate(267.822266 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSans-2212\" transform=\"translate(350.78125 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSans-Oblique-63\" transform=\"translate(454.052734 0.015625)\"/>\n+   </g>\n+  </g>\n+ </g>\n+</svg>\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.pdf b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.pdf\nnew file mode 100644\nindex 000000000000..db06e90e5490\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.pdf differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.png b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.png\nnew file mode 100644\nindex 000000000000..d5c323fa9bd2\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.svg b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.svg\nnew file mode 100644\nindex 000000000000..1c3ac31ac5eb\n--- /dev/null\n+++ b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_dejavuserif_83.svg\n@@ -0,0 +1,148 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n+  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n+<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"378pt\" height=\"54pt\" viewBox=\"0 0 378 54\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n+ <metadata>\n+  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n+   <cc:Work>\n+    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n+    <dc:date>2024-05-08T19:52:37.707152</dc:date>\n+    <dc:format>image/svg+xml</dc:format>\n+    <dc:creator>\n+     <cc:Agent>\n+      <dc:title>Matplotlib v3.10.0.dev150+gec4808956b.d20240508, https://matplotlib.org/</dc:title>\n+     </cc:Agent>\n+    </dc:creator>\n+   </cc:Work>\n+  </rdf:RDF>\n+ </metadata>\n+ <defs>\n+  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n+ </defs>\n+ <g id=\"figure_1\">\n+  <g id=\"patch_1\">\n+   <path d=\"M 0 54 \n+L 378 54 \n+L 378 0 \n+L 0 0 \n+z\n+\" style=\"fill: #ffffff\"/>\n+  </g>\n+  <g id=\"text_1\">\n+   <!-- $a=-b-c$ -->\n+   <g transform=\"translate(158.58 30.31125) scale(0.12 -0.12)\">\n+    <defs>\n+     <path id=\"DejaVuSerif-Italic-61\" d=\"M 2325 519 \n+Q 1909 -91 1238 -91 \n+Q 688 -91 409 281 \n+Q 216 544 216 919 \n+Q 216 1078 250 1256 \n+Q 463 2359 1231 2928 \n+Q 1884 3413 2675 3413 \n+Q 3206 3413 3388 3322 \n+L 2806 331 \n+L 3300 331 \n+L 3238 0 \n+L 2225 0 \n+L 2325 519 \n+z\n+M 822 938 \n+Q 822 269 1469 269 \n+Q 1863 269 2130 583 \n+Q 2397 897 2516 1497 \n+L 2806 3003 \n+L 2806 3003 \n+Q 2806 3094 2556 3094 \n+Q 1956 3094 1491 2625 \n+Q 1028 2153 863 1297 \n+Q 822 1097 822 938 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSerif-3d\" d=\"M 678 2894 \n+L 4684 2894 \n+L 4684 2394 \n+L 678 2394 \n+L 678 2894 \n+z\n+M 678 1619 \n+L 4684 1619 \n+L 4684 1119 \n+L 678 1119 \n+L 678 1619 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSerif-2212\" d=\"M 678 2259 \n+L 4684 2259 \n+L 4684 1753 \n+L 678 1753 \n+L 678 2259 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSerif-Italic-62\" d=\"M 1153 4531 \n+L 600 4531 \n+L 666 4863 \n+L 1794 4863 \n+L 1394 2803 \n+Q 1622 3116 1912 3264 \n+Q 2203 3413 2588 3413 \n+Q 3200 3413 3494 2928 \n+Q 3688 2609 3688 2163 \n+Q 3688 1928 3634 1663 \n+Q 3481 881 3000 395 \n+Q 2519 -91 1906 -91 \n+Q 1522 -91 1289 57 \n+Q 1056 206 950 519 \n+L 850 0 \n+L 275 0 \n+L 1153 4531 \n+z\n+M 1141 1497 \n+Q 1091 1250 1091 1053 \n+Q 1091 769 1191 581 \n+Q 1359 269 1797 269 \n+Q 2238 269 2533 622 \n+Q 2828 975 2963 1663 \n+Q 3025 1978 3025 2225 \n+Q 3025 2513 2938 2703 \n+Q 2781 3053 2338 3053 \n+Q 1900 3053 1609 2737 \n+Q 1319 2422 1203 1825 \n+L 1141 1497 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"DejaVuSerif-Italic-63\" d=\"M 3163 997 \n+Q 2938 466 2536 187 \n+Q 2134 -91 1584 -91 \n+Q 859 -91 513 388 \n+Q 272 722 272 1203 \n+Q 272 1419 319 1663 \n+Q 475 2459 1008 2936 \n+Q 1541 3413 2266 3413 \n+Q 2581 3413 2879 3339 \n+Q 3178 3266 3463 3116 \n+L 3300 2266 \n+L 2966 2266 \n+Q 2966 2309 2966 2347 \n+Q 2966 2722 2803 2903 \n+Q 2622 3103 2213 3103 \n+Q 1747 3103 1439 2742 \n+Q 1131 2381 991 1663 \n+Q 928 1334 928 1078 \n+Q 928 778 1016 581 \n+Q 1181 219 1650 219 \n+Q 2022 219 2281 412 \n+Q 2541 606 2700 997 \n+L 3163 997 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+    </defs>\n+    <use xlink:href=\"#DejaVuSerif-Italic-61\" transform=\"translate(0 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSerif-3d\" transform=\"translate(78.583984 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSerif-2212\" transform=\"translate(181.337891 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSerif-Italic-62\" transform=\"translate(265.126953 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSerif-2212\" transform=\"translate(348.105469 0.015625)\"/>\n+    <use xlink:href=\"#DejaVuSerif-Italic-63\" transform=\"translate(450.859375 0.015625)\"/>\n+   </g>\n+  </g>\n+ </g>\n+</svg>\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.pdf b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.pdf\nnew file mode 100644\nindex 000000000000..6679c1e8af13\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.pdf differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.png b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.png\nnew file mode 100644\nindex 000000000000..d6f17be104fa\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.svg b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.svg\nnew file mode 100644\nindex 000000000000..3268d5d3d26d\n--- /dev/null\n+++ b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stix_83.svg\n@@ -0,0 +1,159 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n+  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n+<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"378pt\" height=\"54pt\" viewBox=\"0 0 378 54\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n+ <metadata>\n+  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n+   <cc:Work>\n+    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n+    <dc:date>2024-05-08T19:52:30.625389</dc:date>\n+    <dc:format>image/svg+xml</dc:format>\n+    <dc:creator>\n+     <cc:Agent>\n+      <dc:title>Matplotlib v3.10.0.dev150+gec4808956b.d20240508, https://matplotlib.org/</dc:title>\n+     </cc:Agent>\n+    </dc:creator>\n+   </cc:Work>\n+  </rdf:RDF>\n+ </metadata>\n+ <defs>\n+  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n+ </defs>\n+ <g id=\"figure_1\">\n+  <g id=\"patch_1\">\n+   <path d=\"M 0 54 \n+L 378 54 \n+L 378 0 \n+L 0 0 \n+z\n+\" style=\"fill: #ffffff\"/>\n+  </g>\n+  <g id=\"text_1\">\n+   <!-- $a=-b-c$ -->\n+   <g transform=\"translate(164.52 30.31125) scale(0.12 -0.12)\">\n+    <defs>\n+     <path id=\"STIXGeneral-Italic-61\" d=\"M 2963 710 \n+L 3046 640 \n+Q 2688 205 2518 70 \n+Q 2349 -64 2157 -64 \n+Q 1901 -64 1901 198 \n+Q 1901 358 2048 934 \n+Q 1690 397 1389 163 \n+Q 1088 -70 749 -70 \n+Q 467 -70 288 125 \n+Q 109 320 109 672 \n+Q 109 1158 387 1664 \n+Q 666 2170 1094 2496 \n+Q 1523 2822 1939 2822 \n+Q 2368 2822 2451 2451 \n+L 2522 2758 \n+L 2541 2778 \n+L 2931 2822 \n+L 2976 2803 \n+Q 2970 2778 2938 2669 \n+Q 2368 595 2368 346 \n+Q 2368 262 2458 262 \n+Q 2554 262 2790 525 \n+L 2963 710 \n+z\n+M 2336 2310 \n+Q 2336 2477 2240 2579 \n+Q 2144 2682 1978 2682 \n+Q 1542 2682 1139 2093 \n+Q 928 1779 787 1395 \n+Q 646 1011 646 717 \n+Q 646 243 1030 243 \n+Q 1408 243 1843 870 \n+Q 2336 1581 2336 2310 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Regular-3d\" d=\"M 4077 2048 \n+L 307 2048 \n+L 307 2470 \n+L 4077 2470 \n+L 4077 2048 \n+z\n+M 4077 768 \n+L 307 768 \n+L 307 1190 \n+L 4077 1190 \n+L 4077 768 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Regular-2212\" d=\"M 3974 1408 \n+L 410 1408 \n+L 410 1830 \n+L 3974 1830 \n+L 3974 1408 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Italic-62\" d=\"M 1043 1856 \n+L 1050 1856 \n+Q 1370 2387 1654 2604 \n+Q 1939 2822 2285 2822 \n+Q 2618 2822 2822 2617 \n+Q 3027 2413 3027 2054 \n+Q 3027 1562 2726 1062 \n+Q 2426 563 1942 246 \n+Q 1459 -70 979 -70 \n+Q 685 -70 416 32 \n+Q 147 134 147 269 \n+L 147 307 \n+L 1056 3654 \n+Q 1114 3885 1114 3955 \n+Q 1114 4058 1053 4080 \n+Q 992 4102 704 4115 \n+L 704 4224 \n+Q 1184 4282 1683 4371 \n+L 1715 4339 \n+L 1581 3814 \n+L 1043 1856 \n+z\n+M 2483 1958 \n+Q 2483 2509 2035 2509 \n+Q 1594 2509 1158 1773 \n+Q 954 1427 826 1008 \n+Q 698 589 698 294 \n+Q 698 77 992 77 \n+Q 1414 77 1779 454 \n+Q 2074 762 2278 1187 \n+Q 2483 1613 2483 1958 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Italic-63\" d=\"M 2240 685 \n+L 2342 621 \n+Q 2048 250 1769 90 \n+Q 1491 -70 1133 -70 \n+Q 678 -70 435 179 \n+Q 192 429 192 915 \n+Q 192 1344 409 1744 \n+Q 627 2144 979 2432 \n+Q 1472 2822 2048 2822 \n+Q 2342 2822 2531 2675 \n+Q 2720 2528 2720 2304 \n+Q 2720 2176 2630 2086 \n+Q 2541 1997 2413 1997 \n+Q 2285 1997 2224 2070 \n+Q 2163 2144 2163 2253 \n+Q 2163 2310 2211 2403 \n+Q 2259 2496 2259 2560 \n+Q 2259 2688 2022 2688 \n+Q 1619 2688 1325 2381 \n+Q 742 1766 742 890 \n+Q 742 544 889 352 \n+Q 1037 160 1312 160 \n+Q 1562 160 1766 281 \n+Q 1971 403 2240 685 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+    </defs>\n+    <use xlink:href=\"#STIXGeneral-Italic-61\" transform=\"translate(0 0.703125)\"/>\n+    <use xlink:href=\"#STIXGeneral-Regular-3d\" transform=\"translate(64.539987 0.703125)\"/>\n+    <use xlink:href=\"#STIXGeneral-Regular-2212\" transform=\"translate(147.479968 0.703125)\"/>\n+    <use xlink:href=\"#STIXGeneral-Italic-62\" transform=\"translate(215.979953 0.703125)\"/>\n+    <use xlink:href=\"#STIXGeneral-Regular-2212\" transform=\"translate(280.419934 0.703125)\"/>\n+    <use xlink:href=\"#STIXGeneral-Italic-63\" transform=\"translate(363.359915 0.703125)\"/>\n+   </g>\n+  </g>\n+ </g>\n+</svg>\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.pdf b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.pdf\nnew file mode 100644\nindex 000000000000..22e75bb9b0a3\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.pdf differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.png b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.png\nnew file mode 100644\nindex 000000000000..c23070cdf8b9\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.svg b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.svg\nnew file mode 100644\nindex 000000000000..97c40174b3ef\n--- /dev/null\n+++ b/lib/matplotlib/tests/baseline_images/test_mathtext/mathtext_stixsans_83.svg\n@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n+  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n+<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"378pt\" height=\"54pt\" viewBox=\"0 0 378 54\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n+ <metadata>\n+  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n+   <cc:Work>\n+    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n+    <dc:date>2024-05-08T19:52:33.020611</dc:date>\n+    <dc:format>image/svg+xml</dc:format>\n+    <dc:creator>\n+     <cc:Agent>\n+      <dc:title>Matplotlib v3.10.0.dev150+gec4808956b.d20240508, https://matplotlib.org/</dc:title>\n+     </cc:Agent>\n+    </dc:creator>\n+   </cc:Work>\n+  </rdf:RDF>\n+ </metadata>\n+ <defs>\n+  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n+ </defs>\n+ <g id=\"figure_1\">\n+  <g id=\"patch_1\">\n+   <path d=\"M 0 54 \n+L 378 54 \n+L 378 0 \n+L 0 0 \n+z\n+\" style=\"fill: #ffffff\"/>\n+  </g>\n+  <g id=\"text_1\">\n+   <!-- $a=-b-c$ -->\n+   <g transform=\"translate(164.64 30.31125) scale(0.12 -0.12)\">\n+    <defs>\n+     <path id=\"STIXGeneral-Italic-1d622\" d=\"M 1082 1933 \n+L 819 2131 \n+Q 1011 2566 1366 2764 \n+Q 1722 2963 2138 2963 \n+Q 2541 2963 2765 2793 \n+Q 2989 2624 2989 2317 \n+Q 2989 2227 2957 2086 \n+L 2554 486 \n+Q 2502 301 2502 0 \n+L 1958 0 \n+L 1990 282 \n+Q 1530 -64 954 -64 \n+Q 672 -64 512 61 \n+Q 352 186 352 422 \n+Q 352 1498 2400 1882 \n+L 2451 2093 \n+Q 2464 2157 2464 2189 \n+Q 2464 2336 2339 2422 \n+Q 2214 2509 2010 2509 \n+Q 1523 2509 1178 1933 \n+L 1082 1933 \n+z\n+M 2138 845 \n+L 2285 1421 \n+Q 890 1197 890 614 \n+Q 890 390 1197 390 \n+Q 1632 390 2138 845 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Regular-3d\" d=\"M 4077 2048 \n+L 307 2048 \n+L 307 2470 \n+L 4077 2470 \n+L 4077 2048 \n+z\n+M 4077 768 \n+L 307 768 \n+L 307 1190 \n+L 4077 1190 \n+L 4077 768 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Regular-2212\" d=\"M 3974 1408 \n+L 410 1408 \n+L 410 1830 \n+L 3974 1830 \n+L 3974 1408 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Italic-1d623\" d=\"M 1990 4346 \n+L 1568 2650 \n+Q 1997 2963 2464 2963 \n+Q 2912 2963 3168 2704 \n+Q 3424 2445 3424 2003 \n+Q 3424 1165 2816 550 \n+Q 2208 -64 1440 -64 \n+Q 781 -64 474 301 \n+L 1453 4224 \n+L 1939 4378 \n+L 1990 4346 \n+z\n+M 1389 1933 \n+L 1056 602 \n+Q 1254 390 1587 390 \n+Q 2048 390 2470 793 \n+Q 2893 1197 2893 1843 \n+Q 2893 2150 2729 2329 \n+Q 2566 2509 2253 2509 \n+Q 2022 2509 1788 2358 \n+Q 1555 2208 1389 1933 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+     <path id=\"STIXGeneral-Italic-1d624\" d=\"M 3219 2374 \n+L 2854 2029 \n+L 2752 2029 \n+Q 2662 2509 2144 2509 \n+Q 1734 2509 1347 2118 \n+Q 960 1728 960 1082 \n+Q 960 755 1142 572 \n+Q 1325 390 1619 390 \n+Q 2138 390 2611 1062 \n+L 2970 845 \n+Q 2355 -64 1466 -64 \n+Q 992 -64 710 205 \n+Q 429 474 429 960 \n+Q 429 1792 1017 2377 \n+Q 1606 2963 2285 2963 \n+Q 2637 2963 2889 2816 \n+Q 3142 2669 3219 2374 \n+z\n+\" transform=\"scale(0.015625)\"/>\n+    </defs>\n+    <use xlink:href=\"#STIXGeneral-Italic-1d622\" transform=\"translate(0 0.59375)\"/>\n+    <use xlink:href=\"#STIXGeneral-Regular-3d\" transform=\"translate(59.919986 0.59375)\"/>\n+    <use xlink:href=\"#STIXGeneral-Regular-2212\" transform=\"translate(143.539969 0.59375)\"/>\n+    <use xlink:href=\"#STIXGeneral-Italic-1d623\" transform=\"translate(212.039954 0.59375)\"/>\n+    <use xlink:href=\"#STIXGeneral-Regular-2212\" transform=\"translate(276.759943 0.59375)\"/>\n+    <use xlink:href=\"#STIXGeneral-Italic-1d624\" transform=\"translate(360.379926 0.59375)\"/>\n+   </g>\n+  </g>\n+ </g>\n+</svg>\ndiff --git a/lib/matplotlib/tests/test_mathtext.py b/lib/matplotlib/tests/test_mathtext.py\nindex e3659245d0e7..6ce327f38341 100644\n--- a/lib/matplotlib/tests/test_mathtext.py\n+++ b/lib/matplotlib/tests/test_mathtext.py\n@@ -124,6 +124,7 @@\n     r'$,$ $.$ $1{,}234{, }567{ , }890$ and $1,234,567,890$',  # github issue 5799\n     r'$\\left(X\\right)_{a}^{b}$',  # github issue 7615\n     r'$\\dfrac{\\$100.00}{y}$',  # github issue #1888\n+    r'$a=-b-c$'  # github issue #28180\n ]\n # 'svgastext' tests switch svg output to embed text as text (rather than as\n # paths).\n", "problem_statement": "[Bug]: mathtext should distinguish between unary and binary minus\n### Bug summary\n\nTeX inserts a (thin?) space after a binary minus, but not before a unary minus.  Typographically, I believe this does look nicer.\r\nmathtext does not distinguish the two cases and always puts in a thin space.  It would be nice if it followed tex's behavior.\n\n### Code for reproduction\n\n```Python\nfrom pylab import *\r\nfigtext(.2, .6, \"$a=-b-c$\")\r\nfigtext(.2, .5, \"$a=-b-c$\", usetex=True)\n```\n\n\n### Actual outcome\n\n![Figure_1](https://github.com/matplotlib/matplotlib/assets/1322974/a42a6019-eea7-4bc3-9397-fb2cafe4dc2c)\r\nCompare the spacing before the \"b\" and the \"c\": they are different with usetex, but not with mathtext.\n\n### Expected outcome\n\nRemove the space in mathtext before the unary minus.\n\n### Additional information\n\nProbably involves reading the TeXbook to figure out what is TeX's logic for distinguishing unary and binary minus.\r\nTagging as good first issue *solely* because there should be no API design at all, but medium (-hard) difficulty because that'll require both reading the TeXbook and learning about mathtext's implementation.  However I would guess there's no \"strong\" technical blockers either.\n\n### Operating system\n\nany\n\n### Matplotlib Version\n\n3.10.0.dev137+g9387431ab6\n\n### Matplotlib Backend\n\nqtagg\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nno\n\n### Installation\n\ngit checkout\n", "hints_text": "### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nI did some preliminary research and it seems TeX actually does not distinguish between the unary and binary minus symbol. Maybe I was reading an outdated version of the TeXbook, but I cannot find any mention of unary operators. I will keep looking to find out what logic TeX is using to change the spacing for unary operators.\nAnother example where I think the difference is clear:\r\n![Figure_1](https://github.com/matplotlib/matplotlib/assets/1322974/4fafabc6-0475-4cbd-808a-584b2a8c6a69)\r\n\nI have found the issue, the code contains logic to do different spacing for unary minus if the unary minus happens directly after a parenthesis or if the minus is the first character in the equation, but the code does not contain logic to create a unary minus after an equals sign. It is an easy fix, but I am still working on setting up a testing environment to verify my fix.", "created_at": "2024-05-08T20:33:52Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28177, "instance_id": "matplotlib__matplotlib-28177", "issue_numbers": ["28170", "0000"], "base_commit": "0fd212d11cf87a200eb2cfd5b0357d05fc7b3f32", "patch": "diff --git a/doc/api/next_api_changes/behavior/28177-REC.rst b/doc/api/next_api_changes/behavior/28177-REC.rst\nnew file mode 100644\nindex 000000000000..d7ea8ec0e947\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/28177-REC.rst\n@@ -0,0 +1,7 @@\n+(Sub)Figure.get_figure\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+...in future will by default return the direct parent figure, which may be a SubFigure.\n+This will make the default behavior consistent with the\n+`~matplotlib.artist.Artist.get_figure` method of other artists.  To control the\n+behavior, use the newly introduced *root* parameter.\ndiff --git a/doc/api/next_api_changes/deprecations/28177-REC.rst b/doc/api/next_api_changes/deprecations/28177-REC.rst\nnew file mode 100644\nindex 000000000000..a3e630630aeb\n--- /dev/null\n+++ b/doc/api/next_api_changes/deprecations/28177-REC.rst\n@@ -0,0 +1,5 @@\n+(Sub)Figure.set_figure\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+...is deprecated and in future will always raise an exception.  The parent and\n+root figures of a (Sub)Figure are set at instantiation and cannot be changed.\ndiff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex d5b8631e95df..baf3b01ee6e5 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -181,7 +181,7 @@ def __init__(self):\n         self._stale = True\n         self.stale_callback = None\n         self._axes = None\n-        self.figure = None\n+        self._parent_figure = None\n \n         self._transform = None\n         self._transformSet = False\n@@ -251,7 +251,7 @@ def remove(self):\n             if self.figure:\n                 if not _ax_flag:\n                     self.figure.stale = True\n-                self.figure = None\n+                self._parent_figure = None\n \n         else:\n             raise NotImplementedError('cannot remove artist')\n@@ -720,34 +720,49 @@ def set_path_effects(self, path_effects):\n     def get_path_effects(self):\n         return self._path_effects\n \n-    def get_figure(self):\n-        \"\"\"Return the `.Figure` instance the artist belongs to.\"\"\"\n-        return self.figure\n+    def get_figure(self, root=False):\n+        \"\"\"\n+        Return the `.Figure` or `.SubFigure` instance the artist belongs to.\n+\n+        Parameters\n+        ----------\n+        root : bool, default=False\n+            If False, return the (Sub)Figure this artist is on.  If True,\n+            return the root Figure for a nested tree of SubFigures.\n+        \"\"\"\n+        if root and self._parent_figure is not None:\n+            return self._parent_figure.get_figure(root=True)\n+\n+        return self._parent_figure\n \n     def set_figure(self, fig):\n         \"\"\"\n-        Set the `.Figure` instance the artist belongs to.\n+        Set the `.Figure` or `.SubFigure` instance the artist belongs to.\n \n         Parameters\n         ----------\n-        fig : `~matplotlib.figure.Figure`\n+        fig : `~matplotlib.figure.Figure` or `~matplotlib.figure.SubFigure`\n         \"\"\"\n         # if this is a no-op just return\n-        if self.figure is fig:\n+        if self._parent_figure is fig:\n             return\n         # if we currently have a figure (the case of both `self.figure`\n         # and *fig* being none is taken care of above) we then user is\n         # trying to change the figure an artist is associated with which\n         # is not allowed for the same reason as adding the same instance\n         # to more than one Axes\n-        if self.figure is not None:\n+        if self._parent_figure is not None:\n             raise RuntimeError(\"Can not put single artist in \"\n                                \"more than one figure\")\n-        self.figure = fig\n-        if self.figure and self.figure is not self:\n+        self._parent_figure = fig\n+        if self._parent_figure and self._parent_figure is not self:\n             self.pchanged()\n         self.stale = True\n \n+    figure = property(get_figure, set_figure,\n+                      doc=(\"The (Sub)Figure that the artist is on.  For more \"\n+                           \"control, use the `get_figure` method.\"))\n+\n     def set_clip_box(self, clipbox):\n         \"\"\"\n         Set the artist's clip `.Bbox`.\ndiff --git a/lib/matplotlib/artist.pyi b/lib/matplotlib/artist.pyi\nindex 50f41b7f70e5..3059600e488c 100644\n--- a/lib/matplotlib/artist.pyi\n+++ b/lib/matplotlib/artist.pyi\n@@ -31,7 +31,8 @@ class _Unset: ...\n class Artist:\n     zorder: float\n     stale_callback: Callable[[Artist, bool], None] | None\n-    figure: Figure | SubFigure | None\n+    @property\n+    def figure(self) -> Figure | SubFigure: ...\n     clipbox: BboxBase | None\n     def __init__(self) -> None: ...\n     def remove(self) -> None: ...\n@@ -87,8 +88,8 @@ class Artist:\n     ) -> None: ...\n     def set_path_effects(self, path_effects: list[AbstractPathEffect]) -> None: ...\n     def get_path_effects(self) -> list[AbstractPathEffect]: ...\n-    def get_figure(self) -> Figure | None: ...\n-    def set_figure(self, fig: Figure) -> None: ...\n+    def get_figure(self, root: bool = ...) -> Figure | SubFigure | None: ...\n+    def set_figure(self, fig: Figure | SubFigure) -> None: ...\n     def set_clip_box(self, clipbox: BboxBase | None) -> None: ...\n     def set_clip_path(\n         self,\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 18ff80a51e5a..4606e5c01aec 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1296,7 +1296,7 @@ def __clear(self):\n         self._gridOn = mpl.rcParams['axes.grid']\n         old_children, self._children = self._children, []\n         for chld in old_children:\n-            chld.axes = chld.figure = None\n+            chld.axes = chld._parent_figure = None\n         self._mouseover_set = _OrderedSet()\n         self.child_axes = []\n         self._current_image = None  # strictly for pyplot via _sci, _gci\ndiff --git a/lib/matplotlib/axes/_base.pyi b/lib/matplotlib/axes/_base.pyi\nindex 751dcd248a5c..1fdc0750f0bc 100644\n--- a/lib/matplotlib/axes/_base.pyi\n+++ b/lib/matplotlib/axes/_base.pyi\n@@ -13,7 +13,7 @@ from matplotlib.cm import ScalarMappable\n from matplotlib.legend import Legend\n from matplotlib.lines import Line2D\n from matplotlib.gridspec import SubplotSpec, GridSpec\n-from matplotlib.figure import Figure\n+from matplotlib.figure import Figure, SubFigure\n from matplotlib.image import AxesImage\n from matplotlib.patches import Patch\n from matplotlib.scale import ScaleBase\n@@ -81,7 +81,7 @@ class _AxesBase(martist.Artist):\n     def get_subplotspec(self) -> SubplotSpec | None: ...\n     def set_subplotspec(self, subplotspec: SubplotSpec) -> None: ...\n     def get_gridspec(self) -> GridSpec | None: ...\n-    def set_figure(self, fig: Figure) -> None: ...\n+    def set_figure(self, fig: Figure | SubFigure) -> None: ...\n     @property\n     def viewLim(self) -> Bbox: ...\n     def get_xaxis_transform(\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 1d522f8defa2..51bac3455a28 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -30,6 +30,7 @@\n from contextlib import ExitStack\n import inspect\n import itertools\n+import functools\n import logging\n from numbers import Integral\n import threading\n@@ -227,6 +228,67 @@ def get_children(self):\n                 *self.legends,\n                 *self.subfigs]\n \n+    def get_figure(self, root=None):\n+        \"\"\"\n+        Return the `.Figure` or `.SubFigure` instance the (Sub)Figure belongs to.\n+\n+        Parameters\n+        ----------\n+        root : bool, default=True\n+            If False, return the (Sub)Figure this artist is on.  If True,\n+            return the root Figure for a nested tree of SubFigures.\n+\n+            .. deprecated:: 3.10\n+\n+                From version 3.12 *root* will default to False.\n+        \"\"\"\n+        if self._root_figure is self:\n+            # Top level Figure\n+            return self\n+\n+        if self._parent is self._root_figure:\n+            # Return early to prevent the deprecation warning when *root* does not\n+            # matter\n+            return self._parent\n+\n+        if root is None:\n+            # When deprecation expires, consider removing the docstring and just\n+            # inheriting the one from Artist.\n+            message = ('From Matplotlib 3.12 SubFigure.get_figure will by default '\n+                       'return the direct parent figure, which may be a SubFigure. '\n+                       'To suppress this warning, pass the root parameter.  Pass '\n+                       '`True` to maintain the old behavior and `False` to opt-in to '\n+                       'the future behavior.')\n+            _api.warn_deprecated('3.10', message=message)\n+            root = True\n+\n+        if root:\n+            return self._root_figure\n+\n+        return self._parent\n+\n+    def set_figure(self, fig):\n+        \"\"\"\n+        .. deprecated:: 3.10\n+            Currently this method will raise an exception if *fig* is anything other\n+            than the root `.Figure` this (Sub)Figure is on.  In future it will always\n+            raise an exception.\n+        \"\"\"\n+        no_switch = (\"The parent and root figures of a (Sub)Figure are set at \"\n+                     \"instantiation and cannot be changed.\")\n+        if fig is self._root_figure:\n+            _api.warn_deprecated(\n+                \"3.10\",\n+                message=(f\"{no_switch} From Matplotlib 3.12 this operation will raise \"\n+                         \"an exception.\"))\n+            return\n+\n+        raise ValueError(no_switch)\n+\n+    figure = property(functools.partial(get_figure, root=True), set_figure,\n+                      doc=(\"The root `Figure`.  To get the parent of a `SubFigure`, \"\n+                           \"use the `get_figure` method.\"))\n+\n     def contains(self, mouseevent):\n         \"\"\"\n         Test whether the mouse event occurred on the figure.\n@@ -2222,7 +2284,7 @@ def __init__(self, parent, subplotspec, *,\n \n         self._subplotspec = subplotspec\n         self._parent = parent\n-        self.figure = parent.figure\n+        self._root_figure = parent._root_figure\n \n         # subfigures use the parent axstack\n         self._axstack = parent._axstack\n@@ -2503,7 +2565,7 @@ def __init__(self,\n             %(Figure:kwdoc)s\n         \"\"\"\n         super().__init__(**kwargs)\n-        self.figure = self\n+        self._root_figure = self\n         self._layout_engine = None\n \n         if layout is not None:\ndiff --git a/lib/matplotlib/figure.pyi b/lib/matplotlib/figure.pyi\nindex b079312695c1..711f5b77783e 100644\n--- a/lib/matplotlib/figure.pyi\n+++ b/lib/matplotlib/figure.pyi\n@@ -260,7 +260,8 @@ class FigureBase(Artist):\n     ) -> dict[Hashable, Axes]: ...\n \n class SubFigure(FigureBase):\n-    figure: Figure\n+    @property\n+    def figure(self) -> Figure: ...\n     subplotpars: SubplotParams\n     dpi_scale_trans: Affine2D\n     transFigure: Transform\n@@ -298,7 +299,8 @@ class SubFigure(FigureBase):\n     def get_axes(self) -> list[Axes]: ...\n \n class Figure(FigureBase):\n-    figure: Figure\n+    @property\n+    def figure(self) -> Figure: ...\n     bbox_inches: Bbox\n     dpi_scale_trans: Affine2D\n     bbox: BboxBase\ndiff --git a/lib/matplotlib/offsetbox.pyi b/lib/matplotlib/offsetbox.pyi\nindex c222a9b2973e..05e23df4529d 100644\n--- a/lib/matplotlib/offsetbox.pyi\n+++ b/lib/matplotlib/offsetbox.pyi\n@@ -2,7 +2,7 @@ import matplotlib.artist as martist\n from matplotlib.backend_bases import RendererBase, Event, FigureCanvasBase\n from matplotlib.colors import Colormap, Normalize\n import matplotlib.text as mtext\n-from matplotlib.figure import Figure\n+from matplotlib.figure import Figure, SubFigure\n from matplotlib.font_manager import FontProperties\n from matplotlib.image import BboxImage\n from matplotlib.patches import FancyArrowPatch, FancyBboxPatch\n@@ -26,7 +26,7 @@ class OffsetBox(martist.Artist):\n     width: float | None\n     height: float | None\n     def __init__(self, *args, **kwargs) -> None: ...\n-    def set_figure(self, fig: Figure) -> None: ...\n+    def set_figure(self, fig: Figure | SubFigure) -> None: ...\n     def set_offset(\n         self,\n         xy: tuple[float, float]\n@@ -271,7 +271,7 @@ class AnnotationBbox(martist.Artist, mtext._AnnotationBase):\n         | Callable[[RendererBase], Bbox | Transform],\n     ) -> None: ...\n     def get_children(self) -> list[martist.Artist]: ...\n-    def set_figure(self, fig: Figure) -> None: ...\n+    def set_figure(self, fig: Figure | SubFigure) -> None: ...\n     def set_fontsize(self, s: str | float | None = ...) -> None: ...\n     def get_fontsize(self) -> float: ...\n     def get_tightbbox(self, renderer: RendererBase | None = ...) -> Bbox: ...\ndiff --git a/lib/matplotlib/quiver.pyi b/lib/matplotlib/quiver.pyi\nindex 2a043a92b4b5..164f0ab3a77a 100644\n--- a/lib/matplotlib/quiver.pyi\n+++ b/lib/matplotlib/quiver.pyi\n@@ -1,7 +1,7 @@\n import matplotlib.artist as martist\n import matplotlib.collections as mcollections\n from matplotlib.axes import Axes\n-from matplotlib.figure import Figure\n+from matplotlib.figure import Figure, SubFigure\n from matplotlib.text import Text\n from matplotlib.transforms import Transform, Bbox\n \n@@ -49,7 +49,7 @@ class QuiverKey(martist.Artist):\n     ) -> None: ...\n     @property\n     def labelsep(self) -> float: ...\n-    def set_figure(self, fig: Figure) -> None: ...\n+    def set_figure(self, fig: Figure | SubFigure) -> None: ...\n \n class Quiver(mcollections.PolyCollection):\n     X: ArrayLike\n", "test_patch": "diff --git a/ci/mypy-stubtest-allowlist.txt b/ci/mypy-stubtest-allowlist.txt\nindex 73dfb1d8ceb0..d6a0f373048d 100644\n--- a/ci/mypy-stubtest-allowlist.txt\n+++ b/ci/mypy-stubtest-allowlist.txt\n@@ -46,3 +46,6 @@ matplotlib.tri.*TriInterpolator.gradient\n matplotlib.backend_bases.FigureCanvasBase._T\n matplotlib.backend_managers.ToolManager._T\n matplotlib.spines.Spine._T\n+\n+# Parameter inconsistency due to 3.10 deprecation\n+matplotlib.figure.FigureBase.get_figure\ndiff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py\nindex dbb5dd2305e0..edba2c179781 100644\n--- a/lib/matplotlib/tests/test_artist.py\n+++ b/lib/matplotlib/tests/test_artist.py\n@@ -562,3 +562,37 @@ def draw(self, renderer, extra):\n \n     assert 'aardvark' == art.draw(renderer, 'aardvark')\n     assert 'aardvark' == art.draw(renderer, extra='aardvark')\n+\n+\n+def test_get_figure():\n+    fig = plt.figure()\n+    sfig1 = fig.subfigures()\n+    sfig2 = sfig1.subfigures()\n+    ax = sfig2.subplots()\n+\n+    assert fig.get_figure(root=True) is fig\n+    assert fig.get_figure(root=False) is fig\n+\n+    assert ax.get_figure() is sfig2\n+    assert ax.get_figure(root=False) is sfig2\n+    assert ax.get_figure(root=True) is fig\n+\n+    # SubFigure.get_figure has separate implementation but should give consistent\n+    # results to other artists.\n+    assert sfig2.get_figure(root=False) is sfig1\n+    assert sfig2.get_figure(root=True) is fig\n+    # Currently different results by default.\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        assert sfig2.get_figure() is fig\n+    # No deprecation warning if root and parent figure are the same.\n+    assert sfig1.get_figure() is fig\n+\n+    # An artist not yet attached to anything has no figure.\n+    ln = mlines.Line2D([], [])\n+    assert ln.get_figure(root=True) is None\n+    assert ln.get_figure(root=False) is None\n+\n+    # figure attribute is root for (Sub)Figures but parent for other artists.\n+    assert ax.figure is sfig2\n+    assert fig.figure is fig\n+    assert sfig2.figure is fig\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 5a8894b10496..4e73d4091200 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1735,6 +1735,22 @@ def test_warn_colorbar_mismatch():\n         subfig3_1.colorbar(im4_1)\n \n \n+def test_set_figure():\n+    fig = plt.figure()\n+    sfig1 = fig.subfigures()\n+    sfig2 = sfig1.subfigures()\n+\n+    for f in fig, sfig1, sfig2:\n+        with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+            f.set_figure(fig)\n+\n+    with pytest.raises(ValueError, match=\"cannot be changed\"):\n+        sfig2.set_figure(sfig1)\n+\n+    with pytest.raises(ValueError, match=\"cannot be changed\"):\n+        sfig1.set_figure(plt.figure())\n+\n+\n def test_subfigure_row_order():\n     # Test that subfigures are drawn in row-major order.\n     fig = plt.figure()\n", "problem_statement": "[Doc]: `get_figure` may return a `SubFigure`\n### Documentation Link\n\nhttps://matplotlib.org/devdocs/api/_as_gen/matplotlib.artist.Artist.get_figure.html#matplotlib.artist.Artist.get_figure\n\n### Problem\n\nI'm not sure whether this is a documentation issue or a bug.  The docstring for `get_figure` states that it returns a `Figure`, which I think implies the parent figure.  If our artist is on a subfigure, it will return that.  Note that `SubFigure` does not inherit from `Figure`.\r\n\r\n```python\r\nIn [1]: import matplotlib.pyplot as plt\r\n\r\nIn [2]: fig = plt.figure()\r\n\r\nIn [3]: sfig = fig.subfigures()\r\n\r\nIn [4]: ax = sfig.subplots()\r\n\r\nIn [5]: ax.get_figure()\r\nOut[5]: <matplotlib.figure.SubFigure at 0x7dc0ddf4a870>\r\n```\n\n### Suggested improvement\n\nEither\r\n* modify the docstring to clarify you might get the `SubFigure` (and point to how you can get the parent `Figure` if you want it)\r\nor\r\n* fix the method so it returns the parent `Figure`\n", "hints_text": "`SubFigure.get_figure` does return a `Figure`, even if the subfigures are nested.\r\n\r\n```python\r\nIn [6]: sfig2 = sfig.subfigures()\r\n\r\nIn [7]: sfig2.get_figure()\r\nOut[7]: <Figure size 640x480 with 1 Axes>\r\n```\nThis seems inconsistent and likely we haven't thought about it when subfigures were introduced.\r\n\r\nIntuitively, I'd recommend the following behavior: `get_figure()` returns the closest (sub)figure. If we were to go all the way up, it's not possible to get to the next level only.\r\n\r\nThat would imply:\r\n- Change documentation/typing of `Artist.get_figure`\r\n- Change behavior of  `Subfigure.get_figure` to return the containing (sub)figure. - Note that `get_figure` only returns `self.figure`, so `self.figure` should be changed for nested subfigures. I consider it a bug that this is not the containing subfigure. @jklymak do you agree?\r\n\r\n\nHmm that seems inconsistent at least so one way or another is a bug\n\nIt seems that a subfigure wants to know its parent rather than its root? \n\nOoops sorry crosspost w above. I'd have to look at the code a bit. \n> This seems inconsistent and likely we haven't thought about it when subfigures were introduced.\r\n> \r\n> Intuitively, I'd recommend the following behavior: `get_figure()` returns the closest (sub)figure. If we were to go all the way up, it's not possible to get to the next level only.\r\n> \r\n> That would imply:\r\n> \r\n> * Change documentation/typing of `Artist.get_figure`\r\n> * Change behavior of  `Subfigure.get_figure` to return the containing (sub)figure. - Note that `get_figure` only returns `self.figure`, so `self.figure` should be changed for nested subfigures. I consider it a bug that this is not the containing subfigure. @jklymak do you agree?\r\n\r\nHmmm, I fear it's not so simple.  I explicitly set `self.figure =  parent.figure` which therefore resolves to the root figure, and I think that is because artists have things like `self.figure.stale` and `self.figure.suppressComposite` which would somehow have to magically thread themselves through.\r\n\r\nSo I wonder if the correct course of action is to override `get_figure` to return the parent figure, but keep `self.figure` as-is.  In hindsight, it should have been private, I think?\n> So I wonder if the correct course of action is to override `get_figure` to return the parent figure, but keep `self.figure` as-is. In hindsight, it should have been private, I think?\r\n\r\nIt's bad enough that we have a mixture of attributes and getters, having both with slightly different semantics is even worse. I propse to\r\n\r\n- expand `get_figure()` with a parmeter to select between the direct parent and the top-level figure, choosing the appropriate default. - The default should become the same for artists and subfigures, which means an API change for one of them.\r\n- create whatever internal state is necessary to support the behavior (likely `self._parent_figure`)\r\n- keep `self.figure` with the current semantics, but discourate (deprecate?) it's use in favor of `get_figure()` - if needed turn it into a property.\nThe above seems good to me.  \r\nSomething like:\r\n```\r\nget_figure(root=False)\r\n\r\nroot : bool\r\n    If False return the (Sub)Figure this artist is on.  If True, return the root Figure if there is a nested tree of SubFigures.\r\n```\nAh, this also make sense as to why the `subfigure_mosaic` has problems with getting the nesting right.\r\n\r\nStrongly agree we need a version that gets the parent rather than the root.", "created_at": "2024-05-06T16:36:28Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28171, "instance_id": "matplotlib__matplotlib-28171", "issue_numbers": ["28166", "0000"], "base_commit": "9387431ab6ff43ac80f94d52fa9f077643252bcb", "patch": "diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\nindex 740c01226f7d..f4273bc03919 100644\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -3459,6 +3459,10 @@ def remove_toolitem(self, name):\n         backend-specific code to remove an element from the toolbar; it is\n         called when `.ToolManager` emits a `tool_removed_event`.\n \n+        Because some tools are present only on the `.ToolManager` but not on\n+        the `ToolContainer`, this method must be a no-op when called on a tool\n+        absent from the container.\n+\n         .. warning::\n             This is part of the backend implementation and should\n             not be called by end-users.  They should instead call\ndiff --git a/lib/matplotlib/backends/_backend_tk.py b/lib/matplotlib/backends/_backend_tk.py\nindex 693499f4ca01..295f6c41372d 100644\n--- a/lib/matplotlib/backends/_backend_tk.py\n+++ b/lib/matplotlib/backends/_backend_tk.py\n@@ -1011,9 +1011,8 @@ def toggle_toolitem(self, name, toggled):\n                 toolitem.deselect()\n \n     def remove_toolitem(self, name):\n-        for toolitem in self._toolitems[name]:\n+        for toolitem in self._toolitems.pop(name, []):\n             toolitem.pack_forget()\n-        del self._toolitems[name]\n \n     def set_message(self, s):\n         self._message.set(s)\ndiff --git a/lib/matplotlib/backends/backend_gtk3.py b/lib/matplotlib/backends/backend_gtk3.py\nindex d6acd5547b85..49d34f5794e4 100644\n--- a/lib/matplotlib/backends/backend_gtk3.py\n+++ b/lib/matplotlib/backends/backend_gtk3.py\n@@ -446,15 +446,10 @@ def toggle_toolitem(self, name, toggled):\n             toolitem.handler_unblock(signal)\n \n     def remove_toolitem(self, name):\n-        if name not in self._toolitems:\n-            self.toolmanager.message_event(f'{name} not in toolbar', self)\n-            return\n-\n-        for group in self._groups:\n-            for toolitem, _signal in self._toolitems[name]:\n+        for toolitem, _signal in self._toolitems.pop(name, []):\n+            for group in self._groups:\n                 if toolitem in self._groups[group]:\n                     self._groups[group].remove(toolitem)\n-        del self._toolitems[name]\n \n     def _add_separator(self):\n         sep = Gtk.Separator()\ndiff --git a/lib/matplotlib/backends/backend_gtk4.py b/lib/matplotlib/backends/backend_gtk4.py\nindex 7e73a4863212..256a8ec9e864 100644\n--- a/lib/matplotlib/backends/backend_gtk4.py\n+++ b/lib/matplotlib/backends/backend_gtk4.py\n@@ -475,15 +475,10 @@ def toggle_toolitem(self, name, toggled):\n             toolitem.handler_unblock(signal)\n \n     def remove_toolitem(self, name):\n-        if name not in self._toolitems:\n-            self.toolmanager.message_event(f'{name} not in toolbar', self)\n-            return\n-\n-        for group in self._groups:\n-            for toolitem, _signal in self._toolitems[name]:\n+        for toolitem, _signal in self._toolitems.pop(name, []):\n+            for group in self._groups:\n                 if toolitem in self._groups[group]:\n                     self._groups[group].remove(toolitem)\n-        del self._toolitems[name]\n \n     def _add_separator(self):\n         sep = Gtk.Separator()\ndiff --git a/lib/matplotlib/backends/backend_qt.py b/lib/matplotlib/backends/backend_qt.py\nindex db593ae77ded..a93b37799971 100644\n--- a/lib/matplotlib/backends/backend_qt.py\n+++ b/lib/matplotlib/backends/backend_qt.py\n@@ -1007,9 +1007,8 @@ def toggle_toolitem(self, name, toggled):\n             button.toggled.connect(handler)\n \n     def remove_toolitem(self, name):\n-        for button, handler in self._toolitems[name]:\n+        for button, handler in self._toolitems.pop(name, []):\n             button.setParent(None)\n-        del self._toolitems[name]\n \n     def set_message(self, s):\n         self.widgetForAction(self._message_action).setText(s)\ndiff --git a/lib/matplotlib/backends/backend_wx.py b/lib/matplotlib/backends/backend_wx.py\nindex 8064511ac28a..d39edf40f151 100644\n--- a/lib/matplotlib/backends/backend_wx.py\n+++ b/lib/matplotlib/backends/backend_wx.py\n@@ -1257,9 +1257,8 @@ def toggle_toolitem(self, name, toggled):\n         self.Refresh()\n \n     def remove_toolitem(self, name):\n-        for tool, handler in self._toolitems[name]:\n+        for tool, handler in self._toolitems.pop(name, []):\n             self.DeleteTool(tool.Id)\n-        del self._toolitems[name]\n \n     def set_message(self, s):\n         self._label_text.SetLabel(s)\n", "test_patch": "", "problem_statement": "[Bug]: Removing tools from the toolmanager that are not on the toolbar triggers an exception\n### Bug summary\r\n\r\nWhen removing a tool from the toolmanager, if the tool is not also present on the toolbar, it triggers a KeyError exception. It does remove the tool, however.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\nplt.rcParams['toolbar'] = 'toolmanager'\r\n\r\nfig = plt.figure()\r\ntm = fig.canvas.manager.toolmanager\r\n\r\n# Removing a tool that is on the toolbar causes no issue\r\ntm.remove_tool(\"zoom\")\r\n\r\n# However, removing a tool that is not on the toolbar does results in an exception\r\ntm.remove_tool(\"grid\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nTraceback (most recent call last):\r\n  File \"...\\matplotlib\\cbook.py\", line 298, in process\r\n    func(*args, **kwargs)\r\n  File \"...\\matplotlib\\backend_bases.py\", line 3234, in <lambda>\r\n    lambda event: self.remove_toolitem(event.tool.name))\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"...\\matplotlib\\backends\\backend_qt.py\", line 964, in remove_toolitem\r\n    for button, handler in self._toolitems[name]:\r\n                           ~~~~~~~~~~~~~~~^^^^^^\r\nKeyError: 'grid'\r\n\r\n### Expected outcome\r\n\r\nShould not raise any exception\r\n\r\n### Additional information\r\n\r\nIt does perform the necessary operations to remove the tool from the toolmanager, then tries to remove it from the toolbar as well. This second step is what fails.\r\n\r\nAs I understand, the remove_tool method of the Toolmanager class (in file backend_managers) fires a \"tool_removed_event\" after having deleted the tool from the toolmanager:\r\n\r\n```Python\r\n    event = ToolEvent('tool_removed_event', self, tool)\r\n    self._callbacks.process(event.name, event)\r\n```\r\nThis in turns triggers the remove_toolitem method of the Toolbar class, which reads (in file backend_qt, but it is the same in the other backends that I have checked):\r\n\r\n```Python\r\n    def remove_toolitem(self, name):\r\n        for button, handler in self._toolitems[name]:\r\n            button.setParent(None)\r\n        del self._toolitems[name]\r\n```\r\nname is the name of the tool. The first line raises an exception because it is not present in the toolbar and thus it is not a key of self._toolitems\r\n\r\nI dont know what the best practice would be, and I'm no formally trained developper, but one option to solve the problem is to catch the exception in this last method (remove_toolitem). Perhaps something like that:\r\n```Python\r\n    def remove_toolitem(self, name):\r\n        if name not in self._toolitems.keys():\r\n            return\r\n        for button, handler in self._toolitems[name]:\r\n            button.setParent(None)\r\n        del self._toolitems[name]\r\n```\r\nor\r\n```Python\r\n    def remove_toolitem(self, name):\r\n        try:\r\n            toolitem = self._toolitems[name]\r\n        except KeyError:\r\n            return\r\n        for button, handler in toolitem:\r\n            button.setParent(None)\r\n        del self._toolitems[name]\r\n```\r\nThe drawback is that it would have to be changed for the different backends (I see at least backend_qt.py, _backend_tk.py, backend_wx.py). I believe that going one step higher in the class hierarchy to fix it for all backends at once would be significantly more involved. Indeed, the ToolContainerBase class (backend_bases file), from which the Toolbar class for the different backends inherits, connects the \"tool_removed_event\" to the \"remove_toolitem\" method in its __init__: \r\n\r\n```Python\r\n        toolmanager.toolmanager_connect(\r\n            'tool_removed_event',\r\n            lambda event: self.remove_toolitem(event.tool.name))\r\n```\r\n\r\nAs far as I understand, there is no way to know, at this point, whether the tool of interest is indeed \"registered\" in the toolbar because each backend is free to implement \"tool storage\" as it pleases. \r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.8 (I checked that the problematic code is identical in the newest version)\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg and Tkinter (checked both)\r\n\r\n### Python version\r\n\r\n3.11\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n", "hints_text": "", "created_at": "2024-05-04T12:28:50Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28116, "instance_id": "matplotlib__matplotlib-28116", "issue_numbers": ["28114"], "base_commit": "199c31fa64f46d2b3dff59b0921eb0472f72570b", "patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex c14973560ac3..cec9f0be4355 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -44,10 +44,17 @@ def _gen_cmap_registry():\n             colors.LinearSegmentedColormap.from_list(name, spec, _LUTSIZE))\n \n     # Register colormap aliases for gray and grey.\n-    cmap_d['grey'] = cmap_d['gray']\n-    cmap_d['gist_grey'] = cmap_d['gist_gray']\n-    cmap_d['gist_yerg'] = cmap_d['gist_yarg']\n-    cmap_d['Grays'] = cmap_d['Greys']\n+    aliases = {\n+        # alias -> original name\n+        'grey': 'gray',\n+        'gist_grey': 'gist_gray',\n+        'gist_yerg': 'gist_yarg',\n+        'Grays': 'Greys',\n+    }\n+    for alias, original_name in aliases.items():\n+        cmap = cmap_d[original_name].copy()\n+        cmap.name = alias\n+        cmap_d[alias] = cmap\n \n     # Generate reversed cmaps.\n     for cmap in list(cmap_d.values()):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 63f2d4f00399..c8b44b2dea14 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -1689,6 +1689,11 @@ def test_set_cmap_mismatched_name():\n     assert cmap_returned.name == \"wrong-cmap\"\n \n \n+def test_cmap_alias_names():\n+    assert matplotlib.colormaps[\"gray\"].name == \"gray\"  # original\n+    assert matplotlib.colormaps[\"grey\"].name == \"grey\"  # alias\n+\n+\n def test_to_rgba_array_none_color_with_alpha_param():\n     # effective alpha for color \"none\" must always be 0 to achieve a vanishing color\n     # even explicit alpha must be ignored\n", "problem_statement": "[Bug]: mpl.colormaps[ \"Grays\" ].name is \"Greys\", not \"Grays\"\n### Bug summary\n\nA minor bug, with a simple fix: `mpl.colormaps[ \"Grays\" ].name`  is \"Greys\", not \"Greys\"\n\n### Code for reproduction\n\n```Python\nprint( f'{mpl.colormaps[ \"Grays\" ].name = }' )  # Greys\n```\n\n\n### Actual outcome\n\nmpl.colormaps[ \"Grays\" ].name = 'Greys'\n\n### Expected outcome\n\nmpl.colormaps[ \"Grays\" ].name = 'Grays'\n\n### Additional information\n\nA suggested fix: in [cm.py](https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/cm.py), after lines 47 - 50\r\n```\r\n# Register colormap aliases for gray and grey.\r\ncmap_d['grey'] = cmap_d['gray']\r\ncmap_d['gist_grey'] = cmap_d['gist_gray']\r\ncmap_d['gist_yerg'] = cmap_d['gist_yarg']\r\ncmap_d['Grays'] = cmap_d['Greys']\r\n```\r\nchange their .name s too:\r\n```\r\ncmap_d['grey'].name = 'grey'\r\ncmap_d['gist_grey'].name = 'gist_grey'\r\ncmap_d['gist_yerg'].name = 'gist_yerg'\r\ncmap_d['Grays'].name = 'Grays'\r\n```\n\n### Operating system\n\nmacos 10.15.7\n\n### Matplotlib Version\n\n3.8.4\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.10.0\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "It's a bit more involved than just changing the name attribute. There is currently only one underlying `Colorbar` instance for both. I see two possible resolutions:\r\n- Create explicit copies for the aliases. In this case we'd not really be aliasing anymore but just have two separate colormaps that happen to have the same data values.\r\n- Make the aliasing an explicit concept of `ColormapRegistry`.\r\n\r\nNot sure which approach is better. The first is less complex, but we loose from-code accessible information on aliases (not that we have used that before). So slight tendency to go with the first. We can always build explicit aliases in later if we need to.\nMy knee-jerk reaction was \"can we just keep living with this\", but looking into it a bit, if colormaps are added through `ColorMapRegitry.register` then we mutate the passed colormap to match the name we registered it as!  I think the grays/grey miss-match exists because we pass the dictionary in rather than registering them one-by-one.\r\n\r\nThe `__eq__` check on `ColorMaps` only looks at the values of the LUT (and if it is attached to a colarbar with extends which is odd but did not track down why) and ignores the name. \r\n\r\nOn `__getitem__` we already return a copy so making a copy for the aliases is not a huge conceptual step and the users can't tell if we have one instance we are returning copies of two identical instances we are returning copies of.\r\n\r\nThis also suggests that rather than fixing the name on the way in, we should be fixing the name on the way out (as we have already paid to make a copy).\nThis issue inspired me to do https://github.com/matplotlib/matplotlib/pull/28115\n> My knee-jerk reaction was \"can we just keep living with this\"\r\n\r\nThat would be still an option.\r\n\r\n> On `__getitem__` we already return a copy\r\n\r\nThis was added to prevent users from manipulating the builtin colormaps, e.g. via `set_over()`. There is the idea to make colormaps immutable eventually. While immuatbility is the better option, I'm unsure whether we want to enforce the associated API change. But if we do, the copy could go away.\r\n\r\n> This also suggests that rather than fixing the name on the way in, we should be fixing the name on the way out (as we have already paid to make a copy).\r\n\r\nI don't follow that argument. The existing copy only means: We *can* fix the name of the way out without additional cost. I still think it's not the right way, because we have a sketchy internal state. `self._cmaps['grey'].name == \"gray\"` should not happen. Either we invest in the handful of additional copies on the way in (Option 1 from above). Or, we do not have `_cmaps['grey']` and and let `__getitem__` handle alias resolution. But this also means we have to specially handle aliases in keys, which brings us to the explicit alias concept (Option 2 from above).", "created_at": "2024-04-22T07:53:27Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28077, "instance_id": "matplotlib__matplotlib-28077", "issue_numbers": ["28069", "0000"], "base_commit": "9955a7c19e392e52fc4a2d3a7eb59b33d69e5965", "patch": "diff --git a/lib/matplotlib/backends/_backend_tk.py b/lib/matplotlib/backends/_backend_tk.py\nindex 5eca9229b61d..693499f4ca01 100644\n--- a/lib/matplotlib/backends/_backend_tk.py\n+++ b/lib/matplotlib/backends/_backend_tk.py\n@@ -843,7 +843,7 @@ def save_figure(self, *args):\n \n         default_extension = self.canvas.get_default_filetype()\n         default_filetype = self.canvas.get_supported_filetypes()[default_extension]\n-        filetype_variable = tk.StringVar(self, default_filetype)\n+        filetype_variable = tk.StringVar(self.canvas.get_tk_widget(), default_filetype)\n \n         # adding a default extension seems to break the\n         # asksaveasfilename dialog when you choose various save types\n", "test_patch": "", "problem_statement": "[Bug]: Can't save with custom toolbar\n### Bug summary\n\nCannot save figure when using `mpl.rcParams[\"toolbar\"] = \"toolmanager\"`. \r\nAttempting to save the figure by pressing `Ctrl+S` or by clicking the `save` button shows the error, and does not open the save window.\n\n### Code for reproduction\n\n```Python\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\n\r\nmpl.rcParams[\"toolbar\"] = \"toolmanager\"\r\n\r\nplt.subplots(1, 1)\r\nplt.show()\n```\n\n\n### Actual outcome\n\n```\r\nE:\\bug.py:4: UserWarning: Treat the new Tool classes introduced in v1.5 as experimental for now; the API and rcParam may change in future versions.\r\n  mpl.rcParams[\"toolbar\"] = \"toolmanager\"\r\n```\r\n```\r\nException in Tkinter callback\r\nTraceback (most recent call last):\r\n  File \"C:\\Python311\\Lib\\tkinter\\__init__.py\", line 1948, in __call__\r\n    return self.func(*args)\r\n           ^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python311\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 1002, in <lambda>\r\n    lambda: self._button_click(name))\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python311\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 1023, in _button_click\r\n    self.trigger_tool(name)\r\n  File \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python311\\site-packages\\matplotlib\\backend_bases.py\", line 3308, in trigger_tool\r\n    self.toolmanager.trigger_tool(name, sender=self)\r\n  File \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python311\\site-packages\\matplotlib\\backend_managers.py\", line 340, in trigger_tool\r\n    tool.trigger(sender, canvasevent, data)  # Actually trigger Tool.\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python311\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 1046, in trigger\r\n    NavigationToolbar2Tk.save_figure(\r\n  File \"C:\\Users\\admin\\AppData\\Roaming\\Python\\Python311\\site-packages\\matplotlib\\backends\\_backend_tk.py\", line 849, in save_figure\r\n    filetype_variable = tk.StringVar(self, default_filetype)\r\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Python311\\Lib\\tkinter\\__init__.py\", line 562, in __init__\r\n    Variable.__init__(self, master, value, name)\r\n  File \"C:\\Python311\\Lib\\tkinter\\__init__.py\", line 394, in __init__\r\n    self._root = master._root()\r\n                 ^^^^^^^^^^^^\r\nAttributeError: 'types.SimpleNamespace' object has no attribute '_root'\r\n```\n\n### Expected outcome\n\nA save dialog window with the default file type as `.png`.\n\n### Additional information\n\nReplacing `self` with `None` from the line below did suppress the error, but did not set the default file type.\r\nhttps://github.com/matplotlib/matplotlib/blob/9955a7c19e392e52fc4a2d3a7eb59b33d69e5965/lib/matplotlib/backends/_backend_tk.py#L846\n\n### Operating system\n\nWindows 10\n\n### Matplotlib Version\n\n3.8.3\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\nPython 3.11.4\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "", "created_at": "2024-04-15T09:41:34Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28074, "instance_id": "matplotlib__matplotlib-28074", "issue_numbers": ["13435", "0000"], "base_commit": "6e8fcbbb0cf5db7bc065aae9f6708b02a7bc51aa", "patch": "diff --git a/doc/api/next_api_changes/deprecations/28074-TS.rst b/doc/api/next_api_changes/deprecations/28074-TS.rst\nnew file mode 100644\nindex 000000000000..6a8b5d4b21b8\n--- /dev/null\n+++ b/doc/api/next_api_changes/deprecations/28074-TS.rst\n@@ -0,0 +1,9 @@\n+``boxplot`` and ``bxp`` *vert* parameter, and ``rcParams[\"boxplot.vertical\"]``\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+The parameter *vert: bool* has been deprecated on `~.Axes.boxplot` and\n+`~.Axes.bxp`. It is replaced by *orientation: {\"vertical\", \"horizontal\"}*\n+for API consistency.\n+\n+``rcParams[\"boxplot.vertical\"]``, which controlled the orientation of ``boxplot``,\n+is deprecated without replacement.\ndiff --git a/doc/users/next_whats_new/boxplot_orientation.rst b/doc/users/next_whats_new/boxplot_orientation.rst\nnew file mode 100644\nindex 000000000000..19193b530a9e\n--- /dev/null\n+++ b/doc/users/next_whats_new/boxplot_orientation.rst\n@@ -0,0 +1,21 @@\n+``boxplot`` and ``bxp`` orientation parameter\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Boxplots have a new parameter *orientation: {\"vertical\", \"horizontal\"}*\n+to change the orientation of the plot. This replaces the deprecated\n+*vert: bool* parameter.\n+\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Example of creating 4 horizontal boxplots.\n+\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    fig, ax = plt.subplots()\n+    np.random.seed(19680801)\n+    all_data = [np.random.normal(0, std, 100) for std in range(6, 10)]\n+\n+    ax.boxplot(all_data, orientation='horizontal')\n+    plt.show()\ndiff --git a/galleries/examples/statistics/boxplot_demo.py b/galleries/examples/statistics/boxplot_demo.py\nindex f7f1078b2d27..46d6c7609807 100644\n--- a/galleries/examples/statistics/boxplot_demo.py\n+++ b/galleries/examples/statistics/boxplot_demo.py\n@@ -46,11 +46,11 @@\n axs[1, 0].set_title(\"don't show\\noutlier points\")\n \n # horizontal boxes\n-axs[1, 1].boxplot(data, sym='rs', vert=False)\n+axs[1, 1].boxplot(data, sym='rs', orientation='horizontal')\n axs[1, 1].set_title('horizontal boxes')\n \n # change whisker length\n-axs[1, 2].boxplot(data, sym='rs', vert=False, whis=0.75)\n+axs[1, 2].boxplot(data, sym='rs', orientation='horizontal', whis=0.75)\n axs[1, 2].set_title('change whisker length')\n \n fig.subplots_adjust(left=0.08, right=0.98, bottom=0.05, top=0.9,\n@@ -107,7 +107,7 @@\n fig.canvas.manager.set_window_title('A Boxplot Example')\n fig.subplots_adjust(left=0.075, right=0.95, top=0.9, bottom=0.25)\n \n-bp = ax1.boxplot(data, notch=False, sym='+', vert=True, whis=1.5)\n+bp = ax1.boxplot(data, notch=False, sym='+', orientation='vertical', whis=1.5)\n plt.setp(bp['boxes'], color='black')\n plt.setp(bp['whiskers'], color='black')\n plt.setp(bp['fliers'], color='red', marker='+')\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 50540d862b5f..e7b484bc99a9 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -3819,9 +3819,10 @@ def apply_mask(arrays, mask):\n     @_api.make_keyword_only(\"3.9\", \"notch\")\n     @_preprocess_data()\n     @_api.rename_parameter(\"3.9\", \"labels\", \"tick_labels\")\n-    def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n-                positions=None, widths=None, patch_artist=None,\n-                bootstrap=None, usermedians=None, conf_intervals=None,\n+    def boxplot(self, x, notch=None, sym=None, vert=None,\n+                orientation='vertical', whis=None, positions=None,\n+                widths=None, patch_artist=None, bootstrap=None,\n+                usermedians=None, conf_intervals=None,\n                 meanline=None, showmeans=None, showcaps=None,\n                 showbox=None, showfliers=None, boxprops=None,\n                 tick_labels=None, flierprops=None, medianprops=None,\n@@ -3877,9 +3878,21 @@ def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n             the fliers.  If `None`, then the fliers default to 'b+'.  More\n             control is provided by the *flierprops* parameter.\n \n-        vert : bool, default: :rc:`boxplot.vertical`\n-            If `True`, draws vertical boxes.\n-            If `False`, draw horizontal boxes.\n+        vert : bool, optional\n+            .. deprecated:: 3.10\n+                Use *orientation* instead.\n+\n+                If this is given during the deprecation period, it overrides\n+                the *orientation* parameter.\n+\n+            If True, plots the boxes vertically.\n+            If False, plots the boxes horizontally.\n+\n+        orientation : {'vertical', 'horizontal'}, default: 'vertical'\n+            If 'horizontal', plots the boxes horizontally.\n+            Otherwise, plots the boxes vertically.\n+\n+            .. versionadded:: 3.10\n \n         whis : float or (float, float), default: 1.5\n             The position of the whiskers.\n@@ -4047,8 +4060,6 @@ def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n                                        labels=tick_labels, autorange=autorange)\n         if notch is None:\n             notch = mpl.rcParams['boxplot.notch']\n-        if vert is None:\n-            vert = mpl.rcParams['boxplot.vertical']\n         if patch_artist is None:\n             patch_artist = mpl.rcParams['boxplot.patchartist']\n         if meanline is None:\n@@ -4148,13 +4159,14 @@ def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n                            meanline=meanline, showfliers=showfliers,\n                            capprops=capprops, whiskerprops=whiskerprops,\n                            manage_ticks=manage_ticks, zorder=zorder,\n-                           capwidths=capwidths, label=label)\n+                           capwidths=capwidths, label=label,\n+                           orientation=orientation)\n         return artists\n \n     @_api.make_keyword_only(\"3.9\", \"widths\")\n-    def bxp(self, bxpstats, positions=None, widths=None, vert=True,\n-            patch_artist=False, shownotches=False, showmeans=False,\n-            showcaps=True, showbox=True, showfliers=True,\n+    def bxp(self, bxpstats, positions=None, widths=None, vert=None,\n+            orientation='vertical', patch_artist=False, shownotches=False,\n+            showmeans=False, showcaps=True, showbox=True, showfliers=True,\n             boxprops=None, whiskerprops=None, flierprops=None,\n             medianprops=None, capprops=None, meanprops=None,\n             meanline=False, manage_ticks=True, zorder=None,\n@@ -4213,9 +4225,21 @@ def bxp(self, bxpstats, positions=None, widths=None, vert=True,\n             Either a scalar or a vector and sets the width of each cap.\n             The default is ``0.5*(width of the box)``, see *widths*.\n \n-        vert : bool, default: True\n-            If `True` (default), makes the boxes vertical.\n-            If `False`, makes horizontal boxes.\n+        vert : bool, optional\n+            .. deprecated:: 3.10\n+                Use *orientation* instead.\n+\n+                If this is given during the deprecation period, it overrides\n+                the *orientation* parameter.\n+\n+            If True, plots the boxes vertically.\n+            If False, plots the boxes horizontally.\n+\n+        orientation : {'vertical', 'horizontal'}, default: 'vertical'\n+            If 'horizontal', plots the boxes horizontally.\n+            Otherwise, plots the boxes vertically.\n+\n+            .. versionadded:: 3.10\n \n         patch_artist : bool, default: False\n             If `False` produces boxes with the `.Line2D` artist.\n@@ -4334,8 +4358,29 @@ def merge_kw_rc(subkey, explicit, zdelta=0, usemarker=True):\n         if meanprops is None or removed_prop not in meanprops:\n             mean_kw[removed_prop] = ''\n \n+        # vert and orientation parameters are linked until vert's\n+        # deprecation period expires. vert only takes precedence\n+        # if set to False.\n+        if vert is None:\n+            vert = mpl.rcParams['boxplot.vertical']\n+        else:\n+            _api.warn_deprecated(\n+                \"3.10\",\n+                name=\"vert: bool\",\n+                alternative=\"orientation: {'vertical', 'horizontal'}\"\n+            )\n+        if vert is False:\n+            orientation = 'horizontal'\n+        _api.check_in_list(['horizontal', 'vertical'], orientation=orientation)\n+\n+        if not mpl.rcParams['boxplot.vertical']:\n+            _api.warn_deprecated(\n+                \"3.10\",\n+                name='boxplot.vertical', obj_type=\"rcparam\"\n+            )\n+\n         # vertical or horizontal plot?\n-        maybe_swap = slice(None) if vert else slice(None, None, -1)\n+        maybe_swap = slice(None) if orientation == 'vertical' else slice(None, None, -1)\n \n         def do_plot(xs, ys, **kwargs):\n             return self.plot(*[xs, ys][maybe_swap], **kwargs)[0]\n@@ -4460,7 +4505,7 @@ def do_patch(xs, ys, **kwargs):\n                     artist.set_label(lbl)\n \n         if manage_ticks:\n-            axis_name = \"x\" if vert else \"y\"\n+            axis_name = \"x\" if orientation == 'vertical' else \"y\"\n             interval = getattr(self.dataLim, f\"interval{axis_name}\")\n             axis = self._axis_map[axis_name]\n             positions = axis.convert_units(positions)\ndiff --git a/lib/matplotlib/axes/_axes.pyi b/lib/matplotlib/axes/_axes.pyi\nindex 2f5f6b4f3fde..b728d24d9fe9 100644\n--- a/lib/matplotlib/axes/_axes.pyi\n+++ b/lib/matplotlib/axes/_axes.pyi\n@@ -350,6 +350,7 @@ class Axes(_AxesBase):\n         notch: bool | None = ...,\n         sym: str | None = ...,\n         vert: bool | None = ...,\n+        orientation: Literal[\"vertical\", \"horizontal\"] = ...,\n         whis: float | tuple[float, float] | None = ...,\n         positions: ArrayLike | None = ...,\n         widths: float | ArrayLike | None = ...,\n@@ -382,7 +383,8 @@ class Axes(_AxesBase):\n         positions: ArrayLike | None = ...,\n         *,\n         widths: float | ArrayLike | None = ...,\n-        vert: bool = ...,\n+        vert: bool | None = ...,\n+        orientation: Literal[\"vertical\", \"horizontal\"] = ...,\n         patch_artist: bool = ...,\n         shownotches: bool = ...,\n         showmeans: bool = ...,\ndiff --git a/lib/matplotlib/mpl-data/stylelib/classic.mplstyle b/lib/matplotlib/mpl-data/stylelib/classic.mplstyle\nindex 976ab291907b..50516d831ae4 100644\n--- a/lib/matplotlib/mpl-data/stylelib/classic.mplstyle\n+++ b/lib/matplotlib/mpl-data/stylelib/classic.mplstyle\n@@ -380,7 +380,6 @@ boxplot.showbox: True\n boxplot.showcaps: True\n boxplot.showfliers: True\n boxplot.showmeans: False\n-boxplot.vertical: True\n boxplot.whiskerprops.color: b\n boxplot.whiskerprops.linestyle: --\n boxplot.whiskerprops.linewidth: 1.0\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 5d9d2f42f6ac..00e623dd649e 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -2935,6 +2935,7 @@ def boxplot(\n     notch: bool | None = None,\n     sym: str | None = None,\n     vert: bool | None = None,\n+    orientation: Literal[\"vertical\", \"horizontal\"] = \"vertical\",\n     whis: float | tuple[float, float] | None = None,\n     positions: ArrayLike | None = None,\n     widths: float | ArrayLike | None = None,\n@@ -2967,6 +2968,7 @@ def boxplot(\n         notch=notch,\n         sym=sym,\n         vert=vert,\n+        orientation=orientation,\n         whis=whis,\n         positions=positions,\n         widths=widths,\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.pdf b/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.pdf\nindex cc9433bebd31..c424bc5e982f 100644\nBinary files a/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.pdf and b/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.pdf differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.png b/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.png\nindex 07b8a5da7247..944f9451285c 100644\nBinary files a/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.png and b/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.svg b/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.svg\nindex 054af5b4f2f3..c3a3cda7a9a0 100644\n--- a/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.svg\n+++ b/lib/matplotlib/tests/baseline_images/test_axes/boxplot_rc_parameters.svg\n@@ -1,538 +1,535 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n-  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n-<!-- Created with matplotlib (http://matplotlib.org/) -->\n-<svg height=\"345.6pt\" version=\"1.1\" viewBox=\"0 0 460.8 345.6\" width=\"460.8pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n- <defs>\n-  <style type=\"text/css\">\n-*{stroke-linecap:butt;stroke-linejoin:round;}\n-  </style>\n- </defs>\n- <g id=\"figure_1\">\n-  <g id=\"patch_1\">\n-   <path d=\"M 0 345.6 \n-L 460.8 345.6 \n-L 460.8 0 \n-L 0 0 \n-z\n-\" style=\"fill:#ffffff;\"/>\n-  </g>\n-  <g id=\"axes_1\">\n-   <g id=\"patch_2\">\n-    <path d=\"M 57.6 119.740235 \n-L 414.72 119.740235 \n-L 414.72 41.472 \n-L 57.6 41.472 \n-z\n-\" style=\"fill:#ffffff;\"/>\n-   </g>\n-   <g id=\"matplotlib.axis_1\">\n-    <g id=\"xtick_1\">\n-     <g id=\"line2d_1\">\n-      <defs>\n-       <path d=\"M 0 0 \n-L 0 3.5 \n-\" id=\"me3c5aad6dc\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n-      </defs>\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"146.88\" xlink:href=\"#me3c5aad6dc\" y=\"119.740235\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"xtick_2\">\n-     <g id=\"line2d_2\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"325.44\" xlink:href=\"#me3c5aad6dc\" y=\"119.740235\"/>\n-      </g>\n-     </g>\n-    </g>\n-   </g>\n-   <g id=\"matplotlib.axis_2\">\n-    <g id=\"ytick_1\">\n-     <g id=\"line2d_3\">\n-      <defs>\n-       <path d=\"M 0 0 \n-L -3.5 0 \n-\" id=\"mb093d27a24\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n-      </defs>\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"109.067294\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"ytick_2\">\n-     <g id=\"line2d_4\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"80.606118\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"ytick_3\">\n-     <g id=\"line2d_5\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"52.144941\"/>\n-      </g>\n-     </g>\n-    </g>\n-   </g>\n-   <g id=\"line2d_6\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 133.488 85.658488 \n-L 160.272 85.658488 \n-L 160.272 82.254409 \n-L 153.576 80.606118 \n-L 160.272 78.957826 \n-L 160.272 75.553747 \n-L 133.488 75.553747 \n-L 133.488 78.957826 \n-L 140.184 80.606118 \n-L 133.488 82.254409 \n-L 133.488 85.658488 \n-\" style=\"fill:none;stroke:#ff0000;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_7\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 146.88 85.658488 \n-L 146.88 89.564222 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_8\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 146.88 75.553747 \n-L 146.88 71.648014 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_9\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 140.184 89.564222 \n-L 153.576 89.564222 \n-\" style=\"fill:none;stroke:#00bfbf;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_10\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 140.184 71.648014 \n-L 153.576 71.648014 \n-\" style=\"fill:none;stroke:#00bfbf;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_11\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 146.88 116.182588 \n-L 146.88 90.567529 \n-L 146.88 90.4242 \n-L 146.88 90.28087 \n-L 146.88 90.13754 \n-L 146.88 89.994211 \n-L 146.88 89.850881 \n-L 146.88 89.707551 \n-L 146.88 71.504684 \n-L 146.88 71.361354 \n-L 146.88 71.218025 \n-L 146.88 71.074695 \n-L 146.88 70.931365 \n-L 146.88 70.788036 \n-L 146.88 70.644706 \n-L 146.88 45.029647 \n-\" style=\"fill:none;stroke:#0000ff;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-    <defs>\n-     <path d=\"M 0 2.5 \n-C 0.663008 2.5 1.29895 2.236584 1.767767 1.767767 \n-C 2.236584 1.29895 2.5 0.663008 2.5 0 \n-C 2.5 -0.663008 2.236584 -1.29895 1.767767 -1.767767 \n-C 1.29895 -2.236584 0.663008 -2.5 0 -2.5 \n-C -0.663008 -2.5 -1.29895 -2.236584 -1.767767 -1.767767 \n-C -2.236584 -1.29895 -2.5 -0.663008 -2.5 0 \n-C -2.5 0.663008 -2.236584 1.29895 -1.767767 1.767767 \n-C -1.29895 2.236584 -0.663008 2.5 0 2.5 \n-z\n-\" id=\"mdf84968221\" style=\"stroke:#0000ff;\"/>\n-    </defs>\n-    <g clip-path=\"url(#p391ee919e1)\">\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"116.182588\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"90.567529\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"90.4242\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"90.28087\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"90.13754\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"89.994211\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"89.850881\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"89.707551\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"71.504684\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"71.361354\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"71.218025\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"71.074695\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"70.931365\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"70.788036\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"70.644706\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"146.88\" xlink:href=\"#mdf84968221\" y=\"45.029647\"/>\n-    </g>\n-   </g>\n-   <g id=\"line2d_12\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 312.048 85.658488 \n-L 338.832 85.658488 \n-L 338.832 82.254409 \n-L 332.136 80.606118 \n-L 338.832 78.957826 \n-L 338.832 75.553747 \n-L 312.048 75.553747 \n-L 312.048 78.957826 \n-L 318.744 80.606118 \n-L 312.048 82.254409 \n-L 312.048 85.658488 \n-\" style=\"fill:none;stroke:#ff0000;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_13\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 325.44 85.658488 \n-L 325.44 89.564222 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_14\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 325.44 75.553747 \n-L 325.44 71.648014 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_15\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 318.744 89.564222 \n-L 332.136 89.564222 \n-\" style=\"fill:none;stroke:#00bfbf;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_16\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 318.744 71.648014 \n-L 332.136 71.648014 \n-\" style=\"fill:none;stroke:#00bfbf;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_17\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 325.44 116.182588 \n-L 325.44 90.567529 \n-L 325.44 90.4242 \n-L 325.44 90.28087 \n-L 325.44 90.13754 \n-L 325.44 89.994211 \n-L 325.44 89.850881 \n-L 325.44 89.707551 \n-L 325.44 71.504684 \n-L 325.44 71.361354 \n-L 325.44 71.218025 \n-L 325.44 71.074695 \n-L 325.44 70.931365 \n-L 325.44 70.788036 \n-L 325.44 70.644706 \n-L 325.44 45.029647 \n-\" style=\"fill:none;stroke:#0000ff;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-    <g clip-path=\"url(#p391ee919e1)\">\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"116.182588\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"90.567529\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"90.4242\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"90.28087\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"90.13754\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"89.994211\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"89.850881\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"89.707551\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"71.504684\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"71.361354\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"71.218025\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"71.074695\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"70.931365\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"70.788036\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"70.644706\"/>\n-     <use style=\"fill:#008000;stroke:#0000ff;\" x=\"325.44\" xlink:href=\"#mdf84968221\" y=\"45.029647\"/>\n-    </g>\n-   </g>\n-   <g id=\"line2d_18\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 140.184 80.606118 \n-L 153.576 80.606118 \n-\" style=\"fill:none;stroke:#000000;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_19\">\n-    <path clip-path=\"url(#p391ee919e1)\" d=\"M 318.744 80.606118 \n-L 332.136 80.606118 \n-\" style=\"fill:none;stroke:#000000;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"patch_3\">\n-    <path d=\"M 57.6 119.740235 \n-L 57.6 41.472 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_4\">\n-    <path d=\"M 414.72 119.740235 \n-L 414.72 41.472 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_5\">\n-    <path d=\"M 57.6 119.740235 \n-L 414.72 119.740235 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_6\">\n-    <path d=\"M 57.6 41.472 \n-L 414.72 41.472 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-  </g>\n-  <g id=\"axes_2\">\n-   <g id=\"patch_7\">\n-    <path d=\"M 57.6 213.662118 \n-L 414.72 213.662118 \n-L 414.72 135.393882 \n-L 57.6 135.393882 \n-z\n-\" style=\"fill:#ffffff;\"/>\n-   </g>\n-   <g id=\"matplotlib.axis_3\">\n-    <g id=\"xtick_3\">\n-     <g id=\"line2d_20\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"106.298182\" xlink:href=\"#me3c5aad6dc\" y=\"213.662118\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"xtick_4\">\n-     <g id=\"line2d_21\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"171.229091\" xlink:href=\"#me3c5aad6dc\" y=\"213.662118\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"xtick_5\">\n-     <g id=\"line2d_22\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"236.16\" xlink:href=\"#me3c5aad6dc\" y=\"213.662118\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"xtick_6\">\n-     <g id=\"line2d_23\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"301.090909\" xlink:href=\"#me3c5aad6dc\" y=\"213.662118\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"xtick_7\">\n-     <g id=\"line2d_24\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"366.021818\" xlink:href=\"#me3c5aad6dc\" y=\"213.662118\"/>\n-      </g>\n-     </g>\n-    </g>\n-   </g>\n-   <g id=\"matplotlib.axis_4\">\n-    <g id=\"ytick_4\">\n-     <g id=\"line2d_25\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"194.095059\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"ytick_5\">\n-     <g id=\"line2d_26\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"154.960941\"/>\n-      </g>\n-     </g>\n-    </g>\n-   </g>\n-   <g id=\"line2d_27\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 213.107192 194.095059 \n-L 73.832727 194.095059 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_28\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 259.212808 194.095059 \n-L 398.487273 194.095059 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_29\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 73.832727 195.562588 \n-L 73.832727 192.627529 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_30\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 398.487273 195.562588 \n-L 398.487273 192.627529 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_31\"/>\n-   <g id=\"line2d_32\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 213.107192 154.960941 \n-L 73.832727 154.960941 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_33\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 259.212808 154.960941 \n-L 398.487273 154.960941 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_34\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 73.832727 156.428471 \n-L 73.832727 153.493412 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_35\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 398.487273 156.428471 \n-L 398.487273 153.493412 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_36\"/>\n-   <g id=\"patch_8\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 213.107192 197.030118 \n-L 213.107192 191.16 \n-L 259.212808 191.16 \n-L 259.212808 197.030118 \n-L 213.107192 197.030118 \n-z\n-\" style=\"fill:#1f77b4;stroke:#000000;stroke-linejoin:miter;\"/>\n-   </g>\n-   <g id=\"patch_9\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 213.107192 157.896 \n-L 213.107192 152.025882 \n-L 259.212808 152.025882 \n-L 259.212808 157.896 \n-L 213.107192 157.896 \n-z\n-\" style=\"fill:#1f77b4;stroke:#000000;stroke-linejoin:miter;\"/>\n-   </g>\n-   <g id=\"line2d_37\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 236.16 197.030118 \n-L 236.16 191.16 \n-\" style=\"fill:none;stroke:#ff7f0e;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_38\">\n-    <path clip-path=\"url(#pc019ee541c)\" d=\"M 236.16 157.896 \n-L 236.16 152.025882 \n-\" style=\"fill:none;stroke:#ff7f0e;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"patch_10\">\n-    <path d=\"M 57.6 213.662118 \n-L 57.6 135.393882 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_11\">\n-    <path d=\"M 414.72 213.662118 \n-L 414.72 135.393882 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_12\">\n-    <path d=\"M 57.6 213.662118 \n-L 414.72 213.662118 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_13\">\n-    <path d=\"M 57.6 135.393882 \n-L 414.72 135.393882 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-  </g>\n-  <g id=\"axes_3\">\n-   <g id=\"patch_14\">\n-    <path d=\"M 57.6 307.584 \n-L 414.72 307.584 \n-L 414.72 229.315765 \n-L 57.6 229.315765 \n-z\n-\" style=\"fill:#ffffff;\"/>\n-   </g>\n-   <g id=\"matplotlib.axis_5\">\n-    <g id=\"xtick_8\">\n-     <g id=\"line2d_39\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"146.88\" xlink:href=\"#me3c5aad6dc\" y=\"307.584\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"xtick_9\">\n-     <g id=\"line2d_40\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"325.44\" xlink:href=\"#me3c5aad6dc\" y=\"307.584\"/>\n-      </g>\n-     </g>\n-    </g>\n-   </g>\n-   <g id=\"matplotlib.axis_6\">\n-    <g id=\"ytick_6\">\n-     <g id=\"line2d_41\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"293.861647\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"ytick_7\">\n-     <g id=\"line2d_42\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"268.449882\"/>\n-      </g>\n-     </g>\n-    </g>\n-    <g id=\"ytick_8\">\n-     <g id=\"line2d_43\">\n-      <g>\n-       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#mb093d27a24\" y=\"243.038118\"/>\n-      </g>\n-     </g>\n-    </g>\n-   </g>\n-   <g id=\"line2d_44\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 146.88 286.494063 \n-L 146.88 304.026353 \n-\" style=\"fill:none;stroke:#ff0000;stroke-dasharray:12.8,3.2,2,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_45\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 146.88 250.405701 \n-L 146.88 232.873412 \n-\" style=\"fill:none;stroke:#ff0000;stroke-dasharray:12.8,3.2,2,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_46\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 325.44 286.494063 \n-L 325.44 304.026353 \n-\" style=\"fill:none;stroke:#ff0000;stroke-dasharray:12.8,3.2,2,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_47\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 325.44 250.405701 \n-L 325.44 232.873412 \n-\" style=\"fill:none;stroke:#ff0000;stroke-dasharray:12.8,3.2,2,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_48\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 133.488 268.449882 \n-L 160.272 268.449882 \n-\" style=\"fill:none;stroke:#ff7f0e;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_49\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 133.488 268.449882 \n-L 160.272 268.449882 \n-\" style=\"fill:none;stroke:#00bfbf;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"line2d_50\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 312.048 268.449882 \n-L 338.832 268.449882 \n-\" style=\"fill:none;stroke:#ff7f0e;stroke-linecap:square;\"/>\n-   </g>\n-   <g id=\"line2d_51\">\n-    <path clip-path=\"url(#p8f0378e7d4)\" d=\"M 312.048 268.449882 \n-L 338.832 268.449882 \n-\" style=\"fill:none;stroke:#00bfbf;stroke-dasharray:7.4,3.2;stroke-dashoffset:0;stroke-width:2;\"/>\n-   </g>\n-   <g id=\"patch_15\">\n-    <path d=\"M 57.6 307.584 \n-L 57.6 229.315765 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_16\">\n-    <path d=\"M 414.72 307.584 \n-L 414.72 229.315765 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_17\">\n-    <path d=\"M 57.6 307.584 \n-L 414.72 307.584 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-   <g id=\"patch_18\">\n-    <path d=\"M 57.6 229.315765 \n-L 414.72 229.315765 \n-\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n-   </g>\n-  </g>\n- </g>\n- <defs>\n-  <clipPath id=\"p391ee919e1\">\n-   <rect height=\"78.268235\" width=\"357.12\" x=\"57.6\" y=\"41.472\"/>\n-  </clipPath>\n-  <clipPath id=\"pc019ee541c\">\n-   <rect height=\"78.268235\" width=\"357.12\" x=\"57.6\" y=\"135.393882\"/>\n-  </clipPath>\n-  <clipPath id=\"p8f0378e7d4\">\n-   <rect height=\"78.268235\" width=\"357.12\" x=\"57.6\" y=\"229.315765\"/>\n-  </clipPath>\n- </defs>\n-</svg>\n+<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n+<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n+  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n+<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"460.8pt\" height=\"345.6pt\" viewBox=\"0 0 460.8 345.6\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\r\n+ <metadata>\r\n+  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\r\n+   <cc:Work>\r\n+    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\r\n+    <dc:date>2024-04-17T16:38:51.018485</dc:date>\r\n+    <dc:format>image/svg+xml</dc:format>\r\n+    <dc:creator>\r\n+     <cc:Agent>\r\n+      <dc:title>Matplotlib v3.9.0.dev1517+g1fa7dd164e.d20240417, https://matplotlib.org/</dc:title>\r\n+     </cc:Agent>\r\n+    </dc:creator>\r\n+   </cc:Work>\r\n+  </rdf:RDF>\r\n+ </metadata>\r\n+ <defs>\r\n+  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\r\n+ </defs>\r\n+ <g id=\"figure_1\">\r\n+  <g id=\"patch_1\">\r\n+   <path d=\"M 0 345.6 \r\n+L 460.8 345.6 \r\n+L 460.8 0 \r\n+L 0 0 \r\n+z\r\n+\" style=\"fill: #ffffff\"/>\r\n+  </g>\r\n+  <g id=\"axes_1\">\r\n+   <g id=\"patch_2\">\r\n+    <path d=\"M 57.6 119.740235 \r\n+L 414.72 119.740235 \r\n+L 414.72 41.472 \r\n+L 57.6 41.472 \r\n+z\r\n+\" style=\"fill: #ffffff\"/>\r\n+   </g>\r\n+   <g id=\"matplotlib.axis_1\">\r\n+    <g id=\"xtick_1\">\r\n+     <g id=\"line2d_1\">\r\n+      <defs>\r\n+       <path id=\"m93e2b2d225\" d=\"M 0 0 \r\n+L 0 3.5 \r\n+\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </defs>\r\n+      <g>\r\n+       <use xlink:href=\"#m93e2b2d225\" x=\"146.88\" y=\"119.740235\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"xtick_2\">\r\n+     <g id=\"line2d_2\">\r\n+      <g>\r\n+       <use xlink:href=\"#m93e2b2d225\" x=\"325.44\" y=\"119.740235\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"matplotlib.axis_2\">\r\n+    <g id=\"ytick_1\">\r\n+     <g id=\"line2d_3\">\r\n+      <defs>\r\n+       <path id=\"m56d59f6c11\" d=\"M 0 0 \r\n+L -3.5 0 \r\n+\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </defs>\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"109.067294\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"ytick_2\">\r\n+     <g id=\"line2d_4\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"80.606118\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"ytick_3\">\r\n+     <g id=\"line2d_5\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"52.144941\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"line2d_6\">\r\n+    <path d=\"M 133.488 85.658488 \r\n+L 160.272 85.658488 \r\n+L 160.272 82.254409 \r\n+L 153.576 80.606118 \r\n+L 160.272 78.957826 \r\n+L 160.272 75.553747 \r\n+L 133.488 75.553747 \r\n+L 133.488 78.957826 \r\n+L 140.184 80.606118 \r\n+L 133.488 82.254409 \r\n+L 133.488 85.658488 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #ff0000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_7\">\r\n+    <path d=\"M 146.88 85.658488 \r\n+L 146.88 89.564222 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_8\">\r\n+    <path d=\"M 146.88 75.553747 \r\n+L 146.88 71.648014 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_9\">\r\n+    <path d=\"M 140.184 89.564222 \r\n+L 153.576 89.564222 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #00bfbf; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_10\">\r\n+    <path d=\"M 140.184 71.648014 \r\n+L 153.576 71.648014 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #00bfbf; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_11\">\r\n+    <path d=\"M 146.88 116.182588 \r\n+L 146.88 90.567529 \r\n+L 146.88 90.4242 \r\n+L 146.88 90.28087 \r\n+L 146.88 90.13754 \r\n+L 146.88 89.994211 \r\n+L 146.88 89.850881 \r\n+L 146.88 89.707551 \r\n+L 146.88 71.504684 \r\n+L 146.88 71.361354 \r\n+L 146.88 71.218025 \r\n+L 146.88 71.074695 \r\n+L 146.88 70.931365 \r\n+L 146.88 70.788036 \r\n+L 146.88 70.644706 \r\n+L 146.88 45.029647 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #0000ff; stroke-width: 2\"/>\r\n+    <defs>\r\n+     <path id=\"mcc92cd54fb\" d=\"M 0 2.5 \r\n+C 0.663008 2.5 1.29895 2.236584 1.767767 1.767767 \r\n+C 2.236584 1.29895 2.5 0.663008 2.5 0 \r\n+C 2.5 -0.663008 2.236584 -1.29895 1.767767 -1.767767 \r\n+C 1.29895 -2.236584 0.663008 -2.5 0 -2.5 \r\n+C -0.663008 -2.5 -1.29895 -2.236584 -1.767767 -1.767767 \r\n+C -2.236584 -1.29895 -2.5 -0.663008 -2.5 0 \r\n+C -2.5 0.663008 -2.236584 1.29895 -1.767767 1.767767 \r\n+C -1.29895 2.236584 -0.663008 2.5 0 2.5 \r\n+z\r\n+\" style=\"stroke: #0000ff\"/>\r\n+    </defs>\r\n+    <g clip-path=\"url(#p401fc79e44)\">\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"116.182588\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"90.567529\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"90.4242\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"90.28087\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"90.13754\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"89.994211\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"89.850881\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"89.707551\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"71.504684\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"71.361354\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"71.218025\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"71.074695\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"70.931365\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"70.788036\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"70.644706\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"146.88\" y=\"45.029647\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"line2d_12\">\r\n+    <path d=\"M 312.048 85.658488 \r\n+L 338.832 85.658488 \r\n+L 338.832 82.254409 \r\n+L 332.136 80.606118 \r\n+L 338.832 78.957826 \r\n+L 338.832 75.553747 \r\n+L 312.048 75.553747 \r\n+L 312.048 78.957826 \r\n+L 318.744 80.606118 \r\n+L 312.048 82.254409 \r\n+L 312.048 85.658488 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #ff0000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_13\">\r\n+    <path d=\"M 325.44 85.658488 \r\n+L 325.44 89.564222 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_14\">\r\n+    <path d=\"M 325.44 75.553747 \r\n+L 325.44 71.648014 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_15\">\r\n+    <path d=\"M 318.744 89.564222 \r\n+L 332.136 89.564222 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #00bfbf; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_16\">\r\n+    <path d=\"M 318.744 71.648014 \r\n+L 332.136 71.648014 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #00bfbf; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_17\">\r\n+    <path d=\"M 325.44 116.182588 \r\n+L 325.44 90.567529 \r\n+L 325.44 90.4242 \r\n+L 325.44 90.28087 \r\n+L 325.44 90.13754 \r\n+L 325.44 89.994211 \r\n+L 325.44 89.850881 \r\n+L 325.44 89.707551 \r\n+L 325.44 71.504684 \r\n+L 325.44 71.361354 \r\n+L 325.44 71.218025 \r\n+L 325.44 71.074695 \r\n+L 325.44 70.931365 \r\n+L 325.44 70.788036 \r\n+L 325.44 70.644706 \r\n+L 325.44 45.029647 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #0000ff; stroke-width: 2\"/>\r\n+    <g clip-path=\"url(#p401fc79e44)\">\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"116.182588\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"90.567529\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"90.4242\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"90.28087\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"90.13754\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"89.994211\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"89.850881\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"89.707551\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"71.504684\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"71.361354\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"71.218025\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"71.074695\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"70.931365\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"70.788036\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"70.644706\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+     <use xlink:href=\"#mcc92cd54fb\" x=\"325.44\" y=\"45.029647\" style=\"fill: #008000; stroke: #0000ff\"/>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"line2d_18\">\r\n+    <path d=\"M 140.184 80.606118 \r\n+L 153.576 80.606118 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #000000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_19\">\r\n+    <path d=\"M 318.744 80.606118 \r\n+L 332.136 80.606118 \r\n+\" clip-path=\"url(#p401fc79e44)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #000000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"patch_3\">\r\n+    <path d=\"M 57.6 119.740235 \r\n+L 57.6 41.472 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_4\">\r\n+    <path d=\"M 414.72 119.740235 \r\n+L 414.72 41.472 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_5\">\r\n+    <path d=\"M 57.6 119.740235 \r\n+L 414.72 119.740235 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_6\">\r\n+    <path d=\"M 57.6 41.472 \r\n+L 414.72 41.472 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+  </g>\r\n+  <g id=\"axes_2\">\r\n+   <g id=\"patch_7\">\r\n+    <path d=\"M 57.6 213.662118 \r\n+L 414.72 213.662118 \r\n+L 414.72 135.393882 \r\n+L 57.6 135.393882 \r\n+z\r\n+\" style=\"fill: #ffffff\"/>\r\n+   </g>\r\n+   <g id=\"matplotlib.axis_3\">\r\n+    <g id=\"xtick_3\">\r\n+     <g id=\"line2d_20\">\r\n+      <g>\r\n+       <use xlink:href=\"#m93e2b2d225\" x=\"146.88\" y=\"213.662118\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"xtick_4\">\r\n+     <g id=\"line2d_21\">\r\n+      <g>\r\n+       <use xlink:href=\"#m93e2b2d225\" x=\"325.44\" y=\"213.662118\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"matplotlib.axis_4\">\r\n+    <g id=\"ytick_4\">\r\n+     <g id=\"line2d_22\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"202.989176\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"ytick_5\">\r\n+     <g id=\"line2d_23\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"174.528\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"ytick_6\">\r\n+     <g id=\"line2d_24\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"146.066824\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"patch_8\">\r\n+    <path d=\"M 133.488 179.580371 \r\n+L 160.272 179.580371 \r\n+L 160.272 169.475629 \r\n+L 133.488 169.475629 \r\n+L 133.488 179.580371 \r\n+z\r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: #1f77b4; stroke: #000000; stroke-linejoin: miter\"/>\r\n+   </g>\r\n+   <g id=\"line2d_25\">\r\n+    <path d=\"M 146.88 179.580371 \r\n+L 146.88 210.104471 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_26\">\r\n+    <path d=\"M 146.88 169.475629 \r\n+L 146.88 138.951529 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_27\">\r\n+    <path d=\"M 140.184 210.104471 \r\n+L 153.576 210.104471 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_28\">\r\n+    <path d=\"M 140.184 138.951529 \r\n+L 153.576 138.951529 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_29\"/>\r\n+   <g id=\"patch_9\">\r\n+    <path d=\"M 312.048 179.580371 \r\n+L 338.832 179.580371 \r\n+L 338.832 169.475629 \r\n+L 312.048 169.475629 \r\n+L 312.048 179.580371 \r\n+z\r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: #1f77b4; stroke: #000000; stroke-linejoin: miter\"/>\r\n+   </g>\r\n+   <g id=\"line2d_30\">\r\n+    <path d=\"M 325.44 179.580371 \r\n+L 325.44 210.104471 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_31\">\r\n+    <path d=\"M 325.44 169.475629 \r\n+L 325.44 138.951529 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_32\">\r\n+    <path d=\"M 318.744 210.104471 \r\n+L 332.136 210.104471 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_33\">\r\n+    <path d=\"M 318.744 138.951529 \r\n+L 332.136 138.951529 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #000000; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"line2d_34\"/>\r\n+   <g id=\"line2d_35\">\r\n+    <path d=\"M 133.488 174.528 \r\n+L 160.272 174.528 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #ff7f0e\"/>\r\n+   </g>\r\n+   <g id=\"line2d_36\">\r\n+    <path d=\"M 312.048 174.528 \r\n+L 338.832 174.528 \r\n+\" clip-path=\"url(#p9453a161d5)\" style=\"fill: none; stroke: #ff7f0e\"/>\r\n+   </g>\r\n+   <g id=\"patch_10\">\r\n+    <path d=\"M 57.6 213.662118 \r\n+L 57.6 135.393882 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_11\">\r\n+    <path d=\"M 414.72 213.662118 \r\n+L 414.72 135.393882 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_12\">\r\n+    <path d=\"M 57.6 213.662118 \r\n+L 414.72 213.662118 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_13\">\r\n+    <path d=\"M 57.6 135.393882 \r\n+L 414.72 135.393882 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+  </g>\r\n+  <g id=\"axes_3\">\r\n+   <g id=\"patch_14\">\r\n+    <path d=\"M 57.6 307.584 \r\n+L 414.72 307.584 \r\n+L 414.72 229.315765 \r\n+L 57.6 229.315765 \r\n+z\r\n+\" style=\"fill: #ffffff\"/>\r\n+   </g>\r\n+   <g id=\"matplotlib.axis_5\">\r\n+    <g id=\"xtick_5\">\r\n+     <g id=\"line2d_37\">\r\n+      <g>\r\n+       <use xlink:href=\"#m93e2b2d225\" x=\"146.88\" y=\"307.584\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"xtick_6\">\r\n+     <g id=\"line2d_38\">\r\n+      <g>\r\n+       <use xlink:href=\"#m93e2b2d225\" x=\"325.44\" y=\"307.584\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"matplotlib.axis_6\">\r\n+    <g id=\"ytick_7\">\r\n+     <g id=\"line2d_39\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"293.861647\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"ytick_8\">\r\n+     <g id=\"line2d_40\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"268.449882\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+    <g id=\"ytick_9\">\r\n+     <g id=\"line2d_41\">\r\n+      <g>\r\n+       <use xlink:href=\"#m56d59f6c11\" x=\"57.6\" y=\"243.038118\" style=\"stroke: #000000; stroke-width: 0.8\"/>\r\n+      </g>\r\n+     </g>\r\n+    </g>\r\n+   </g>\r\n+   <g id=\"line2d_42\">\r\n+    <path d=\"M 146.88 286.494063 \r\n+L 146.88 304.026353 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke-dasharray: 12.8,3.2,2,3.2; stroke-dashoffset: 0; stroke: #ff0000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_43\">\r\n+    <path d=\"M 146.88 250.405701 \r\n+L 146.88 232.873412 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke-dasharray: 12.8,3.2,2,3.2; stroke-dashoffset: 0; stroke: #ff0000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_44\">\r\n+    <path d=\"M 325.44 286.494063 \r\n+L 325.44 304.026353 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke-dasharray: 12.8,3.2,2,3.2; stroke-dashoffset: 0; stroke: #ff0000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_45\">\r\n+    <path d=\"M 325.44 250.405701 \r\n+L 325.44 232.873412 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke-dasharray: 12.8,3.2,2,3.2; stroke-dashoffset: 0; stroke: #ff0000; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_46\">\r\n+    <path d=\"M 133.488 268.449882 \r\n+L 160.272 268.449882 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke: #ff7f0e\"/>\r\n+   </g>\r\n+   <g id=\"line2d_47\">\r\n+    <path d=\"M 133.488 268.449882 \r\n+L 160.272 268.449882 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #00bfbf; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"line2d_48\">\r\n+    <path d=\"M 312.048 268.449882 \r\n+L 338.832 268.449882 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke: #ff7f0e\"/>\r\n+   </g>\r\n+   <g id=\"line2d_49\">\r\n+    <path d=\"M 312.048 268.449882 \r\n+L 338.832 268.449882 \r\n+\" clip-path=\"url(#p6bd38583d9)\" style=\"fill: none; stroke-dasharray: 7.4,3.2; stroke-dashoffset: 0; stroke: #00bfbf; stroke-width: 2\"/>\r\n+   </g>\r\n+   <g id=\"patch_15\">\r\n+    <path d=\"M 57.6 307.584 \r\n+L 57.6 229.315765 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_16\">\r\n+    <path d=\"M 414.72 307.584 \r\n+L 414.72 229.315765 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_17\">\r\n+    <path d=\"M 57.6 307.584 \r\n+L 414.72 307.584 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+   <g id=\"patch_18\">\r\n+    <path d=\"M 57.6 229.315765 \r\n+L 414.72 229.315765 \r\n+\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\r\n+   </g>\r\n+  </g>\r\n+ </g>\r\n+ <defs>\r\n+  <clipPath id=\"p401fc79e44\">\r\n+   <rect x=\"57.6\" y=\"41.472\" width=\"357.12\" height=\"78.268235\"/>\r\n+  </clipPath>\r\n+  <clipPath id=\"p9453a161d5\">\r\n+   <rect x=\"57.6\" y=\"135.393882\" width=\"357.12\" height=\"78.268235\"/>\r\n+  </clipPath>\r\n+  <clipPath id=\"p6bd38583d9\">\r\n+   <rect x=\"57.6\" y=\"229.315765\" width=\"357.12\" height=\"78.268235\"/>\r\n+  </clipPath>\r\n+ </defs>\r\n+</svg>\r\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c48519377290..ef0b7c7db29e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -3186,7 +3186,7 @@ def _bxp_test_helper(\n     logstats = mpl.cbook.boxplot_stats(\n         np.random.lognormal(mean=1.25, sigma=1., size=(37, 4)), **stats_kwargs)\n     fig, ax = plt.subplots()\n-    if bxp_kwargs.get('vert', True):\n+    if bxp_kwargs.get('orientation', 'vertical') == 'vertical':\n         ax.set_yscale('log')\n     else:\n         ax.set_xscale('log')\n@@ -3237,7 +3237,7 @@ def transform(stats):\n                   style='default',\n                   tol=0.1)\n def test_bxp_horizontal():\n-    _bxp_test_helper(bxp_kwargs=dict(vert=False))\n+    _bxp_test_helper(bxp_kwargs=dict(orientation='horizontal'))\n \n \n @image_comparison(['bxp_with_ylabels.png'],\n@@ -3250,7 +3250,8 @@ def transform(stats):\n             s['label'] = label\n         return stats\n \n-    _bxp_test_helper(transform_stats=transform, bxp_kwargs=dict(vert=False))\n+    _bxp_test_helper(transform_stats=transform,\n+                     bxp_kwargs=dict(orientation='horizontal'))\n \n \n @image_comparison(['bxp_patchartist.png'],\n@@ -3579,7 +3580,6 @@ def test_boxplot_rc_parameters():\n     }\n \n     rc_axis1 = {\n-        'boxplot.vertical': False,\n         'boxplot.whiskers': [0, 100],\n         'boxplot.patchartist': True,\n     }\n@@ -9102,3 +9102,42 @@ def test_violinplot_orientation(fig_test, fig_ref):\n \n         ax_test = fig_test.subplots()\n         ax_test.violinplot(all_data, orientation='horizontal')\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_boxplot_orientation(fig_test, fig_ref):\n+    # Test the `orientation : {'vertical', 'horizontal'}`\n+    # parameter and deprecation of `vert: bool`.\n+    fig, axs = plt.subplots(nrows=1, ncols=2)\n+    np.random.seed(19680801)\n+    all_data = [np.random.normal(0, std, 100) for std in range(6, 10)]\n+\n+    axs[0].boxplot(all_data)  # Default vertical plot.\n+    # xticks and yticks should be at their default position.\n+    assert all(axs[0].get_xticks() == np.array(\n+        [1, 2, 3, 4]))\n+    assert all(axs[0].get_yticks() == np.array(\n+        [-30., -20., -10., 0., 10., 20., 30.]))\n+\n+    # Horizontal plot using new `orientation` keyword.\n+    axs[1].boxplot(all_data, orientation='horizontal')\n+    # xticks and yticks should be swapped.\n+    assert all(axs[1].get_xticks() == np.array(\n+        [-30., -20., -10., 0., 10., 20., 30.]))\n+    assert all(axs[1].get_yticks() == np.array(\n+        [1, 2, 3, 4]))\n+\n+    plt.close()\n+\n+    # Deprecation of `vert: bool` keyword and\n+    # 'boxplot.vertical' rcparam.\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning,\n+                      match='was deprecated in Matplotlib 3.10'):\n+        # Compare images between a figure that\n+        # uses vert and one that uses orientation.\n+        with mpl.rc_context({'boxplot.vertical': False}):\n+            ax_ref = fig_ref.subplots()\n+            ax_ref.boxplot(all_data)\n+\n+        ax_test = fig_test.subplots()\n+        ax_test.boxplot(all_data, orientation='horizontal')\ndiff --git a/lib/matplotlib/tests/test_datetime.py b/lib/matplotlib/tests/test_datetime.py\nindex 4b693eb7d1ca..276056d044ae 100644\n--- a/lib/matplotlib/tests/test_datetime.py\n+++ b/lib/matplotlib/tests/test_datetime.py\n@@ -255,7 +255,7 @@ def test_bxp(self):\n                 datetime.datetime(2020, 1, 27)\n             ]\n         }]\n-        ax.bxp(data, vert=False)\n+        ax.bxp(data, orientation='horizontal')\n         ax.xaxis.set_major_formatter(mpl.dates.DateFormatter(\"%Y-%m-%d\"))\n         ax.set_title('Box plot with datetime data')\n \n", "problem_statement": "boxplot/violinplot orientation-setting API\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nCurrently, boxplot(), bxp(), violin(), and violinplot() take a `vert: bool` argument to switch between vertical and horizontal; this is inconsistent with colorbar(), hist(), eventplot(), and Slider(), which take an `orientation: {\"vertical\", \"horizontal\"}` argument.\r\n\r\nFor consistency, I'd suggest adding support for `orientation` (both because I think colorbar() and hist(), in particular, are probably the most used among all these, and because I like the API better :-)), and later deprecate `vert`.  Thoughts?\r\n\r\nattn @phobson who has been involved in boxplots, IIRC.\n", "hints_text": "I think this is a good idea.\r\n\r\nShould be easy enough to capture `vert`, emit and deprecation warning, and then set `orientation` accordingly.\n(and while we're at it, the manage_xticks arg should be renamed to manage_ticks, as it covers both orientations)\njust throwing this out there: what would you say to `manage_labels`?\nwell technically it's managing ticks, tick labels, *and axis limits* so I think manage_labels is worse than manage_ticks, and perhaps manage_axis is better?\r\nI also wonder whether it really needs to manage axis limits -- can't the standard margins system do that just as well?  (needs to be investigated)\ngood points all around.\r\n\r\njust noticed a wrinkle: `boxplot.vert` is an rcParam\nWe know how to handle deprecation/renaming of rcParams too, but thanks for pointing that out.\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nAt least adding orientation should hopefully be uncontroversial.\nWould you want separate PRs for `boxplot` and `violinplot` to keep it simple? The review process for the `boxplot` section will probably take a bit longer because it involves the deprecation of an rcParam which Ive never done before.\nShould we simply deprecate the `boxplot.vert` rcParams without replacement? This is more of a plot-type setting rather than style. It\u2019s not useful as a global config or style parameter. The only use case would be a local context (e.g. via a context manager) if somebody wants to make multiple horizontal plots. But for that rare case using the parameter explicitly may be good enough and is more clear for the reader.\r\n\r\nI believe, we also don\u2019t have that config for `bar()` or `hist()`.\n> Should we simply deprecate the `boxplot.vert` rcParams without replacement? [snip] I believe, we also don\u2019t have that config for bar() or hist()\r\n\r\nI think that's a good idea and the justification is solid, IMO\r\n", "created_at": "2024-04-14T05:43:46Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28073, "instance_id": "matplotlib__matplotlib-28073", "issue_numbers": ["26718", "0000"], "base_commit": "f5067c16757f4cd800ae3ba0ac25ff79d2e41a7f", "patch": "diff --git a/doc/users/next_whats_new/histogram_vectorized_parameters.rst b/doc/users/next_whats_new/histogram_vectorized_parameters.rst\nnew file mode 100644\nindex 000000000000..7b9c04e71739\n--- /dev/null\n+++ b/doc/users/next_whats_new/histogram_vectorized_parameters.rst\n@@ -0,0 +1,46 @@\n+Vectorized ``hist`` style parameters\n+------------------------------------\n+\n+The parameters *hatch*, *edgecolor*, *facecolor*, *linewidth* and *linestyle*\n+of the `~matplotlib.axes.Axes.hist` method are now vectorized.\n+This means that you can pass in individual parameters for each histogram\n+when the input *x* has multiple datasets.\n+\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Four charts, each displaying stacked histograms of three Poisson distributions. Each chart differentiates the histograms using various parameters: top left uses different linewidths, top right uses different hatches, bottom left uses different edgecolors, and bottom right uses different facecolors. Each histogram on the left side also has a different edgecolor.\n+\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    np.random.seed(19680801)\n+\n+    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(9, 9))\n+\n+    data1 = np.random.poisson(5, 1000)\n+    data2 = np.random.poisson(7, 1000)\n+    data3 = np.random.poisson(10, 1000)\n+\n+    labels = [\"Data 1\", \"Data 2\", \"Data 3\"]\n+\n+    ax1.hist([data1, data2, data3], bins=range(17), histtype=\"step\", stacked=True,\n+             edgecolor=[\"red\", \"green\", \"blue\"], linewidth=[1, 2, 3])\n+    ax1.set_title(\"Different linewidths\")\n+    ax1.legend(labels)\n+\n+    ax2.hist([data1, data2, data3], bins=range(17), histtype=\"barstacked\",\n+             hatch=[\"/\", \".\", \"*\"])\n+    ax2.set_title(\"Different hatch patterns\")\n+    ax2.legend(labels)\n+\n+    ax3.hist([data1, data2, data3], bins=range(17), histtype=\"bar\", fill=False,\n+             edgecolor=[\"red\", \"green\", \"blue\"], linestyle=[\"--\", \"-.\", \":\"])\n+    ax3.set_title(\"Different linestyles\")\n+    ax3.legend(labels)\n+\n+    ax4.hist([data1, data2, data3], bins=range(17), histtype=\"barstacked\",\n+             facecolor=[\"red\", \"green\", \"blue\"])\n+    ax4.set_title(\"Different facecolors\")\n+    ax4.legend(labels)\n+\n+    plt.show()\ndiff --git a/galleries/examples/statistics/histogram_multihist.py b/galleries/examples/statistics/histogram_multihist.py\nindex f1957dc38939..b9a9c5f0bf26 100644\n--- a/galleries/examples/statistics/histogram_multihist.py\n+++ b/galleries/examples/statistics/histogram_multihist.py\n@@ -15,7 +15,7 @@\n select these parameters:\n http://docs.astropy.org/en/stable/visualization/histogram.html\n \"\"\"\n-\n+# %%\n import matplotlib.pyplot as plt\n import numpy as np\n \n@@ -45,6 +45,94 @@\n fig.tight_layout()\n plt.show()\n \n+# %%\n+# -----------------------------------\n+# Setting properties for each dataset\n+# -----------------------------------\n+#\n+# You can style the histograms individually by passing a list of values to the\n+# following parameters:\n+#\n+# * edgecolor\n+# * facecolor\n+# * hatch\n+# * linewidth\n+# * linestyle\n+#\n+#\n+# edgecolor\n+# .........\n+\n+fig, ax = plt.subplots()\n+\n+edgecolors = ['green', 'red', 'blue']\n+\n+ax.hist(x, n_bins, fill=False, histtype=\"step\", stacked=True,\n+        edgecolor=edgecolors, label=edgecolors)\n+ax.legend()\n+ax.set_title('Stacked Steps with Edgecolors')\n+\n+plt.show()\n+\n+# %%\n+# facecolor\n+# .........\n+\n+fig, ax = plt.subplots()\n+\n+facecolors = ['green', 'red', 'blue']\n+\n+ax.hist(x, n_bins, histtype=\"barstacked\", facecolor=facecolors, label=facecolors)\n+ax.legend()\n+ax.set_title(\"Bars with different Facecolors\")\n+\n+plt.show()\n+\n+# %%\n+# hatch\n+# .....\n+\n+fig, ax = plt.subplots()\n+\n+hatches = [\".\", \"o\", \"x\"]\n+\n+ax.hist(x, n_bins, histtype=\"barstacked\", hatch=hatches, label=hatches)\n+ax.legend()\n+ax.set_title(\"Hatches on Stacked Bars\")\n+\n+plt.show()\n+\n+# %%\n+# linewidth\n+# .........\n+\n+fig, ax = plt.subplots()\n+\n+linewidths = [1, 2, 3]\n+edgecolors = [\"green\", \"red\", \"blue\"]\n+\n+ax.hist(x, n_bins, fill=False, histtype=\"bar\", linewidth=linewidths,\n+        edgecolor=edgecolors, label=linewidths)\n+ax.legend()\n+ax.set_title(\"Bars with Linewidths\")\n+\n+plt.show()\n+\n+# %%\n+# linestyle\n+# .........\n+\n+fig, ax = plt.subplots()\n+\n+linestyles = ['-', ':', '--']\n+\n+ax.hist(x, n_bins, fill=False, histtype='bar', linestyle=linestyles,\n+        edgecolor=edgecolors, label=linestyles)\n+ax.legend()\n+ax.set_title('Bars with Linestyles')\n+\n+plt.show()\n+\n # %%\n #\n # .. admonition:: References\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 52c99b125d36..07393b1028d2 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6937,7 +6937,13 @@ def hist(self, x, bins=None, range=None, density=False, weights=None,\n             DATA_PARAMETER_PLACEHOLDER\n \n         **kwargs\n-            `~matplotlib.patches.Patch` properties\n+            `~matplotlib.patches.Patch` properties. The following properties\n+            additionally accept a sequence of values corresponding to the\n+            datasets in *x*:\n+            *edgecolors*, *facecolors*, *lines*, *linestyles*, *hatches*.\n+\n+            .. versionadded:: 3.10\n+               Allowing sequences of values in above listed Patch properties.\n \n         See Also\n         --------\n@@ -7210,15 +7216,35 @@ def hist(self, x, bins=None, range=None, density=False, weights=None,\n         # If None, make all labels None (via zip_longest below); otherwise,\n         # cast each element to str, but keep a single str as it.\n         labels = [] if label is None else np.atleast_1d(np.asarray(label, str))\n+\n+        if histtype == \"step\":\n+            edgecolors = itertools.cycle(np.atleast_1d(kwargs.get('edgecolor',\n+                                                                  colors)))\n+        else:\n+            edgecolors = itertools.cycle(np.atleast_1d(kwargs.get(\"edgecolor\", None)))\n+\n+        facecolors = itertools.cycle(np.atleast_1d(kwargs.get('facecolor', colors)))\n+        hatches = itertools.cycle(np.atleast_1d(kwargs.get('hatch', None)))\n+        linewidths = itertools.cycle(np.atleast_1d(kwargs.get('linewidth', None)))\n+        linestyles = itertools.cycle(np.atleast_1d(kwargs.get('linestyle', None)))\n+\n         for patch, lbl in itertools.zip_longest(patches, labels):\n-            if patch:\n-                p = patch[0]\n+            if not patch:\n+                continue\n+            p = patch[0]\n+            kwargs.update({\n+                'hatch': next(hatches),\n+                'linewidth': next(linewidths),\n+                'linestyle': next(linestyles),\n+                'edgecolor': next(edgecolors),\n+                'facecolor': next(facecolors),\n+            })\n+            p._internal_update(kwargs)\n+            if lbl is not None:\n+                p.set_label(lbl)\n+            for p in patch[1:]:\n                 p._internal_update(kwargs)\n-                if lbl is not None:\n-                    p.set_label(lbl)\n-                for p in patch[1:]:\n-                    p._internal_update(kwargs)\n-                    p.set_label('_nolegend_')\n+                p.set_label('_nolegend_')\n \n         if nx == 1:\n             return tops[0], bins, patches[0]\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex dd37d3d8ee80..b1f97b3f855f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -4603,6 +4603,64 @@ def test_hist_stacked_bar():\n     ax.legend(loc='upper right', bbox_to_anchor=(1.0, 1.0), ncols=1)\n \n \n+@pytest.mark.parametrize('kwargs', ({'facecolor': [\"b\", \"g\", \"r\"]},\n+                                    {'edgecolor': [\"b\", \"g\", \"r\"]},\n+                                    {'hatch': [\"/\", \"\\\\\", \".\"]},\n+                                    {'linestyle': [\"-\", \"--\", \":\"]},\n+                                    {'linewidth': [1, 1.5, 2]},\n+                                    {'color': [\"b\", \"g\", \"r\"]}))\n+@check_figures_equal(extensions=[\"png\"])\n+def test_hist_vectorized_params(fig_test, fig_ref, kwargs):\n+    np.random.seed(19680801)\n+    xs = [np.random.randn(n) for n in [20, 50, 100]]\n+\n+    (axt1, axt2) = fig_test.subplots(2)\n+    (axr1, axr2) = fig_ref.subplots(2)\n+\n+    for histtype, axt, axr in [(\"stepfilled\", axt1, axr1), (\"step\", axt2, axr2)]:\n+        _, bins, _ = axt.hist(xs, bins=10, histtype=histtype, **kwargs)\n+\n+        kw, values = next(iter(kwargs.items()))\n+        for i, (x, value) in enumerate(zip(xs, values)):\n+            axr.hist(x, bins=bins, histtype=histtype, **{kw: value},\n+                     zorder=(len(xs)-i)/2)\n+\n+\n+@pytest.mark.parametrize('kwargs, patch_face, patch_edge',\n+                         # 'C0'(blue) stands for the first color of the\n+                         # default color cycle as well as the patch.facecolor rcParam\n+                         # When the expected edgecolor is 'k'(black),\n+                         # it corresponds to the patch.edgecolor rcParam\n+                         [({'histtype': 'stepfilled', 'color': 'r',\n+                            'facecolor': 'y', 'edgecolor': 'g'}, 'y', 'g'),\n+                          ({'histtype': 'step', 'color': 'r',\n+                            'facecolor': 'y', 'edgecolor': 'g'}, ('y', 0), 'g'),\n+                          ({'histtype': 'stepfilled', 'color': 'r',\n+                            'edgecolor': 'g'}, 'r', 'g'),\n+                          ({'histtype': 'step', 'color': 'r',\n+                            'edgecolor': 'g'}, ('r', 0), 'g'),\n+                          ({'histtype': 'stepfilled', 'color': 'r',\n+                            'facecolor': 'y'}, 'y', 'k'),\n+                          ({'histtype': 'step', 'color': 'r',\n+                            'facecolor': 'y'}, ('y', 0), 'r'),\n+                          ({'histtype': 'stepfilled',\n+                            'facecolor': 'y', 'edgecolor': 'g'}, 'y', 'g'),\n+                          ({'histtype': 'step', 'facecolor': 'y',\n+                            'edgecolor': 'g'}, ('y', 0), 'g'),\n+                          ({'histtype': 'stepfilled', 'color': 'r'}, 'r', 'k'),\n+                          ({'histtype': 'step', 'color': 'r'}, ('r', 0), 'r'),\n+                          ({'histtype': 'stepfilled', 'facecolor': 'y'}, 'y', 'k'),\n+                          ({'histtype': 'step', 'facecolor': 'y'}, ('y', 0), 'C0'),\n+                          ({'histtype': 'stepfilled', 'edgecolor': 'g'}, 'C0', 'g'),\n+                          ({'histtype': 'step', 'edgecolor': 'g'}, ('C0', 0), 'g'),\n+                          ({'histtype': 'stepfilled'}, 'C0', 'k'),\n+                          ({'histtype': 'step'}, ('C0', 0), 'C0')])\n+def test_hist_color_semantics(kwargs, patch_face, patch_edge):\n+    _, _, patches = plt.figure().subplots().hist([1, 2, 3], **kwargs)\n+    assert all(mcolors.same_color([p.get_facecolor(), p.get_edgecolor()],\n+                                  [patch_face, patch_edge]) for p in patches)\n+\n+\n def test_hist_barstacked_bottom_unchanged():\n     b = np.array([10, 20])\n     plt.hist([[0, 1], [0, 1]], 2, histtype=\"barstacked\", bottom=b)\n@@ -4614,6 +4672,15 @@ def test_hist_emptydata():\n     ax.hist([[], range(10), range(10)], histtype=\"step\")\n \n \n+def test_hist_unused_labels():\n+    # When a list with one dataset and N elements is provided and N labels, ensure\n+    # that the first label is used for the dataset and all other labels are ignored\n+    fig, ax = plt.subplots()\n+    ax.hist([[1, 2, 3]], label=[\"values\", \"unused\", \"also unused\"])\n+    _, labels = ax.get_legend_handles_labels()\n+    assert labels == [\"values\"]\n+\n+\n def test_hist_labels():\n     # test singleton labels OK\n     fig, ax = plt.subplots()\n", "problem_statement": "[Bug]: stacked histogram does not properly handle edgecolor and hatches\n### Bug summary\r\n\r\nWhen using stacked histogram in matplotlib 3.7.2 the functionality of hatch and edgecolor is broken. It simply gives an error if trying to define either a separate edgecolor or hatch value for the stacked parts of the histogram.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nplt.hist([np.random.uniform(size=100), np.random.uniform(size=50)],\r\n         stacked=True,\r\n         color=[\"C0\", \"C1\"],\r\n         edgecolor='black',\r\n         hatch=[\"/\", \".\"],\r\n         linewidth=1,\r\n         fill=True,\r\n         density=False, \r\n         )\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n> Traceback (most recent call last):\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3460, in run_code\r\n>     exec(code_obj, self.user_global_ns, self.user_ns)\r\n>   File \"<ipython-input-11-3f15e200502a>\", line 1, in <module>\r\n>     plt.hist([np.random.uniform(size=100), np.random.uniform(size=50)],\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/pyplot.py\", line 2645, in hist\r\n>     return gca().hist(\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1446, in inner\r\n>     return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 6944, in hist\r\n>     p._internal_update(kwargs)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/artist.py\", line 1223, in _internal_update\r\n>     return self._update_props(\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/artist.py\", line 1199, in _update_props\r\n>     ret.append(func(v))\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/patches.py\", line 525, in set_hatch\r\n>     mhatch._validate_hatch_pattern(hatch)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/hatch.py\", line 188, in _validate_hatch_pattern\r\n>     invalids = ''.join(sorted(invalids))\r\n> TypeError: sequence item 0: expected str instance, NoneType found\r\n\r\n\r\nWhile using different edgecolors for the stacked part with \r\n\r\n```\r\nplt.hist([np.random.uniform(size=100), np.random.uniform(size=50)],\r\n         stacked=True,\r\n         color=[\"C0\", \"C1\"],\r\n         edgecolor=[\"C2\", \"C3\"],\r\n         hatch=\"/\",\r\n         linewidth=1,\r\n         fill=True,\r\n         density=False, \r\n         )\r\n```\r\n\r\ndelivers the error\r\n\r\n> Traceback (most recent call last):\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3460, in run_code\r\n>     exec(code_obj, self.user_global_ns, self.user_ns)\r\n>   File \"<ipython-input-16-4bdbf23ac913>\", line 1, in <module>\r\n>     plt.hist([np.random.uniform(size=100), np.random.uniform(size=50)],\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/pyplot.py\", line 2645, in hist\r\n>     return gca().hist(\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/__init__.py\", line 1446, in inner\r\n>     return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/axes/_axes.py\", line 6944, in hist\r\n>     p._internal_update(kwargs)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/artist.py\", line 1223, in _internal_update\r\n>     return self._update_props(\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/artist.py\", line 1199, in _update_props\r\n>     ret.append(func(v))\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/patches.py\", line 341, in set_edgecolor\r\n>     self._set_edgecolor(color)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/patches.py\", line 327, in _set_edgecolor\r\n>     self._edgecolor = colors.to_rgba(color, self._alpha)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/colors.py\", line 299, in to_rgba\r\n>     rgba = _to_rgba_no_colorcycle(c, alpha)\r\n>   File \"/opt/anaconda3/envs/code/lib/python3.10/site-packages/matplotlib/colors.py\", line 383, in _to_rgba_no_colorcycle\r\n>     raise ValueError(\"RGBA sequence should have length 3 or 4\")\r\n> ValueError: RGBA sequence should have length 3 or 4\r\n\r\nIt seems to interpret the list of `edgecolor` [\"C2\", \"C3\"] as one color, although it is able to manage similar input for `color`.\r\n\r\n### Expected outcome\r\n\r\nIt should look similar to the following example, except that the top orange part should have dots and not slanted lines:\r\n![test_bugreport](https://github.com/matplotlib/matplotlib/assets/43748463/d29ca5f2-3f89-4c57-a608-edb4aba302ce)\r\nThe code used to generate this plot:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nplt.hist([np.random.uniform(size=100), np.random.uniform(size=50)],\r\n         stacked=True,\r\n         color=[\"C0\", \"C1\"],\r\n         edgecolor='black',\r\n         hatch=\"/\",\r\n         linewidth=1,\r\n         fill=True,\r\n         density=False, \r\n         )\r\n```\r\n\r\nIn case of the second example it should habe two different edgecolors for the first and second part of the stacked histogram.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nMacOSX\r\n\r\n### Matplotlib Version\r\n\r\n3.7.2\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\n3.10.0\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "Didn't have the chance to test on Python 3.10.0 and mpl 3.7.2 yet. But running first block of the code above with mpl 3.9.0 dev and Python 3.11.5 (conda) on Mac will give:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backend_bases.py\", line 1215, in _on_timer\r\n    ret = func(*args, **kwargs)\r\n          ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backends/backend_macosx.py\", line 70, in callback_func\r\n    callback()\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backends/backend_macosx.py\", line 93, in _draw_idle\r\n    self.draw()\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backends/backend_macosx.py\", line 52, in draw\r\n    super().draw()\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backends/backend_agg.py\", line 387, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/figure.py\", line 3101, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/axes/_base.py\", line 3095, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/patches.py\", line 588, in draw\r\n    self._draw_paths_with_artist_properties(\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/patches.py\", line 573, in _draw_paths_with_artist_properties\r\n    renderer.draw_path(gc, *draw_path_args)\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backends/backend_agg.py\", line 131, in draw_path\r\n    self._renderer.draw_path(gc, path, transform, rgbFace)\r\n  File \"/Users/xxxxxx/Documents/matplotlib-project/matplotlib/lib/matplotlib/backend_bases.py\", line 1018, in get_hatch_path\r\n    return Path.hatch(hatch, density)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: unhashable type: 'list'\r\n```\nHi, I'm working in this issue if @stevezhang1999 is not . Right now 'color' is a parameter in hist function, but edgecolor/hatch isn't. The function that deals with this 2 other parameters is in artist.py, and accepts types 'color' or 'none'. I was thinking about adding these parameters in hist function, but that means we would have to change documentation. If someone have a better approach pls tell me \n> Hi, I'm working in this issue if @stevezhang1999 is not . Right now 'color' is a parameter in hist function, but edgecolor/hatch isn't. The function that deals with this 2 other parameters is in artist.py, and accepts types 'color' or 'none'. I was thinking about adding these parameters in hist function, but that means we would have to change documentation. If someone have a better approach pls tell me\r\n\r\nYou are welcomed to work on it if that interests you!\nhey guys, in developer mode `plt.show()` doesn't work. Do you know how can I see the plots so I know if my code is working correctly?\nThere is no reason for plt.show to not work in developer mode.  Check your installation ", "created_at": "2024-04-13T17:59:17Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28068, "instance_id": "matplotlib__matplotlib-28068", "issue_numbers": ["28067", "0000"], "base_commit": "9955a7c19e392e52fc4a2d3a7eb59b33d69e5965", "patch": "diff --git a/lib/matplotlib/colors.pyi b/lib/matplotlib/colors.pyi\nindex 9bb1725f4f78..514801b714b8 100644\n--- a/lib/matplotlib/colors.pyi\n+++ b/lib/matplotlib/colors.pyi\n@@ -124,7 +124,7 @@ class LinearSegmentedColormap(Colormap):\n     def set_gamma(self, gamma: float) -> None: ...\n     @staticmethod\n     def from_list(\n-        name: str, colors: ArrayLike, N: int = ..., gamma: float = ...\n+        name: str, colors: ArrayLike | Sequence[tuple[float, ColorType]], N: int = ..., gamma: float = ...\n     ) -> LinearSegmentedColormap: ...\n     def resampled(self, lutsize: int) -> LinearSegmentedColormap: ...\n     def reversed(self, name: str | None = ...) -> LinearSegmentedColormap: ...\n", "test_patch": "", "problem_statement": "[Bug]: `LinearSegmentedColormap.from_list` does not have all type hints for argument `colors`\n### Bug summary\r\n\r\n Today only `ArrayLike` is used but it can also be a list or a tuple of 2-element tuples containing `(value, color-like)`, as stated in the docs \"If only colors are given, they are equidistantly mapped from the range [0, 1]; i.e. 0 maps to ``colors[0]`` and 1 maps to ``colors[-1]``. If (value, color) pairs are given, the mapping is from *value* to *color*. This can be used to divide the range unevenly.\"\r\n\r\n### Code for reproduction\r\n\r\nCreate a `test.py`\r\n\r\n```Python\r\nfrom matplotlib.colors import LinearSegmentedColormap\r\n\r\ncolors = [(0.0, (0.0, 0.0, 0.0, 0.0)), (1.0, (1.0, 1.0, 1.0, 1.0))]\r\nLinearSegmentedColormap.from_list(name=\"mycmap\", colors=colors)\r\n\r\nLinearSegmentedColormap.from_list(name=\"mycmap\", colors=tuple(colors))\r\n```\r\ntest with `mypy`: `mypy test.py`\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\ntest.py:4: error: Argument \"colors\" to \"from_list\" of \"LinearSegmentedColormap\" has incompatible type \"list[tuple[float, tuple[float, float, float, float]]]\"; expected \"_SupportsArray[dtype[Any]] | _NestedSequence[_SupportsArray[dtype[Any]]] | bool | int | float | complex | str | bytes | _NestedSequence[bool | int | float | complex | str | bytes]\"  [arg-type]\r\ntest.py:6: error: Argument \"colors\" to \"from_list\" of \"LinearSegmentedColormap\" has incompatible type \"tuple[tuple[float, tuple[float, float, float, float]], ...]\"; expected \"_SupportsArray[dtype[Any]] | _NestedSequence[_SupportsArray[dtype[Any]]] | bool | int | float | complex | str | bytes | _NestedSequence[bool | int | float | complex | str | bytes]\"  [arg-type]\r\nFound 2 errors in 1 files (checked 1 source file)\r\n```\r\n\r\n### Expected outcome\r\n\r\nExpected no errors since this is possible and documented.\r\n```\r\nSuccess: no issues found in 1 source file\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n", "hints_text": "", "created_at": "2024-04-12T15:19:14Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28055, "instance_id": "matplotlib__matplotlib-28055", "issue_numbers": ["28050"], "base_commit": "27f60311d4611059241e91f979452da97736c0a5", "patch": "diff --git a/galleries/examples/subplots_axes_and_figures/invert_axes.py b/galleries/examples/subplots_axes_and_figures/invert_axes.py\nindex 15ec55d430bd..31f4d75680ce 100644\n--- a/galleries/examples/subplots_axes_and_figures/invert_axes.py\n+++ b/galleries/examples/subplots_axes_and_figures/invert_axes.py\n@@ -1,25 +1,35 @@\n \"\"\"\n-===========\n-Invert Axes\n-===========\n+=============\n+Inverted axis\n+=============\n \n-You can use decreasing axes by flipping the normal order of the axis\n-limits\n+This example demonstrates two ways to invert the direction of an axis:\n+\n+- If you want to set *explicit axis limits* anyway, e.g. via `~.Axes.set_xlim`, you\n+  can swap the limit values: ``set_xlim(4, 0)`` instead of ``set_xlim(0, 4)``.\n+- Use `.Axis.set_inverted` if you only want to invert the axis *without modifying\n+  the limits*, i.e. keep existing limits or existing autoscaling behavior.\n \"\"\"\n \n import matplotlib.pyplot as plt\n import numpy as np\n \n-t = np.arange(0.01, 5.0, 0.01)\n-s = np.exp(-t)\n+x = np.arange(0.01, 4.0, 0.01)\n+y = np.exp(-x)\n+\n+fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6.4,  4), layout=\"constrained\")\n+fig.suptitle('Inverted axis with ...')\n \n-fig, ax = plt.subplots()\n+ax1.plot(x, y)\n+ax1.set_xlim(4, 0)   # inverted fixed limits\n+ax1.set_title('fixed limits: set_xlim(4, 0)')\n+ax1.set_xlabel('decreasing x \u27f6')\n+ax1.grid(True)\n \n-ax.plot(t, s)\n-ax.set_xlim(5, 0)  # decreasing time\n-ax.set_xlabel('decreasing time (s)')\n-ax.set_ylabel('voltage (mV)')\n-ax.set_title('Should be growing...')\n-ax.grid(True)\n+ax2.plot(x, y)\n+ax2.xaxis.set_inverted(True)  # inverted axis with autoscaling\n+ax2.set_title('autoscaling: set_inverted(True)')\n+ax2.set_xlabel('decreasing x \u27f6')\n+ax2.grid(True)\n \n plt.show()\n", "test_patch": "", "problem_statement": "[Doc]: Invert Axes example sets x-lims directly\n### Documentation Link\n\nhttps://matplotlib.org/devdocs/gallery/subplots_axes_and_figures/invert_axes.html\n\n### Problem\n\nThis example shows how to invert the x-axis by using `ax.set_xlim`.  I would have expected it to use the `set_inverted` method on the x-axis: that is more flexible as it doesn't prevent autoscaling on subsequent calls.\r\n\r\nI note that this example pre-dates the addition of `set_inverted` to the library.\n\n### Suggested improvement\n\nEither change the existing code to use `set_inverted` or add a second figure within the example to show its use.\n", "hints_text": "", "created_at": "2024-04-10T22:04:39Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28054, "instance_id": "matplotlib__matplotlib-28054", "issue_numbers": ["28047", "11526"], "base_commit": "7fbdbf3007a91a66c04aacd3b9b9293e95345659", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex c9300034c2cc..26a3a580ba3e 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6038,10 +6038,12 @@ def pcolor(self, *args, shading=None, alpha=None, norm=None, cmap=None,\n \n         Call signature::\n \n-            pcolor([X, Y,] C, **kwargs)\n+            pcolor([X, Y,] C, /, **kwargs)\n \n         *X* and *Y* can be used to specify the corners of the quadrilaterals.\n \n+        The arguments *X*, *Y*, *C* are positional-only.\n+\n         .. hint::\n \n             ``pcolor()`` can be very slow for large arrays. In most\n@@ -6253,10 +6255,12 @@ def pcolormesh(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n \n         Call signature::\n \n-            pcolormesh([X, Y,] C, **kwargs)\n+            pcolormesh([X, Y,] C, /, **kwargs)\n \n         *X* and *Y* can be used to specify the corners of the quadrilaterals.\n \n+        The arguments *X*, *Y*, *C* are positional-only.\n+\n         .. hint::\n \n            `~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster\n@@ -6480,6 +6484,8 @@ def pcolorfast(self, *args, alpha=None, norm=None, cmap=None, vmin=None,\n \n             ax.pcolorfast([X, Y], C, /, **kwargs)\n \n+        The arguments *X*, *Y*, *C* are positional-only.\n+\n         This method is similar to `~.Axes.pcolor` and `~.Axes.pcolormesh`.\n         It's designed to provide the fastest pcolor-type plotting with the\n         Agg backend. To achieve this, it uses different algorithms internally\n@@ -6662,7 +6668,9 @@ def contour(self, *args, **kwargs):\n \n         Call signature::\n \n-            contour([X, Y,] Z, [levels], **kwargs)\n+            contour([X, Y,] Z, /, [levels], **kwargs)\n+\n+        The arguments *X*, *Y*, *Z* are positional-only.\n         %(contour_doc)s\n         \"\"\"\n         kwargs['filled'] = False\n@@ -6678,7 +6686,9 @@ def contourf(self, *args, **kwargs):\n \n         Call signature::\n \n-            contourf([X, Y,] Z, [levels], **kwargs)\n+            contourf([X, Y,] Z, /, [levels], **kwargs)\n+\n+        The arguments *X*, *Y*, *Z* are positional-only.\n         %(contour_doc)s\n         \"\"\"\n         kwargs['filled'] = True\ndiff --git a/lib/matplotlib/quiver.py b/lib/matplotlib/quiver.py\nindex 8fa1962d6321..240d7737b516 100644\n--- a/lib/matplotlib/quiver.py\n+++ b/lib/matplotlib/quiver.py\n@@ -32,10 +32,11 @@\n \n Call signature::\n \n-  quiver([X, Y], U, V, [C], **kwargs)\n+  quiver([X, Y], U, V, [C], /, **kwargs)\n \n *X*, *Y* define the arrow locations, *U*, *V* define the arrow directions, and\n-*C* optionally sets the color.\n+*C* optionally sets the color. The arguments *X*, *Y*, *U*, *V*, *C* are\n+positional-only.\n \n **Arrow length**\n \n@@ -731,13 +732,14 @@ def _h_arrows(self, length):\n \n Call signature::\n \n-  barbs([X, Y], U, V, [C], **kwargs)\n+  barbs([X, Y], U, V, [C], /, **kwargs)\n \n Where *X*, *Y* define the barb locations, *U*, *V* define the barb\n directions, and *C* optionally sets the color.\n \n-All arguments may be 1D or 2D. *U*, *V*, *C* may be masked arrays, but masked\n-*X*, *Y* are not supported at present.\n+The arguments *X*, *Y*, *U*, *V*, *C* are positional-only and may be\n+1D or 2D. *U*, *V*, *C* may be masked arrays, but masked *X*, *Y*\n+are not supported at present.\n \n Barbs are traditionally used in meteorology as a way to plot the speed\n and direction of wind observations, but can technically be used to\n", "test_patch": "", "problem_statement": "[Bug]: plt.barbs is a command that cannot be passed in a c parameter by parameter name, but can be passed in the form of a positional parameter\n### Bug summary\n\nplt.barbs is a command that cannot be passed in a c parameter by parameter name, but can be passed in the form of a positional parameter\n\n### Code for reproduction\n\n```Python\nplt.barbs(X,Y,uwind,vwind,c =  wind_speed.T,\r\n             length = 5,\r\n             linewidth = 0.5,\r\n            #  pivot = 'middle',\r\n            #  zorder=1,\r\n             barb_increments=dict(half=2, full=4, flag=20),\r\n             sizes = dict(spacing = 0.15,height = 0.5,width = 0.12),cmap = Dbs_map,norm = norm_Dbs,\r\n             )\n```\n\n\n### Actual outcome\n\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\nCell In[182], line 22\r\n     20 fontticks = fm.FontProperties(size = 22 ,weight = 'bold', family = 'Times New Roman')\r\n     21 fontlabel = fm.FontProperties(weight = 'bold', family = 'Times New Roman',size = 22)\r\n---> 22 plt.barbs(X,Y,uwind,vwind,c =  wind_speed.T,\r\n     23              length = 5,\r\n     24              linewidth = 0.5,\r\n     25             #  pivot = 'middle',\r\n     26             #  zorder=1,\r\n     27              barb_increments=dict(half=2, full=4, flag=20),\r\n     28              sizes = dict(spacing = 0.15,height = 0.5,width = 0.12),cmap = Dbs_map,norm = norm_Dbs,\r\n     29              )#\r\n     31 # \u8bbe\u7f6ex\u8f74\u6807\u7b7e\u548c\u523b\u5ea6  \r\n     32 x_ticks = [times[0]] + [times[int((len(times) - 1) * i / 5)] for i in range(1, 6)]  \r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\pyplot.py:2447, in barbs(data, *args, **kwargs)\r\n   2445 @_copy_docstring_and_deprecators(Axes.barbs)\r\n   2446 def barbs(*args, data=None, **kwargs):\r\n-> 2447     return gca().barbs(\r\n   2448         *args, **({\"data\": data} if data is not None else {}),\r\n   2449         **kwargs)\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\__init__.py:1475, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\r\n   1472 @functools.wraps(func)\r\n   1473 def inner(ax, *args, data=None, **kwargs):\r\n   1474     if data is None:\r\n-> 1475         return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   1477     bound = new_sig.bind(ax, *args, **kwargs)\r\n   1478     auto_label = (bound.arguments.get(label_namer)\r\n   1479                   or bound.kwargs.get(label_namer))\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\axes\\_axes.py:5173, in Axes.barbs(self, *args, **kwargs)\r\n   5171 # Make sure units are handled for x and y values\r\n   5172 args = self._quiver_units(args, kwargs)\r\n-> 5173 b = mquiver.Barbs(self, *args, **kwargs)\r\n   5174 self.add_collection(b, autolim=True)\r\n   5175 self._request_autoscale_view()\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\quiver.py:937, in Barbs.__init__(self, ax, pivot, length, barbcolor, flagcolor, sizes, fill_empty, barb_increments, rounding, flip_barb, *args, **kwargs)\r\n    935 # Make a collection\r\n    936 barb_size = self._length ** 2 / 4  # Empirically determined\r\n--> 937 super().__init__(\r\n    938     [], (barb_size,), offsets=xy, offset_transform=transform, **kwargs)\r\n    939 self.set_transform(transforms.IdentityTransform())\r\n    941 self.set_UVC(u, v, c)\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\_api\\deprecation.py:454, in make_keyword_only.<locals>.wrapper(*args, **kwargs)\r\n    448 if len(args) > name_idx:\r\n    449     warn_deprecated(\r\n    450         since, message=\"Passing the %(name)s %(obj_type)s \"\r\n    451         \"positionally is deprecated since Matplotlib %(since)s; the \"\r\n    452         \"parameter will become keyword-only %(removal)s.\",\r\n    453         name=name, obj_type=f\"parameter of {func.__name__}()\")\r\n--> 454 return func(*args, **kwargs)\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\collections.py:1170, in PolyCollection.__init__(self, verts, sizes, closed, **kwargs)\r\n   1149 @_api.make_keyword_only(\"3.6\", name=\"closed\")\r\n   1150 def __init__(self, verts, sizes=None, closed=True, **kwargs):\r\n   1151     \"\"\"\r\n   1152     Parameters\r\n   1153     ----------\r\n   (...)\r\n   1168         Forwarded to `.Collection`.\r\n   1169     \"\"\"\r\n-> 1170     super().__init__(**kwargs)\r\n   1171     self.set_sizes(sizes)\r\n   1172     self.set_verts(verts, closed)\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\_api\\deprecation.py:454, in make_keyword_only.<locals>.wrapper(*args, **kwargs)\r\n    448 if len(args) > name_idx:\r\n    449     warn_deprecated(\r\n    450         since, message=\"Passing the %(name)s %(obj_type)s \"\r\n    451         \"positionally is deprecated since Matplotlib %(since)s; the \"\r\n    452         \"parameter will become keyword-only %(removal)s.\",\r\n    453         name=name, obj_type=f\"parameter of {func.__name__}()\")\r\n--> 454 return func(*args, **kwargs)\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\collections.py:201, in Collection.__init__(self, edgecolors, facecolors, linewidths, linestyles, capstyle, joinstyle, antialiaseds, offsets, offset_transform, norm, cmap, pickradius, hatch, urls, zorder, **kwargs)\r\n    198 self._offset_transform = offset_transform\r\n    200 self._path_effects = None\r\n--> 201 self._internal_update(kwargs)\r\n    202 self._paths = None\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\artist.py:1223, in Artist._internal_update(self, kwargs)\r\n   1216 def _internal_update(self, kwargs):\r\n   1217     \"\"\"\r\n   1218     Update artist properties without prenormalizing them, but generating\r\n   1219     errors as if calling `set`.\r\n   1220 \r\n   1221     The lack of prenormalization is to maintain backcompatibility.\r\n   1222     \"\"\"\r\n-> 1223     return self._update_props(\r\n   1224         kwargs, \"{cls.__name__}.set() got an unexpected keyword argument \"\r\n   1225         \"{prop_name!r}\")\r\n\r\nFile d:\\codetools\\anaconda\\home\\envs\\py38\\lib\\site-packages\\matplotlib\\artist.py:1197, in Artist._update_props(self, props, errfmt)\r\n   1195             func = getattr(self, f\"set_{k}\", None)\r\n   1196             if not callable(func):\r\n-> 1197                 raise AttributeError(\r\n   1198                     errfmt.format(cls=type(self), prop_name=k))\r\n   1199             ret.append(func(v))\r\n   1200 if ret:\r\n\r\nAttributeError: Barbs.set() got an unexpected keyword argument 'c'\n\n### Expected outcome\n\nIt should be possible to pass in data by parameter name\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.8.16\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone\nMatplotlib.pyplot.quiver does not accept X, Y, U, V and C as keyword arguments\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nBug: matplotlib.pyplot.quiver cannot accept X, Y, U, V and C as keyword arguments, such operation leads to an `IndexError: pop from empty list` (if all of them are keyword arguments) or an `AttributeError: Unknown property *` (if part of them are keyword arguments). This error arises because line 444 in `quiver.py`, inside the constructor of Quiver class, only uses `*args` but excludes `**kw` for parsing of arguments X, Y, U, V and C, and thus nothing can be parsed from `*args` in the function `_parse_args` on line 385 if these arguments are given by keywords.\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nx, y, u, v = 0, 0, .01, .02\r\n\r\nplt.quiver(X=x, Y=y, U=u, V=v, units='xy', scale=1)\r\nplt.show()\r\n```\r\n\r\n**Actual outcome**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"untitled.py\", line 5, in <module>\r\n    plt.quiver(X=x, Y=y, U=u, V=v, units='xy', scale=1)\r\n  File \"/usr/local/lib/python3.6/site-packages/matplotlib/pyplot.py\", line 3425, in quiver\r\n    ret = ax.quiver(*args, **kw)\r\n  File \"/usr/local/lib/python3.6/site-packages/matplotlib/__init__.py\", line 1855, in inner\r\n    return func(ax, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/matplotlib/axes/_axes.py\", line 4872, in quiver\r\n    q = mquiver.Quiver(self, *args, **kw)\r\n  File \"/usr/local/lib/python3.6/site-packages/matplotlib/quiver.py\", line 444, in __init__\r\n    X, Y, U, V, C = _parse_args(*args)\r\n  File \"/usr/local/lib/python3.6/site-packages/matplotlib/quiver.py\", line 393, in _parse_args\r\n    V = np.atleast_1d(args.pop(-1))\r\nIndexError: pop from empty list\r\n```\r\nAnd the error disappears if we write the code as `plt.quiver(x, y, u, v, units='xy', scale=1)`.\r\n\r\n**Matplotlib version**\r\n  * Operating system: Mac OS High Sierra\r\n  * Matplotlib version: 2.2.2 (installed from pip3)\r\n  * Matplotlib backend: MacOSX\r\n  * Python version: 3.6.5\r\n\n", "hints_text": "Strictly, speaking the [documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.barbs.html#matplotlib.axes.Axes.barbs) does not support the assumption that `c` can be used as a keyword argument. On a side-note it would be t.b.d. whether it's `c` or `C` - neither of which are currently supported.\r\n\r\nOn the technical side, we could extend https://github.com/matplotlib/matplotlib/blob/5e0aa54d96f6bb6a006f5221ad8c860a6134ff05/lib/matplotlib/quiver.py#L385\r\nto parse a kwarg `C` as well, but not sure whether that's worth it. It adds quite a bit of complexity to ensure consistency between positional and kwags.\r\n\r\nMaybe it's worth to add an explicit sentence to the docs\r\n\r\n> All parameters X, Y, U, V, C are positional-only.\nSee also #11526.\nThat does seem like a mistake, want to take a crack at fixing it @niwatori1217 ?\nLooking at this again I am tempted to say that we should just declare that these arguments are positional-only.  The problem is that adding keyword support is only going to make a confusing API even more worse: for example, do we expect that in\r\n```\r\nquiver(arg1, arg2, U=u, V=v)\r\n```\r\n`arg1` and `arg2` are considered as X and Y, but in\r\n```\r\nquiver(arg1, arg2, X=x, Y=y)\r\n```\r\n`arg1` and `arg2` are considered as U and V?\r\n(Of course you can imaging even more funky cases involving passing e.g. X positionally and Y as keyword, but they are a bit artificial, whereas I don't think the above is.)\r\n\r\nI think there's some similarly, the builtin `range` takes no keyword arguments.  Again, it would be pretty terrible if `range(3, stop=5)` meant `range(3, 5)` but `range(3, step=5)` meant `range(0, 3, 5)`...\nI agree that the mix is very confusing, but would allowing all kwarg or all arg make sense?\nHonestly I don't really see the point... Documenting xyuvc as positional only seems simpler than \"positional only, or all keyword\".\nUp to five positional arguments are not that nice, in particular since the meaning of the arguments depends on the number of arguments used.\r\n\r\n~~~\r\nquiver(U, V, **kw)\r\nquiver(U, V, C, **kw)\r\nquiver(X, Y, U, V, **kw)\r\nquiver(X, Y, U, V, C, **kw)\r\n~~~\r\n\r\nHowever, adding more options does not simplify the present signature of `quiver(*args, data=None, **kw)`. We cannot add explicit kwargs for XYUVC if we want to maintain compatibility with the above positional variants. The signature itself must be unchanged. The only thing would be to allow different calls.\r\n\r\nI would in principle be fine with all-kwarg signatures: \r\n\r\n~~~\r\nquiver(U=u, V=v, **kw)\r\nquiver(U=u, V=v, C=c, **kw)\r\nquiver(X=x, Y=y, U=u, V=v, **kw)\r\nquiver(X=x, Y=y, U=u, V=v, C=v, **kw)\r\n~~~\r\n\r\nThat could in principle catch errors of using the wrong arguments or positions. Say, you want to use X, Y, U, V and you miss V, you would accidentially end up with U, V, C semantics. On the downside, I don't think that the all-kwarg variants add to readability. And internally this would add to the complexity of argument parsing.\r\n\r\nNote also, that other similar functions like `contour`, `pcolor` and `tripcolor` variants are currently all positional only. To be consistent, we should change them all if we change one.\r\n\r\nOverall, I'm -0.5 on supporting all-kwarg as well here.\nfair enough.\n@niwatori1217 Thanks for the suggestion, however we are probably not going to implement this :disappointed: .  Hopefully we will hear from you again!", "created_at": "2024-04-10T20:49:45Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28041, "instance_id": "matplotlib__matplotlib-28041", "issue_numbers": ["28052"], "base_commit": "8b32a0ba3a2e2f574abd8776c2f792e1ab871b9e", "patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex d0f5c8d2b23b..347fbe5f6db6 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -383,7 +383,7 @@ def set_box_aspect(self, aspect, *, zoom=1):\n         # of the axes in mpl3.8.\n         aspect *= 1.8294640721620434 * 25/24 * zoom / np.linalg.norm(aspect)\n \n-        self._box_aspect = aspect\n+        self._box_aspect = self._roll_to_vertical(aspect, reverse=True)\n         self.stale = True\n \n     def apply_aspect(self, position=None):\n@@ -1191,9 +1191,23 @@ def set_proj_type(self, proj_type, focal_length=None):\n                                  f\"None for proj_type = {proj_type}\")\n             self._focal_length = np.inf\n \n-    def _roll_to_vertical(self, arr):\n-        \"\"\"Roll arrays to match the different vertical axis.\"\"\"\n-        return np.roll(arr, self._vertical_axis - 2)\n+    def _roll_to_vertical(\n+        self, arr: \"np.typing.ArrayLike\", reverse: bool = False\n+    ) -> np.ndarray:\n+        \"\"\"\n+        Roll arrays to match the different vertical axis.\n+\n+        Parameters\n+        ----------\n+        arr : ArrayLike\n+            Array to roll.\n+        reverse : bool, default: False\n+            Reverse the direction of the roll.\n+        \"\"\"\n+        if reverse:\n+            return np.roll(arr, (self._vertical_axis - 2) * -1)\n+        else:\n+            return np.roll(arr, (self._vertical_axis - 2))\n \n     def get_proj(self):\n         \"\"\"Create the projection matrix from the current viewing position.\"\"\"\n", "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\nindex ed56e5505d8e..7bcd121ab597 100644\n--- a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n@@ -2276,6 +2276,24 @@ def test_on_move_vertical_axis(vertical_axis: str) -> None:\n     )\n \n \n+@pytest.mark.parametrize(\n+    \"vertical_axis, aspect_expected\",\n+    [\n+        (\"x\", [1.190476, 0.892857, 1.190476]),\n+        (\"y\", [0.892857, 1.190476, 1.190476]),\n+        (\"z\", [1.190476, 1.190476, 0.892857]),\n+    ],\n+)\n+def test_set_box_aspect_vertical_axis(vertical_axis, aspect_expected):\n+    ax = plt.subplot(1, 1, 1, projection=\"3d\")\n+    ax.view_init(elev=0, azim=0, roll=0, vertical_axis=vertical_axis)\n+    ax.figure.canvas.draw()\n+\n+    ax.set_box_aspect(None)\n+\n+    np.testing.assert_allclose(aspect_expected, ax._box_aspect, rtol=1e-6)\n+\n+\n @image_comparison(baseline_images=['arc_pathpatch.png'],\n                   remove_text=True,\n                   style='mpl20')\n", "problem_statement": "[Bug]: set_aspect incompatible with view_init\n### Bug summary\n\nax.set_aspect('equal') doesn't work properly on axes where the view has been manipulated, i.e.  ax.view_init(vertical_axis='y').\r\nIt sets the aspect ratio as if the axes were still oriented in the standard way. \n\n### Code for reproduction\n\n```Python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport mpl_toolkits.mplot3d as a3\r\n\r\nplt.close('all')\r\nfig = plt.figure()\r\nax = fig.add_subplot(111, projection='3d')\r\nax.view_init(vertical_axis='y')\r\nax.set_xlabel('X')\r\nax.set_ylabel('Y')\r\nax.set_xlabel('Z')\r\nax.axes.set_xlim3d(left=-1, right=3.5) \r\nax.axes.set_ylim3d(bottom=0, top=10) \r\nax.axes.set_zlim3d(bottom=-0.5, top=3.5) \r\nax.set_aspect('equal')\r\n    \r\ndef a(elemList):\r\n    return np.array(elemList)\r\n\r\ndef drawTriangle(centre, size=1, color='y'):\r\n    # A neuron is a triangle\r\n    left = centre + a([- size / 2, - size / 2, 0])\r\n    right = centre + a([size / 2, - size / 2, 0])\r\n    top = centre + a([0, size / 2, 0])\r\n    coords = a([left, top, right])\r\n    tri = a3.art3d.Poly3DCollection([coords])\r\n    tri.set_color(color)\r\n    tri.set_edgecolor('k')\r\n    ax.add_collection3d(tri)\r\n\r\nfor col in range(3):\r\n    drawTriangle(a([col, 10, 0]))\n```\n\n\n### Actual outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/2457225/8599626d-857b-429f-8ba6-0d0c86d61598)\r\n\n\n### Expected outcome\n\nYou would want the vertical 'y' axis to be stretched to 10 units, instead the horizontal 'z' axis has been stretched.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone\n", "hints_text": "", "created_at": "2024-04-07T16:26:59Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28039, "instance_id": "matplotlib__matplotlib-28039", "issue_numbers": ["28040"], "base_commit": "f799b00c76f5a0af12dd43010e817d816459f4b2", "patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9ca5692c40ab..d0f5c8d2b23b 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -1147,7 +1147,8 @@ def view_init(self, elev=None, azim=None, roll=None, vertical_axis=\"z\",\n         if roll is None:\n             roll = self.initial_roll\n         vertical_axis = _api.check_getitem(\n-            dict(x=0, y=1, z=2), vertical_axis=vertical_axis\n+            {name: idx for idx, name in enumerate(self._axis_names)},\n+            vertical_axis=vertical_axis,\n         )\n \n         if share:\n@@ -1318,7 +1319,7 @@ def shareview(self, other):\n             raise ValueError(\"view angles are already shared\")\n         self._shared_axes[\"view\"].join(self, other)\n         self._shareview = other\n-        vertical_axis = {0: \"x\", 1: \"y\", 2: \"z\"}[other._vertical_axis]\n+        vertical_axis = self._axis_names[other._vertical_axis]\n         self.view_init(elev=other.elev, azim=other.azim, roll=other.roll,\n                        vertical_axis=vertical_axis, share=True)\n \n@@ -1523,7 +1524,14 @@ def _on_move(self, event):\n             dazim = -(dy/h)*180*np.sin(roll) - (dx/w)*180*np.cos(roll)\n             elev = self.elev + delev\n             azim = self.azim + dazim\n-            self.view_init(elev=elev, azim=azim, roll=roll, share=True)\n+            vertical_axis = self._axis_names[self._vertical_axis]\n+            self.view_init(\n+                elev=elev,\n+                azim=azim,\n+                roll=roll,\n+                vertical_axis=vertical_axis,\n+                share=True,\n+            )\n             self.stale = True\n \n         # Pan\n", "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\nindex 7662509dd9cf..731b0413bf65 100644\n--- a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n@@ -2250,6 +2250,31 @@ def test_view_init_vertical_axis(\n         np.testing.assert_array_equal(tickdir_expected, tickdir_actual)\n \n \n+@pytest.mark.parametrize(\"vertical_axis\", [\"x\", \"y\", \"z\"])\n+def test_on_move_vertical_axis(vertical_axis: str) -> None:\n+    \"\"\"\n+    Test vertical axis is respected when rotating the plot interactively.\n+    \"\"\"\n+    ax = plt.subplot(1, 1, 1, projection=\"3d\")\n+    ax.view_init(elev=0, azim=0, roll=0, vertical_axis=vertical_axis)\n+    ax.figure.canvas.draw()\n+\n+    proj_before = ax.get_proj()\n+    event_click = mock_event(ax, button=MouseButton.LEFT, xdata=0, ydata=1)\n+    ax._button_press(event_click)\n+\n+    event_move = mock_event(ax, button=MouseButton.LEFT, xdata=0.5, ydata=0.8)\n+    ax._on_move(event_move)\n+\n+    assert ax._axis_names.index(vertical_axis) == ax._vertical_axis\n+\n+    # Make sure plot has actually moved:\n+    proj_after = ax.get_proj()\n+    np.testing.assert_raises(\n+        AssertionError, np.testing.assert_allclose, proj_before, proj_after\n+    )\n+\n+\n @image_comparison(baseline_images=['arc_pathpatch.png'],\n                   remove_text=True,\n                   style='mpl20')\n", "problem_statement": "[Bug]: vertical_axis not respected when rotating plots interactively\n### Bug summary\r\n\r\n When setting `ax.view_init(vertical_axis=\"x\")` the plot is initialized as intended but once rotating it a little the plot and `ax._vertical_axis` is reset to the default value.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nx = np.array([0, 1, 2, 4])\r\ny = np.array([5, 10])\r\nz = np.array([100, 150, 200])\r\nX, Y, Z = np.meshgrid(*[x, y, z], indexing=\"ij\")\r\nc = np.arange(0, X.size)\r\n\r\nplt.figure()\r\nfor j, (a, e) in enumerate([(0, 0), (-60, 30)]):\r\n    for i, vert_a in enumerate([\"z\", \"y\", \"x\"]):\r\n        ax = plt.subplot(2, 3, j * 3 + 1 + i, projection=\"3d\")\r\n        pc = ax.scatter(X, Y, Z, c=c)\r\n        # ax.view_init(vertical_axis=vert_a)\r\n        # ax.view_init(azim=0, elev=0, vertical_axis=vert_a)\r\n        # ax.view_init(azim=-60, elev=30, vertical_axis=vert_a)\r\n        ax.view_init(azim=a, elev=e, vertical_axis=vert_a)\r\n        ax.set_title(f\"azim={a}, elev={e}, vertical_axis='{vert_a}'\")\r\n        ax.set_xlabel(\"x\")\r\n        ax.set_ylabel(\"y\")\r\n        ax.set_zlabel(\"z\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nInital view:\r\n![image](https://github.com/matplotlib/matplotlib/assets/14371165/62171edf-dc47-4588-abff-d7ebd12c992b)\r\n\r\nAfter a small rotation on the **bottom right** plot:\r\n![image](https://github.com/matplotlib/matplotlib/assets/14371165/f37d9609-e4c8-461d-b373-ed9e27c42d35)\r\n\r\n\r\n### Expected outcome\r\n\r\n`ax._vertical_axis` should stay the same when rotating plots. This worked correctly in earlier matplotlib version. \r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\n3.12\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "", "created_at": "2024-04-07T14:01:30Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28033, "instance_id": "matplotlib__matplotlib-28033", "issue_numbers": ["26752", "0000"], "base_commit": "380bba1d0b4f3665afdb164ad784dd234ccb8de3", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex b65004b8c272..673998defb66 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -7194,9 +7194,16 @@ def stairs(self, values, edges=None, *,\n             True or an array is passed to *baseline*, a closed\n             path is drawn.\n \n+            If None, then drawn as an unclosed Path.\n+\n         fill : bool, default: False\n             Whether the area under the step curve should be filled.\n \n+            Passing both ``fill=True` and ``baseline=None`` will likely result in\n+            undesired filling: the first and last points will be connected\n+            with a straight line and the fill will be between this line and the stairs.\n+\n+\n         Returns\n         -------\n         StepPatch : `~matplotlib.patches.StepPatch`\n@@ -7234,6 +7241,16 @@ def stairs(self, values, edges=None, *,\n                                    fill=fill,\n                                    **kwargs)\n         self.add_patch(patch)\n+        if baseline is None and fill:\n+            _api.warn_external(\n+                f\"Both {baseline=} and {fill=} have been passed. \"\n+                \"baseline=None is only intended for unfilled stair plots. \"\n+                \"Because baseline is None, the Path used to draw the stairs will \"\n+                \"not be closed, thus because fill is True the polygon will be closed \"\n+                \"by drawing an (unstroked) edge from the first to last point.  It is \"\n+                \"very likely that the resulting fill patterns is not the desired \"\n+                \"result.\"\n+            )\n         if baseline is None:\n             baseline = 0\n         if orientation == 'vertical':\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 819f4eb3b598..3644f0861d1b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2342,6 +2342,18 @@ def test_hist_zorder(histtype, zorder):\n         assert patch.get_zorder() == zorder\n \n \n+def test_stairs_no_baseline_fill_warns():\n+    fig, ax = plt.subplots()\n+    with pytest.warns(UserWarning, match=\"baseline=None and fill=True\"):\n+        ax.stairs(\n+            [4, 5, 1, 0, 2],\n+            [1, 2, 3, 4, 5, 6],\n+            facecolor=\"blue\",\n+            baseline=None,\n+            fill=True\n+        )\n+\n+\n @check_figures_equal(extensions=['png'])\n def test_stairs(fig_test, fig_ref):\n     import matplotlib.lines as mlines\n", "problem_statement": "[Bug]: `ax.stairs()` creates inaccurate `fill` for the plot \n### Bug summary\r\n\r\nI was working on a code to achieve the following look: \r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/7aae54ff-ff30-4ace-8f9d-cc40804b640c)\r\n\r\nI got there by combining `ax.plot()` and `ax.fill_between()` functions. But then I've learnt about the `ax.stairs()` function which is suppose to plot in a step-like fashion and allows to add fill under the line **in one go**.\r\n\r\nHowever, when I tried `ax.stairs()` I got the following result:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/0c016dfe-486d-47f7-b542-76516545f77f)\r\n\r\nThe bug (I think):\r\n* the fill is completely wrong - it doesn't stretch between `x-axis` and the line\r\n\r\nSecondary issues:\r\n* I don't think there's a way to have a separate colour for line and fill at the moment, when I set a colour, line disappears - this is especially visibile when I set e.g. `alpha=0.1`\r\n* I've got a feeling that somehow the grid ends up on top of the plot when I call `ax.stairs()`\r\n\r\n### Code for reproduction\r\n\r\n```python\r\npython\r\nimport matplotlib.pyplot as plt\r\n\r\nx = [1, 4, 10, 12, 15, 20]\r\ny = [2, 4, 1, 3, 1, 4]\r\n\r\nfig, axs = plt.subplots(\r\n    2, 1,\r\n    figsize=(16,10),\r\n    facecolor=\"white\",\r\n    sharex=True,\r\n    sharey=True\r\n)\r\nfig.suptitle(\r\n    \"ax.stairs()\",\r\n    fontsize=20,\r\n)\r\n\r\n# plot points\r\nfor ax in axs:\r\n    ax.scatter(\r\n        x, y,\r\n        marker=\"X\",\r\n        s=275,\r\n        linewidth=1.5,\r\n        edgecolor=\"black\",\r\n        facecolor=\"white\",\r\n        zorder=100  # crude way to keep the points always on top\r\n    )\r\n\r\naxs[0].stairs(\r\n    values=y,  # step height\r\n    edges=[x[0], *x],  # edge width\r\n    baseline=None,\r\n    color=\"red\",\r\n    fill=True,\r\n    label=\"steps-pre: duplicate 1st element in `edges=[x[0], *x]`\"\r\n)\r\naxs[1].stairs(\r\n    values=y,  # step height\r\n    edges=[*x, x[-1]],  # edge\r\n    baseline=None,\r\n    color=\"green\",\r\n    fill=True,\r\n    alpha=0.1,\r\n    label=\"steps-post: duplicate last element in `edges=[*x, x[-1]]`\"\r\n)\r\n\r\n# set axis limits\r\naxs[0].set_ylim(0, 5.5)\r\naxs[0].set_yticks(range(1, 6))\r\naxs[0].set_xlim(0, 21)\r\naxs[1].set_xticks(range(1, 21))\r\n\r\n# add legend\r\nfor ax in axs:\r\n    ax.legend(\r\n        fontsize=16,\r\n        loc=\"upper center\",\r\n        facecolor=\"whitesmoke\",\r\n        edgecolor=\"none\"\r\n    )\r\n\r\n    # Update font size of the 'x' and 'y' axis labels\r\n    ax.tick_params(\r\n        axis=\"both\",\r\n        labelsize=16\r\n    )\r\n\r\n    ax.grid(\r\n        color=\"gainsboro\",\r\n        linewidth=0.5\r\n    )\r\n\r\n# Remove spines\r\nfor position in [\"top\", \"right\"]:\r\n    for ax in axs:\r\n        ax.spines[position].set_visible(False)\r\n\r\nplt.tight_layout()\r\n```\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/f726f74e-5d28-488d-bf66-6536093b3227)\r\n\r\n\r\n### Expected outcome\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/88a1c5e4-f50f-4b30-8f41-59f69aeee169)\r\n\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows \r\n\r\n### Matplotlib Version\r\n\r\n3.7.2\r\n\r\n### Matplotlib Backend\r\n\r\nmodule://matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\n3.10.2\r\n\r\n### Jupyter version\r\n\r\nIPython          : 8.14.0 ipykernel        : 6.25.1 ipywidgets       : not installed jupyter_client   : 8.3.0 jupyter_core     : 5.3.1 jupyter_server   : not installed jupyterlab       : not installed nbclient         : not installed nbconvert        : not installed nbformat         : not installed notebook         : not installed qtconsole        : not installed traitlets        : 5.9.0\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "I may be missing something here, but if you pass `baseline=0` (or skip setting it to `None`) it should solve the fill issue.\r\n\r\nWith that said, I agree that I cannot make it use different colors for the face and the edge. Also, I would suspect that even if it was possible, the edge color probably would be applied to the whole `StepPatch`, but that is pure speculation.\nThanks for the suggestion, I missed that before. \r\n\r\nIndeed, now I can get the fill that goes all the way to the bottom of the plot.\r\n\r\nHowever, I still think it's not right that I can either get a fill _or_ the line, I cannot have both - this is a bit annoying in a corner case like the bottom graph from my original example.\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/7aec0323-d080-4874-a945-3e464a6f0cbd)\r\n\r\nOn top of that, the doc says, `baseline=None` is a valid parameter value:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/d3726912-31e6-4665-8bf7-a1732f0feb3f)\r\n\r\nTherefore I'd expect it produces something more sensible than a fill with a slanted line connecting start and end point of the dataset?\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/b1d32b49-423d-4137-8667-538b1d40e1a4)\r\n\r\n\r\n\r\n\n> Therefore I'd expect it produces something more sensible than a fill with a slanted line connecting start and end point of the dataset?\r\n\r\nI think joining the first and last points is a reasonable default. I don't think we would change it at this point.  \n> > Therefore I'd expect it produces something more sensible than a fill with a slanted line connecting start and end point of the dataset?\r\n> \r\n> I think joining the first and last points is a reasonable default. I don't think we would change it at this point.\r\n\r\nI'm struggling to think of a single use case where an outcome that creates slanted shading like presented above would be a desired outcome.\r\n\r\nPerhaps, a better default would be to set the baseline to `min(y)` if `baseline=None`?\r\n\r\nThis would look as follows:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/70e0cefa-a1ab-4165-aeab-4f5dafe69378)\r\n\r\nAgain, without the line the plot doesn't look as good, but at least the shading seems aligned with the data.\r\n\r\nA desired outcome recreated with `ax.plot()` and `ax.fill_between` would look as follows:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/d4457f3e-f7f3-4d42-bafd-1c212a0bdcfc)\r\n\n> > > Therefore I'd expect it produces something more sensible than a fill with a slanted line connecting start and end point of the dataset?\r\n> > \r\n> > \r\n> > I think joining the first and last points is a reasonable default. I don't think we would change it at this point.\r\n> \r\n> I'm struggling to think of a single use case where an outcome that creates slanted shading like presented above would be a desired outcome.\r\n> \r\n> Perhaps, a better default would be to set the baseline to `min(y)` if `baseline=None`?\r\n\r\n<s>I agree with that.</s>\r\n\r\nActually, the better approach would be to add a new option `baseline='min'` for that. This is more explicit that `None` and has the advantage that there is no API breakage involved.\nUnfortunately we can not, with a single Artist, get the desired effect.  Looking at the combinations of fill and baseline, we see:\r\n\r\n```python\r\nfrom cycler import cycler\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, axs = plt.subplots(2, 2, layout=\"constrained\")\r\n\r\ncycle = cycler(\"baseline\", [0, None]) * cycler(\"fill\", [False, True])\r\n\r\n\r\nfor kwargs, ax in zip(cycle, axs.ravel()):\r\n    ax.stairs(\r\n        [4, 5, 1, 0, 2],\r\n        [1, 2, 3, 4, 5, 6],\r\n        facecolor=\"blue\",\r\n        lw=5,\r\n        edgecolor=\"k\",\r\n        **kwargs\r\n    )\r\n\r\n    ax.set_title(\"baseline={baseline} fill={fill}\".format(**kwargs))\r\n```\r\n![so](https://github.com/matplotlib/matplotlib/assets/199813/ce198f16-29aa-4807-9458-fbf5b1ecafce)\r\n\r\nso 3 out of 4 of them make sense!\r\n\r\n\r\nThe issue is that for stairs we draw the output as a single path. A path has a facecolor (the fill) and the edgecolor (the stroke).  There in no way to stroke _part_ of a Path, either we stroke it with a fixed width or color or not (leaving aside some really wild things with paths that are smaller than their line widths).  The one minor escape hatch we have is that if you fill an open path you can get exactly one edge not stroked which will go straight from the last to first point. This behavior is about the only sensible thing to do as the other options are error, silently not fill, or to fill all space.\r\n\r\nIt is not possible to draw the stairs missing the stroke on 3 edges (bottom and the two \"sides\") using a single path.  Either you include the baseline points, and then we will stroke the front and back, or you do not include them and then the fill is sensible but not at all what you want.\r\n\r\nI think the best you can do is two calls to stairs like\r\n\r\n```python\r\nfig, ax = plt.subplots()\r\nax.stairs(\r\n        [4, 5, 1, 0, 2],\r\n        [1, 2, 3, 4, 5, 6],\r\n        facecolor=\"blue\",\r\n        lw=0,\r\n        fill=True,\r\n        baseline=0\r\n    )\r\nax.stairs(\r\n        [4, 5, 1, 0, 2],\r\n        [1, 2, 3, 4, 5, 6],\r\n        lw=5,\r\n        edgecolor=\"k\",\r\n        fill=False,\r\n        baseline=None\r\n    )\r\n\r\n```\r\n\r\n![so](https://github.com/matplotlib/matplotlib/assets/199813/afea74e3-f99c-4a78-9345-f9a1386e6e77)\r\n\n> Unfortunately we can not, with a single Artist, get the desired effect. Looking at the combinations of fill and baseline, we see:\r\n> \r\n> ```python\r\n> from cycler import cycler\r\n> import matplotlib.pyplot as plt\r\n> \r\n> fig, axs = plt.subplots(2, 2, layout=\"constrained\")\r\n> \r\n> cycle = cycler(\"baseline\", [0, None]) * cycler(\"fill\", [False, True])\r\n> \r\n> \r\n> for kwargs, ax in zip(cycle, axs.ravel()):\r\n>     ax.stairs(\r\n>         [4, 5, 1, 0, 2],\r\n>         [1, 2, 3, 4, 5, 6],\r\n>         facecolor=\"blue\",\r\n>         lw=5,\r\n>         edgecolor=\"k\",\r\n>         **kwargs\r\n>     )\r\n> \r\n>     ax.set_title(\"baseline={baseline} fill={fill}\".format(**kwargs))\r\n> ```\r\n> \r\n> ![so](https://user-images.githubusercontent.com/199813/270037268-ce198f16-29aa-4807-9458-fbf5b1ecafce.png)\r\n> \r\n> so 3 out of 4 of them make sense!\r\n> \r\n> The issue is that for stairs we draw the output as a single path. A path has a facecolor (the fill) and the edgecolor (the stroke). There in no way to stroke _part_ of a Path, either we stroke it with a fixed width or color or not (leaving aside some really wild things with paths that are smaller than their line widths). The one minor escape hatch we have is that if you fill an open path you can get exactly one edge not stroked which will go straight from the last to first point. This behavior is about the only sensible thing to do as the other options are error, silently not fill, or to fill all space.\r\n> \r\n> It is not possible to draw the stairs missing the stroke on 3 edges (bottom and the two \"sides\") using a single path. Either you include the baseline points, and then we will stroke the front and back, or you do not include them and then the fill is sensible but not at all what you want.\r\n> \r\n> I think the best you can do is two calls to stairs like\r\n> \r\n> ```python\r\n> fig, ax = plt.subplots()\r\n> ax.stairs(\r\n>         [4, 5, 1, 0, 2],\r\n>         [1, 2, 3, 4, 5, 6],\r\n>         facecolor=\"blue\",\r\n>         lw=0,\r\n>         fill=True,\r\n>         baseline=0\r\n>     )\r\n> ax.stairs(\r\n>         [4, 5, 1, 0, 2],\r\n>         [1, 2, 3, 4, 5, 6],\r\n>         lw=5,\r\n>         edgecolor=\"k\",\r\n>         fill=False,\r\n>         baseline=None\r\n>     )\r\n> ```\r\n> \r\n> ![so](https://user-images.githubusercontent.com/199813/270039277-afea74e3-f99c-4a78-9345-f9a1386e6e77.png)\r\n\r\nI accept this explanation and it makes sense it might not be worth the effort to make any changes if the function works in majority of use cases.\r\n\r\nAnd one thing that you showed me is that you actually can set fill and edge colour in one call to `ax.stairs`.\r\n\r\nHowever one thing that bothers me now as a bit of inconsistency is that if you don't explicitly specify the `lw` parameter inside the `ax.stairs()`, then the default values are:\r\n* `lw=1` if `fill=False`\r\n* `lw=0` if `fill=True`\r\n\r\nWhy can't it always be `lw=1`?\r\n\r\nI discovered this by playing with your code:\r\n```python\r\nfrom cycler import cycler\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, axs = plt.subplots(2, 2, layout=\"constrained\")\r\n\r\ncycle = cycler(\"baseline\", [0, None]) * cycler(\"fill\", [False, True])\r\n\r\nartists=[]\r\n\r\nfor kwargs, ax in zip(cycle, axs.ravel()):\r\n    a = ax.stairs(\r\n        [4, 5, 1, 0, 2],\r\n        [1, 2, 3, 4, 5, 6],\r\n        facecolor=\"blue\",\r\n        # lw=5,\r\n        edgecolor=\"k\",\r\n        **kwargs\r\n    )\r\n    artists.append(a)\r\n\r\n    ax.set_title(\"baseline={baseline} fill={fill}\".format(**kwargs))\r\n```\r\n\r\nIt gives you this:\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/8880777/d07e124a-eee5-4c5f-b0df-e8cb9bad84e1)\r\n\r\nAt first I thought that perhaps the line is so thin and it somehow get printed behind the fill and that's why you can't see it. But when I checked the actual value, it indicated zero:\r\n\r\n```python\r\nfor a in artists:\r\n    print(a.get_linewidth())\r\n\r\n# Output:\r\n1.0\r\n0.0\r\n1.0\r\n0.0\r\n```\r\n\nAs part of the 2.0 style change we dropped edges on all filled things by default, but if there is no fill then we _have_ to draw the edge (or it is invisible!).", "created_at": "2024-04-05T20:25:31Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28032, "instance_id": "matplotlib__matplotlib-28032", "issue_numbers": ["28020"], "base_commit": "2723052176c2e1e5cc192061121423ad6685c954", "patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 5b0152505397..2e13293028ca 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -1640,6 +1640,7 @@ def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None,\n             # we modify this below, so make a copy (don't modify caller's dict)\n             pil_kwargs = pil_kwargs.copy()\n         pil_shape = (rgba.shape[1], rgba.shape[0])\n+        rgba = np.require(rgba, requirements='C')\n         image = PIL.Image.frombuffer(\n             \"RGBA\", pil_shape, rgba, \"raw\", \"RGBA\", 0, 1)\n         if format == \"png\":\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py\nindex fdbba7299d2b..1602f86716cb 100644\n--- a/lib/matplotlib/tests/test_image.py\n+++ b/lib/matplotlib/tests/test_image.py\n@@ -205,6 +205,14 @@ def test_imsave(fmt):\n     assert_array_equal(arr_dpi1, arr_dpi100)\n \n \n+@pytest.mark.parametrize(\"origin\", [\"upper\", \"lower\"])\n+def test_imsave_rgba_origin(origin):\n+    # test that imsave always passes c-contiguous arrays down to pillow\n+    buf = io.BytesIO()\n+    result = np.zeros((10, 10, 4), dtype='uint8')\n+    mimage.imsave(buf, arr=result, format=\"png\", origin=origin)\n+\n+\n @pytest.mark.parametrize(\"fmt\", [\"png\", \"pdf\", \"ps\", \"eps\", \"svg\"])\n def test_imsave_fspath(fmt):\n     plt.imsave(Path(os.devnull), np.array([[0, 1]]), format=fmt)\n", "problem_statement": "[Bug]: imsave fails on RGBA data when origin is set to lower\n### Bug summary\r\n\r\nUnder certain conditions pyplot's imsave() function will fail, with the underlying PIL library throwing an \"array is not C-contiguous\" error (while the array provided to imsave is C-contiguous).\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nresult = np.zeros((100, 100, 4), dtype='uint8')\r\n\r\nprint(result.flags) # the ndarray is actually C-contiguous\r\n\r\nplt.imsave(fname=\"test_upper.png\", arr=result, format=\"png\", origin=\"upper\")# no problem\r\nplt.imsave(fname=\"test_lower.png\", arr=result, format=\"png\", origin=\"lower\")# error\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nFile [/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/matplotlib/pyplot.py:2200](http://localhost:8888/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/matplotlib/pyplot.py#line=2199), in imsave(fname, arr, **kwargs)\r\n   2198 @_copy_docstring_and_deprecators(matplotlib.image.imsave)\r\n   2199 def imsave(fname, arr, **kwargs):\r\n-> 2200     return matplotlib.image.imsave(fname, arr, **kwargs)\r\n\r\nFile [/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/matplotlib/image.py:1659](http://localhost:8888/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/matplotlib/image.py#line=1658), in imsave(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)\r\n   1657     pil_kwargs = pil_kwargs.copy()\r\n   1658 pil_shape = (rgba.shape[1], rgba.shape[0])\r\n-> 1659 image = PIL.Image.frombuffer(\r\n   1660     \"RGBA\", pil_shape, rgba, \"raw\", \"RGBA\", 0, 1)\r\n   1661 if format == \"png\":\r\n   1662     # Only use the metadata kwarg if pnginfo is not set, because the\r\n   1663     # semantics of duplicate keys in pnginfo is unclear.\r\n   1664     if \"pnginfo\" in pil_kwargs:\r\n\r\nFile [/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/PIL/Image.py:3020](http://localhost:8888/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/PIL/Image.py#line=3019), in frombuffer(mode, size, data, decoder_name, *args)\r\n   3018 if args[0] in _MAPMODES:\r\n   3019     im = new(mode, (1, 1))\r\n-> 3020     im = im._new(core.map_buffer(data, size, decoder_name, 0, args))\r\n   3021     if mode == \"P\":\r\n   3022         from . import ImagePalette\r\n\r\nValueError: ndarray is not C-contiguous\r\n```\r\n\r\n### Expected outcome\r\n\r\nsaved image\r\n\r\n### Additional information\r\n\r\n- The input must be an input of size MxNx4. RGBA fails but RGB works.\r\n- The dtype must be uint8.\r\n- origin must be set to \"lower\"\r\n- Image file type can be set to png, jpg, gif, or tiff, and all trigger the same issue. It's likely not a codec-specific problem.\r\n- The data in the image does not matter.\r\n\r\nSuggestion from stackoverflow user Nick ODell:\r\n[https://github.com/matplotlib/matplotlib/blob/v3.8.3/lib/matplotlib/image.py#L1605](link to code)\r\n\r\nIf origin == \"lower\", then the array is reversed in a zero-copy fashion. If this happens, then arr is no longer C contiguous. It then uses ScalarMappable to convert to rgba. However, if the input is already in rgba, it does not copy it. Because of this, using RGB masks the bug, because the copy would be C contiguous.\r\n\r\nIt then calls PIL.Image.frombuffer, which appears to assume that its input is C contiguous. (Pillow doesn't appear to document this assumption, so this may actually be a Pillow bug?)\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone\n", "hints_text": "I will call attention to Pillow's [`Image.fromarray`](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.fromarray) which calls out:\r\n\r\n> If `obj` is not contiguous, then the `tobytes` method is called and [`frombuffer()`](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.frombuffer) is used.\r\n\r\nWhich both points to this being intentional on the part of Pillow that `frombuffer` requires contiguous data (which honestly aligns with the name \"buffer\", though perhaps could be made more explicit) and suggests that we may be able to fix it by calling the alternate method.\ncan we pay the copy cost?\nTo be clear, `fromarray` is a thin wrapper of `frombuffer`, which does shape (and dtype, though only if `mode` is not explicit) validation, calls `tobytes` if and only if `strides != None` and calls `frombuffer`.\r\n\r\nSo a copy is only made if one is necessary*\r\n\r\n\\* technically, if the the strides given by `obj.__array_interface__.get(\"strides\")` are the tuple form of C-contiguous strides, rather than the implicit \"I'm C Contiguous\" marker `None`, then a copy will be made unnecessarily. By default, numpy arrays _do_ have None in that dictionary when c contiguous from what I see (including views made by reversing an axis and reversing back). but I think it would be valid to have the tuple spelled out.\r\n", "created_at": "2024-04-05T18:13:58Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28030, "instance_id": "matplotlib__matplotlib-28030", "issue_numbers": ["28016"], "base_commit": "d9210dfb6faa03b4583780a208ccc263a5bb8801", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 26a3a580ba3e..0df3b577fdde 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -7272,14 +7272,14 @@ def stairs(self, values, edges=None, *,\n                 \"very likely that the resulting fill patterns is not the desired \"\n                 \"result.\"\n             )\n-        if baseline is None:\n-            baseline = 0\n-        if orientation == 'vertical':\n-            patch.sticky_edges.y.append(np.min(baseline))\n-            self.update_datalim([(edges[0], np.min(baseline))])\n-        else:\n-            patch.sticky_edges.x.append(np.min(baseline))\n-            self.update_datalim([(np.min(baseline), edges[0])])\n+\n+        if baseline is not None:\n+            if orientation == 'vertical':\n+                patch.sticky_edges.y.append(np.min(baseline))\n+                self.update_datalim([(edges[0], np.min(baseline))])\n+            else:\n+                patch.sticky_edges.x.append(np.min(baseline))\n+                self.update_datalim([(np.min(baseline), edges[0])])\n         self._request_autoscale_view()\n         return patch\n \n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 3644f0861d1b..c024095b1c20 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2449,16 +2449,17 @@ def test_stairs_update(fig_test, fig_ref):\n \n \n @check_figures_equal(extensions=['png'])\n-def test_stairs_baseline_0(fig_test, fig_ref):\n-    # Test\n-    test_ax = fig_test.add_subplot()\n-    test_ax.stairs([5, 6, 7], baseline=None)\n+def test_stairs_baseline_None(fig_test, fig_ref):\n+    x = np.array([0, 2, 3, 5, 10])\n+    y = np.array([1.148, 1.231, 1.248, 1.25])\n+\n+    test_axes = fig_test.add_subplot()\n+    test_axes.stairs(y, x, baseline=None)\n \n-    # Ref\n-    ref_ax = fig_ref.add_subplot()\n     style = {'solid_joinstyle': 'miter', 'solid_capstyle': 'butt'}\n-    ref_ax.plot(range(4), [5, 6, 7, 7], drawstyle='steps-post', **style)\n-    ref_ax.set_ylim(0, None)\n+\n+    ref_axes = fig_ref.add_subplot()\n+    ref_axes.plot(x, np.append(y, y[-1]), drawstyle='steps-post', **style)\n \n \n def test_stairs_empty():\n", "problem_statement": "[Bug]: Unexpected ylim of stairs with baseline=None\n### Bug summary\n\nI am not sure if this is a bug or a feature:\r\nI wanted to do the following plot:\r\n![image](https://github.com/matplotlib/matplotlib/assets/59893197/0435e50f-d9d4-41e4-ab60-de390f8530f1)\r\n\r\nwhich can be done using the stairs method with `baseline=None` since I don't want the vertical lines in the extremes. But the plot I get is the following:\r\n![image](https://github.com/matplotlib/matplotlib/assets/59893197/576e32ed-35fa-40ac-8b35-fdd4090b3753)\r\n\r\nAs I was saying, I don't know if this is the expected behaviour of stairs, but I cannot think of a case where one would like to have the lower limit fixed to 0.\n\n### Code for reproduction\n\n```Python\nimport matplotlib.pyplot as plt\r\n\r\nbins = [0, 2, 3, 5, 10]\r\nx = [1.148, 1.231, 1.248, 1.25]\r\n\r\n# Plot using stairs\r\nplt.stairs(x, edges=bins, baseline=None)\r\n\r\n# Plot using step, which is less convenient, but handles the limits correctly\r\n# plt.step(bins, (*x, x[-1]), where='post')\r\n\r\n# plt.ylim(1.1429, 1.2551)\n```\n\n\n### Actual outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/59893197/576e32ed-35fa-40ac-8b35-fdd4090b3753)\r\n\n\n### Expected outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/59893197/0435e50f-d9d4-41e4-ab60-de390f8530f1)\n\n### Additional information\n\nThe problem originates from the lines inside the stairs function\r\n```\r\nif baseline is None:\r\n    baseline = 0\r\nif orientation == 'vertical':\r\n    patch.sticky_edges.y.append(np.min(baseline))\r\n    self.update_datalim([(edges[0], np.min(baseline))])\r\nelse:\r\n    patch.sticky_edges.x.append(np.min(baseline))\r\n    self.update_datalim([(np.min(baseline), edges[0])])\r\n```\r\n\r\nI think that the sticky_edges should not be used when baseline is None. If that is not possible for some other reason, setting `baseline = values` instead of 0 would probably be more intuitive, or something like `baseline = (1 + self._ymargin) * np.min(values) - self._ymargin * np.max(values)`.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone\n", "hints_text": "> I think that the sticky_edges should not be used when baseline is None.\r\n\r\nI agree. Do you want to create a pull request with a fix?\nI think the documentation of the parameter is a bit lacking of what `baseline=None` means as well; is it really \"no baseline\"? Also, what happens with `fill=True`?\n`None` really means no baseline, it leaves out the horizontal edges at the far left and right side. That can be desirable in certain situations. It's a feature. And yes fill becomes awkward in that case, see #26752.\r\n\r\nIf we want something else, https://github.com/matplotlib/matplotlib/issues/26752#issuecomment-1719178161 would be a reasonable extension.\n> I agree. Do you want to create a pull request with a fix?\r\n\r\nI don't have the time right now to do a PR in conditions, so if anyone else wants to implement this, go ahead. Otherwise, I can give it a shot in 1 or 2 months when I have some free time.\nI can create a PR for this issue\nGo for it.", "created_at": "2024-04-05T09:17:09Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 28025, "instance_id": "matplotlib__matplotlib-28025", "issue_numbers": ["21817"], "base_commit": "f799b00c76f5a0af12dd43010e817d816459f4b2", "patch": "diff --git a/doc/devel/style_guide.rst b/doc/devel/style_guide.rst\nindex 9dab7a6d99d2..e35112a65e42 100644\n--- a/doc/devel/style_guide.rst\n+++ b/doc/devel/style_guide.rst\n@@ -155,14 +155,19 @@ reliability and consistency in documentation. They are not interchangeable.\n   |                  |                          |   rotational |              |\n   |                  |                          |   motion.\"   |              |\n   +------------------+--------------------------+--------------+--------------+\n-  | Explicit,        | Explicit approach of     | - Explicit   | - object     |\n-  | Object Oriented  | programming in           | - explicit   |   oriented   |\n-  | Programming (OOP)| Matplotlib.              | - OOP        | - OO-style   |\n+  | Axes interface   | Usage pattern in which   | - Axes       | - explicit   |\n+  |                  | one calls methods on     |   interface  |   interface  |\n+  |                  | Axes and Figure (and     | - call       | - object     |\n+  |                  | sometimes other Artist)  |   methods on |   oriented   |\n+  |                  | objects to configure the |   the Axes / | - OO-style   |\n+  |                  | plot.                    |   Figure     | - OOP        |\n+  |                  |                          |   object     |              |\n   +------------------+--------------------------+--------------+--------------+\n-  | Implicit,        | Implicit approach of     | - Implicit   | - MATLAB like|\n-  | ``pyplot``       | programming in Matplotlib| - implicit   | - Pyplot     |\n-  |                  | with ``pyplot`` module.  | - ``pyplot`` | - pyplot     |\n-  |                  |                          |              |   interface  |\n+  | pyplot interface | Usage pattern in which   | - ``pyplot`` | - implicit   |\n+  |                  | one only calls `.pyplot` |   interface  |   interface  |\n+  |                  | functions to configure   | - call       | - MATLAB like|\n+  |                  | the plot.                |   ``pyplot`` | - Pyplot     |\n+  |                  |                          |   functions  |              |\n   +------------------+--------------------------+--------------+--------------+\n \n .. |Figure| replace:: :class:`~matplotlib.figure.Figure`\n", "test_patch": "", "problem_statement": "[Doc/Dev]: style guide claims \"object oriented\" is verboten. \n### Documentation Link\n\nhttps://matplotlib.org/stable/devel/style_guide.html#terminology\n\n### Problem\n\nThe style guide claims that we should call the object-oriented paradigm the \"object oriented programming\" paradigm, or \"style\".  a) this is not done in the docs (everywhere I can find it is  \"object oriented\" <approach/style/etc> or better: \"object-oriented\" <approach/style/etc> ).  b) its clunky and redundant to add \"programming\" to the phrase.  \r\n\r\n\n\n### Suggested improvement\n\nI think almost always this should be \"object-oriented style\" or \"OO style\".   The hyphen is preferred as this is a compound adjective.\n\n### Matplotlib Version\n\nmain\n", "hints_text": "The motivation of that rule was to break our habit of using \"OO\" as jargon to mean \"use the methods on an explicit object rather than letting pyplot keep track of the current axes\".\r\n\r\nI think we should clarify that if we are talking about the _concept_ of object orientation as a programming paradigm I think that should be exempt from the style guide, but if we are referring to our code in the context of telling users how to use it we should call it \"explicit\" or similar. e.g.\r\n\r\n- Bad: \"We suggest using the OO-style, rather than pyplot, when writing functions\"\r\n- Good: \"We suggest using the explicit interface, rather than the implicit interface, when writing functions\"  \nBut I'm not clear why it is a bad \"habit\" to call it the OO interface. \n\nOutside of the context of these discussions I wouldn't know what was meant by an explicit interface versus an implicit one.  Those are pretty jargony terms.  Sure OO is jargony, but it sounds better than \"not pyplot\" and it has the advantage of making it clear that everything is considered an object. \nI think we still need a better name for the concept.   \u201cObject oriented\u201d is very technical and I assume isn\u2019t very clear for users without a software development background. One suggestion that was brought up was \u201cexplicit\u201d (referring that you explicitly specify the Axes, whereas in pyplot the Axes is implicit). I\u2019m still not quite happy with that terminology and suggest we look further.\nYes, \"Object oriented\" is a technical term, but a) it indicates what is being done in a relatively easy-to-infer way, and b) it is easily searchable on a search engine.  It is _way_ harder to get the right meaning by looking up \"explicit\" (in fact don't ask your children to look up \"explicit\", unless you want to have a long talk with them about what they may find on the internet).  \r\n\r\nGoogle \"explicit program interface\" and google \"object oriented\" and judge which is more parsable by someone who has never taken a computer science course.  \r\n\r\nI guess an alternative may be \"hierarchal interface\" versus \"top-level interface\"?  Maybe there are other candidates....\nI agree that \"explicit\" is way too vague.\r\n\r\nProblem with \"object oriented\": While it's a well defined term, it's not the essence of what we want to communicate. All we want to say is **\"Create one/mutliple Axes with `plt.subplots()` (and the like) and call methods on the Axes object to add add data and configure the plot.\"** While technically this uses OOP in the background, you don't need to know anything about OOP concepts (classes, encapsulation, composition, inheritance, polymorphism, ...). Even more, knowing OOP alone still does not provide you any guidance what we mean by \"use the OOP interface of Matplotlib\". That still needs the context of the above explanation.\r\n\r\nI suggest using someting like \"pyplot\" vs. \"Axes\" in the term we choose: What the user types is\r\n~~~\r\nplt.plot()\r\nplt.xlabel()\r\n~~~\r\nvs.\r\n~~~\r\nax.plot()\r\nax.xlabel()\r\n~~~\r\nHaving `plt` and `ax` reflected in the naming seems a good approach. A very simple terminology could be\r\n- *pyplot interface*\r\n- *Axes interface*\r\n\r\nWhile this disregards some details (You do some things on Figure or Axis objects, you still need to start with `plt.subplots()`), I think the simplicity could be worth it.\n> Having `plt` and `ax` reflected in the naming seems a good approach. A very simple terminology could be\r\n> \r\n> * _pyplot interface_\r\n> * _Axes interface_\r\n\r\nThats a pretty good suggestion!\r\n\n> I agree that \"explicit\" is way too vague.\r\n\r\n\"explicit\" is not explicit enough ? \ud83e\udd23 \r\n\r\n-----\r\n\r\nI agree \"pyplot interface\" and \"Axes interface\" is a good suggestion.\nI think an enduring problem with the \"pyplot interface\" terminology is that you're meant to start every figure creation in explicit/OO style by importing `matplotlib.pyplot` and calling ... a pyplot function (`figure` or `subplots`). I've seen confusion about this before.\r\n\r\nAnd \"Axes\" interface is confusing in the converse way: you never actually call the `Axes` constructor.\r\n\r\nI think I originally proposed \"explicit\" and \"implicit\" (though @tacaswell and I may have a multiple discovery claim) and still like them because I think they communicate, at least somewhat effectively, _why_ you advocate for the explicit/OO interface. (I also 100% +1 @timhoffm's articulation of the case against \"OO\". I would expect a some people might read \"prefer the OO interface\" as participation in one of those pedantic \"OO is great!\" / \"OO is terrible!\" arguments which is neither here nor there.)\r\n\r\nBut \"explicit interface\" and \"implicit interface\" are indeed less forthcoming about how they map onto the actual matplotlib objects/functions that you invoke. What if \"explicit\" and \"implicit\" modified a matplotlib noun, like \"explicit axes\", \"implicit axes\"? Or \"figure\", or \"plot\"?\r\n\r\nI also continue to think that this is such a pervasive source of confusion/difficulty/overestimation of complexity with matplotlib that thinking bigger about how to improve the situation would be really helpful (but out of scope for this discussion, I guess).\nThe confusion that arises because 99.99% of users need to start a figure with `pyplot` is planned to be removed by moving those top-level functions up into the main name space or different module (`import matplotlib as mpl; fig = mpl.figure(...)`).  That leaves spinning up a   GUI as a second thing that pyplot does - @tacaswell has made significant progress on `mpl_gui` which will be where the window manager etc are spun up. That will leave `pyplot` calling those things for backcompatability, and doing implicit gcf/gca/gco management.  The hope is that users will no longer need to call pyplot.  \r\n\r\nOf course the problem with that plan is 15 years of documentation, but....\r\n\r\nThat roadmap is a little bit aside from the current issue, but perhaps we don't need to fix the current docs until we know what the situation will be in a few months.  \r\n\r\n\nOh hey, that's really cool! Well, yes, with approximately 1M code snippets out there using `plt.something`, its half-life will be quite long, but I think that's great news.\nBTW I may have given this feedback before, but it would be really helpful for the matplotlib docs to have a canonical target that clearly explains:\r\n\r\n- what this \"OO\" vs \"pyplot\" (along with synonyms) thing is all about\r\n- what are the relative advantages of each style, along with best practice recommendations\r\n- why you can have a hard time if you don't understand the distinction\r\n\r\nThere is [this page](https://matplotlib.org/stable/tutorials/introductory/lifecycle.html#a-note-on-the-object-oriented-api-vs-pyplot) but I have to say ... it's quite brief, abstract, and jargonful. I don't really see how I could drop that link as a comment on a StackOverflow post where someone is really confused by what happens when they call `plt.xticks` (or whatever) and expect it to clarify things for them.\r\n\r\nThe discussion in this issue is important too \u2014 clear and consistent terminology will help \u2014\u00a0but without an actual explanation of what the terms mean, it's kind of a conversation about the conventions of a secret language.", "created_at": "2024-04-04T23:09:46Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27992, "instance_id": "matplotlib__matplotlib-27992", "issue_numbers": ["27978", "0000"], "base_commit": "55cf8c70214be559268719f0f1049f98c6c6731a", "patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 3b1a01c28408..52850f128cae 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -983,30 +983,42 @@ def figure(\n     `~matplotlib.rcParams` defines the default values, which can be modified\n     in the matplotlibrc file.\n     \"\"\"\n+    allnums = get_fignums()\n+\n     if isinstance(num, FigureBase):\n         # type narrowed to `Figure | SubFigure` by combination of input and isinstance\n         if num.canvas.manager is None:\n             raise ValueError(\"The passed figure is not managed by pyplot\")\n+        elif any([figsize, dpi, facecolor, edgecolor, not frameon,\n+                  kwargs]) and num.canvas.manager.num in allnums:\n+            _api.warn_external(\n+                \"Ignoring specified arguments in this call \"\n+                f\"because figure with num: {num.canvas.manager.num} already exists\")\n         _pylab_helpers.Gcf.set_active(num.canvas.manager)\n         return num.figure\n \n-    allnums = get_fignums()\n     next_num = max(allnums) + 1 if allnums else 1\n     fig_label = ''\n     if num is None:\n         num = next_num\n-    elif isinstance(num, str):\n-        fig_label = num\n-        all_labels = get_figlabels()\n-        if fig_label not in all_labels:\n-            if fig_label == 'all':\n-                _api.warn_external(\"close('all') closes all existing figures.\")\n-            num = next_num\n-        else:\n-            inum = all_labels.index(fig_label)\n-            num = allnums[inum]\n     else:\n-        num = int(num)  # crude validation of num argument\n+        if any([figsize, dpi, facecolor, edgecolor, not frameon,\n+                kwargs]) and num in allnums:\n+            _api.warn_external(\n+                \"Ignoring specified arguments in this call \"\n+                f\"because figure with num: {num} already exists\")\n+        if isinstance(num, str):\n+            fig_label = num\n+            all_labels = get_figlabels()\n+            if fig_label not in all_labels:\n+                if fig_label == 'all':\n+                    _api.warn_external(\"close('all') closes all existing figures.\")\n+                num = next_num\n+            else:\n+                inum = all_labels.index(fig_label)\n+                num = allnums[inum]\n+        else:\n+            num = int(num)  # crude validation of num argument\n \n     # Type of \"num\" has narrowed to int, but mypy can't quite see it\n     manager = _pylab_helpers.Gcf.get_fig_manager(num)  # type: ignore[arg-type]\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_pyplot.py b/lib/matplotlib/tests/test_pyplot.py\nindex a077aede8f8b..63dc239df2e8 100644\n--- a/lib/matplotlib/tests/test_pyplot.py\n+++ b/lib/matplotlib/tests/test_pyplot.py\n@@ -457,3 +457,22 @@ def test_figure_hook():\n         fig = plt.figure()\n \n     assert fig._test_was_here\n+\n+\n+def test_multiple_same_figure_calls():\n+    fig = mpl.pyplot.figure(1, figsize=(1, 2))\n+    with pytest.warns(UserWarning, match=\"Ignoring specified arguments in this call\"):\n+        fig2 = mpl.pyplot.figure(1, figsize=(3, 4))\n+    with pytest.warns(UserWarning, match=\"Ignoring specified arguments in this call\"):\n+        mpl.pyplot.figure(fig, figsize=(5, 6))\n+    assert fig is fig2\n+    fig3 = mpl.pyplot.figure(1)  # Checks for false warnings\n+    assert fig is fig3\n+\n+\n+def test_close_all_warning():\n+    fig1 = plt.figure()\n+\n+    # Check that the warning is issued when 'all' is passed to plt.figure\n+    with pytest.warns(UserWarning, match=\"closes all existing figures\"):\n+        fig2 = plt.figure(\"all\")\n", "problem_statement": "[Bug]:  strange behaviour when redefining figure size\n### Bug summary\r\n\r\nsetting figure size using the figsize parameter to matplotlib.pyplot.figure works just fine, but setting it to a different value in the same script fails in case the first argument to the figure call is an identifier.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot\r\n# first call\r\nfig = matplotlib.pyplot.figure(1,figsize=(1,2))\r\nfig.get_figheight()\r\nfig.get_figwidth()\r\n# second call\r\nfig = matplotlib.pyplot.figure(1,figsize=(3,4))\r\nfig.get_figheight()\r\nfig.get_figwidth()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```Python\r\n>>> import matplotlib.pyplot\r\n>>> # first call\r\n>>> fig = matplotlib.pyplot.figure(1,figsize=(1,2))\r\nQt: Session management error: Could not open network socket\r\n>>> fig.get_figheight()\r\n2.0\r\n>>> fig.get_figwidth()\r\n1.0\r\n>>> # second call\r\n>>> fig = matplotlib.pyplot.figure(1,figsize=(3,4))\r\n>>> fig.get_figheight()\r\n2.0\r\n>>> fig.get_figwidth()\r\n1.0\r\n>>> \r\n```\r\n\r\n### Expected outcome\r\n\r\nThe second call should change the figure size and the get_figheight/get_figwidth methods should report the changed size.\r\n\r\n### Additional information\r\n\r\nNote that the problem does not occur if no identifier is provided to the figure call, so this works just fine:\r\n```Python\r\nfig = matplotlib.pyplot.figure(figsize=(3,4))\r\nfig.get_figheight()\r\nfig.get_figwidth()\r\n```\r\n### Operating system\r\n\r\nFedora 39 linux\r\n\r\n### Matplotlib Version\r\n\r\n3.8.2\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\nPython 3.12.2\r\n\r\n### Jupyter version\r\n\r\nn.a.\r\n\r\n### Installation\r\n\r\nLinux package manager\n", "hints_text": "`figure(1, ...)` returns a figure with the given id if that exists, or creates one if not.\r\n\r\nThe second call just returns the same figure again. Kim against modifying an existing figure through the interface. We may discuss whether we want to warn on that. I think a recall should not have any parameters. Currently, they are ignored. The only downside would be that you can now do the exact same call twice. But I argue that creation and recall are fundamentally different and the user should know which one they want. (This does not improve the situation for. the no kwargs case, but at least does not yield a figure other than expected.\nWell, this behaviour clearly surprised me, and it took me some time to find the issue when working on some code that I did not write myself.\r\nYes, I think it would be good to issue a warning if a user tries to add additional parameters on a second call.\r\nThe syntax of the call suggests that this is an instantiation of a class and therefore would create a new figure with new settings, but clearly this is not the case for the second call.\r\nI think it would be much more clear if there was a second function, called something like get_figure(identifier) to retrieve an already existing figure. Without identifier it could just be the same as gcf()\nFor context, the current behavior derives from how Matlab behaves. In\r\nMatlab, calling `figure(1)` either creates a new figure with that id, or\r\ngives you back the existing figure. I do think a warning would be\r\nappropriate. Maybe we keep an internal dictionary mapping the figure id to\r\nits instantiation arguments (or perhaps more robustly, store them in the\r\nFigure object itself?).\r\n\r\nOn Tue, Mar 26, 2024 at 9:54\u202fAM Jos de Kloe ***@***.***>\r\nwrote:\r\n\r\n> Well, this behaviour clearly surprised me, and it took me some time to\r\n> find the issue when working on some code that I did not write myself.\r\n> Yes, I think it would be good to issue a warning if a user tries to add\r\n> additional parameters on a second call.\r\n> The syntax of the call suggests that this is an instantiation of a class\r\n> and therefore would create a new figure with new settings, but clearly this\r\n> is not the case for the second call.\r\n> I think it would be much more clear if there was a second function, called\r\n> something like get_figure(identifier) to retrieve an already existing\r\n> figure. Without identifier it could just be the same as gcf()\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27978#issuecomment-2020492797>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AACHF6C7HIT2A6FP6DWYNW3Y2FVXJAVCNFSM6AAAAABFIZKWRKVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDAMRQGQ4TENZZG4>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nI agree we should we warning if user input is ignored.  I have a vague memory that we have talked about this before but got stuck on what should we do in the case of\r\n\r\n```python\r\nimport matplotlib.pyplot\r\n# first call\r\nfig = matplotlib.pyplot.figure(1,figsize=(1,2))\r\nfig.get_figheight()\r\nfig.get_figwidth()\r\n# second call\r\nfig = matplotlib.pyplot.figure(1,figsize=(1,2))\r\nfig.get_figheight()\r\nfig.get_figwidth()\r\n```\r\n\r\nOn one hand, we should warn because we are reusing the figure and ignoring all of the users input, on the other hand the values match the values that are already on the existing figure so we should not warn because they actually got what the wanted.\r\n\r\nIt is possible I may be remembering a similar discussion about reusing existing axes?\nI can see an argument to warn also for a second identical call with kwargs: while you get the same type of figure, in any non-trivial use case, you\u2018ll get an empty figure for the first call and a non-empty figure for the second call. These are so fundamentally different that it\u2018s unlikely you can work with them correctly if you don\u2018t know from context which one you\u2019ll get. And if you know the figure exists, `figure(N)` just means \u201emake figure N active\u201c no need to repeat its arguments. Also since this is likely used interactively, the short version without arguments is more convenient.\r\n\r\n--\r\n\r\nEdit: To give context: What options do we have?\r\n\r\n#### Do nothing at all\r\n\r\nDisadvantage: The above example: You call with an explicit parameter but get back something different\r\n\r\n```\r\n>>> fig = plt.figure(1,figsize=(1,2))\r\n>>> fig = plt.figure(1,figsize=(3,4))\r\n>>> fig.get_figheight()\r\n2.0\r\n>>> fig.get_figwidth()\r\n1.0\r\n```\r\n\r\n#### Only warn if the given parameters do not match\r\n\r\nTechnical note: Detecting this correctly is somewhat cumbersome. You have to store the called parameters; and maybe normalize (e.g. positional vs. kwarg usage).\r\n\r\nUsability note: Would we require to replicate all args for the recall, or should we accept the bare `figure(1)` as well even if the first call had the arguments? - IMHO clearly the second. This is primarily for interactive use and forcing to type out all kwargs again would be annoying.\r\n\r\n#### Always warn if parameters are given for a recall.\r\n\r\nWhile one could argue that `plt.figure(1)` returning a figure with non-standard parameters is surprising, you really don't know what you are getting from the code because lots of configuration is determined by `rcParams`.\r\n\r\nSecond, as stated above, recall is mainly for interactive usage, so the short version is desireable, and nobody should need to type out the parameters again. So warning on two identical kwarg calls is ok - it may even be helpful, because you may think you get a new figure, but you don't.\r\n\r\n---\r\n\r\nOverall for simplicity and safety, I propose to always warn if parameters are given for a recall.\n> Overall for simplicity and safety, I propose to always warn if parameters are given for a recall.\r\n\r\nI agree with this proposal.", "created_at": "2024-03-29T16:20:44Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27964, "instance_id": "matplotlib__matplotlib-27964", "issue_numbers": ["27820", "0000"], "base_commit": "a218d5cace6408e7dc79aa6fbccd8f8c1eec5998", "patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 5b0152505397..43b8c007a867 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -1085,12 +1085,16 @@ def make_image(self, renderer, magnification=1.0, unsampled=False):\n                 B[:, :, 0:3] = A\n                 B[:, :, 3] = 255\n                 A = B\n-        vl = self.axes.viewLim\n         l, b, r, t = self.axes.bbox.extents\n         width = int(((round(r) + 0.5) - (round(l) - 0.5)) * magnification)\n         height = int(((round(t) + 0.5) - (round(b) - 0.5)) * magnification)\n-        x_pix = np.linspace(vl.x0, vl.x1, width)\n-        y_pix = np.linspace(vl.y0, vl.y1, height)\n+\n+        invertedTransform = self.axes.transData.inverted()\n+        x_pix = invertedTransform.transform(\n+            [(x, b) for x in np.linspace(l, r, width)])[:, 0]\n+        y_pix = invertedTransform.transform(\n+            [(l, y) for y in np.linspace(b, t, height)])[:, 1]\n+\n         if self._interpolation == \"nearest\":\n             x_mid = (self._Ax[:-1] + self._Ax[1:]) / 2\n             y_mid = (self._Ay[:-1] + self._Ay[1:]) / 2\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_image/nonuniform_and_pcolor.png b/lib/matplotlib/tests/baseline_images/test_image/nonuniform_and_pcolor.png\nindex cb0aa4815c4e..0d6060411751 100644\nBinary files a/lib/matplotlib/tests/baseline_images/test_image/nonuniform_and_pcolor.png and b/lib/matplotlib/tests/baseline_images/test_image/nonuniform_and_pcolor.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_image/nonuniform_logscale.png b/lib/matplotlib/tests/baseline_images/test_image/nonuniform_logscale.png\nnew file mode 100644\nindex 000000000000..da2c0467864e\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_image/nonuniform_logscale.png differ\ndiff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py\nindex fdbba7299d2b..dea5fc991e06 100644\n--- a/lib/matplotlib/tests/test_image.py\n+++ b/lib/matplotlib/tests/test_image.py\n@@ -1406,6 +1406,27 @@ def test_nonuniform_and_pcolor():\n         ax.set(xlim=(0, 10))\n \n \n+@image_comparison([\"nonuniform_logscale.png\"], style=\"mpl20\")\n+def test_nonuniform_logscale():\n+    _, axs = plt.subplots(ncols=3, nrows=1)\n+\n+    for i in range(3):\n+        ax = axs[i]\n+        im = NonUniformImage(ax)\n+        im.set_data(np.arange(1, 4) ** 2, np.arange(1, 4) ** 2,\n+                    np.arange(9).reshape((3, 3)))\n+        ax.set_xlim(1, 16)\n+        ax.set_ylim(1, 16)\n+        ax.set_box_aspect(1)\n+        if i == 1:\n+            ax.set_xscale(\"log\", base=2)\n+            ax.set_yscale(\"log\", base=2)\n+        if i == 2:\n+            ax.set_xscale(\"log\", base=4)\n+            ax.set_yscale(\"log\", base=4)\n+        ax.add_image(im)\n+\n+\n @image_comparison(\n     ['rgba_antialias.png'], style='mpl20', remove_text=True,\n     tol=0 if platform.machine() == 'x86_64' else 0.007)\n", "problem_statement": "[Bug]: Logscale Axis + NonUniformImage + GUI move tool = Distortion\n### Bug summary\n\nRun the code below, which uses set.xscale(\"log\") and NonUniformImage. Choose the move tool (Arrows in all 4 directions) and try to pan the image around. Instead of panning, image distorts.\n\n### Code for reproduction\n\n```Python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.image import NonUniformImage\r\n\r\nchg=np.logspace(0,1,10)\r\nchg1=chg[:,None]\r\nchg2=chg[None,:]\r\ng=chg1+chg2\r\ng+=50*(np.add.outer(np.arange(10),np.arange(10))%2)\r\n#checkerboard, to make effect clearer\r\nfig,ax=plt.subplots()\r\nax.set_xscale(\"log\")\r\nax.set_yscale(\"log\")\r\nim=NonUniformImage(ax,extent=[chg[0],chg[-1],chg[0],chg[-1]],origin=\"lower\")\r\n\r\n\r\nim.set_data(np.linspace(1,10,10),np.linspace(1,10,10),g)\r\nax.add_image(im)\r\n\r\nplt.show()\n```\n\n\n### Actual outcome\n\n![image](https://github.com/matplotlib/matplotlib/assets/12258311/a4f872e8-35b5-4ec1-bf03-ec07664611f1)\r\n![image](https://github.com/matplotlib/matplotlib/assets/12258311/9059a6ee-a489-4848-9f37-b178ca2c31e7)\r\n\r\nThese are supposed to be the same image. I just used the pan tool. \r\nBut the aspect ratio has changed. And the boundary of the rightmost colour change has gone from 0.75 to 0.5.\r\n\r\nClicking and dragging produces behaviour that is visually obviously not-right. \r\n\n\n### Expected outcome\n\nThe image should pan around. \n\n### Additional information\n\n No bug appears when I use a plt.imshow on the log scale axis. Or when I use the same NonUniformImage code without the logscale axis. The bug only appears with all 3 conditions are met.\r\n\r\nI was trying to find a sensible way to display an image on log-log axes with constant screen space per pixel, when I discovered this bug. \r\n\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\nPython 3.11.5\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n", "hints_text": "Suggest using pcolormesh for this.  \nThe boundaries not being correct does actually behave the same way on a linear scale - if you scroll past the lower limit (1) in the example above the axes stays blue, instead of scrolling past the image into an empty white area.", "created_at": "2024-03-22T17:14:33Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27952, "instance_id": "matplotlib__matplotlib-27952", "issue_numbers": ["22376", "0000"], "base_commit": "394b80d59755c07e7f7ae2122a66f4191d9d6cf7", "patch": "diff --git a/doc/api/figure_api.rst b/doc/api/figure_api.rst\nindex 937020afd8fc..2371e5a9a863 100644\n--- a/doc/api/figure_api.rst\n+++ b/doc/api/figure_api.rst\n@@ -71,6 +71,7 @@ Annotating\n    Figure.align_labels\n    Figure.align_xlabels\n    Figure.align_ylabels\n+   Figure.align_titles\n    Figure.autofmt_xdate\n \n \n@@ -264,6 +265,7 @@ Annotating\n    SubFigure.align_labels\n    SubFigure.align_xlabels\n    SubFigure.align_ylabels\n+   SubFigure.align_titles\n \n Adding and getting Artists\n --------------------------\ndiff --git a/doc/users/next_whats_new/figure_align_titles.rst b/doc/users/next_whats_new/figure_align_titles.rst\nnew file mode 100644\nindex 000000000000..230e5f0a8990\n--- /dev/null\n+++ b/doc/users/next_whats_new/figure_align_titles.rst\n@@ -0,0 +1,7 @@\n+subplot titles can now be automatically aligned\n+-----------------------------------------------\n+\n+Subplot axes titles can be misaligned vertically if tick labels or\n+xlabels are placed at the top of one subplot. The new method on the\n+`.Figure` class: `.Figure.align_titles` will now align the titles\n+vertically.\ndiff --git a/galleries/examples/subplots_axes_and_figures/align_labels_demo.py b/galleries/examples/subplots_axes_and_figures/align_labels_demo.py\nindex 88f443ca0076..4935878ee027 100644\n--- a/galleries/examples/subplots_axes_and_figures/align_labels_demo.py\n+++ b/galleries/examples/subplots_axes_and_figures/align_labels_demo.py\n@@ -1,37 +1,43 @@\n \"\"\"\n-===============\n-Aligning Labels\n-===============\n+==========================\n+Aligning Labels and Titles\n+==========================\n \n-Aligning xlabel and ylabel using `.Figure.align_xlabels` and\n-`.Figure.align_ylabels`\n+Aligning xlabel, ylabel, and title using `.Figure.align_xlabels`,\n+`.Figure.align_ylabels`, and `.Figure.align_titles`.\n \n-`.Figure.align_labels` wraps these two functions.\n+`.Figure.align_labels` wraps the x and y label functions.\n \n Note that the xlabel \"XLabel1 1\" would normally be much closer to the\n-x-axis, and \"YLabel1 0\" would be much closer to the y-axis of their\n-respective axes.\n+x-axis, \"YLabel0 0\" would be much closer to the y-axis, and title\n+\"Title0 0\" would be much closer to the top of their respective axes.\n \"\"\"\n import matplotlib.pyplot as plt\n import numpy as np\n \n-import matplotlib.gridspec as gridspec\n+fig, axs = plt.subplots(2, 2, layout='constrained')\n \n-fig = plt.figure(tight_layout=True)\n-gs = gridspec.GridSpec(2, 2)\n-\n-ax = fig.add_subplot(gs[0, :])\n+ax = axs[0][0]\n ax.plot(np.arange(0, 1e6, 1000))\n-ax.set_ylabel('YLabel0')\n-ax.set_xlabel('XLabel0')\n+ax.set_title('Title0 0')\n+ax.set_ylabel('YLabel0 0')\n+\n+ax = axs[0][1]\n+ax.plot(np.arange(1., 0., -0.1) * 2000., np.arange(1., 0., -0.1))\n+ax.set_title('Title0 1')\n+ax.xaxis.tick_top()\n+ax.tick_params(axis='x', rotation=55)\n+\n \n for i in range(2):\n-    ax = fig.add_subplot(gs[1, i])\n+    ax = axs[1][i]\n     ax.plot(np.arange(1., 0., -0.1) * 2000., np.arange(1., 0., -0.1))\n     ax.set_ylabel('YLabel1 %d' % i)\n     ax.set_xlabel('XLabel1 %d' % i)\n     if i == 0:\n         ax.tick_params(axis='x', rotation=55)\n+\n fig.align_labels()  # same as fig.align_xlabels(); fig.align_ylabels()\n+fig.align_titles()\n \n plt.show()\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 23cc1c869c07..0164f4e11169 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2985,8 +2985,13 @@ def _update_title_position(self, renderer):\n \n         titles = (self.title, self._left_title, self._right_title)\n \n-        # Need to check all our twins too, and all the children as well.\n-        axs = self._twinned_axes.get_siblings(self) + self.child_axes\n+        # Need to check all our twins too, aligned axes, and all the children\n+        # as well.\n+        axs = set()\n+        axs.update(self.child_axes)\n+        axs.update(self._twinned_axes.get_siblings(self))\n+        axs.update(self.figure._align_label_groups['title'].get_siblings(self))\n+\n         for ax in self.child_axes:  # Child positions must be updated first.\n             locator = ax.get_axes_locator()\n             ax.apply_aspect(locator(self, renderer) if locator else None)\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 087c193d48c3..0a0ff01a2571 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -132,10 +132,14 @@ def __init__(self, **kwargs):\n         self._supxlabel = None\n         self._supylabel = None\n \n-        # groupers to keep track of x and y labels we want to align.\n-        # see self.align_xlabels and self.align_ylabels and\n-        # axis._get_tick_boxes_siblings\n-        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n+        # groupers to keep track of x, y labels and title we want to align.\n+        # see self.align_xlabels, self.align_ylabels,\n+        # self.align_titles, and axis._get_tick_boxes_siblings\n+        self._align_label_groups = {\n+            \"x\": cbook.Grouper(),\n+            \"y\": cbook.Grouper(),\n+            \"title\": cbook.Grouper()\n+        }\n \n         self._localaxes = []  # track all Axes\n         self.artists = []\n@@ -1293,7 +1297,7 @@ def subplots_adjust(self, left=None, bottom=None, right=None, top=None,\n \n     def align_xlabels(self, axs=None):\n         \"\"\"\n-        Align the xlabels of subplots in the same subplot column if label\n+        Align the xlabels of subplots in the same subplot row if label\n         alignment is being done automatically (i.e. the label position is\n         not manually set).\n \n@@ -1314,6 +1318,7 @@ def align_xlabels(self, axs=None):\n         See Also\n         --------\n         matplotlib.figure.Figure.align_ylabels\n+        matplotlib.figure.Figure.align_titles\n         matplotlib.figure.Figure.align_labels\n \n         Notes\n@@ -1375,6 +1380,7 @@ def align_ylabels(self, axs=None):\n         See Also\n         --------\n         matplotlib.figure.Figure.align_xlabels\n+        matplotlib.figure.Figure.align_titles\n         matplotlib.figure.Figure.align_labels\n \n         Notes\n@@ -1412,6 +1418,53 @@ def align_ylabels(self, axs=None):\n                         # grouper for groups of ylabels to align\n                         self._align_label_groups['y'].join(ax, axc)\n \n+    def align_titles(self, axs=None):\n+        \"\"\"\n+        Align the titles of subplots in the same subplot row if title\n+        alignment is being done automatically (i.e. the title position is\n+        not manually set).\n+\n+        Alignment persists for draw events after this is called.\n+\n+        Parameters\n+        ----------\n+        axs : list of `~matplotlib.axes.Axes`\n+            Optional list of (or ndarray) `~matplotlib.axes.Axes`\n+            to align the titles.\n+            Default is to align all Axes on the figure.\n+\n+        See Also\n+        --------\n+        matplotlib.figure.Figure.align_xlabels\n+        matplotlib.figure.Figure.align_ylabels\n+        matplotlib.figure.Figure.align_labels\n+\n+        Notes\n+        -----\n+        This assumes that ``axs`` are from the same `.GridSpec`, so that\n+        their `.SubplotSpec` positions correspond to figure positions.\n+\n+        Examples\n+        --------\n+        Example with titles::\n+\n+            fig, axs = plt.subplots(1, 2)\n+            axs[0].set_aspect('equal')\n+            axs[0].set_title('Title 0')\n+            axs[1].set_title('Title 1')\n+            fig.align_titles()\n+        \"\"\"\n+        if axs is None:\n+            axs = self.axes\n+        axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]\n+        for ax in axs:\n+            _log.debug(' Working on: %s', ax.get_title())\n+            rowspan = ax.get_subplotspec().rowspan\n+            for axc in axs:\n+                rowspanc = axc.get_subplotspec().rowspan\n+                if (rowspan.start == rowspanc.start):\n+                    self._align_label_groups['title'].join(ax, axc)\n+\n     def align_labels(self, axs=None):\n         \"\"\"\n         Align the xlabels and ylabels of subplots with the same subplots\n@@ -1430,8 +1483,8 @@ def align_labels(self, axs=None):\n         See Also\n         --------\n         matplotlib.figure.Figure.align_xlabels\n-\n         matplotlib.figure.Figure.align_ylabels\n+        matplotlib.figure.Figure.align_titles\n         \"\"\"\n         self.align_xlabels(axs=axs)\n         self.align_ylabels(axs=axs)\ndiff --git a/lib/matplotlib/figure.pyi b/lib/matplotlib/figure.pyi\nindex 687ae9e500d0..eae21c2614f0 100644\n--- a/lib/matplotlib/figure.pyi\n+++ b/lib/matplotlib/figure.pyi\n@@ -161,6 +161,7 @@ class FigureBase(Artist):\n     ) -> None: ...\n     def align_xlabels(self, axs: Iterable[Axes] | None = ...) -> None: ...\n     def align_ylabels(self, axs: Iterable[Axes] | None = ...) -> None: ...\n+    def align_titles(self, axs: Iterable[Axes] | None = ...) -> None: ...\n     def align_labels(self, axs: Iterable[Axes] | None = ...) -> None: ...\n     def add_gridspec(self, nrows: int = ..., ncols: int = ..., **kwargs) -> GridSpec: ...\n     @overload\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_figure/figure_align_titles_constrained.png b/lib/matplotlib/tests/baseline_images/test_figure/figure_align_titles_constrained.png\nnew file mode 100644\nindex 000000000000..78dffc18e20c\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_figure/figure_align_titles_constrained.png differ\ndiff --git a/lib/matplotlib/tests/baseline_images/test_figure/figure_align_titles_tight.png b/lib/matplotlib/tests/baseline_images/test_figure/figure_align_titles_tight.png\nnew file mode 100644\nindex 000000000000..f719ae6931f0\nBinary files /dev/null and b/lib/matplotlib/tests/baseline_images/test_figure/figure_align_titles_tight.png differ\ndiff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 8ee6aae99361..58aecd3dea8b 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -66,6 +66,32 @@ def test_align_labels():\n     fig.align_labels()\n \n \n+@image_comparison(['figure_align_titles_tight.png',\n+                   'figure_align_titles_constrained.png'],\n+                  tol=0 if platform.machine() == 'x86_64' else 0.022,\n+                  style='mpl20')\n+def test_align_titles():\n+    for layout in ['tight', 'constrained']:\n+        fig, axs = plt.subplots(1, 2, layout=layout, width_ratios=[2, 1])\n+\n+        ax = axs[0]\n+        ax.plot(np.arange(0, 1e6, 1000))\n+        ax.set_title('Title0 left', loc='left')\n+        ax.set_title('Title0 center', loc='center')\n+        ax.set_title('Title0 right', loc='right')\n+\n+        ax = axs[1]\n+        ax.plot(np.arange(0, 1e4, 100))\n+        ax.set_title('Title1')\n+        ax.set_xlabel('Xlabel0')\n+        ax.xaxis.set_label_position(\"top\")\n+        ax.xaxis.tick_top()\n+        for tick in ax.get_xticklabels():\n+            tick.set_rotation(90)\n+\n+        fig.align_titles()\n+\n+\n def test_align_labels_stray_axes():\n     fig, axs = plt.subplots(2, 2)\n     for nn, ax in enumerate(axs.flat):\n", "problem_statement": "[ENH]: align_titles\n### Problem\n\nThere's align_xlabels and align_ylabels to align the x and y labels, but no align_titles; this would be useful e.g. for\r\n```python\r\nfrom pylab import *\r\nfig, axs = subplots(1, 2, subplot_kw={\"xlabel\": \"x\", \"ylabel\": \"y\", \"title\": \"t\"})\r\naxs[0].imshow(zeros((3, 5)))\r\naxs[1].imshow(zeros((5, 3)))\r\nfig.align_labels()\r\n```\r\n![test](https://user-images.githubusercontent.com/1322974/152163429-d1169ce2-8818-4fb2-9a9b-545780a49a10.png)\n\n### Proposed solution\n\nAdd Figure.align_titles.\n", "hints_text": "This is _probably_ a good first issue; you have to copy what `align_xlabels` does, but using the title texts.\n@QuLogic / @anntzer  - I would like to work on this, can I give it a try? :)\nGo for it.\nThanks @anntzer . Will start working on it\n@pradhanvickey are you still working on this issue?\r\n\nWe tend not to reserve issues.  If there is no PR feel free to submit one.  \n@QuLogic / @anntzer. Both @lijake8 and myself would like to work on this. Is this okay?\r\n\r\nTake\nIs this issue still open?\r\nIf yes can you assign me @anntzer ?\r\n\nSee https://matplotlib.org/devdocs/devel/contributing.html#issues-for-new-contributors.\nI don\u2019t see any PR on the issue but probably @neil-gurnani  is still working on it. I\u2019ll wait a couple of days or look for a different issue.\nI've been looking at this for a couple weeks -- it doesn't appear to be as easy as expected. We can replicate the grouping of axes with the the same rowspans, as done in align_xlabels(), however, updating the title location is done in the _AxesBase class, while the label updates are done in the Figure class. Importantly, the Figure class has access to subplots, but the axesBase class does not have a way to access the subplots or a grouper we make in the figure class, where align_titles() would exist. @anntzer  I'm new to Matplotlib, was wondering if there is some workaround I'm missing to share the relevant data between the classes.\r\n\r\nBasically, we'd need to share either a grouper object or subplot location information from the Figure class (where the align_titles function would be written) to the axesBase class (where the title update occurs). Do you have any thoughts or are we missing anthing?\nthe title moving logic was copied from the x/ylabel moving logic,  so aligning the titles should be possible after the automated moving that happens in `Axes`, just as its possible to align the x/y labels. \nI took a quick look at this again.  The logic in `axis.py` is exactly the same logic you would need to use in `_base.py` in `_update_title_position`.  You can just make another `_align_label_groups['titles']`.  I think there are some details to work out, but the information flow is exactly the same as for the way it is set up now.  \nThank you for the response! That's what I tried, but I don't see how the AxesBase class in` _base.py `has access to the `_align_label_groups['titles']` which is part of the FigureBase class.\nEach axes has a self.figure.  \n@jklymak That helped! We figured it out and are working on testing and documentation\r\n", "created_at": "2024-03-20T16:02:30Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27948, "instance_id": "matplotlib__matplotlib-27948", "issue_numbers": ["27663"], "base_commit": "4cbef2d4c049aa5c748d646e38fd9803278a5695", "patch": "diff --git a/doc/users/next_whats_new/backend_registry.rst b/doc/users/next_whats_new/backend_registry.rst\nindex 61b65a9d6470..7632c978f9c5 100644\n--- a/doc/users/next_whats_new/backend_registry.rst\n+++ b/doc/users/next_whats_new/backend_registry.rst\n@@ -3,4 +3,15 @@ BackendRegistry\n \n New :class:`~matplotlib.backends.registry.BackendRegistry` class is the single\n source of truth for available backends. The singleton instance is\n-``matplotlib.backends.backend_registry``.\n+``matplotlib.backends.backend_registry``. It is used internally by Matplotlib,\n+and also IPython (and therefore Jupyter) starting with IPython 8.24.0.\n+\n+There are three sources of backends: built-in (source code is within the\n+Matplotlib repository), explicit ``module://some.backend`` syntax (backend is\n+obtained by loading the module), or via an entry point (self-registering\n+backend in an external package).\n+\n+To obtain a list of all registered backends use:\n+\n+    >>> from matplotlib.backends import backend_registry\n+    >>> backend_registry.list_all()\ndiff --git a/galleries/users_explain/figure/backends.rst b/galleries/users_explain/figure/backends.rst\nindex 0aa20fc58862..dc6d8a89457d 100644\n--- a/galleries/users_explain/figure/backends.rst\n+++ b/galleries/users_explain/figure/backends.rst\n@@ -175,7 +175,8 @@ QtAgg     Agg rendering in a Qt_ canvas (requires PyQt_ or `Qt for Python`_,\n           more details.\n ipympl    Agg rendering embedded in a Jupyter widget (requires ipympl_).\n           This backend can be enabled in a Jupyter notebook with\n-          ``%matplotlib ipympl``.\n+          ``%matplotlib ipympl`` or ``%matplotlib widget``.  Works with\n+          Jupyter ``lab`` and ``notebook>=7``.\n GTK3Agg   Agg rendering to a GTK_ 3.x canvas (requires PyGObject_ and\n           pycairo_).  This backend can be activated in IPython with\n           ``%matplotlib gtk3``.\n@@ -188,7 +189,8 @@ TkAgg     Agg rendering to a Tk_ canvas (requires TkInter_). This\n           backend can be activated in IPython with ``%matplotlib tk``.\n nbAgg     Embed an interactive figure in a Jupyter classic notebook.  This\n           backend can be enabled in Jupyter notebooks via\n-          ``%matplotlib notebook``.\n+          ``%matplotlib notebook`` or ``%matplotlib nbagg``.  Works with\n+          Jupyter ``notebook<7`` and ``nbclassic``.\n WebAgg    On ``show()`` will start a tornado server with an interactive\n           figure.\n GTK3Cairo Cairo rendering to a GTK_ 3.x canvas (requires PyGObject_ and\n@@ -200,7 +202,7 @@ wxAgg     Agg rendering to a wxWidgets_ canvas (requires wxPython_ 4).\n ========= ================================================================\n \n .. note::\n-   The names of builtin backends case-insensitive; e.g., 'QtAgg' and\n+   The names of builtin backends are case-insensitive; e.g., 'QtAgg' and\n    'qtagg' are equivalent.\n \n .. _`Anti-Grain Geometry`: http://agg.sourceforge.net/antigrain.com/\n@@ -222,11 +224,13 @@ wxAgg     Agg rendering to a wxWidgets_ canvas (requires wxPython_ 4).\n .. _wxWidgets: https://www.wxwidgets.org/\n .. _ipympl: https://www.matplotlib.org/ipympl\n \n+.. _ipympl_install:\n+\n ipympl\n ^^^^^^\n \n-The Jupyter widget ecosystem is moving too fast to support directly in\n-Matplotlib.  To install ipympl:\n+The ipympl backend is in a separate package that must be explicitly installed\n+if you wish to use it, for example:\n \n .. code-block:: bash\n \ndiff --git a/galleries/users_explain/figure/figure_intro.rst b/galleries/users_explain/figure/figure_intro.rst\nindex 462a3fc848dc..80cbb3aeeb45 100644\n--- a/galleries/users_explain/figure/figure_intro.rst\n+++ b/galleries/users_explain/figure/figure_intro.rst\n@@ -52,14 +52,20 @@ Notebooks and IDEs\n \n If you are using a Notebook (e.g. `Jupyter <https://jupyter.org>`_) or an IDE\n that renders Notebooks (PyCharm, VSCode, etc), then they have a backend that\n-will render the Matplotlib Figure when a code cell is executed.  One thing to\n-be aware of is that the default Jupyter backend (``%matplotlib inline``) will\n+will render the Matplotlib Figure when a code cell is executed.  The default\n+Jupyter backend (``%matplotlib inline``) creates static plots that\n by default trim or expand the figure size to have a tight box around Artists\n-added to the Figure (see :ref:`saving_figures`, below).  If you use a backend\n-other than the default \"inline\" backend, you will likely need to use an ipython\n-\"magic\" like ``%matplotlib notebook`` for the Matplotlib :ref:`notebook\n-<jupyter_notebooks_jupyterlab>` or ``%matplotlib widget`` for the  `ipympl\n-<https://matplotlib.org/ipympl/>`_ backend.\n+added to the Figure (see :ref:`saving_figures`, below).  For interactive plots\n+in Jupyter you will need to use an ipython \"magic\" like ``%matplotlib widget``\n+for the  `ipympl <https://matplotlib.org/ipympl/>`_ backend in ``jupyter lab``\n+or ``notebook>=7``, or ``%matplotlib notebook`` for the Matplotlib\n+:ref:`notebook <jupyter_notebooks_jupyterlab>` in ``notebook<7`` or\n+``nbclassic``.\n+\n+.. note::\n+\n+    The  `ipympl <https://matplotlib.org/ipympl/>`_ backend is in a separate\n+    package, see :ref:`Installing ipympl <ipympl_install>`.\n \n .. figure:: /_static/FigureNotebook.png\n     :alt: Image of figure generated in Jupyter Notebook with notebook\n@@ -75,15 +81,6 @@ other than the default \"inline\" backend, you will likely need to use an ipython\n .. seealso::\n     :ref:`interactive_figures`.\n \n-.. note::\n-\n-   If you only need to use the classic notebook (i.e. ``notebook<7``),\n-   you can use:\n-\n-   .. sourcecode:: ipython\n-\n-   %matplotlib notebook\n-\n .. _standalone-scripts-and-interactive-use:\n \n Standalone scripts and interactive use\n@@ -104,7 +101,7 @@ backend.  These are typically chosen either in the user's :ref:`matplotlibrc\n     QtAgg backend.\n \n When run from a script, or interactively (e.g. from an\n-`iPython shell <https://ipython.readthedocs.io/en/stable/>`_) the Figure\n+`IPython shell <https://ipython.readthedocs.io/en/stable/>`_) the Figure\n will not be shown until we call ``plt.show()``. The Figure will appear in\n a new GUI window, and usually will have a toolbar with Zoom, Pan, and other tools\n for interacting with the Figure.  By default, ``plt.show()`` blocks\ndiff --git a/galleries/users_explain/figure/writing_a_backend_pyplot_interface.rst b/galleries/users_explain/figure/writing_a_backend_pyplot_interface.rst\nindex 452f4d7610bb..c8dccc24da43 100644\n--- a/galleries/users_explain/figure/writing_a_backend_pyplot_interface.rst\n+++ b/galleries/users_explain/figure/writing_a_backend_pyplot_interface.rst\n@@ -84,3 +84,47 @@ Function-based API\n 2. **Showing figures**: `.pyplot.show()` calls a module-level ``show()``\n    function, which is typically generated via the ``ShowBase`` class and its\n    ``mainloop`` method.\n+\n+Registering a backend\n+---------------------\n+\n+For a new backend to be usable via ``matplotlib.use()`` or IPython\n+``%matplotlib`` magic command, it must be compatible with one of the three ways\n+supported by the :class:`~matplotlib.backends.registry.BackendRegistry`:\n+\n+Built-in\n+^^^^^^^^\n+\n+A backend built into Matplotlib must have its name and\n+``FigureCanvas.required_interactive_framework`` hard-coded in the\n+:class:`~matplotlib.backends.registry.BackendRegistry`.  If the backend module\n+is not ``f\"matplotlib.backends.backend_{backend_name.lower()}\"`` then there\n+must also be an entry in the ``BackendRegistry._name_to_module``.\n+\n+module:// syntax\n+^^^^^^^^^^^^^^^^\n+\n+Any backend in a separate module (not built into Matplotlib) can be used by\n+specifying the path to the module in the form ``module://some.backend.module``.\n+An example is ``module://mplcairo.qt`` for\n+`mplcairo <https:////github.com/matplotlib/mplcairo>`_.  The backend's\n+interactive framework will be taken from its\n+``FigureCanvas.required_interactive_framework``.\n+\n+Entry point\n+^^^^^^^^^^^\n+\n+An external backend module can self-register as a backend using an\n+``entry point`` in its ``pyproject.toml`` such as the one used by\n+``matplotlib-inline``:\n+\n+.. code-block:: toml\n+\n+    [project.entry-points.\"matplotlib.backend\"]\n+    inline = \"matplotlib_inline.backend_inline\"\n+\n+The backend's interactive framework will be taken from its\n+``FigureCanvas.required_interactive_framework``.  All entry points are loaded\n+together but only when first needed, such as when a backend name is not\n+recognised as a built-in backend, or when\n+:meth:`~matplotlib.backends.registry.BackendRegistry.list_all` is first called.\ndiff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex cc94e530133b..9e9325a27d73 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -1208,7 +1208,7 @@ def use(backend, *, force=True):\n         backend names, which are case-insensitive:\n \n         - interactive backends:\n-          GTK3Agg, GTK3Cairo, GTK4Agg, GTK4Cairo, MacOSX, nbAgg, QtAgg,\n+          GTK3Agg, GTK3Cairo, GTK4Agg, GTK4Cairo, MacOSX, nbAgg, notebook, QtAgg,\n           QtCairo, TkAgg, TkCairo, WebAgg, WX, WXAgg, WXCairo, Qt5Agg, Qt5Cairo\n \n         - non-interactive backends:\n@@ -1216,6 +1216,8 @@ def use(backend, *, force=True):\n \n         or a string of the form: ``module://my.module.name``.\n \n+        notebook is a synonym for nbAgg.\n+\n         Switching to an interactive backend is not possible if an unrelated\n         event loop has already been started (e.g., switching to GTK3Agg if a\n         TkAgg window has already been opened).  Switching to a non-interactive\ndiff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\nindex e90c110c193b..d7430a4494fd 100644\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -1766,8 +1766,16 @@ def _fix_ipython_backend2gui(cls):\n         # `ipython --auto`).  This cannot be done at import time due to\n         # ordering issues, so we do it when creating a canvas, and should only\n         # be done once per class (hence the `cache`).\n-        if sys.modules.get(\"IPython\") is None:\n+\n+        # This function will not be needed when Python 3.12, the latest version\n+        # supported by IPython < 8.24, reaches end-of-life in late 2028.\n+        # At that time this function can be made a no-op and deprecated.\n+        mod_ipython = sys.modules.get(\"IPython\")\n+        if mod_ipython is None or mod_ipython.version_info[:2] >= (8, 24):\n+            # Use of backend2gui is not needed for IPython >= 8.24 as the\n+            # functionality has been moved to Matplotlib.\n             return\n+\n         import IPython\n         ip = IPython.get_ipython()\n         if not ip:\n@@ -2030,9 +2038,8 @@ def _switch_canvas_and_return_print_method(self, fmt, backend=None):\n         canvas = None\n         if backend is not None:\n             # Return a specific canvas class, if requested.\n-            canvas_class = (\n-                importlib.import_module(cbook._backend_module_name(backend))\n-                .FigureCanvas)\n+            from .backends.registry import backend_registry\n+            canvas_class = backend_registry.load_backend_module(backend).FigureCanvas\n             if not hasattr(canvas_class, f\"print_{fmt}\"):\n                 raise ValueError(\n                     f\"The {backend!r} backend does not support {fmt} output\")\ndiff --git a/lib/matplotlib/backends/registry.py b/lib/matplotlib/backends/registry.py\nindex 484d6ed5f26d..19b4cba254ab 100644\n--- a/lib/matplotlib/backends/registry.py\n+++ b/lib/matplotlib/backends/registry.py\n@@ -1,4 +1,5 @@\n from enum import Enum\n+import importlib\n \n \n class BackendFilter(Enum):\n@@ -20,36 +21,168 @@ class BackendRegistry:\n     All use of ``BackendRegistry`` should be via the singleton instance\n     ``backend_registry`` which can be imported from ``matplotlib.backends``.\n \n+    Each backend has a name, a module name containing the backend code, and an\n+    optional GUI framework that must be running if the backend is interactive.\n+    There are three sources of backends: built-in (source code is within the\n+    Matplotlib repository), explicit ``module://some.backend`` syntax (backend is\n+    obtained by loading the module), or via an entry point (self-registering\n+    backend in an external package).\n+\n     .. versionadded:: 3.9\n     \"\"\"\n-    # Built-in backends are those which are included in the Matplotlib repo.\n-    # A backend with name 'name' is located in the module\n-    # f'matplotlib.backends.backend_{name.lower()}'\n-\n-    # The capitalized forms are needed for ipython at present; this may\n-    # change for later versions.\n-    _BUILTIN_INTERACTIVE = [\n-        \"GTK3Agg\", \"GTK3Cairo\", \"GTK4Agg\", \"GTK4Cairo\",\n-        \"MacOSX\",\n-        \"nbAgg\",\n-        \"QtAgg\", \"QtCairo\", \"Qt5Agg\", \"Qt5Cairo\",\n-        \"TkAgg\", \"TkCairo\",\n-        \"WebAgg\",\n-        \"WX\", \"WXAgg\", \"WXCairo\",\n-    ]\n-    _BUILTIN_NOT_INTERACTIVE = [\n-        \"agg\", \"cairo\", \"pdf\", \"pgf\", \"ps\", \"svg\", \"template\",\n-    ]\n-    _GUI_FRAMEWORK_TO_BACKEND_MAPPING = {\n-        \"qt\": \"qtagg\",\n+    # Mapping of built-in backend name to GUI framework, or \"headless\" for no\n+    # GUI framework. Built-in backends are those which are included in the\n+    # Matplotlib repo. A backend with name 'name' is located in the module\n+    # f\"matplotlib.backends.backend_{name.lower()}\"\n+    _BUILTIN_BACKEND_TO_GUI_FRAMEWORK = {\n+        \"gtk3agg\": \"gtk3\",\n+        \"gtk3cairo\": \"gtk3\",\n+        \"gtk4agg\": \"gtk4\",\n+        \"gtk4cairo\": \"gtk4\",\n+        \"macosx\": \"macosx\",\n+        \"nbagg\": \"nbagg\",\n+        \"notebook\": \"nbagg\",\n+        \"qtagg\": \"qt\",\n+        \"qtcairo\": \"qt\",\n+        \"qt5agg\": \"qt5\",\n+        \"qt5cairo\": \"qt5\",\n+        \"tkagg\": \"tk\",\n+        \"tkcairo\": \"tk\",\n+        \"webagg\": \"webagg\",\n+        \"wx\": \"wx\",\n+        \"wxagg\": \"wx\",\n+        \"wxcairo\": \"wx\",\n+        \"agg\": \"headless\",\n+        \"cairo\": \"headless\",\n+        \"pdf\": \"headless\",\n+        \"pgf\": \"headless\",\n+        \"ps\": \"headless\",\n+        \"svg\": \"headless\",\n+        \"template\": \"headless\",\n+    }\n+\n+    # Reverse mapping of gui framework to preferred built-in backend.\n+    _GUI_FRAMEWORK_TO_BACKEND = {\n         \"gtk3\": \"gtk3agg\",\n         \"gtk4\": \"gtk4agg\",\n-        \"wx\": \"wxagg\",\n-        \"tk\": \"tkagg\",\n-        \"macosx\": \"macosx\",\n         \"headless\": \"agg\",\n+        \"macosx\": \"macosx\",\n+        \"qt\": \"qtagg\",\n+        \"qt5\": \"qt5agg\",\n+        \"qt6\": \"qtagg\",\n+        \"tk\": \"tkagg\",\n+        \"wx\": \"wxagg\",\n     }\n \n+    def __init__(self):\n+        # Only load entry points when first needed.\n+        self._loaded_entry_points = False\n+\n+        # Mapping of non-built-in backend to GUI framework, added dynamically from\n+        # entry points and from matplotlib.use(\"module://some.backend\") format.\n+        # New entries have an \"unknown\" GUI framework that is determined when first\n+        # needed by calling _get_gui_framework_by_loading.\n+        self._backend_to_gui_framework = {}\n+\n+        # Mapping of backend name to module name, where different from\n+        # f\"matplotlib.backends.backend_{backend_name.lower()}\". These are either\n+        # hardcoded for backward compatibility, or loaded from entry points or\n+        # \"module://some.backend\" syntax.\n+        self._name_to_module = {\n+            \"notebook\": \"nbagg\",\n+        }\n+\n+    def _backend_module_name(self, backend):\n+        # Return name of module containing the specified backend.\n+        # Does not check if the backend is valid, use is_valid_backend for that.\n+        backend = backend.lower()\n+\n+        # Check if have specific name to module mapping.\n+        backend = self._name_to_module.get(backend, backend)\n+\n+        return (backend[9:] if backend.startswith(\"module://\")\n+                else f\"matplotlib.backends.backend_{backend}\")\n+\n+    def _clear(self):\n+        # Clear all dynamically-added data, used for testing only.\n+        self.__init__()\n+\n+    def _ensure_entry_points_loaded(self):\n+        # Load entry points, if they have not already been loaded.\n+        if not self._loaded_entry_points:\n+            entries = self._read_entry_points()\n+            self._validate_and_store_entry_points(entries)\n+            self._loaded_entry_points = True\n+\n+    def _get_gui_framework_by_loading(self, backend):\n+        # Determine GUI framework for a backend by loading its module and reading the\n+        # FigureCanvas.required_interactive_framework attribute.\n+        # Returns \"headless\" if there is no GUI framework.\n+        module = self.load_backend_module(backend)\n+        canvas_class = module.FigureCanvas\n+        return canvas_class.required_interactive_framework or \"headless\"\n+\n+    def _read_entry_points(self):\n+        # Read entry points of modules that self-advertise as Matplotlib backends.\n+        # Expects entry points like this one from matplotlib-inline (in pyproject.toml\n+        # format):\n+        #   [project.entry-points.\"matplotlib.backend\"]\n+        #   inline = \"matplotlib_inline.backend_inline\"\n+        import importlib.metadata as im\n+        import sys\n+\n+        # entry_points group keyword not available before Python 3.10\n+        group = \"matplotlib.backend\"\n+        if sys.version_info >= (3, 10):\n+            entry_points = im.entry_points(group=group)\n+        else:\n+            entry_points = im.entry_points().get(group, ())\n+        entries = [(entry.name, entry.value) for entry in entry_points]\n+\n+        # For backward compatibility, if matplotlib-inline and/or ipympl are installed\n+        # but too old to include entry points, create them. Do not import ipympl\n+        # directly as this calls matplotlib.use() whilst in this function.\n+        def backward_compatible_entry_points(\n+                entries, module_name, threshold_version, names, target):\n+            from matplotlib import _parse_to_version_info\n+            try:\n+                module_version = im.version(module_name)\n+                if _parse_to_version_info(module_version) < threshold_version:\n+                    for name in names:\n+                        entries.append((name, target))\n+            except im.PackageNotFoundError:\n+                pass\n+\n+        names = [entry[0] for entry in entries]\n+        if \"inline\" not in names:\n+            backward_compatible_entry_points(\n+                entries, \"matplotlib_inline\", (0, 1, 7), [\"inline\"],\n+                \"matplotlib_inline.backend_inline\")\n+        if \"ipympl\" not in names:\n+            backward_compatible_entry_points(\n+                entries, \"ipympl\", (0, 9, 4), [\"ipympl\", \"widget\"],\n+                \"ipympl.backend_nbagg\")\n+\n+        return entries\n+\n+    def _validate_and_store_entry_points(self, entries):\n+        # Validate and store entry points so that they can be used via matplotlib.use()\n+        # in the normal manner. Entry point names cannot be of module:// format, cannot\n+        # shadow a built-in backend name, and cannot be duplicated.\n+        for name, module in entries:\n+            name = name.lower()\n+            if name.startswith(\"module://\"):\n+                raise RuntimeError(\n+                    f\"Entry point name '{name}' cannot start with 'module://'\")\n+            if name in self._BUILTIN_BACKEND_TO_GUI_FRAMEWORK:\n+                raise RuntimeError(f\"Entry point name '{name}' is a built-in backend\")\n+            if name in self._backend_to_gui_framework:\n+                raise RuntimeError(f\"Entry point name '{name}' duplicated\")\n+\n+            self._name_to_module[name] = \"module://\" + module\n+            # Do not yet know backend GUI framework, determine it only when necessary.\n+            self._backend_to_gui_framework[name] = \"unknown\"\n+\n     def backend_for_gui_framework(self, framework):\n         \"\"\"\n         Return the name of the backend corresponding to the specified GUI framework.\n@@ -61,10 +194,74 @@ def backend_for_gui_framework(self, framework):\n \n         Returns\n         -------\n-        str\n-            Backend name.\n+        str or None\n+            Backend name or None if GUI framework not recognised.\n+        \"\"\"\n+        return self._GUI_FRAMEWORK_TO_BACKEND.get(framework.lower())\n+\n+    def is_valid_backend(self, backend):\n+        \"\"\"\n+        Return True if the backend name is valid, False otherwise.\n+\n+        A backend name is valid if it is one of the built-in backends or has been\n+        dynamically added via an entry point. Those beginning with ``module://`` are\n+        always considered valid and are added to the current list of all backends\n+        within this function.\n+\n+        Even if a name is valid, it may not be importable or usable. This can only be\n+        determined by loading and using the backend module.\n+\n+        Parameters\n+        ----------\n+        backend : str\n+            Name of backend.\n+\n+        Returns\n+        -------\n+        bool\n+            True if backend is valid, False otherwise.\n+        \"\"\"\n+        backend = backend.lower()\n+\n+        # For backward compatibility, convert ipympl and matplotlib-inline long\n+        # module:// names to their shortened forms.\n+        backwards_compat = {\n+            \"module://ipympl.backend_nbagg\": \"widget\",\n+            \"module://matplotlib_inline.backend_inline\": \"inline\",\n+        }\n+        backend = backwards_compat.get(backend, backend)\n+\n+        if (backend in self._BUILTIN_BACKEND_TO_GUI_FRAMEWORK or\n+                backend in self._backend_to_gui_framework):\n+            return True\n+\n+        if backend.startswith(\"module://\"):\n+            self._backend_to_gui_framework[backend] = \"unknown\"\n+            return True\n+\n+        # Only load entry points if really need to and not already done so.\n+        self._ensure_entry_points_loaded()\n+        if backend in self._backend_to_gui_framework:\n+            return True\n+\n+        return False\n+\n+    def list_all(self):\n+        \"\"\"\n+        Return list of all known backends.\n+\n+        These include built-in backends and those obtained at runtime either from entry\n+        points or explicit ``module://some.backend`` syntax.\n+\n+        Entry points will be loaded if they haven't been already.\n+\n+        Returns\n+        -------\n+        list of str\n+            Backend names.\n         \"\"\"\n-        return self._GUI_FRAMEWORK_TO_BACKEND_MAPPING.get(framework)\n+        self._ensure_entry_points_loaded()\n+        return [*self.list_builtin(), *self._backend_to_gui_framework]\n \n     def list_builtin(self, filter_=None):\n         \"\"\"\n@@ -82,11 +279,132 @@ def list_builtin(self, filter_=None):\n             Backend names.\n         \"\"\"\n         if filter_ == BackendFilter.INTERACTIVE:\n-            return self._BUILTIN_INTERACTIVE\n+            return [k for k, v in self._BUILTIN_BACKEND_TO_GUI_FRAMEWORK.items()\n+                    if v != \"headless\"]\n         elif filter_ == BackendFilter.NON_INTERACTIVE:\n-            return self._BUILTIN_NOT_INTERACTIVE\n+            return [k for k, v in self._BUILTIN_BACKEND_TO_GUI_FRAMEWORK.items()\n+                    if v == \"headless\"]\n+\n+        return [*self._BUILTIN_BACKEND_TO_GUI_FRAMEWORK]\n+\n+    def list_gui_frameworks(self):\n+        \"\"\"\n+        Return list of GUI frameworks used by Matplotlib backends.\n+\n+        Returns\n+        -------\n+        list of str\n+            GUI framework names.\n+        \"\"\"\n+        return [k for k in self._GUI_FRAMEWORK_TO_BACKEND if k != \"headless\"]\n+\n+    def load_backend_module(self, backend):\n+        \"\"\"\n+        Load and return the module containing the specified backend.\n+\n+        Parameters\n+        ----------\n+        backend : str\n+            Name of backend to load.\n+\n+        Returns\n+        -------\n+        Module\n+            Module containing backend.\n+        \"\"\"\n+        module_name = self._backend_module_name(backend)\n+        return importlib.import_module(module_name)\n+\n+    def resolve_backend(self, backend):\n+        \"\"\"\n+        Return the backend and GUI framework for the specified backend name.\n+\n+        If the GUI framework is not yet known then it will be determined by loading the\n+        backend module and checking the ``FigureCanvas.required_interactive_framework``\n+        attribute.\n+\n+        This function only loads entry points if they have not already been loaded and\n+        the backend is not built-in and not of ``module://some.backend`` format.\n+\n+        Parameters\n+        ----------\n+        backend : str or None\n+            Name of backend, or None to use the default backend.\n+\n+        Returns\n+        -------\n+        backend : str\n+            The backend name.\n+        framework : str or None\n+            The GUI framework, which will be None for a backend that is non-interactive.\n+        \"\"\"\n+        if isinstance(backend, str):\n+            backend = backend.lower()\n+        else:  # Might be _auto_backend_sentinel or None\n+            # Use whatever is already running...\n+            from matplotlib import get_backend\n+            backend = get_backend()\n+\n+        # Is backend already known (built-in or dynamically loaded)?\n+        gui = (self._BUILTIN_BACKEND_TO_GUI_FRAMEWORK.get(backend) or\n+               self._backend_to_gui_framework.get(backend))\n+\n+        # Is backend \"module://something\"?\n+        if gui is None and isinstance(backend, str) and backend.startswith(\"module://\"):\n+            gui = \"unknown\"\n+\n+        # Is backend a possible entry point?\n+        if gui is None and not self._loaded_entry_points:\n+            self._ensure_entry_points_loaded()\n+            gui = self._backend_to_gui_framework.get(backend)\n+\n+        # Backend known but not its gui framework.\n+        if gui == \"unknown\":\n+            gui = self._get_gui_framework_by_loading(backend)\n+            self._backend_to_gui_framework[backend] = gui\n+\n+        if gui is None:\n+            raise RuntimeError(f\"'{backend}' is not a recognised backend name\")\n+\n+        return backend, gui if gui != \"headless\" else None\n+\n+    def resolve_gui_or_backend(self, gui_or_backend):\n+        \"\"\"\n+        Return the backend and GUI framework for the specified string that may be\n+        either a GUI framework or a backend name, tested in that order.\n+\n+        This is for use with the IPython %matplotlib magic command which may be a GUI\n+        framework such as ``%matplotlib qt`` or a backend name such as\n+        ``%matplotlib qtagg``.\n+\n+        This function only loads entry points if they have not already been loaded and\n+        the backend is not built-in and not of ``module://some.backend`` format.\n+\n+        Parameters\n+        ----------\n+        gui_or_backend : str or None\n+            Name of GUI framework or backend, or None to use the default backend.\n+\n+        Returns\n+        -------\n+        backend : str\n+            The backend name.\n+        framework : str or None\n+            The GUI framework, which will be None for a backend that is non-interactive.\n+        \"\"\"\n+        gui_or_backend = gui_or_backend.lower()\n+\n+        # First check if it is a gui loop name.\n+        backend = self.backend_for_gui_framework(gui_or_backend)\n+        if backend is not None:\n+            return backend, gui_or_backend if gui_or_backend != \"headless\" else None\n \n-        return self._BUILTIN_INTERACTIVE + self._BUILTIN_NOT_INTERACTIVE\n+        # Then check if it is a backend name.\n+        try:\n+            return self.resolve_backend(gui_or_backend)\n+        except Exception:  # KeyError ?\n+            raise RuntimeError(\n+                f\"'{gui_or_backend} is not a recognised GUI loop or backend name\")\n \n \n # Singleton\ndiff --git a/lib/matplotlib/backends/registry.pyi b/lib/matplotlib/backends/registry.pyi\nindex e48531be471d..e1ae5b3e7d3a 100644\n--- a/lib/matplotlib/backends/registry.pyi\n+++ b/lib/matplotlib/backends/registry.pyi\n@@ -1,4 +1,5 @@\n from enum import Enum\n+from types import ModuleType\n \n \n class BackendFilter(Enum):\n@@ -7,8 +8,28 @@ class BackendFilter(Enum):\n \n \n class BackendRegistry:\n-    def backend_for_gui_framework(self, interactive_framework: str) -> str | None: ...\n+    _BUILTIN_BACKEND_TO_GUI_FRAMEWORK: dict[str, str]\n+    _GUI_FRAMEWORK_TO_BACKEND: dict[str, str]\n+\n+    _loaded_entry_points: bool\n+    _backend_to_gui_framework: dict[str, str]\n+    _name_to_module: dict[str, str]\n+\n+    def _backend_module_name(self, backend: str) -> str: ...\n+    def _clear(self) -> None: ...\n+    def _ensure_entry_points_loaded(self) -> None: ...\n+    def _get_gui_framework_by_loading(self, backend: str) -> str: ...\n+    def _read_entry_points(self) -> list[tuple[str, str]]: ...\n+    def _validate_and_store_entry_points(self, entries: list[tuple[str, str]]) -> None: ...\n+\n+    def backend_for_gui_framework(self, framework: str) -> str | None: ...\n+    def is_valid_backend(self, backend: str) -> bool: ...\n+    def list_all(self) -> list[str]: ...\n     def list_builtin(self, filter_: BackendFilter | None) -> list[str]: ...\n+    def list_gui_frameworks(self) -> list[str]: ...\n+    def load_backend_module(self, backend: str) -> ModuleType: ...\n+    def resolve_backend(self, backend: str | None) -> tuple[str, str | None]: ...\n+    def resolve_gui_or_backend(self, gui_or_backend: str | None) -> tuple[str, str | None]: ...\n \n \n backend_registry: BackendRegistry\ndiff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex d6d48ecc928c..e4f60aac37a8 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -2224,15 +2224,6 @@ def _check_and_log_subprocess(command, logger, **kwargs):\n     return proc.stdout\n \n \n-def _backend_module_name(name):\n-    \"\"\"\n-    Convert a backend name (either a standard backend -- \"Agg\", \"TkAgg\", ... --\n-    or a custom backend -- \"module://...\") to the corresponding module name).\n-    \"\"\"\n-    return (name[9:] if name.startswith(\"module://\")\n-            else f\"matplotlib.backends.backend_{name.lower()}\")\n-\n-\n def _setup_new_guiapp():\n     \"\"\"\n     Perform OS-dependent setup when Matplotlib creates a new GUI application.\ndiff --git a/lib/matplotlib/cbook.pyi b/lib/matplotlib/cbook.pyi\nindex 3216c4c92b9e..d727b8065b7a 100644\n--- a/lib/matplotlib/cbook.pyi\n+++ b/lib/matplotlib/cbook.pyi\n@@ -176,7 +176,6 @@ class _OrderedSet(collections.abc.MutableSet):\n     def add(self, key) -> None: ...\n     def discard(self, key) -> None: ...\n \n-def _backend_module_name(name: str) -> str: ...\n def _setup_new_guiapp() -> None: ...\n def _format_approx(number: float, precision: int) -> str: ...\n def _g_sig_digits(value: float, delta: float) -> int: ...\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 2376c6243929..b1354341617d 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -295,11 +295,16 @@ def install_repl_displayhook() -> None:\n     ip.events.register(\"post_execute\", _draw_all_if_interactive)\n     _REPL_DISPLAYHOOK = _ReplDisplayHook.IPYTHON\n \n-    from IPython.core.pylabtools import backend2gui\n-    # trigger IPython's eventloop integration, if available\n-    ipython_gui_name = backend2gui.get(get_backend())\n-    if ipython_gui_name:\n-        ip.enable_gui(ipython_gui_name)\n+    if mod_ipython.version_info[:2] < (8, 24):\n+        # Use of backend2gui is not needed for IPython >= 8.24 as that functionality\n+        # has been moved to Matplotlib.\n+        # This code can be removed when Python 3.12, the latest version supported by\n+        # IPython < 8.24, reaches end-of-life in late 2028.\n+        from IPython.core.pylabtools import backend2gui\n+        # trigger IPython's eventloop integration, if available\n+        ipython_gui_name = backend2gui.get(get_backend())\n+        if ipython_gui_name:\n+            ip.enable_gui(ipython_gui_name)\n \n \n def uninstall_repl_displayhook() -> None:\n@@ -402,7 +407,7 @@ def switch_backend(newbackend: str) -> None:\n     # have to escape the switch on access logic\n     old_backend = dict.__getitem__(rcParams, 'backend')\n \n-    module = importlib.import_module(cbook._backend_module_name(newbackend))\n+    module = backend_registry.load_backend_module(newbackend)\n     canvas_class = module.FigureCanvas\n \n     required_framework = canvas_class.required_interactive_framework\n@@ -477,6 +482,18 @@ def draw_if_interactive() -> None:\n     _log.debug(\"Loaded backend %s version %s.\",\n                newbackend, backend_mod.backend_version)\n \n+    if newbackend in (\"ipympl\", \"widget\"):\n+        # ipympl < 0.9.4 expects rcParams[\"backend\"] to be the fully-qualified backend\n+        # name \"module://ipympl.backend_nbagg\" not short names \"ipympl\" or \"widget\".\n+        import importlib.metadata as im\n+        from matplotlib import _parse_to_version_info  # type: ignore[attr-defined]\n+        try:\n+            module_version = im.version(\"ipympl\")\n+            if _parse_to_version_info(module_version) < (0, 9, 4):\n+                newbackend = \"module://ipympl.backend_nbagg\"\n+        except im.PackageNotFoundError:\n+            pass\n+\n     rcParams['backend'] = rcParamsDefault['backend'] = newbackend\n     _backend_mod = backend_mod\n     for func_name in [\"new_figure_manager\", \"draw_if_interactive\", \"show\"]:\n@@ -2586,7 +2603,7 @@ def polar(*args, **kwargs) -> list[Line2D]:\n if (rcParams[\"backend_fallback\"]\n         and rcParams._get_backend_or_none() in (  # type: ignore[attr-defined]\n             set(backend_registry.list_builtin(BackendFilter.INTERACTIVE)) -\n-            {'WebAgg', 'nbAgg'})\n+            {'webagg', 'nbagg'})\n         and cbook._get_running_interactive_framework()):\n     rcParams._set(\"backend\", rcsetup._auto_backend_sentinel)\n \ndiff --git a/lib/matplotlib/rcsetup.py b/lib/matplotlib/rcsetup.py\nindex a326d22f039a..b0cd22098489 100644\n--- a/lib/matplotlib/rcsetup.py\n+++ b/lib/matplotlib/rcsetup.py\n@@ -266,16 +266,16 @@ def validate_fonttype(s):\n         return fonttype\n \n \n-_validate_standard_backends = ValidateInStrings(\n-    'backend', backend_registry.list_builtin(), ignorecase=True)\n _auto_backend_sentinel = object()\n \n \n def validate_backend(s):\n-    backend = (\n-        s if s is _auto_backend_sentinel or s.startswith(\"module://\")\n-        else _validate_standard_backends(s))\n-    return backend\n+    if s is _auto_backend_sentinel or backend_registry.is_valid_backend(s):\n+        return s\n+    else:\n+        msg = (f\"'{s}' is not a valid value for backend; supported values are \"\n+               f\"{backend_registry.list_all()}\")\n+        raise ValueError(msg)\n \n \n def _validate_toolbar(s):\n", "test_patch": "diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml\nindex fcd00e9c41e2..e6608cff6bc4 100644\n--- a/.github/workflows/tests.yml\n+++ b/.github/workflows/tests.yml\n@@ -59,7 +59,8 @@ jobs:\n             delete-font-cache: true\n           - os: ubuntu-20.04\n             python-version: 3.9\n-            extra-requirements: '-r requirements/testing/extra.txt'\n+            # One CI run tests ipython/matplotlib-inline before backend mapping moved to mpl\n+            extra-requirements: '-r requirements/testing/extra.txt \"ipython<8.24\" \"matplotlib-inline<0.1.7\"'\n             CFLAGS: \"-fno-lto\"  # Ensure that disabling LTO works.\n             # https://github.com/matplotlib/matplotlib/pull/26052#issuecomment-1574595954\n             # https://www.riverbankcomputing.com/pipermail/pyqt/2023-November/045606.html\ndiff --git a/lib/matplotlib/testing/__init__.py b/lib/matplotlib/testing/__init__.py\nindex 685b98cd99ec..779149dec2dc 100644\n--- a/lib/matplotlib/testing/__init__.py\n+++ b/lib/matplotlib/testing/__init__.py\n@@ -177,3 +177,41 @@ def _has_tex_package(package):\n         return True\n     except FileNotFoundError:\n         return False\n+\n+\n+def ipython_in_subprocess(\n+    requested_backend_or_gui_framework,\n+    expected_backend_old_ipython,  # IPython < 8.24\n+    expected_backend_new_ipython,  # IPython >= 8.24\n+):\n+    import pytest\n+    IPython = pytest.importorskip(\"IPython\")\n+\n+    if sys.platform == \"win32\":\n+        pytest.skip(\"Cannot change backend running IPython in subprocess on Windows\")\n+\n+    if (IPython.version_info[:3] == (8, 24, 0) and\n+            requested_backend_or_gui_framework == \"osx\"):\n+        pytest.skip(\"Bug using macosx backend in IPython 8.24.0 fixed in 8.24.1\")\n+\n+    if IPython.version_info[:2] >= (8, 24):\n+        expected_backend = expected_backend_new_ipython\n+    else:\n+        # This code can be removed when Python 3.12, the latest version supported by\n+        # IPython < 8.24, reaches end-of-life in late 2028.\n+        expected_backend = expected_backend_old_ipython\n+\n+    code = (\"import matplotlib as mpl, matplotlib.pyplot as plt;\"\n+            \"fig, ax=plt.subplots(); ax.plot([1, 3, 2]); mpl.get_backend()\")\n+    proc = subprocess_run_for_testing(\n+        [\n+            \"ipython\",\n+            \"--no-simple-prompt\",\n+            f\"--matplotlib={requested_backend_or_gui_framework}\",\n+            \"-c\", code,\n+        ],\n+        check=True,\n+        capture_output=True,\n+    )\n+\n+    assert proc.stdout.strip() == f\"Out[1]: '{expected_backend}'\"\ndiff --git a/lib/matplotlib/testing/__init__.pyi b/lib/matplotlib/testing/__init__.pyi\nindex 30cfd9a9ed2e..b0399476b6aa 100644\n--- a/lib/matplotlib/testing/__init__.pyi\n+++ b/lib/matplotlib/testing/__init__.pyi\n@@ -47,3 +47,8 @@ def subprocess_run_helper(\n ) -> subprocess.CompletedProcess[str]: ...\n def _check_for_pgf(texsystem: str) -> bool: ...\n def _has_tex_package(package: str) -> bool: ...\n+def ipython_in_subprocess(\n+    requested_backend_or_gui_framework: str,\n+    expected_backend_old_ipython: str,\n+    expected_backend_new_ipython: str,\n+) -> None: ...\ndiff --git a/lib/matplotlib/tests/test_backend_inline.py b/lib/matplotlib/tests/test_backend_inline.py\nnew file mode 100644\nindex 000000000000..6f0d67d51756\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_backend_inline.py\n@@ -0,0 +1,46 @@\n+import os\n+from pathlib import Path\n+from tempfile import TemporaryDirectory\n+\n+import pytest\n+\n+from matplotlib.testing import subprocess_run_for_testing\n+\n+nbformat = pytest.importorskip('nbformat')\n+pytest.importorskip('nbconvert')\n+pytest.importorskip('ipykernel')\n+pytest.importorskip('matplotlib_inline')\n+\n+\n+def test_ipynb():\n+    nb_path = Path(__file__).parent / 'test_inline_01.ipynb'\n+\n+    with TemporaryDirectory() as tmpdir:\n+        out_path = Path(tmpdir, \"out.ipynb\")\n+\n+        subprocess_run_for_testing(\n+            [\"jupyter\", \"nbconvert\", \"--to\", \"notebook\",\n+             \"--execute\", \"--ExecutePreprocessor.timeout=500\",\n+             \"--output\", str(out_path), str(nb_path)],\n+            env={**os.environ, \"IPYTHONDIR\": tmpdir},\n+            check=True)\n+        with out_path.open() as out:\n+            nb = nbformat.read(out, nbformat.current_nbformat)\n+\n+    errors = [output for cell in nb.cells for output in cell.get(\"outputs\", [])\n+              if output.output_type == \"error\"]\n+    assert not errors\n+\n+    import IPython\n+    if IPython.version_info[:2] >= (8, 24):\n+        expected_backend = \"inline\"\n+    else:\n+        # This code can be removed when Python 3.12, the latest version supported by\n+        # IPython < 8.24, reaches end-of-life in late 2028.\n+        expected_backend = \"module://matplotlib_inline.backend_inline\"\n+    backend_outputs = nb.cells[2][\"outputs\"]\n+    assert backend_outputs[0][\"data\"][\"text/plain\"] == f\"'{expected_backend}'\"\n+\n+    image = nb.cells[1][\"outputs\"][1][\"data\"]\n+    assert image[\"text/plain\"] == \"<Figure size 300x200 with 1 Axes>\"\n+    assert \"image/png\" in image\ndiff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex c460da374c8c..a4350fe3b6c6 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -44,3 +44,8 @@ def new_choose_save_file(title, directory, filename):\n         # Check the savefig.directory rcParam got updated because\n         # we added a subdirectory \"test\"\n         assert mpl.rcParams[\"savefig.directory\"] == f\"{tmp_path}/test\"\n+\n+\n+def test_ipython():\n+    from matplotlib.testing import ipython_in_subprocess\n+    ipython_in_subprocess(\"osx\", \"MacOSX\", \"macosx\")\ndiff --git a/lib/matplotlib/tests/test_backend_nbagg.py b/lib/matplotlib/tests/test_backend_nbagg.py\nindex 40bee8f85c43..23af88d95086 100644\n--- a/lib/matplotlib/tests/test_backend_nbagg.py\n+++ b/lib/matplotlib/tests/test_backend_nbagg.py\n@@ -30,3 +30,13 @@ def test_ipynb():\n     errors = [output for cell in nb.cells for output in cell.get(\"outputs\", [])\n               if output.output_type == \"error\"]\n     assert not errors\n+\n+    import IPython\n+    if IPython.version_info[:2] >= (8, 24):\n+        expected_backend = \"notebook\"\n+    else:\n+        # This code can be removed when Python 3.12, the latest version supported by\n+        # IPython < 8.24, reaches end-of-life in late 2028.\n+        expected_backend = \"nbAgg\"\n+    backend_outputs = nb.cells[2][\"outputs\"]\n+    assert backend_outputs[0][\"data\"][\"text/plain\"] == f\"'{expected_backend}'\"\ndiff --git a/lib/matplotlib/tests/test_backend_qt.py b/lib/matplotlib/tests/test_backend_qt.py\nindex f4a7ef6755f2..026a49b1441e 100644\n--- a/lib/matplotlib/tests/test_backend_qt.py\n+++ b/lib/matplotlib/tests/test_backend_qt.py\n@@ -14,7 +14,6 @@\n from matplotlib._pylab_helpers import Gcf\n from matplotlib import _c_internal_utils\n \n-\n try:\n     from matplotlib.backends.qt_compat import QtGui, QtWidgets  # type: ignore # noqa\n     from matplotlib.backends.qt_editor import _formlayout\n@@ -375,3 +374,8 @@ def custom_handler(signum, frame):\n     finally:\n         # Reset SIGINT handler to what it was before the test\n         signal.signal(signal.SIGINT, original_handler)\n+\n+\n+def test_ipython():\n+    from matplotlib.testing import ipython_in_subprocess\n+    ipython_in_subprocess(\"qt\", \"QtAgg\", \"qtagg\")\ndiff --git a/lib/matplotlib/tests/test_backend_registry.py b/lib/matplotlib/tests/test_backend_registry.py\nindex aed258f36413..eaf8417e7a5f 100644\n--- a/lib/matplotlib/tests/test_backend_registry.py\n+++ b/lib/matplotlib/tests/test_backend_registry.py\n@@ -7,6 +7,15 @@\n from matplotlib.backends import BackendFilter, backend_registry\n \n \n+@pytest.fixture\n+def clear_backend_registry():\n+    # Fixture that clears the singleton backend_registry before and after use\n+    # so that the test state remains isolated.\n+    backend_registry._clear()\n+    yield\n+    backend_registry._clear()\n+\n+\n def has_duplicates(seq: Sequence[Any]) -> bool:\n     return len(seq) > len(set(seq))\n \n@@ -33,9 +42,10 @@ def test_list_builtin():\n     assert not has_duplicates(backends)\n     # Compare using sets as order is not important\n     assert {*backends} == {\n-        'GTK3Agg', 'GTK3Cairo', 'GTK4Agg', 'GTK4Cairo', 'MacOSX', 'nbAgg', 'QtAgg',\n-        'QtCairo', 'Qt5Agg', 'Qt5Cairo', 'TkAgg', 'TkCairo', 'WebAgg', 'WX', 'WXAgg',\n-        'WXCairo', 'agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template',\n+        'gtk3agg', 'gtk3cairo', 'gtk4agg', 'gtk4cairo', 'macosx', 'nbagg', 'notebook',\n+        'qtagg', 'qtcairo', 'qt5agg', 'qt5cairo', 'tkagg',\n+        'tkcairo', 'webagg', 'wx', 'wxagg', 'wxcairo', 'agg', 'cairo', 'pdf', 'pgf',\n+        'ps', 'svg', 'template',\n     }\n \n \n@@ -43,9 +53,9 @@ def test_list_builtin():\n     'filter,expected',\n     [\n         (BackendFilter.INTERACTIVE,\n-         ['GTK3Agg', 'GTK3Cairo', 'GTK4Agg', 'GTK4Cairo', 'MacOSX', 'nbAgg', 'QtAgg',\n-          'QtCairo', 'Qt5Agg', 'Qt5Cairo', 'TkAgg', 'TkCairo', 'WebAgg', 'WX', 'WXAgg',\n-           'WXCairo']),\n+         ['gtk3agg', 'gtk3cairo', 'gtk4agg', 'gtk4cairo', 'macosx', 'nbagg', 'notebook',\n+          'qtagg', 'qtcairo', 'qt5agg', 'qt5cairo', 'tkagg',\n+          'tkcairo', 'webagg', 'wx', 'wxagg', 'wxcairo']),\n         (BackendFilter.NON_INTERACTIVE,\n          ['agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template']),\n     ]\n@@ -57,6 +67,25 @@ def test_list_builtin_with_filter(filter, expected):\n     assert {*backends} == {*expected}\n \n \n+def test_list_gui_frameworks():\n+    frameworks = backend_registry.list_gui_frameworks()\n+    assert not has_duplicates(frameworks)\n+    # Compare using sets as order is not important\n+    assert {*frameworks} == {\n+        \"gtk3\", \"gtk4\", \"macosx\", \"qt\", \"qt5\", \"qt6\", \"tk\", \"wx\",\n+    }\n+\n+\n+@pytest.mark.parametrize(\"backend, is_valid\", [\n+    (\"agg\", True),\n+    (\"QtAgg\", True),\n+    (\"module://anything\", True),\n+    (\"made-up-name\", False),\n+])\n+def test_is_valid_backend(backend, is_valid):\n+    assert backend_registry.is_valid_backend(backend) == is_valid\n+\n+\n def test_deprecated_rcsetup_attributes():\n     match = \"was deprecated in Matplotlib 3.9\"\n     with pytest.warns(mpl.MatplotlibDeprecationWarning, match=match):\n@@ -65,3 +94,67 @@ def test_deprecated_rcsetup_attributes():\n         mpl.rcsetup.non_interactive_bk\n     with pytest.warns(mpl.MatplotlibDeprecationWarning, match=match):\n         mpl.rcsetup.all_backends\n+\n+\n+def test_entry_points_inline():\n+    pytest.importorskip('matplotlib_inline')\n+    backends = backend_registry.list_all()\n+    assert 'inline' in backends\n+\n+\n+def test_entry_points_ipympl():\n+    pytest.importorskip('ipympl')\n+    backends = backend_registry.list_all()\n+    assert 'ipympl' in backends\n+    assert 'widget' in backends\n+\n+\n+def test_entry_point_name_shadows_builtin(clear_backend_registry):\n+    with pytest.raises(RuntimeError):\n+        backend_registry._validate_and_store_entry_points(\n+            [('qtagg', 'module1')])\n+\n+\n+def test_entry_point_name_duplicate(clear_backend_registry):\n+    with pytest.raises(RuntimeError):\n+        backend_registry._validate_and_store_entry_points(\n+            [('some_name', 'module1'), ('some_name', 'module2')])\n+\n+\n+def test_entry_point_name_is_module(clear_backend_registry):\n+    with pytest.raises(RuntimeError):\n+        backend_registry._validate_and_store_entry_points(\n+            [('module://backend.something', 'module1')])\n+\n+\n+@pytest.mark.parametrize('backend', [\n+    'agg',\n+    'module://matplotlib.backends.backend_agg',\n+])\n+def test_load_entry_points_only_if_needed(clear_backend_registry, backend):\n+    assert not backend_registry._loaded_entry_points\n+    check = backend_registry.resolve_backend(backend)\n+    assert check == (backend, None)\n+    assert not backend_registry._loaded_entry_points\n+    backend_registry.list_all()  # Force load of entry points\n+    assert backend_registry._loaded_entry_points\n+\n+\n+@pytest.mark.parametrize(\n+    'gui_or_backend, expected_backend, expected_gui',\n+    [\n+        ('agg', 'agg', None),\n+        ('qt', 'qtagg', 'qt'),\n+        ('TkCairo', 'tkcairo', 'tk'),\n+    ]\n+)\n+def test_resolve_gui_or_backend(gui_or_backend, expected_backend, expected_gui):\n+    backend, gui = backend_registry.resolve_gui_or_backend(gui_or_backend)\n+    assert backend == expected_backend\n+    assert gui == expected_gui\n+\n+\n+def test_resolve_gui_or_backend_invalid():\n+    match = \"is not a recognised GUI loop or backend name\"\n+    with pytest.raises(RuntimeError, match=match):\n+        backend_registry.resolve_gui_or_backend('no-such-name')\ndiff --git a/lib/matplotlib/tests/test_backends_interactive.py b/lib/matplotlib/tests/test_backends_interactive.py\nindex e021405c56b7..6830e7d5c845 100644\n--- a/lib/matplotlib/tests/test_backends_interactive.py\n+++ b/lib/matplotlib/tests/test_backends_interactive.py\n@@ -291,7 +291,7 @@ def _test_thread_impl():\n     plt.pause(0.5)  # flush_events fails here on at least Tkagg (bpo-41176)\n     future.result()  # Joins the thread; rethrows any exception.\n     plt.close()  # backend is responsible for flushing any events here\n-    if plt.rcParams[\"backend\"].startswith(\"WX\"):\n+    if plt.rcParams[\"backend\"].lower().startswith(\"wx\"):\n         # TODO: debug why WX needs this only on py >= 3.8\n         fig.canvas.flush_events()\n \ndiff --git a/lib/matplotlib/tests/test_inline_01.ipynb b/lib/matplotlib/tests/test_inline_01.ipynb\nnew file mode 100644\nindex 000000000000..b87ae095bdbe\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_inline_01.ipynb\n@@ -0,0 +1,79 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"%matplotlib inline\\n\",\n+    \"import matplotlib.pyplot as plt\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {\n+    \"jupyter\": {\n+     \"outputs_hidden\": false\n+    }\n+   },\n+   \"outputs\": [],\n+   \"source\": [\n+    \"fig, ax = plt.subplots(figsize=(3, 2))\\n\",\n+    \"ax.plot([1, 3, 2])\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import matplotlib\\n\",\n+    \"matplotlib.get_backend()\"\n+   ]\n+  }\n+ ],\n+ \"metadata\": {\n+  \"kernelspec\": {\n+   \"display_name\": \"Python 3 (ipykernel)\",\n+   \"language\": \"python\",\n+   \"name\": \"python3\"\n+  },\n+  \"language_info\": {\n+   \"codemirror_mode\": {\n+    \"name\": \"ipython\",\n+    \"version\": 3\n+   },\n+   \"file_extension\": \".py\",\n+   \"mimetype\": \"text/x-python\",\n+   \"name\": \"python\",\n+   \"nbconvert_exporter\": \"python\",\n+   \"pygments_lexer\": \"ipython3\",\n+   \"version\": \"3.12.2\"\n+  },\n+  \"toc\": {\n+   \"colors\": {\n+    \"hover_highlight\": \"#DAA520\",\n+    \"running_highlight\": \"#FF0000\",\n+    \"selected_highlight\": \"#FFD700\"\n+   },\n+   \"moveMenuLeft\": true,\n+   \"nav_menu\": {\n+    \"height\": \"12px\",\n+    \"width\": \"252px\"\n+   },\n+   \"navigate_menu\": true,\n+   \"number_sections\": true,\n+   \"sideBar\": true,\n+   \"threshold\": 4,\n+   \"toc_cell\": false,\n+   \"toc_section_display\": \"block\",\n+   \"toc_window_display\": false,\n+   \"widenNotebook\": false\n+  }\n+ },\n+ \"nbformat\": 4,\n+ \"nbformat_minor\": 4\n+}\ndiff --git a/lib/matplotlib/tests/test_matplotlib.py b/lib/matplotlib/tests/test_matplotlib.py\nindex a2f467ac48de..37b41fafdb78 100644\n--- a/lib/matplotlib/tests/test_matplotlib.py\n+++ b/lib/matplotlib/tests/test_matplotlib.py\n@@ -54,7 +54,7 @@ def parse(key):\n         for line in matplotlib.use.__doc__.split(key)[1].split('\\n'):\n             if not line.strip():\n                 break\n-            backends += [e.strip() for e in line.split(',') if e]\n+            backends += [e.strip().lower() for e in line.split(',') if e]\n         return backends\n \n     from matplotlib.backends import BackendFilter, backend_registry\ndiff --git a/lib/matplotlib/tests/test_nbagg_01.ipynb b/lib/matplotlib/tests/test_nbagg_01.ipynb\nindex 8505e057fdc3..bd18aa4192b7 100644\n--- a/lib/matplotlib/tests/test_nbagg_01.ipynb\n+++ b/lib/matplotlib/tests/test_nbagg_01.ipynb\n@@ -8,9 +8,8 @@\n    },\n    \"outputs\": [],\n    \"source\": [\n-    \"import numpy as np\\n\",\n-    \"import matplotlib.pyplot as plt\\n\",\n-    \"%matplotlib notebook\\n\"\n+    \"%matplotlib notebook\\n\",\n+    \"import matplotlib.pyplot as plt\"\n    ]\n   },\n   {\n@@ -826,17 +825,31 @@\n    ],\n    \"source\": [\n     \"fig, ax = plt.subplots()\\n\",\n-    \"ax.plot(range(10))\\n\"\n+    \"ax.plot(range(10))\"\n    ]\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 3,\n    \"metadata\": {\n     \"collapsed\": true\n    },\n-   \"outputs\": [],\n-   \"source\": []\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'notebook'\"\n+      ]\n+     },\n+     \"execution_count\": 3,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import matplotlib\\n\",\n+    \"matplotlib.get_backend()\"\n+   ]\n   }\n  ],\n  \"metadata\": {\n", "problem_statement": "[MNT]: Move Matplotlib backend mapping from IPython and support backends self-registering\n### Summary\n\nI propose to move the Matplotlib backend mapping that is currently in IPython into Matplotlib, and extend it to support backends registering themselves via `entry_points`. This was originally discussed in #19482 and Tom summarised and proposed a solution in https://github.com/matplotlib/matplotlib/pull/19482#issuecomment-1042511334.\n\n### Proposed fix\n\n# Background\r\n\r\nIPython supports the use of the `%matplotlib` magic in two ways:\r\n- `%matplotlib <backend_name>` to use the named Matplotlib backend.\r\n- `%matplotlib --list` to list available backends.\r\n\r\nIPython contains hard-coded information about which backends exist, and which GUI interactive framework they support. The current information consists of backends that are built-into mpl itself (e.g. qt, notebook, webagg) and those in external libraries (ipympl and inline) which are Jupyter-based.\r\n\r\n# Problems\r\n\r\n- This is unnecessarily difficult to maintain as new backends require changes in IPython.\r\n- There is no support in IPython for backends specified using `\"module://whatever.backend.module\"`\r\n\r\n# Proposal\r\n\r\n1. Keep the same `%matplotlib` magic functionality in IPython but defer responsibility for the backend naming and interactive framework identification to Matplotlib, with a version check of Matplotlib to fallback to the existing behaviour if necessary.\r\n2. Add a backend registry to Matplotlib. Whether this is literally a `BackendRegistry` singleton or not is an implementation detail.\r\n3. The registry will allow use of backends for both IPython and `matplotlib.use` in three different categories:\r\n    a. Backends that are built into the Matplotlib code base.\r\n    b. Backends that can be dynamically loaded using `\"module://backend.name\"` such as MplCairo.\r\n    c. Backends that register themselves using an `entry_point`. Initially this will be `ipympl` and `matplotlib-inline`.\r\n4. Need to handle error situations of multiple backends registering under the same name, or registering with the same name as a built-in backend.\r\n5. Matplotlib needs a new `list_backends` function for IPython\u2019s `%matplotlib --list`. This will include all backends in items 3a and 3c above, as well as any `\u201cmodule://\u2026\u201d` backends (3b) that have already been loaded. The latter is so that if you use `%matplotlib module://\u2026` in IPython a subsequent `%matplotlib \u2013list` will include the backend you are using.\r\n6. The `list_backends` function may as well be public within Matplotlib as it is a feature that is requested every so often. It will have to be clearly stated that this contains \u201cbackends that mpl is aware of\u201d rather than an exhaustive list.\r\n\r\nThis isn\u2019t the full set of functionality listed at https://github.com/matplotlib/matplotlib/pull/19482#issuecomment-1042511334 as it does not include use of `\"m://\u2026\"` form for example.\r\n\r\nChanges will be required in the following projects:\r\n1. Matplotlib = new registry, looking up entry points, docs.\r\n2. Matplotlib-inline = add entry point.\r\n3. Ipympl = add entry point.\r\n4. IPython = call Matplotlib backend registry for backend info, docs.\r\n\r\nChanges 1-3 will need to be published in releases before 4 can be merged and released.\r\n\n", "hints_text": "Can we put this on the agenda for the meeting tomorrow?\nYes, I can attend the meeting.\nattn @anntzer \nI'll try to attend tomorrow as well.\nFollowing discussion at the weekly meeting (https://hackmd.io/l9vkn_T4RSmk147H_ZPPBA#ipython--Matplotlib-integration) I am going ahead with an implementation of this and we will see what problems come up.", "created_at": "2024-03-19T11:43:22Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27943, "instance_id": "matplotlib__matplotlib-27943", "issue_numbers": ["27828", "0000"], "base_commit": "5300bd67702e4fb8196cdf032bfcb47aa57e6ec1", "patch": "diff --git a/doc/api/next_api_changes/behavior/27943-AL.rst b/doc/api/next_api_changes/behavior/27943-AL.rst\nnew file mode 100644\nindex 000000000000..1314b763987e\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/27943-AL.rst\n@@ -0,0 +1,10 @@\n+plot() shorthand format interprets \"Cn\" (n>9) as a color-cycle color\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Previously, ``plot(..., \"-C11\")`` would be interpreted as requesting a plot\n+using linestyle \"-\", color \"C1\" (color #1 of the color cycle), and marker \"1\"\n+(\"tri-down\").  It is now interpreted as requesting linestyle \"-\" and color\n+\"C11\" (color #11 of the color cycle).\n+\n+It is recommended to pass ambiguous markers (such as \"1\") explicitly using the\n+*marker* keyword argument.  If the shorthand form is desired, such markers can\n+also be unambiguously set by putting them *before* the color string.\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex be0aacd81bb0..36e146f31af1 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -5,6 +5,7 @@\n import logging\n from numbers import Real\n from operator import attrgetter\n+import re\n import types\n \n import numpy as np\n@@ -189,13 +190,14 @@ def _process_plot_format(fmt, *, ambiguous_fmt_datakey=False):\n                 raise ValueError(errfmt.format(fmt, \"two color symbols\"))\n             color = c\n             i += 1\n-        elif c == 'C' and i < len(fmt) - 1:\n-            color_cycle_number = int(fmt[i + 1])\n-            color = mcolors.to_rgba(f\"C{color_cycle_number}\")\n-            i += 2\n+        elif c == \"C\":\n+            cn_color = re.match(r\"C\\d+\", fmt[i:])\n+            if not cn_color:\n+                raise ValueError(errfmt.format(fmt, \"'C' must be followed by a number\"))\n+            color = mcolors.to_rgba(cn_color[0])\n+            i += len(cn_color[0])\n         else:\n-            raise ValueError(\n-                errfmt.format(fmt, f\"unrecognized character {c!r}\"))\n+            raise ValueError(errfmt.format(fmt, f\"unrecognized character {c!r}\"))\n \n     if linestyle is None and marker is None:\n         linestyle = mpl.rcParams['lines.linestyle']\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 4e659a4d841d..5af508479592 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8511,6 +8511,8 @@ def test_empty_line_plots():\n     (\":-\", r\"':-' is not a valid format string \\(two linestyle symbols\\)\"),\n     (\"rk\", r\"'rk' is not a valid format string \\(two color symbols\\)\"),\n     (\":o-r\", r\"':o-r' is not a valid format string \\(two linestyle symbols\\)\"),\n+    (\"C\", r\"'C' is not a valid format string \\('C' must be followed by a number\\)\"),\n+    (\".C\", r\"'.C' is not a valid format string \\('C' must be followed by a number\\)\"),\n ))\n @pytest.mark.parametrize(\"data\", [None, {\"string\": range(3)}])\n def test_plot_format_errors(fmt, match, data):\n@@ -8543,6 +8545,11 @@ def test_plot_format():\n     line = ax.plot([1, 2, 3], 'k3')\n     assert line[0].get_marker() == '3'\n     assert line[0].get_color() == 'k'\n+    fig, ax = plt.subplots()\n+    line = ax.plot([1, 2, 3], '.C12:')\n+    assert line[0].get_marker() == '.'\n+    assert line[0].get_color() == mcolors.to_rgba('C12')\n+    assert line[0].get_linestyle() == ':'\n \n \n def test_automatic_legend():\n", "problem_statement": "[Bug]: \".C10\" does not work as plot shorthand format spec\n### Bug summary\r\n\r\nThe plot shorthand format spec does not work when combining a Cn color with n>=10 with a linestyle or a markerstyle, e.g. \".C10\".  Somewhat inconsistently, it does work when a Cn color is given by itself.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nfrom pylab import *; plot([0, 1], \".C10\") \r\n# plot([0, 1], \"C10\") works; note that this also goes through the shorthand route\r\n# unlike plot([0, 1], c=\"C10\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nValueError: '.C10' is not a valid format string (unrecognized character '0')\r\n\r\n### Expected outcome\r\n\r\nNo error.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nmacos\r\n\r\n### Matplotlib Version\r\n\r\n3.9.0.dev1178+g88d64e5f0c\r\n\r\n### Matplotlib Backend\r\n\r\nany\r\n\r\n### Python version\r\n\r\n3.12\r\n\r\n### Jupyter version\r\n\r\nnone\r\n\r\n### Installation\r\n\r\ngit checkout\n", "hints_text": "The relevant code is:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/5e347777192b37ac77decc4f975e53ed9d87973b/lib/matplotlib/axes/_base.py#L192-L195\r\n\r\nThis is the case from the long if-elif chain that is handling the Cn colors. It only looks one character ahead (and advances the current index by exactly 2 as a result.\r\n\r\n(If only color is provided, and multidigit `Cn` colors count for this, then that is handled prior to parsing the individual parts in this if/elif chain)", "created_at": "2024-03-18T14:08:18Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27915, "instance_id": "matplotlib__matplotlib-27915", "issue_numbers": ["27911", "0000"], "base_commit": "6378d4816841525a495d6b7ce8b73efcae2211cf", "patch": "diff --git a/doc/sphinxext/redirect_from.py b/doc/sphinxext/redirect_from.py\nindex 7a7e6aa9cdc8..37b56373a3bf 100644\n--- a/doc/sphinxext/redirect_from.py\n+++ b/doc/sphinxext/redirect_from.py\n@@ -33,7 +33,7 @@\n \"\"\"\n \n from pathlib import Path\n-from docutils.parsers.rst import Directive\n+from sphinx.util.docutils import SphinxDirective\n from sphinx.domains import Domain\n from sphinx.util import logging\n \n@@ -51,9 +51,9 @@\n \n \n def setup(app):\n-    RedirectFrom.app = app\n     app.add_directive(\"redirect-from\", RedirectFrom)\n     app.add_domain(RedirectFromDomain)\n+    app.connect(\"builder-inited\", _clear_redirects)\n     app.connect(\"build-finished\", _generate_redirects)\n \n     metadata = {'parallel_read_safe': True}\n@@ -73,8 +73,8 @@ def redirects(self):\n         \"\"\"The mapping of the redirects.\"\"\"\n         return self.data.setdefault('redirects', {})\n \n-    def clear_doc(self, docnames):\n-        self.redirects.clear()\n+    def clear_doc(self, docname):\n+        self.redirects.pop(docname, None)\n \n     def merge_domaindata(self, docnames, otherdata):\n         for src, dst in otherdata['redirects'].items():\n@@ -86,15 +86,14 @@ def merge_domaindata(self, docnames, otherdata):\n                     f\"{self.redirects[src]} and {otherdata['redirects'][src]}\")\n \n \n-class RedirectFrom(Directive):\n+class RedirectFrom(SphinxDirective):\n     required_arguments = 1\n \n     def run(self):\n         redirected_doc, = self.arguments\n-        env = self.app.env\n-        domain = env.get_domain('redirect_from')\n-        current_doc = env.path2doc(self.state.document.current_source)\n-        redirected_reldoc, _ = env.relfn2path(redirected_doc, current_doc)\n+        domain = self.env.get_domain('redirect_from')\n+        current_doc = self.env.path2doc(self.state.document.current_source)\n+        redirected_reldoc, _ = self.env.relfn2path(redirected_doc, current_doc)\n         if redirected_reldoc in domain.redirects:\n             raise ValueError(\n                 f\"{redirected_reldoc} is already noted as redirecting to \"\n@@ -119,3 +118,10 @@ def _generate_redirects(app, exception):\n             logger.info('making refresh html file: %s redirect to %s', k, v)\n             p.parent.mkdir(parents=True, exist_ok=True)\n             p.write_text(html, encoding='utf-8')\n+\n+\n+def _clear_redirects(app):\n+    domain = app.env.get_domain('redirect_from')\n+    if domain.redirects:\n+        logger.info('clearing cached redirects')\n+        domain.redirects.clear()\n", "test_patch": "", "problem_statement": "redirect not working for updated contribute page\nThere should be a re-direct there: https://github.com/matplotlib/matplotlib/blob/478dc5aa62d90f9abeab62b94aefc1a1bfde3413/doc/devel/contribute.rst?plain=1#L1-L3\r\n\r\nWe should merge this to avoid the redirect in our links, but we should also sort out why the redirect is not working.\r\n\r\n_Originally posted by @tacaswell in https://github.com/matplotlib/matplotlib/issues/27910#issuecomment-1992091204_\r\n            \n", "hints_text": "The issue seems to be with this line of code here: https://github.com/matplotlib/matplotlib/blob/5a4bb71f640a3c4dd8aac1af8952fe336da428b8/doc/sphinxext/redirect_from.py#L110C1-L110C5.\r\n\r\n```app.env.get_domain('redirect_from').redirects``` is an empty dictionary, so none of the redirect HTML pages get created. My guess is that it is being cleared somewhere? \r\n\r\n", "created_at": "2024-03-13T19:53:16Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27905, "instance_id": "matplotlib__matplotlib-27905", "issue_numbers": ["27378"], "base_commit": "cc83b59e6937ea742c80b023d1e7e5d0afeff23f", "patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex b2ec3733fe3c..2c8f48623b8c 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -243,7 +243,14 @@ def _check_color_like(**kwargs):\n     \"\"\"\n     for k, v in kwargs.items():\n         if not is_color_like(v):\n-            raise ValueError(f\"{v!r} is not a valid value for {k}\")\n+            raise ValueError(\n+                f\"{v!r} is not a valid value for {k}: supported inputs are \"\n+                f\"(r, g, b) and (r, g, b, a) 0-1 float tuples; \"\n+                f\"'#rrggbb', '#rrggbbaa', '#rgb', '#rgba' strings; \"\n+                f\"named color strings; \"\n+                f\"string reprs of 0-1 floats for grayscale values; \"\n+                f\"'C0', 'C1', ... strings for colors of the color cycle; \"\n+                f\"and pairs combining one of the above with an alpha value\")\n \n \n def same_color(c1, c2):\n", "test_patch": "", "problem_statement": "[ENH]: Suggest 'CN' if color is an integer\n### Problem\n\nIt took me some year to figure out, that matplotlib supports `'CN'` (e.g. `'C1'`) as color.\r\nI tried `1` (integer), but that raises only a `ValueError: 1 is not a valid value for color` (triggered by `plt.plot(np.arange(10), color=1)`)\r\nand when I implemented a workaround to support integers in our wrappers, a colleague asked about the difference to `'CN'`.\n\n### Proposed solution\n\nCurrent code:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/62a5ba4d3e3ac6f32ea4c8c9e89c62381390ac9a/lib/matplotlib/colors.py#L240-L246\r\n\r\nSuggestion:\r\nAdd some more text to the exception message, when the type is an integer, e.g.:\r\n\r\n```python\r\ndef _check_color_like(**kwargs): \r\n     \"\"\" \r\n     For each *key, value* pair in *kwargs*, check that *value* is color-like. \r\n     \"\"\" \r\n     for k, v in kwargs.items(): \r\n         if not is_color_like(v): \r\n             if isinstance(v, int) and k == \"color\" and v >= 0:\r\n                 raise ValueError(\r\n                     f\"{v!r} is not a valid value for {k}.\\n\"\r\n                     f\"To get the N'th entry from mpl.rcParams['axes.prop_cycle'] you can use 'CN' instead of an integer.\") \r\n             raise ValueError(f\"{v!r} is not a valid value for {k}\") \r\n```\n", "hints_text": "Can we improve our documentation somehow to make it clear that the format is `C\\d+`?\n\nTechnically that error message is valid for color/facecolor/edgecolor, but I'm wondering if changing the original error message (no special case) to link to the [color spec doc](https://matplotlib.org/stable/users/explain/colors/colors.html#colors-def) would also have worked to resolve this confusion? \n\nI'm ambivalent on the proposal to support integer colors indexing into CN. I understand the convenience, but am concerned about the potential confusion w/ the float and float string formats - where the number directly maps to a color rather then the layer of indirection here.\n> Can we improve our documentation somehow to make it clear that the format is C\\d+?\r\n\r\nHmm. I don't know. I started with MATLAB and switched then to python/matplotlib.\r\nSo, this is the first time, that I see the [color spec doc](https://matplotlib.org/stable/users/explain/colors/colors.html#colors-def).\r\n\r\n> I'm wondering if changing the original error message (no special case) to link to the [color spec doc](https://matplotlib.org/stable/users/explain/colors/colors.html#colors-def) would also have worked to resolve this confusion?\r\n\r\nThat sounds to me to be a good idea. It would make it easier to find the right page.\r\n\r\n> I'm ambivalent on the proposal to support integer colors indexing into CN. I understand the convenience, but am concerned about the potential confusion w/ the float and float string formats - where the number directly maps to a color rather then the layer of indirection here.\r\n\r\nYes, an integer could have multiple interpretations, e.g. 1 could be white (0-1), close to black (0-255) or the second color.\r\nSince the integer gray format 0-255 is not supported, it may be an option to use the color index for integers, but I am also not sure, whether it improves mpl or not.\r\n\r\nI personally like it, when software tries to predict the intent and suggest what the user may want to do in the exception.\nWe should not guess the user's intent (per the zen of python), but enumerating all possible inputs is actually not that long and probably makes sense here:\r\n```python\r\n    for k, v in kwargs.items():\r\n        if not is_color_like(v):\r\n            raise ValueError(\r\n                f\"{v!r} is not a valid value for {k}: supported inputs are \"\r\n                f\"(r, g, b) and (r, g, b, a) 0-1 float tuples; \"\r\n                f\"'#rrggbb', '#rrggbbaa', '#rgb', '#rgba' strings; \"\r\n                f\"named color strings; \"\r\n                f\"string reprs of 0-1 floats for grayscale values; \"\r\n                f\"'C0', 'C1', ... strings for colors of the color cycle; \"\r\n                f\"and pairs combining one of the above with an alpha value\")\r\n```", "created_at": "2024-03-10T21:48:10Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27869, "instance_id": "matplotlib__matplotlib-27869", "issue_numbers": ["27865", "0000"], "base_commit": "9618fc6322745834dd098cadecf8e05a0917d498", "patch": "diff --git a/lib/matplotlib/backends/backend_pdf.py b/lib/matplotlib/backends/backend_pdf.py\nindex a3aa2f66010a..7e3e09f034f5 100644\n--- a/lib/matplotlib/backends/backend_pdf.py\n+++ b/lib/matplotlib/backends/backend_pdf.py\n@@ -2755,8 +2755,7 @@ def savefig(self, figure=None, **kwargs):\n                 raise ValueError(f\"No figure {figure}\")\n             figure = manager.canvas.figure\n         # Force use of pdf backend, as PdfPages is tightly coupled with it.\n-        with cbook._setattr_cm(figure, canvas=FigureCanvasPdf(figure)):\n-            figure.savefig(self, format=\"pdf\", **kwargs)\n+        figure.savefig(self, format=\"pdf\", backend=\"pdf\", **kwargs)\n \n     def get_pagecount(self):\n         \"\"\"Return the current number of pages in the multipage pdf file.\"\"\"\ndiff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\nindex ba01622bd068..9705f5fc6bce 100644\n--- a/lib/matplotlib/backends/backend_pgf.py\n+++ b/lib/matplotlib/backends/backend_pgf.py\n@@ -987,26 +987,25 @@ def savefig(self, figure=None, **kwargs):\n                 raise ValueError(f\"No figure {figure}\")\n             figure = manager.canvas.figure\n \n-        with cbook._setattr_cm(figure, canvas=FigureCanvasPgf(figure)):\n-            width, height = figure.get_size_inches()\n-            if self._n_figures == 0:\n-                self._write_header(width, height)\n-            else:\n-                # \\pdfpagewidth and \\pdfpageheight exist on pdftex, xetex, and\n-                # luatex<0.85; they were renamed to \\pagewidth and \\pageheight\n-                # on luatex>=0.85.\n-                self._file.write(\n-                    (\n-                        r'\\newpage'\n-                        r'\\ifdefined\\pdfpagewidth\\pdfpagewidth'\n-                        fr'\\else\\pagewidth\\fi={width}in'\n-                        r'\\ifdefined\\pdfpageheight\\pdfpageheight'\n-                        fr'\\else\\pageheight\\fi={height}in'\n-                        '%%\\n'\n-                    ).encode(\"ascii\")\n-                )\n-            figure.savefig(self._file, format=\"pgf\", **kwargs)\n-            self._n_figures += 1\n+        width, height = figure.get_size_inches()\n+        if self._n_figures == 0:\n+            self._write_header(width, height)\n+        else:\n+            # \\pdfpagewidth and \\pdfpageheight exist on pdftex, xetex, and\n+            # luatex<0.85; they were renamed to \\pagewidth and \\pageheight\n+            # on luatex>=0.85.\n+            self._file.write(\n+                (\n+                    r'\\newpage'\n+                    r'\\ifdefined\\pdfpagewidth\\pdfpagewidth'\n+                    fr'\\else\\pagewidth\\fi={width}in'\n+                    r'\\ifdefined\\pdfpageheight\\pdfpageheight'\n+                    fr'\\else\\pageheight\\fi={height}in'\n+                    '%%\\n'\n+                ).encode(\"ascii\")\n+            )\n+        figure.savefig(self._file, format=\"pgf\", backend=\"pgf\", **kwargs)\n+        self._n_figures += 1\n \n     def get_pagecount(self):\n         \"\"\"Return the current number of pages in the multipage pdf file.\"\"\"\n", "test_patch": "", "problem_statement": "[Bug]: Zoom und pan not working after writing pdf pages. \n### Bug summary\r\n\r\nLadies and Gentlemen,\r\nZoom und pan is not working after writing pdf pages. \r\nWithin matplotlib version 3.7.5 it is working. \r\nIn e.g. 3.8.3 it does not react any more.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.backends.backend_pdf import PdfPages\r\nfig, ax = plt.subplots()\r\nax.plot([1, 2, 3], [4, 5, 6])\r\nfilename = \"test4.pdf\"\r\nwith PdfPages(filename) as pdf:\r\n    fig.show()\r\n    pdf.savefig() # <== if you comment this line, then zoom is working fine. However it is not getting stored.\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n\r\n\r\n\r\n![zoom not possible](https://github.com/matplotlib/matplotlib/assets/122103308/221749bd-9fe8-4e19-8ffe-96e1caaf66e9)\r\n\r\n\r\n### Expected outcome\r\n\r\n\r\n![zoom is possible](https://github.com/matplotlib/matplotlib/assets/122103308/8cd2229e-42d5-4519-bf74-c25cf18271c7)\r\n\r\n\r\n\r\n### Additional information\r\n\r\nIn earlier versions it has been working fine. \r\nIt is also not working within jupyterlab.\r\nIt was testet in Spyder IDE 5.5.1 and IDLE(Python 3.12 64-bit)\r\nI take the earlier matplotlib version instead.\r\n\r\n### Operating system\r\n\r\nWindows 7, \r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\nPython 3.12.2 64-bit\r\n\r\n### Jupyter version\r\n\r\n4.1.2\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "I believe a more appropriate code for reproduction is:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.backends.backend_pdf import PdfPages\r\n\r\nfilename = \"test4.pdf\"\r\n\r\nwith PdfPages(filename) as pdf:\r\n    fig, ax = plt.subplots()\r\n    ax.plot([1, 2, 3], [4, 5, 6])\r\n    pdf.savefig() # <== if you comment this line, then zoom is working fine. However it is not getting stored.\r\n\r\nplt.show()\nTo solve this issue, you just need to write `plt.show()` before saving the figure and pass the figure to the `savefig()` function. Like:\r\n```\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.backends.backend_pdf import PdfPages\r\nfilename = \"test4.pdf\"\r\n\r\nwith PdfPages(filename) as pdf:\r\n    fig, ax = plt.subplots()\r\n    ax.plot([1, 2, 3], [4, 5, 6])\r\n    plt.show()\r\n    pdf.savefig(fig) # <== if you comment this line, then zoom is working fine. However it is not getting stored.\r\n```\r\nBut you might have to undo changes that you did while inspecting the figure to save the original figure\nOn another note, \r\n<img width=\"625\" alt=\"image\" src=\"https://github.com/matplotlib/matplotlib/assets/73378019/af6dbaf6-edf8-4bb3-bd0a-34f95254d308\">\r\nThe import statement is slightly incorrect `from matplotlib.backends.backend_pgf import PdfPages` and needs to be _backend_pdf_ instead of _backend_pgf_. Is it recommended to open a PR in small changes like this one? \nThis bisects to a6230cc72009483697be95d400eb23cdfcc7535b, or #25546, by @anntzer.\nHowever, that appears to be exposing an existing different bug. For some reason, this context manager is not restoring the old canvas:\r\nhttps://github.com/matplotlib/matplotlib/blob/9618fc6322745834dd098cadecf8e05a0917d498/lib/matplotlib/backends/backend_pdf.py#L2758-L2759", "created_at": "2024-03-06T11:28:03Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27856, "instance_id": "matplotlib__matplotlib-27856", "issue_numbers": ["363", "0000"], "base_commit": "787f30836b6acb68083149a515159e956d8e4804", "patch": "diff --git a/lib/matplotlib/backends/backend_cairo.py b/lib/matplotlib/backends/backend_cairo.py\nindex 421d857b0a03..7409cd35b394 100644\n--- a/lib/matplotlib/backends/backend_cairo.py\n+++ b/lib/matplotlib/backends/backend_cairo.py\n@@ -34,6 +34,13 @@\n from matplotlib.transforms import Affine2D\n \n \n+def _set_rgba(ctx, color, alpha, forced_alpha):\n+    if len(color) == 3 or forced_alpha:\n+        ctx.set_source_rgba(*color[:3], alpha)\n+    else:\n+        ctx.set_source_rgba(*color)\n+\n+\n def _append_path(ctx, path, transform, clip=None):\n     for points, code in path.iter_segments(\n             transform, remove_nans=True, clip=clip):\n@@ -100,13 +107,11 @@ def set_context(self, ctx):\n         self.gc.ctx = ctx\n         self.width, self.height = size\n \n-    def _fill_and_stroke(self, ctx, fill_c, alpha, alpha_overrides):\n+    @staticmethod\n+    def _fill_and_stroke(ctx, fill_c, alpha, alpha_overrides):\n         if fill_c is not None:\n             ctx.save()\n-            if len(fill_c) == 3 or alpha_overrides:\n-                ctx.set_source_rgba(fill_c[0], fill_c[1], fill_c[2], alpha)\n-            else:\n-                ctx.set_source_rgba(fill_c[0], fill_c[1], fill_c[2], fill_c[3])\n+            _set_rgba(ctx, fill_c, alpha, alpha_overrides)\n             ctx.fill_preserve()\n             ctx.restore()\n         ctx.stroke()\n@@ -122,8 +127,31 @@ def draw_path(self, gc, path, transform, rgbFace=None):\n                      + Affine2D().scale(1, -1).translate(0, self.height))\n         ctx.new_path()\n         _append_path(ctx, path, transform, clip)\n-        self._fill_and_stroke(\n-            ctx, rgbFace, gc.get_alpha(), gc.get_forced_alpha())\n+        if rgbFace is not None:\n+            ctx.save()\n+            _set_rgba(ctx, rgbFace, gc.get_alpha(), gc.get_forced_alpha())\n+            ctx.fill_preserve()\n+            ctx.restore()\n+        hatch_path = gc.get_hatch_path()\n+        if hatch_path:\n+            dpi = int(self.dpi)\n+            hatch_surface = ctx.get_target().create_similar(\n+                cairo.Content.COLOR_ALPHA, dpi, dpi)\n+            hatch_ctx = cairo.Context(hatch_surface)\n+            _append_path(hatch_ctx, hatch_path,\n+                         Affine2D().scale(dpi, -dpi).translate(0, dpi),\n+                         None)\n+            hatch_ctx.set_line_width(self.points_to_pixels(gc.get_hatch_linewidth()))\n+            hatch_ctx.set_source_rgba(*gc.get_hatch_color())\n+            hatch_ctx.fill_preserve()\n+            hatch_ctx.stroke()\n+            hatch_pattern = cairo.SurfacePattern(hatch_surface)\n+            hatch_pattern.set_extend(cairo.Extend.REPEAT)\n+            ctx.save()\n+            ctx.set_source(hatch_pattern)\n+            ctx.fill_preserve()\n+            ctx.restore()\n+        ctx.stroke()\n \n     def draw_markers(self, gc, marker_path, marker_trans, path, transform,\n                      rgbFace=None):\n@@ -267,8 +295,13 @@ def get_text_width_height_descent(self, s, prop, ismath):\n     def new_gc(self):\n         # docstring inherited\n         self.gc.ctx.save()\n+        # FIXME: The following doesn't properly implement a stack-like behavior\n+        # and relies instead on the (non-guaranteed) fact that artists never\n+        # rely on nesting gc states, so directly resetting the attributes (IOW\n+        # a single-level stack) is enough.\n         self.gc._alpha = 1\n         self.gc._forced_alpha = False  # if True, _alpha overrides A from RGBA\n+        self.gc._hatch = None\n         return self.gc\n \n     def points_to_pixels(self, points):\n@@ -298,12 +331,8 @@ def restore(self):\n \n     def set_alpha(self, alpha):\n         super().set_alpha(alpha)\n-        _alpha = self.get_alpha()\n-        rgb = self._rgb\n-        if self.get_forced_alpha():\n-            self.ctx.set_source_rgba(rgb[0], rgb[1], rgb[2], _alpha)\n-        else:\n-            self.ctx.set_source_rgba(rgb[0], rgb[1], rgb[2], rgb[3])\n+        _set_rgba(\n+            self.ctx, self._rgb, self.get_alpha(), self.get_forced_alpha())\n \n     def set_antialiased(self, b):\n         self.ctx.set_antialias(\n", "test_patch": "", "problem_statement": "Enable hatches for Cairo backend\n[Original report at SourceForge, opened Thu Sep  9 10:51:29 2010](https://sourceforge.net/tracker/?func=detail&aid=3062709&group_id=80706&atid=560723)\n\nHi, \nI would love to see hatches support with the Cairo backend. Right now I have to go through dynamic loading / unloading of matplotlibs to have hatches for some of my charts. Adding hatches to Cairo would solve this.\n\nThanks so much for Matplotlib, it really rocks!\n\n", "hints_text": "@mdboom: Has this recently been moved into v1.2.x? How likely is it? I wouldn't be adverse to making it a 1.3 feature request in the name of getting (already new feature laden) 1.2.x shippable.\n\nYeah -- I'd prefer to take it off of 1.2.  I don't recall assigning it there -- perhaps I did it by accident.  This is significant work.\n\nI don't know if it needs mentioning that hatches also don't work in `GTKCairo` and `GTK3Cairo`.\n\nFor the record hatches are supported by https://github.com/anntzer/mpl_cairo.\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear. Thanks for your help!", "created_at": "2024-03-04T10:10:58Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27850, "instance_id": "matplotlib__matplotlib-27850", "issue_numbers": ["8072", "0000"], "base_commit": "365c950ea98a55ef34e55c653fcb6a62665ac4e8", "patch": "diff --git a/doc/api/next_api_changes/deprecations/27850-REC.rst b/doc/api/next_api_changes/deprecations/27850-REC.rst\nnew file mode 100644\nindex 000000000000..2021c2737ecd\n--- /dev/null\n+++ b/doc/api/next_api_changes/deprecations/27850-REC.rst\n@@ -0,0 +1,10 @@\n+``plot_date``\n+~~~~~~~~~~~~~\n+\n+Use of `~.Axes.plot_date` has been discouraged since Matplotlib 3.5 and the\n+function is now formally deprecated.\n+\n+- ``datetime``-like data should directly be plotted using `~.Axes.plot`.\n+-  If you need to plot plain numeric data as :ref:`date-format` or need to set\n+   a timezone, call ``ax.xaxis.axis_date`` / ``ax.yaxis.axis_date`` before\n+   `~.Axes.plot`. See `.Axis.axis_date`.\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 60921f69fc1b..3a1cc2fb9fb6 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1742,17 +1742,17 @@ def plot(self, *args, scalex=True, scaley=True, data=None, **kwargs):\n             self._request_autoscale_view(\"y\")\n         return lines\n \n+    @_api.deprecated(\"3.9\", alternative=\"plot\")\n     @_preprocess_data(replace_names=[\"x\", \"y\"], label_namer=\"y\")\n     @_docstring.dedent_interpd\n     def plot_date(self, x, y, fmt='o', tz=None, xdate=True, ydate=False,\n                   **kwargs):\n         \"\"\"\n-        [*Discouraged*] Plot coercing the axis to treat floats as dates.\n+        Plot coercing the axis to treat floats as dates.\n \n-        .. admonition:: Discouraged\n+        .. deprecated:: 3.9\n \n-            This method exists for historic reasons and will be deprecated in\n-            the future.\n+            This method exists for historic reasons and will be removed in version 3.11.\n \n             - ``datetime``-like data should directly be plotted using\n               `~.Axes.plot`.\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 8c43b04e0eb7..fbcafa76dcea 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -870,7 +870,8 @@ def test_single_date():\n     data1 = [-65.54]\n \n     fig, ax = plt.subplots(2, 1)\n-    ax[0].plot_date(time1 + dt, data1, 'o', color='r')\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        ax[0].plot_date(time1 + dt, data1, 'o', color='r')\n     ax[1].plot(time1, data1, 'o', color='r')\n \n \n@@ -6897,11 +6898,13 @@ def test_date_timezone_x():\n     # Same Timezone\n     plt.figure(figsize=(20, 12))\n     plt.subplot(2, 1, 1)\n-    plt.plot_date(time_index, [3] * 3, tz='Canada/Eastern')\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.plot_date(time_index, [3] * 3, tz='Canada/Eastern')\n \n     # Different Timezone\n     plt.subplot(2, 1, 2)\n-    plt.plot_date(time_index, [3] * 3, tz='UTC')\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.plot_date(time_index, [3] * 3, tz='UTC')\n \n \n @image_comparison(['date_timezone_y.png'])\n@@ -6914,12 +6917,13 @@ def test_date_timezone_y():\n     # Same Timezone\n     plt.figure(figsize=(20, 12))\n     plt.subplot(2, 1, 1)\n-    plt.plot_date([3] * 3,\n-                  time_index, tz='Canada/Eastern', xdate=False, ydate=True)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.plot_date([3] * 3, time_index, tz='Canada/Eastern', xdate=False, ydate=True)\n \n     # Different Timezone\n     plt.subplot(2, 1, 2)\n-    plt.plot_date([3] * 3, time_index, tz='UTC', xdate=False, ydate=True)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.plot_date([3] * 3, time_index, tz='UTC', xdate=False, ydate=True)\n \n \n @image_comparison(['date_timezone_x_and_y.png'], tol=1.0)\n@@ -6932,11 +6936,13 @@ def test_date_timezone_x_and_y():\n     # Same Timezone\n     plt.figure(figsize=(20, 12))\n     plt.subplot(2, 1, 1)\n-    plt.plot_date(time_index, time_index, tz='UTC', ydate=True)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.plot_date(time_index, time_index, tz='UTC', ydate=True)\n \n     # Different Timezone\n     plt.subplot(2, 1, 2)\n-    plt.plot_date(time_index, time_index, tz='US/Eastern', ydate=True)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        plt.plot_date(time_index, time_index, tz='US/Eastern', ydate=True)\n \n \n @image_comparison(['axisbelow.png'], remove_text=True)\ndiff --git a/lib/matplotlib/tests/test_datetime.py b/lib/matplotlib/tests/test_datetime.py\nindex 104a649e1464..4b693eb7d1ca 100644\n--- a/lib/matplotlib/tests/test_datetime.py\n+++ b/lib/matplotlib/tests/test_datetime.py\n@@ -657,9 +657,10 @@ def test_plot_date(self):\n         x_ranges = np.array(range(1, range_threshold))\n         y_ranges = np.array(range(1, range_threshold))\n \n-        ax1.plot_date(x_dates, y_dates)\n-        ax2.plot_date(x_dates, y_ranges)\n-        ax3.plot_date(x_ranges, y_dates)\n+        with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+            ax1.plot_date(x_dates, y_dates)\n+            ax2.plot_date(x_dates, y_ranges)\n+            ax3.plot_date(x_ranges, y_dates)\n \n     @pytest.mark.xfail(reason=\"Test for quiver not written yet\")\n     @mpl.style.context(\"default\")\ndiff --git a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\nindex 328bb6e33fdf..b1a18d77747e 100644\n--- a/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n+++ b/lib/mpl_toolkits/axes_grid1/tests/test_axes_grid1.py\n@@ -93,7 +93,8 @@ def test_twin_axes_empty_and_removed():\n \n def test_twin_axes_both_with_units():\n     host = host_subplot(111)\n-    host.plot_date([0, 1, 2], [0, 1, 2], xdate=False, ydate=True)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning):\n+        host.plot_date([0, 1, 2], [0, 1, 2], xdate=False, ydate=True)\n     twin = host.twinx()\n     twin.plot([\"a\", \"b\", \"c\"])\n     assert host.get_yticklabels()[0].get_text() == \"00:00:00\"\n", "problem_statement": "plot_date() ignores timezone in matplotlib version 2.0.0\n### Bug report\r\n\r\n**Bug summary**\r\n\r\n- It is a reopen bug report, same to #5575. The bug still exists for version 2.0.0.\r\n\r\ncopy paste the code from #5575 \r\n\r\n```python\r\nimport pytz\r\nimport matplotlib.pyplot as plt\r\nfrom datetime import datetime\r\ntime_index = [pytz.timezone('Europe/Berlin').localize(datetime(year=2015, month=11, day=27, hour=x)) for x in range(4)]\r\nplt.plot_date(time_index, [4]*4, tz='Europe/Berlin')\r\nplt.plot_date(time_index, [3]*4, tz='UTC')\r\n```\r\n\r\n**Actual outcome**\r\n\r\n- The output gives no difference in xaxis, implying tz is not working.\n", "hints_text": "For reference, this works fine if the two plots are on different axes, which is all #6091 tests for. The problem happens if two plots with different timezones are done on the same axis.\nWhat timezone would you expect the axes to be in if you pass in data with different timezones (which may be considered 'different units')?\nIt seems natural enough to convert everything to the axis' tz?\nIs there any confirmation on whether this is going to be fixed in v3.0?\nI don't think there is a fix for this right now.  OTOH, I suspect its not too hard to do.  PR would be welcome...\nActually, I take that back.  The problem is that `axis.update_units` only checks that the converter is appropriate for the data, not the actual units of the data. So the fix is to fix the units machinery, but thats under review.  \nThanks for providing this information. Looking forward to the fix!\nI agree that the documentation shouldn't claim that this works.  Not sure how we indicate that a kwarg actually has no effect, but that we'd like it to someday...\r\n\r\nI wouldn't expect this in the forseable future, as it gets at the root of our units handling, which is currently not set up to change units on the fly.  Safest is to convert all your datetime objects to one timezone and then plot.\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nStill seems to be an issue on current main, so I'll keep this open.\nSince plot_date is discouraged anyway, it\u2019s unlikely that we\u2019ll change behavior.\r\n\r\nI suggest we close this by better documenting, that tz is only used for  [axis_date](https://matplotlib.org/stable/api/_as_gen/matplotlib.axis.Axis.axis_date.html#matplotlib.axis.Axis.axis_date), so affects the axis labeling, but does not directly imply the timezone of the data.\nI'm guessing this is still and issue with plain `plot()` though, and I don't see why taking the timezone into account when doing the unit conversion isn't a valid feature request (or even a bug fix)?\nOk, but then let\u2019s rephrase this into a new issue using `plot` only.\nWith v3.8.2 I have\r\n\r\n```python\r\nimport pytz\r\nimport matplotlib.pyplot as plt\r\nfrom datetime import datetime\r\n\r\ntime_index_berlin = [pytz.timezone('Europe/Berlin').localize(datetime(year=2015, month=11, day=27, hour=x)) for x in range(4)]\r\ntime_index_utc = [pytz.timezone('UTC').localize(datetime(year=2015, month=11, day=27, hour=x)) for x in range(4)]\r\n\r\n\r\nfig, ax = plt.subplots()\r\n\r\nax.plot(time_index_berlin, [4]*4, label='Berlin')\r\nax.plot(time_index_utc, [3]*4, label='UTC')\r\n\r\nax.legend()\r\nfig.autofmt_xdate()\r\n\r\nplt.show()\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/9e9145f0-6732-4ea9-8438-b3dc3f27374d)\r\n\r\nIf I reverse the order of plotting:\r\n\r\n```python\r\nax.plot(time_index_utc, [3]*4, label='UTC')\r\nax.plot(time_index_berlin, [4]*4, label='Berlin')\r\n```\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/c463e0e5-8011-4bd8-8b47-971e95243c88)\r\n\r\nSo it seems we plot in whichever timezone came first.\n> it seems we plot in whichever timezone came first.\r\n\r\nWhich is reasonable. So, if I understand correctly, we don\u2019t have an issue with pure `plot()`.\nAh fair enough, sorry for not checking... if we're not fixing anything on `plot_date()` now happy for this to be closed as wont fix \ud83d\udc4d \nI'm confused - are we saying `plot_date` is broken, but `plot` works?  I wasn't aware `plot_date` did anything different that `plot`.  \nYet again, my bad for not actually checking... `plot_date` does seem to be working fine if given dates with different timezones. But this issue is about the `tz` argument to `plot_date` which AFAIK has no equivalent with `plot`?\r\n\r\n(as an aside, in the above plot https://github.com/matplotlib/matplotlib/issues/8072#issuecomment-1919262892 I'm a bit confused, isn't Berlin one hour ahead of UTC, which means the lines are the wrong way round (Berlin should be one hour to the right of UTC instead of one hour to the left)??)\nConfirmed, `plot` errors if you pass it the _tz_ parameter.\r\n\r\nYes, Berlin is an hour ahead of UTC (in winter).  So when it's midnight in Berlin, it's only 11pm UTC.  So I think the plot is correct (note both lines start at midnight).\nhttps://github.com/matplotlib/matplotlib/blob/41d4149f84b40d3a90a70f81b940985b8485f04a/lib/matplotlib/axes/_axes.py#L1820-L1824\r\n\r\nThis is the implementation of `plot_date` as it stands.\r\n\r\nThe consequences of this implementation are as follows:\r\n\r\n- Only the last `tz` passed is used and is used to interpret _all_ floating point inputs (regardless of what `tz` was passed with a particular floating point input)\r\n   - we do not add the tz to the source data, just set it as the active interpretation of floats\r\n- If no `tz` is provided, it will use the :rc:`timezone` (defaults to UTC)\r\n- `datetime` objects will still translate to the timezone as they hold their timezone info themselves\r\n- `datetime64` does _not_ store timezone info (though will parse it)... there is some handling of `datetime64` in `date2num`/`num2date` that looks like there either _was_ once some tz info or _is_ on some sub dtypes we support (pandas?, not sure, but `astimezone` is not a numpy thing)\r\n   - As such, I believe they are always interpreted as UTC, but might be :rc:`timezone`, didn't spend the time to differentiate that.\r\n- `float` inputs _will_ change (since changing the tz changes what the floating point number isformatted as/translates to as a date, and the tz is not attached to it.\r\n\r\nThe equivalent to passing the `tz` argument is to call `ax.xaxis_date(tz)` (or y axis, but by default x is the only one set).\r\n\r\nSo, in the example, both plots are using `datetime` objects which _are_ carrying timezone information as the `x` values... I do _not_ think we should be applying a new timezone to them in `plot_date` when they are given as timezoned values. I could see _an_ argument for attaching the tz to float inputs (e.g. by instead of doing `self.plot(x, y, **kwargs)` doing `self.plot(num2date(x, tz=tz), y, **kwargs)` (modulo x and y bool flag handling...) but even that I would think would only apply to _float_ inputs, not `datetime` inputs as is here... and even then am not sure it's actually expected behavior)\r\n\r\nGiven the admonition that very explicitly states \"Do not use this for `datetime` inputs, use `plot` instead\" (in current mpl, such text was not present when this issue was opened in fairness), my opinion is that this should be closed as \"expected behavior\". The admonition (which was added in #18346) also does give information about calling `axis_date` (though does reach in to the `axis` instead of using the `axes` method which exists... but just is a wrapper so doesn't really change anything)\nI do wonder if we should go a step further and hard deprecate this method.  Datetime with timezones are confusing enough without slightly different semantics.  \r\n\r\n\nFrom the discussion at #18346, it seems the intention at the time had been to pre-deprecate `plot_date` but the `PendingDeprecationWarning` was causing an issue with Sphinx :eyes: \nI'm fine with deprecating now. We've even already announced that we we will do this in the admonition at https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.plot_date.html#matplotlib.axes.Axes.plot_date", "created_at": "2024-03-03T18:14:08Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27848, "instance_id": "matplotlib__matplotlib-27848", "issue_numbers": ["27301", "0000"], "base_commit": "efcca8deaf720b2652e2d3d8876ab5187808abb8", "patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 7e46cf567f70..e9a7aad6c456 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -328,7 +328,7 @@ def to_rgba(self, x, alpha=None, bytes=False, norm=True):\n         treated as an RGB or RGBA array, and no mapping will be done.\n         The array can be `~numpy.uint8`, or it can be floats with\n         values in the 0-1 range; otherwise a ValueError will be raised.\n-        If it is a masked array, any masked elements will be set to 0 alpha.\n+        Any NaNs or masked elements will be set to 0 alpha.\n         If the last dimension is 3, the *alpha* kwarg (defaulting to 1)\n         will be used to fill in the transparency.  If the last dimension\n         is 4, the *alpha* kwarg is ignored; it does not\n@@ -360,6 +360,12 @@ def to_rgba(self, x, alpha=None, bytes=False, norm=True):\n                 else:\n                     raise ValueError(\"Third dimension must be 3 or 4\")\n                 if xx.dtype.kind == 'f':\n+                    # If any of R, G, B, or A is nan, set to 0\n+                    if np.any(nans := np.isnan(x)):\n+                        if xx.shape[2] == 4:\n+                            xx = xx.copy()\n+                        xx[np.any(nans, axis=2), :] = 0\n+\n                     if norm and (xx.max() > 1 or xx.min() < 0):\n                         raise ValueError(\"Floating point image RGB values \"\n                                          \"must be in the 0..1 range.\")\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2d71fea83472..5b5332100c2a 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -1352,6 +1352,32 @@ def test_scalarmappable_to_rgba(bytes):\n     np.testing.assert_almost_equal(sm.to_rgba(xm[..., :3], bytes=bytes), expected)\n \n \n+@pytest.mark.parametrize(\"bytes\", (True, False))\n+def test_scalarmappable_nan_to_rgba(bytes):\n+    sm = cm.ScalarMappable()\n+\n+    # RGBA\n+    x = np.ones((2, 3, 4), dtype=float) * 0.5\n+    x[0, 0, 0] = np.nan\n+    expected = x.copy()\n+    expected[0, 0, :] = 0\n+    if bytes:\n+        expected = (expected * 255).astype(np.uint8)\n+    np.testing.assert_almost_equal(sm.to_rgba(x, bytes=bytes), expected)\n+    assert np.any(np.isnan(x))  # Input array should not be changed\n+\n+    # RGB\n+    expected[..., 3] = 255 if bytes else 1\n+    expected[0, 0, 3] = 0\n+    np.testing.assert_almost_equal(sm.to_rgba(x[..., :3], bytes=bytes), expected)\n+    assert np.any(np.isnan(x))  # Input array should not be changed\n+\n+    # Out-of-range fail\n+    x[1, 0, 0] = 42\n+    with pytest.raises(ValueError, match='0..1 range'):\n+        sm.to_rgba(x[..., :3], bytes=bytes)\n+\n+\n def test_failed_conversions():\n     with pytest.raises(ValueError):\n         mcolors.to_rgba('5')\n", "problem_statement": "[Bug]: `imshow` allows RGB(A) images with `np.nan` values to pass\n### Bug summary\r\n\r\nUsing `imshow` to visualize a 2x2x1 array with nans scattered throughout works as expected. With the default \"bad\" color of black with alpha = 0, you'll see an axis' `facecolor` where the `nan`s are.\r\n\r\nWith a 2x2x3 array, the `nan`s are always black.\r\n\r\nWith a 2x2x4 array, and the alpha manually set to 0 where the `nan`s are, you get the correct behavior (i.e. you can see the axis where the nans are).\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy\r\nfrom matplotlib import pyplot\r\n\r\nimg = numpy.ones((2, 2))  # single channel 2x2\r\nimg_nan = img.copy()\r\nimg_nan[0, 0] = float('nan')\r\n\r\nimg3 = numpy.ones((2, 2, 3))  # RGB 2x2\r\nimg3_nan = img3.copy()\r\nimg3_nan[0, 0, :] = float('nan')\r\n\r\nimg4 = numpy.ones((2, 2, 4))  # RGBA 2x2\r\nimg4_nan = img4.copy()\r\nimg4_nan[0, 0, :] = float('nan')\r\nimg4_nan[0, 0, 3] = 0  # alpha\r\n\r\n\r\ndef imshow(a):\r\n    pyplot.figure()\r\n    im = pyplot.imshow(a)\r\n    # im.get_cmap().set_bad(color='y', alpha=1) # only works for single channel images\r\n    im.get_cmap().set_bad(alpha=0)\r\n    pyplot.gca().set_facecolor('y')\r\n\r\n\r\nimshow(img_nan)   # nan shows up as 'y'\r\nimshow(img3_nan)  # nan shows up as black\r\nimshow(img4_nan)  # nan shows up as 'y'\r\n\r\n\r\npyplot.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/26465923/bc067e95-da1a-4ddf-b55b-929b8a18054b)\r\n![image](https://github.com/matplotlib/matplotlib/assets/26465923/7afe79b4-64cc-4b41-a909-d2d6fe966af0)\r\n![image](https://github.com/matplotlib/matplotlib/assets/26465923/ef71c33e-991d-4fd5-95a2-80ce3a66584c)\r\n\r\n\r\n### Expected outcome\r\n\r\nFigures 2 and 3 above should look identical.\r\n\r\n### Additional information\r\n\r\nI traced through `imshow` and cannot see any difference between the single- and 3-channel image; the mask is there and it's correct in both cases. So I wonder if this is a backend issue?\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.7.3\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.8.10  \r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "colormaps aren't used for 3 or 4 channel imshow()'s, so the \"bad\" is never\r\napplicable there. With the 4 channel one, having an alpha of zero just\r\nreveals the color underneath.\r\n\r\nOn Thu, Nov 9, 2023 at 4:37\u202fPM Emilio Graff ***@***.***>\r\nwrote:\r\n\r\n> Bug summary\r\n>\r\n> Using imshow to visualize a 2x2x1 array with nans scattered throughout\r\n> works as expected. With the default \"bad\" color of black with alpha = 0,\r\n> you'll see an axis' facecolor where the nans are.\r\n>\r\n> With a 2x2x3 array, the nans are always black.\r\n>\r\n> With a 2x2x4 array, and the alpha manually set to 0 where the nans are,\r\n> you get the correct behavior (i.e. you can see the axis where the nans are.\r\n> Code for reproduction\r\n>\r\n> import numpyfrom matplotlib import pyplot\r\n> img = numpy.ones((2, 2))  # single channel 2x2img_nan = img.copy()img_nan[0, 0] = float('nan')\r\n> img3 = numpy.ones((2, 2, 3))  # RGB 2x2img3_nan = img3.copy()img3_nan[0, 0, :] = float('nan')\r\n> img4 = numpy.ones((2, 2, 4))  # RGBA 2x2img4_nan = img4.copy()img4_nan[0, 0, :] = float('nan')img4_nan[0, 0, 3] = 0  # alpha\r\n>\r\n> def imshow(a):\r\n>     pyplot.figure()\r\n>     im = pyplot.imshow(a)\r\n>     # im.get_cmap().set_bad(color='y', alpha=1) # only works for single channel images\r\n>     im.get_cmap().set_bad(alpha=0)\r\n>     pyplot.gca().set_facecolor('y')\r\n>\r\n> imshow(img_nan)   # nan shows up as 'y'imshow(img3_nan)  # nan shows up as blackimshow(img4_nan)  # nan shows up as 'y'\r\n>\r\n> pyplot.show()\r\n>\r\n> Actual outcome\r\n>\r\n> [image: image]\r\n> <https://user-images.githubusercontent.com/26465923/281868384-bc067e95-da1a-4ddf-b55b-929b8a18054b.png>\r\n> [image: image]\r\n> <https://user-images.githubusercontent.com/26465923/281868405-7afe79b4-64cc-4b41-a909-d2d6fe966af0.png>\r\n> [image: image]\r\n> <https://user-images.githubusercontent.com/26465923/281868433-ef71c33e-991d-4fd5-95a2-80ce3a66584c.png>\r\n> Expected outcome\r\n>\r\n> Figures 2 and 3 above should look identical.\r\n> Additional information\r\n>\r\n> I traced through imshow and cannot see any difference between the single-\r\n> and 3-channel image; the mask is there and it's correct in both cases. So I\r\n> wonder if this is a backend issue?\r\n> Operating system\r\n>\r\n> Windows\r\n> Matplotlib Version\r\n>\r\n> 3.7.3\r\n> Matplotlib Backend\r\n>\r\n> QtAgg\r\n> Python version\r\n>\r\n> 3.8.10\r\n> Jupyter version\r\n>\r\n> *No response*\r\n> Installation\r\n>\r\n> pip\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27301>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AACHF6FMWP2UDJGCCPC3SILYDVEJRAVCNFSM6AAAAAA7FHKK6KVHI2DSMVQWIX3LMV43ASLTON2WKOZRHE4DMNBUGA4DGOA>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nThere's an additional thing here.\r\n\r\nMoving the mouse pointer over the image:\r\n1. In the 1- and 3-channel case, the area where the `nan` is shows `[]`\r\n2. in the 4-channel case, it shows `[0]`\n> colormaps aren't used for 3 or 4 channel imshow()'s, so the \"bad\" is never applicable there. With the 4 channel one, having an alpha of zero just reveals the color underneath.\r\n\r\nOK fine, colormaps are ignored for 3- and 4-channel images. I guess I'm arguing that masking out `nan` should still happen. It actually is, and then getting thrown out / ignored somewhere down the line.\nFor float RGB(A) images I am not sure what I would expect `np.nan` to do.  Empirically, it looks like it is getting converted to `0` by Agg (as `ScalarMappable.to_rgba` appears to pass it through just fine and does not trigger any of the warnings as the `np.nan` poisons the min/max computations and reports false for all comparisons).\r\n\r\nMy inclination is that the second two cases should be raising on invalid input (as they would if you passed `2` for one of the channels.\nand the reason the second RGB(A) case looks like it works is that the alpha channel is 0 so it does not matter what the RGB channels do.\n@tacaswell, if I understand correctly, you're now going to raise an exception if an RGB image has `nan`s in it?\r\n\r\nThis seems quite harsh, since single-channel images are allowed to have `nan`s and even have a mechanism to control their display with `set_bad`.\r\n\r\nMy RGBA example is a workaround; in our application, I went that route because I want 1- and 3- channel images to behave the same with regards to `nan`.\nI think I would expect points with nans to be treated the same as masked points.  We have explicit handling that sets the alpha to zero if any of the channels are masked at the given point:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/c0e9ebc10d28daa337fba4884fd52caddc4b732c/lib/matplotlib/cm.py#L501-L504", "created_at": "2024-03-03T15:47:47Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27840, "instance_id": "matplotlib__matplotlib-27840", "issue_numbers": ["27792", "0000"], "base_commit": "5300bd67702e4fb8196cdf032bfcb47aa57e6ec1", "patch": "diff --git a/doc/users/next_whats_new/boxplot_legend_support.rst b/doc/users/next_whats_new/boxplot_legend_support.rst\nnew file mode 100644\nindex 000000000000..44802960d9bb\n--- /dev/null\n+++ b/doc/users/next_whats_new/boxplot_legend_support.rst\n@@ -0,0 +1,60 @@\n+Legend support for Boxplot\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Boxplots now support a *label* parameter to create legend entries.\n+\n+Legend labels can be passed as a list of strings to label multiple boxes in a single\n+`.Axes.boxplot` call:\n+\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Example of creating 3 boxplots and assigning legend labels as a sequence.\n+\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    np.random.seed(19680801)\n+    fruit_weights = [\n+        np.random.normal(130, 10, size=100),\n+        np.random.normal(125, 20, size=100),\n+        np.random.normal(120, 30, size=100),\n+    ]\n+    labels = ['peaches', 'oranges', 'tomatoes']\n+    colors = ['peachpuff', 'orange', 'tomato']\n+\n+    fig, ax = plt.subplots()\n+    ax.set_ylabel('fruit weight (g)')\n+\n+    bplot = ax.boxplot(fruit_weights,\n+                       patch_artist=True,  # fill with color\n+                       label=labels)\n+\n+    # fill with colors\n+    for patch, color in zip(bplot['boxes'], colors):\n+        patch.set_facecolor(color)\n+\n+    ax.set_xticks([])\n+    ax.legend()\n+\n+\n+Or as a single string to each individual `.Axes.boxplot`:\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Example of creating 2 boxplots and assigning each legend label as a string.\n+\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    fig, ax = plt.subplots()\n+\n+    data_A = np.random.random((100, 3))\n+    data_B = np.random.random((100, 3)) + 0.2\n+    pos = np.arange(3)\n+\n+    ax.boxplot(data_A, positions=pos - 0.2, patch_artist=True, label='Box A',\n+               boxprops={'facecolor': 'steelblue'})\n+    ax.boxplot(data_B, positions=pos + 0.2, patch_artist=True, label='Box B',\n+               boxprops={'facecolor': 'lightblue'})\n+\n+    ax.legend()\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 627dd2c36d40..44d82184c3c8 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -3798,7 +3798,7 @@ def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n                 tick_labels=None, flierprops=None, medianprops=None,\n                 meanprops=None, capprops=None, whiskerprops=None,\n                 manage_ticks=True, autorange=False, zorder=None,\n-                capwidths=None):\n+                capwidths=None, label=None):\n         \"\"\"\n         Draw a box and whisker plot.\n \n@@ -3985,6 +3985,20 @@ def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n             The style of the median.\n         meanprops : dict, default: None\n             The style of the mean.\n+        label : str or list of str, optional\n+            Legend labels. Use a single string when all boxes have the same style and\n+            you only want a single legend entry for them. Use a list of strings to\n+            label all boxes individually. To be distinguishable, the boxes should be\n+            styled individually, which is currently only possible by modifying the\n+            returned artists, see e.g. :doc:`/gallery/statistics/boxplot_demo`.\n+\n+            In the case of a single string, the legend entry will technically be\n+            associated with the first box only. By default, the legend will show the\n+            median line (``result[\"medians\"]``); if *patch_artist* is True, the legend\n+            will show the box `.Patch` artists (``result[\"boxes\"]``) instead.\n+\n+            .. versionadded:: 3.9\n+\n         data : indexable object, optional\n             DATA_PARAMETER_PLACEHOLDER\n \n@@ -4105,7 +4119,7 @@ def boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n                            meanline=meanline, showfliers=showfliers,\n                            capprops=capprops, whiskerprops=whiskerprops,\n                            manage_ticks=manage_ticks, zorder=zorder,\n-                           capwidths=capwidths)\n+                           capwidths=capwidths, label=label)\n         return artists\n \n     def bxp(self, bxpstats, positions=None, widths=None, vert=True,\n@@ -4114,7 +4128,7 @@ def bxp(self, bxpstats, positions=None, widths=None, vert=True,\n             boxprops=None, whiskerprops=None, flierprops=None,\n             medianprops=None, capprops=None, meanprops=None,\n             meanline=False, manage_ticks=True, zorder=None,\n-            capwidths=None):\n+            capwidths=None, label=None):\n         \"\"\"\n         Draw a box and whisker plot from pre-computed statistics.\n \n@@ -4197,6 +4211,20 @@ def bxp(self, bxpstats, positions=None, widths=None, vert=True,\n           If True, the tick locations and labels will be adjusted to match the\n           boxplot positions.\n \n+        label : str or list of str, optional\n+            Legend labels. Use a single string when all boxes have the same style and\n+            you only want a single legend entry for them. Use a list of strings to\n+            label all boxes individually. To be distinguishable, the boxes should be\n+            styled individually, which is currently only possible by modifying the\n+            returned artists, see e.g. :doc:`/gallery/statistics/boxplot_demo`.\n+\n+            In the case of a single string, the legend entry will technically be\n+            associated with the first box only. By default, the legend will show the\n+            median line (``result[\"medians\"]``); if *patch_artist* is True, the legend\n+            will show the box `.Patch` artists (``result[\"boxes\"]``) instead.\n+\n+            .. versionadded:: 3.9\n+\n         zorder : float, default: ``Line2D.zorder = 2``\n           The zorder of the resulting boxplot.\n \n@@ -4361,6 +4389,7 @@ def do_patch(xs, ys, **kwargs):\n             if showbox:\n                 do_box = do_patch if patch_artist else do_plot\n                 boxes.append(do_box(box_x, box_y, **box_kw))\n+                median_kw.setdefault('label', '_nolegend_')\n             # draw the whiskers\n             whisker_kw.setdefault('label', '_nolegend_')\n             whiskers.append(do_plot(whis_x, whislo_y, **whisker_kw))\n@@ -4371,7 +4400,6 @@ def do_patch(xs, ys, **kwargs):\n                 caps.append(do_plot(cap_x, cap_lo, **cap_kw))\n                 caps.append(do_plot(cap_x, cap_hi, **cap_kw))\n             # draw the medians\n-            median_kw.setdefault('label', '_nolegend_')\n             medians.append(do_plot(med_x, med_y, **median_kw))\n             # maybe draw the means\n             if showmeans:\n@@ -4389,6 +4417,18 @@ def do_patch(xs, ys, **kwargs):\n                 flier_y = stats['fliers']\n                 fliers.append(do_plot(flier_x, flier_y, **flier_kw))\n \n+        # Set legend labels\n+        if label:\n+            box_or_med = boxes if showbox and patch_artist else medians\n+            if cbook.is_scalar_or_string(label):\n+                # assign the label only to the first box\n+                box_or_med[0].set_label(label)\n+            else:  # label is a sequence\n+                if len(box_or_med) != len(label):\n+                    raise ValueError(datashape_message.format(\"label\"))\n+                for artist, lbl in zip(box_or_med, label):\n+                    artist.set_label(lbl)\n+\n         if manage_ticks:\n             axis_name = \"x\" if vert else \"y\"\n             interval = getattr(self.dataLim, f\"interval{axis_name}\")\ndiff --git a/lib/matplotlib/axes/_axes.pyi b/lib/matplotlib/axes/_axes.pyi\nindex 18c10c1452ba..b70d330aa442 100644\n--- a/lib/matplotlib/axes/_axes.pyi\n+++ b/lib/matplotlib/axes/_axes.pyi\n@@ -372,6 +372,7 @@ class Axes(_AxesBase):\n         autorange: bool = ...,\n         zorder: float | None = ...,\n         capwidths: float | ArrayLike | None = ...,\n+        label: Sequence[str] | None = ...,\n         *,\n         data=...,\n     ) -> dict[str, Any]: ...\n@@ -397,6 +398,7 @@ class Axes(_AxesBase):\n         manage_ticks: bool = ...,\n         zorder: float | None = ...,\n         capwidths: float | ArrayLike | None = ...,\n+        label: Sequence[str] | None = ...,\n     ) -> dict[str, Any]: ...\n     def scatter(\n         self,\ndiff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 04d889ec0616..81a6622db77e 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -2871,6 +2871,7 @@ def boxplot(\n     autorange: bool = False,\n     zorder: float | None = None,\n     capwidths: float | ArrayLike | None = None,\n+    label: Sequence[str] | None = None,\n     *,\n     data=None,\n ) -> dict[str, Any]:\n@@ -2902,6 +2903,7 @@ def boxplot(\n         autorange=autorange,\n         zorder=zorder,\n         capwidths=capwidths,\n+        label=label,\n         **({\"data\": data} if data is not None else {}),\n     )\n \n", "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex 3b3145006427..9b7a6dfd10c9 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -1435,3 +1435,35 @@ def test_legend_text():\n         leg_bboxes.append(\n             leg.get_window_extent().transformed(ax.transAxes.inverted()))\n     assert_allclose(leg_bboxes[1].bounds, leg_bboxes[0].bounds)\n+\n+\n+def test_boxplot_legend_labels():\n+    # Test that legend entries are generated when passing `label`.\n+    np.random.seed(19680801)\n+    data = np.random.random((10, 4))\n+    fig, axs = plt.subplots(nrows=1, ncols=4)\n+    legend_labels = ['box A', 'box B', 'box C', 'box D']\n+\n+    # Testing legend labels and patch passed to legend.\n+    bp1 = axs[0].boxplot(data, patch_artist=True, label=legend_labels)\n+    assert [v.get_label() for v in bp1['boxes']] == legend_labels\n+    handles, labels = axs[0].get_legend_handles_labels()\n+    assert labels == legend_labels\n+    assert all(isinstance(h, mpl.patches.PathPatch) for h in handles)\n+\n+    # Testing legend without `box`.\n+    bp2 = axs[1].boxplot(data, label=legend_labels, showbox=False)\n+    # Without a box, The legend entries should be passed from the medians.\n+    assert [v.get_label() for v in bp2['medians']] == legend_labels\n+    handles, labels = axs[1].get_legend_handles_labels()\n+    assert labels == legend_labels\n+    assert all(isinstance(h, mpl.lines.Line2D) for h in handles)\n+\n+    # Testing legend with number of labels different from number of boxes.\n+    with pytest.raises(ValueError, match='values must have same the length'):\n+        bp3 = axs[2].boxplot(data, label=legend_labels[:-1])\n+\n+    # Test that for a string label, only the first box gets a label.\n+    bp4 = axs[3].boxplot(data, label='box A')\n+    assert bp4['medians'][0].get_label() == 'box A'\n+    assert all(x.get_label().startswith(\"_\") for x in bp4['medians'][1:])\n", "problem_statement": "[ENH]: Legend entries for boxplot\n### Problem\r\n\r\nCurrently, boxplots do not get legend entries. #27711 was an attempt to introduce them but only solved one very particular usecase and did not generalize well. See https://github.com/matplotlib/matplotlib/pull/27780.\r\n\r\nThere is a `labels` parameter, but that only sets x-tick labels. And it has one entry per box. For the legend we should have only one entry per `boxplot()` call no matter how many boxes that has, because `boxplot` draws N identically styled boxes and it does not make sense to have N identical handles with different labels.\r\n\r\nBecause of the x-tick relation of  `labels` and it's relation to individual boxes, this parameter is not suited for the legend labels. \r\n\r\n### Proposed solution\r\n\r\nWe need a separate parameter. There are basically two options:\r\n\r\n#### Variant 1) `legend_label: str`\r\n\r\n*pro*: simple and clear, no interference with the existing API\r\n*con*: inconsistent with the rest of the library: all other functions use `label` for the legend entry.\r\n\r\n\r\n#### Variant 2) `label: str`\r\n*pro*: consistent with the rest of the library\r\n*con*: Having `label` alongside `labels` is quite confusing and easily leads to errors. (We could runtime-check for the type str vs list of str, to give helpful error messages but still ...)\r\nIf we want to go this way, we should rename `labels` to `tick_labels` or similar.\r\n\n", "hints_text": "Side note: We may later allow a list of labels if we want to ease labeling when styling individually, e.g. (currently not working code):\r\n\r\n```\r\nbplot = ax.boxplot(fruit_weights, patch_artist=True, legend_labels=labels)\r\nfor patch, color in zip(bplot['boxes'], colors):\r\n    patch.set_facecolor(color)\r\n```\r\n![grafik](https://github.com/matplotlib/matplotlib/assets/2836374/905f4713-15d5-4128-8d98-cdd2bf660b33)\r\n\nI'm unconvinced we would need to support passing multiple legend labels.  If you are already looping through your artists to set the colours, you can set the labels at the same time.  This works with v3.8.2:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nnp.random.seed(19680801)\r\nfruit_weights = [\r\n    np.random.normal(130, 10, size=100),\r\n    np.random.normal(125, 20, size=100),\r\n    np.random.normal(120, 30, size=100),\r\n]\r\nlabels = ['peaches', 'oranges', 'tomatoes']\r\ncolors = ['peachpuff', 'orange', 'tomato']\r\n\r\nfig, ax = plt.subplots()\r\nax.set_ylabel('fruit weight (g)')\r\n\r\nbplot = ax.boxplot(fruit_weights,\r\n                   patch_artist=True)  # fill with color\r\n\r\n# fill with colors and add legend labels\r\nfor patch, color, label in zip(bplot['boxes'], colors, labels):\r\n    patch.set_facecolor(color)\r\n    patch.set_label(label)\r\n    \r\nax.legend()\r\nax.get_xaxis().set_visible(False)\r\n\r\nplt.show()\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/3795eee8-e663-4e41-bf82-38ed1845240c)\r\n\r\n\n> I'm unconvinced we would need to support passing multiple legend labels. \r\n\r\nTrue. OTOH it doesn't cost us much. And it leaves the theoretical option open to add per-box coloring later (note that we've recently done this for `bar` (see https://matplotlib.org/stable/gallery/lines_bars_and_markers/bar_colors.html). Not that I have any concrete plans to do this, but it's not unreasonable.\r\n\r\nWhat I actually wanted to say with this is that extensions in that directions are possible in a consistent way.\n> Because of the x-tick relation of labels and it's relation to individual boxes, this parameter is not suited for the legend labels.\r\n> If we want to go this way, we should rename labels to tick_labels or similar.\r\n\r\nHow bad would it be to do a shuffle `labels->tick_labels` then `labels` gets used for legend like everywhere else? \r\n\nNote: There`s currently `labels` (plural). If anything the new one would be `label` (singular). So strictly there's no overlap.\r\n\r\nBut\r\n\r\n- if you don't rename `labels`, as said above having `labels` and `label` would be really confusing.\r\n- if you rename `labels`, I assume that will break about every boxplot. As soon as you have two boxes `labels` is by far the most simple solution to identify them.\r\n\n>  If anything the new one would belabel` (singular).\r\n\r\nYeah, sorry missed that `label` is what gets used everywhere for legend. Then variant 2 + rename makes sense- I assume the rename will go through a deprecation process to not break everything?\r\n\nDisregarding the existing API and how we would migrate, would `label` +  `tick_labels` be good?\r\n\r\n- yes in terms of API consistency\r\n- meh in terms of `label` is generic `tick_labels` is specific. - As long as you only have one label (like in `plot`), generic is ok. The alternative here would be to have two specific names `legend_label` + `tick_labels`.\nCould we introduce `tick_labels` and `legend_label` and have a longer-than-usual deprecation period for `labels`?\nI lean towards `label`>`legend_label` b/c  API consistency >> name specificity. \n Note to self/ to whoever is interested (I haven't made up my mind on this yet):\r\n\r\nShould `positions` also support str labels - in other functions we allow str as inputs on coordinate labels (e.g. x in `bar()`).\r\nAnd if so, should we then remove the current `labels`. - While a little less capable (one can currently use `labels` alongside positions to create str labeled boxes at arbitrary positions), the main use case for simple labeling would be covered.\n`bar(h)` also uses the `tick_label` and `label` semantics so this would be consistent with that. \r\n\r\n> How bad would it be to do a shuffle `labels->tick_labels` then `labels` gets used for legend like everywhere else?\r\n\r\nI have a solution almost ready for this using variant 2 where the labels are set this way:\r\n\r\n```py\r\nlabels = ['peaches', 'oranges', 'tomatoes']\r\nticklabels = ['a', 'b', 'c']\r\n\r\nbplot = ax.boxplot(fruit_weights,\r\n                   tick_labels=ticklabels, \r\n                   label=labels) # legend labels\r\nax.legend()\r\n```\r\nI can send in a PR as it is, unless you want to discuss this more (I don't want to create a bias for this variant.)\n> `bar(h)` also uses the `tick_label` and `label` semantics so this would be consistent with that.\r\n\r\nThis is a very good point. Let's go with that.\r\n\r\n\r\n> I have a solution almost ready for this using variant 2 where the labels are set this way:\r\n> \r\n> ```python\r\n> labels = ['peaches', 'oranges', 'tomatoes']\r\n> ticklabels = ['a', 'b', 'c']\r\n> \r\n> bplot = ax.boxplot(fruit_weights,\r\n>                    tick_labels=ticklabels, \r\n>                    label=labels) # legend labels\r\n> ax.legend()\r\n> ```\r\n> \r\n> I can send in a PR as it is, unless you want to discuss this more (I don't want to create a bias for this variant.)\r\n\r\nGo for it! Please note that `label` should accept str and list of str, as with `bar()`.", "created_at": "2024-03-01T06:26:23Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27833, "instance_id": "matplotlib__matplotlib-27833", "issue_numbers": ["27831", "0000"], "base_commit": "c0071b825b5b1d97b9216acd7b67b47004375ef2", "patch": "diff --git a/doc/api/next_api_changes/behavior/27833-JA.rst b/doc/api/next_api_changes/behavior/27833-JA.rst\nnew file mode 100644\nindex 000000000000..59323f56108f\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/27833-JA.rst\n@@ -0,0 +1,8 @@\n+SVG output: improved reproducibility\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Some SVG-format plots `produced different output on each render <https://github.com/matplotlib/matplotlib/issues/27831>`__, even with a static ``svg.hashsalt`` value configured.\n+\n+The problem was a non-deterministic ID-generation scheme for clip paths; the fix introduces a repeatable, monotonically increasing integer ID scheme as a replacement.\n+\n+Provided that plots add clip paths themselves in deterministic order, this enables repeatable (a.k.a. reproducible, deterministic) SVG output.\ndiff --git a/lib/matplotlib/backends/backend_svg.py b/lib/matplotlib/backends/backend_svg.py\nindex 72354b81862b..51eee57a6a84 100644\n--- a/lib/matplotlib/backends/backend_svg.py\n+++ b/lib/matplotlib/backends/backend_svg.py\n@@ -302,6 +302,7 @@ def __init__(self, width, height, svgwriter, basename=None, image_dpi=72,\n \n         self._groupd = {}\n         self._image_counter = itertools.count()\n+        self._clip_path_ids = {}\n         self._clipd = {}\n         self._markers = {}\n         self._path_collection_id = 0\n@@ -325,6 +326,20 @@ def __init__(self, width, height, svgwriter, basename=None, image_dpi=72,\n         self._write_metadata(metadata)\n         self._write_default_style()\n \n+    def _get_clippath_id(self, clippath):\n+        \"\"\"\n+        Returns a stable and unique identifier for the *clippath* argument\n+        object within the current rendering context.\n+\n+        This allows plots that include custom clip paths to produce identical\n+        SVG output on each render, provided that the :rc:`svg.hashsalt` config\n+        setting and the ``SOURCE_DATE_EPOCH`` build-time environment variable\n+        are set to fixed values.\n+        \"\"\"\n+        if clippath not in self._clip_path_ids:\n+            self._clip_path_ids[clippath] = len(self._clip_path_ids)\n+        return self._clip_path_ids[clippath]\n+\n     def finalize(self):\n         self._write_clips()\n         self._write_hatches()\n@@ -590,7 +605,7 @@ def _get_clip_attrs(self, gc):\n         clippath, clippath_trans = gc.get_clip_path()\n         if clippath is not None:\n             clippath_trans = self._make_flip_transform(clippath_trans)\n-            dictkey = (id(clippath), str(clippath_trans))\n+            dictkey = (self._get_clippath_id(clippath), str(clippath_trans))\n         elif cliprect is not None:\n             x, y, w, h = cliprect.bounds\n             y = self.height-(y+h)\n@@ -605,7 +620,7 @@ def _get_clip_attrs(self, gc):\n             else:\n                 self._clipd[dictkey] = (dictkey, oid)\n         else:\n-            clip, oid = clip\n+            _, oid = clip\n         return {'clip-path': f'url(#{oid})'}\n \n     def _write_clips(self):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 01edbf870fb4..b694bb297912 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -10,6 +10,7 @@\n \n import matplotlib as mpl\n from matplotlib.figure import Figure\n+from matplotlib.patches import Circle\n from matplotlib.text import Text\n import matplotlib.pyplot as plt\n from matplotlib.testing.decorators import check_figures_equal, image_comparison\n@@ -299,6 +300,33 @@ def include(gid, obj):\n             assert gid in buf\n \n \n+def test_clip_path_ids_reuse():\n+    fig, circle = Figure(), Circle((0, 0), radius=10)\n+    for i in range(5):\n+        ax = fig.add_subplot()\n+        aimg = ax.imshow([[i]])\n+        aimg.set_clip_path(circle)\n+\n+    inner_circle = Circle((0, 0), radius=1)\n+    ax = fig.add_subplot()\n+    aimg = ax.imshow([[0]])\n+    aimg.set_clip_path(inner_circle)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue()\n+\n+    tree = xml.etree.ElementTree.fromstring(buf)\n+    ns = 'http://www.w3.org/2000/svg'\n+\n+    clip_path_ids = set()\n+    for node in tree.findall(f'.//{{{ns}}}clipPath[@id]'):\n+        node_id = node.attrib['id']\n+        assert node_id not in clip_path_ids  # assert ID uniqueness\n+        clip_path_ids.add(node_id)\n+    assert len(clip_path_ids) == 2  # only two clipPaths despite reuse in multiple axes\n+\n+\n def test_savefig_tight():\n     # Check that the draw-disabled renderer correctly disables open/close_group\n     # as well.\ndiff --git a/lib/matplotlib/tests/test_determinism.py b/lib/matplotlib/tests/test_determinism.py\nindex 3865dbc7fa43..2ecc40dbd3c0 100644\n--- a/lib/matplotlib/tests/test_determinism.py\n+++ b/lib/matplotlib/tests/test_determinism.py\n@@ -8,13 +8,21 @@\n import pytest\n \n import matplotlib as mpl\n-import matplotlib.testing.compare\n from matplotlib import pyplot as plt\n-from matplotlib.testing._markers import needs_ghostscript, needs_usetex\n+from matplotlib.cbook import get_sample_data\n+from matplotlib.collections import PathCollection\n+from matplotlib.image import BboxImage\n+from matplotlib.offsetbox import AnchoredOffsetbox, AuxTransformBox\n+from matplotlib.patches import Circle, PathPatch\n+from matplotlib.path import Path\n from matplotlib.testing import subprocess_run_for_testing\n+from matplotlib.testing._markers import needs_ghostscript, needs_usetex\n+import matplotlib.testing.compare\n+from matplotlib.text import TextPath\n+from matplotlib.transforms import IdentityTransform\n \n \n-def _save_figure(objects='mhi', fmt=\"pdf\", usetex=False):\n+def _save_figure(objects='mhip', fmt=\"pdf\", usetex=False):\n     mpl.use(fmt)\n     mpl.rcParams.update({'svg.hashsalt': 'asdf', 'text.usetex': usetex})\n \n@@ -50,6 +58,76 @@ def _save_figure(objects='mhi', fmt=\"pdf\", usetex=False):\n         A = [[2, 3, 1], [1, 2, 3], [2, 1, 3]]\n         fig.add_subplot(1, 6, 5).imshow(A, interpolation='bicubic')\n \n+    if 'p' in objects:\n+\n+        # clipping support class, copied from demo_text_path.py gallery example\n+        class PathClippedImagePatch(PathPatch):\n+            \"\"\"\n+            The given image is used to draw the face of the patch. Internally,\n+            it uses BboxImage whose clippath set to the path of the patch.\n+\n+            FIXME : The result is currently dpi dependent.\n+            \"\"\"\n+\n+            def __init__(self, path, bbox_image, **kwargs):\n+                super().__init__(path, **kwargs)\n+                self.bbox_image = BboxImage(\n+                    self.get_window_extent, norm=None, origin=None)\n+                self.bbox_image.set_data(bbox_image)\n+\n+            def set_facecolor(self, color):\n+                \"\"\"Simply ignore facecolor.\"\"\"\n+                super().set_facecolor(\"none\")\n+\n+            def draw(self, renderer=None):\n+                # the clip path must be updated every draw. any solution? -JJ\n+                self.bbox_image.set_clip_path(self._path, self.get_transform())\n+                self.bbox_image.draw(renderer)\n+                super().draw(renderer)\n+\n+        # add a polar projection\n+        px = fig.add_subplot(projection=\"polar\")\n+        pimg = px.imshow([[2]])\n+        pimg.set_clip_path(Circle((0, 1), radius=0.3333))\n+\n+        # add a text-based clipping path (origin: demo_text_path.py)\n+        (ax1, ax2) = fig.subplots(2)\n+        arr = plt.imread(get_sample_data(\"grace_hopper.jpg\"))\n+        text_path = TextPath((0, 0), \"!?\", size=150)\n+        p = PathClippedImagePatch(text_path, arr, ec=\"k\")\n+        offsetbox = AuxTransformBox(IdentityTransform())\n+        offsetbox.add_artist(p)\n+        ao = AnchoredOffsetbox(loc='upper left', child=offsetbox, frameon=True,\n+                               borderpad=0.2)\n+        ax1.add_artist(ao)\n+\n+        # add a 2x2 grid of path-clipped axes (origin: test_artist.py)\n+        exterior = Path.unit_rectangle().deepcopy()\n+        exterior.vertices *= 4\n+        exterior.vertices -= 2\n+        interior = Path.unit_circle().deepcopy()\n+        interior.vertices = interior.vertices[::-1]\n+        clip_path = Path.make_compound_path(exterior, interior)\n+\n+        star = Path.unit_regular_star(6).deepcopy()\n+        star.vertices *= 2.6\n+\n+        (row1, row2) = fig.subplots(2, 2, sharex=True, sharey=True)\n+        for row in (row1, row2):\n+            ax1, ax2 = row\n+            collection = PathCollection([star], lw=5, edgecolor='blue',\n+                                        facecolor='red', alpha=0.7, hatch='*')\n+            collection.set_clip_path(clip_path, ax1.transData)\n+            ax1.add_collection(collection)\n+\n+            patch = PathPatch(star, lw=5, edgecolor='blue', facecolor='red',\n+                              alpha=0.7, hatch='*')\n+            patch.set_clip_path(clip_path, ax2.transData)\n+            ax2.add_patch(patch)\n+\n+            ax1.set_xlim([-3, 3])\n+            ax1.set_ylim([-3, 3])\n+\n     x = range(5)\n     ax = fig.add_subplot(1, 6, 6)\n     ax.plot(x, x)\n@@ -67,12 +145,13 @@ def _save_figure(objects='mhi', fmt=\"pdf\", usetex=False):\n         (\"m\", \"pdf\", False),\n         (\"h\", \"pdf\", False),\n         (\"i\", \"pdf\", False),\n-        (\"mhi\", \"pdf\", False),\n-        (\"mhi\", \"ps\", False),\n+        (\"mhip\", \"pdf\", False),\n+        (\"mhip\", \"ps\", False),\n         pytest.param(\n-            \"mhi\", \"ps\", True, marks=[needs_usetex, needs_ghostscript]),\n-        (\"mhi\", \"svg\", False),\n-        pytest.param(\"mhi\", \"svg\", True, marks=needs_usetex),\n+            \"mhip\", \"ps\", True, marks=[needs_usetex, needs_ghostscript]),\n+        (\"p\", \"svg\", False),\n+        (\"mhip\", \"svg\", False),\n+        pytest.param(\"mhip\", \"svg\", True, marks=needs_usetex),\n     ]\n )\n def test_determinism_check(objects, fmt, usetex):\n@@ -84,7 +163,7 @@ def test_determinism_check(objects, fmt, usetex):\n     ----------\n     objects : str\n         Objects to be included in the test document: 'm' for markers, 'h' for\n-        hatch patterns, 'i' for images.\n+        hatch patterns, 'i' for images, and 'p' for paths.\n     fmt : {\"pdf\", \"ps\", \"svg\"}\n         Output format.\n     \"\"\"\n", "problem_statement": "[Bug]: Nondeterminism in SVG clipPath element id attributes\n### Bug summary\r\n\r\nHello - I'm trying to make the [`astroplan`](https://github.com/astropy/astroplan) documentation build [reproducibly](https://reproducible-builds.org/) in Debian, and have found a snag: despite configuring the [`svg.hashsalt`](https://matplotlib.org/stable/users/explain/customizing.html?highlight=svg.hashsalt#matplotlibrc-sample) to successfully make `path` identifiers in some SVG plots generated by `matplotlib` deterministic, there is a remaining problem that `clipPath` identifiers are nondeterministic.\r\n\r\nThe cause appears to be the use of Python object ID (via [`id(...)` calls here](https://github.com/matplotlib/matplotlib/blob/c23ccdde6f0f8c071b09a88770e24452f2859e99/lib/matplotlib/backends/backend_svg.py#L622)) when [generating `clippath` IDs](https://github.com/matplotlib/matplotlib/blob/c23ccdde6f0f8c071b09a88770e24452f2859e99/lib/matplotlib/backends/backend_svg.py#L631).\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\nimport sys\r\n\r\nmpl.rcParams[\"svg.hashsalt\"] = \"fixed-salt\"\r\n\r\nfig = plt.gcf()\r\nfig.add_subplot(projection=\"polar\")\r\n\r\nplt.savefig(sys.stdout.buffer, format=\"svg\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nDifferences appear in the `clipPath` identifiers and their references from elsewhere in the SVG output.\r\n\r\n### Expected outcome\r\n\r\nWhen an `svg.hashsalt` value is configured, the SVG output should be deterministic.\r\n\r\n### Additional information\r\n\r\nThis could arguably be an enhancement request rather than a bug.\r\n\r\nConfiguring a static `PYTHONHASHSEED` value does not help to produce deterministic results.\r\n\r\n### Operating system\r\n\r\nDebian GNU/Linux (trixie)\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\nPython 3.11.8\r\n\r\n### Jupyter version\r\n\r\nN/A\r\n\r\n### Installation\r\n\r\nLinux package manager\n", "hints_text": "### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https://matplotlib.org/stable/devel/contributing.html#get-connected).", "created_at": "2024-02-28T23:25:16Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27806, "instance_id": "matplotlib__matplotlib-27806", "issue_numbers": ["27805", "0000"], "base_commit": "897dd0ae6a4f353f836dcda0651e24e502ac17c9", "patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1667681fab59..32c5bafcde1d 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1407,8 +1407,6 @@ def update_positions(self, renderer):\n \n     def draw(self, renderer):\n         # docstring inherited\n-        if renderer is not None:\n-            self._renderer = renderer\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n         renderer.open_group(self.__class__.__name__, gid=self.get_gid())\ndiff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex 7d6689c9a808..78af2f98b3bf 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -4696,8 +4696,6 @@ def _check_xy(self, renderer):\n         return True\n \n     def draw(self, renderer):\n-        if renderer is not None:\n-            self._renderer = renderer\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n         super().draw(renderer)\n", "test_patch": "", "problem_statement": "[Bug]: Saving a figure with indicate_inset_zoom to pdf and then pickling it causes TypeError\n### Bug summary\n\nIf a fig with an ax using the indicate_inset_zoom is saved to pdf and then pickled, one gets the following error:\r\n> TypeError: cannot pickle '_io.BufferedWriter' object\n\n### Code for reproduction\n\n```python\nimport pickle\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\ndef plot(inset_zoom: bool, format: str):\r\n    fig, ax = plt.subplots()\r\n    ax.plot(\r\n        [1, 1],\r\n        [2, 2],\r\n    )\r\n\r\n    if inset_zoom:\r\n        ax.indicate_inset_zoom(ax)\r\n\r\n    if format is not None:\r\n        fig.savefig(f\"./test1.{format}\", format=f\"{format}\")\r\n\r\n    pickle.dumps(fig)\r\n\r\n\r\nfor format in (None, \"png\", \"pdf\"):\r\n    for inset_zoom in (False, True):\r\n        print(f\"format: {format} inset_zoom {inset_zoom}\")\r\n        plot(inset_zoom, format)\r\n        print(\"ok\")\n```\n\n\n### Actual outcome\n\n```\r\n(venv) C:\\Users\\Moi4\\Desktop\\code\\test\\pickle_buffwr_err>python error_with_mpl_pickle.py\r\nformat: None inset_zoom False\r\nok\r\nformat: None inset_zoom True\r\nok\r\nformat: png inset_zoom False\r\nok\r\nformat: png inset_zoom True\r\nok\r\nformat: pdf inset_zoom False\r\nok\r\nformat: pdf inset_zoom True\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Moi4\\Desktop\\code\\test\\pickle_buffwr_err\\error_with_mpl_pickle.py\", line 24, in <module>\r\n    plot(inset_zoom, format)\r\n  File \"C:\\Users\\Moi4\\Desktop\\code\\test\\pickle_buffwr_err\\error_with_mpl_pickle.py\", line 18, in plot\r\n    pickle.dumps(fig)\r\nTypeError: cannot pickle '_io.BufferedWriter' object\r\n```\n\n### Expected outcome\n\nThe expected outcome would be no TypeError\n\n### Additional information\n\nSaving to pickle before saving the figure is a workaround.\n\n### Operating system\n\nWindows 10\n\n### Matplotlib Version\n\n3.7.1 and 3.8.3\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\n3.10.11\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "The culprit here appears to be these two lines in `ConnectionPatch`:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/897dd0ae6a4f353f836dcda0651e24e502ac17c9/lib/matplotlib/patches.py#L4699-L4700\r\n\r\nNamely, that the ConnectionPatch object (which is used to draw the zoom lines in `inset_zoom`) holds a reference to to the renderer on draw.\r\n\r\nThis combined with the fact that the PDF backend holds a reference to a BytesIO object (as well as I believe at least one other unpicklable generator object... didn't trace exactly where that came from, but was able to poke it to give me a different error) means that upon drawing with the PDF backend the ConnectionPatch becomes unpicklable.\r\n\r\nAs far as I can tell, there is no reason to hold a reference here, it is never accessed. It has existed in this class since the beginning (August of 2009).\r\n\r\nThere are a handful of other places we store a renderer to an instance attribute, as a roundup:\r\n\r\n- `offsetbox.AnnotationBbox`: Added around the same time, similarly does not appear to be accessed\r\n- Various points within  backends themselves, unlikely to be problematic\r\n- patheffects.PathEffectRenderer: this is the whole point of the object, and is not on an artist, so likely fine.\r\n- `text.Text`/`text.Annotation`: Is handled as a special case in `__getstate__`/`__setstate__`, and thus explicitly picklable.\r\n  - I'm guessing that the other two copied `Text` as a template for writing the `draw` method, and that the attribute was never actually used for them and thus is likely safe to remove.", "created_at": "2024-02-20T21:17:53Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27799, "instance_id": "matplotlib__matplotlib-27799", "issue_numbers": ["27701"], "base_commit": "fd5f1640cc1f3b5676d3242e10bd069e18d75f6c", "patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex b4d2810b67b8..e76f9fdcf5aa 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2114,7 +2114,7 @@ def set_ticks(self, ticks, labels=None, *, minor=False, **kwargs):\n             If not set, the labels are generated using the axis tick `.Formatter`.\n \n         minor : bool, default: False\n-            If ``False``, set the major ticks; if ``True``, the minor ticks.\n+            If ``False``, set only the major ticks; if ``True``, only the minor ticks.\n \n         **kwargs\n             `.Text` properties for the labels. Using these is only allowed if\n", "test_patch": "", "problem_statement": "[Bug]: axis set_xscale('log') interferes with set_xticks\n### Bug summary\r\n\r\nSetting ax.set_xscale('log') introduces unwanted minor ticks, even when set_xticks specifies `minor=False`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nN = np.array([3, 5, 7, 9])\r\ns = np.ones_like(N)\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(1/N, s)\r\nax.set_xlabel('1/N')\r\nax.set_xscale('log')\r\nax.set_xticks(1./N, labels=[f'1/{each_n}' for each_n in N], minor=False)\r\n# ax.minorticks_off()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nA figure with a constant dataset, with xticks at 1/9, 1/7, 1/5, and 1/3, but ALSO at 3x10^-1, which is unwanted.\r\n![Screenshot 2024-01-25 at 13 12 11](https://github.com/matplotlib/matplotlib/assets/129339/074c9f97-c254-49a6-bec7-14e23c5c35d6)\r\n\r\nWhat is that extra tick doing there?\r\n\r\n### Expected outcome\r\n\r\nThe figure that results from uncommenting the minorticks_off command in the example, \r\n\r\n![Screenshot 2024-01-25 at 13 13 12](https://github.com/matplotlib/matplotlib/assets/129339/d4957d03-628d-4147-85d3-5fd21b42518c)\r\n\r\n\r\n### Additional information\r\n\r\nHappens with errorbar instead of plot.  Haven't tested other ways to draw.\r\n\r\nIn the above example if you put the `set_xscale` after the `set_xticks` then the requested xticks are completely ignored.\r\n\r\nIf you comment out the log scale, the ticks are as expected (but of course the scale isn't what is desired).\r\n\r\n### Operating system\r\n\r\nMacOS 14.2.1 (M2 from 2022)\r\n\r\n### Matplotlib Version\r\n\r\n3.5.2\r\n\r\n### Matplotlib Backend\r\n\r\nmodule://matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\nPython 3.11.7\r\n\r\n### Jupyter version\r\n\r\n4.0.5\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "In fact it's not x-axis related, the same issue happens with the y-axis.\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nN = np.array([3, 5, 7, 9])\r\ns = np.ones_like(N)\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(1/N, 1/N)\r\nax.set_xlabel('1/N')\r\nax.set_xscale('log')\r\nax.set_xticks(1./N, labels=[f'1/{each_n}' for each_n in N], minor=False)\r\n\r\nax.set_yscale('log')\r\nax.set_yticks(1./N, labels=[f'1/{each_n}' for each_n in N], minor=False)\r\n\r\n# ax.minorticks_off()\r\n```\r\n![Screenshot 2024-01-25 at 13 29 21](https://github.com/matplotlib/matplotlib/assets/129339/ff182253-3e73-497d-bcaa-649eb53578d0)\r\n\r\n\nIf you use `minorticks_off()` the minor ticks get disabled \r\n```py\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nN = np.array([3, 5, 7, 9])\r\ns = np.ones_like(N)\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(1/N, s)\r\nax.set_xlabel('1/N')\r\nax.set_xscale('log')\r\nax.set_xticks(1./N, labels=[f'1/{each_n}' for each_n in N], minor=False) # Default Value: minor = False \r\nax.minorticks_off()      # Using minorticks_off() \r\n```\r\n**But the question still arises regarding the meaning of `minor = False`**\r\n\r\nHere is the copy of [documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xticks.html#matplotlib.axes.Axes.set_xticks)\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/98941325/f2f7c098-73ab-4aa8-b724-e1353203f0d6)\r\n\r\nAnother thing I noticed, if you apply\r\n```diff\r\n- ax.set_xticks(1./N, labels=[f'1/{each_n}' for each_n in N], minor=False)\r\n+ ax.set_xticks(1./N, labels=[f'1/{each_n}' for each_n in N], minor=True)\r\n```\r\n**Then the minor ticks vanishes.**\nIndeed; that's why I included the (commented) call to minorticks_off in my example.\r\n\r\nI see.  Either way it's strange to me that overriding the default ticks leaves the minor ticks alone.\n`minor=False` means the `set_xticks` works on the major ticks only.  This seems to be working as expected? \nIf you remove the `minor=False` from the example you still get the unwanted minor ticks.\nlogscale uses a formatter that labels the minor ticks if there is one or fewer major ticks.   This is not super clear in the docs, but the alternative is a plot with no ticks if the user puts in a small dynamic range.  \nSee https://matplotlib.org/stable/api/ticker_api.html#matplotlib.ticker.LogFormatter, but I think that explanation could be considerably improved. \n \r\n\r\n> If you remove the `minor=False` from the example you still get the unwanted minor ticks.\r\n\r\nBecause `minor= False` is the default value.\n> logscale uses a formatter that labels the minor ticks if there is one or fewer major ticks. This is not super clear in the docs, but the alternative is a plot with no ticks if the user puts in a small dynamic range.\r\n\r\nWhat I'm getting at is that if the user explicitly overrides the major ticks, it seems pretty weird to leave the minor ticks alone.\n> > logscale uses a formatter that labels the minor ticks if there is one or fewer major ticks. This is not super clear in the docs, but the alternative is a plot with no ticks if the user puts in a small dynamic range.\r\n> \r\n> What I'm getting at is that if the user explicitly overrides the major ticks, it seems pretty weird to leave the minor ticks alone.\r\n\r\nWhat behaviour would you expect?  \nI would expect there to be no minor ticks at all, just as in the linear scale with set_{x,y}ticks.\n`ax.set_xticks(..., minor=False)` doesn't remove any minor ticks that may exist otherwise.  \r\n\r\n```\r\nax.set_xticks(np.arange(30), minor=True)\r\nax.set_xticks(np.arange(30, 10), minor=False)\r\n```\r\n\r\ndoesn't remove the minor ticks.\r\n\nJust forget that I used `minor=True` in my starting example.  Just like a linear scale would show no minor ticks if I did\r\n\r\n```\r\nax.set_yticks(1./N, labels=[f'1/{each_n}' for each_n in N])  # no minor kwarg at all\r\n```\r\n\r\nI would have expected the same for the log scale.\nLinear scales do not have minor ticks, by default.  Logarithmic scales _do_ have minor ticks, by default.  \n> Just like a linear scale would show no minor ticks if I did [...]\r\n> I would have expected the same for the log scale.\r\n\r\nThe reason you don't see minor ticks for the linear scale is that the default AutoLocator does not use minor ticks.\r\n\r\nThe issue here is that LogLocator may introduce minor ticks for good reason, as explained above. And that set_ticks exclusively addresses major or minor ticks respectively. __That's a bit odd, but I recommend to live with that oddity and manually deactivate minor ticks.__\r\n\r\nThere are only two alternative mitigation strategies, both of which are not feasible:\r\n\r\n- One could rewrite the tick mechanism to fundamentally handle major and minor ticks together. But that'd be a major effort and possibly also has backward compatibility problems (we can't just simply make `set_ticks(...)` remove minor ticks).\r\n- One could try to special case the present case. But that can get complex as well: Let set_ticks remove minor ticks if you use a LogLocator. But then there's the danger that somebody explicitly set the minor ticks before the major ticks and of course these should not be removed. So maybe one  would have  to track whether the minor ticks come from the LogLocator or were explicitly set. I strongly advise against going down this rabbit whole.\r\n\r\n I'm sorry there is no better answer, but these are the constraints of the, current design.\nWe should possibly explicitly state in [set_ticks](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.axis.Axis.set_ticks.html#matplotlib-axis-axis-set-ticks) that the respective other kind of ticks is not changed.\nOK, it seems like this is expected behavior, or at least wont-be-changed-behavior.  Then I would consider this issue resolved if the documentation of set_scale and set_ticks both explained what is going on.", "created_at": "2024-02-16T21:13:35Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27785, "instance_id": "matplotlib__matplotlib-27785", "issue_numbers": ["27437"], "base_commit": "1defb5798bcb0ed7c0869e86bd00ea98ae77e700", "patch": "diff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\nindex 78d15fe29b88..ba01622bd068 100644\n--- a/lib/matplotlib/backends/backend_pgf.py\n+++ b/lib/matplotlib/backends/backend_pgf.py\n@@ -257,7 +257,8 @@ def _setup_latex_process(self, *, expect_reply=True):\n         # Open LaTeX process for real work; register it for deletion.  On\n         # Windows, we must ensure that the subprocess has quit before being\n         # able to delete the tmpdir in which it runs; in order to do so, we\n-        # must first `kill()` it, and then `communicate()` with it.\n+        # must first `kill()` it, and then `communicate()` with or `wait()` on\n+        # it.\n         try:\n             self.latex = subprocess.Popen(\n                 [mpl.rcParams[\"pgf.texsystem\"], \"-halt-on-error\"],\n@@ -274,7 +275,10 @@ def _setup_latex_process(self, *, expect_reply=True):\n \n         def finalize_latex(latex):\n             latex.kill()\n-            latex.communicate()\n+            try:\n+                latex.communicate()\n+            except RuntimeError:\n+                latex.wait()\n \n         self._finalize_latex = weakref.finalize(\n             self, finalize_latex, self.latex)\n", "test_patch": "", "problem_statement": "[Bug]: PGF backend crashes at program exit after creating a plot\n### Bug summary\n\nAfter successfully creating a plot using the PGF backend, Python will crash on exit while running cleanup code.\n\n### Code for reproduction\n\n```python\nimport matplotlib\r\nmatplotlib.use(\"pgf\")\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots(1, 1)\r\nax.plot(list(range(100)), [x * 2 for x in range(100)])\r\nfig.savefig(\"test.pgf\", format=\"pgf\")\n```\n\n\n### Actual outcome\n\nTwo exceptions are produced at exit. The first is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\weakref.py\", line 666, in _exitfunc\r\n    f()\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\weakref.py\", line 590, in __call__\r\n    return info.func(*info.args, **(info.kwargs or {}))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Anon\\Desktop\\Projects\\mplbug\\venv\\Lib\\site-packages\\matplotlib\\backends\\backend_pgf.py\", line 277, in finalize_latex\r\n    latex.communicate()\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py\", line 1209, in communicate\r\n    stdout, stderr = self._communicate(input, endtime, timeout)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py\", line 1610, in _communicate\r\n    self.stdout_thread.start()\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\threading.py\", line 971, in start\r\n    _start_new_thread(self._bootstrap, ())\r\nRuntimeError: can't create new thread at interpreter shutdown\r\n```\r\n\r\nThe second, which will not be produced if time elapses between plot creation and program exit (read: a sleep(0.5) call), is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\shutil.py\", line 634, in _rmtree_unsafe\r\n    os.unlink(fullname)\r\nPermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\Anon\\\\AppData\\\\Local\\\\Temp\\\\tmp4qorphqa\\\\texput.aux'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\tempfile.py\", line 891, in onexc\r\n    _os.unlink(path)\r\nPermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\\\Users\\\\Anon\\\\AppData\\\\Local\\\\Temp\\\\tmp4qorphqa\\\\texput.aux'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\weakref.py\", line 666, in _exitfunc\r\n    f()\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\weakref.py\", line 590, in __call__\r\n    return info.func(*info.args, **(info.kwargs or {}))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\tempfile.py\", line 923, in cleanup\r\n    self._rmtree(self.name, ignore_errors=self._ignore_cleanup_errors)\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\tempfile.py\", line 903, in _rmtree\r\n    _shutil.rmtree(name, onexc=onexc)\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\shutil.py\", line 796, in rmtree\r\n    return _rmtree_unsafe(path, onexc)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\shutil.py\", line 636, in _rmtree_unsafe\r\n    onexc(os.unlink, fullname, err)\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\tempfile.py\", line 894, in onexc\r\n    cls._rmtree(path, ignore_errors=ignore_errors)\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\tempfile.py\", line 903, in _rmtree\r\n    _shutil.rmtree(name, onexc=onexc)\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\shutil.py\", line 796, in rmtree\r\n    return _rmtree_unsafe(path, onexc)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\shutil.py\", line 612, in _rmtree_unsafe\r\n    onexc(os.scandir, path, err)\r\n  File \"C:\\Users\\Anon\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\shutil.py\", line 609, in _rmtree_unsafe\r\n    with os.scandir(path) as scandir_it:\r\n         ^^^^^^^^^^^^^^^^\r\nNotADirectoryError: [WinError 267] The directory name is invalid: 'C:\\\\Users\\\\Anon\\\\AppData\\\\Local\\\\Temp\\\\tmp4qorphqa\\\\texput.aux'\r\n```\r\n\n\n### Expected outcome\n\nNo crashes.\n\n### Additional information\n\nWorkaround that prevents both exceptions is running `weakref.finalize._exitfunc()` before program exit.\r\nWorkaround that prevents the second exception only is letting time elapse before program exit (like with a `time.sleep(0.5)` call).\n\n### Operating system\n\nWindows 11 Enterprise 22H2\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\npgf\n\n### Python version\n\n3.12.0\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "This appears to be a consequence of https://github.com/python/cpython/commit/ce558e69d4087dd3653207de78345fbb8a2c7835 (disabling creation of new threads at shutdown) combined with the fact that on Windows, Popen._communicate is implemented by running proc.stdout.read() in a new thread with a timeout (POSIX uses selectors and thus doesn't have this problem).  I suppose the \"easy\" way to fix that (again, only for Windows) is to effectively inline Popen._communicate implementation for finalize_latex (dropping out the unneeded parts as we don't actually care about the outputs at that point, nor about the timeouts), but making sure to start the reader threads much earlier (in _setup_latex_process) and letting them just wait until signalled (e.g. via a threading.Event) by finalize_latex to start reading.\r\n\r\nEdit: perhaps\r\n```patch\r\ndiff --git i/lib/matplotlib/backends/backend_pgf.py w/lib/matplotlib/backends/backend_pgf.py\r\nindex 78d15fe29b..29f04f8577 100644\r\n--- i/lib/matplotlib/backends/backend_pgf.py\r\n+++ w/lib/matplotlib/backends/backend_pgf.py\r\n@@ -257,7 +257,7 @@ class LatexManager:\r\n         # Open LaTeX process for real work; register it for deletion.  On\r\n         # Windows, we must ensure that the subprocess has quit before being\r\n         # able to delete the tmpdir in which it runs; in order to do so, we\r\n-        # must first `kill()` it, and then `communicate()` with it.\r\n+        # must first `kill()` it, and then `wait()` with it.\r\n         try:\r\n             self.latex = subprocess.Popen(\r\n                 [mpl.rcParams[\"pgf.texsystem\"], \"-halt-on-error\"],\r\n@@ -274,7 +274,7 @@ class LatexManager:\r\n\r\n         def finalize_latex(latex):\r\n             latex.kill()\r\n-            latex.communicate()\r\n+            latex.wait()\r\n\r\n         self._finalize_latex = weakref.finalize(\r\n             self, finalize_latex, self.latex)\r\n```\r\nis enough in practice?\nEven though the pgf file is correctly created I think the crash is annoying enough (and may leave temporary files lying around perhaps?) to mark this as RC, especially as there's a tentative patch.  (A possible issue with using wait() is mentioned at https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait re: pipes filling up, but I *think* this may not be a possible issue here?)\nIs it worth opening an issue with upstream as this may not have been understand to be a sideeffect of that change?\nI agree it's a bit annoying but I'm not really sure what they could do to fix that in the general case.  One specific thing that could be done, though, is that right now they skip handling stdin/stdout/stderr in separate threads if at least two of them are None and there is no timeout (in that case they can just handle the remaining fd (if any) in the main thread) -- see the definition of Popen.communicate --; however, they could also do so if `input` is None (I think) (as in that case stdin effectively does nothing), which would happen to handle our use-case (and is probably not so rare in general).\nI'll try to do this next Tuesday if someone does not beat me to it.\nI did not get to opening an issue upstream yet.\nA concern with switching from `communicate` to `wait` is that the docs warn us of a possible deadlock:\r\n\r\nhttps://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait\r\n\r\n> Note This will deadlock when using stdout=PIPE or stderr=PIPE and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use Popen.communicate() when using pipes to avoid that.\r\n\r\nbut I think in this case we should always be \"small\" while tearing down a the latex process.\r\n\r\nCan we do \r\n\r\n```diff\r\ndiff --git a/lib/matplotlib/backends/backend_pgf.py b/lib/matplotlib/backends/backend_pgf.py\r\nindex 78d15fe29b..ba01622bd0 100644\r\n--- a/lib/matplotlib/backends/backend_pgf.py\r\n+++ b/lib/matplotlib/backends/backend_pgf.py\r\n@@ -257,7 +257,8 @@ class LatexManager:\r\n         # Open LaTeX process for real work; register it for deletion.  On\r\n         # Windows, we must ensure that the subprocess has quit before being\r\n         # able to delete the tmpdir in which it runs; in order to do so, we\r\n-        # must first `kill()` it, and then `communicate()` with it.\r\n+        # must first `kill()` it, and then `communicate()` with or `wait()` on\r\n+        # it.\r\n         try:\r\n             self.latex = subprocess.Popen(\r\n                 [mpl.rcParams[\"pgf.texsystem\"], \"-halt-on-error\"],\r\n@@ -274,7 +275,10 @@ class LatexManager:\r\n\r\n         def finalize_latex(latex):\r\n             latex.kill()\r\n-            latex.communicate()\r\n+            try:\r\n+                latex.communicate()\r\n+            except RuntimeError:\r\n+                latex.wait()\r\n\r\n         self._finalize_latex = weakref.finalize(\r\n             self, finalize_latex, self.latex)\r\n```\nIndeed, the deadlock seems improbable in this case; I guess the try... except approach is fine too.\nDoes somebody with a windows dev machine have the ability to test the proposed workaround?\r\n\r\nOr are we convinced the ultimate solution is upstream and we should not be implementing the workaround here?\r\n\r\nThis is marked as `Release Critical`, though unless it gets in soon will probably have to be bumped because we are looking to release 3.8.3 with a MacOS deadlock fix.\nI think we can (blindly) go with the `try...except` solution.", "created_at": "2024-02-13T15:54:57Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27783, "instance_id": "matplotlib__matplotlib-27783", "issue_numbers": ["27782", "0000"], "base_commit": "f04846818f5cbe35b04e8b5f4fe3325d781c6e9e", "patch": "diff --git a/README.md b/README.md\nindex fc3abb7e197c..5e15c645c9a2 100644\n--- a/README.md\n+++ b/README.md\n@@ -69,5 +69,5 @@ If Matplotlib contributes to a project that leads to publication, please\n acknowledge this by citing Matplotlib.\n \n [A ready-made citation\n-entry](https://matplotlib.org/stable/project/citing.html) is\n+entry](https://matplotlib.org/stable/users/project/citing.html) is\n available.\n", "test_patch": "", "problem_statement": "[Doc]: Link to citation page in read me broken\n### Documentation Link\n\nhttps://github.com/matplotlib/matplotlib/blob/main/README.md\n\n### Problem\n\nThe link at the bottom of the read me is broken and goes to a page not found.\n\n### Suggested improvement\n\nRevert to the previous link (https://matplotlib.org/stable/users/project/citing.html). Alternatively, the site could be updated so that the link works, but I don't think that that is possible from the GitHub.\n", "hints_text": "", "created_at": "2024-02-13T00:43:09Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27776, "instance_id": "matplotlib__matplotlib-27776", "issue_numbers": ["27774"], "base_commit": "d2cc4d0b0a2e1e9e8a5c1f311f0e10ef8acdb9ef", "patch": "diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\nindex fccde841aadc..a353500f8725 100644\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -2607,9 +2607,13 @@ class FigureManagerBase:\n     backend-independent way. It's an adapter for the real (GUI) framework that\n     represents the visual figure on screen.\n \n-    GUI backends define from this class to translate common operations such\n+    The figure manager is connected to a specific canvas instance, which in turn\n+    is connected to a specific figure instance. To access a figure manager for\n+    a given figure in user code, you typically use ``fig.canvas.manager``.\n+\n+    GUI backends derive from this class to translate common operations such\n     as *show* or *resize* to the GUI-specific code. Non-GUI backends do not\n-    support these operations an can just use the base class.\n+    support these operations and can just use the base class.\n \n     This following basic operations are accessible:\n \n@@ -2794,6 +2798,11 @@ def set_window_title(self, title):\n         Set the title text of the window containing the figure.\n \n         This has no effect for non-GUI (e.g., PS) backends.\n+\n+        Examples\n+        --------\n+        >>> fig = plt.figure()\n+        >>> fig.canvas.manager.set_window_title('My figure')\n         \"\"\"\n \n \n", "test_patch": "", "problem_statement": "[ENH]: pre-set file name for GUI save dialog in rcParams\n### Problem\r\n\r\nWhile there is an obvious way to specify the _output image format_ as well as *directory* where GUI suggests to export your interactive plot, like this:\r\n\r\n     matplotlib.rcParams[\"savefig.format\"] = \"pdf\"\r\n     matplotlib.rcParams[\"savefig.directory\"] = ...\r\n\r\nthere is no easy way to suggest the *file base name*, and it always defaults to practically useless \"Figure_1\" or so. \r\n\r\nRationale 1: I often process & plot a lot of scientific datasets with long names that encode a bunch of useful parameters. My scripts would therefore save me significant amount of time if e.g. for \"abcd123.dat\" they suggested to export into \"abcd123.*\".\r\n\r\nRationale 2: One old question about this can be found on SO (https://stackoverflow.com/questions/41680007/how-to-change-default-filename-from-matplotlib-navigationtoolbar-in-a-pyqt5-appl) and the proposed solution requires monkey-patching Matplotlib functions - which is ugly, tedious and most importantly, the suggested code did not work anymore. \r\n\r\n### Proposed solution\r\n\r\nLet's allow users to change the filename too, allowing one to simply set:\r\n\r\n     matplotlib.rcParams[\"savefig.basename\"] = ...\n", "hints_text": "A related enhancement would be to add support for something like \r\n\r\n    matplotlib.rcParams[\"tk.window_title\"]\r\n\r\nas currently the window gets named as \"Figure 1\" and changing it requires further hacking. Both described settings should really be one-liners.\r\n\r\nThis both looks fairly easy to accomplish. With your approval, I can try making a PR. \nReturning to the aforementioned Stack Overflow link, I found out that this one line will set suggested filename:\r\n\r\n    fig.canvas.get_default_filename = lambda: 'new_default_name.png'\r\n\r\nYet it is not really systematic from programmer's point of view, so I still believe RC params should better do the job.\nIt looks like one option is\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\n\r\nax.plot([0, 1])\r\n\r\nfig.canvas.manager.set_window_title('foo')\r\n\r\nplt.show()\r\n```\r\n\r\n(tested with Matplotlib v3.8.2 and QtAgg).\r\n\r\nI think it would be odd to have an rcParam for this because usually rcParams are things you want to have the same across multiple figures (and defaults are set in the [matplotlibrc file](https://matplotlib.org/stable/users/explain/customizing.html#the-matplotlibrc-file)).  For file names you presumably want a different setting for each figure.\nI'm do for fully understand you use case. Questions/comments:\r\n\r\n- You save a lot through the GUI save dialog? Even with a better suggested file name that's quite cumbersome. Can't you simply `fig.savefig(filename)` from your script?\r\n- IMHO a rcParam is not suitable for a figure filename. RcParams are global, but you'll want a figure-specific filename most of the time. It dosn't really help to be able to change the default filename to another constant like \"my_plot.png\"\r\n- you said\r\n  > for \"abcd123.dat\" they suggested to export into \"abcd123.*\".\r\n  \r\n  We cannot do this fully automatic. Matplotlib does not know where your data comes from. You would have to supply the name to Matplotlib. E.g. directly through `savefig()` or via the window title (see comment by @rcomer above), which gets used as filename suggestion.\nThank you both for your quick answers! \r\n\r\nSo apparently there exist solutions for both my problems, although these have rather to be searched in the object model of Matplotlib and not in its RC params.\r\n\r\nI must admit I don't find such a structure very user friendly, but let's consider this topic settled.\r\n\r\n@timhoffm: you are right that for many files one should use non-interactive processing with ```savefig()```, but I am developing cross-platform tools for a scientfic team and I want my colleagues to have full control over how and where the file gets exported.\r\n\n I must admit I don't find such a structure very user friendly, but let's consider this topic settled.\r\n\r\nThis is through separation of concerns. The figure is a logical entity, the canvas is a backend specific rendering entity, e.g. a pixel buffer of your GUI framework. The manager is the controller if you want us to pop up a window Vito the canvas for you. So window information is naturally connected to the manager. But I agree, we could make this more discoverable. - and be it only by adding an example to https://matplotlib.org/devdocs/api/backend_bases_api.html#matplotlib.backend_bases.FigureManagerBase.set_window_title.\r\n\r\n> but I am developing cross-platform tools for a scientfic team and I want my colleagues to have full control over how and where the file gets exported.\r\n\r\nIf you anticipate, that your users need to save a lot, you may consider creating you own window in the gui framework of your choice, and embedding a Matplotlib figure into this. This would allow you to place a line edit with the suggested filename and a \"save\" button right next to the plot. (You'd wire the save button to call savefig with the name from the line edit.) That way, your users have full control, but saving with a default name is only a single click for them.", "created_at": "2024-02-12T12:48:45Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27773, "instance_id": "matplotlib__matplotlib-27773", "issue_numbers": ["27770"], "base_commit": "641e3def2c8f915f741937ddfc7ff28ca86a6370", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex b1aeb87e6b45..711d930a1253 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5883,7 +5883,7 @@ def _pcolorargs(self, funcname, *args, shading='auto', **kwargs):\n                 def _interp_grid(X):\n                     # helper for below\n                     if np.shape(X)[1] > 1:\n-                        dX = np.diff(X, axis=1)/2.\n+                        dX = np.diff(X, axis=1) * 0.5\n                         if not (np.all(dX >= 0) or np.all(dX <= 0)):\n                             _api.warn_external(\n                                 f\"The input coordinates to {funcname} are \"\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5bf5b5e19971..f2f74f845338 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -1517,6 +1517,19 @@ def test_pcolorargs():\n         ax.pcolormesh(X, Y, Z, shading='auto')\n \n \n+def test_pcolormesh_underflow_error():\n+    \"\"\"\n+    Test that underflow errors don't crop up in pcolormesh.  Probably\n+    a numpy bug (https://github.com/numpy/numpy/issues/25810).\n+    \"\"\"\n+    with np.errstate(under=\"raise\"):\n+        x = np.arange(0, 3, 0.1)\n+        y = np.arange(0, 6, 0.1)\n+        z = np.random.randn(len(y), len(x))\n+        fig, ax = plt.subplots()\n+        ax.pcolormesh(x, y, z)\n+\n+\n def test_pcolorargs_with_read_only():\n     x = np.arange(6).reshape(2, 3)\n     xmask = np.broadcast_to([False, True, False], x.shape)  # read-only array\n", "problem_statement": "[Bug]: pcolormesh issue with np.seterr(under='raise')\n### Bug summary\n\nWhen `np.seterr(under=\"raise\")` is set, the pcolormesh fails.  Maybe this should be internally disabled?\n\n### Code for reproduction\n\n```python\nimport numpy as np\r\nimport matplotlib.pylab as plt\r\n\r\nca=array([0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7,\r\n       1.8, 1.9, 2. ])\r\na3=array([0.75, 0.8 , 0.85, 0.9 , 0.95, 1.  , 1.05, 1.1 , 1.15, 1.2 , 1.25])\r\ndata=array([[1.2713495 , 1.27445031, 1.28460717, 1.29130818, 1.29799399,\r\n        1.28663907, 1.31302497, 1.300941  , 1.30953053, 1.28866943,\r\n        1.27942581],\r\n       [1.26072153, 1.34242149, 1.39931996, 1.36029362, 1.27837626,\r\n        1.26751629, 1.27348899, 1.29718153, 1.29149684, 1.29825976,\r\n        1.29844045],\r\n       [6.08656104, 1.30067448, 1.25214664, 1.26035875, 1.36715818,\r\n        1.32552442, 1.39957926, 1.26443228, 1.27086277, 1.27747337,\r\n        1.27804707],\r\n       [3.00639509, 3.71437317, 6.09823091, 5.08496857, 1.33917387,\r\n        1.275968  , 1.276208  , 5.85914639, 1.3672074 , 1.3054208 ,\r\n        1.29196619],\r\n       [1.40590936, 2.7645637 , 1.59388749, 3.00583827, 6.09541914,\r\n        6.10693772, 1.43934882, 1.4218234 , 1.24456015, 1.2583217 ,\r\n        4.73126518],\r\n       [1.51797233, 4.07758869, 1.35024387, 6.16087726, 6.16087726,\r\n        2.99797873, 1.4925019 , 6.15846305, 6.16087726, 6.17099357,\r\n        6.16087726],\r\n       [1.42225226, 6.20368688, 3.77458528, 1.63940466, 3.05123787,\r\n        1.4034648 , 2.78257648, 6.1955168 , 1.63842382, 3.01200839,\r\n        3.83237647],\r\n       [6.12860987, 1.52526702, 6.12860987, 3.4192525 , 1.66872783,\r\n        3.03455313, 1.32343997, 1.40334972, 2.73661128, 6.13119387,\r\n        1.60614133],\r\n       [2.91161999, 6.1955168 , 6.20368688, 1.56871188, 1.38913448,\r\n        6.21100954, 3.38222841, 2.95083762, 3.06491493, 6.20368688,\r\n        1.50694172],\r\n       [1.74007769, 2.92087855, 6.22356158, 6.23099418, 6.22356158,\r\n        1.53980699, 1.39476663, 6.22356158, 3.34994297, 1.57842062,\r\n        2.96292181],\r\n       [1.73497151, 1.7467381 , 2.92083986, 1.77700437, 6.20368688,\r\n        6.20368688, 1.68301207, 1.48597638, 1.38461998, 3.04317972,\r\n        3.42806827],\r\n       [1.71963249, 1.72142379, 1.73780007, 1.72713968, 2.92199405,\r\n        1.78053682, 6.14481403, 6.14481403, 1.55941905, 1.41043732,\r\n        6.14481403],\r\n       [2.91315155, 1.742551  , 1.72151811, 1.73169847, 1.7398712 ,\r\n        2.92240585, 2.91794373, 6.15232143, 6.14481403, 6.14481403,\r\n        1.54133219],\r\n       [6.14481403, 6.15232143, 2.92461883, 1.73502069, 1.7412515 ,\r\n        1.74323843, 2.92054641, 1.78489886, 1.75280085, 6.15232143,\r\n        6.14481403],\r\n       [6.27016475, 6.27016475, 6.27016475, 2.90887762, 2.9217294 ,\r\n        2.92487936, 2.92513504, 2.92124614, 2.91207688, 2.90331518,\r\n        2.86488642],\r\n       [6.17730685, 6.17730685, 6.18773682, 6.17730685, 2.92253426,\r\n        1.76412583, 1.76438894, 1.75630465, 1.76600374, 2.91196777,\r\n        2.90819997]])\r\n\r\nplt.pcolormesh(ca, a3, data.T)\n```\n\n\n### Actual outcome\n\n```\r\nIn [83]: plt.pcolormesh(ca, a3, data.T)\r\n---------------------------------------------------------------------------\r\nFloatingPointError                        Traceback (most recent call last)\r\nCell In[83], line 1\r\n----> 1 plt.pcolormesh(ca, a3, data.T)\r\n\r\nFile ~/Python/lib/python3.11/site-packages/matplotlib/pyplot.py:3478, in pcolormesh(alpha, norm, cmap, vmin, vmax, shading, antialiased, data, *args, **kwargs)\r\n   3465 @_copy_docstring_and_deprecators(Axes.pcolormesh)\r\n   3466 def pcolormesh(\r\n   3467     *args: ArrayLike,\r\n   (...)\r\n   3476     **kwargs,\r\n   3477 ) -> QuadMesh:\r\n-> 3478     __ret = gca().pcolormesh(\r\n   3479         *args,\r\n   3480         alpha=alpha,\r\n   3481         norm=norm,\r\n   3482         cmap=cmap,\r\n   3483         vmin=vmin,\r\n   3484         vmax=vmax,\r\n   3485         shading=shading,\r\n   3486         antialiased=antialiased,\r\n   3487         **({\"data\": data} if data is not None else {}),\r\n   3488         **kwargs,\r\n   3489     )\r\n   3490     sci(__ret)\r\n   3491     return __ret\r\n\r\nFile ~/Python/lib/python3.11/site-packages/matplotlib/__init__.py:1465, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\r\n   1462 @functools.wraps(func)\r\n   1463 def inner(ax, *args, data=None, **kwargs):\r\n   1464     if data is None:\r\n-> 1465         return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   1467     bound = new_sig.bind(ax, *args, **kwargs)\r\n   1468     auto_label = (bound.arguments.get(label_namer)\r\n   1469                   or bound.kwargs.get(label_namer))\r\n\r\nFile ~/Python/lib/python3.11/site-packages/matplotlib/axes/_axes.py:6289, in Axes.pcolormesh(self, alpha, norm, cmap, vmin, vmax, shading, antialiased, *args, **kwargs)\r\n   6286 shading = shading.lower()\r\n   6287 kwargs.setdefault('edgecolors', 'none')\r\n-> 6289 X, Y, C, shading = self._pcolorargs('pcolormesh', *args,\r\n   6290                                     shading=shading, kwargs=kwargs)\r\n   6291 coords = np.stack([X, Y], axis=-1)\r\n   6293 kwargs.setdefault('snap', mpl.rcParams['pcolormesh.snap'])\r\n\r\nFile ~/Python/lib/python3.11/site-packages/matplotlib/axes/_axes.py:5873, in Axes._pcolorargs(self, funcname, shading, *args, **kwargs)\r\n   5870     return X\r\n   5872 if ncols == Nx:\r\n-> 5873     X = _interp_grid(X)\r\n   5874     Y = _interp_grid(Y)\r\n   5875 if nrows == Ny:\r\n\r\nFile ~/Python/lib/python3.11/site-packages/matplotlib/axes/_axes.py:5852, in Axes._pcolorargs.<locals>._interp_grid(X)\r\n   5849 def _interp_grid(X):\r\n   5850     # helper for below\r\n   5851     if np.shape(X)[1] > 1:\r\n-> 5852         dX = np.diff(X, axis=1)/2.\r\n   5853         if not (np.all(dX >= 0) or np.all(dX <= 0)):\r\n   5854             _api.warn_external(\r\n   5855                 f\"The input coordinates to {funcname} are \"\r\n   5856                 \"interpreted as cell centers, but are not \"\r\n   (...)\r\n   5859                 \"edges, in which case, please supply \"\r\n   5860                 f\"explicit cell edges to {funcname}.\")\r\n\r\nFile ~/Python/lib/python3.11/site-packages/numpy/ma/core.py:4275, in MaskedArray.__truediv__(self, other)\r\n   4273 if self._delegate_binop(other):\r\n   4274     return NotImplemented\r\n-> 4275 return true_divide(self, other)\r\n\r\nFile ~/Python/lib/python3.11/site-packages/numpy/ma/core.py:1171, in _DomainedBinaryOperation.__call__(self, a, b, *args, **kwargs)\r\n   1169 domain = ufunc_domain.get(self.f, None)\r\n   1170 if domain is not None:\r\n-> 1171     m |= domain(da, db)\r\n   1172 # Take care of the scalar case first\r\n   1173 if not m.ndim:\r\n\r\nFile ~/Python/lib/python3.11/site-packages/numpy/ma/core.py:858, in _DomainSafeDivide.__call__(self, a, b)\r\n    856 a, b = np.asarray(a), np.asarray(b)\r\n    857 with np.errstate(invalid='ignore'):\r\n--> 858     return umath.absolute(a) * self.tolerance >= umath.absolute(b)\r\n\r\nFloatingPointError: underflow encountered in multiply\r\n\r\n```\n\n### Expected outcome\n\na plot\n\n### Additional information\n\nseems to be generic, but specific to this dataset\n\n### Operating system\n\nFedora 39\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\nGTK4Agg\n\n### Python version\n\n3.11.8 \n\n### Jupyter version\n\nIPython 8.21.0\n\n### Installation\n\npip\n", "hints_text": "This seems a bug upstream in numpy:\r\n\r\n```\r\nnp.seterr(under=\"raise\")\r\nx=np.arange(0, 3, 0.1)\r\ndX = np.diff(x)\r\nX = np.ma.array(x)\r\ndX = np.diff(X)\r\ndX = dX / 2.0\r\n```\r\nreturns\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/jklymak/matplotlib/testit.py\", line 9, in <module>\r\n    dX = dX / 2.0\r\n         ~~~^~~~~\r\n  File \"/Users/jklymak/mambaforge/envs/mpl-dev/lib/python3.11/site-packages/numpy/ma/core.py\", line 4275, in __truediv__\r\n    return true_divide(self, other)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/jklymak/mambaforge/envs/mpl-dev/lib/python3.11/site-packages/numpy/ma/core.py\", line 1171, in __call__\r\n    m |= domain(da, db)\r\n         ^^^^^^^^^^^^^^\r\n  File \"/Users/jklymak/mambaforge/envs/mpl-dev/lib/python3.11/site-packages/numpy/ma/core.py\", line 858, in __call__\r\n    return umath.absolute(a) * self.tolerance >= umath.absolute(b)\r\n           ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\r\nFloatingPointError: underflow encountered in multiply\r\n```\r\nNote that you need to divide by 2 to get the error.  \r\n\r\nA work around for us is to multiply by 0.5 instead.\r\n\r\n", "created_at": "2024-02-12T02:17:53Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27768, "instance_id": "matplotlib__matplotlib-27768", "issue_numbers": ["27745", "0000"], "base_commit": "d2cc4d0b0a2e1e9e8a5c1f311f0e10ef8acdb9ef", "patch": "diff --git a/doc/api/next_api_changes/deprecations/27768-REC.rst b/doc/api/next_api_changes/deprecations/27768-REC.rst\nnew file mode 100644\nindex 000000000000..357545a41efe\n--- /dev/null\n+++ b/doc/api/next_api_changes/deprecations/27768-REC.rst\n@@ -0,0 +1,5 @@\n+``[XYZ]Axis.draw``, ``*Image.draw`` *args* and *kwargs*...\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+... are deprecated because they have no effect.  This will make the calling sequence\n+consistent with the ``draw`` method of other artists.\ndiff --git a/galleries/examples/misc/demo_ribbon_box.py b/galleries/examples/misc/demo_ribbon_box.py\nindex 6e79e6f9fde1..d5121ba6ff5c 100644\n--- a/galleries/examples/misc/demo_ribbon_box.py\n+++ b/galleries/examples/misc/demo_ribbon_box.py\n@@ -49,7 +49,7 @@ def __init__(self, ax, bbox, color, *, extent=(0, 1, 0, 1), **kwargs):\n         self._ribbonbox = RibbonBox(color)\n         self.set_transform(BboxTransformTo(bbox))\n \n-    def draw(self, renderer, *args, **kwargs):\n+    def draw(self, renderer):\n         stretch_factor = self._bbox.height / self._bbox.width\n \n         ny = int(stretch_factor*self._ribbonbox.nx)\n@@ -57,7 +57,7 @@ def draw(self, renderer, *args, **kwargs):\n             arr = self._ribbonbox.get_stretched_image(stretch_factor)\n             self.set_array(arr)\n \n-        super().draw(renderer, *args, **kwargs)\n+        super().draw(renderer)\n \n \n def main():\ndiff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex 9d478d30f77c..b4d2810b67b8 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1373,6 +1373,8 @@ def get_tick_padding(self):\n             values.append(self.minorTicks[0].get_tick_padding())\n         return max(values, default=0)\n \n+    @_api.delete_parameter('3.9', 'args')\n+    @_api.delete_parameter('3.9', 'kwargs')\n     @martist.allow_rasterization\n     def draw(self, renderer, *args, **kwargs):\n         # docstring inherited\ndiff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex e3269062699c..4673c6c4d529 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -626,6 +626,8 @@ def _check_unsampled_image(self):\n         \"\"\"\n         return False\n \n+    @_api.delete_parameter('3.9', 'args')\n+    @_api.delete_parameter('3.9', 'kwargs')\n     @martist.allow_rasterization\n     def draw(self, renderer, *args, **kwargs):\n         # if not visible, declare victory and return\n", "test_patch": "diff --git a/tools/stubtest.py b/tools/stubtest.py\nindex 7c93d2dae157..77676595cbf8 100644\n--- a/tools/stubtest.py\n+++ b/tools/stubtest.py\n@@ -18,14 +18,33 @@ def __init__(self, filepath, output):\n         self.output = output\n \n     def visit_FunctionDef(self, node):\n-        if any(\"delete_parameter\" in ast.unparse(line) for line in node.decorator_list):\n-            parents = []\n-            if hasattr(node, \"parent\"):\n-                parent = node.parent\n-                while hasattr(parent, \"parent\") and not isinstance(parent, ast.Module):\n-                    parents.insert(0, parent.name)\n-                    parent = parent.parent\n-            self.output.write(f\"{'.'.join(self.context + parents)}.{node.name}\\n\")\n+        # delete_parameter adds a private sentinel value that leaks\n+        # we do not want that sentinel value in the type hints but it breaks typing\n+        # Does not apply to variadic arguments (args/kwargs)\n+        for dec in node.decorator_list:\n+            if \"delete_parameter\" in ast.unparse(dec):\n+                deprecated_arg = dec.args[1].value\n+                if (\n+                    node.args.vararg is not None\n+                    and node.args.vararg.arg == deprecated_arg\n+                ):\n+                    continue\n+                if (\n+                    node.args.kwarg is not None\n+                    and node.args.kwarg.arg == deprecated_arg\n+                ):\n+                    continue\n+\n+                parents = []\n+                if hasattr(node, \"parent\"):\n+                    parent = node.parent\n+                    while hasattr(parent, \"parent\") and not isinstance(\n+                        parent, ast.Module\n+                    ):\n+                        parents.insert(0, parent.name)\n+                        parent = parent.parent\n+                self.output.write(f\"{'.'.join(self.context + parents)}.{node.name}\\n\")\n+                break\n \n     def visit_ClassDef(self, node):\n         for dec in node.decorator_list:\n", "problem_statement": "[MNT]: `_ImageBase.draw` and `Axis.draw` args and kwargs\n### Summary\n\nThe `draw` methods of [_ImageBase](https://github.com/matplotlib/matplotlib/blob/525349b33bd40108f1f9f830323b3270f12dd72f/lib/matplotlib/image.py#L630) and [Axis](https://github.com/matplotlib/matplotlib/blob/525349b33bd40108f1f9f830323b3270f12dd72f/lib/matplotlib/axis.py#L1377) take `*args` and `**kwargs` but do not do anything with them.  The [Ribbon Box](https://matplotlib.org/stable/gallery/misc/demo_ribbon_box.html) example has an artist that inherits from `AxesImage` and also passes `*args` and `**kwargs` through `draw`.\n\n### Proposed fix\n\nBased on #16022 my guess is that `*args` and `**kwargs` should be removed from the signatures, though I don't know much about when and how `draw` gets called.  If they should be removed, do we need a deprecation period?\n", "hints_text": "This is internal API (it is called by the Aritsts parent as part of rendering the figure (the update methods in the GUIs and the `savefig` methods eventually create a `Renderer` instance and then call `Figure.draw(renderer)` which is turn uses the visitor pattern to pass the renderer to all of the (nested) children and the result is the accumulated state on the renderer (for Agg that is an RGBA buffer we can extract, for svg it is a file-like we have been streaming text into).). \r\n\r\nNo one should be calling this outside of the draw process so I don't think we need an deprecation period, but we should highlight it in the release notes (and be prepared to add a deprecation period if we actually broke somenone).\nThanks for the explanation @tacaswell!  I ended up here because I was looking at an artist in Cartopy whose `draw` method will update colors, etc. from `kwargs` if passed.  I couldn\u2019t think under what circumstances they would be passed so went grepping for other examples, but didn\u2019t get any less confused!\nIf we want to be on the very safe side, we can still do a deprecation. There's no hurry in removing the arguments.\nOnce you are down the path of writing your own `draw` methods you could have a class that calls subsequent classes and does pass something meaningful across the function call, but if downstream libraries are doing that, that is between them and themselves (so long as they do not _require_ the kwargs it matches our expectations and I see no reason we should care if they are optional).", "created_at": "2024-02-10T14:56:09Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27767, "instance_id": "matplotlib__matplotlib-27767", "issue_numbers": ["27762", "0000"], "base_commit": "4052a10fdfd34d08ae72ef078b6cc43b95b1c723", "patch": "diff --git a/doc/api/next_api_changes/behavior/27767-REC.rst b/doc/api/next_api_changes/behavior/27767-REC.rst\nnew file mode 100644\nindex 000000000000..f6b4dc156732\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/27767-REC.rst\n@@ -0,0 +1,7 @@\n+Legend labels for ``plot``\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Previously if a sequence was passed to the *label* parameter of `~.Axes.plot` when\n+plotting a single dataset, the sequence was automatically cast to string for the legend\n+label.  Now, if the sequence has only one element, that element will be the legend\n+label.  To keep the old behavior, cast the sequence to string before passing.\ndiff --git a/doc/api/next_api_changes/deprecations/27767-REC.rst b/doc/api/next_api_changes/deprecations/27767-REC.rst\nnew file mode 100644\nindex 000000000000..68781090df0a\n--- /dev/null\n+++ b/doc/api/next_api_changes/deprecations/27767-REC.rst\n@@ -0,0 +1,9 @@\n+Legend labels for ``plot``\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Previously if a sequence was passed to the *label* parameter of `~.Axes.plot` when\n+plotting a single dataset, the sequence was automatically cast to string for the legend\n+label.  This behavior is now deprecated and in future will error if the sequence length\n+is not one (consistent with multi-dataset behavior, where the number of elements must\n+match the number of datasets).  To keep the old behavior, cast the sequence to string\n+before passing.\ndiff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 51347f08b989..0617fc7681bd 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -513,14 +513,22 @@ def _plot_args(self, axes, tup, kwargs, *,\n \n         label = kwargs.get('label')\n         n_datasets = max(ncx, ncy)\n-        if n_datasets > 1 and not cbook.is_scalar_or_string(label):\n-            if len(label) != n_datasets:\n-                raise ValueError(f\"label must be scalar or have the same \"\n-                                 f\"length as the input data, but found \"\n-                                 f\"{len(label)} for {n_datasets} datasets.\")\n+\n+        if cbook.is_scalar_or_string(label):\n+            labels = [label] * n_datasets\n+        elif len(label) == n_datasets:\n             labels = label\n+        elif n_datasets == 1:\n+            msg = (f'Passing label as a length {len(label)} sequence when '\n+                    'plotting a single dataset is deprecated in Matplotlib 3.9 '\n+                    'and will error in 3.11.  To keep the current behavior, '\n+                    'cast the sequence to string before passing.')\n+            _api.warn_deprecated('3.9', message=msg)\n+            labels = [label]\n         else:\n-            labels = [label] * n_datasets\n+            raise ValueError(\n+                f\"label must be scalar or have the same length as the input \"\n+                f\"data, but found {len(label)} for {n_datasets} datasets.\")\n \n         result = (make_artist(axes, x[:, j % ncx], y[:, j % ncy], kw,\n                               {**kwargs, 'label': label})\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex b23649f22e48..73892698882c 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -1197,12 +1197,20 @@ def test_plot_single_input_multiple_label(label_array):\n     x = [1, 2, 3]\n     y = [2, 5, 6]\n     fig, ax = plt.subplots()\n-    ax.plot(x, y, label=label_array)\n+    with pytest.warns(mpl.MatplotlibDeprecationWarning,\n+                      match='Passing label as a length 2 sequence'):\n+        ax.plot(x, y, label=label_array)\n     leg = ax.legend()\n     assert len(leg.get_texts()) == 1\n     assert leg.get_texts()[0].get_text() == str(label_array)\n \n \n+def test_plot_single_input_list_label():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([[0], [1]], label=['A'])\n+    assert line.get_label() == 'A'\n+\n+\n def test_plot_multiple_label_incorrect_length_exception():\n     # check that exception is raised if multiple labels\n     # are given, but number of on labels != number of lines\n", "problem_statement": "[Bug]: Inconsistent treatment of list of labels in `plot` when the input is a dataframe\n### Bug summary\n\n`plt.plot` interprets a dataframe as a sequence of series to be plotted, one per column. Labels can be specified by setting `label` to a list of labels matching the number of columns. If the dataframe has only one column, though, the `label` argument is interpreted as a single label, instead of a list with one element.\n\n### Code for reproduction\n\n```python\nfrom matplotlib import pyplot as plt\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nx = np.arange(5)\r\ny = pd.DataFrame({'a': x, 'b': x + 1})\r\n\r\nplt.figure('double', clear=True)\r\nplt.plot(x, y, label=['A', 'B'])\r\nplt.legend() # -> ok\r\n\r\nplt.figure('single', clear=True)\r\nplt.plot(x, y.drop('b', axis=1), label=['A'])\r\nplt.legend() # -> legend label is \"['A']\"\r\n\r\nplt.show()\n```\n\n\n### Actual outcome\n\n<img width=\"592\" alt=\"immagine\" src=\"https://github.com/matplotlib/matplotlib/assets/9684110/aa6abbcc-dd05-459b-b4ae-acb8a0d2e998\">\r\n\n\n### Expected outcome\n\n<img width=\"573\" alt=\"immagine\" src=\"https://github.com/matplotlib/matplotlib/assets/9684110/4dd88c38-216d-446b-a8d4-de70e299f39e\">\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nmacOS 14.2.1\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\n3.12.1 | packaged by conda-forge | (main, Dec 23 2023, 08:01:35) [Clang 16.0.6 ]\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n", "hints_text": "This isn't specific to dataframes.  The same behaviour can be seen with\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([[0, 0], [1, 2]], label=['A', 'B'])\r\nax.legend()\r\nplt.show()\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/b4d55fae-0762-4c77-a95a-a23de20985fa)\r\n\r\n```python\r\nfig, ax = plt.subplots()\r\nax.plot([[0], [1]], label=['A'])\r\nax.legend()\r\nplt.show()\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/8e93a686-fe41-431b-ae31-238b0ddff189)\nI'm not aware that we make any guarantees that one can pass a single-element list for single data. - I think the behavior is undefined in this case. For context, multiple label support was introduced in #16178.\r\n\r\nBut if we want to support this, that'd need to be handled here:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/d2cc4d0b0a2e1e9e8a5c1f311f0e10ef8acdb9ef/lib/matplotlib/axes/_base.py#L522-L523\r\n\nI tried poking the code that @timhoffm highlighted, but it seems the current behaviour is very much expected:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/d2cc4d0b0a2e1e9e8a5c1f311f0e10ef8acdb9ef/lib/matplotlib/tests/test_legend.py#L1191-L1203\nI think the current behavior is like if `np.array([1])` yielded a 0-d array. It breaks agnostic coding patterns that do not depend on the length of things.\n> I tried poking the code that @timhoffm highlighted, but it seems the current behaviour is very much expected:\r\n\r\nMy vague recollection is that #16178 should only affect the multiple-data case. Changes to the single-data case were out of scope. I believe, the test is just ensurging the single-data case is kept as is; i.e. anything passed to `label` is converted using `str`. So in a way, this behavior is expected as the de-facto behavior, but I would not claim it's necessarily intended.\r\n\r\nWe have a generalization ambiguity problem. We cannot have both:\r\n1. For single data, convert any label object to str.\r\n2. For N data, support a list of labels of length N.\r\n\r\nWhile I see the motivation for 2 with the N=1 case, supporting that would mean to break 1. We certainly have to go through a deprecation period with this. And we'd have to consider how to handle the case one dataset, but >1 labels (as in the test). I think, if one dataset, length-1 label list gives the one element as label, the >1 labels case should error out and not create the str anymore.\r\n\r\nI'd fundamentally support the idea of not converting iterables to str anymore - if anybody wants to take on the deprecation effort.\n> I'd fundamentally support the idea of not converting iterables to str anymore - if anybody wants to take on the deprecation effort.\r\n\r\nI think we should do this - I can't think of a situation where a user would want the result above, and if for some weird reason they do, they can convert to a single string themselves.  I think the current behaviour is undesirable enough that I'm not even sure we need a full deprecation cycle for it?\nI would bet that there are people who for some reason have a list as identifier for their dataset and they don't care enough to format that explicitly (`['A', 'B']` in the legend was good enough for them). Therefore, I advocate for a regular deprecation.\nSo what should happen for the single element list during the deprecation period?  Can we implement new behaviour for that right away?", "created_at": "2024-02-10T14:10:30Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27756, "instance_id": "matplotlib__matplotlib-27756", "issue_numbers": ["27753", "0000"], "base_commit": "c2aa4ee1177452dc778813e3034c3f57d7db83d8", "patch": "diff --git a/lib/matplotlib/bezier.py b/lib/matplotlib/bezier.py\nindex f310f287e2c0..069e20d05916 100644\n--- a/lib/matplotlib/bezier.py\n+++ b/lib/matplotlib/bezier.py\n@@ -171,9 +171,17 @@ def find_bezier_t_intersecting_with_closedpath(\n \n         if start_inside ^ middle_inside:\n             t1 = middle_t\n+            if end == middle:\n+                # Edge case where infinite loop is possible\n+                # Caused by large numbers relative to tolerance\n+                return t0, t1\n             end = middle\n         else:\n             t0 = middle_t\n+            if start == middle:\n+                # Edge case where infinite loop is possible\n+                # Caused by large numbers relative to tolerance\n+                return t0, t1\n             start = middle\n             start_inside = middle_inside\n \n", "test_patch": "diff --git a/lib/matplotlib/tests/test_bezier.py b/lib/matplotlib/tests/test_bezier.py\nnew file mode 100644\nindex 000000000000..65e2c616e738\n--- /dev/null\n+++ b/lib/matplotlib/tests/test_bezier.py\n@@ -0,0 +1,17 @@\n+\"\"\"\n+Tests specific to the bezier module.\n+\"\"\"\n+\n+from matplotlib.bezier import inside_circle, split_bezier_intersecting_with_closedpath\n+\n+\n+def test_split_bezier_with_large_values():\n+    # These numbers come from gh-27753\n+    arrow_path = [(96950809781500.0, 804.7503795623779),\n+                  (96950809781500.0, 859.6242585800646),\n+                  (96950809781500.0, 914.4981375977513)]\n+    in_f = inside_circle(96950809781500.0, 804.7503795623779, 0.06)\n+    split_bezier_intersecting_with_closedpath(arrow_path, in_f)\n+    # All we are testing is that this completes\n+    # The failure case is an infinite loop resulting from floating point precision\n+    # pytest will timeout if that occurs\n", "problem_statement": "[Bug]:  `split_bezier_intersecting_with_closedpath` fails to return\n### Bug summary\n\nIt looks like, for some inputs, `split_bezier_intersecting_with_closedpath`  never returns, as the `while True:` loop inside `find_bezier_t_intersecting_with_closedpath` fails to converge.\n\n### Code for reproduction\n\n```python\nfrom matplotlib.patches import inside_circle, split_bezier_intersecting_with_closedpath\r\n\r\narrow_path = [(96950809781500.0, 804.7503795623779), (96950809781500.0, 859.6242585800646), (96950809781500.0, 914.4981375977513)]\r\nin_f = inside_circle(96950809781500.0, 804.7503795623779, 0.06)\r\nsplit_bezier_intersecting_with_closedpath(arrow_path, in_f)\n```\n\n\n### Actual outcome\n\nThe call to `split_bezier_intersecting_with_closedpath` never returns.\n\n### Expected outcome\n\nThe call to `split_bezier_intersecting_with_closedpath` should return the split segment.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nconfirmed on Arch and Ubuntu 22.04 LTS\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\nagg\n\n### Python version\n\n3.11.6 (Arch) and 3.10.12 (Ubuntu)\n\n### Jupyter version\n\n4.0.11  (note: reproducible outside jupyter)\n\n### Installation\n\nNone\n", "hints_text": "I'm not sure there is a whole lot we can do here... this ultimately just comes down to floating point precision being asked to compare a tolerance that is smaller than it can actually distinguish at the scale of the numbers you are working with.\r\n\r\nThe default tolerance is 0.01 and the `np.spacing` on the largest of the numbers you are working with is `0.015625`... Thus it is impossible (or at least within rounding modes on the least significant bit of the floating point calculation) to be better than the tolerance requested, but it is not within tolerance, so it doesn't stop.\r\n\r\nIncreasing the tolerance (the third parameter to the `split_bezier_intersecting_with_closedpath` function) will help, but note you are still at the edges of floating point precision with some of these, so be a little careful. This particular example I was able to get to converge with a tolerance of `0.014`, though I would be weary of anything that is below at least about 4x `np.spacing` of your largest values (maybe even 10x, honestly)\r\n\r\nI'm inclined to close this as \"won't fix\" since the only real alternative would be to detect stable cycles (this one was just repeating the same values, so maybe just looking for repeated consecutive values would be enough) and either error, or warn and return the closest values... But neither of those options seem great and it introduces some complexity only for some pretty rare edge cases. Though I will give other maintainers the opportunity to weigh in before actually closing.\r\n\r\nRegardless, the tools exist to allow you to get what you want (i.e. specifying a larger tolerance)q\r\n\r\nI could also see an argument for scaling the default `tolerance` to the magnitude of the values given, I suppose, as 0.01 is not a good value for really large (as here) or really small coordinate values (where it will terminate potentially too _early_ instead). But that would be a behavior change that may even need to go through deprecation cycles.\n> Increasing the tolerance (the third parameter to the split_bezier_intersecting_with_closedpath function) \r\n\r\nThis is actually  happening inside `ax.add_patch(arrow)` (where `arrow` is a `FancyArrowPatch`) , and I'm not specifying the tolerances directly (not sure at this stage where they comeform).  Can I somehow define the tolenrance for the `FancyArrowPatch` or the axes, or a somesort of global `matplotlib` config?\r\n\r\n\r\n> I'm not sure there is a whole lot we can do here... this ultimately just comes down to floating point precision being asked to compare a tolerance that is smaller than it can actually distinguish at the scale of the numbers you are working with.\r\n\r\nIs this something that can be detected and adjusted/raised as an error  auotmatically by checking the values?  Or alternatively, is this something I can guard against when creating the `FancyArrowPatch`?\r\n", "created_at": "2024-02-07T22:10:03Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27755, "instance_id": "matplotlib__matplotlib-27755", "issue_numbers": ["27720", "0000"], "base_commit": "c2aa4ee1177452dc778813e3034c3f57d7db83d8", "patch": "diff --git a/src/_macosx.m b/src/_macosx.m\nindex 8038b72899df..299fed1785a8 100755\n--- a/src/_macosx.m\n+++ b/src/_macosx.m\n@@ -461,6 +461,8 @@ int mpl_check_modifier(\n         return NULL;\n     }\n \n+    Py_BEGIN_ALLOW_THREADS\n+\n     NSDate* date =\n         (timeout > 0.0) ? [NSDate dateWithTimeIntervalSinceNow: timeout]\n                         : [NSDate distantFuture];\n@@ -473,6 +475,8 @@ int mpl_check_modifier(\n        [NSApp sendEvent: event];\n     }\n \n+    Py_END_ALLOW_THREADS\n+\n     Py_RETURN_NONE;\n }\n \n", "test_patch": "", "problem_statement": "[Bug]: pyplot hangs at pause in sonoma 14.3 with backend MacOSX\n### Bug summary\n\nWhen I use pyplot.pause, the code hangs and I have to kill the python session.\n\n### Code for reproduction\n\n```python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nx = np.linspace(0,1,100)\r\ny = np.sin(x)\r\nz = np.cos(x)\r\n\r\nplt.plot(x,y)\r\nplt.draw()\r\nplt.pause(1) # <== hangs here\r\nplt.plot(x,z)\r\nplt.show()\n```\n\n\n### Actual outcome\n\nCode hangs at `plt.pause`.\n\n### Expected outcome\n\nCode should run fully.\n\n### Additional information\n\nThis is happening after I upgrade to sonoma 14.3\n\n### Operating system\n\nMac os sonoma 14.3\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.10.12\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n", "hints_text": "Backend TkAgg works fine.\nI am on Python 3.8.17 with Matplotlib 3.6.2, on macOS Sonoma 14.3 and I am facing a similar issue, probably related: the session does not hang, but I see only one plot, as if the `plot(x,z)` line did not exist.\nThanks for the report - I can reproduce this on the current `main` branch. I'm on macOS 14.3 (Sonoma). Thanks for sharing that it becomes a problem after updating the OS to macOS 14 too.\r\n\r\nWorth noting that\r\n- I can't interrupt the process using cmd+c, but force quitting the Matplotlib window does close it.\r\n- I don't event get a plot showing up, just an empty Matplotlib window with no figure.\nEDIT: Ignore this comment, I did the bisect wrong \ud83e\udd26 \r\n\r\nWith Matplotlib 3.7.3 this doesn't crash, but the second plot doesn't show up after the `plt.pause()` call. The change in behaviour from not crashing to crashing bisects to 059c8eee93ee7192f5e15df11251ef220f4c1b13 from https://github.com/matplotlib/matplotlib/pull/25966 (cc @anntzer). As of 059c8eee93ee7192f5e15df11251ef220f4c1b13 I get the following error message after the 1 second pause has ended:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/dstansby/software/matplotlib/test.py\", line 12, in <module>\r\n    plt.show()\r\n  File \"/Users/dstansby/software/matplotlib/lib/matplotlib/pyplot.py\", line 519, in show\r\n    return _get_backend_mod().show(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/dstansby/software/matplotlib/lib/matplotlib/backend_bases.py\", line 3437, in show\r\n    cls.mainloop()\r\n  File \"/Users/dstansby/software/matplotlib/lib/matplotlib/backends/backend_macosx.py\", line 185, in start_main_loop\r\n    _macosx.wake_on_fd_write(rsock.fileno())\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^\r\nAttributeError: module 'matplotlib.backends._macosx' has no attribute 'wake_on_fd_write'\r\n```\nMy bad - in the above comment I was forgetting to recompile at each commit.\r\n\r\nThis actually bisects back to 072226aca1787cd57b577a76d69d5fe7ad3df19a from https://github.com/matplotlib/matplotlib/pull/27290 (cc @ksunden)\nI'm on 14.2.1 (intel mac) and it is working as expected for me, so possibly related to 14.3 specifically.\r\n\r\n> I am on Python 3.8.17 with Matplotlib 3.6.2, on macOS Sonoma 14.3 and I am facing a similar issue, probably related: the session does not hang, but I see only one plot, as if the plot(x,z) line did not exist.\r\n\r\nI think this is expected behavior, there should be another `plt.draw()` before the final `plt.show(), or you can resize your window and the other line should show up.\nPrior to that commit, we were segfaulting on Python 3.12 when the window was resized with the MacOS backend.\r\n\r\n\r\nI can confirm the following:\r\n\r\n- On macOS 14.1.1, the problem is _not_ present\r\n- Upon upgrading to 14.3 I _do_ see the problem\r\n- reverting https://github.com/matplotlib/matplotlib/commit/072226aca1787cd57b577a76d69d5fe7ad3df19a _does_ make the `pause` work, but _also_ does in fact still segfault on resize.\r\n\r\nThe commit should only be ensuring GIL state (and subsequently releasing it), I'm not at all clear why that would _cause_ this... Especially since the only things happening between acquiring and releasing the GIL are freeing memory.\nDo we need to stick within Python's memory allocator? Some of this came in via: https://github.com/matplotlib/matplotlib/pull/17263\r\n\r\n```diff\r\ndiff --git a/src/_macosx.m b/src/_macosx.m\r\nindex 8038b72899..e8e7711dea 100755\r\n--- a/src/_macosx.m\r\n+++ b/src/_macosx.m\r\n@@ -1141,16 +1141,19 @@ - (void)setCanvas: (PyObject*)newCanvas\r\n static void _buffer_release(void* info, const void* data, size_t size) {\r\n     PyGILState_STATE gstate = PyGILState_Ensure();\r\n     PyBuffer_Release((Py_buffer *)info);\r\n-    free(info);\r\n+    PyMem_Free(info);\r\n     PyGILState_Release(gstate);\r\n }\r\n \r\n static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)\r\n {\r\n-    Py_buffer *buffer = malloc(sizeof(Py_buffer));\r\n+    PyGILState_STATE gstate = PyGILState_Ensure();\r\n+    Py_buffer *buffer = PyMem_Malloc(sizeof(Py_buffer));\r\n+    PyGILState_Release(gstate);\r\n \r\n     if (PyObject_GetBuffer(renderer, buffer, PyBUF_CONTIG_RO) == -1) {\r\n         PyErr_Print();\r\n+        _buffer_release(buffer, NULL, 0);\r\n         return 1;\r\n     }\r\n ```\n> The commit should only be ensuring GIL state (and subsequently releasing it), I'm not at all clear why that would cause this...\r\n\r\nMy guess is that there is a second lock involved (maybe in `free`, maybe in the OSX code that is calling our callback) that we are deadlocking against.  We already should have realized there are threads someplace due to the segfault (if no threads there can be no race to lose) so it at least still holds together conceptually.\nmaybe if we take the `free(...)` out of the GIL lock?", "created_at": "2024-02-07T21:20:32Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27754, "instance_id": "matplotlib__matplotlib-27754", "issue_numbers": ["11759", "0000"], "base_commit": "c2aa4ee1177452dc778813e3034c3f57d7db83d8", "patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 4d8c7e6b8e84..74348d17730d 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -2984,15 +2984,10 @@ def calc_arrows(UVW):\n         UVW = np.column_stack(input_args[3:]).astype(float)\n \n         # Normalize rows of UVW\n-        norm = np.linalg.norm(UVW, axis=1)\n-\n-        # If any row of UVW is all zeros, don't make a quiver for it\n-        mask = norm > 0\n-        XYZ = XYZ[mask]\n         if normalize:\n-            UVW = UVW[mask] / norm[mask].reshape((-1, 1))\n-        else:\n-            UVW = UVW[mask]\n+            norm = np.linalg.norm(UVW, axis=1)\n+            norm[norm == 0] = 1\n+            UVW = UVW / norm.reshape((-1, 1))\n \n         if len(XYZ) > 0:\n             # compute the shaft lines all at once with an outer product\n@@ -3006,7 +3001,7 @@ def calc_arrows(UVW):\n             # transpose to get a list of lines\n             heads = heads.swapaxes(0, 1)\n \n-            lines = [*shafts, *heads]\n+            lines = [*shafts, *heads[::2], *heads[1::2]]\n         else:\n             lines = []\n \n", "test_patch": "diff --git a/lib/mpl_toolkits/mplot3d/tests/baseline_images/test_axes3d/quiver3d_colorcoded.png b/lib/mpl_toolkits/mplot3d/tests/baseline_images/test_axes3d/quiver3d_colorcoded.png\nnew file mode 100644\nindex 000000000000..09b27c306c61\nBinary files /dev/null and b/lib/mpl_toolkits/mplot3d/tests/baseline_images/test_axes3d/quiver3d_colorcoded.png differ\ndiff --git a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\nindex 1c6bbdd91670..2b7bfc117f88 100644\n--- a/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/tests/test_axes3d.py\n@@ -836,7 +836,8 @@ def test_mixedsamplesraises():\n         ax.plot_surface(X, Y, Z, cstride=50, rcount=10)\n \n \n-@mpl3d_image_comparison(['quiver3d.png'], style='mpl20')\n+# remove tolerance when regenerating the test image\n+@mpl3d_image_comparison(['quiver3d.png'], style='mpl20', tol=0.003)\n def test_quiver3d():\n     plt.rcParams['axes3d.automargin'] = True  # Remove when image is regenerated\n     fig = plt.figure()\n@@ -884,6 +885,19 @@ def test_quiver3d_masked():\n     ax.quiver(x, y, z, u, v, w, length=0.1, pivot='tip', normalize=True)\n \n \n+@mpl3d_image_comparison(['quiver3d_colorcoded.png'], style='mpl20')\n+def test_quiver3d_colorcoded():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+\n+    x = y = dx = dz = np.zeros(10)\n+    z = dy = np.arange(10.)\n+\n+    color = plt.cm.Reds(dy/dy.max())\n+    ax.quiver(x, y, z, dx, dy, dz, colors=color)\n+    ax.set_ylim(0, 10)\n+\n+\n def test_patch_modification():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection=\"3d\")\n@@ -1555,7 +1569,8 @@ def test_minor_ticks():\n     ax.set_zticklabels([\"half\"], minor=True)\n \n \n-@mpl3d_image_comparison(['errorbar3d_errorevery.png'], style='mpl20')\n+# remove tolerance when regenerating the test image\n+@mpl3d_image_comparison(['errorbar3d_errorevery.png'], style='mpl20', tol=0.003)\n def test_errorbar3d_errorevery():\n     \"\"\"Tests errorevery functionality for 3D errorbars.\"\"\"\n     t = np.arange(0, 2*np.pi+.1, 0.01)\n", "problem_statement": "The color of the 3D arrow head does not match that of the arrow body\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nThe color of the 3D arrow head does not match that of the arrow body. (In fact, the two segments of head itself don't even match.)\r\n\r\nNot sure if it is related to #11746, so I posted it separately just to make things clearer.\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\n**Code for reproduction**\r\n\r\n<!--A minimum code snippet required to reproduce the bug, also minimizing the number of dependencies required-->\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\n\r\nx = np.zeros(10)\r\ny = np.zeros(10)\r\nz = np.arange(10.)\r\ndx = np.zeros(10)\r\ndy = np.arange(10.)\r\ndz = np.zeros(10)\r\n\r\nax = plt.figure().add_subplot(projection='3d')\r\n\r\narrow_color = plt.cm.Reds(dy/dy.max())\r\n\r\nax.quiver(x, y, z, dx, dy, dz, colors=arrow_color)\r\nax.set_ylim(0,10)\r\nplt.show()\r\n```\r\n\r\n**Actual outcome**\r\n\r\n<!--The output produced by the above code, which may be a screenshot, console output, etc.-->\r\n![test_arrow_head_color](https://user-images.githubusercontent.com/3490251/43104856-ae975e88-8e87-11e8-827f-5d7e7ae07c14.png)\r\n\r\n**Expected outcome**\r\n\r\n<!--A description of the expected outcome from the code snippet-->\r\n<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->\r\n\r\nThe entire arrow should have a single color.\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: macOS 10.13.6\r\n  * Matplotlib version: 2.2.2\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): MacOSX\r\n  * Python version: 2.7.15\r\n  * Jupyter version (if applicable): 5.6.0\r\n  * Other libraries: \r\n\r\n<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->\r\n<!--If you installed from conda, please specify which channel you used if not the default-->\r\n\r\nmatplotlib and Python were installed with Anaconda.\n", "hints_text": "This issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!", "created_at": "2024-02-07T20:29:34Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27747, "instance_id": "matplotlib__matplotlib-27747", "issue_numbers": ["27396"], "base_commit": "acfef85aad4bfb20e1de529839395fc84a86b860", "patch": "diff --git a/INSTALL.rst b/INSTALL.rst\nindex ac24c70ac518..3fb01c58d259 100644\n--- a/INSTALL.rst\n+++ b/INSTALL.rst\n@@ -1,1 +1,1 @@\n-See doc/users/installing/index.rst\n+See doc/install/index.rst\ndiff --git a/README.md b/README.md\nindex 6751e9a56e35..7b9c99597c0d 100644\n--- a/README.md\n+++ b/README.md\n@@ -32,7 +32,7 @@ and various graphical user interface toolkits.\n \n See the [install\n documentation](https://matplotlib.org/stable/users/installing/index.html),\n-which is generated from `/doc/users/installing/index.rst`\n+which is generated from `/doc/install/index.rst`\n \n ## Contribute\n \ndiff --git a/doc/api/prev_api_changes/api_changes_3.1.0.rst b/doc/api/prev_api_changes/api_changes_3.1.0.rst\nindex 18f25d459200..5b06af781938 100644\n--- a/doc/api/prev_api_changes/api_changes_3.1.0.rst\n+++ b/doc/api/prev_api_changes/api_changes_3.1.0.rst\n@@ -308,7 +308,7 @@ FreeType or libpng are not in the compiler or linker's default path, set the\n standard environment variables ``CFLAGS``/``LDFLAGS`` on Linux or OSX, or\n ``CL``/``LINK`` on Windows, to indicate the relevant paths.\n \n-See details in :doc:`/users/installing/index`.\n+See details in :doc:`/install/index`.\n \n Setting artist properties twice or more in the same call\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndiff --git a/doc/devel/contribute.rst b/doc/devel/contribute.rst\nindex 510b67eead91..8c297beaddc1 100644\n--- a/doc/devel/contribute.rst\n+++ b/doc/devel/contribute.rst\n@@ -266,7 +266,7 @@ document's URL roughly corresponds to its location in our folder structure:\n \n   .. grid-item:: information about the library\n \n-      * :file:`doc/users/installing/`\n+      * :file:`doc/install/`\n       * :file:`doc/project/`\n       * :file:`doc/users/resources/`\n       * :file:`doc/users/faq.rst`\ndiff --git a/doc/devel/development_setup.rst b/doc/devel/development_setup.rst\nindex 5b68172c2fc9..be99bed2fe5f 100644\n--- a/doc/devel/development_setup.rst\n+++ b/doc/devel/development_setup.rst\n@@ -165,7 +165,7 @@ must be installed separately.\n .. toctree::\n   :maxdepth: 2\n \n-  ../users/installing/dependencies\n+  ../install/dependencies\n \n \n .. _development-install:\ndiff --git a/doc/devel/document.rst b/doc/devel/document.rst\nindex d354ee5f238b..620c12c8db1c 100644\n--- a/doc/devel/document.rst\n+++ b/doc/devel/document.rst\n@@ -239,7 +239,7 @@ Examples:\n \n .. code-block:: rst\n \n-   See the :doc:`/users/installing/index`\n+   See the :doc:`/install/index`\n \n    See the tutorial :ref:`quick_start`\n \n@@ -247,14 +247,14 @@ Examples:\n \n will render as:\n \n-  See the :doc:`/users/installing/index`\n+  See the :doc:`/install/index`\n \n   See the tutorial :ref:`quick_start`\n \n   See the example :doc:`/gallery/lines_bars_and_markers/simple_plot`\n \n Sections can also be given reference labels.  For instance from the\n-:doc:`/users/installing/index` link:\n+:doc:`/install/index` link:\n \n .. code-block:: rst\n \ndiff --git a/doc/index.rst b/doc/index.rst\nindex 00814b5ccc71..1a385d2330af 100644\n--- a/doc/index.rst\n+++ b/doc/index.rst\n@@ -34,10 +34,10 @@ Install\n         .. toctree::\n             :maxdepth: 2\n \n-            users/installing/index\n+            install/index\n \n For more detailed instructions, see the\n-:doc:`installation guide <users/installing/index>`.\n+:doc:`installation guide <install/index>`.\n \n Learn\n =====\ndiff --git a/doc/users/installing/dependencies.rst b/doc/install/dependencies.rst\nsimilarity index 99%\nrename from doc/users/installing/dependencies.rst\nrename to doc/install/dependencies.rst\nindex fa666d280732..45dc249832ca 100644\n--- a/doc/users/installing/dependencies.rst\n+++ b/doc/install/dependencies.rst\n@@ -1,4 +1,5 @@\n-.. redirect-from: /devel/dependencies\n+.. redirect-from:: /devel/dependencies\n+.. redirect-from:: /users/installing/dependencies\n \n .. _dependencies:\n \n@@ -391,7 +392,7 @@ The additional Python packages required to build the\n \n The content of :file:`doc-requirements.txt` is also shown below:\n \n-.. include:: ../../../requirements/doc/doc-requirements.txt\n+.. include:: ../../requirements/doc/doc-requirements.txt\n    :literal:\n \n \ndiff --git a/doc/users/installing/environment_variables_faq.rst b/doc/install/environment_variables_faq.rst\nsimilarity index 98%\nrename from doc/users/installing/environment_variables_faq.rst\nrename to doc/install/environment_variables_faq.rst\nindex efbcd9980fd0..ba384343cc5a 100644\n--- a/doc/users/installing/environment_variables_faq.rst\n+++ b/doc/install/environment_variables_faq.rst\n@@ -3,6 +3,7 @@\n \n .. redirect-from:: /faq/installing_faq\n .. redirect-from:: /users/faq/installing_faq\n+.. redirect-from:: /users/installing/environment_variables_faq\n \n =====================\n Environment variables\ndiff --git a/doc/users/installing/index.rst b/doc/install/index.rst\nsimilarity index 99%\nrename from doc/users/installing/index.rst\nrename to doc/install/index.rst\nindex fa5187081b2f..ea8e29d71565 100644\n--- a/doc/users/installing/index.rst\n+++ b/doc/install/index.rst\n@@ -1,4 +1,5 @@\n .. redirect-from:: /users/installing\n+.. redirect-from:: /users/installing/index\n \n ************\n Installation\ndiff --git a/doc/users/installing/troubleshooting_faq.inc.rst b/doc/install/troubleshooting_faq.inc.rst\nsimilarity index 97%\nrename from doc/users/installing/troubleshooting_faq.inc.rst\nrename to doc/install/troubleshooting_faq.inc.rst\nindex 2314187a9542..d130813a80c6 100644\n--- a/doc/users/installing/troubleshooting_faq.inc.rst\n+++ b/doc/install/troubleshooting_faq.inc.rst\n@@ -1,5 +1,7 @@\n .. _troubleshooting-install:\n \n+.. redirect-from:: /users/installing/troubleshooting_faq\n+\n Troubleshooting\n ===============\n \ndiff --git a/doc/users/getting_started/index.rst b/doc/users/getting_started/index.rst\nindex 68d62232ddc9..ac896687979d 100644\n--- a/doc/users/getting_started/index.rst\n+++ b/doc/users/getting_started/index.rst\n@@ -22,7 +22,7 @@ Installation quick-start\n \n             conda install -c conda-forge matplotlib\n \n-Further details are available in the :doc:`Installation Guide </users/installing/index>`.\n+Further details are available in the :doc:`Installation Guide </install/index>`.\n \n \n Draw a first plot\ndiff --git a/doc/users/index.rst b/doc/users/index.rst\nindex eacb72749f81..2991e7d2b324 100644\n--- a/doc/users/index.rst\n+++ b/doc/users/index.rst\n@@ -102,4 +102,4 @@ Using Matplotlib\n     :hidden:\n \n     getting_started/index\n-    installing/index\n+    ../install/index\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 8d3ff39fc38e..0f21ac360e13 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -61,7 +61,7 @@ dev = [\n \n [project.urls]\n \"Homepage\" = \"https://matplotlib.org\"\n-\"Download\" = \"https://matplotlib.org/stable/users/installing/index.html\"\n+\"Download\" = \"https://matplotlib.org/stable/install/index.html\"\n \"Documentation\" = \"https://matplotlib.org\"\n \"Source Code\" = \"https://github.com/matplotlib/matplotlib\"\n \"Bug Tracker\" = \"https://github.com/matplotlib/matplotlib/issues\"\n", "test_patch": "", "problem_statement": "[Doc]: Move non user guide related content out of `/users`\n### Problem\r\n\r\nGiven that `/doc` is now the root folder/index, a lot of the indexing that used to live on the `users` index page is now on the `doc/index` and it's a little easier to find things when the code structure matches the indexing. Also currently it's a little hard to define what we mean by user guide and scoping the contents of the folder can help in defining the purpose. \r\n\r\n### Suggested improvement\r\n\r\n* `/users/project` -> `/doc/project` \r\n* `/users/installing`->`doc/installing` \r\n* `/users/{generate_credits, github_stats, *_whats_new, release_notes*}` -> `/doc/release`\r\n* `/getting_started/* -> quickstart guide\r\n* `/users/users_explain/*` -> `/users`\r\n\r\n#### Consensus\r\n\r\nAs discussed on the call, the rough consensus is this organization makes sense but should be done in stages, roughly one folder at a time. Largest concern was getting all the [redirects](https://matplotlib.org/devdocs/devel/document.html#move-documentation) correct and making sure that any links and instructions related to those docs are updated as needed. The stages are:\r\n\r\n- [x] move the `/project` folder up ->https://github.com/matplotlib/matplotlib/pull/27560\r\n- [x] move the `/installing` folder up -> (might be a good chance to change the name to install?) https://github.com/matplotlib/matplotlib/pull/27747\r\n- [ ] move the release related folders and docs {generate_credits, github_stats, *_whats_new, release_notes*} into a folder and up one level\r\n- [ ] merge the contents in `users/getting_started` into the `gallery/users_explain/quickstart guide` and remove the `getting_started` folder\r\n- [ ] remove `doc/users` and rename `gallery/users_explain` to users \r\n\r\n#### Motivation\r\n\r\n* currently `/users/index/` is scoped to `users_explain` + `getting_started`, this would be matching structure to stated structure, in turn making it easier to find where a doc is to change it\r\n  * also means we can remove the symlink, which currently trips folks up when trying to edit documents under /user \r\n* the contents under `/project` are I think version independent (though we may want to keep the versioning on the site b/c the historicity is also important) but also for the most part should not be changed w/o consensus/streering-council sign off and it's a little easier to communicate that if it's not lumped with other user docs\r\n* I'm half/half on `/doc/install` b/c I understand why it would be inside a users guide but we also write those documents as a more general installation guide/reference for both \r\n* there are a lot of files related to the release process and unlike `/api/changes` it's not clear why they are here. \r\n\n", "hints_text": "@story645 I can start working on this now!", "created_at": "2024-02-05T01:21:59Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27729, "instance_id": "matplotlib__matplotlib-27729", "issue_numbers": ["27727", "0000"], "base_commit": "e470c70e99995b47555402e53a98fb6c815d4dce", "patch": "diff --git a/galleries/examples/images_contours_and_fields/colormap_normalizations.py b/galleries/examples/images_contours_and_fields/colormap_normalizations.py\nindex 40fa620df7b3..1d81336b4964 100644\n--- a/galleries/examples/images_contours_and_fields/colormap_normalizations.py\n+++ b/galleries/examples/images_contours_and_fields/colormap_normalizations.py\n@@ -13,85 +13,90 @@\n \n import matplotlib.colors as colors\n \n-# %%\n-# Lognorm: Instead of pcolor log10(Z1) you can have colorbars that have\n-# the exponential labels using a norm.\n-\n N = 100\n-X, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]\n \n-# A low hump with a spike coming out of the top.  Needs to have\n-# z/colour axis on a log scale, so we see both hump and spike.\n-# A linear scale only shows the spike.\n+# %%\n+# LogNorm\n+# -------\n+# This example data has a low hump with a spike coming out of its center. If plotted\n+# using a linear colour scale, then only the spike will be visible. To see both hump and\n+# spike, this requires the z/colour axis on a log scale.\n+#\n+# Instead of transforming the data with ``pcolor(log10(Z))``, the color mapping can be\n+# made logarithmic using a `.LogNorm`.\n \n+X, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]\n Z1 = np.exp(-X**2 - Y**2)\n Z2 = np.exp(-(X * 10)**2 - (Y * 10)**2)\n Z = Z1 + 50 * Z2\n \n fig, ax = plt.subplots(2, 1)\n \n-pcm = ax[0].pcolor(X, Y, Z,\n-                   norm=colors.LogNorm(vmin=Z.min(), vmax=Z.max()),\n-                   cmap='PuBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[0], extend='max')\n-\n-pcm = ax[1].pcolor(X, Y, Z, cmap='PuBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[1], extend='max')\n+pcm = ax[0].pcolor(X, Y, Z, cmap='PuBu_r', shading='nearest')\n+fig.colorbar(pcm, ax=ax[0], extend='max', label='linear scaling')\n \n+pcm = ax[1].pcolor(X, Y, Z, cmap='PuBu_r', shading='nearest',\n+                   norm=colors.LogNorm(vmin=Z.min(), vmax=Z.max()))\n+fig.colorbar(pcm, ax=ax[1], extend='max', label='LogNorm')\n \n # %%\n-# PowerNorm: Here a power-law trend in X partially obscures a rectified\n-# sine wave in Y. We can remove the power law using a PowerNorm.\n+# PowerNorm\n+# ---------\n+# This example data mixes a power-law trend in X with a rectified sine wave in Y. If\n+# plotted using a linear colour scale, then the power-law trend in X partially obscures\n+# the sine wave in Y.\n+#\n+# The power law can be removed using a `.PowerNorm`.\n \n X, Y = np.mgrid[0:3:complex(0, N), 0:2:complex(0, N)]\n-Z1 = (1 + np.sin(Y * 10.)) * X**2\n+Z = (1 + np.sin(Y * 10)) * X**2\n \n fig, ax = plt.subplots(2, 1)\n \n-pcm = ax[0].pcolormesh(X, Y, Z1, norm=colors.PowerNorm(gamma=1. / 2.),\n-                       cmap='PuBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[0], extend='max')\n+pcm = ax[0].pcolormesh(X, Y, Z, cmap='PuBu_r', shading='nearest')\n+fig.colorbar(pcm, ax=ax[0], extend='max', label='linear scaling')\n \n-pcm = ax[1].pcolormesh(X, Y, Z1, cmap='PuBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[1], extend='max')\n+pcm = ax[1].pcolormesh(X, Y, Z, cmap='PuBu_r', shading='nearest',\n+                       norm=colors.PowerNorm(gamma=0.5))\n+fig.colorbar(pcm, ax=ax[1], extend='max', label='PowerNorm')\n \n # %%\n-# SymLogNorm: two humps, one negative and one positive, The positive\n-# with 5-times the amplitude. Linearly, you cannot see detail in the\n-# negative hump.  Here we logarithmically scale the positive and\n-# negative data separately.\n+# SymLogNorm\n+# ----------\n+# This example data has two humps, one negative and one positive, The positive hump has\n+# 5 times the amplitude of the negative. If plotted with a linear colour scale, then\n+# the detail in the negative hump is obscured.\n+#\n+# Here we logarithmically scale the positive and negative data separately with\n+# `.SymLogNorm`.\n #\n # Note that colorbar labels do not come out looking very good.\n \n X, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]\n-Z = 5 * np.exp(-X**2 - Y**2)\n+Z1 = np.exp(-X**2 - Y**2)\n+Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\n+Z = (5 * Z1 - Z2) * 2\n \n fig, ax = plt.subplots(2, 1)\n \n-pcm = ax[0].pcolormesh(X, Y, Z,\n-                       norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,\n-                                              vmin=-1.0, vmax=1.0, base=10),\n-                       cmap='RdBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[0], extend='both')\n+pcm = ax[0].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       vmin=-np.max(Z))\n+fig.colorbar(pcm, ax=ax[0], extend='both', label='linear scaling')\n \n-pcm = ax[1].pcolormesh(X, Y, Z, cmap='RdBu_r', vmin=-np.max(Z),\n-                       shading='nearest')\n-fig.colorbar(pcm, ax=ax[1], extend='both')\n+pcm = ax[1].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       norm=colors.SymLogNorm(linthresh=0.015,\n+                                              vmin=-10.0, vmax=10.0, base=10))\n+fig.colorbar(pcm, ax=ax[1], extend='both', label='SymLogNorm')\n \n # %%\n-# Custom Norm: An example with a customized normalization.  This one\n-# uses the example above, and normalizes the negative data differently\n-# from the positive.\n+# Custom Norm\n+# -----------\n+# Alternatively, the above example data can be scaled with a customized normalization.\n+# This one normalizes the negative data differently from the positive.\n \n-X, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]\n-Z1 = np.exp(-X**2 - Y**2)\n-Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\n-Z = (Z1 - Z2) * 2\n \n # Example of making your own norm.  Also see matplotlib.colors.\n # From Joe Kington: This one gives two different linear ramps:\n-\n-\n class MidpointNormalize(colors.Normalize):\n     def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):\n         self.midpoint = midpoint\n@@ -107,38 +112,42 @@ def __call__(self, value, clip=None):\n # %%\n fig, ax = plt.subplots(2, 1)\n \n-pcm = ax[0].pcolormesh(X, Y, Z,\n-                       norm=MidpointNormalize(midpoint=0.),\n-                       cmap='RdBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[0], extend='both')\n+pcm = ax[0].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       vmin=-np.max(Z))\n+fig.colorbar(pcm, ax=ax[0], extend='both', label='linear scaling')\n \n-pcm = ax[1].pcolormesh(X, Y, Z, cmap='RdBu_r', vmin=-np.max(Z),\n-                       shading='nearest')\n-fig.colorbar(pcm, ax=ax[1], extend='both')\n+pcm = ax[1].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       norm=MidpointNormalize(midpoint=0))\n+fig.colorbar(pcm, ax=ax[1], extend='both', label='Custom norm')\n \n # %%\n-# BoundaryNorm: For this one you provide the boundaries for your colors,\n-# and the Norm puts the first color in between the first pair, the\n-# second color between the second pair, etc.\n-\n-fig, ax = plt.subplots(3, 1, figsize=(8, 8))\n-ax = ax.flatten()\n-# even bounds gives a contour-like effect\n-bounds = np.linspace(-1, 1, 10)\n-norm = colors.BoundaryNorm(boundaries=bounds, ncolors=256)\n-pcm = ax[0].pcolormesh(X, Y, Z,\n-                       norm=norm,\n-                       cmap='RdBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[0], extend='both', orientation='vertical')\n+# BoundaryNorm\n+# ------------\n+# For arbitrarily dividing the color scale, the `.BoundaryNorm` may be used; by\n+# providing the boundaries for colors, this norm puts the first color in between the\n+# first pair, the second color between the second pair, etc.\n+\n+fig, ax = plt.subplots(3, 1, layout='constrained')\n \n-# uneven bounds changes the colormapping:\n-bounds = np.array([-0.25, -0.125, 0, 0.5, 1])\n+pcm = ax[0].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       vmin=-np.max(Z))\n+fig.colorbar(pcm, ax=ax[0], extend='both', orientation='vertical',\n+             label='linear scaling')\n+\n+# Evenly-spaced bounds gives a contour-like effect.\n+bounds = np.linspace(-2, 2, 11)\n norm = colors.BoundaryNorm(boundaries=bounds, ncolors=256)\n-pcm = ax[1].pcolormesh(X, Y, Z, norm=norm, cmap='RdBu_r', shading='nearest')\n-fig.colorbar(pcm, ax=ax[1], extend='both', orientation='vertical')\n+pcm = ax[1].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       norm=norm)\n+fig.colorbar(pcm, ax=ax[1], extend='both', orientation='vertical',\n+             label='BoundaryNorm\\nlinspace(-2, 2, 11)')\n \n-pcm = ax[2].pcolormesh(X, Y, Z, cmap='RdBu_r', vmin=-np.max(Z1),\n-                       shading='nearest')\n-fig.colorbar(pcm, ax=ax[2], extend='both', orientation='vertical')\n+# Unevenly-spaced bounds changes the colormapping.\n+bounds = np.array([-1, -0.5, 0, 2.5, 5])\n+norm = colors.BoundaryNorm(boundaries=bounds, ncolors=256)\n+pcm = ax[2].pcolormesh(X, Y, Z, cmap='RdBu_r', shading='nearest',\n+                       norm=norm)\n+fig.colorbar(pcm, ax=ax[2], extend='both', orientation='vertical',\n+             label='BoundaryNorm\\n[-1, -0.5, 0, 2.5, 5]')\n \n plt.show()\n", "test_patch": "", "problem_statement": "[Doc]: Text in the colormap normalization gallery doesn't match the code\n### Documentation Link\n\nhttps://matplotlib.org/stable/gallery/images_contours_and_fields/colormap_normalizations.html#sphx-glr-gallery-images-contours-and-fields-colormap-normalizations-py\n\n### Problem\n\n> SymLogNorm: two humps, one negative and one positive, The positive with 5-times the amplitude. Linearly, you cannot see detail in the negative hump. Here we logarithmically scale the positive and negative data separately.\r\n1. The equation `Z = 5 * np.exp(-X**2 - Y**2)` describes a simple Gaussian bell curve in two dimensions. There's no second hump.\r\n2. There are no negative data. A Gaussian is always positive.\r\n\r\n> Custom Norm: An example with a customized normalization. This one uses the example above, and normalizes the negative data differently from the positive.\r\n1. The equation is not the same as the previous one! This one does have the two humps promised above, but they have the same amplitude.\r\n2. The negative and positive data are normalized symmetrically. The top and bottom plots look almost the same.\n\n### Suggested improvement\n\nIt's a gallery example, so you can do whatever you want, just please make it consistent.\n", "hints_text": "It looks like this was probably accidentally changed with https://github.com/matplotlib/matplotlib/pull/9151/commits/32a2f7931b68e100898eb6c7c2ece2dc3590af82\n> It's a gallery example, so you can do whatever you want, just please make it consistent.\r\n\r\nAny preference? ", "created_at": "2024-02-01T10:04:49Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27692, "instance_id": "matplotlib__matplotlib-27692", "issue_numbers": ["14217", "0000"], "base_commit": "ff0497cc042332313afd3d2e9ba8f949c3857896", "patch": "diff --git a/doc/users/next_whats_new/update_arrow_patch.rst b/doc/users/next_whats_new/update_arrow_patch.rst\nnew file mode 100644\nindex 000000000000..894090587b5d\n--- /dev/null\n+++ b/doc/users/next_whats_new/update_arrow_patch.rst\n@@ -0,0 +1,30 @@\n+Update the position of arrow patch\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Adds a setter method that allows the user to update the position of the\n+`.patches.Arrow` object without requiring a full re-draw.\n+\n+.. plot::\n+    :include-source: true\n+    :alt: Example of changing the position of the arrow with the new ``set_data`` method.\n+\n+    import matplotlib as mpl\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Arrow\n+    import matplotlib.animation as animation\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xlim(0, 10)\n+    ax.set_ylim(0, 10)\n+\n+    a = mpl.patches.Arrow(2, 0, 0, 10)\n+    ax.add_patch(a)\n+\n+\n+    # code for modifying the arrow\n+    def update(i):\n+        a.set_data(x=.5, dx=i, dy=6, width=2)\n+\n+\n+    ani = animation.FuncAnimation(fig, update, frames=15, interval=90, blit=False)\n+\n+    plt.show()\ndiff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex ef52a00b059b..fc9d2c88897d 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -1297,12 +1297,7 @@ def __init__(self, x, y, dx, dy, *, width=1.0, **kwargs):\n             properties.\n         \"\"\"\n         super().__init__(**kwargs)\n-        self._patch_transform = (\n-            transforms.Affine2D()\n-            .scale(np.hypot(dx, dy), width)\n-            .rotate(np.arctan2(dy, dx))\n-            .translate(x, y)\n-            .frozen())\n+        self.set_data(x, y, dx, dy, width)\n \n     def get_path(self):\n         return self._path\n@@ -1310,6 +1305,39 @@ def get_path(self):\n     def get_patch_transform(self):\n         return self._patch_transform\n \n+    def set_data(self, x=None, y=None, dx=None, dy=None, width=None):\n+        \"\"\"\n+        Set `.Arrow` x, y, dx, dy and width.\n+        Values left as None will not be updated.\n+\n+        Parameters\n+        ----------\n+        x, y : float or None, default: None\n+            The x and y coordinates of the arrow base.\n+\n+        dx, dy : float or None, default: None\n+            The length of the arrow along x and y direction.\n+\n+        width : float or None, default: None\n+            Width of full arrow tail.\n+        \"\"\"\n+        if x is not None:\n+            self._x = x\n+        if y is not None:\n+            self._y = y\n+        if dx is not None:\n+            self._dx = dx\n+        if dy is not None:\n+            self._dy = dy\n+        if width is not None:\n+            self._width = width\n+        self._patch_transform = (\n+            transforms.Affine2D()\n+            .scale(np.hypot(self._dx, self._dy), self._width)\n+            .rotate(np.arctan2(self._dy, self._dx))\n+            .translate(self._x, self._y)\n+            .frozen())\n+\n \n class FancyArrow(Polygon):\n     \"\"\"\ndiff --git a/lib/matplotlib/patches.pyi b/lib/matplotlib/patches.pyi\nindex 287ea0f738ab..f6c9ddf75839 100644\n--- a/lib/matplotlib/patches.pyi\n+++ b/lib/matplotlib/patches.pyi\n@@ -181,7 +181,14 @@ class Arrow(Patch):\n     def __init__(\n         self, x: float, y: float, dx: float, dy: float, *, width: float = ..., **kwargs\n     ) -> None: ...\n-\n+    def set_data(\n+        self,\n+        x: float | None = ...,\n+        y: float | None = ...,\n+        dx: float | None = ...,\n+        dy: float | None = ...,\n+        width: float | None = ...,\n+    ) -> None: ...\n class FancyArrow(Polygon):\n     def __init__(\n         self,\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex b1af0abbc573..9530bcd19130 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -931,3 +931,32 @@ def test_modifying_arc(fig_test, fig_ref):\n     fig_test.subplots().add_patch(arc2)\n     arc2.set_width(.5)\n     arc2.set_angle(20)\n+\n+\n+def test_arrow_set_data():\n+    fig, ax = plt.subplots()\n+    arrow = mpl.patches.Arrow(2, 0, 0, 10)\n+    expected1 = np.array(\n+       [[1.9,  0.],\n+        [2.1, -0.],\n+        [2.1, 8.],\n+        [2.3, 8.],\n+        [2., 10.],\n+        [1.7, 8.],\n+        [1.9, 8.],\n+        [1.9, 0.]]\n+    )\n+    assert np.allclose(expected1, np.round(arrow.get_verts(), 2))\n+\n+    expected2 = np.array(\n+        [[0.39, 0.04],\n+         [0.61, -0.04],\n+         [3.01, 6.36],\n+         [3.24, 6.27],\n+         [3.5, 8.],\n+         [2.56, 6.53],\n+         [2.79, 6.44],\n+         [0.39, 0.04]]\n+    )\n+    arrow.set_data(x=.5, dx=3, dy=8, width=1.2)\n+    assert np.allclose(expected2, np.round(arrow.get_verts(), 2))\n", "problem_statement": "[Feature request] Add a way to update the position of the Arrow patch.\nHi,\r\n\r\nCurrently, the `arrow` class doesn't let you update the coordinates after creating the patch. That is, one **must** remove the old patch and create a new one just to move the arrows. This seems fairly inefficient.\r\n\r\nWould it be possible to add some setter methods to let one change the arrow position and size without recreating a new one?\r\n\r\nThe motivation for this is that removing and adding a new patch requires a full re-draw (afaik) which is slow.\r\n\r\nThanks!\r\n\r\n**Matplotlib version**\r\n<!--Please specify your platform and versions of the relevant libraries you are using:-->\r\n  * Operating system: Windows 10\r\n  * Matplotlib version: 3.0.3\r\n  * Matplotlib backend (`print(matplotlib.get_backend())`): qt5agg\r\n  * Python version: 3.7\r\n\n", "hints_text": "### What needs  to be done:\r\n\r\n- The `_path` of the `Arrow` itself is stored in normalized coordinates and not modified.\r\n- Positioning is performed by the `_patch_transform`. This has to be recreated when chaning the position.\r\n- It's probably best to store `x, y, dx, dy, width` in private variables so that they can be reused for recreating the transform.\r\n\r\nThis can be used as an example to start with:\r\n\r\n~~~\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.patches import Arrow\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([0, 4], [10, 0])\r\n\r\na = Arrow(2, 0, 0, 10)\r\nax.add_patch(a)\r\n\r\n# code for modifing the arrow goes here.\r\n\r\nplt.show()\r\n~~~\nGiven that the transform needs to be recreated, I would not expect updating to be any faster than removing and recreating the arrow.  \r\nPossibly, making the `FancyArrowPatch` more user-friendly could be of higher priority.\nIt seems indeed, that the use of `Arrow` should be discouraged or even deprecated, because it suffers from the transform distorting it. This is essentially never desired.\nThis issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!\nProbably still relevant ", "created_at": "2024-01-24T09:14:57Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27685, "instance_id": "matplotlib__matplotlib-27685", "issue_numbers": ["25204", "0000"], "base_commit": "59f9b3c707da6888f0053cf66a2e61b25a21bd3b", "patch": "diff --git a/lib/matplotlib/_fontconfig_pattern.py b/lib/matplotlib/_fontconfig_pattern.py\nindex 6802c6ae24d7..a1341c633243 100644\n--- a/lib/matplotlib/_fontconfig_pattern.py\n+++ b/lib/matplotlib/_fontconfig_pattern.py\n@@ -13,7 +13,7 @@\n import re\n \n from pyparsing import (\n-    Optional, ParseException, Regex, StringEnd, Suppress, ZeroOrMore, oneOf)\n+    Group, Optional, ParseException, Regex, StringEnd, Suppress, ZeroOrMore, oneOf)\n \n \n _family_punc = r'\\\\\\-:,'\n@@ -61,7 +61,7 @@ def comma_separated(elem):\n     size = Regex(r\"([0-9]+\\.?[0-9]*|\\.[0-9]+)\")\n     name = Regex(r\"[a-z]+\")\n     value = Regex(fr\"([^{_value_punc}]|(\\\\[{_value_punc}]))*\")\n-    prop = (name + Suppress(\"=\") + comma_separated(value)) | oneOf(_CONSTANTS)\n+    prop = Group((name + Suppress(\"=\") + comma_separated(value)) | oneOf(_CONSTANTS))\n     return (\n         Optional(comma_separated(family)(\"families\"))\n         + Optional(\"-\" + comma_separated(size)(\"sizes\"))\ndiff --git a/lib/matplotlib/_mathtext.py b/lib/matplotlib/_mathtext.py\nindex 86091f79d5bb..6e4df209b1f9 100644\n--- a/lib/matplotlib/_mathtext.py\n+++ b/lib/matplotlib/_mathtext.py\n@@ -2030,10 +2030,18 @@ def csnames(group: str, names: Iterable[str]) -> Regex:\n         # elements is important for speed.)\n         p.auto_delim       = Forward()\n         p.placeable        = Forward()\n+        p.named_placeable  = Forward()\n         p.required_group   = Forward()\n         p.optional_group   = Forward()\n         p.token            = Forward()\n \n+        # Workaround for placable being part of a cycle of definitions\n+        # calling `p.placeable(\"name\")` results in a copy, so not guaranteed\n+        # to get the definition added after it is used.\n+        # ref https://github.com/matplotlib/matplotlib/issues/25204\n+        # xref https://github.com/pyparsing/pyparsing/issues/95\n+        p.named_placeable <<= p.placeable\n+\n         set_names_and_parse_actions()  # for mutually recursive definitions.\n \n         p.optional_group <<= \"{\" + ZeroOrMore(p.token)(\"group\") + \"}\"\n@@ -2043,7 +2051,7 @@ def csnames(group: str, names: Iterable[str]) -> Regex:\n \n         p.accent = (\n             csnames(\"accent\", [*self._accent_map, *self._wide_accents])\n-            - p.placeable(\"sym\"))\n+            - p.named_placeable(\"sym\"))\n \n         p.function = csnames(\"name\", self._function_names)\n \n@@ -2089,7 +2097,7 @@ def csnames(group: str, names: Iterable[str]) -> Regex:\n              + OneOrMore(oneOf([\"_\", \"^\"]) - p.placeable)(\"subsuper\")\n              + Regex(\"'*\")(\"apostrophes\"))\n             | Regex(\"'+\")(\"apostrophes\")\n-            | (p.placeable(\"nucleus\") + Regex(\"'*\")(\"apostrophes\"))\n+            | (p.named_placeable(\"nucleus\") + Regex(\"'*\")(\"apostrophes\"))\n         )\n \n         p.simple = p.space | p.customspace | p.font | p.subsuper\n", "test_patch": "", "problem_statement": "[Bug]: Pyparsing warnings emitted in mathtext\n### Bug summary\r\n\r\nWhen plotting anything with at least one logarithmic axes (`plt.semilogx()`, `plt.semilogy()`, `plt.loglog()`) I get two warnings emitted due to code in `_mathtext.py`. These warnings are not emitted by default, but appears when running Python with e.g. [`-Wdefault`](https://docs.python.org/3/using/cmdline.html#cmdoption-W).\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nplt.semilogx([1, 2], [3, 4])\r\nplt.savefig('plot.png')\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\n/path/to/python/lib/python3.9/site-packages/matplotlib/_mathtext.py:1871: UserWarning: warn_name_set_on_empty_Forward: setting results name 'sym' on Forward expression that has no contained expression\r\n  - p.placeable(\"sym\"))\r\n/path/to/python/lib/python3.9/site-packages/matplotlib/_mathtext.py:1876: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'name' on ZeroOrMore expression collides with 'name' on contained expression\r\n  \"{\" + ZeroOrMore(p.simple | p.unknown_symbol)(\"name\") + \"}\")\r\n```\r\n\r\n### Expected outcome\r\n\r\nNo warnings/text should be printed.\r\n\r\n### Additional information\r\n\r\nTo see the warnings from the above code, save it to e.g. `test.py` and run it as either\r\n```bash\r\npython -Wdefault test.py\r\n```\r\nor\r\n```\r\nPYTHONWARNINGS=default python test.py\r\n```\r\n\r\nThe two warnings are triggered by the following lines within `matplotlib/_mathtext.py`:\r\n```python3\r\n        p.accent <<= (\r\n            csnames(\"accent\", [*self._accent_map, *self._wide_accents])\r\n            - p.placeable(\"sym\")\r\n```\r\n\r\n```python3\r\n        p.operatorname <<= cmd(\r\n            r\"\\operatorname\",\r\n            \"{\" + ZeroOrMore(p.simple | p.unknown_symbol)(\"name\") + \"}\")\r\n```\r\nwhere the various attributes on `p` are instances of `pyparsing.Forward`.\r\n\r\nThe warnings appear with Pyparsing versions 3.0.0\u20133.0.9 but not prior to 3.0.0 (e.g. 2.4.7). Also, the warnings only appear for Matplotlib versions 3.6.0\u20133.6.3, not e.g. 3.5.3\r\n\r\n\r\n### Operating system\r\n\r\nLinux Mint 20\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.8.5\r\n\r\n\r\n### Installation\r\n\r\npip\n", "hints_text": "Thanks for the clear report @jmd-dk.  After a couple of false starts (!) I have reproduced this with `main`:\r\n\r\n```\r\n/home/ruth/git_stuff/matplotlib/lib/matplotlib/_mathtext.py:1880: UserWarning: warn_name_set_on_empty_Forward: setting results name 'sym' on Forward expression that has no contained expression\r\n  - p.placeable(\"sym\"))\r\n/home/ruth/git_stuff/matplotlib/lib/matplotlib/_mathtext.py:1885: UserWarning: warn_ungrouped_named_tokens_in_collection: setting results name 'name' on ZeroOrMore expression collides with 'name' on contained expression\r\n  \"{\" + ZeroOrMore(p.simple | p.unknown_symbol)(\"name\") + \"}\")\r\n\r\n```\nThe second warning is fixed by #25200 (which was coincidentally opened just before this bug report :)).\nThe other warning can be suppressed with\r\n```patch\r\ndiff --git i/lib/matplotlib/_mathtext.py w/lib/matplotlib/_mathtext.py\r\nindex b41dca9d69..71af0dfdea 100644\r\n--- i/lib/matplotlib/_mathtext.py\r\n+++ w/lib/matplotlib/_mathtext.py\r\n@@ -13,6 +13,7 @@ import types\r\n import unicodedata\r\n\r\n import numpy as np\r\n+import pyparsing\r\n from pyparsing import (\r\n     Empty, Forward, Literal, NotAny, oneOf, OneOrMore, Optional,\r\n     ParseBaseException, ParseException, ParseExpression, ParseFatalException,\r\n@@ -1875,9 +1876,11 @@ class Parser:\r\n\r\n         p.customspace <<= cmd(r\"\\hspace\", \"{\" + p.float_literal(\"space\") + \"}\")\r\n\r\n-        p.accent <<= (\r\n-            csnames(\"accent\", [*self._accent_map, *self._wide_accents])\r\n-            - p.placeable(\"sym\"))\r\n+        with cbook._setattr_cm(\r\n+                pyparsing.__diag__, warn_name_set_on_empty_Forward=False):\r\n+            p.accent <<= (\r\n+                csnames(\"accent\", [*self._accent_map, *self._wide_accents])\r\n+                - p.placeable(\"sym\"))\r\n\r\n         p.function <<= csnames(\"name\", self._function_names)\r\n         p.operatorname <<= cmd(\r\n```\r\nbut it's not really clear to me whether it's actually warning about a problematic practice or not (one could move the definition of placeable above the one of accent to suppress the warning, but that actually changes the parsing behavior.\njust came across the very same problem which made our CI pipeline \"red\" (as run with `python -We`) after a matplotlib update - would be great address this issue!\r\nThanks", "created_at": "2024-01-22T20:45:31Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27678, "instance_id": "matplotlib__matplotlib-27678", "issue_numbers": ["27671", "0000"], "base_commit": "879bde7c3c653268884203207207d0b5600aa3d0", "patch": "diff --git a/.flake8 b/.flake8\nindex 40c07e0e324b..bfb5bb29b0e9 100644\n--- a/.flake8\n+++ b/.flake8\n@@ -63,6 +63,7 @@ per-file-ignores =\n     galleries/users_explain/text/text_props.py: E501\n \n     galleries/examples/animation/frame_grabbing_sgskip.py: E402\n+    galleries/examples/color/individual_colors_from_cmap.py: E402\n     galleries/examples/images_contours_and_fields/tricontour_demo.py: E201\n     galleries/examples/images_contours_and_fields/tripcolor_demo.py: E201\n     galleries/examples/images_contours_and_fields/triplot_demo.py: E201\ndiff --git a/galleries/examples/color/individual_colors_from_cmap.py b/galleries/examples/color/individual_colors_from_cmap.py\nnew file mode 100644\nindex 000000000000..572fb33e6f11\n--- /dev/null\n+++ b/galleries/examples/color/individual_colors_from_cmap.py\n@@ -0,0 +1,61 @@\n+\"\"\"\n+===========================================\n+Selecting individual colors from a colormap\n+===========================================\n+\n+Sometimes we want to use more colors or a different set of colors than the default color\n+cycle provides. Selecting individual colors from one of the provided colormaps can be a\n+convenient way to do this.\n+\n+Once we have hold of a `.Colormap` instance, the individual colors can be accessed\n+by passing it an index.  If we want a specific number of colors taken at regular\n+intervals from a continuous colormap, we can create a new colormap using the\n+`~.Colormap.resampled` method.\n+\n+For more details about manipulating colormaps, see :ref:`colormap-manipulation`.\n+\"\"\"\n+\n+import matplotlib.pyplot as plt\n+\n+import matplotlib as mpl\n+\n+n_lines = 21\n+\n+cmap = mpl.colormaps.get_cmap('plasma').resampled(n_lines)\n+\n+fig, ax = plt.subplots(layout='constrained')\n+\n+for i in range(n_lines):\n+    ax.plot([0, i], color=cmap(i))\n+\n+plt.show()\n+\n+# %%\n+# Instead of passing colors one by one to `~.Axes.plot`, we can replace the default\n+# color cycle with a different set of colors.  Specifying a `~cycler.cycler` instance\n+# within `.rcParams` achieves that.  See :ref:`color_cycle` for details.\n+\n+\n+from cycler import cycler\n+\n+cmap = mpl.colormaps.get_cmap('Dark2')\n+colors = cmap(range(cmap.N))  # cmap.N is number of unique colors in the colormap\n+\n+with mpl.rc_context({'axes.prop_cycle': cycler(color=colors)}):\n+\n+    fig, ax = plt.subplots(layout='constrained')\n+\n+    for i in range(n_lines):\n+        ax.plot([0, i])\n+\n+plt.show()\n+\n+# %%\n+#\n+# .. admonition:: References\n+#\n+#    The use of the following functions, methods, classes and modules is shown\n+#    in this example:\n+#\n+#    - `matplotlib.colors.Colormap`\n+#    - `matplotlib.colors.Colormap.resampled`\n", "test_patch": "", "problem_statement": "[ENH]: Adding more colours to represent the graphs \n### Problem\n\nMatplotlib's default color cycle of 10 colors is insufficient for effectively visualizing plots with more than 10 elements. The repetition of colors makes it difficult to differentiate and understand the data associated with individual elements. This presents a major challenge for data analysis and visualization, especially when dealing with large datasets.\n\n### Proposed solution\n\n1) Extend the default color cycle: This could involve adding more pre-defined color options to the existing palette.\r\n2) Utilize colormaps: Employing colormaps effectively can provide a wider range of distinct colors for visualizing many elements.\n", "hints_text": "Thanks for the suggestion: \r\n\r\n> 1. Extend the default color cycle: This could involve adding more pre-defined color options to the existing palette.\r\n\r\nI project that this won't happen. First, we are very conservative on changing appearance - as far as possible plots should look the same across versions. Second, It's difficult to choose many visually distinct colors. With effort one might go to 12 or 15 on top of the present colors, but there would still be people for whom this is not enough. Number of colors and distinguishability is a trade of that's best tuned to the actually needed number of colors for the case of many colors.\r\n\r\n> 2. Utilize colormaps: Employing colormaps effectively can provide a wider range of distinct colors for visualizing many elements.\r\n\r\nThis is already possible. You can create a color sequence from a colormap. I'll post an example  later (too cumbersome to write code on mobile).\r\n\nSomething like this?\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nn_colors = 20\r\ncmap = plt.get_cmap('plasma', n_colors)\r\n\r\nfig, ax = plt.subplots()\r\nfor i in range(n_colors):\r\n    ax.plot([0, i], color=cmap(i))\r\n    \r\nplt.show()\r\n```\r\n![image](https://github.com/matplotlib/matplotlib/assets/10599679/45ac98aa-0126-4955-924b-6b09e1aae6e9)\r\n\r\nShould we [add an example](https://matplotlib.org/stable/gallery/color/index.html) for this sort of thing?\n> Something like this?\r\n\r\nYes. And a second version with putting a cycler into an 'rc_context`.\r\n\r\n> Should we [add an example](https://matplotlib.org/stable/gallery/color/index.html) for this sort of thing?\r\n\r\nYes.", "created_at": "2024-01-20T15:32:26Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27665, "instance_id": "matplotlib__matplotlib-27665", "issue_numbers": ["27648", "0000"], "base_commit": "879bde7c3c653268884203207207d0b5600aa3d0", "patch": "diff --git a/doc/users/next_whats_new/inset_axes.rst b/doc/users/next_whats_new/inset_axes.rst\nnew file mode 100644\nindex 000000000000..d283dfc91b30\n--- /dev/null\n+++ b/doc/users/next_whats_new/inset_axes.rst\n@@ -0,0 +1,4 @@\n+``Axes.inset_axes`` is no longer experimental\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Axes.inset_axes is considered stable for use.\ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex b1343b5c65bb..ef7d3edfa0b9 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -331,9 +331,6 @@ def inset_axes(self, bounds, *, transform=None, zorder=5, **kwargs):\n         \"\"\"\n         Add a child inset Axes to this existing Axes.\n \n-        Warnings\n-        --------\n-        This method is experimental as of 3.0, and the API may change.\n \n         Parameters\n         ----------\n", "test_patch": "", "problem_statement": "[Doc]: `Axes.inset_axes` is still experimental\n### Documentation Link\r\n\r\nhttps://matplotlib.org/devdocs/api/_as_gen/matplotlib.axes.Axes.inset_axes.html#matplotlib.axes.Axes.inset_axes\r\n\r\n### Problem\r\n\r\nI just noticed that `Axes.inset_axes` is still marked as experimental.  It seems pretty well established to me, even recommended as a method for [placing colorbars](https://matplotlib.org/stable/users/explain/axes/colorbar_placement.html#using-inset-axes).\r\n\r\n### Suggested improvement\r\n\r\nIs it time to remove the \"experimental\" warning?\n", "hints_text": "Please assign this issue to me\nHello @Snehaaa18, thank you for your enthusiasm, but we do not assign issues.  Also I would like to wait for other maintainers to comment whether it should be done before anyone makes the change.\nI vote for dropping the experimental flag. The API is consistent and simple enough. And it's been around long enough that we can expect reasonable adoption so that any incompatible changes should better run through a deprecation cycle, whether we've still formally marked it as experimental or not.\nThere was talk of adding the ordinal locations to inset_axes. However I'm 99% certain that can be done in a backwards compatible way should someone want to do that.  \n> There was talk of adding the ordinal locations to inset_axes. However I'm 99% certain that can be done in a backwards compatible way should someone want to do that.\r\n\r\nYes it could. But I tend to not do it. You either don't have control over the size and margins of the inset, or the API get's really complex. I think keeping it to the an analogous API as `Figure.add_axes()` is good enough.\n### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nI think the work here is:\r\n\r\n* Remove the experimental note from the docstring.\r\n* Add a what\u2019s new entry that the method is no longer experimental (it may help to look at the similar entry for `subplot_mosaic` at #24891).\nWorking on it.\n@ShivamPathak99 you accidentally opened your pull request against @tacaswell 's fork of Matplotlib, so we can't merge it into main. Can you instead open your pull request against https://github.com/matplotlib/matplotlib?\n\nhttps://matplotlib.org/devdocs/devel/contribute.html#open-a-pull-request-on-matplotlib\n\nMy guess is you may have forked Tom's fork instead of forking against matplotlib/matplotlib", "created_at": "2024-01-18T14:30:05Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27657, "instance_id": "matplotlib__matplotlib-27657", "issue_numbers": ["27645", "0000"], "base_commit": "c447b60486e196fd4c76d72c848a22662fbed0e4", "patch": "diff --git a/lib/matplotlib/pylab.py b/lib/matplotlib/pylab.py\nindex 77eb6506d87f..a50779cf6d26 100644\n--- a/lib/matplotlib/pylab.py\n+++ b/lib/matplotlib/pylab.py\n@@ -60,6 +60,8 @@\n bytes = __import__(\"builtins\").bytes\n # We also don't want the numpy version of these functions\n abs = __import__(\"builtins\").abs\n+bool = __import__(\"builtins\").bool\n max = __import__(\"builtins\").max\n min = __import__(\"builtins\").min\n+pow = __import__(\"builtins\").pow\n round = __import__(\"builtins\").round\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5cafcdb5d2e9..530fddf127a8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5743,7 +5743,12 @@ def test_text_labelsize():\n     ax.tick_params(direction='out')\n \n \n-@image_comparison(['pie_default.png'])\n+# Note: The `pie` image tests were affected by Numpy 2.0 changing promotions\n+# (NEP 50). While the changes were only marginal, tolerances were introduced.\n+# These tolerances could likely go away when numpy 2.0 is the minimum supported\n+# numpy and the images are regenerated.\n+\n+@image_comparison(['pie_default.png'], tol=0.01)\n def test_pie_default():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n@@ -5756,7 +5761,7 @@ def test_pie_default():\n \n \n @image_comparison(['pie_linewidth_0', 'pie_linewidth_0', 'pie_linewidth_0'],\n-                  extensions=['png'], style='mpl20')\n+                  extensions=['png'], style='mpl20', tol=0.01)\n def test_pie_linewidth_0():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n@@ -5788,7 +5793,7 @@ def test_pie_linewidth_0():\n     plt.axis('equal')\n \n \n-@image_comparison(['pie_center_radius.png'], style='mpl20')\n+@image_comparison(['pie_center_radius.png'], style='mpl20', tol=0.005)\n def test_pie_center_radius():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n@@ -5808,7 +5813,7 @@ def test_pie_center_radius():\n     plt.axis('equal')\n \n \n-@image_comparison(['pie_linewidth_2.png'], style='mpl20')\n+@image_comparison(['pie_linewidth_2.png'], style='mpl20', tol=0.01)\n def test_pie_linewidth_2():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n@@ -5823,7 +5828,7 @@ def test_pie_linewidth_2():\n     plt.axis('equal')\n \n \n-@image_comparison(['pie_ccw_true.png'], style='mpl20')\n+@image_comparison(['pie_ccw_true.png'], style='mpl20', tol=0.01)\n def test_pie_ccw_true():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n@@ -5838,7 +5843,7 @@ def test_pie_ccw_true():\n     plt.axis('equal')\n \n \n-@image_comparison(['pie_frame_grid.png'], style='mpl20')\n+@image_comparison(['pie_frame_grid.png'], style='mpl20', tol=0.002)\n def test_pie_frame_grid():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n@@ -5865,7 +5870,7 @@ def test_pie_frame_grid():\n     plt.axis('equal')\n \n \n-@image_comparison(['pie_rotatelabels_true.png'], style='mpl20')\n+@image_comparison(['pie_rotatelabels_true.png'], style='mpl20', tol=0.009)\n def test_pie_rotatelabels_true():\n     # The slices will be ordered and plotted counter-clockwise.\n     labels = 'Hogwarts', 'Frogs', 'Dogs', 'Logs'\n@@ -5880,7 +5885,7 @@ def test_pie_rotatelabels_true():\n     plt.axis('equal')\n \n \n-@image_comparison(['pie_no_label.png'])\n+@image_comparison(['pie_no_label.png'], tol=0.01)\n def test_pie_nolabel_but_legend():\n     labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\n     sizes = [15, 30, 45, 10]\n@@ -5894,7 +5899,7 @@ def test_pie_nolabel_but_legend():\n     plt.legend()\n \n \n-@image_comparison(['pie_shadow.png'], style='mpl20')\n+@image_comparison(['pie_shadow.png'], style='mpl20', tol=0.002)\n def test_pie_shadow():\n     # Also acts as a test for the shade argument of Shadow\n     sizes = [15, 30, 45, 10]\ndiff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex d77077340e8c..30cd5dfa844b 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -1379,38 +1379,38 @@ def test_scalarmappable_to_rgba(bytes):\n     # uint8 RGBA\n     x = np.ones((2, 3, 4), dtype=np.uint8)\n     expected = x.copy() if bytes else x.astype(np.float32)/255\n-    np.testing.assert_array_equal(sm.to_rgba(x, bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(x, bytes=bytes), expected)\n     # uint8 RGB\n     expected[..., 3] = alpha_1\n-    np.testing.assert_array_equal(sm.to_rgba(x[..., :3], bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(x[..., :3], bytes=bytes), expected)\n     # uint8 masked RGBA\n     xm = np.ma.masked_array(x, mask=np.zeros_like(x))\n     xm.mask[0, 0, 0] = True\n     expected = x.copy() if bytes else x.astype(np.float32)/255\n     expected[0, 0, 3] = 0\n-    np.testing.assert_array_equal(sm.to_rgba(xm, bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(xm, bytes=bytes), expected)\n     # uint8 masked RGB\n     expected[..., 3] = alpha_1\n     expected[0, 0, 3] = 0\n-    np.testing.assert_array_equal(sm.to_rgba(xm[..., :3], bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(xm[..., :3], bytes=bytes), expected)\n \n     # float RGBA\n     x = np.ones((2, 3, 4), dtype=float) * 0.5\n     expected = (x * 255).astype(np.uint8) if bytes else x.copy()\n-    np.testing.assert_array_equal(sm.to_rgba(x, bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(x, bytes=bytes), expected)\n     # float RGB\n     expected[..., 3] = alpha_1\n-    np.testing.assert_array_equal(sm.to_rgba(x[..., :3], bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(x[..., :3], bytes=bytes), expected)\n     # float masked RGBA\n     xm = np.ma.masked_array(x, mask=np.zeros_like(x))\n     xm.mask[0, 0, 0] = True\n     expected = (x * 255).astype(np.uint8) if bytes else x.copy()\n     expected[0, 0, 3] = 0\n-    np.testing.assert_array_equal(sm.to_rgba(xm, bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(xm, bytes=bytes), expected)\n     # float masked RGB\n     expected[..., 3] = alpha_1\n     expected[0, 0, 3] = 0\n-    np.testing.assert_array_equal(sm.to_rgba(xm[..., :3], bytes=bytes), expected)\n+    np.testing.assert_almost_equal(sm.to_rgba(xm[..., :3], bytes=bytes), expected)\n \n \n def test_failed_conversions():\n", "problem_statement": "[TST] Upcoming dependency test failures\nThe weekly build with nightly wheels from numpy and pandas\nhas failed. Check the logs for any updates that need to be\nmade in matplotlib.\nhttps://github.com/matplotlib/matplotlib/actions/runs/7510637551\n", "hints_text": "Some of this is #27624, but there are a number of image comparison failures  (and one array comparison failure) that are caused by something else (that I haven't tracked down yet)... very low RMS, but _something_ changed. \r\n\r\nMy entirely unproven (as yet) suspicion is that it is numpy 2.0 related changing some behavior. \nOkay, I have bisected at least the majority of the errors to:\r\n\r\nhttps://github.com/numpy/numpy/pull/23912/commits/197e61c6bbca7b35414f341f0596391ecf17a31f\r\n\r\n(From numpy/numpy#23912)\r\n\r\nWhich are related to [NEP50](https://numpy.org/neps/nep-0050-scalar-promotion.html)\r\n\r\nI'm a little iffy on the timing, as that was merged in October, but we only started seeing the failure within the last 2-3 weeks.\r\n\r\nThat said, the specific commit is changing the default value which can be overridden by env var, and changing back to \"legacy\" mode (i.e. disabling NEP 50 behavior) does in fact pass the tests.\r\n\r\nHowever, I think it is clear that at least as far as the `pie` changes go, it is a negligible result of different dtype rules in intermediate calculations and we can just add a tolerance to the tests.\r\n\r\nThere are two additional tests that I've not yet fully tracked down:\r\n\r\n- `FAILED lib/matplotlib/tests/test_basic.py::test_override_builtins`\r\n  - Likely related to numpy namespace changes, probably needs a slight adjustment to account for that change\r\n- `FAILED lib/matplotlib/tests/test_colors.py::test_scalarmappable_to_rgba[False] - AssertionError: `\r\n  - Appears to be caused by the same numpy change, may just need to be `np.assert_almost_equal` instead of `assert_equal`, as there is a slight amount of floating point rounding going on there.\nIndeed the `test_override_builtins` is related to numpy/numpy#25086\r\n\r\nThe extra things that are affected are `pow` and `bool`, I think I will add those to the list of things we set back as the `builtins` version at the bottom of `pylab.py`, and maintain current behavior there.", "created_at": "2024-01-15T22:52:32Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27613, "instance_id": "matplotlib__matplotlib-27613", "issue_numbers": ["27596", "0000"], "base_commit": "83aa3e41bf9d4de308e306521e0cb3f688952942", "patch": "diff --git a/lib/matplotlib/rcsetup.py b/lib/matplotlib/rcsetup.py\nindex cf4dd07a6b98..f730db0dee3b 100644\n--- a/lib/matplotlib/rcsetup.py\n+++ b/lib/matplotlib/rcsetup.py\n@@ -209,6 +209,20 @@ def validator(s):\n     validate_float, doc='return a list of floats')\n \n \n+def _validate_marker(s):\n+    try:\n+        return validate_int(s)\n+    except ValueError as e:\n+        try:\n+            return validate_string(s)\n+        except ValueError as e:\n+            raise ValueError('Supported markers are [string, int]') from e\n+\n+\n+_validate_markerlist = _listify_validator(\n+    _validate_marker, doc='return a list of markers')\n+\n+\n def _validate_pathlike(s):\n     if isinstance(s, (str, os.PathLike)):\n         # Store value as str because savefig.directory needs to distinguish\n@@ -645,7 +659,7 @@ def _validate_minor_tick_ndivs(n):\n         'markeredgecolor': validate_colorlist,\n         'markevery': validate_markeverylist,\n         'alpha': validate_floatlist,\n-        'marker': validate_stringlist,\n+        'marker': _validate_markerlist,\n         'hatch': validate_hatchlist,\n         'dashes': validate_dashlist,\n     }\n@@ -908,7 +922,7 @@ def _convert_validator_spec(key, conv):\n     \"lines.linewidth\":       validate_float,  # line width in points\n     \"lines.linestyle\":       _validate_linestyle,  # solid line\n     \"lines.color\":           validate_color,  # first color in color cycle\n-    \"lines.marker\":          validate_string,  # marker name\n+    \"lines.marker\":          _validate_marker,  # marker name\n     \"lines.markerfacecolor\": validate_color_or_auto,  # default color\n     \"lines.markeredgecolor\": validate_color_or_auto,  # default color\n     \"lines.markeredgewidth\": validate_float,\n@@ -957,7 +971,7 @@ def _convert_validator_spec(key, conv):\n     \"boxplot.meanline\":    validate_bool,\n \n     \"boxplot.flierprops.color\":           validate_color,\n-    \"boxplot.flierprops.marker\":          validate_string,\n+    \"boxplot.flierprops.marker\":          _validate_marker,\n     \"boxplot.flierprops.markerfacecolor\": validate_color_or_auto,\n     \"boxplot.flierprops.markeredgecolor\": validate_color,\n     \"boxplot.flierprops.markeredgewidth\": validate_float,\n@@ -982,7 +996,7 @@ def _convert_validator_spec(key, conv):\n     \"boxplot.medianprops.linestyle\": _validate_linestyle,\n \n     \"boxplot.meanprops.color\":           validate_color,\n-    \"boxplot.meanprops.marker\":          validate_string,\n+    \"boxplot.meanprops.marker\":          _validate_marker,\n     \"boxplot.meanprops.markerfacecolor\": validate_color,\n     \"boxplot.meanprops.markeredgecolor\": validate_color,\n     \"boxplot.meanprops.markersize\":      validate_float,\n@@ -1107,7 +1121,7 @@ def _convert_validator_spec(key, conv):\n     \"axes3d.zaxis.panecolor\":    validate_color,  # 3d background pane\n \n     # scatter props\n-    \"scatter.marker\":     validate_string,\n+    \"scatter.marker\":     _validate_marker,\n     \"scatter.edgecolors\": validate_string,\n \n     \"date.epoch\": _validate_date,\ndiff --git a/lib/matplotlib/rcsetup.pyi b/lib/matplotlib/rcsetup.pyi\nindex 70e94a7694a9..1538dac7510e 100644\n--- a/lib/matplotlib/rcsetup.pyi\n+++ b/lib/matplotlib/rcsetup.pyi\n@@ -39,6 +39,8 @@ def validate_int_or_None(s: Any) -> int | None: ...\n def validate_float(s: Any) -> float: ...\n def validate_float_or_None(s: Any) -> float | None: ...\n def validate_floatlist(s: Any) -> list[float]: ...\n+def _validate_marker(s: Any) -> int | str: ...\n+def _validate_markerlist(s: Any) -> list[int | str]: ...\n def validate_fonttype(s: Any) -> int: ...\n \n _auto_backend_sentinel: object\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_cycles.py b/lib/matplotlib/tests/test_cycles.py\nindex 9bbb9bc9f19c..4fa261619490 100644\n--- a/lib/matplotlib/tests/test_cycles.py\n+++ b/lib/matplotlib/tests/test_cycles.py\n@@ -27,6 +27,11 @@ def test_marker_cycle():\n     assert [l.get_marker() for l in ax.lines] == ['.', '*', 'x', '.']\n \n \n+def test_valid_marker_cycles():\n+    fig, ax = plt.subplots()\n+    ax.set_prop_cycle(cycler(marker=[1, \"+\", \".\", 4]))\n+\n+\n def test_marker_cycle_kwargs_arrays_iterators():\n     fig, ax = plt.subplots()\n     ax.set_prop_cycle(c=np.array(['r', 'g', 'y']),\n", "problem_statement": "[Bug]: Markers with numeric name like CARETLEFT cannot be specified using a cycler\n### Bug summary\n\nI want to cycle between multiple markerstyles, including those with a numeric value like CARETRIGHT as documented [here](https://matplotlib.org/stable/api/markers_api.html#module-matplotlib.markers), but I get an exception if I add one of those.\n\n### Code for reproduction\n\n```python\n#!/usr/bin/env python3\r\n\r\nfrom cycler import cycler\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.markers as mk\r\n\r\ncycle = cycler(marker=[\"+\",mk.CARETRIGHT])\r\n\r\nt=[0,1]\r\ny=[5,6]\r\n\r\nplt.rc('axes', prop_cycle=cycle)\r\nplt.plot(t,y)\r\nplt.show()\n```\n\n\n### Actual outcome\n\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mcd/bugs/bug-cycler.py\", line 11, in <module>\r\n    plt.rc('axes', prop_cycle=cycle)\r\n  File \"/usr/lib/python3.11/site-packages/matplotlib/pyplot.py\", line 670, in rc\r\n    matplotlib.rc(group, **kwargs)\r\n  File \"/usr/lib/python3.11/site-packages/matplotlib/__init__.py\", line 1062, in rc\r\n    rcParams[key] = v\r\n    ~~~~~~~~^^^^^\r\n  File \"/usr/lib/python3.11/site-packages/matplotlib/__init__.py\", line 734, in __setitem__\r\n    raise ValueError(f\"Key {key}: {ve}\") from None\r\nValueError: Key axes.prop_cycle: Could not convert 5 to str\r\n```\n\n### Expected outcome\n\nA plot using CARETLEFT as marker.\n\n### Additional information\n\nThis seems like it has to do with the fact, that some markers are referred to by number and not by a string like \"+\".\r\nI don't know whether the problem is in matplotlib, cycler or the combination of both.\n\n### Operating system\n\nArtix Linux\n\n### Matplotlib Version\n\n3.8.1\n\n### Matplotlib Backend\n\nGTK4Agg\n\n### Python version\n\nPython 3.11.6\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nLinux package manager\n", "hints_text": "Looks like the validator for the `marker` property is a stringlist\r\nvalidator, so it is trying to coerce things into strings. Probably should\r\nupdate the validator.\r\n\r\nOn Wed, Jan 3, 2024 at 1:06\u202fPM castilma ***@***.***> wrote:\r\n\r\n> Bug summary\r\n>\r\n> I want to cycle between multiple markerstyles, including those with a\r\n> numeric value like CARETRIGHT as documented here\r\n> <https://matplotlib.org/stable/api/markers_api.html#module-matplotlib.markers>,\r\n> but I get an exception if I add one of those.\r\n> Code for reproduction\r\n>\r\n> #!/usr/bin/env python3\r\n> from cycler import cyclerimport matplotlib.pyplot as pltimport matplotlib.markers as mk\r\n> cycle = cycler(marker=[\"+\",mk.CARETRIGHT])\r\n> t=[0,1]y=[5,6]\r\n> plt.rc('axes', prop_cycle=cycle)plt.plot(t,y)plt.show()\r\n>\r\n> Actual outcome\r\n>\r\n> Traceback (most recent call last):\r\n>   File \"/home/mcd/bugs/bug-cycler.py\", line 11, in <module>\r\n>     plt.rc('axes', prop_cycle=cycle)\r\n>   File \"/usr/lib/python3.11/site-packages/matplotlib/pyplot.py\", line 670, in rc\r\n>     matplotlib.rc(group, **kwargs)\r\n>   File \"/usr/lib/python3.11/site-packages/matplotlib/__init__.py\", line 1062, in rc\r\n>     rcParams[key] = v\r\n>     ~~~~~~~~^^^^^\r\n>   File \"/usr/lib/python3.11/site-packages/matplotlib/__init__.py\", line 734, in __setitem__\r\n>     raise ValueError(f\"Key {key}: {ve}\") from None\r\n> ValueError: Key axes.prop_cycle: Could not convert 5 to str\r\n>\r\n> Expected outcome\r\n>\r\n> A plot using CARETLEFT as marker.\r\n> Additional information\r\n>\r\n> This seems like it has to do with the fact, that some markers are referred\r\n> to by number and not by a string like \"+\".\r\n> I don't know whether the problem is in matplotlib, cycler or the\r\n> combination of both.\r\n> Operating system\r\n>\r\n> Artix Linux\r\n> Matplotlib Version\r\n>\r\n> 3.8.1\r\n> Matplotlib Backend\r\n>\r\n> GTK4Agg\r\n> Python version\r\n>\r\n> Python 3.11.6\r\n> Jupyter version\r\n>\r\n> *No response*\r\n> Installation\r\n>\r\n> Linux package manager\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27596>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AACHF6ELTISA2WV6D5ACXBLYMWM3TAVCNFSM6AAAAABBLZNEFCVHI2DSMVQWIX3LMV43ASLTON2WKOZSGA3DINBUGUZTKOI>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nMore specifically https://github.com/matplotlib/matplotlib/blob/8703dc5682d3655258d8917c1f8ef63cb1576dbb/lib/matplotlib/rcsetup.py#L648  needs to be updated to accept the int(/enum) values.\r\n\r\n```python\r\nIn [13]: plt.rcParams['lines.marker'] = mk.CARETRIGHT\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[13], line 1\r\n----> 1 plt.rcParams['lines.marker'] = mk.CARETRIGHT\r\n\r\nFile /usr/lib/python3.11/site-packages/matplotlib/__init__.py:734, in RcParams.__setitem__(self, key, val)\r\n    732         cval = self.validate[key](val)\r\n    733     except ValueError as ve:\r\n--> 734         raise ValueError(f\"Key {key}: {ve}\") from None\r\n    735     self._set(key, cval)\r\n    736 except KeyError as err:\r\n\r\nValueError: Key lines.marker: Could not convert 5 to str\r\n```\r\n\r\nis a simpler way exercise the same issue.\n### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nSteps:\r\n\r\n - update the marker validator to accept all valid marker specifications (atleast the integers, maybe the path and `Marker` classes as well)\r\n - add a test\r\n - add a whats new (if extended past integers)\r\n\r\nGood first issue because this is very narrowly scoped, but medium because there is some meta-programming in the validator code.  Some thought will need to be given to writing a validator that works for both \"live\" objects and for strings coming from reading and .matplotlibrc.\nThe problem might exist in several places such as\r\nhttps://github.com/matplotlib/matplotlib/blob/8703dc5682d3655258d8917c1f8ef63cb1576dbb/lib/matplotlib/rcsetup.py#L911\r\n\r\nOn Wed, Jan 3, 2024 at 1:38\u202fPM Thomas A Caswell ***@***.***>\r\nwrote:\r\n\r\n> Steps:\r\n>\r\n>    - update the marker validator to accept all valid marker\r\n>    specifications (atleast the integers, maybe the path and Marker\r\n>    classes as well)\r\n>    - add a test\r\n>    - add a whats new (if extended past integers)\r\n>\r\n> Good first issue because this is very narrowly scoped, but medium because\r\n> there is some meta-programming in the validator code. Some thought will\r\n> need to be given to writing a validator that works for both \"live\" objects\r\n> and for strings coming from reading and .matplotlibrc.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27596#issuecomment-1875801971>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AACHF6GY7VSBKB7VZ77OGN3YMWQTFAVCNFSM6AAAAABBLZNEFCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNZVHAYDCOJXGE>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n", "created_at": "2024-01-08T23:53:11Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27601, "instance_id": "matplotlib__matplotlib-27601", "issue_numbers": ["25967", "0000"], "base_commit": "c287b9f985c3d2231b4c975f8ad7580ce8cbb8ce", "patch": "diff --git a/galleries/examples/ticks/dollar_ticks.py b/galleries/examples/ticks/dollar_ticks.py\nindex 4186e8c369e9..7abf967c053b 100644\n--- a/galleries/examples/ticks/dollar_ticks.py\n+++ b/galleries/examples/ticks/dollar_ticks.py\n@@ -3,10 +3,11 @@\n Dollar ticks\n ============\n \n-Use a `~.ticker.FormatStrFormatter` to prepend dollar signs on y-axis labels.\n+Use a format string to prepend dollar signs on y-axis labels.\n \n .. redirect-from:: /gallery/pyplots/dollar_ticks\n \"\"\"\n+\n import matplotlib.pyplot as plt\n import numpy as np\n \ndiff --git a/lib/matplotlib/ticker.py b/lib/matplotlib/ticker.py\nindex 7a9010ec2a5b..50a505da154c 100644\n--- a/lib/matplotlib/ticker.py\n+++ b/lib/matplotlib/ticker.py\n@@ -336,10 +336,11 @@ class FormatStrFormatter(Formatter):\n     The format string should have a single variable format (%) in it.\n     It will be applied to the value (not the position) of the tick.\n \n-    Negative numeric values will use a dash, not a Unicode minus; use mathtext\n-    to get a Unicode minus by wrapping the format specifier with $ (e.g.\n-    \"$%g$\").\n+    Negative numeric values (e.g., -1) will use a dash, not a Unicode minus;\n+    use mathtext to get a Unicode minus by wrapping the format specifier with $\n+    (e.g. \"$%g$\").\n     \"\"\"\n+\n     def __init__(self, fmt):\n         self.fmt = fmt\n \n@@ -358,7 +359,16 @@ class StrMethodFormatter(Formatter):\n \n     The field used for the tick value must be labeled *x* and the field used\n     for the tick position must be labeled *pos*.\n+\n+    Negative numeric values (e.g., -1) will use a dash, not a Unicode minus;\n+    use mathtext to get a Unicode minus by wrapping the format specifier with $\n+    (e.g. \"${x}$\").\n+\n+    It is typically unnecessary to explicitly construct `.StrMethodFormatter`\n+    objects, as `~.Axis.set_major_formatter` directly accepts the format string\n+    itself.\n     \"\"\"\n+\n     def __init__(self, fmt):\n         self.fmt = fmt\n \n", "test_patch": "", "problem_statement": "[Doc]: dollar_ticks example refers to unused formatter classes\n### Documentation Link\n\nhttps://matplotlib.org/stable/gallery/ticks/dollar_ticks.html\n\n### Problem\n\nThe intro of the example and the backreferences list state that the example uses a FormatStrFormatter (i.e. using old-style %-formatting), but that is not the case (it uses a {}-format string with implicit formatter construction).\r\nThe comment in the code \"Use automatic StrMethodFormatter\" is technically true, but rather unhelpful as there's no reference to what that formatter is.\n\n### Suggested improvement\n\nAt least the text and backreferences should be modified, but one may also wonder whether this example is useful as standalone (it may be merged with another formatter example, or need more explanatory text, or rewording of the mention of StrMethodFormatter).\n", "hints_text": "", "created_at": "2024-01-05T12:27:00Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27595, "instance_id": "matplotlib__matplotlib-27595", "issue_numbers": ["25995", "0000"], "base_commit": "8703dc5682d3655258d8917c1f8ef63cb1576dbb", "patch": "diff --git a/src/_path_wrapper.cpp b/src/_path_wrapper.cpp\nindex cdab886d86df..72774576574a 100644\n--- a/src/_path_wrapper.cpp\n+++ b/src/_path_wrapper.cpp\n@@ -707,8 +707,8 @@ static PyObject *Py_is_sorted_and_has_non_nan(PyObject *self, PyObject *obj)\n {\n     bool result;\n \n-    PyArrayObject *array = (PyArrayObject *)PyArray_FromAny(\n-        obj, NULL, 1, 1, 0, NULL);\n+    PyArrayObject *array = (PyArrayObject *)PyArray_CheckFromAny(\n+        obj, NULL, 1, 1, NPY_ARRAY_NOTSWAPPED, NULL);\n \n     if (array == NULL) {\n         return NULL;\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_lines.py b/lib/matplotlib/tests/test_lines.py\nindex 68e378a20f88..80261b0ddb19 100644\n--- a/lib/matplotlib/tests/test_lines.py\n+++ b/lib/matplotlib/tests/test_lines.py\n@@ -246,6 +246,8 @@ def test_is_sorted_and_has_non_nan():\n     assert _path.is_sorted_and_has_non_nan(np.array([1, 2, 3]))\n     assert _path.is_sorted_and_has_non_nan(np.array([1, np.nan, 3]))\n     assert not _path.is_sorted_and_has_non_nan([3, 5] + [np.nan] * 100 + [0, 2])\n+    # [2, 256] byteswapped:\n+    assert not _path.is_sorted_and_has_non_nan(np.array([33554432, 65536], \">i4\"))\n     n = 2 * mlines.Line2D._subslice_optim_min_size\n     plt.plot([np.nan] * n, range(n))\n \n", "problem_statement": "[Bug]: _path.is_sorted is wrong for the non-native byteorder case\n### Bug summary\r\n\r\n_path.is_sorted always reads data from the buffer in native byteorder, thus it can give incorrect results when the input is in non-native byteorder.  (This is also true for is_sorted_and_has_non_nan in #25978.)\r\n\r\n### Code for reproduction\r\n\r\n```python\r\n# The array below reads as [2, 256] after byteswapping.\r\nmpl._path.is_sorted(np.array([33554432, 65536], \">i4\"))\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nTrue\r\n\r\n### Expected outcome\r\n\r\nFalse\r\n\r\n### Additional information\r\n\r\nWe don't actually really need to support any case other than native-order floats in is_sorted (because we only ever call it with a freshly constructed float array), so we should just restrict support to that case.\r\nIt may also be useful to inspect the other C APIs which may likewise be impacted by wrong byteorderness.\r\n\r\nI also doubt that the speed gain from having a specialized C implementation of is_sorted (compared to the plain numpy `nanmask = np.isnan(x); x_finite = x[~nanmask]; x_finite.size and (x_finite[1:] >= x_finite[:-1]).all()` or similar -- note that we already compute nanmask and x_finite below) is really worth the trouble.\r\n\r\n### Operating system\r\n\r\nmacos\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0.dev1128+g5438e94fa7\r\n\r\n### Matplotlib Backend\r\n\r\nany\r\n\r\n### Python version\r\n\r\n3.11\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\ngit checkout\n", "hints_text": "", "created_at": "2024-01-03T10:38:33Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27594, "instance_id": "matplotlib__matplotlib-27594", "issue_numbers": ["25979", "0000"], "base_commit": "8703dc5682d3655258d8917c1f8ef63cb1576dbb", "patch": "diff --git a/galleries/examples/event_handling/viewlims.py b/galleries/examples/event_handling/viewlims.py\nindex b47e3b5b0801..ebc3e6de5fb8 100644\n--- a/galleries/examples/event_handling/viewlims.py\n+++ b/galleries/examples/event_handling/viewlims.py\n@@ -14,21 +14,15 @@\n     You can copy and paste individual parts, or download the entire example\n     using the link at the bottom of the page.\n \"\"\"\n+\n+import functools\n+\n import matplotlib.pyplot as plt\n import numpy as np\n \n from matplotlib.patches import Rectangle\n \n \n-# We just subclass Rectangle so that it can be called with an Axes\n-# instance, causing the rectangle to update its shape to match the\n-# bounds of the Axes\n-class UpdatingRect(Rectangle):\n-    def __call__(self, ax):\n-        self.set_bounds(*ax.viewLim.bounds)\n-        ax.figure.canvas.draw_idle()\n-\n-\n # A class that will regenerate a fractal set as we zoom in, so that you\n # can actually see the increasing detail.  A box in the left panel will show\n # the area to which we are zoomed.\n@@ -40,9 +34,9 @@ def __init__(self, h=500, w=500, niter=50, radius=2., power=2):\n         self.radius = radius\n         self.power = power\n \n-    def compute_image(self, xstart, xend, ystart, yend):\n-        self.x = np.linspace(xstart, xend, self.width)\n-        self.y = np.linspace(ystart, yend, self.height).reshape(-1, 1)\n+    def compute_image(self, xlim, ylim):\n+        self.x = np.linspace(*xlim, self.width)\n+        self.y = np.linspace(*ylim, self.height).reshape(-1, 1)\n         c = self.x + 1.0j * self.y\n         threshold_time = np.zeros((self.height, self.width))\n         z = np.zeros(threshold_time.shape, dtype=complex)\n@@ -56,38 +50,43 @@ def compute_image(self, xstart, xend, ystart, yend):\n     def ax_update(self, ax):\n         ax.set_autoscale_on(False)  # Otherwise, infinite loop\n         # Get the number of points from the number of pixels in the window\n-        self.width, self.height = \\\n-            np.round(ax.patch.get_window_extent().size).astype(int)\n-        # Get the range for the new area\n-        vl = ax.viewLim\n-        extent = vl.x0, vl.x1, vl.y0, vl.y1\n+        self.width, self.height = ax.patch.get_window_extent().size.round().astype(int)\n         # Update the image object with our new data and extent\n-        im = ax.images[-1]\n-        im.set_data(self.compute_image(*extent))\n-        im.set_extent(extent)\n+        ax.images[-1].set(data=self.compute_image(ax.get_xlim(), ax.get_ylim()),\n+                          extent=(*ax.get_xlim(), *ax.get_ylim()))\n         ax.figure.canvas.draw_idle()\n \n \n md = MandelbrotDisplay()\n-Z = md.compute_image(-2., 0.5, -1.25, 1.25)\n-\n-fig1, (ax1, ax2) = plt.subplots(1, 2)\n-ax1.imshow(Z, origin='lower',\n-           extent=(md.x.min(), md.x.max(), md.y.min(), md.y.max()))\n-ax2.imshow(Z, origin='lower',\n-           extent=(md.x.min(), md.x.max(), md.y.min(), md.y.max()))\n-\n-rect = UpdatingRect(\n-    [0, 0], 0, 0, facecolor='none', edgecolor='black', linewidth=1.0)\n-rect.set_bounds(*ax2.viewLim.bounds)\n-ax1.add_patch(rect)\n-\n-# Connect for changing the view limits\n-ax2.callbacks.connect('xlim_changed', rect)\n-ax2.callbacks.connect('ylim_changed', rect)\n-\n-ax2.callbacks.connect('xlim_changed', md.ax_update)\n-ax2.callbacks.connect('ylim_changed', md.ax_update)\n-ax2.set_title(\"Zoom here\")\n+\n+fig1, (ax_full, ax_zoom) = plt.subplots(1, 2)\n+ax_zoom.imshow([[0]], origin=\"lower\")  # Empty initial image.\n+ax_zoom.set_title(\"Zoom here\")\n+\n+rect = Rectangle(\n+    [0, 0], 0, 0, facecolor=\"none\", edgecolor=\"black\", linewidth=1.0)\n+ax_full.add_patch(rect)\n+\n+\n+def update_rect(rect, ax):  # Let the rectangle track the bounds of the zoom axes.\n+    xlo, xhi = ax.get_xlim()\n+    ylo, yhi = ax.get_ylim()\n+    rect.set_bounds((xlo, ylo, xhi - xlo, yhi - ylo))\n+    ax.figure.canvas.draw_idle()\n+\n+\n+# Connect for changing the view limits.\n+ax_zoom.callbacks.connect(\"xlim_changed\", functools.partial(update_rect, rect))\n+ax_zoom.callbacks.connect(\"ylim_changed\", functools.partial(update_rect, rect))\n+\n+ax_zoom.callbacks.connect(\"xlim_changed\", md.ax_update)\n+ax_zoom.callbacks.connect(\"ylim_changed\", md.ax_update)\n+\n+# Initialize: trigger image computation by setting view limits; set colormap limits;\n+# copy image to full view.\n+ax_zoom.set(xlim=(-2, .5), ylim=(-1.25, 1.25))\n+im = ax_zoom.images[0]\n+ax_zoom.images[0].set(clim=(im.get_array().min(), im.get_array().max()))\n+ax_full.imshow(im.get_array(), extent=im.get_extent(), origin=\"lower\")\n \n plt.show()\n", "test_patch": "", "problem_statement": "[Doc]: Cleanup viewlims example\n### Documentation Link\n\nhttps://matplotlib.org/stable/gallery/event_handling/viewlims.html\n\n### Problem\n\nThe viewlims example is nice, but\r\n- subclassing Rectangle to make it callable and thus usable as a xlim_changed callback seems a bit weird, probably better to use some plain function callback that closes over the rectangle object.\r\n- accessing ax.viewLim is a bit unidiomatic, ax.get_xlim()/ax.get_ylim() seem like the normal approach.\n\n### Suggested improvement\n\n_No response_\n", "hints_text": "As far as the code goes itself, I think the `Rectangle` could be replaced by ` RectangleSelector` (with `interactive=True`, this works quite nicely), but I wonder what this example is showing specifically and whether it makes sense to do that.\nI think the advantage of using viewlims is that this also handles pans, zoomouts, etc.", "created_at": "2024-01-03T10:21:29Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27562, "instance_id": "matplotlib__matplotlib-27562", "issue_numbers": ["27554", "0000"], "base_commit": "e5098e0dc2e5da26f659f44ce758d09c54f6b656", "patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex e3e162a3d621..0ab02c403d0d 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -555,11 +555,15 @@ def _make_image(self, A, in_bbox, out_bbox, clip_bbox, magnification=1.0,\n                 if A.ndim == 2:  # _interpolation_stage == 'rgba'\n                     self.norm.autoscale_None(A)\n                     A = self.to_rgba(A)\n-                if A.shape[2] == 3:\n-                    A = _rgb_to_rgba(A)\n                 alpha = self._get_scalar_alpha()\n-                output_alpha = _resample(  # resample alpha channel\n-                    self, A[..., 3], out_shape, t, alpha=alpha)\n+                if A.shape[2] == 3:\n+                    # No need to resample alpha or make a full array; NumPy will expand\n+                    # this out and cast to uint8 if necessary when it's assigned to the\n+                    # alpha channel below.\n+                    output_alpha = (255 * alpha) if A.dtype == np.uint8 else alpha\n+                else:\n+                    output_alpha = _resample(  # resample alpha channel\n+                        self, A[..., 3], out_shape, t, alpha=alpha)\n                 output = _resample(  # resample rgb channels\n                     self, _rgb_to_rgba(A[..., :3]), out_shape, t, alpha=alpha)\n                 output[..., 3] = output_alpha  # recombine rgb and alpha\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py\nindex 4fb4e65137d4..9a40b9baa313 100644\n--- a/lib/matplotlib/tests/test_image.py\n+++ b/lib/matplotlib/tests/test_image.py\n@@ -268,6 +268,32 @@ def test_image_alpha():\n     ax3.imshow(Z, alpha=0.5, interpolation='nearest')\n \n \n+@mpl.style.context('mpl20')\n+@check_figures_equal(extensions=['png'])\n+def test_imshow_alpha(fig_test, fig_ref):\n+    np.random.seed(19680801)\n+\n+    rgbf = np.random.rand(6, 6, 3)\n+    rgbu = np.uint8(rgbf * 255)\n+    ((ax0, ax1), (ax2, ax3)) = fig_test.subplots(2, 2)\n+    ax0.imshow(rgbf, alpha=0.5)\n+    ax1.imshow(rgbf, alpha=0.75)\n+    ax2.imshow(rgbu, alpha=0.5)\n+    ax3.imshow(rgbu, alpha=0.75)\n+\n+    rgbaf = np.concatenate((rgbf, np.ones((6, 6, 1))), axis=2)\n+    rgbau = np.concatenate((rgbu, np.full((6, 6, 1), 255, np.uint8)), axis=2)\n+    ((ax0, ax1), (ax2, ax3)) = fig_ref.subplots(2, 2)\n+    rgbaf[:, :, 3] = 0.5\n+    ax0.imshow(rgbaf)\n+    rgbaf[:, :, 3] = 0.75\n+    ax1.imshow(rgbaf)\n+    rgbau[:, :, 3] = 127\n+    ax2.imshow(rgbau)\n+    rgbau[:, :, 3] = 191\n+    ax3.imshow(rgbau)\n+\n+\n def test_cursor_data():\n     from matplotlib.backend_bases import MouseEvent\n \n", "problem_statement": "[Bug]:  Large image draw performance deterioration in recent releases\n### Bug summary\r\n\r\nDraw performance for large images has deteriorated significantly between Matplotlib 3.1 and 3.8.  The biggest issue seems to arise when upgrading from 3.1. to 3.2\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport cProfile\r\nfrom profilehooks import profile\r\nimport tkinter as tk\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom matplotlib.backends.backend_tkagg import (FigureCanvas)\r\nfrom PIL import Image\r\nimport time\r\n\r\nclass Application(tk.Frame):\r\n\r\n        SIZE = 16000\r\n\r\n        def __init__(self, master=None):\r\n            \r\n            super().__init__(master)\r\n            self.figure = plt.figure('Diagram')\r\n            self.canvas = FigureCanvas(self.figure, self)\r\n            self.ax = plt.axes()\r\n            self.canvas.mpl_connect('button_press_event', self.toggle)\r\n            \r\n            self.border = 0\r\n            random_image = self.image_gen()\r\n            self.image = self.ax.imshow(random_image)\r\n                 \r\n            self.canvas.get_tk_widget().pack(side=tk.TOP,fill=tk.BOTH, expand=1)\r\n            self.pack(side=tk.TOP,fill=tk.BOTH, expand=1)\r\n\r\n        @profile(immediate=True)\r\n        def toggle(self, event):\r\n            self.border = 0 if self.border == Application.SIZE /4 else Application.SIZE /4 \r\n            self.ax.set_xlim(self.border, Application.SIZE - self.border)\r\n            self.ax.set_ylim(self.border, Application.SIZE - self.border)\r\n            t1= time.process_time()\r\n            self.canvas.draw()\r\n            print(\"Draw time:\", time.process_time() - t1)\r\n\r\n        def image_gen(self):\r\n            black = np.zeros((int(Application.SIZE / 8) , int(Application.SIZE / 8), 3),dtype='uint8')\r\n            white = np.ones((int(Application.SIZE / 8) , int(Application.SIZE / 8), 3),dtype='uint8') * 255\r\n            col1 = np.concatenate([white, black, white, black, white, black, white, black], axis=0)\r\n            col2  = np.concatenate([black, white, black, white, black, white, black, white], axis=0)\r\n            output = np.concatenate([col1, col2, col1, col2,col1, col2, col1, col2], axis=1)\r\n            im = Image.fromarray(output, 'RGB')\r\n            return im\r\n                      \r\nif __name__ == '__main__':\r\n          \r\n    root = tk.Tk()\r\n    app = Application(master=root)\r\n    root.state('zoomed')\r\n    app.mainloop()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n**When running Matplotlib 3.8.2**\r\n```\r\n         35152 function calls (34234 primitive calls) in 6.264 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 650 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    6.264    6.264 min_code.py:29(toggle)\r\n        1    0.000    0.000    6.255    6.255 backend_tkagg.py:9(draw)\r\n        1    0.000    0.000    6.175    6.175 backend_agg.py:381(draw)\r\n        1    0.000    0.000    6.168    6.168 artist.py:93(draw_wrapper)\r\n    130/1    0.001    0.000    6.168    6.168 artist.py:54(draw_wrapper)\r\n        1    0.000    0.000    6.168    6.168 figure.py:3134(draw)\r\n      2/1    0.000    0.000    6.161    6.161 image.py:113(_draw_list_compositing_images)\r\n        1    0.000    0.000    6.161    6.161 _base.py:3005(draw)\r\n        1    0.000    0.000    6.113    6.113 image.py:623(draw)\r\n        1    0.046    0.046    6.107    6.107 image.py:928(make_image)\r\n        1    0.041    0.041    6.061    6.061 image.py:333(_make_image)\r\n        2    3.877    1.939    3.877    1.939 image.py:215(_rgb_to_rgba)\r\n        2    0.000    0.000    2.142    1.071 image.py:160(_resample)\r\n        2    2.141    1.071    2.141    1.071 {built-in method matplotlib._image.resample}\r\n        1    0.000    0.000    0.080    0.080 backend_tkagg.py:13(blit)\r\n        1    0.000    0.000    0.080    0.080 _backend_tk.py:72(blit)\r\n      2/1    0.000    0.000    0.080    0.080 {method 'call' of '_tkinter.tkapp' objects}\r\n        1    0.000    0.000    0.080    0.080 _backend_tk.py:58(_blit)\r\n        1    0.080    0.080    0.080    0.080 {built-in method matplotlib.backends._tkagg.blit}\r\n        2    0.000    0.000    0.042    0.021 axis.py:1379(draw)\r\n       18    0.000    0.000    0.018    0.001 axis.py:287(draw)\r\n       39    0.001    0.000    0.013    0.000 text.py:915(get_window_extent)\r\n        4    0.000    0.000    0.013    0.003 axis.py:1311(_get_ticklabel_bboxes)\r\n        4    0.000    0.000    0.013    0.003 axis.py:1315(<listcomp>)\r\n       54    0.002    0.000    0.013    0.000 text.py:358(_get_layout)\r\n       43    0.001    0.000    0.012    0.000 text.py:734(draw)\r\n        6    0.000    0.000    0.010    0.002 patches.py:579(draw)\r\n        6    0.000    0.000    0.010    0.002 axis.py:1270(_update_ticks)\r\n        6    0.000    0.000    0.010    0.002 patches.py:530(_draw_paths_with_artist_properties)\r\n        6    0.000    0.000    0.009    0.001 backend_agg.py:95(draw_path)\r\n        6    0.009    0.001    0.009    0.001 {method 'draw_path' of 'matplotlib.backends._backend_agg.RendererAgg' objects}\r\n        1    0.000    0.000    0.009    0.009 {built-in method builtins.print}\r\n        4    0.000    0.000    0.009    0.002 run.py:448(write)\r\n        5    0.000    0.000    0.008    0.002 rpc.py:216(remotecall)\r\n        2    0.000    0.000    0.008    0.004 axis.py:2143(_get_tick_boxes_siblings)\r\n        5    0.000    0.000    0.008    0.002 rpc.py:246(asyncreturn)\r\n        5    0.000    0.000    0.008    0.002 rpc.py:290(getresponse)\r\n        5    0.000    0.000    0.008    0.002 rpc.py:306(_getresponse)\r\n        5    0.000    0.000    0.007    0.001 threading.py:280(wait)\r\n        4    0.000    0.000    0.007    0.002 rpc.py:606(__call__)\r\n```\r\n**When running Matplotlib 3.1.3**\r\n\r\n```\r\n         29643 function calls (28812 primitive calls) in 3.848 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 661 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    3.848    3.848 min_code.py:29(toggle)\r\n        1    0.000    0.000    3.814    3.814 backend_tkagg.py:8(draw)\r\n        1    0.000    0.000    3.552    3.552 backend_agg.py:382(draw)\r\n    130/1    0.001    0.000    3.547    3.547 artist.py:30(draw_wrapper)\r\n        1    0.000    0.000    3.547    3.547 figure.py:1661(draw)\r\n      2/1    0.000    0.000    3.540    3.540 image.py:117(_draw_list_compositing_images)\r\n        1    0.000    0.000    3.540    3.540 _base.py:2573(draw)\r\n        1    0.000    0.000    3.494    3.494 image.py:595(draw)\r\n        1    0.091    0.091    3.490    3.490 image.py:872(make_image)\r\n        1    0.002    0.002    3.399    3.399 image.py:255(_make_image)\r\n        2    3.192    1.596    3.192    1.596 image.py:163(_rgb_to_rgba)\r\n        1    0.000    0.000    0.240    0.240 _backend_tk.py:58(blit)\r\n        1    0.235    0.235    0.235    0.235 {built-in method matplotlib.backends._tkagg.blit}\r\n        2    0.204    0.102    0.205    0.102 {built-in method matplotlib._image.resample}\r\n        2    0.000    0.000    0.040    0.020 axis.py:1195(draw)\r\n        1    0.000    0.000    0.034    0.034 {built-in method builtins.print}\r\n        4    0.000    0.000    0.034    0.008 run.py:354(write)\r\n        5    0.000    0.000    0.033    0.007 rpc.py:217(remotecall)\r\n        5    0.000    0.000    0.032    0.006 rpc.py:247(asyncreturn)\r\n        5    0.000    0.000    0.032    0.006 rpc.py:291(getresponse)\r\n        5    0.000    0.000    0.032    0.006 rpc.py:307(_getresponse)\r\n        5    0.000    0.000    0.032    0.006 threading.py:263(wait)\r\n       10    0.032    0.003    0.032    0.003 {method 'acquire' of '_thread.lock' objects}\r\n        2    0.026    0.013    0.026    0.013 {method 'call' of '_tkinter.tkapp' objects}\r\n        4    0.000    0.000    0.025    0.006 rpc.py:560(__getattr__)\r\n        1    0.000    0.000    0.025    0.025 rpc.py:578(__getmethods)\r\n        1    0.000    0.000    0.021    0.021 __init__.py:1178(update_idletasks)\r\n       18    0.000    0.000    0.015    0.001 axis.py:289(draw)\r\n        4    0.000    0.000    0.015    0.004 axis.py:1074(_update_ticks)\r\n        8    0.000    0.000    0.011    0.001 ticker.py:2079(__call__)\r\n        6    0.000    0.000    0.011    0.002 patches.py:563(draw)\r\n        8    0.000    0.000    0.011    0.001 ticker.py:2083(tick_values)\r\n        8    0.000    0.000    0.011    0.001 ticker.py:2019(_raw_ticks)\r\n        6    0.000    0.000    0.010    0.002 backend_agg.py:119(draw_path)\r\n        6    0.010    0.002    0.010    0.002 {method 'draw_path' of 'matplotlib.backends._backend_agg.RendererAgg' objects}\r\n        8    0.000    0.000    0.009    0.001 axis.py:56(__init__)\r\n        4    0.000    0.000    0.009    0.002 rpc.py:607(__call__)\r\n       43    0.001    0.000    0.009    0.000 text.py:655(draw)\r\n       39    0.000    0.000    0.008    0.000 text.py:852(get_window_extent)\r\n        4    0.000    0.000    0.008    0.002 axis.py:1147(_get_tick_bboxes)\r\n```\r\n### Expected outcome\r\n\r\nI would hope that performance remained reasonable consistent or improved between versions.\r\n\r\n### Additional information\r\n\r\nI have only been able to trace this as far as _make_image.  The issue seems to persist regardless of interpolation method.\r\n\r\n### Operating system\r\n\r\nWindows 11 64-bit\r\n\r\n### Matplotlib Version\r\n\r\n3.2 upward\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\n3.6 for Matplotlib 3.1.3; 3.9 for Matplotlib 3.8.2\r\n\r\n### Jupyter version\r\n\r\nn/A\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "I know you stated that \r\n\r\n> The issue seems to persist regardless of interpolation method.\r\n\r\nBut I just want to double check whether you have tried the \"nearest\" interpolation method, as that was the default prior to v3.2\r\nhttps://matplotlib.org/stable/api/prev_api_changes/api_changes_3.2.0.html#default-image-interpolation\nI have tried both and it does not appear to make a material difference for me.\nCan you make a reproducible example that doesn't rely on having tk installed?  \nAs requested below.  It actually appears that _rgb_to_rgba may be the culprit\r\n\r\n```\r\nimport cProfile\r\nfrom profilehooks import profile\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom PIL import Image\r\nimport time\r\n\r\n\r\nSIZE = 16000\r\n\r\n         \r\n@profile(immediate=True)\r\ndef toggle(event):\r\n        global ax, fig , border\r\n        border = 0 if border == SIZE /4 else SIZE /4 \r\n        ax.set_xlim(border, SIZE - border)\r\n        ax.set_ylim(border, SIZE - border)\r\n        t1= time.process_time()\r\n        fig.canvas.draw()\r\n        print(\"Draw time:\", time.process_time() - t1)\r\n\r\ndef image_gen():\r\n    black = np.zeros((int(SIZE / 8) , int(SIZE / 8), 3),dtype='uint8')\r\n    white = np.ones((int(SIZE / 8) , int(SIZE / 8), 3),dtype='uint8') * 255\r\n    col1 = np.concatenate([white, black, white, black, white, black, white, black], axis=0)\r\n    col2  = np.concatenate([black, white, black, white, black, white, black, white], axis=0)\r\n    output = np.concatenate([col1, col2, col1, col2,col1, col2, col1, col2], axis=1)\r\n    im = Image.fromarray(output, 'RGB')\r\n    return im\r\n              \r\n\r\n          \r\nfig, ax = plt.subplots()\r\nfig.canvas.mpl_connect('button_press_event', toggle)    \r\nborder = 0\r\nrandom_image = image_gen()\r\nimage = ax.imshow(random_image, interpolation='none')\r\nplt.show()\r\n```\nAs a further reference point, executing the same code with matplotlib 2.2.2 gives the results below:\r\n\r\n```\r\n        22416 function calls (21710 primitive calls) in 1.865 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 656 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    1.865    1.865 min_code.py:12(toggle)\r\n        1    0.000    0.000    1.816    1.816 backend_agg.py:421(draw)\r\n     76/1    0.001    0.000    1.813    1.813 artist.py:47(draw_wrapper)\r\n        1    0.000    0.000    1.813    1.813 figure.py:1438(draw)\r\n      2/1    0.000    0.000    1.809    1.809 image.py:123(_draw_list_compositing_images)\r\n        1    0.000    0.000    1.809    1.809 _base.py:2528(draw)\r\n        1    0.000    0.000    1.785    1.785 image.py:569(draw)\r\n        1    0.034    0.034    1.780    1.780 image.py:832(make_image)\r\n        1    0.000    0.000    1.746    1.746 image.py:275(_make_image)\r\n        1    1.031    1.031    1.031    1.031 image.py:169(_rgb_to_rgba)\r\n        1    0.714    0.714    0.714    0.714 {built-in method matplotlib._image.resample}\r\n        1    0.000    0.000    0.049    0.049 {built-in method builtins.print}\r\n        4    0.000    0.000    0.049    0.012 run.py:354(write)\r\n        4    0.000    0.000    0.048    0.012 rpc.py:607(__call__)\r\n        4    0.000    0.000    0.048    0.012 rpc.py:217(remotecall)\r\n        4    0.000    0.000    0.048    0.012 rpc.py:247(asyncreturn)\r\n        4    0.000    0.000    0.048    0.012 rpc.py:291(getresponse)\r\n        4    0.000    0.000    0.048    0.012 rpc.py:307(_getresponse)\r\n        4    0.000    0.000    0.048    0.012 threading.py:263(wait)\r\n        8    0.048    0.006    0.048    0.006 {method 'acquire' of '_thread.lock' objects}\r\n        2    0.000    0.000    0.017    0.008 axis.py:1182(draw)\r\n        6    0.000    0.000    0.009    0.002 patches.py:507(draw)\r\n       18    0.000    0.000    0.008    0.000 axis.py:289(draw)\r\n        6    0.000    0.000    0.008    0.001 backend_agg.py:142(draw_path)\r\n        6    0.008    0.001    0.008    0.001 {method 'draw_path' of 'matplotlib.backends._backend_agg.RendererAgg' objects}\r\n        4    0.000    0.000    0.006    0.001 axis.py:1020(_update_ticks)\r\n        1    0.005    0.005    0.005    0.005 {method 'draw_image' of 'matplotlib.backends._backend_agg.RendererAgg' objects}\r\n       25    0.000    0.000    0.004    0.000 text.py:691(draw)\r\n       40    0.000    0.000    0.004    0.000 axis.py:967(iter_ticks)\r\n       18    0.000    0.000    0.004    0.000 lines.py:731(draw)\r\n        4    0.000    0.000    0.004    0.001 ticker.py:1943(__call__)\r\n        4    0.000    0.000    0.004    0.001 ticker.py:1947(tick_values)\r\n        4    0.000    0.000    0.003    0.001 ticker.py:1896(_raw_ticks)\r\n        1    0.000    0.000    0.003    0.003 backend_agg.py:442(get_renderer)\r\n        1    0.000    0.000    0.003    0.003 backend_agg.py:300(clear)\r\n        1    0.003    0.003    0.003    0.003 {method 'clear' of 'matplotlib.backends._backend_agg.RendererAgg' objects}\r\n       18    0.000    0.000    0.003    0.000 backend_agg.py:190(draw_text)\r\n        4    0.000    0.000    0.003    0.001 axis.py:74(__init__)\r\n  503/417    0.001    0.000    0.002    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\r\n        4    0.000    0.000    0.002    0.000 axis.py:1119(_get_tick_bboxes)\r\n```\r\n\r\nSo, on my machine:\r\n2.2.2->1.865 seconds\r\n3.1.3->3.848 seconds\r\n3.2.8->6.264 seconds\nThis is still hard for me to debug because it has a mouse click, which zooms on my machine, changing the size of the canvas.  Does this require the interactive component? \nHere is a version that is not interactive.  For me this takes about 1 second to execute on version 2.2.2 and about 2.7 seconds on version 3.8.2.\r\n\r\n```\r\nimport cProfile\r\nfrom profilehooks import profile\r\nimport matplotlib\r\nmatplotlib.use('agg')       \r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom PIL import Image\r\nimport time\r\n\r\n\r\nSIZE = 16000\r\n\r\n\r\n@profile(immediate=True)\r\ndef zoom():\r\n        global ax, fig , border\r\n        border = 0 if border == SIZE /4 else SIZE /4 \r\n        ax.set_xlim(border, SIZE - border)\r\n        ax.set_ylim(border, SIZE - border)\r\n        t1= time.process_time()\r\n        fig.canvas.draw()\r\n        print(\"Draw time:\", time.process_time() - t1)\r\n\r\ndef image_gen():\r\n    black = np.zeros((int(SIZE / 8) , int(SIZE / 8), 3),dtype='uint8')\r\n    white = np.ones((int(SIZE / 8) , int(SIZE / 8), 3),dtype='uint8') * 255\r\n    col1 = np.concatenate([white, black, white, black, white, black, white, black], axis=0)\r\n    col2  = np.concatenate([black, white, black, white, black, white, black, white], axis=0)\r\n    output = np.concatenate([col1, col2, col1, col2,col1, col2, col1, col2], axis=1)\r\n    im = Image.fromarray(output, 'RGB')\r\n    return im\r\n              \r\n\r\n   \r\nfig, ax = plt.subplots()\r\nborder = 0\r\nrandom_image = image_gen()\r\nimage = ax.imshow(random_image, interpolation='nearest')\r\nzoom()\r\nzoom()\r\n\r\n```\n`line_profiler` does point to `_rgb_to_rgba` as you've found:\r\n```\r\nTotal time: 3.64252 s\r\nFile: /home/elliott/code/matplotlib/lib/matplotlib/image.py\r\nFunction: _rgb_to_rgba at line 217\r\n\r\nLine #      Hits         Time  Per Hit   % Time  Line Contents\r\n==============================================================\r\n   217                                           @profile\r\n   218                                           def _rgb_to_rgba(A):\r\n   219                                               \"\"\"\r\n   220                                               Convert an RGB image to RGBA, as required by the image resample C++\r\n   221                                               extension.\r\n   222                                               \"\"\"\r\n   223         2         41.9     21.0      0.0      rgba = np.zeros((A.shape[0], A.shape[1], 4), dtype=A.dtype)\r\n   224         2    3446705.2    2e+06     94.6      rgba[:, :, :3] = A\r\n   225         2         14.3      7.1      0.0      if rgba.dtype == np.uint8:\r\n   226         2     195758.7  97879.4      5.4          rgba[:, :, 3] = 255\r\n   227                                               else:\r\n   228                                                   rgba[:, :, 3] = 1.0\r\n   229         2          1.9      0.9      0.0      return rgba\r\n```\r\n\r\nThere are two calls to it in `_make_image`:\r\n```\r\n   560         1          0.9      0.9      0.0                  if A.shape[2] == 3:\r\n   561         1    1840651.4    2e+06     48.5                      A = _rgb_to_rgba(A)\r\n   562         1          4.0      4.0      0.0                  alpha = self._get_scalar_alpha()\r\n   563         2     113653.9  56827.0      3.0                  output_alpha = _resample(  # resample alpha channel\r\n   564         1          4.0      4.0      0.0                      self, A[..., 3], out_shape, t, alpha=alpha)\r\n   565         2      36536.1  18268.0      1.0                  output = _resample(  # resample rgb channels\r\n   566         1    1801965.4    2e+06     47.5                      self, _rgb_to_rgba(A[..., :3]), out_shape, t, alpha=alpha)\r\n   567         1         64.7     64.7      0.0                  output[..., 3] = output_alpha  # recombine rgb and alpha\r\n   568\r\n```\r\n\r\nThe comments seem to indicate this is because the C++ extension needs it that way. But the first call to `_resample` is with just the alpha channel, which in this case is just 255, so that seems a waste (but there might be a real alpha channel in other cases.) The second call to `_resample` uses `_rgb_to_rgba(A[..., :3])`; in other words, it is using an opaque (255/1.0) alpha channel, not the original one. The other calls to `_resample` are with `A.ndim == 2`, aka 2D/non-RGB(A) data, in the earlier half of the `if` above this point of `_make_image`.\r\n\r\nSo if I've gone through all cases correctly, there is no Python code that _needs_ to call the resampler with RGBA data instead of RGB; it's just that way because it used to be that way?\nWe should be able to drop the first call with:\r\n```diff\r\ndiff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\r\nindex 8b672e5ad2..249f58bcb2 100644\r\n--- a/lib/matplotlib/image.py\r\n+++ b/lib/matplotlib/image.py\r\n@@ -555,11 +555,14 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\r\n                 if A.ndim == 2:  # _interpolation_stage == 'rgba'\r\n                     self.norm.autoscale_None(A)\r\n                     A = self.to_rgba(A)\r\n-                if A.shape[2] == 3:\r\n-                    A = _rgb_to_rgba(A)\r\n                 alpha = self._get_scalar_alpha()\r\n-                output_alpha = _resample(  # resample alpha channel\r\n-                    self, A[..., 3], out_shape, t, alpha=alpha)\r\n+                if A.shape[2] == 3:\r\n+                    # No need to resample alpha or make a full array; NumPy will expand\r\n+                    # this out when it's assigned to the alpha channel below.\r\n+                    output_alpha = 255 if A.dtype == np.uint8 else 1.0\r\n+                else:\r\n+                    output_alpha = _resample(  # resample alpha channel\r\n+                        self, A[..., 3], out_shape, t, alpha=alpha)\r\n                 output = _resample(  # resample rgb channels\r\n                     self, _rgb_to_rgba(A[..., :3]), out_shape, t, alpha=alpha)\r\n                 output[..., 3] = output_alpha  # recombine rgb and alpha\r\n```\r\nwhich cuts the time in half again. Removing the second one would require some spelunking into the image extension, though I'm not sure it's possible as it also cuts in Agg as well.\n@QuLogic Thanks for working on this.\r\n\r\nYour patch gives me the following error:\r\n```\r\nFile \"..........\\lib\\site-packages\\matplotlib\\image.py\", line 207, in _resample\r\n    _image.resample(data, out, transform,\r\nValueError: If 3D, input and output arrays must be RGBA with shape (M, N, 4); got trailing dimensions of 3 and 3 respectively\r\n```\nSorry. Retract that.  My error in applying the diff.  That does indeed help\nHowever, even with that patch, version 3.8.2 is, still 2.5 times slower than 2.2.2.\nFWIW, `_rgb_to_rgba` has not been touched since it was added in 2.0. Hence, the different run-times is a bit strange (unless there are different underlying datatypes or NumPy has done something drastic...).\r\n\r\nThe second major time consumer seems to be `_image.resample`, but that code seems mainly untouched as well, primarily a bit of type refactoring for 3.8. \r\n\r\nAnyway, for 3.9, the wrapper code is moved to pybind11, which hopefully should not degrade the performance further if nothing else...\n@oscasgus I had similarly compared the code bases and did not see major differences.  I have also done some testing with NumPy 1.19 vs 1.26, which are the relevant versions for my installs, and could not uncover a cause there either.  \r\n\r\nI am little suspicious that it may have to do with memory allocation.  I have profiled using memory_profiler for 2.2.2 and 3.8.2 as shown in these images\r\n![2 2 2](https://github.com/matplotlib/matplotlib/assets/4304514/5c23ef8d-b9cf-4d78-a926-423b4c853631)\r\n![3 8 2](https://github.com/matplotlib/matplotlib/assets/4304514/f035cf71-fa46-4115-9475-334c001f83de)\r\n\r\nHere is the line level trace for 2.2.2\r\n```\r\nLine #    Mem usage    Increment  Occurrences   Line Contents\r\n=============================================================\r\n    15 2501.785 MiB 2501.785 MiB           1   @profile\r\n    16                                         def zoom():\r\n    17                                                 global ax, fig , border\r\n    18 2501.785 MiB    0.000 MiB           1           border = 0 if border == SIZE /4 else SIZE /4\r\n    19 2501.785 MiB    0.000 MiB           1           ax.set_xlim(border, SIZE - border)\r\n    20 2501.785 MiB    0.000 MiB           1           ax.set_ylim(border, SIZE - border)\r\n    21 2501.785 MiB    0.000 MiB           1           t1= time.process_time()\r\n    22 1772.469 MiB -729.316 MiB           1           fig.canvas.draw()\r\n    23 1772.473 MiB    0.004 MiB           1           print(\"Draw time:\", time.process_time() - t1)\r\n```\r\nAnd the line level trace for 3.8,2\r\n```\r\nLine #    Mem usage    Increment  Occurrences   Line Contents\r\n=============================================================\r\n    15 1772.359 MiB 1772.359 MiB           1   @profile\r\n    16                                         def zoom():\r\n    17                                                 global ax, fig , border\r\n    18 1772.359 MiB    0.000 MiB           1           border = 0 if border == SIZE /4 else SIZE /4\r\n    19 1772.359 MiB    0.000 MiB           1           ax.set_xlim(border, SIZE - border)\r\n    20 1772.359 MiB    0.000 MiB           1           ax.set_ylim(border, SIZE - border)\r\n    21 1772.359 MiB    0.000 MiB           1           t1= time.process_time()\r\n    22 1776.109 MiB    3.750 MiB           1           fig.canvas.draw()\r\n    23 1776.113 MiB    0.004 MiB           1           print(\"Draw time:\", time.process_time() - t1)\r\n```\r\nIt appears to me that with version 2.2.2, more memory is allocated to the image artist before the draw is called and that this memory is released after the draw completes.  With 3.8.2 it appears that the artist has less memory allocated before the draw and that it has to allocate more during the draw process, which therefore takes more time.\r\n\r\nHoping this might provide some additional clues?\nI am pursuing threads that I don't really understand, so I hope this is not distracting from the core issue, but one thing that interests me is that in [Issue 4567](https://github.com/matplotlib/matplotlib/issues/4567) it is suggested that no copy of the image data is made and yet in [image.py at line 686](https://github.com/matplotlib/matplotlib/blob/e5a85f960b2d47eac371cff709b830d52c36d267/lib/matplotlib/image.py#L686) a call is made to safe_masked_invalid that overrides copy=False to make a copy.\r\n\r\nWhile this seems like this may be an issue, even removing this check completely does not seem to have any effect on the issue I reported here, but I thought I should raise it in case it sheds any light on the matter.\nA quick note about memory. IIRC, a decision at one point was made to move\r\nfrom float64 to float32 for some internal image processing operations and\r\ndata representation. Mainly because matplotlib did not need that much color\r\ndepth representation.\r\n\r\nOn Fri, Dec 22, 2023 at 11:20\u202fAM ilopata1 ***@***.***> wrote:\r\n\r\n> I am pursuing threads that I don't really understand, so I hope this is\r\n> not distracting from the core issue, but one thing that interests me is\r\n> that in Issue 4567 <https://github.com/matplotlib/matplotlib/issues/4567>\r\n> it is suggested that no copy of the image data is made and yet in image.py\r\n> at line 686\r\n> <https://github.com/matplotlib/matplotlib/blob/e5a85f960b2d47eac371cff709b830d52c36d267/lib/matplotlib/image.py#L686>\r\n> a call is made to safe_masked_invalid that overrides copy=False to make a\r\n> copy.\r\n>\r\n> While this seems like this may be an issue, even removing this check\r\n> completely does not seem to have any effect on the issue I reported here,\r\n> but I thought I should raise it in case it sheds any light on the matter.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27554#issuecomment-1867863427>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AACHF6BENKOLZ265RPJDNBDYKWXL7AVCNFSM6AAAAABA6QIQXGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQNRXHA3DGNBSG4>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nThanks a lot for the reproducible example.  \r\n\r\nIf I change the call to \r\n`image = ax.imshow(random_image, interpolation='nearest', interpolation_stage='rgba')`\r\nI still get pretty slow speeds (3s on my machine per draw). (I changed it to this because the code is much simpler).  \r\n\r\nIf I remove the song and dance with alpha from \r\nhttps://github.com/matplotlib/matplotlib/blob/e5a85f960b2d47eac371cff709b830d52c36d267/lib/matplotlib/image.py#L560-L565\r\nthen the speed is much faster at 1.4 s or so, which is what I get for 2.2.2.  So I think QuLogic's idea above is sound, and thats probably the best we can do.  \nThank you all for you interest, help and support.  I think we can consider this closed.  My only outstanding question is whether QuLogic's code might get merged or whether I will need to maintain this as a patch for my own use?", "created_at": "2023-12-23T09:43:36Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27560, "instance_id": "matplotlib__matplotlib-27560", "issue_numbers": ["27396"], "base_commit": "ff0497cc042332313afd3d2e9ba8f949c3857896", "patch": "diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex aba2f7462223..45d9aaa32591 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -58,7 +58,7 @@ repos:\n           \"--ignore-words\",\n           \"ci/codespell-ignore-words.txt\",\n           \"--skip\",\n-          \"doc/users/project/credits.rst\"\n+          \"doc/project/credits.rst\"\n           ]\n   - repo: https://github.com/pycqa/isort\n     rev: 5.13.2\ndiff --git a/CODE_OF_CONDUCT.md b/CODE_OF_CONDUCT.md\nindex 657eb14336b9..8fbbe8e7d6f3 100644\n--- a/CODE_OF_CONDUCT.md\n+++ b/CODE_OF_CONDUCT.md\n@@ -1,6 +1,6 @@\n <!--placeholder page so Github knows we have a CoC-->\n \n Our Code of Conduct is at\n-https://matplotlib.org/stable/users/project/code_of_conduct.html\n+https://matplotlib.org/stable/project/code_of_conduct.html\n \n-It is rendered from `doc/users/project/code_of_conduct.rst`\n+It is rendered from `doc/project/code_of_conduct.rst`\ndiff --git a/README.md b/README.md\nindex 5e15c645c9a2..fc3abb7e197c 100644\n--- a/README.md\n+++ b/README.md\n@@ -69,5 +69,5 @@ If Matplotlib contributes to a project that leads to publication, please\n acknowledge this by citing Matplotlib.\n \n [A ready-made citation\n-entry](https://matplotlib.org/stable/users/project/citing.html) is\n+entry](https://matplotlib.org/stable/project/citing.html) is\n available.\ndiff --git a/doc/devel/contribute.rst b/doc/devel/contribute.rst\nindex b582aa455341..510b67eead91 100644\n--- a/doc/devel/contribute.rst\n+++ b/doc/devel/contribute.rst\n@@ -267,7 +267,7 @@ document's URL roughly corresponds to its location in our folder structure:\n   .. grid-item:: information about the library\n \n       * :file:`doc/users/installing/`\n-      * :file:`doc/users/project/`\n+      * :file:`doc/project/`\n       * :file:`doc/users/resources/`\n       * :file:`doc/users/faq.rst`\n       * :file:`doc/devel/`\n@@ -304,7 +304,7 @@ Matplotlib's community is built by its members, if you would like to help out\n see our :ref:`communications-guidelines`.\n \n If Matplotlib contributes to a project that leads to a scientific publication,\n-please follow the :doc:`/users/project/citing` guidelines.\n+please follow the :doc:`/project/citing` guidelines.\n \n If you have developed an extension to Matplotlib, please consider adding it to our\n `third party package <https://github.com/matplotlib/mpl-third-party>`_  list.\ndiff --git a/doc/devel/release_guide.rst b/doc/devel/release_guide.rst\nindex 4adc4546e879..77739100c1ce 100644\n--- a/doc/devel/release_guide.rst\n+++ b/doc/devel/release_guide.rst\n@@ -315,8 +315,8 @@ automatically produce one once the tag is pushed). Add the DOI post-fix and vers\n the dictionary in :file:`tools/cache_zenodo_svg.py` and run the script.\n \n This will download the new SVG to :file:`doc/_static/zenodo_cache/{postfix}.svg` and\n-edit :file:`doc/users/project/citing.rst`. Commit the new SVG, the change to\n-:file:`tools/cache_zenodo_svg.py`, and the changes to :file:`doc/users/project/citing.rst`\n+edit :file:`doc/project/citing.rst`. Commit the new SVG, the change to\n+:file:`tools/cache_zenodo_svg.py`, and the changes to :file:`doc/project/citing.rst`\n to the VER-doc branch and push to GitHub. ::\n \n   git checkout v3.7.0-doc\ndiff --git a/doc/index.rst b/doc/index.rst\nindex 4f42273d3dcc..00814b5ccc71 100644\n--- a/doc/index.rst\n+++ b/doc/index.rst\n@@ -172,4 +172,4 @@ About us\n         .. toctree::\n             :maxdepth: 2\n \n-            users/project/index.rst\n+            project/index.rst\ndiff --git a/doc/users/project/citing.rst b/doc/project/citing.rst\nsimilarity index 58%\nrename from doc/users/project/citing.rst\nrename to doc/project/citing.rst\nindex d6b924afec2f..65fc3db413f0 100644\n--- a/doc/users/project/citing.rst\n+++ b/doc/project/citing.rst\n@@ -1,4 +1,5 @@\n .. redirect-from:: /citing\n+.. redirect-from:: /users/project/citing\n \n Citing Matplotlib\n =================\n@@ -8,12 +9,12 @@ please acknowledge this fact by citing `J. D. Hunter, \"Matplotlib: A 2D\n Graphics Environment\", Computing in Science & Engineering, vol. 9, no. 3,\n pp. 90-95, 2007 <https://doi.org/10.1109/MCSE.2007.55>`_.\n \n-.. literalinclude:: ../../../CITATION.bib\n+.. literalinclude:: ../../CITATION.bib\n    :language: bibtex\n \n .. container:: sphx-glr-download\n \n-   :download:`Download BibTeX bibliography file: CITATION.bib <../../../CITATION.bib>`\n+   :download:`Download BibTeX bibliography file: CITATION.bib <../../CITATION.bib>`\n \n DOIs\n ----\n@@ -30,166 +31,166 @@ By version\n \n \n v3.8.1\n-   .. image:: ../../_static/zenodo_cache/10059757.svg\n+   .. image:: ../_static/zenodo_cache/10059757.svg\n       :target:  https://doi.org/10.5281/zenodo.10059757\n v3.8.0\n-   .. image:: ../../_static/zenodo_cache/8347255.svg\n+   .. image:: ../_static/zenodo_cache/8347255.svg\n       :target:  https://doi.org/10.5281/zenodo.8347255\n v3.7.3\n-   .. image:: ../../_static/zenodo_cache/8336761.svg\n+   .. image:: ../_static/zenodo_cache/8336761.svg\n       :target:  https://doi.org/10.5281/zenodo.8336761\n v3.7.2\n-   .. image:: ../../_static/zenodo_cache/8118151.svg\n+   .. image:: ../_static/zenodo_cache/8118151.svg\n       :target:  https://doi.org/10.5281/zenodo.8118151\n v3.7.1\n-   .. image:: ../../_static/zenodo_cache/7697899.svg\n+   .. image:: ../_static/zenodo_cache/7697899.svg\n       :target:  https://doi.org/10.5281/zenodo.7697899\n v3.7.0\n-   .. image:: ../../_static/zenodo_cache/7637593.svg\n+   .. image:: ../_static/zenodo_cache/7637593.svg\n       :target:  https://doi.org/10.5281/zenodo.7637593\n v3.6.3\n-   .. image:: ../../_static/zenodo_cache/7527665.svg\n+   .. image:: ../_static/zenodo_cache/7527665.svg\n       :target:  https://doi.org/10.5281/zenodo.7527665\n v3.6.2\n-   .. image:: ../../_static/zenodo_cache/7275322.svg\n+   .. image:: ../_static/zenodo_cache/7275322.svg\n       :target:  https://doi.org/10.5281/zenodo.7275322\n v3.6.1\n-   .. image:: ../../_static/zenodo_cache/7162185.svg\n+   .. image:: ../_static/zenodo_cache/7162185.svg\n       :target:  https://doi.org/10.5281/zenodo.7162185\n v3.6.0\n-   .. image:: ../../_static/zenodo_cache/7084615.svg\n+   .. image:: ../_static/zenodo_cache/7084615.svg\n       :target:  https://doi.org/10.5281/zenodo.7084615\n v3.5.3\n-   .. image:: ../../_static/zenodo_cache/6982547.svg\n+   .. image:: ../_static/zenodo_cache/6982547.svg\n       :target:  https://doi.org/10.5281/zenodo.6982547\n v3.5.2\n-   .. image:: ../../_static/zenodo_cache/6513224.svg\n+   .. image:: ../_static/zenodo_cache/6513224.svg\n       :target:  https://doi.org/10.5281/zenodo.6513224\n v3.5.1\n-   .. image:: ../../_static/zenodo_cache/5773480.svg\n+   .. image:: ../_static/zenodo_cache/5773480.svg\n       :target:  https://doi.org/10.5281/zenodo.5773480\n v3.5.0\n-   .. image:: ../../_static/zenodo_cache/5706396.svg\n+   .. image:: ../_static/zenodo_cache/5706396.svg\n       :target:  https://doi.org/10.5281/zenodo.5706396\n v3.4.3\n-   .. image:: ../../_static/zenodo_cache/5194481.svg\n+   .. image:: ../_static/zenodo_cache/5194481.svg\n       :target:  https://doi.org/10.5281/zenodo.5194481\n v3.4.2\n-   .. image:: ../../_static/zenodo_cache/4743323.svg\n+   .. image:: ../_static/zenodo_cache/4743323.svg\n       :target:  https://doi.org/10.5281/zenodo.4743323\n v3.4.1\n-   .. image:: ../../_static/zenodo_cache/4649959.svg\n+   .. image:: ../_static/zenodo_cache/4649959.svg\n       :target:  https://doi.org/10.5281/zenodo.4649959\n v3.4.0\n-   .. image:: ../../_static/zenodo_cache/4638398.svg\n+   .. image:: ../_static/zenodo_cache/4638398.svg\n       :target:  https://doi.org/10.5281/zenodo.4638398\n v3.3.4\n-   .. image:: ../../_static/zenodo_cache/4475376.svg\n+   .. image:: ../_static/zenodo_cache/4475376.svg\n       :target:  https://doi.org/10.5281/zenodo.4475376\n v3.3.3\n-   .. image:: ../../_static/zenodo_cache/4268928.svg\n+   .. image:: ../_static/zenodo_cache/4268928.svg\n       :target:  https://doi.org/10.5281/zenodo.4268928\n v3.3.2\n-   .. image:: ../../_static/zenodo_cache/4030140.svg\n+   .. image:: ../_static/zenodo_cache/4030140.svg\n       :target:  https://doi.org/10.5281/zenodo.4030140\n v3.3.1\n-   .. image:: ../../_static/zenodo_cache/3984190.svg\n+   .. image:: ../_static/zenodo_cache/3984190.svg\n       :target:  https://doi.org/10.5281/zenodo.3984190\n v3.3.0\n-   .. image:: ../../_static/zenodo_cache/3948793.svg\n+   .. image:: ../_static/zenodo_cache/3948793.svg\n       :target:  https://doi.org/10.5281/zenodo.3948793\n v3.2.2\n-   .. image:: ../../_static/zenodo_cache/3898017.svg\n+   .. image:: ../_static/zenodo_cache/3898017.svg\n       :target:  https://doi.org/10.5281/zenodo.3898017\n v3.2.1\n-   .. image:: ../../_static/zenodo_cache/3714460.svg\n+   .. image:: ../_static/zenodo_cache/3714460.svg\n       :target:  https://doi.org/10.5281/zenodo.3714460\n v3.2.0\n-   .. image:: ../../_static/zenodo_cache/3695547.svg\n+   .. image:: ../_static/zenodo_cache/3695547.svg\n       :target:  https://doi.org/10.5281/zenodo.3695547\n v3.1.3\n-   .. image:: ../../_static/zenodo_cache/3633844.svg\n+   .. image:: ../_static/zenodo_cache/3633844.svg\n       :target:  https://doi.org/10.5281/zenodo.3633844\n v3.1.2\n-   .. image:: ../../_static/zenodo_cache/3563226.svg\n+   .. image:: ../_static/zenodo_cache/3563226.svg\n       :target:  https://doi.org/10.5281/zenodo.3563226\n v3.1.1\n-   .. image:: ../../_static/zenodo_cache/3264781.svg\n+   .. image:: ../_static/zenodo_cache/3264781.svg\n       :target:  https://doi.org/10.5281/zenodo.3264781\n v3.1.0\n-   .. image:: ../../_static/zenodo_cache/2893252.svg\n+   .. image:: ../_static/zenodo_cache/2893252.svg\n       :target:  https://doi.org/10.5281/zenodo.2893252\n v3.0.3\n-   .. image:: ../../_static/zenodo_cache/2577644.svg\n+   .. image:: ../_static/zenodo_cache/2577644.svg\n       :target:  https://doi.org/10.5281/zenodo.2577644\n v3.0.2\n-   .. image:: ../../_static/zenodo_cache/1482099.svg\n+   .. image:: ../_static/zenodo_cache/1482099.svg\n       :target:  https://doi.org/10.5281/zenodo.1482099\n v3.0.1\n-   .. image:: ../../_static/zenodo_cache/1482098.svg\n+   .. image:: ../_static/zenodo_cache/1482098.svg\n       :target:  https://doi.org/10.5281/zenodo.1482098\n v2.2.5\n-   .. image:: ../../_static/zenodo_cache/3633833.svg\n+   .. image:: ../_static/zenodo_cache/3633833.svg\n       :target:  https://doi.org/10.5281/zenodo.3633833\n v3.0.0\n-   .. image:: ../../_static/zenodo_cache/1420605.svg\n+   .. image:: ../_static/zenodo_cache/1420605.svg\n       :target:  https://doi.org/10.5281/zenodo.1420605\n v2.2.4\n-   .. image:: ../../_static/zenodo_cache/2669103.svg\n+   .. image:: ../_static/zenodo_cache/2669103.svg\n       :target:  https://doi.org/10.5281/zenodo.2669103\n v2.2.3\n-   .. image:: ../../_static/zenodo_cache/1343133.svg\n+   .. image:: ../_static/zenodo_cache/1343133.svg\n       :target:  https://doi.org/10.5281/zenodo.1343133\n v2.2.2\n-   .. image:: ../../_static/zenodo_cache/1202077.svg\n+   .. image:: ../_static/zenodo_cache/1202077.svg\n       :target:  https://doi.org/10.5281/zenodo.1202077\n v2.2.1\n-   .. image:: ../../_static/zenodo_cache/1202050.svg\n+   .. image:: ../_static/zenodo_cache/1202050.svg\n       :target:  https://doi.org/10.5281/zenodo.1202050\n v2.2.0\n-   .. image:: ../../_static/zenodo_cache/1189358.svg\n+   .. image:: ../_static/zenodo_cache/1189358.svg\n       :target:  https://doi.org/10.5281/zenodo.1189358\n v2.1.2\n-   .. image:: ../../_static/zenodo_cache/1154287.svg\n+   .. image:: ../_static/zenodo_cache/1154287.svg\n       :target:  https://doi.org/10.5281/zenodo.1154287\n v2.1.1\n-   .. image:: ../../_static/zenodo_cache/1098480.svg\n+   .. image:: ../_static/zenodo_cache/1098480.svg\n       :target:  https://doi.org/10.5281/zenodo.1098480\n v2.1.0\n-   .. image:: ../../_static/zenodo_cache/1004650.svg\n+   .. image:: ../_static/zenodo_cache/1004650.svg\n       :target:  https://doi.org/10.5281/zenodo.1004650\n v2.0.2\n-   .. image:: ../../_static/zenodo_cache/573577.svg\n+   .. image:: ../_static/zenodo_cache/573577.svg\n       :target:  https://doi.org/10.5281/zenodo.573577\n v2.0.1\n-   .. image:: ../../_static/zenodo_cache/570311.svg\n+   .. image:: ../_static/zenodo_cache/570311.svg\n       :target:  https://doi.org/10.5281/zenodo.570311\n v2.0.0\n-   .. image:: ../../_static/zenodo_cache/248351.svg\n+   .. image:: ../_static/zenodo_cache/248351.svg\n       :target:  https://doi.org/10.5281/zenodo.248351\n v1.5.3\n-   .. image:: ../../_static/zenodo_cache/61948.svg\n+   .. image:: ../_static/zenodo_cache/61948.svg\n       :target:  https://doi.org/10.5281/zenodo.61948\n v1.5.2\n-   .. image:: ../../_static/zenodo_cache/56926.svg\n+   .. image:: ../_static/zenodo_cache/56926.svg\n       :target:  https://doi.org/10.5281/zenodo.56926\n v1.5.1\n-   .. image:: ../../_static/zenodo_cache/44579.svg\n+   .. image:: ../_static/zenodo_cache/44579.svg\n       :target:  https://doi.org/10.5281/zenodo.44579\n v1.5.0\n-   .. image:: ../../_static/zenodo_cache/32914.svg\n+   .. image:: ../_static/zenodo_cache/32914.svg\n       :target:  https://doi.org/10.5281/zenodo.32914\n v1.4.3\n-   .. image:: ../../_static/zenodo_cache/15423.svg\n+   .. image:: ../_static/zenodo_cache/15423.svg\n       :target:  https://doi.org/10.5281/zenodo.15423\n v1.4.2\n-   .. image:: ../../_static/zenodo_cache/12400.svg\n+   .. image:: ../_static/zenodo_cache/12400.svg\n       :target:  https://doi.org/10.5281/zenodo.12400\n v1.4.1\n-   .. image:: ../../_static/zenodo_cache/12287.svg\n+   .. image:: ../_static/zenodo_cache/12287.svg\n       :target:  https://doi.org/10.5281/zenodo.12287\n v1.4.0\n-   .. image:: ../../_static/zenodo_cache/11451.svg\n+   .. image:: ../_static/zenodo_cache/11451.svg\n       :target:  https://doi.org/10.5281/zenodo.11451\n \n .. END OF AUTOGENERATED\ndiff --git a/doc/users/project/code_of_conduct.rst b/doc/project/code_of_conduct.rst\nsimilarity index 99%\nrename from doc/users/project/code_of_conduct.rst\nrename to doc/project/code_of_conduct.rst\nindex ac8b268a4e30..56fee2f25f6f 100644\n--- a/doc/users/project/code_of_conduct.rst\n+++ b/doc/project/code_of_conduct.rst\n@@ -1,4 +1,5 @@\n .. _code_of_conduct:\n+.. redirect-from:: /users/project/code_of_conduct\n \n ====================================\n Contributor Covenant Code of Conduct\ndiff --git a/doc/users/project/credits.rst b/doc/project/credits.rst\nsimilarity index 99%\nrename from doc/users/project/credits.rst\nrename to doc/project/credits.rst\nindex c23d6ac11298..a57c35e8127d 100644\n--- a/doc/users/project/credits.rst\n+++ b/doc/project/credits.rst\n@@ -1,6 +1,7 @@\n .. Note: This file is auto-generated using generate_credits.py\n \n .. redirect-from:: /users/credits\n+.. redirect-from:: /users/project/credits\n \n .. _credits:\n \n@@ -13,7 +14,7 @@ Matplotlib was written by John D. Hunter, with contributions from an\n ever-increasing number of users and developers.  The current lead developer is\n Thomas A. Caswell, who is assisted by many `active developers\n <https://www.openhub.net/p/matplotlib/contributors>`_.\n-Please also see our instructions on :doc:`/users/project/citing`.\n+Please also see our instructions on :doc:`/project/citing`.\n \n The following is a list of contributors extracted from the\n git revision control history of the project:\ndiff --git a/doc/users/project/history.rst b/doc/project/history.rst\nsimilarity index 99%\nrename from doc/users/project/history.rst\nrename to doc/project/history.rst\nindex 18a94793736f..966b7a3caa38 100644\n--- a/doc/users/project/history.rst\n+++ b/doc/project/history.rst\n@@ -1,4 +1,5 @@\n .. redirect-from:: /users/history\n+.. redirect-from:: /users/project/history\n \n .. _project_history:\n \ndiff --git a/doc/users/project/index.rst b/doc/project/index.rst\nsimilarity index 85%\nrename from doc/users/project/index.rst\nrename to doc/project/index.rst\nindex ad55576190ab..c7e230339dc9 100644\n--- a/doc/users/project/index.rst\n+++ b/doc/project/index.rst\n@@ -1,4 +1,5 @@\n .. redirect-from:: /users/backmatter\n+.. redirect-from:: /users/project/index\n \n Project information\n ===================\ndiff --git a/doc/users/project/license.rst b/doc/project/license.rst\nsimilarity index 81%\nrename from doc/users/project/license.rst\nrename to doc/project/license.rst\nindex 3f9c1e30531b..1005b5467b5a 100644\n--- a/doc/users/project/license.rst\n+++ b/doc/project/license.rst\n@@ -1,6 +1,7 @@\n .. _license:\n \n .. redirect-from:: /users/license\n+.. redirect-from:: /users/project/license\n \n *******\n License\n@@ -50,7 +51,7 @@ License agreement\n    :open:\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE\n+   .. literalinclude:: ../../LICENSE/LICENSE\n       :language: none\n \n \n@@ -61,13 +62,13 @@ Bundled software\n .. dropdown:: JSX Tools Resize Observer\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_JSXTOOLS_RESIZE_OBSERVER\n+   .. literalinclude:: ../../LICENSE/LICENSE_JSXTOOLS_RESIZE_OBSERVER\n       :language: none\n \n .. dropdown:: QT4 Editor\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_QT4_EDITOR\n+   .. literalinclude:: ../../LICENSE/LICENSE_QT4_EDITOR\n       :language: none\n \n \n@@ -79,19 +80,19 @@ Colormaps and themes\n .. dropdown:: ColorBrewer\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_COLORBREWER\n+   .. literalinclude:: ../../LICENSE/LICENSE_COLORBREWER\n       :language: none\n \n .. dropdown:: Solarized\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_SOLARIZED\n+   .. literalinclude:: ../../LICENSE/LICENSE_SOLARIZED\n       :language: none\n \n .. dropdown:: Yorick\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_YORICK\n+   .. literalinclude:: ../../LICENSE/LICENSE_YORICK\n       :language: none\n \n \n@@ -103,29 +104,29 @@ Fonts\n .. dropdown:: American Mathematical Society (AMS) fonts\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_AMSFONTS\n+   .. literalinclude:: ../../LICENSE/LICENSE_AMSFONTS\n       :language: none\n \n .. dropdown:: BaKoMa\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_BAKOMA\n+   .. literalinclude:: ../../LICENSE/LICENSE_BAKOMA\n       :language: none\n \n .. dropdown:: Carlogo\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_CARLOGO\n+   .. literalinclude:: ../../LICENSE/LICENSE_CARLOGO\n       :language: none\n \n .. dropdown:: Courier 10\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_COURIERTEN\n+   .. literalinclude:: ../../LICENSE/LICENSE_COURIERTEN\n       :language: none\n \n .. dropdown:: STIX\n    :class-container: sdd\n \n-   .. literalinclude:: ../../../LICENSE/LICENSE_STIX\n+   .. literalinclude:: ../../LICENSE/LICENSE_STIX\n       :language: none\ndiff --git a/doc/users/project/mission.rst b/doc/project/mission.rst\nsimilarity index 95%\nrename from doc/users/project/mission.rst\nrename to doc/project/mission.rst\nindex 438d2fce8b1d..1b7a68afcc67 100644\n--- a/doc/users/project/mission.rst\n+++ b/doc/project/mission.rst\n@@ -1,4 +1,5 @@\n .. _mission-statement:\n+.. redirect-from:: /users/project/mission\n \n Mission Statement\n =================\ndiff --git a/tools/cache_zenodo_svg.py b/tools/cache_zenodo_svg.py\nindex cbd1304bd14c..77a3ea629a46 100644\n--- a/tools/cache_zenodo_svg.py\n+++ b/tools/cache_zenodo_svg.py\n@@ -120,7 +120,7 @@ def _get_xdg_cache_dir():\n     }\n     doc_dir = Path(__file__).parent.parent.absolute() / \"doc\"\n     target_dir = doc_dir / \"_static/zenodo_cache\"\n-    citing = doc_dir / \"users/project/citing.rst\"\n+    citing = doc_dir / \"project/citing.rst\"\n     target_dir.mkdir(exist_ok=True, parents=True)\n     header = []\n     footer = []\n@@ -148,7 +148,7 @@ def _get_xdg_cache_dir():\n             fout.write(\n                 f\"\"\"\n {version}\n-   .. image:: ../../_static/zenodo_cache/{doi}.svg\n+   .. image:: ../_static/zenodo_cache/{doi}.svg\n       :target:  https://doi.org/10.5281/zenodo.{doi}\"\"\"\n             )\n         fout.write(\"\\n\\n\")\n", "test_patch": "", "problem_statement": "[Doc]: Move non user guide related content out of `/users`\n### Problem\r\n\r\nGiven that `/doc` is now the root folder/index, a lot of the indexing that used to live on the `users` index page is now on the `doc/index` and it's a little easier to find things when the code structure matches the indexing. Also currently it's a little hard to define what we mean by user guide and scoping the contents of the folder can help in defining the purpose. \r\n\r\n### Suggested improvement\r\n\r\n* `/users/project` -> `/doc/project` \r\n* `/users/installing`->`doc/installing` \r\n* `/users/{generate_credits, github_stats, *_whats_new, release_notes*}` -> `/doc/release`\r\n* `/getting_started/* -> quickstart guide\r\n* `/users/users_explain/*` -> `/users`\r\n\r\n#### Consensus\r\n\r\nAs discussed on the call, the rough consensus is this organization makes sense but should be done in stages, roughly one folder at a time. Largest concern was getting all the [redirects](https://matplotlib.org/devdocs/devel/document.html#move-documentation) correct and making sure that any links and instructions related to those docs are updated as needed. The stages are:\r\n\r\n- [x] move the `/project` folder up ->https://github.com/matplotlib/matplotlib/pull/27560\r\n- [x] move the `/installing` folder up -> (might be a good chance to change the name to install?) https://github.com/matplotlib/matplotlib/pull/27747\r\n- [ ] move the release related folders and docs {generate_credits, github_stats, *_whats_new, release_notes*} into a folder and up one level\r\n- [ ] merge the contents in `users/getting_started` into the `gallery/users_explain/quickstart guide` and remove the `getting_started` folder\r\n- [ ] remove `doc/users` and rename `gallery/users_explain` to users \r\n\r\n#### Motivation\r\n\r\n* currently `/users/index/` is scoped to `users_explain` + `getting_started`, this would be matching structure to stated structure, in turn making it easier to find where a doc is to change it\r\n  * also means we can remove the symlink, which currently trips folks up when trying to edit documents under /user \r\n* the contents under `/project` are I think version independent (though we may want to keep the versioning on the site b/c the historicity is also important) but also for the most part should not be changed w/o consensus/streering-council sign off and it's a little easier to communicate that if it's not lumped with other user docs\r\n* I'm half/half on `/doc/install` b/c I understand why it would be inside a users guide but we also write those documents as a more general installation guide/reference for both \r\n* there are a lot of files related to the release process and unlike `/api/changes` it's not clear why they are here. \r\n\n", "hints_text": "@story645 I can start working on this now!", "created_at": "2023-12-23T03:09:40Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27535, "instance_id": "matplotlib__matplotlib-27535", "issue_numbers": ["27507", "0000"], "base_commit": "2e95cf2ef223b8c09e37c4458a965a231432b3ae", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex ab4a7e36cb5b..89081df90d9a 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -280,7 +280,7 @@ def legend(self, *args, **kwargs):\n \n         Parameters\n         ----------\n-        handles : sequence of (`.Artist` or tuple of `.Artist`), optional\n+        handles : list of (`.Artist` or tuple of `.Artist`), optional\n             A list of Artists (lines, patches) to be added to the legend.\n             Use this together with *labels*, if you need full control on what\n             is shown in the legend and the automatic mechanism described above\ndiff --git a/lib/matplotlib/axes/_axes.pyi b/lib/matplotlib/axes/_axes.pyi\nindex 919a22872999..501cb933037a 100644\n--- a/lib/matplotlib/axes/_axes.pyi\n+++ b/lib/matplotlib/axes/_axes.pyi\n@@ -30,7 +30,7 @@ import matplotlib.streamplot as mstream\n \n import datetime\n import PIL.Image\n-from collections.abc import Callable, Sequence\n+from collections.abc import Callable, Iterable, Sequence\n from typing import Any, Literal, overload\n import numpy as np\n from numpy.typing import ArrayLike\n@@ -56,11 +56,11 @@ class Axes(_AxesBase):\n     @overload\n     def legend(self) -> Legend: ...\n     @overload\n-    def legend(self, handles: Sequence[Artist | tuple[Artist, ...]], labels: Sequence[str], **kwargs) -> Legend: ...\n+    def legend(self, handles: Iterable[Artist | tuple[Artist, ...]], labels: Iterable[str], **kwargs) -> Legend: ...\n     @overload\n-    def legend(self, *, handles: Sequence[Artist | tuple[Artist, ...]], **kwargs) -> Legend: ...\n+    def legend(self, *, handles: Iterable[Artist | tuple[Artist, ...]], **kwargs) -> Legend: ...\n     @overload\n-    def legend(self, labels: Sequence[str], **kwargs) -> Legend: ...\n+    def legend(self, labels: Iterable[str], **kwargs) -> Legend: ...\n     @overload\n     def legend(self, **kwargs) -> Legend: ...\n \n", "test_patch": "", "problem_statement": "[Bug]: Argument types for `handles` and `labels` are too strict for method `Axes.legend`\n### Bug summary\n\n`Axes.legend` is annotated too strictly and incorrectly necessitates `Sequence` for `handles` and `labels`, even though any `Iterable` works. This also contradicts the docstring on the method.\n\n### Code for reproduction\n\n```python\nhandles, labels = ax.get_legend_handles_labels()\r\nax.legend(iter(handles), iter(labels))\n```\n\n\n### Actual outcome\n\nNo overload variant of \"legend\" of \"Axes\" matches argument types \"Iterator[Artist]\", \"Iterator[Any]\"  [call-overload]\n\n### Expected outcome\n\nPasses without type error\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "The docstring does call out \"sequence\", which matches the type hint, at least for the parameter description of `handles`... though admittedly the `labels` description is even more narrow as it specifically calls out `list`, and I think I avoided getting _that_ specific with type hints...\r\n\r\nThat said, earlier in the body of the docstring, it does in fact say \"iterable\", so I think we _should_ be consistent...\r\n\r\nSpeaking more generally, I'd argue that just because the current implementation _works_ doesn't mean we must guarantee it going forward. The type hints are describing (to the best of our ability, note that they are still provisional) what we consider to be the formal API, deviating (well, at least narrowing), would be considered an API change. \nNote that we do not systematically make a distinction between, list, sequence and iterable in the docstring type\r\n\r\nhttps://matplotlib.org/devdocs/devel/document.html#parameter-type-descriptions\r\n\r\n> Non-numeric homogeneous sequences are described as lists\r\n\r\nWe use this simplification to make the docs easier to read for less experienced python users.\r\n\r\nThis does not hold for type hints, which should be rather exact. IMO the problem with iterations us that they can be infinite, which of course is not a valid input. AFAIK, the type system cannot distinguish between finite and infinite iterators. So Sequence is too strict and Iterator would be too loose.\r\n\r\n \n`Sequence` is also technically not strictly finite, while the implementation does need to provide `__len__` and `__getitem__`, the `__iter__` could technically still yield an infinite `Iterator`. While this would be a really esoteric thing to do, I'm just using this as an example to demonstrate that Python is a dynamic language, so the level of type safety you can get will always be somewhat limited.\r\n\r\nI think the guiding principle for typing Python code should generally be the same as for good API design, namely the robustness principle \"be conservative in what you send, be liberal in what you accept\".\r\n\r\nMy main motivation for this change is memory efficiency, if I want to e.g. reverse the order of labels/handles in the legend I can currently do the following, if I ignore the type annotations:\r\n\r\n```python\r\nhandles, labels = ax.get_legend_handles_labels()\r\nax.legend(reversed(handles), reversed(labels))\r\n```\r\n\r\nIf I follow the restriction I have to do:\r\n```python\r\nhandles, labels = ax.get_legend_handles_labels()\r\nax.legend(list(reversed(handles)), list(reversed(labels)))\r\n```\r\nWhich creates two unnecessary lists.\r\n\r\nAnother use-case would be aggregating the legend from multiple subplots into a shared legend. Rather than creating a new list, I would like to be able to use `itertools.chain`.\r\n\r\nAnnotations imho should generally be guided by implementation first, and documentation second, especially if the terminology that was used is vague. I don't think the argument of guaranteeing forward compatibility through type annotations holds any water, if it worked previously, you will break people's code if you decide to go with a more narrow implementation and you will get bug reports.\r\n\r\nSo I think it's generally more productive for the type annotations on parameters to be as broad as possible and reflect reality. That way, if you do, for whatever reason, decide to make a breaking change, people that do use type checkers will know whether or not they are affected, and where they need to make changes.\nAt #27004 we added a test to ensure iterators would work\u2026\n> IMO the problem with iterations us that they can be infinite, which of course is not a valid input. AFAIK, the type system cannot distinguish between finite and infinite iterators. So Sequence is too strict and Iterator would be too loose.\r\n\r\nI'm not sure this should be a problem.  If we have a parameter that has to be a float between 0 and 1, we would still type it as `float` regardless of the fact that some floats are invalid input.  Anyway an infinite iterable will work OK for either _handles_ or _labels_, as long as the other is finite.\r\n\r\nI would vote for changing the hints to `Iterable`.  Ultimately, we are just looping through these inputs\r\nhttps://github.com/matplotlib/matplotlib/blob/cf6083525b5b8fcfdc3361c2aaa93afcc4a114da/lib/matplotlib/legend.py#L1349-L1358\r\n\r\n@Daverball seems to have a reasonable use-case, and we have a test so we will not accidentally break it.", "created_at": "2023-12-17T19:07:24Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27534, "instance_id": "matplotlib__matplotlib-27534", "issue_numbers": ["27503", "0000"], "base_commit": "2e95cf2ef223b8c09e37c4458a965a231432b3ae", "patch": "diff --git a/lib/matplotlib/lines.py b/lib/matplotlib/lines.py\nindex 0b4b8d48adc2..c94be8c512ae 100644\n--- a/lib/matplotlib/lines.py\n+++ b/lib/matplotlib/lines.py\n@@ -1464,9 +1464,10 @@ def __init__(self, xy1, xy2, slope, **kwargs):\n             The first set of (x, y) coordinates for the line to pass through.\n         xy2 : (float, float) or None\n             The second set of (x, y) coordinates for the line to pass through.\n-            Either *xy2* or *slope* has to be given.\n+            Both *xy2* and *slope* must be passed, but one of them must be None.\n         slope : float or None\n-            The slope of the line. Either *xy2* or *slope* has to be given.\n+            The slope of the line. Both *xy2* and *slope* must be passed, but one of\n+            them must be None.\n         \"\"\"\n         super().__init__([0, 1], [0, 1], **kwargs)\n \n", "test_patch": "", "problem_statement": "[Bug]: Cannot Create lines.AxLine\n### Bug summary\n\nIt is impossible to create a new `Matplotlib.lines.AxLine` artist because the constructor cannot be satisfied\n\n### Code for reproduction\n\n```python\nimport matplotlib.lines as lines\r\n\r\n# first attempt\r\nmy_first_line = lines.AxLine(xy1=(0, 0), xy2=(1, 1))\r\n\r\n# second attempt\r\nmy_second_line = lines.AxLine(xy1=(0, 0), slope=1)\r\n\r\n#third attempt\r\nmy_third_line = lines.AxLine(xy1=(0, 0), xy2=(1, 1), slope=1)\n```\n\n\n### Actual outcome\n\nfirst attempt:\r\n`TypeError: AxLine.__init__() missing 1 required positional argument: 'slope'`\r\n\r\nsecond attempt:\r\n`TypeError: AxLine.__init__() missing 1 required positional argument: 'xy2'`\r\n\r\nthird attempt:\r\n`TypeError: Exactly one of 'xy2' and 'slope' must be given`\n\n### Expected outcome\n\nThe first and second attempt should create and return AxLine objects. Only the third attempt should raise an exception\n\n### Additional information\n\nThe [constructor for AxLine](https://github.com/matplotlib/matplotlib/blob/eb02b108ea181930ab37717c75e07ba792e01f1d/lib/matplotlib/lines.py#L1473) does not provide default values for either 'xy2' or 'slope', which makes both required, resulting in the errors in attempts 1 and 2.\r\n\r\nSuggested fix:\r\ndefault both xy2 and slope to `None`.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.12.1\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "If you want to construct these objects directly, you can explicitly pass `None` for one of the parameters, e.g.\r\n\r\n```\r\nIn [4]: lines.AxLine(xy1=(0, 0), xy2=(1, 1), slope=None)\r\nOut[4]: <matplotlib.lines.AxLine at 0x7fb8639a09d0>\r\n```\r\n\r\nHowever, the usual way to create these objects is through the [axline method](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.axline.html#matplotlib.axes.Axes.axline) which does have the relevant defaults.  Do you have a use-case that requires constructing the `AxLine` directly?  Or is there scope to improve our documentation to make it clearer how these things are expected to be handled?\n@rcomer Would any changes in lines.AxLine() solve this issue? Let me know if I can work on it if it needs to be done. \nThe idea use case is I'd like to not only draw a line on a chart with AxLine, but I wanted to update it as part of a loop, as part of an animation or a live plot. However, since `Axes.AxLine()` returns a `Line2D` object which doesn't support updating slope, I thought I'd create a `lines.AxLine` artist myself and add it to the axes. If `axes.AxLine` returned a `lines.AxLine` instead of a `lines.Line2D`, that would also work. \r\n\r\nSo, I can just pass one of the arguments as 'None' and that will work. Maybe `axes.AxLine()` should also return an `AxLine` instead of a `Line2D`?\n`Axes.axline` returns an `AxLine` object, which has setters for `xy1`, `xy2`, and `slope`.  https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.AxLine.html\r\n\r\nIt does look like the documentation for `axes.axline` is incorrect about the return type, and that should get fixed. \r\n\r\n\n@jklymak see #27504 :-)\nOK, so we can close this? \nWe maybe we should also add a note to the `__init__` that you must pass both but one must be None?\r\n\n> you must pass both but one must be None\r\n\r\nThis is not the most elegant API. If I would design this now, I\u2018d make one of the variants a factory class method, but migrating is not worth it and better documentation should be enough.", "created_at": "2023-12-17T18:39:15Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27505, "instance_id": "matplotlib__matplotlib-27505", "issue_numbers": ["27159", "0000"], "base_commit": "92cc8f5457b0c8a83ce040082309930b655a5884", "patch": "diff --git a/subprojects/packagefiles/qhull-2020.2/meson.build b/subprojects/packagefiles/qhull-8.0.2/meson.build\nsimilarity index 100%\nrename from subprojects/packagefiles/qhull-2020.2/meson.build\nrename to subprojects/packagefiles/qhull-8.0.2/meson.build\ndiff --git a/subprojects/qhull.wrap b/subprojects/qhull.wrap\nindex f43ead300834..c52b07d790cd 100644\n--- a/subprojects/qhull.wrap\n+++ b/subprojects/qhull.wrap\n@@ -1,9 +1,9 @@\n [wrap-file]\n # Also bump the cache key in `.circleci/config.yml`.\n # Also update the docs in `docs/devel/dependencies.rst`.\n-directory = qhull-2020.2\n-source_url = http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz\n-source_filename = qhull-2020-src-8.0.2.tgz\n-source_hash = b5c2d7eb833278881b952c8a52d20179eab87766b00b865000469a45c1838b7e\n+directory = qhull-8.0.2\n+source_url = https://github.com/qhull/qhull/archive/v8.0.2/qhull-8.0.2.tar.gz\n+source_filename = qhull-8.0.2.tgz\n+source_hash = 8774e9a12c70b0180b95d6b0b563c5aa4bea8d5960c15e18ae3b6d2521d64f8b\n \n-patch_directory = qhull-2020.2\n+patch_directory = qhull-8.0.2\n", "test_patch": "", "problem_statement": "[Bug]: Meson build fails due to qhull link issue.\n### Bug summary\r\n\r\nBuilding matplotlib fails due to \"Connection reset by peer\" when meson is building qhull.   Perhaps relevant: https://github.com/qhull/qhull/issues/132\r\n\r\n### Code for reproduction\r\n\r\n```python\r\npython -m pip install -ve .\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n<details>\r\n\r\n<summary> [Errno 104] Connection reset by peer </summary>\r\n\r\n```\r\n~/github/matplotlib$ python -m pip install -ve .\r\nUsing pip 22.0.2 from /home/xenophon/github/matplotlib/env/lib/python3.10/site-packages/pip (python 3.10)\r\nObtaining file:///home/xenophon/github/matplotlib\r\n  Running command pip subprocess to install build dependencies\r\n  Collecting meson-python>=0.13.1\r\n    Using cached meson_python-0.14.0-py3-none-any.whl (76 kB)\r\n  Collecting numpy>=1.25\r\n    Using cached numpy-1.26.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.2 MB)\r\n  Collecting pybind11>=2.6\r\n    Using cached pybind11-2.11.1-py3-none-any.whl (227 kB)\r\n  Collecting setuptools_scm>=7\r\n    Using cached setuptools_scm-8.0.4-py3-none-any.whl (42 kB)\r\n  Collecting pyproject-metadata>=0.7.1\r\n    Using cached pyproject_metadata-0.7.1-py3-none-any.whl (7.4 kB)\r\n  Collecting tomli>=1.0.0\r\n    Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\r\n  Collecting meson>=0.63.3\r\n    Using cached meson-1.2.2-py3-none-any.whl (964 kB)\r\n  Collecting packaging>=20\r\n    Using cached packaging-23.2-py3-none-any.whl (53 kB)\r\n  Collecting typing-extensions\r\n    Using cached typing_extensions-4.8.0-py3-none-any.whl (31 kB)\r\n  Collecting setuptools\r\n    Using cached setuptools-68.2.2-py3-none-any.whl (807 kB)\r\n  Installing collected packages: typing-extensions, tomli, setuptools, pybind11, packaging, numpy, meson, setuptools_scm, pyproject-metadata, meson-python\r\n  Successfully installed meson-1.2.2 meson-python-0.14.0 numpy-1.26.1 packaging-23.2 pybind11-2.11.1 pyproject-metadata-0.7.1 setuptools-68.2.2 setuptools_scm-8.0.4 tomli-2.0.1 typing-extensions-4.8.0\r\n  Installing build dependencies ... done\r\n  Running command Checking if build backend supports build_editable\r\n  Checking if build backend supports build_editable ... done\r\n  Running command Getting requirements to build editable\r\n  Getting requirements to build editable ... done\r\n  Running command pip subprocess to install backend dependencies\r\n  Collecting ninja>=1.8.2\r\n    Using cached ninja-1.11.1.1-py2.py3-none-manylinux1_x86_64.manylinux_2_5_x86_64.whl (307 kB)\r\n  Collecting patchelf>=0.11.0\r\n    Using cached patchelf-0.17.2.1-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.musllinux_1_1_x86_64.whl (425 kB)\r\n  Installing collected packages: patchelf, ninja\r\n  Successfully installed ninja-1.11.1.1 patchelf-0.17.2.1\r\n  Installing backend dependencies ... done\r\n  Running command Preparing editable metadata (pyproject.toml)\r\n  + meson setup /home/xenophon/github/matplotlib /home/xenophon/github/matplotlib/build/cp310 -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=/home/xenophon/github/matplotlib/build/cp310/meson-python-native-file.ini\r\n  The Meson build system\r\n  Version: 1.2.2\r\n  Source dir: /home/xenophon/github/matplotlib\r\n  Build dir: /home/xenophon/github/matplotlib/build/cp310\r\n  Build type: native build\r\n  Project name: matplotlib\r\n  Project version: 3.9.0.dev0\r\n  C compiler for the host machine: cc (gcc 11.4.0 \"cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")\r\n  C linker for the host machine: cc ld.bfd 2.38\r\n  C++ compiler for the host machine: c++ (gcc 11.4.0 \"c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")\r\n  C++ linker for the host machine: c++ ld.bfd 2.38\r\n  Host machine cpu family: x86_64\r\n  Host machine cpu: x86_64\r\n  Program python found: YES (/home/xenophon/github/matplotlib/env/bin/python)\r\n  Did not find pkg-config by name 'pkg-config'\r\n  Found Pkg-config: NO\r\n  Run-time dependency python found: YES 3.10\r\n  pybind11-config found: YES (/tmp/pip-build-env-8wxg444r/overlay/bin/pybind11-config) 2.11.1\r\n  Run-time dependency pybind11 found: YES 2.11.1\r\n\r\n  Executing subproject freetype-2.6.1\r\n\r\n  freetype-2.6.1| Project name: freetype2\r\n  freetype-2.6.1| Project version: 2.6.1\r\n  freetype-2.6.1| C compiler for the host machine: cc (gcc 11.4.0 \"cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")\r\n  freetype-2.6.1| C linker for the host machine: cc ld.bfd 2.38\r\n  freetype-2.6.1| Has header \"unistd.h\" : YES\r\n  freetype-2.6.1| Has header \"fcntl.h\" : YES\r\n  freetype-2.6.1| Has header \"stdint.h\" : YES\r\n  freetype-2.6.1| Configuring ftconfig.h using configuration\r\n  freetype-2.6.1| Configuring ftoption.h using configuration\r\n  freetype-2.6.1| Build targets in project: 3\r\n  freetype-2.6.1| Subproject freetype-2.6.1 finished.\r\n\r\n  Downloading qhull source from http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz\r\n  WARNING: failed to download with error: [Errno 104] Connection reset by peer. Trying after a delay...\r\n  WARNING: failed to download with error: [Errno 104] Connection reset by peer. Trying after a delay...\r\n  WARNING: failed to download with error: [Errno 104] Connection reset by peer. Trying after a delay...\r\n  WARNING: failed to download with error: [Errno 104] Connection reset by peer. Trying after a delay...\r\n  WARNING: failed to download with error: [Errno 104] Connection reset by peer. Trying after a delay...\r\n  Traceback (most recent call last):\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/mesonmain.py\", line 194, in run\r\n      return options.run_func(options)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/msetup.py\", line 358, in run\r\n      app.generate()\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/msetup.py\", line 183, in generate\r\n      return self._generate(env, capture, vslite_ctx)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/msetup.py\", line 228, in _generate\r\n      intr.run()\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreter/interpreter.py\", line 3002, in run\r\n      super().run()\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 164, in run\r\n      self.evaluate_codeblock(self.ast, start=1)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 190, in evaluate_codeblock\r\n      raise e\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 182, in evaluate_codeblock\r\n      self.evaluate_statement(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 196, in evaluate_statement\r\n      return self.function_call(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 521, in function_call\r\n      res = func(node, func_args, kwargs)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/decorators.py\", line 277, in wrapper\r\n      return f(*nargs, **wrapped_kwargs)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/decorators.py\", line 596, in wrapper\r\n      return f(*wrapped_args, **wrapped_kwargs)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreter/interpreter.py\", line 2414, in func_subdir\r\n      self.evaluate_codeblock(codeblock)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 190, in evaluate_codeblock\r\n      raise e\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 182, in evaluate_codeblock\r\n      self.evaluate_statement(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 206, in evaluate_statement\r\n      return self.evaluate_if(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 306, in evaluate_if\r\n      self.evaluate_codeblock(node.elseblock)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 190, in evaluate_codeblock\r\n      raise e\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 182, in evaluate_codeblock\r\n      self.evaluate_statement(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 198, in evaluate_statement\r\n      self.assignment(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 635, in assignment\r\n      value = self.evaluate_statement(node.value)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 196, in evaluate_statement\r\n      return self.function_call(cur)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/interpreterbase.py\", line 521, in function_call\r\n      res = func(node, func_args, kwargs)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/decorators.py\", line 277, in wrapper\r\n      return f(*nargs, **wrapped_kwargs)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreterbase/decorators.py\", line 596, in wrapper\r\n      return f(*wrapped_args, **wrapped_kwargs)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreter/interpreter.py\", line 879, in func_subproject\r\n      return self.do_subproject(args[0], 'meson', kw)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/interpreter/interpreter.py\", line 924, in do_subproject\r\n      subdir = r.resolve(subp_name, method)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/wrap/wrap.py\", line 466, in resolve\r\n      self.get_file()\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/wrap/wrap.py\", line 543, in get_file\r\n      path = self.get_file_internal('source')\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/wrap/wrap.py\", line 763, in get_file_internal\r\n      self.download(what, cache_path)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/wrap/wrap.py\", line 738, in download\r\n      dhash, tmpfile = self.get_data_with_backoff(srcurl)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/wrap/wrap.py\", line 731, in get_data_with_backoff\r\n      return self.get_data(urlstring)\r\n    File \"/tmp/pip-build-env-8wxg444r/overlay/lib/python3.10/site-packages/mesonbuild/wrap/wrap.py\", line 702, in get_data\r\n      block = resp.read(blocksize)\r\n    File \"/usr/lib/python3.10/http/client.py\", line 466, in read\r\n      s = self.fp.read(amt)\r\n    File \"/usr/lib/python3.10/socket.py\", line 705, in readinto\r\n      return self._sock.recv_into(b)\r\n  ConnectionResetError: [Errno 104] Connection reset by peer\r\n\r\n  ERROR: Unhandled python OSError. This is probably not a Meson bug, but an issue with your build environment.\r\n  error: subprocess-exited-with-error\r\n  \r\n  \u00d7 Preparing editable metadata (pyproject.toml) did not run successfully.\r\n  \u2502 exit code: 104\r\n  \u2570\u2500> See above for output.\r\n  \r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\n  full command: /home/xenophon/github/matplotlib/env/bin/python /home/xenophon/github/matplotlib/env/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/_in_process.py prepare_metadata_for_build_editable /tmp/tmp811wdin1\r\n  cwd: /home/xenophon/github/matplotlib\r\n  Preparing editable metadata (pyproject.toml) ... error\r\nerror: metadata-generation-failed\r\n\r\n\u00d7 Encountered error while generating package metadata.\r\n\u2570\u2500> See above for output.\r\n\r\nnote: This is an issue with the package mentioned above, not pip.\r\nhint: See above for details.\r\n\r\n```\r\n\r\n</details>\r\n\r\n### Expected outcome\r\n\r\nbuilds successfully\r\n\r\n### Additional information\r\n\r\nIt could be an http vs https issue: the link (and all of qhull's page) is http.  Chaning the link/file/hash on qhull.wrap to the [equivalent tarball](https://github.com/qhull/qhull/archive/refs/tags/v8.0.2.tar.gz) on qhull's github page at least advances the error to\r\n```\r\n  Downloading qhull source from https://github.com/qhull/qhull/archive/refs/tags/v8.0.2.tar.gz\r\n  Downloading file of unknown size.\r\n\r\n  Executing subproject qhull\r\n\r\n  qhull| Project name: qhull\r\n  qhull| Project version: 8.0.2\r\n  qhull| C compiler for the host machine: cc (gcc 11.4.0 \"cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")\r\n  qhull| C linker for the host machine: cc ld.bfd 2.38\r\n\r\n  ../../subprojects/qhull-2020.2/meson.build:5:12: ERROR: Include dir src does not exist.\r\n```\r\n\r\nI also tried installing libqhull8.0 and using [system libraries](https://matplotlib.org/stable/devel/dependencies.html#use-system-libraries), but got the same issue\r\n\r\n### Operating system\r\n\r\nLinux 6.2.0-34-generic; Ubuntu 22.04.1\r\n\r\n### Matplotlib Version\r\n\r\n`master` from today: dfdb37aa11ada50d8c91c320dbd250955b15a990\r\n\r\n### Matplotlib Backend\r\n\r\nN/A\r\n\r\n### Python version\r\n\r\n3.10.12\r\n\r\n### Jupyter version\r\n\r\nN/A\r\n\r\n### Installation\r\n\r\ngit checkout\n", "hints_text": "Hi @Jacob-Stevens-Haas, since the move to meson, we need a different command to install.  This is shown in the development version of the guide:\r\nhttps://matplotlib.org/devdocs/devel/development_setup.html#install-matplotlib-in-editable-mode\nYour initial error also looks like a (likely temporary) networking error. Perhaps the qhull download servers were offline for a bit.\nThanks both!\r\n# Correcting the Command\r\n> since the move to meson, we need a different command to install. This is shown in the development version of the guide\r\n\r\nWhen using the new command from the development guide, I get the `ERROR: Include dir src does not exist` (The same error as previously when I pointed to the github.com tarball instead of qhull.org)\r\n<details>\r\n<summary>Error when building with: `python -m pip install --verbose --no-build-isolation --editable .[dev]` </summary>\r\n\r\n```\r\nUsing pip 22.0.2 from /home/xenophon/github/matplotlib/env/lib/python3.10/site-packages/pip (python 3.10)                                                                                                   \r\nObtaining file:///home/xenophon/github/matplotlib                                                                                                                                                           \r\n  Running command Checking if build backend supports build_editable                                                                                                                                         \r\n  Checking if build backend supports build_editable ... done                                                                                                                                                \r\n  Running command Preparing editable metadata (pyproject.toml)                                                                                                                                              \r\n  + meson setup /home/xenophon/github/matplotlib /home/xenophon/github/matplotlib/build/cp310 -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=/home/xenophon/github/matplotlib/build/cp\r\n310/meson-python-native-file.ini                                                                                                                                                                            \r\n  The Meson build system                                                                                                                                                                                    \r\n  Version: 1.2.2                                                                                                                                                                                            \r\n  Source dir: /home/xenophon/github/matplotlib                                                                                                                                                              \r\n  Build dir: /home/xenophon/github/matplotlib/build/cp310                                                                                                                                                   \r\n  Build type: native build                                                                                                                                                                                  \r\n  Project name: matplotlib                                                                                                                                                                                  \r\n  Project version: 3.9.0.dev0                                                                                                                                                                               \r\n  C compiler for the host machine: cc (gcc 11.4.0 \"cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")                                                                                                               \r\n  C linker for the host machine: cc ld.bfd 2.38                                                                                                                                                             \r\n  C++ compiler for the host machine: c++ (gcc 11.4.0 \"c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")                                                                                                           \r\n  C++ linker for the host machine: c++ ld.bfd 2.38                                                                                                                                                          \r\n  Host machine cpu family: x86_64                                                                                                                                                                           \r\n  Host machine cpu: x86_64                                                                                                                                                                                  \r\n  Program python found: YES (/home/xenophon/github/matplotlib/env/bin/python)                                                                                                                               \r\n  Did not find pkg-config by name 'pkg-config'\r\n  Found Pkg-config: NO\r\n  Run-time dependency python found: YES 3.10\r\n  pybind11-config found: YES (/home/xenophon/github/matplotlib/env/bin/pybind11-config) 2.11.1\r\n  Run-time dependency pybind11 found: YES 2.11.1\r\n\r\n  Executing subproject freetype-2.6.1\r\n\r\n  freetype-2.6.1| Project name: freetype2\r\n  freetype-2.6.1| Project version: 2.6.1\r\n  freetype-2.6.1| C compiler for the host machine: cc (gcc 11.4.0 \"cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")\r\n  freetype-2.6.1| C linker for the host machine: cc ld.bfd 2.38\r\n  freetype-2.6.1| Has header \"unistd.h\" : YES\r\n  freetype-2.6.1| Has header \"fcntl.h\" : YES\r\n  freetype-2.6.1| Has header \"stdint.h\" : YES                                                                                                                                                               \r\n  freetype-2.6.1| Configuring ftconfig.h using configuration                                                                                                                                                \r\n  freetype-2.6.1| Configuring ftoption.h using configuration                                                                                                                                                \r\n  freetype-2.6.1| Build targets in project: 3                                                                                                                                                               \r\n  freetype-2.6.1| Subproject freetype-2.6.1 finished.                                                                                                                                                       \r\n                                                                                                                                                                                                            \r\n  WARNING: Subproject qhull's revision may be out of date; its wrap file has changed since it was first configured                                                                                          \r\n                                                                                                                                                                                                            \r\n  Executing subproject qhull                                                                                                                                                                                \r\n                                                                                                                                                                                                            \r\n  qhull| Project name: qhull                                                                                                                                                                                \r\n  qhull| Project version: 8.0.2                                                                                                                                                                             \r\n  qhull| C compiler for the host machine: cc (gcc 11.4.0 \"cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\")                                                                                                        \r\n  qhull| C linker for the host machine: cc ld.bfd 2.38                                                                                                                                                      \r\n                                                                                                                                                                                                            \r\n  ../../subprojects/qhull-2020.2/meson.build:5:12: ERROR: Include dir src does not exist.                                                                                                                   \r\n                                                                                                                                                                                                            \r\n  A full log can be found at /home/xenophon/github/matplotlib/build/cp310/meson-logs/meson-log.txt                                                                                                          \r\n  error: subprocess-exited-with-error                                                                                                                                                                       \r\n                                                                                                                                                                                                            \r\n  \u00d7 Preparing editable metadata (pyproject.toml) did not run successfully.                                                                                                                                  \r\n  \u2502 exit code: 1                                                                                                                                                                                            \r\n  \u2570\u2500> See above for output.                                                                                                                                                                                 \r\n                                                                                                                                                                                                            \r\n  note: This error originates from a subprocess, and is likely not a problem with pip.                                                                                                                      \r\n  full command: /home/xenophon/github/matplotlib/env/bin/python /home/xenophon/github/matplotlib/env/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/_in_process.py prepare_metadata_for_build_ed\r\nitable /tmp/tmp3o0u5ac4\r\n  cwd: /home/xenophon/github/matplotlib     \r\n  Preparing editable metadata (pyproject.toml) ... error                                      \r\nerror: metadata-generation-failed               \r\n\r\n\u00d7 Encountered error while generating package metadata.\r\n\u2570\u2500> See above for output.\r\n                                                   \r\nnote: This is an issue with the package mentioned above, not pip.\r\nhint: See above for details.  \r\n```\r\n\r\n</details>\r\n\r\nThe same error occurs even if I replace the wrap file url/filename/hash with the one from github.\r\n\r\n# Using system libraries\r\nUsing the correct command with system Qhull works.  Thanks!  Details: upgraded from pip 22.2 to pip 23.3, `apt install libqhull-dev libqhull8.0`\r\n\r\n# Still not able to download qhull manually\r\n\r\n> Perhaps the qhull download servers were offline for a bit.\r\n\r\nThey're not offline, as `wget` receives a partial download (see above linked issue), but they do seem to be having trouble (several days later).  For sanity's sake, is anyone else able to download http://www.qhull.org/download/qhull-2020-src-8.0.2.tgz in any way?  Even so, is it perhaps better to use github's link, which uses HTTPS, versus qhull's? \nif you do `git clean -xfd` in your Matplotlib checkout and then try again does it work?  My guess is that there may be a partial set of files which is enough to skip re-downloading / unpacking but not enough to work.  When in doubt wipe it clean and try again \ud83d\udd28 \ud83d\udca3 .\nI'm not _too_ concerned about https, because we do checksum the download (sha256) so having ssl during download doesn't provide much additional safety, actually.\r\n\r\nI am able to download the file (though admittedly firefox gives me a warning about https when I click the link from github) (I was also able to do `git clean -xfd` and reinstall today).\nOh, that's a good point about the checksum.  Today it did download (with the mentioned security risk).  It might have just been an issue over the weekend.\n> (I was also able to do git clean -xfd and reinstall today).\r\n\r\nour download code caches in `~/.cache/matplotlib` so you will not re-download unless you clear that too.\nMeson does the downloading now, and that directory is not used any more. Tarballs are cached in `subprojects/packagecache`.\noh, good to know!\r\n\r\nHid my incorrect comment to not confuse people in the future.", "created_at": "2023-12-12T14:00:00Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27492, "instance_id": "matplotlib__matplotlib-27492", "issue_numbers": ["27400", "0000"], "base_commit": "d48b2a88a6b2d4a47c339e08ee5ef414a35d038f", "patch": "diff --git a/doc/api/next_api_changes/behavior/27492-AL.rst b/doc/api/next_api_changes/behavior/27492-AL.rst\nnew file mode 100644\nindex 000000000000..98a4900fa67d\n--- /dev/null\n+++ b/doc/api/next_api_changes/behavior/27492-AL.rst\n@@ -0,0 +1,12 @@\n+Image path semantics of toolmanager-based tools\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+Previously, MEP22 (\"toolmanager-based\") Tools would try to load their icon\n+(``tool.image``) relative to the current working directory, or, as a fallback,\n+from Matplotlib's own image directory.  Because both approaches are problematic\n+for third-party tools (the end-user may change the current working directory\n+at any time, and third-parties cannot add new icons in Matplotlib's image\n+directory), this behavior is deprecated; instead, ``tool.image`` is now\n+interpreted relative to the directory containing the source file where the\n+``Tool.image`` class attribute is defined.  (Defining ``tool.image`` as an\n+absolute path also works and is compatible with both the old and the new\n+semantics.)\ndiff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\nindex fd055fd7015d..588ac995a034 100644\n--- a/lib/matplotlib/backend_bases.py\n+++ b/lib/matplotlib/backend_bases.py\n@@ -35,6 +35,7 @@\n import itertools\n import logging\n import os\n+import pathlib\n import signal\n import socket\n import sys\n@@ -3284,7 +3285,7 @@ def add_tool(self, tool, group, position=-1):\n             The position within the group to place this tool.\n         \"\"\"\n         tool = self.toolmanager.get_tool(tool)\n-        image = self._get_image_filename(tool.image)\n+        image = self._get_image_filename(tool)\n         toggle = getattr(tool, 'toggled', None) is not None\n         self.add_toolitem(tool.name, group, position,\n                           image, tool.description, toggle)\n@@ -3295,20 +3296,44 @@ def add_tool(self, tool, group, position=-1):\n             if tool.toggled:\n                 self.toggle_toolitem(tool.name, True)\n \n-    def _get_image_filename(self, image):\n-        \"\"\"Find the image based on its name.\"\"\"\n-        if not image:\n+    def _get_image_filename(self, tool):\n+        \"\"\"Resolve a tool icon's filename.\"\"\"\n+        if not tool.image:\n             return None\n-\n-        basedir = cbook._get_data_path(\"images\")\n-        for fname in [\n-            image,\n-            image + self._icon_extension,\n-            str(basedir / image),\n-            str(basedir / (image + self._icon_extension)),\n+        if os.path.isabs(tool.image):\n+            filename = tool.image\n+        else:\n+            if \"image\" in getattr(tool, \"__dict__\", {}):\n+                raise ValueError(\"If 'tool.image' is an instance variable, \"\n+                                 \"it must be an absolute path\")\n+            for cls in type(tool).__mro__:\n+                if \"image\" in vars(cls):\n+                    try:\n+                        src = inspect.getfile(cls)\n+                        break\n+                    except (OSError, TypeError):\n+                        raise ValueError(\"Failed to locate source file \"\n+                                         \"where 'tool.image' is defined\") from None\n+            else:\n+                raise ValueError(\"Failed to find parent class defining 'tool.image'\")\n+            filename = str(pathlib.Path(src).parent / tool.image)\n+        for filename in [filename, filename + self._icon_extension]:\n+            if os.path.isfile(filename):\n+                return os.path.abspath(filename)\n+        for fname in [  # Fallback; once deprecation elapses.\n+            tool.image,\n+            tool.image + self._icon_extension,\n+            cbook._get_data_path(\"images\", tool.image),\n+            cbook._get_data_path(\"images\", tool.image + self._icon_extension),\n         ]:\n             if os.path.isfile(fname):\n-                return fname\n+                _api.warn_deprecated(\n+                    \"3.9\", message=f\"Loading icon {tool.image!r} from the current \"\n+                    \"directory or from Matplotlib's image directory.  This behavior \"\n+                    \"is deprecated since %(since)s and will be removed %(removal)s; \"\n+                    \"Tool.image should be set to a path relative to the Tool's source \"\n+                    \"file, or to an absolute path.\")\n+                return os.path.abspath(fname)\n \n     def trigger_tool(self, name):\n         \"\"\"\ndiff --git a/lib/matplotlib/backend_tools.py b/lib/matplotlib/backend_tools.py\nindex ac2a20f1ffa9..a9daa0c4b400 100644\n--- a/lib/matplotlib/backend_tools.py\n+++ b/lib/matplotlib/backend_tools.py\n@@ -97,10 +97,14 @@ class ToolBase:\n \n     image = None\n     \"\"\"\n-    Filename of the image.\n-\n-    `str`: Filename of the image to use in a Toolbar.  If None, the *name* is\n-    used as a label in the toolbar button.\n+    Icon filename.\n+\n+    ``str | None``: Filename of the Toolbar icon; either absolute, or\n+    relative to the directory containing the Python source file where the\n+    ``Tool.image``class attribute is defined (in the latter case, this cannot\n+    be defined as an instance attribute).  In either case, the extension is\n+    optional; leaving it off lets individual backends select the icon format\n+    they prefer.  If None, the *name* is used as a label in the toolbar button.\n     \"\"\"\n \n     def __init__(self, toolmanager, name):\n@@ -601,7 +605,7 @@ class ToolHome(ViewsPositionsBase):\n     \"\"\"Restore the original view limits.\"\"\"\n \n     description = 'Reset original view'\n-    image = 'home'\n+    image = 'mpl-data/images/home'\n     default_keymap = property(lambda self: mpl.rcParams['keymap.home'])\n     _on_trigger = 'home'\n \n@@ -610,7 +614,7 @@ class ToolBack(ViewsPositionsBase):\n     \"\"\"Move back up the view limits stack.\"\"\"\n \n     description = 'Back to previous view'\n-    image = 'back'\n+    image = 'mpl-data/images/back'\n     default_keymap = property(lambda self: mpl.rcParams['keymap.back'])\n     _on_trigger = 'back'\n \n@@ -619,7 +623,7 @@ class ToolForward(ViewsPositionsBase):\n     \"\"\"Move forward in the view lim stack.\"\"\"\n \n     description = 'Forward to next view'\n-    image = 'forward'\n+    image = 'mpl-data/images/forward'\n     default_keymap = property(lambda self: mpl.rcParams['keymap.forward'])\n     _on_trigger = 'forward'\n \n@@ -628,14 +632,14 @@ class ConfigureSubplotsBase(ToolBase):\n     \"\"\"Base tool for the configuration of subplots.\"\"\"\n \n     description = 'Configure subplots'\n-    image = 'subplots'\n+    image = 'mpl-data/images/subplots'\n \n \n class SaveFigureBase(ToolBase):\n     \"\"\"Base tool for figure saving.\"\"\"\n \n     description = 'Save the figure'\n-    image = 'filesave'\n+    image = 'mpl-data/images/filesave'\n     default_keymap = property(lambda self: mpl.rcParams['keymap.save'])\n \n \n@@ -710,7 +714,7 @@ class ToolZoom(ZoomPanBase):\n     \"\"\"A Tool for zooming using a rectangle selector.\"\"\"\n \n     description = 'Zoom to rectangle'\n-    image = 'zoom_to_rect'\n+    image = 'mpl-data/images/zoom_to_rect'\n     default_keymap = property(lambda self: mpl.rcParams['keymap.zoom'])\n     cursor = cursors.SELECT_REGION\n     radio_group = 'default'\n@@ -832,7 +836,7 @@ class ToolPan(ZoomPanBase):\n \n     default_keymap = property(lambda self: mpl.rcParams['keymap.pan'])\n     description = 'Pan axes with left mouse, zoom with right'\n-    image = 'move'\n+    image = 'mpl-data/images/move'\n     cursor = cursors.MOVE\n     radio_group = 'default'\n \n@@ -896,7 +900,7 @@ def _mouse_move(self, event):\n class ToolHelpBase(ToolBase):\n     description = 'Print tool list, shortcuts and description'\n     default_keymap = property(lambda self: mpl.rcParams['keymap.help'])\n-    image = 'help'\n+    image = 'mpl-data/images/help'\n \n     @staticmethod\n     def format_shortcut(key_sequence):\n", "test_patch": "", "problem_statement": "[Bug]: tk backend confused by presence of file named \"move\" in current working directory\n### Bug summary\n\nWith a file named \"move\" in the current working directory, the tk backend reports that it cannot find /usr/share/matplotlib/mpl-data/images/move\r\n\r\nRename the local file to anything else, and everything works okay.\n\n### Code for reproduction\n\n```python\nN/A  too large.  See the above error messages.\n```\n\n\n### Actual outcome\n\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.11/multiprocessing/process.py\", line 314, in _bootstrap\r\n    self.run()\r\n  File \"/usr/lib64/python3.11/multiprocessing/process.py\", line 108, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/home/nelson/Projects/TeensyDataAcquistion/Python_Programs/GraphicsWindow.py\", line 80, in animation\r\n    self.fig = plt.figure(self.name)\r\n               ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/_api/deprecation.py\", line 454, in wrapper\r\n    return func(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/pyplot.py\", line 783, in figure\r\n    manager = new_figure_manager(\r\n              ^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/pyplot.py\", line 359, in new_figure_manager\r\n    return _get_backend_mod().new_figure_manager(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backend_bases.py\", line 3513, in new_figure_manager\r\n    return cls.new_figure_manager_given_figure(num, fig)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backend_bases.py\", line 3518, in new_figure_manager_given_figure\r\n    return cls.FigureCanvas.new_manager(figure, num)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backend_bases.py\", line 1703, in new_manager\r\n    return cls.manager_class.create_with_canvas(cls, figure, num)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backends/_backend_tk.py\", line 481, in create_with_canvas\r\n    manager = cls(canvas, num, window)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backends/_backend_tk.py\", line 431, in __init__\r\n    super().__init__(canvas, num)\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backend_bases.py\", line 2814, in __init__\r\n    tools.add_tools_to_container(self.toolbar)\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backend_tools.py\", line 1027, in add_tools_to_container\r\n    container.add_tool(tool, group, position)\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backend_bases.py\", line 3377, in add_tool\r\n    self.add_toolitem(tool.name, group, position,\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backends/_backend_tk.py\", line 957, in add_toolitem\r\n    button = NavigationToolbar2Tk._Button(frame, name, image_file, toggle,\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backends/_backend_tk.py\", line 792, in _Button\r\n    NavigationToolbar2Tk._set_image_for_button(self, b)\r\n  File \"/usr/lib64/python3.11/site-packages/matplotlib/backends/_backend_tk.py\", line 726, in _set_image_for_button\r\n    with Image.open(path_large if (size > 24 and path_large.exists())\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib64/python3.11/site-packages/PIL/Image.py\", line 3092, in open\r\n    fp = builtins.open(filename, \"rb\")\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nFileNotFoundError: [Errno 2] No such file or directory: '/usr/share/matplotlib/mpl-data/images/move'\r\n<TextWindow.TextWindow object at 0x7f3fae9e0e10>\r\n\r\n\n\n### Expected outcome\n\nNo error messages\n\n### Additional information\n\nThe general context is a live a data acquisition system with data displayed in an animation.   While there is a file named \"move\" in the current directory, the program produces the above error at launch.\n\n### Operating system\n\nFedora 37, Cinnamon desktop\n\n### Matplotlib Version\n\n3.6.3\n\n### Matplotlib Backend\n\ntk_agg\n\n### Python version\n\n3.11.4\n\n### Jupyter version\n\nn/a\n\n### Installation\n\nLinux package manager\n", "hints_text": "I am unable to reproduce this problem, can you reproduce with up to date mpl, for instance?\nThank you for trying.  Unfortunately it is a large multi-process program and it will take some work to reduce it to a minimum example.   But, the graphics library itself (attached) is not so long.    There are a few buttons added to the standard toolbar, perhaps that is what \"opens the can of worms\".   The error occurs at launch.\r\n\r\nI removed and reinstalled and updated the mpl, no change.\r\n\r\nOne more note, this is has been going on intermittently for more than a year.  I just today realized it was the presence of another file in the working directory with the same name as one of the standard buttons.\r\n\r\n[GraphicsWindow.py.zip](https://github.com/matplotlib/matplotlib/files/13510204/GraphicsWindow.py.zip)\r\n\nNote it runs from the multiprocessing api rather than the threading library.  One of these runs for each piece of equipment in the data acquisition system, generally one or two, sometimes three.  The error appears independent of that.\n@ksunden I haven't actually tried but almost certainly this is because the OP uses MEP22 toolmanager (see their traceback), which has questionable semantics of first trying to load an image with the requested filename from the current directory (see ToolContainerBase._get_image_filename).  In my view this behavior is basically broken due to cases like the OP's.  I'd guess it should be deprecated (this can be done by checking whether the file would be loaded from a deprecated path) and replaced by something like `ToolBase.image` being the path to the image relative to the directory containing the source file where the tool was defined (so that one can still write third-party tools and distribute the icon next to the python source (or in a subfolder, via `image = \"data/...\"` (for the case of builtin tools, we'd have something like `image = \"mpl-data/images/move\"`, so we can also remove the special-casing of basedir as well).\nI've found the same, and I don't see how that ever could have been expected to work correctly. I guess we could deprecate it, but it seems unusable in general. Since we use normal `Path` joining, if they don't want the image from the `mpl-data` directory, third parties can set `image` to an absolute path.\nYes, clearly.  There seems to be multiple issues.\r\n\r\nA) The internal default should include a default path, or something that refers to one.\r\n\r\nB)  The file named \"move\" in the local directory was not even typed as a graphics file (.png,.svg,.etc)   The error message nothing about that.\r\n\r\nC)  The error message, unable to find \"/usr/share/matplotlib/mpl-data/images/move\"  misleads as to the actual source of the error.\r\n\r\nD) If there is going to be an override it would make more sense that it  be the directory the program runs from, or better still, require that it be supplied by the programmer/user. \r\n\r\nE)  As I recall, developing the library that uses this, there were some difficulties having it use a supplied image for the button.  In that instance I actually did want to supply a file, in a sub directory from where the program resides.   Eventually I gave up and chose one from the mpl-data/images directory.     Extending the button set for a program that uses the mpl libraries should not require that programmers/user add files to the directory tree where mpl is installed. \r\n\r\n\nSo all in all it is a confused mess of (a) requiring that a file resides in mpl-data/images, (b)  nonetheless getting tripped up when one with a similar name resides in the current working directory, and then (c) emitting an error message referring back to mpl-data/images with no reference to what actually happened.\r\n\r\nWhen someone recently asked me to describe something \"frustrating\", in that moment I couldn't think of anything.  But, here it is. \n@QuLogic    \r\n\r\n\" they don't want the image from the mpl-data directory, third parties can set image to an absolute path.\"\r\n\r\nYes, but actually needs both.   We would not want to have to recreate the entire images directory in our local tree just to add one button.\r\n\r\nSo something like \"local_button_image_path\".   Check there first, then mpl-data/images.   And do type checking too.\nDoesn't \"path relative to the directory containing the python source defining the tool\" (as I proposed above) work?\nOkay, yes, I can indeed reproduce once I set `rcParams[\"toolbar\"] = \"toolmanager\"`.\r\n\r\n\r\nThe culprit appears to be:\r\n\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/88e4a4333fd36063dc04935891e228d65f5bb5cb/lib/matplotlib/backend_bases.py#L3298-L3311\r\n\r\nIn combination with:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/88e4a4333fd36063dc04935891e228d65f5bb5cb/lib/matplotlib/backends/_backend_tk.py#L735\r\n\r\nThe first method sets the `image` property of the tool to the first found file , first looking in the `cwd` (without adding an extension), then adding an extension, then looking in the mpl-data/images folder (without and with extension added). If it finds the file in the cwd, it does not make it absolute.\r\n\r\nThe latter further modifies it by always looking in the mpl-data/images folder (though if an absolute path will ignore that).\r\n\r\nThe default move tool does not specify the extension so that it can pick up varied extensions using the dynamic searching of the first method linked there, and thus get e.g. svg where available and png when needed.\nI think the issue here is that one part of the code treats relative paths against CWD (which in the case of writing an un-packaged application maybe makes sense) and another part of the code assumes that relative path are against our data directory (which makes some degree of sense).\r\n\r\n```diff\r\ndiff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py\r\nindex 85ca72e3b5..ed7b99bce1 100644\r\n--- a/lib/matplotlib/backend_bases.py\r\n+++ b/lib/matplotlib/backend_bases.py\r\n@@ -2971,7 +2971,7 @@ class NavigationToolbar2:\r\n\r\n         if len(axes) == 0:\r\n             return []\r\n-\r\n+k\r\n         if self._nav_stack() is None:\r\n             self.push_current()   # Set the home button to this view.\r\n\r\n@@ -3296,17 +3296,29 @@ class ToolContainerBase:\r\n         \"\"\"Find the image based on its name.\"\"\"\r\n         if not image:\r\n             return None\r\n-\r\n-        basedir = cbook._get_data_path(\"images\")\r\n-        for fname in [\r\n-            image,\r\n-            image + self._icon_extension,\r\n-            str(basedir / image),\r\n-            str(basedir / (image + self._icon_extension)),\r\n-        ]:\r\n-            if os.path.isfile(fname):\r\n+        imgp = Path(image)\r\n+        # if relative, first check against our data\r\n+        if rel_path := (not img.is_absolute()):\r\n+            imgp = cbook._get_data_path(\"images\", image)\r\n+\r\n+        # check both as-is and with the tools image extension\r\n+        for fname in [imgp, imgp.with_suffix(self._icon_extension)]:\r\n+            if fname.exists():\r\n                 return fname\r\n\r\n+        # if we are here, we did not find the image try CWD for back-compat\r\n+        if rel_path:\r\n+            imgp = Path(image)\r\n+\r\n+            for fname in [imgp, imgp.with_suffix(self._icon_extension)]:\r\n+                if fname.exists():\r\n+                    # make absolute to be safe\r\n+                    return fname.absolute()\r\n+\r\n+        # found no file\r\n+        return None\r\n+\r\n+\r\n     def trigger_tool(self, name):\r\n         \"\"\"\r\n         Trigger the tool.\r\n```\r\n\r\nI think something like the above patch is the right way to fix this.  We have a small behavior change (we prefer our images over the same named images in CWD).\r\n\r\nIt might make sense to swap the search order of the \"fixed\" suffix and not as well.\nYes, probably.  It is an interesting problem.\r\n\r\nI think the right answer is that mpl-data is where the default images are stored, and anything else should be based on an explicit call with an explicit file path or image loaded into program memory.\r\n\r\nIn this case, nowhere in the code did I ask it to load an image named \"move\".  It had no business whatsoever looking for that button image anywhere but mpl-data, and certainly not in my working directory.\r\n\r\n\r\n\n@tacaswell    I don't think that is the right answer.\r\n\r\nIt should not be looking anywhere but relative to some explicit configured install path, except when the programmer explicitly tells it to use a different image file.\r\n\r\nSecond, if there would be a second tree to search it should not be the current working directory.\r\n\r\n(For example, I generate data sets in different directorie.  I cd into each directory and run that same graphics program.   Why in the world, would I want the button to change every time I cd into a different directory?   Really!!!)\r\n\r\nThird, you get into trouble with this because you are searching more than one tree with one being dynamic, i.e. cwd.   It simply has to produce chaos and spooky bugs like this one that wasted days of my time and probably others as well.\r\n\r\n\r\n", "created_at": "2023-12-10T11:47:53Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27481, "instance_id": "matplotlib__matplotlib-27481", "issue_numbers": ["27461"], "base_commit": "da1d76658a3fc802c5c2cb38c0736afaa6ddfe85", "patch": "diff --git a/galleries/users_explain/figure/api_interfaces.rst b/galleries/users_explain/figure/api_interfaces.rst\nindex 6947817e6781..5279fe24634a 100644\n--- a/galleries/users_explain/figure/api_interfaces.rst\n+++ b/galleries/users_explain/figure/api_interfaces.rst\n@@ -285,6 +285,11 @@ Appendix: \"pylab\" interface\n ---------------------------\n \n There is one further interface that is highly discouraged, and that is to\n-basically do ``from matplotlib.pyplot import *``.  This allows users to simply\n-call ``plot(x, y)``.  While convenient, this can lead to obvious problems if the\n-user unwittingly names a variable the same name as a pyplot method.\n+basically do ``from matplotlib.pylab import *``. This imports all the\n+functions from ``matplotlib.pyplot``, ``numpy``, ``numpy.fft``, ``numpy.linalg``, and\n+``numpy.random``, and some additional functions into the global namespace.\n+\n+Such a pattern is considered bad practice in modern python, as it clutters\n+the global namespace. Even more severely, in the case of ``pylab``, this will\n+overwrite some builtin functions (e.g. the builtin ``sum`` will be replaced by\n+``numpy.sum``), which can lead to unexpected behavior.\n", "test_patch": "", "problem_statement": "[Doc]: API interface overview pylab incorrect import statement: from matplotlib.pyplot import *\n### Documentation Link\n\nhttps://matplotlib.org/stable/users/explain/figure/api_interfaces.html#appendix-pylab-interface\n\n### Problem\n\nIn the description of the obsolete Pylab interface in the Matplotlib API overview,\r\nhttps://matplotlib.org/stable/users/explain/figure/api_interfaces.html#appendix-pylab-interface\r\nthe Pylab import statement is incorrectly given as `from matplotlib.pyplot import *`. This should be `pylab` instead of `pyplot`.\n\n### Suggested improvement\n\nReplace by correct statement `from matplotlib.pylab import *`\n", "hints_text": "Essentially, the description should be like or point to https://matplotlib.org/stable/api/pylab.html.\nI would like to work on this!", "created_at": "2023-12-09T06:45:42Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27462, "instance_id": "matplotlib__matplotlib-27462", "issue_numbers": ["19807"], "base_commit": "810a43b3382125da7406c548f837b1d1b4b3833b", "patch": "diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex 7e3aaf6ecb24..7d6689c9a808 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -127,6 +127,29 @@ def contains(self, mouseevent, radius=None):\n         \"\"\"\n         Test whether the mouse event occurred in the patch.\n \n+        Parameters\n+        ----------\n+        mouseevent : `~matplotlib.backend_bases.MouseEvent`\n+            Where the user clicked.\n+\n+        radius : float, optional\n+            Additional margin on the patch in target coordinates of\n+            `.Patch.get_transform`. See `.Path.contains_point` for further\n+            details.\n+\n+            If `None`, the default value depends on the state of the object:\n+\n+            - If `.Artist.get_picker` is a number, the default\n+              is that value.  This is so that picking works as expected.\n+            - Otherwise if the edge color has a non-zero alpha, the default\n+              is half of the linewidth.  This is so that all the colored\n+              pixels are \"in\" the patch.\n+            - Finally, if the edge has 0 alpha, the default is 0.  This is\n+              so that patches without a stroked edge do not have points\n+              outside of the filled region report as \"in\" due to an\n+              invisible edge.\n+\n+\n         Returns\n         -------\n         (bool, empty dict)\n@@ -160,13 +183,25 @@ def contains_point(self, point, radius=None):\n         ----------\n         point : (float, float)\n             The point (x, y) to check, in target coordinates of\n-            ``self.get_transform()``. These are display coordinates for patches\n+            ``.Patch.get_transform()``. These are display coordinates for patches\n             that are added to a figure or Axes.\n         radius : float, optional\n             Additional margin on the patch in target coordinates of\n-            ``self.get_transform()``. See `.Path.contains_point` for further\n+            `.Patch.get_transform`. See `.Path.contains_point` for further\n             details.\n \n+            If `None`, the default value depends on the state of the object:\n+\n+            - If `.Artist.get_picker` is a number, the default\n+              is that value.  This is so that picking works as expected.\n+            - Otherwise if the edge color has a non-zero alpha, the default\n+              is half of the linewidth.  This is so that all the colored\n+              pixels are \"in\" the patch.\n+            - Finally, if the edge has 0 alpha, the default is 0.  This is\n+              so that patches without a stroked edge do not have points\n+              outside of the filled region report as \"in\" due to an\n+              invisible edge.\n+\n         Returns\n         -------\n         bool\n@@ -214,9 +249,21 @@ def contains_points(self, points, radius=None):\n             that are added to a figure or Axes. Columns contain x and y values.\n         radius : float, optional\n             Additional margin on the patch in target coordinates of\n-            ``self.get_transform()``. See `.Path.contains_point` for further\n+            `.Patch.get_transform`. See `.Path.contains_point` for further\n             details.\n \n+            If `None`, the default value depends on the state of the object:\n+\n+            - If `.Artist.get_picker` is a number, the default\n+              is that value.  This is so that picking works as expected.\n+            - Otherwise if the edge color has a non-zero alpha, the default\n+              is half of the linewidth.  This is so that all the colored\n+              pixels are \"in\" the patch.\n+            - Finally, if the edge has 0 alpha, the default is 0.  This is\n+              so that patches without a stroked edge do not have points\n+              outside of the filled region report as \"in\" due to an\n+              invisible edge.\n+\n         Returns\n         -------\n         length-N bool array\n", "test_patch": "", "problem_statement": "radius modification in contains_point function when linewidth is specified\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\nWhen specifyng `linewidth` in a patch object and then using the `contains_point` function the radius of this is set to `linewidth` and returns inconsistent results. This is somewhat documented [here](https://matplotlib.org/stable/api/path_api.html#matplotlib.path.Path.contains_point) but I think this is an unwanted behaviour since `linewidth` is specified in points and not in data coordinates, while the `contains_point` function gonna search for those data points enclosed between the border of the path and half the `linewidth`.\r\n\r\n\r\n**Code for reproduction**\r\n\r\n```python\r\nimport matplotlib.patches as mpatches\r\nimport matplotlib.pyplot as plt\r\n\r\ncircle_ec = mpatches.Circle((0,0), radius=1, ec='r', lw=1)\r\ncircle = mpatches.Circle((0,0), radius=1)\r\npoint = (0,1.5)\r\nprint(circle_ec.contains_point(point))        \r\nprint(circle.contains_point(point))\r\n```\r\n\r\n**Actual outcome**\r\n\r\n```\r\nTrue\r\nFalse\r\n```\r\n\r\n**Expected outcome**\r\n\r\nThe expected output is `False` in both cases since the point `(0, 1.5)` is neither in the patch (Circle in this case) neither on the line of the edge. I propose to multiply `_radius = self.get_linewidth()` in the `_process_radius` function in the [source code](https://matplotlib.org/stable/_modules/matplotlib/patches.html#) by a corrective factor.\r\n\r\n**Matplotlib version**\r\n\r\n  * Operating system: Windows 10\r\n  * Matplotlib version: 3.3.4\r\n  * Matplotlib backend:  TkAgg\r\n  * Python version: \r\n  * Jupyter version (if applicable): 3.9.0\r\n  * Other libraries: \r\n\r\nInstallation from pip\r\n\r\n\n", "hints_text": "This issue has been marked \"inactive\" because it has been 365 days since the last comment. If this issue is still present in recent Matplotlib releases, or the feature request is still wanted, please leave a comment and this label will be removed. If there are no updates in another 30 days, this issue will be automatically closed, but you are free to re-open or create a new issue if needed. We value issue reports, and this procedure is meant to help us resurface and prioritize issues that have not been addressed yet, not make them disappear.  Thanks for your help!", "created_at": "2023-12-07T15:49:20Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27441, "instance_id": "matplotlib__matplotlib-27441", "issue_numbers": ["0000", "27383"], "base_commit": "bc1c5cc3be6972a3ca2485b6cb6db049e130a469", "patch": "diff --git a/galleries/examples/statistics/hexbin_demo.py b/galleries/examples/statistics/hexbin_demo.py\nindex 4bd0e0401424..b9a6206a934f 100644\n--- a/galleries/examples/statistics/hexbin_demo.py\n+++ b/galleries/examples/statistics/hexbin_demo.py\n@@ -29,7 +29,7 @@\n hb = ax1.hexbin(x, y, gridsize=50, bins='log', cmap='inferno')\n ax1.set(xlim=xlim, ylim=ylim)\n ax1.set_title(\"With a log color scale\")\n-cb = fig.colorbar(hb, ax=ax1, label='log10(N)')\n+cb = fig.colorbar(hb, ax=ax1, label='counts')\n \n plt.show()\n \ndiff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex da22d5366479..6a9353f45146 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5103,10 +5103,10 @@ def reduce_C_function(C: array) -> float\n             )\n \n         # Set normalizer if bins is 'log'\n-        if bins == 'log':\n+        if cbook._str_equal(bins, 'log'):\n             if norm is not None:\n                 _api.warn_external(\"Only one of 'bins' and 'norm' arguments \"\n-                                   f\"can be supplied, ignoring bins={bins}\")\n+                                   f\"can be supplied, ignoring {bins=}\")\n             else:\n                 norm = mcolors.LogNorm(vmin=vmin, vmax=vmax)\n                 vmin = vmax = None\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex d5424f80c9e9..836485b434e5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -962,17 +962,18 @@ def test_hexbin_extent():\n     ax.hexbin(\"x\", \"y\", extent=[.1, .3, .6, .7], data=data)\n \n \n-@image_comparison(['hexbin_empty.png', 'hexbin_empty.png'], remove_text=True)\n+@image_comparison(['hexbin_empty.png'], remove_text=True)\n def test_hexbin_empty():\n     # From #3886: creating hexbin from empty dataset raises ValueError\n     fig, ax = plt.subplots()\n     ax.hexbin([], [])\n-    fig, ax = plt.subplots()\n     # From #23922: creating hexbin with log scaling from empty\n     # dataset raises ValueError\n     ax.hexbin([], [], bins='log')\n     # From #27103: np.max errors when handed empty data\n     ax.hexbin([], [], C=[], reduce_C_function=np.max)\n+    # No string-comparison warning from NumPy.\n+    ax.hexbin([], [], bins=np.arange(10))\n \n \n def test_hexbin_pickable():\n", "problem_statement": "[Bug]: Error in Hexbin plot in Matplotlib 3.0 onward\n### Bug summary\n\n First, I would like to thank you for creating a wonderful matplotlib for data visualization. \r\n\r\nI am writing to inform you about problems in hexbin plot in the Matplotlib 3.0 onward. When I was working on my data analysis, I noticed something was wrong when we plotted the distribution of the bin in the log scale.  Moreover, the hexbin plot is correct in the previous version of the matplotlib 2.2.5.  \r\n\r\nI've attached the files of the same. You can clearly observe that the main error is when we plot the bins in log scale. I hope you will look into the problem and update it accordingly. \r\n\r\n![hexplot_matplotlib3 10](https://github.com/matplotlib/matplotlib/assets/66845821/63eeb554-ab1c-4764-baac-cbe545ec56e6)\r\n![hexplot_matplotlib2 2 5](https://github.com/matplotlib/matplotlib/assets/66845821/89f04ff2-2533-484b-83a2-07646e971851)\r\n\n\n### Code for reproduction\n\n```python\nno code is available\n```\n\n\n### Actual outcome\n\nNA\n\n### Expected outcome\n\nNA\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\npython 3\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n", "hints_text": "This was actually incorrect prior to version 3.5:\r\n\r\nhttps://matplotlib.org/3.5.3/api/prev_api_changes/api_changes_3.5.0.html#hexbin-with-a-log-norm\r\n\r\nWe had been adding 1 so every bin had a value, but 0 cannot be displayed on a logarithmically scaled colormap, so now it has no value (and thus are not displayed if zero). We no longer incorrectly add 1.\r\n\r\nThere was some changes during the early 3.8 series to the boundary conditions of hexbin, but default behavior should be what it used to be as of 3.8.2 (and more consistent with different modes of calling hexbin overall).\nHi,\r\nI understand the problem with zero in the log scale.\r\n\r\n\r\nMy concern is with the color bar labeling and scaling. The hexbin plot in\r\nmatplotbin2.2.5 looks okay. The hexbin says log scale means values are\r\ntaken log10(var), not the log10(var) with log scaling of colorbar, which is\r\npresent in matplotlib 3.0 onward version.\r\n\r\n\r\n*Example:* See the left plot where the color bar displays bin count. Let's\r\nsay the bin count is 500, then log10(500) = 2.69, which is expected to be\r\nshown in the colorbar (see plots for hexbin plot for matplotlib 2.2.5).\r\nUnfortunately, in the latex version of matplotlib, the value and colorbar\r\nare different.\r\n\r\n\r\nPlease clarify it for me. And do the necessary update.\r\n\r\nBest wishes,\r\nZubair Shaikh\r\n----------------------------------------------------------\r\n\r\n*Dr. Zubair Ibrahim Shaikh,*\r\n*Postdoctoral Researcher,Space Sciences Laboratory (SSL),*\r\n*University of California**, Berkeley,*\r\n*7 Gauss Way, CA 94720, USA*\r\n\r\n*email:* ***@***.*** ***@***.***>u*\r\n*website: **https://sites.google.com/view/shaikhzubair/\r\n<https://sites.google.com/view/shaikhzubair/>*\r\n*Orcid: https://orcid.org/0000-0002-9206-632\r\n<https://orcid.org/0000-0002-9206-6327>7*\r\n-------------------------------------------------------------------------\r\n\r\n\r\nOn Mon, Nov 27, 2023 at 5:08\u202fPM Kyle Sunden ***@***.***>\r\nwrote:\r\n\r\n> This was actually incorrect prior to version 3.5:\r\n>\r\n>\r\n> https://matplotlib.org/3.5.3/api/prev_api_changes/api_changes_3.5.0.html#hexbin-with-a-log-norm\r\n>\r\n> We had been adding 1 so every bin had a value, but 0 cannot be displayed\r\n> on a logarithmically scaled colormap, so now it has no value (and thus are\r\n> not displayed if zero). We no longer incorrectly add 1.\r\n>\r\n> There was some changes during the early 3.8 series to the boundary\r\n> conditions of hexbin, but default behavior should be what it used to be as\r\n> of 3.8.2 (and more consistent with different modes of calling hexbin\r\n> overall).\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27383#issuecomment-1828900038>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AP57Y7LRJSNCT4UBVUNSG7LYGU2R5AVCNFSM6AAAAAA74XVJYCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRYHEYDAMBTHA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n\nI agree that the label on the colorbar should be updated.\r\n\r\nAt some point we went from having to \"manually\" do the log scale to the color mapping / normalization machinery doing it for us.\nThank you for understanding the problem.\r\nI hope you will update it soon.\r\n\r\nBest wishes,\r\nZubair Shaikh\r\n----------------------------------------------------------\r\n\r\n*Dr. Zubair Ibrahim Shaikh,*\r\n*Postdoctoral Researcher,Space Sciences Laboratory (SSL),*\r\n*University of California**, Berkeley,*\r\n*7 Gauss Way, CA 94720, USA*\r\n\r\n*email:* ***@***.*** ***@***.***>u*\r\n*website: **https://sites.google.com/view/shaikhzubair/\r\n<https://sites.google.com/view/shaikhzubair/>*\r\n*Orcid: https://orcid.org/0000-0002-9206-632\r\n<https://orcid.org/0000-0002-9206-6327>7*\r\n-------------------------------------------------------------------------\r\n\r\n\r\nOn Mon, Dec 4, 2023 at 9:15\u202fAM Thomas A Caswell ***@***.***>\r\nwrote:\r\n\r\n> I agree that the label on the colorbar should be updated.\r\n>\r\n> At some point we went from having to \"manually\" do the log scale to the\r\n> color mapping / normalization machinery doing it for us.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/matplotlib/matplotlib/issues/27383#issuecomment-1839107926>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AP57Y7K5Q2227K23ZOZO73LYHYAM5AVCNFSM6AAAAAA74XVJYCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMZZGEYDOOJSGY>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n\n### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nThe relevant change here was #9223, I believe.", "created_at": "2023-12-05T05:23:50Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27434, "instance_id": "matplotlib__matplotlib-27434", "issue_numbers": ["27194", "0000"], "base_commit": "bc1c5cc3be6972a3ca2485b6cb6db049e130a469", "patch": "diff --git a/galleries/plot_types/basic/stairs.py b/galleries/plot_types/basic/stairs.py\nindex 9bc5d025f1e1..de5761e3a7a5 100644\n--- a/galleries/plot_types/basic/stairs.py\n+++ b/galleries/plot_types/basic/stairs.py\n@@ -3,7 +3,9 @@\n stairs(values)\n ==============\n \n-See `~matplotlib.axes.Axes.stairs`.\n+See `~matplotlib.axes.Axes.stairs` when plotting :math:`y` between\n+:math:`(x_i, x_{i+1})`. For plotting :math:`y` at :math:`x`, see\n+`~matplotlib.axes.Axes.step`.\n \n .. redirect-from:: /plot_types/basic/step\n \"\"\"\n", "test_patch": "", "problem_statement": "DOC: Point to step in stairs plot-type entry\nI think we could make stairs/step a bit easier to navigate by adding a drop of roadmapping by changing the intro sentence in the [stairs](https://matplotlib.org/devdocs/plot_types/basic/stairs.html) plot type entry:\r\nhttps://github.com/matplotlib/matplotlib/blob/879cf769efa6801c1a949f9fe75c9626709c6314/galleries/plot_types/basic/stairs.py#L6\r\n\r\nto something that sets expectations for stairs and points folks to steps when appropriate. Something like:\r\n```rst\r\nSee `~matplotlib.axes.Axes.stairs` when plotting $y$ between $(x_i, x_{i+1})$ and ~`matplotlib.axes.Axes.step` when plotting $y$ at $x$.  \r\n```\r\n> Kinda like how pcolormesh has a little descriptor https://matplotlib.org/devdocs/plot_types/arrays/pcolormesh.html#sphx-glr-plot-types-arrays-pcolormesh-py\r\n_Originally posted by @story645 in https://github.com/matplotlib/matplotlib/pull/26233#pullrequestreview-1509416306_\r\n            \n", "hints_text": "### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https://matplotlib.org/stable/devel/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https://matplotlib.org/stable/devel/contributing.html#get-connected).\nHi, can I work on this issue?\nGo for it! \nI've reviewed the linked pull request, and I'm uncertain about the current status, whether the issue is still open or if the pull request is awaiting review. Could someone with more information provide an update?", "created_at": "2023-12-04T02:20:49Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27405, "instance_id": "matplotlib__matplotlib-27405", "issue_numbers": ["27399", "0000"], "base_commit": "e32cc6c71cf72c1416a19d03e1026fd2e7bd7d8b", "patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 2136ecb2eb94..90faa2ffab18 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -3682,6 +3682,11 @@ def apply_mask(arrays, mask):\n                     f\"'{dep_axis}err' (shape: {np.shape(err)}) must be a \"\n                     f\"scalar or a 1D or (2, n) array-like whose shape matches \"\n                     f\"'{dep_axis}' (shape: {np.shape(dep)})\") from None\n+            if err.dtype is np.dtype(object) and np.any(err == None):  # noqa: E711\n+                raise ValueError(\n+                    f\"'{dep_axis}err' must not contain None. \"\n+                    \"Use NaN if you want to skip a value.\")\n+\n             res = np.zeros(err.shape, dtype=bool)  # Default in case of nan\n             if np.any(np.less(err, -err, out=res, where=(err == err))):\n                 # like err<0, but also works for timedelta and nan.\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex dffbb2377a23..d5424f80c9e9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -4127,6 +4127,20 @@ def test_xerr_yerr_not_negative():\n                     yerr=datetime.timedelta(days=-10))\n \n \n+def test_xerr_yerr_not_none():\n+    ax = plt.figure().subplots()\n+\n+    with pytest.raises(ValueError,\n+                       match=\"'xerr' must not contain None\"):\n+        ax.errorbar(x=[0], y=[0], xerr=[[None], [1]], yerr=[[None], [1]])\n+    with pytest.raises(ValueError,\n+                       match=\"'xerr' must not contain None\"):\n+        ax.errorbar(x=[0], y=[0], xerr=[[None], [1]])\n+    with pytest.raises(ValueError,\n+                       match=\"'yerr' must not contain None\"):\n+        ax.errorbar(x=[0], y=[0], yerr=[[None], [1]])\n+\n+\n @check_figures_equal()\n def test_errorbar_every(fig_test, fig_ref):\n     x = np.linspace(0, 1, 15)\n", "problem_statement": "[Bug]: None in y or yerr arrays leads to TypeError when using errorbar\n### Bug summary\n\nWhen an element in the `y` or `yerr` arrays in `None` when using `errorbar`, a `TypeError` is raised.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\n# passes\r\na = [1,2,None]\r\nb = [0.1,0.2,0.3]\r\n\r\nplt.plot(a,b)\r\nplt.show()\r\nplt.close()\r\n\r\n# passes\r\na = [1,2,3]\r\nb = [0.1,0.2,None]\r\n\r\nplt.plot(a,b)\r\nplt.show()\r\nplt.close()\r\n\r\n# passes\r\na = [1,2,None]\r\nb = [0.1,0.2,0.3]\r\nberr = [0.04, 0.04, 0.04]\r\n\r\nplt.errorbar(a,b,yerr=berr)\r\nplt.show()\r\nplt.close()\r\n\r\n# fails\r\na = [1,2,3]\r\nb = [0.1,0.2,0.3]\r\nberr = [0.04, 0.04, None]\r\n\r\nplt.errorbar(a,b,yerr=berr)\r\nplt.show()\r\nplt.close()\r\n\r\n# fails\r\na = [1,2,3]\r\nb = [0.1,0.2,None]\r\nberr = [0.04, 0.04, 0.3]\r\n\r\nplt.errorbar(a,b,yerr=berr)\r\nplt.show()\r\nplt.close()\n```\n\n\n### Actual outcome\n\nThree graphs are successfully shown. The fourth one fails with:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<mydirectory>/plot.py\", line 33, in <module>\r\n    plt.errorbar(a,b,yerr=berr)\r\n  File \"<mypythonpackagesdirectory>/matplotlib/pyplot.py\", line 2564, in errorbar\r\n    return gca().errorbar(\r\n           ^^^^^^^^^^^^^^^\r\n  File \"<mypythonpackagesdirectory>/matplotlib/__init__.py\", line 1446, in inner\r\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<mypythonpackagesdirectory>/matplotlib/axes/_axes.py\", line 3634, in errorbar\r\n    if np.any(np.less(err, -err, out=res, where=(err == err))):\r\n                           ^^^^\r\nTypeError: bad operand type for unary -: 'NoneType'\r\n```\n\n### Expected outcome\n\nI understand that there might not be a right outcome here but maybe, as done with `plt.plot`, a point where any of the `x`, `y`, `yerr` items are `None`, could simply not be plotted.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.11.4\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "In general, the way to skip values in Matplotlib is to use NaN, so `np.nan` or `float('NaN')`, which should solve your issue short-term.\r\n\r\nOne can discuss how this should be handled though. Here, the error comes from checking that the errors does not contain negative values. `None` is clearly not a negative value and the way the code is written is to deal with timedelta and nan in a correct way. It should be possible to update the code to also ignore `None` (which may break something later on, but that remains to be seen).\nI checked this quickly and removing the check makes it now die on https://github.com/matplotlib/matplotlib/blob/88e4a4333fd36063dc04935891e228d65f5bb5cb/lib/matplotlib/axes/_axes.py#L3694\r\ntrying to multiply int and None.\r\n\r\nI see two options:\r\n1. Check for `None` in `err` and error with a better message (saying that `nan` should be used)\r\n2. Convert `None` to `nan`\r\n\r\n", "created_at": "2023-11-30T11:29:45Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27376, "instance_id": "matplotlib__matplotlib-27376", "issue_numbers": ["27375", "0000"], "base_commit": "62a5ba4d3e3ac6f32ea4c8c9e89c62381390ac9a", "patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex ddbb6cb36728..1255818b41b5 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -999,9 +999,24 @@ def gcf() -> Figure:\n         return figure()\n \n \n-def fignum_exists(num: int) -> bool:\n-    \"\"\"Return whether the figure with the given id exists.\"\"\"\n-    return _pylab_helpers.Gcf.has_fignum(num) or num in get_figlabels()\n+def fignum_exists(num: int | str) -> bool:\n+    \"\"\"Return whether the figure with the given id exists.\n+\n+    Parameters\n+    ----------\n+    num : int or str\n+        A figure identifier.\n+\n+    Returns\n+    -------\n+    bool\n+        Whether or not a figure with id *num* exists.\n+    \"\"\"\n+    return (\n+        _pylab_helpers.Gcf.has_fignum(num)\n+        if isinstance(num, int)\n+        else num in get_figlabels()\n+    )\n \n \n def get_fignums() -> list[int]:\n", "test_patch": "", "problem_statement": "[MNT]: Type annotations for `fignum_exists` should allow strings\n### Summary\r\n\r\nThe `num` argument of `matplotlib.pyplot.fignum_exists` is annotated as an integer, although it can also be a string:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/eb02b108ea181930ab37717c75e07ba792e01f1d/lib/matplotlib/pyplot.py#L1003-L1005\r\n\r\n### Proposed fix\r\n\r\n`num` should be annotated as `int | str`.\n", "hints_text": "", "created_at": "2023-11-27T12:07:49Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27365, "instance_id": "matplotlib__matplotlib-27365", "issue_numbers": ["27358", "0000"], "base_commit": "0a4efbeed0c784dee4a44ab4da8cc02c647510fe", "patch": "diff --git a/galleries/examples/widgets/menu.py b/galleries/examples/widgets/menu.py\nindex b8f5268a6477..8d3db3d1b9c3 100644\n--- a/galleries/examples/widgets/menu.py\n+++ b/galleries/examples/widgets/menu.py\n@@ -3,13 +3,12 @@\n Menu\n ====\n \n+Using texts to construct a simple menu.\n \"\"\"\n-\n import matplotlib.pyplot as plt\n \n import matplotlib.artist as artist\n import matplotlib.patches as patches\n-from matplotlib.transforms import IdentityTransform\n \n \n class ItemProperties:\n@@ -22,8 +21,8 @@ def __init__(self, fontsize=14, labelcolor='black', bgcolor='yellow',\n \n \n class MenuItem(artist.Artist):\n-    padx = 5\n-    pady = 5\n+    padx = 0.05  # inches\n+    pady = 0.05\n \n     def __init__(self, fig, labelstr, props=None, hoverprops=None,\n                  on_select=None):\n@@ -41,14 +40,16 @@ def __init__(self, fig, labelstr, props=None, hoverprops=None,\n \n         self.on_select = on_select\n \n-        # Setting the transform to IdentityTransform() lets us specify\n-        # coordinates directly in pixels.\n-        self.label = fig.text(0, 0, labelstr, transform=IdentityTransform(),\n+        # specify coordinates in inches.\n+        self.label = fig.text(0, 0, labelstr, transform=fig.dpi_scale_trans,\n                               size=props.fontsize)\n         self.text_bbox = self.label.get_window_extent(\n             fig.canvas.get_renderer())\n+        self.text_bbox = fig.dpi_scale_trans.inverted().transform_bbox(self.text_bbox)\n \n-        self.rect = patches.Rectangle((0, 0), 1, 1)  # Will be updated later.\n+        self.rect = patches.Rectangle(\n+            (0, 0), 1, 1, transform=fig.dpi_scale_trans\n+        )  # Will be updated later.\n \n         self.set_hover_props(False)\n \n@@ -63,7 +64,7 @@ def check_select(self, event):\n \n     def set_extent(self, x, y, w, h, depth):\n         self.rect.set(x=x, y=y, width=w, height=h)\n-        self.label.set(position=(x + self.padx, y + depth + self.pady/2))\n+        self.label.set(position=(x + self.padx, y + depth + self.pady / 2))\n         self.hover = False\n \n     def draw(self, renderer):\n@@ -97,10 +98,10 @@ def __init__(self, fig, menuitems):\n         maxh = max(item.text_bbox.height for item in menuitems)\n         depth = max(-item.text_bbox.y0 for item in menuitems)\n \n-        x0 = 100\n-        y0 = 400\n+        x0 = 1\n+        y0 = 4\n \n-        width = maxw + 2*MenuItem.padx\n+        width = maxw + 2 * MenuItem.padx\n         height = maxh + MenuItem.pady\n \n         for item in menuitems:\n", "test_patch": "", "problem_statement": "[Doc]: Garbled menu widget example output \n### Documentation Link\n\nhttps://matplotlib.org/devdocs/gallery/widgets/menu.html\n\n### Problem\n\n![grafik](https://github.com/matplotlib/matplotlib/assets/19879328/d2d021ad-fa03-4fb4-adfd-9bcf8b75b3af)\r\n\n\n### Suggested improvement\n\nShould be as in [version 3.4](https://matplotlib.org/3.4.3/gallery/widgets/menu.html) and before:\r\n![grafik](https://github.com/matplotlib/matplotlib/assets/19879328/53e76b55-106e-4004-8299-2c78a03aeaa2)\r\n\n", "hints_text": "This does not show up poorly when I run it locally, so not totally sure why it is going wrong on the docs...\nRight: [`sphx_glr_menu_001.png`](https://matplotlib.org/devdocs/_images/sphx_glr_menu_001.png) is correct and only [`sphx_glr_menu_001_2_00x.png`](https://matplotlib.org/devdocs/_images/sphx_glr_menu_001_2_00x.png) is poorly aligned.  \r\nSo the issue is linked to saving the figure with dpi settings different from 100, probably caused by using the `IdentityTransform` to specify label positions.\nAh... this is likely because the position, sizing, and padding values are specified in pixels in these examples, and not updated when the DPI changes... I know @QuLogic has had some thoughts towards similar problems in the past, so I will tag him in here.\nI suspect the \"easy\" fix would be to reuse the trick of https://matplotlib.org/devdocs/gallery/text_labels_and_annotations/rainbow_text.html to position texts relative to one another.", "created_at": "2023-11-23T12:41:44Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27362, "instance_id": "matplotlib__matplotlib-27362", "issue_numbers": ["26593", "0000"], "base_commit": "02489d4002e7d46712ac51694ceb568673fc61ff", "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd26af84ccbe..11b42b1e1ac7 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1577,6 +1577,7 @@ def add_subfigure(self, subplotspec, **kwargs):\n         \"\"\"\n         sf = SubFigure(self, subplotspec, **kwargs)\n         self.subfigs += [sf]\n+        sf._remove_method = self.subfigs.remove\n         return sf\n \n     def sca(self, a):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex 6d6a3d772f4e..24d4f1c0f059 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1482,6 +1482,13 @@ def test_subfigures_wspace_hspace():\n     np.testing.assert_allclose(sub_figs[1, 2].bbox.max, [w, h * 0.4])\n \n \n+def test_subfigure_remove():\n+    fig = plt.figure()\n+    sfs = fig.subfigures(2, 2)\n+    sfs[1, 1].remove()\n+    assert len(fig.subfigs) == 3\n+\n+\n def test_add_subplot_kwargs():\n     # fig.add_subplot() always creates new axes, even if axes kwargs differ.\n     fig = plt.figure()\n", "problem_statement": "[ENH]: Support SubFigure.remove()\n### Problem\n\nCurrently SubFigures cannot be remove()d from the parent figure.  The API would be more consistent if that was possible.\n\n### Proposed solution\n\nImplement SubFigure.remove().\n", "hints_text": "Hi, can you explain with details what this new feature would be able to do? maybe a sample code to show what were you trying to do\n`sfig.remove()` would remove the subfigure and all its children from the figure.   Note that our removal machinery is non-trivial, but doing something similar as what is done for axes should work.  I'm not 100% sure how the tree gets traversed. \r\n\r\nIf someone works on this, it would be nice to write up your notes so we can document how `remove` is meant to work. ", "created_at": "2023-11-22T22:04:20Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27360, "instance_id": "matplotlib__matplotlib-27360", "issue_numbers": ["27329", "0000"], "base_commit": "02489d4002e7d46712ac51694ceb568673fc61ff", "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex b54211654d13..920c0d67722a 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -1035,14 +1035,11 @@ def remove(self):\n         except AttributeError:\n             return\n         try:\n-            gs = ax.get_subplotspec().get_gridspec()\n-            subplotspec = gs.get_topmost_subplotspec()\n-        except AttributeError:\n-            # use_gridspec was False\n+            subplotspec = self.ax.get_subplotspec().get_gridspec()._subplot_spec\n+        except AttributeError:  # use_gridspec was False\n             pos = ax.get_position(original=True)\n             ax._set_position(pos)\n-        else:\n-            # use_gridspec was True\n+        else:  # use_gridspec was True\n             ax.set_subplotspec(subplotspec)\n \n     def _process_values(self):\n", "test_patch": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 0cf098e787ee..509d08dae183 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -279,13 +279,16 @@ def test_colorbar_single_scatter():\n     plt.colorbar(cs)\n \n \n-@pytest.mark.parametrize('use_gridspec', [False, True],\n-                         ids=['no gridspec', 'with gridspec'])\n-def test_remove_from_figure(use_gridspec):\n-    \"\"\"\n-    Test `remove` with the specified ``use_gridspec`` setting\n-    \"\"\"\n-    fig, ax = plt.subplots()\n+@pytest.mark.parametrize('use_gridspec', [True, False])\n+@pytest.mark.parametrize('nested_gridspecs', [True, False])\n+def test_remove_from_figure(nested_gridspecs, use_gridspec):\n+    \"\"\"Test `remove` with the specified ``use_gridspec`` setting.\"\"\"\n+    fig = plt.figure()\n+    if nested_gridspecs:\n+        gs = fig.add_gridspec(2, 2)[1, 1].subgridspec(2, 2)\n+        ax = fig.add_subplot(gs[1, 1])\n+    else:\n+        ax = fig.add_subplot()\n     sc = ax.scatter([1, 2], [3, 4])\n     sc.set_array(np.array([5, 6]))\n     pre_position = ax.get_position()\n@@ -298,9 +301,7 @@ def test_remove_from_figure(use_gridspec):\n \n \n def test_remove_from_figure_cl():\n-    \"\"\"\n-    Test `remove` with constrained_layout\n-    \"\"\"\n+    \"\"\"Test `remove` with constrained_layout.\"\"\"\n     fig, ax = plt.subplots(constrained_layout=True)\n     sc = ax.scatter([1, 2], [3, 4])\n     sc.set_array(np.array([5, 6]))\n", "problem_statement": "[Bug]: Removing a colorbar for an axes positioned in a subgridspec restores the axes' position to the wrong place.\n### Bug summary\n\nDraw an image in an axes in a subgridspec (e.g. generated using nested subplot_mosaic), add a colorbar for that image, and then remove the colorbar.  The image-containing axes will move to the wrong place.\n\n### Code for reproduction\n\n```python\nfrom pylab import *\r\n\r\nfig = figure()\r\naxs = fig.subplot_mosaic([\r\n    [\"A\", \"B\"],\r\n    [\"C\", [[\"d\", \"e\"],\r\n           [\"f\", \"g\"]]]\r\n])\r\nim = axs[\"g\"].imshow([[1, 2]])\r\ncb = fig.colorbar(im)\r\ncb.remove()\r\nshow()\n```\n\n\n### Actual outcome\n\n![bad](https://github.com/matplotlib/matplotlib/assets/1322974/b8495fb8-bade-4d10-8f9b-59acf001363a)\r\n\n\n### Expected outcome\n\n![good](https://github.com/matplotlib/matplotlib/assets/1322974/e5a55d28-78a9-4125-8dce-cc62db4b97d7)\r\n\n\n### Additional information\n\nThis basically arises because the colorbar-removal-axes-restoring (Colorbar.remove) code uses get_topmost_subplotspec, which indiscriminately climbs up the entire nested gridspec tree.  Instead it should just climb up the correct number of levels to find the subplotspec where the axes should be restored.  (I'm not actually convinced that there are so many legitimate uses for get_topmost_subplotspec, and perhaps that function should be deprecated; likely all uses will fail if gridspecs are more nested than expected.)\r\n\r\nThe bug occurs even if using constrained_layout, which doesn't mess with gridspecs when placing colorbars, as Colorbar.remove actually checks the gridspec of ax, not the one of the colorbar axes cax.\n\n### Operating system\n\nmacos\n\n### Matplotlib Version\n\n3.8.1 or HEAD\n\n### Matplotlib Backend\n\nqtagg\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nenosuchlib\n\n### Installation\n\nNone\n", "hints_text": "", "created_at": "2023-11-22T13:45:15Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27353, "instance_id": "matplotlib__matplotlib-27353", "issue_numbers": ["27352", "0000"], "base_commit": "bfff33b448fe4d740fcd0e891e671718e7bd045f", "patch": "diff --git a/lib/mpl_toolkits/axisartist/axislines.py b/lib/mpl_toolkits/axisartist/axislines.py\nindex ced2703d1ed6..6f28e5c61a2f 100644\n--- a/lib/mpl_toolkits/axisartist/axislines.py\n+++ b/lib/mpl_toolkits/axisartist/axislines.py\n@@ -84,9 +84,15 @@ def get_tick_iterators(self, axes):\n             return iter_major, iter_minor\n     \"\"\"\n \n+    def __init__(self, nth_coord):\n+        self.nth_coord = nth_coord\n+\n     def update_lim(self, axes):\n         pass\n \n+    def get_nth_coord(self):\n+        return self.nth_coord\n+\n     def _to_xy(self, values, const):\n         \"\"\"\n         Create a (*values.shape, 2)-shape array representing (x, y) pairs.\n@@ -115,17 +121,13 @@ class _FixedAxisArtistHelperBase(_AxisArtistHelperBase):\n     @_api.delete_parameter(\"3.9\", \"nth_coord\")\n     def __init__(self, loc, nth_coord=None):\n         \"\"\"``nth_coord = 0``: x-axis; ``nth_coord = 1``: y-axis.\"\"\"\n-        self.nth_coord = _api.check_getitem(\n-            {\"bottom\": 0, \"top\": 0, \"left\": 1, \"right\": 1}, loc=loc)\n+        super().__init__(_api.check_getitem(\n+            {\"bottom\": 0, \"top\": 0, \"left\": 1, \"right\": 1}, loc=loc))\n         self._loc = loc\n         self._pos = {\"bottom\": 0, \"top\": 1, \"left\": 0, \"right\": 1}[loc]\n-        super().__init__()\n         # axis line in transAxes\n         self._path = Path(self._to_xy((0, 1), const=self._pos))\n \n-    def get_nth_coord(self):\n-        return self.nth_coord\n-\n     # LINE\n \n     def get_line(self, axes):\n@@ -158,12 +160,8 @@ def get_tick_transform(self, axes):\n \n class _FloatingAxisArtistHelperBase(_AxisArtistHelperBase):\n     def __init__(self, nth_coord, value):\n-        self.nth_coord = nth_coord\n         self._value = value\n-        super().__init__()\n-\n-    def get_nth_coord(self):\n-        return self.nth_coord\n+        super().__init__(nth_coord)\n \n     def get_line(self, axes):\n         raise RuntimeError(\"get_line method should be defined by the derived class\")\n", "test_patch": "", "problem_statement": "Make nth_coord private\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https://matplotlib.org/devdocs/devel/index.html\r\n-->\r\n\r\nSince there is a `get_nth_coord` method, it makes sense to make this private. However, `get_nth_coord` is not documented, so not really clear if it makes sense to write a release note that says to use that instead? So setting to draft until that is clarified.\r\n\r\nIn addition, moving parts to `_AxisArtistHelperBase` made e.g. PyCharm a bit happier. (Btw, the previous calls to `super().__init__()` were superfluous.)\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https://matplotlib.org/devdocs/devel/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https://matplotlib.org/devdocs/devel/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https://matplotlib.org/devdocs/devel/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https://matplotlib.org/devdocs/devel/document.html#write-rest-pages) and [docstring](https://matplotlib.org/devdocs/devel/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n\n", "hints_text": "There's a few places where axisartist examples explicitly *set* nth_coord_ticks so at least that one seems to be intended as settable (basically it occurs when a curvilinear grid crosses a rectangular axes box; in that case you can choose to show the ticks corresponding to either data dimension on the rectangular axes box).\r\nSo unless you also introduce a set_nth_coord_ticks to handle that case, I'd rather leave nth_coords as something you can simply access via an attribute.  (I'm not sure whether moving everything to get/set here is better, though that's not impossible either.)\nI may be missing something, but just want to point out that `nth_coord_ticks` and `nth_coord` are different attributes (although connected in that `nth_coord` is used if `nth_coord_ticks` is not provided). I've also seen the setting of `nth_coord_ticks`, but `nth_coord` is not touched (or read) in the examples as far as I can tell.\r\n\r\nStill, your concern is valid. Just want to make sure that it is not based on a mix-up.\nYes, I know these are different attributes.  Even though one is mostly readonly whereas the other is r/w, I still think it would be good to have not-too-divergent APIs for them.", "created_at": "2023-11-20T15:32:55Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27334, "instance_id": "matplotlib__matplotlib-27334", "issue_numbers": ["27333", "0000"], "base_commit": "b16031ce6f711b8c80c2122886b9b43149a0971f", "patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex d3ae83c613b1..7404151e7699 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1339,15 +1339,18 @@ def _find_nearest_contour(self, xy, indices=None):\n \n         for idx_level in indices:\n             path = self._paths[idx_level]\n-            if not len(path.vertices):\n-                continue\n-            lc = self.get_transform().transform(path.vertices)\n-            d2, proj, leg = _find_closest_point_on_path(lc, xy)\n-            if d2 < d2min:\n-                d2min = d2\n-                idx_level_min = idx_level\n-                idx_vtx_min = leg[1]\n-                proj_min = proj\n+            idx_vtx_start = 0\n+            for subpath in path._iter_connected_components():\n+                if not len(subpath.vertices):\n+                    continue\n+                lc = self.get_transform().transform(subpath.vertices)\n+                d2, proj, leg = _find_closest_point_on_path(lc, xy)\n+                if d2 < d2min:\n+                    d2min = d2\n+                    idx_level_min = idx_level\n+                    idx_vtx_min = leg[1] + idx_vtx_start\n+                    proj_min = proj\n+                idx_vtx_start += len(subpath)\n \n         return idx_level_min, idx_vtx_min, proj_min\n \n", "test_patch": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex db8ef03925cd..f79584be4086 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -125,6 +125,25 @@ def test_contour_manual_labels(split_collections):\n     plt.clabel(cs, manual=pts, fontsize='small', colors=('r', 'g'))\n \n \n+def test_contour_manual_moveto():\n+    x = np.linspace(-10, 10)\n+    y = np.linspace(-10, 10)\n+\n+    X, Y = np.meshgrid(x, y)\n+\n+    Z = X**2 * 1 / Y**2 - 1\n+\n+    contours = plt.contour(X, Y, Z, levels=[0, 100])\n+\n+    # This point lies on the `MOVETO` line for the 100 contour\n+    # but is actually closest to the 0 contour\n+    point = (1.3, 1)\n+    clabels = plt.clabel(contours, manual=[point])\n+\n+    # Ensure that the 0 contour was chosen, not the 100 contour\n+    assert clabels[0].get_text() == \"0\"\n+\n+\n @pytest.mark.parametrize(\"split_collections\", [False, True])\n @image_comparison(['contour_disconnected_segments'],\n                   remove_text=True, style='mpl20', extensions=['png'])\n", "problem_statement": "[Bug]: Spurious lines added with some manually add contour labels\n### Bug summary\n\nWith Matplotlib 3.8+ I'm seeing spurious lines that get added with manually labeled contours via `clabel`.\r\n\r\nIt seems to only happen in locations where the contours are more complex or near those areas, but I haven't been able to track down why this happens.  \n\n### Code for reproduction\n\n```python\nExample code (here working with Matplotlib <3.8): https://geocat-examples.readthedocs.io/en/latest/gallery/Contours/NCL_coneff_8.html\r\n\r\nI'll work on stripping down this example though.\n```\n\n\n### Actual outcome\n\nwhen run in a script that provided a manual list of contour label locations:\r\n<img width=\"623\" alt=\"Screen Shot 2023-11-15 at 3 17 14 PM\" src=\"https://github.com/matplotlib/matplotlib/assets/7872563/a5815b2f-3160-4f10-a9ac-03894c203314\">\r\n\r\nwhen locations were manually clicked:\r\n<img width=\"763\" alt=\"Screen Shot 2023-11-15 at 3 21 19 PM\" src=\"https://github.com/matplotlib/matplotlib/assets/7872563/10f083da-5845-46a0-98ea-c6eb47371d23\">\r\n\r\n\n\n### Expected outcome\n\nsimilar, but without the spurious straight lines.\n\n### Additional information\n\nWhat are the conditions under which this bug happens?\r\n* happens with both \"clicked\" and specified manual contour labels in certain locations\r\n* seems to happen only near areas with more complex contours\r\n* interestingly, this also happens when you specify contour label locations this way on a cartopy map and the specified points are not on the projected map.  however, this is not the case here.\r\nHas this worked in earlier versions?\r\n* worked prior to 3.8\r\nDo you know why this bug is happening?\r\n* unfortunately, no.  will look into it a bit more though.\r\n\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.8.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.11.6\n\n### Jupyter version\n\n4.0.8\n\n### Installation\n\nconda\n", "hints_text": "Do you have a minimal (i.e. mpl + numpy only, preferably) reproducer of this?\r\n\r\nI know that there were some issues in 3.8.0 that seem similar at least, but I _thought_ I fixed them for 3.8.1 in #27045. Are you sure they persist in 3.8.1?\nSorry about that.  \r\n\r\nHere you go:\r\n\r\n```\r\nfrom matplotlib import pyplot as plt\r\nimport numpy as np\r\n\r\nlat = [-87.8638  , -85.09653 , -82.31291 , -79.525604, -76.7369  , -73.94752 ,\r\n       -71.15775 , -68.36776 , -65.57761 , -62.787354, -59.99702 , -57.20663 ,\r\n       -54.4162  , -51.625732, -48.83524 , -46.044727, -43.254196, -40.46365 ,\r\n       -37.673088, -34.882523, -32.091946, -29.30136 , -26.510769, -23.720175,\r\n       -20.929575, -18.138971, -15.348365, -12.557756,  -9.767145,  -6.976533]\r\nplev = [100000,  85000,  70000,  50000,  40000,  30000,  25000,  20000]\r\nu = np.array([[ 5.281284  ,  5.281284  ,  5.281284  ,  5.281284  ,  5.281284  ,\r\n         5.281284  ,  5.281284  ,  5.281284  ,  5.281284  ,  5.281284  ,\r\n         5.281284  ,  5.281284  ,  5.281284  ,  5.281284  ,  4.5694838 ,\r\n         8.355004  ,  8.594497  ,  7.364512  ,  5.3017035 ,  2.8804004 ,\r\n         0.5346078 , -1.9970245 , -4.043903  , -5.495614  , -6.4742966 ,\r\n        -6.86549   , -6.916672  , -6.6135497 , -5.824724  , -4.929174  ],\r\n       [-7.8476605 , -7.8476605 , -7.8476605 , -4.9444113 , -4.6574264 ,\r\n        -4.4306536 , -1.0847874 ,  0.23506624,  2.1887915 ,  6.6546087 ,\r\n        10.182983  , 12.602904  , 14.024249  , 14.453691  , 14.11188   ,\r\n        13.432743  , 12.298697  , 10.441111  ,  8.136927  ,  5.701264  ,\r\n         3.1575031 ,  0.8824925 , -0.8204733 , -2.142562  , -3.2946696 ,\r\n        -4.214696  , -5.014298  , -5.75503   , -5.797411  , -4.7429767 ],\r\n       [-4.7934184 , -3.987672  , -3.880484  , -3.8545942 , -3.400934  ,\r\n        -2.1740034 , -1.4144217 ,  1.8231349 ,  5.741105  ,  9.357849  ,\r\n        12.589281  , 15.095114  , 16.566757  , 17.07177   , 16.893904  ,\r\n        16.211683  , 15.016567  , 13.3146    , 11.277677  ,  9.180042  ,\r\n         7.2710013 ,  5.7038155 ,  4.5025063 ,  3.3811352 ,  1.9761666 ,\r\n         0.17865679, -1.848804  , -3.5658486 , -4.2557425 , -3.6108153 ],\r\n       [-0.6427475 , -1.3300483 , -1.8785819 , -1.8878341 , -1.1554126 ,\r\n         0.2460148 ,  2.640771  ,  5.841252  ,  9.352374  , 12.879071  ,\r\n        16.21606   , 19.04898   , 20.9498    , 21.753773  , 21.649551  ,\r\n        20.907742  , 19.693817  , 18.178251  , 16.707623  , 15.646201  ,\r\n        15.057117  , 14.641205  , 13.846154  , 12.143323  ,  9.386396  ,\r\n         5.9252477 ,  2.368536  , -0.5125828 , -2.0722165 , -2.2778945 ],\r\n       [-0.58929294, -1.2046508 , -1.4544653 , -1.0103273 ,  0.15982199,\r\n         1.9466033 ,  4.447282  ,  7.6771903 , 11.419675  , 15.136187  ,\r\n        18.620575  , 21.717804  , 23.922436  , 24.840185  , 24.701748  ,\r\n        23.987408  , 22.880804  , 21.526987  , 20.463743  , 20.20535   ,\r\n        20.610573  , 20.982576  , 20.493448  , 18.504211  , 14.933222  ,\r\n        10.389049  ,  5.7908807 ,  2.0268278 , -0.2654018 , -1.0479335 ],\r\n       [-0.4088514 , -0.7439224 , -0.6603948 ,  0.0878893 ,  1.6308761 ,\r\n         3.7945688 ,  6.51758   , 10.002526  , 14.048776  , 18.030323  ,\r\n        21.763384  , 25.12306   , 27.494097  , 28.48131   , 28.469887  ,\r\n        27.976196  , 27.148748  , 26.233028  , 25.929998  , 26.776876  ,\r\n        28.395657  , 29.60503   , 29.1222    , 26.262024  , 21.399248  ,\r\n        15.65298   , 10.07546   ,  5.45065   ,  2.312821  ,  0.5890202 ],\r\n       [-0.30047217, -0.4094708 , -0.09946479,  0.78269076,  2.5223484 ,\r\n         4.950463  ,  7.8729997 , 11.537473  , 15.756553  , 19.893959  ,\r\n        23.728504  , 27.066483  , 29.343843  , 30.36043   , 30.488892  ,\r\n        30.099907  , 29.479034  , 29.078144  , 29.513182  , 31.190378  ,\r\n        33.604244  , 35.186615  , 34.35078   , 30.635078  , 24.895414  ,\r\n        18.486992  , 12.361381  ,  7.0874414 ,  3.166243  ,  0.7561427 ],\r\n       [-0.11722137,  0.06281883,  0.64088964,  1.7681435 ,  3.7674735 ,\r\n         6.47419   ,  9.705322  , 13.647254  , 18.064777  , 22.31285   ,\r\n        26.111181  , 29.2265    , 31.215776  , 32.078777  , 32.2106    ,\r\n        31.913328  , 31.606083  , 31.906605  , 33.293755  , 35.880253  ,\r\n        38.87251   , 40.392326  , 38.82986   , 34.17306   , 27.61663   ,\r\n        20.4983    , 13.791601  ,  8.023929  ,  3.5063663 ,  0.5009983 ]])\r\n\r\ncontours = plt.contour(lat,plev,u,\r\n                             levels=13,\r\n                             vmin=-8,\r\n                             vmax=40,\r\n                             colors='black',\r\n                             linewidths=0.5,\r\n                             linestyles='solid')\r\n\r\n# Label the contours\r\nmanual = [(-70, 55000), (-80, 26000), (-58, 30000), (-25, 42000),\r\n          (-45, 69500), (-40, 34000), (-12, 39000), (-37, 75000),\r\n          (-72, 22500)]\r\n\r\nclabels = plt.clabel(contours,\r\n                     fontsize=12,\r\n                     colors=\"black\",\r\n                     fmt=\"%.0f\",\r\n                     manual=manual)\r\n```\r\n\r\nThere were some similar issues in maptlotlib 3.8 that seem to have cleared up now, but this is with 3.8.1\nOkay, what is happening here is that the \"nearest contour\" logic is picking the point along the `MOVETO` line (which isn't drawn), and needs to filter out results with `codes=MOVETO`)\r\n\r\nThe above with a few things drawn:\r\n\r\n```python\r\npath = contours.get_paths()[2]\r\nfullpath = path.deepcopy()\r\nfullpath.codes[1:] = 2\r\nplt.gca().add_artist(mpatches.PathPatch(path, facecolor=\"none\", edgecolor=\"C0\", lw=4))\r\nplt.gca().add_artist(mpatches.PathPatch(fullpath, facecolor=\"none\", edgecolor=\"C3\", lw=2))\r\n\r\nplt.plot([-72], [22500], \"C1o\")\r\n```\r\n\r\nShows that the offending point lies right on the omitted line.\r\n\r\nBlue is the 0 contour, red is the 0 contour with all \"LINETO\" codes in the path (After the first point), orange dot is the requested manual position for the offending contour.\r\n\r\n![Figure_1](https://github.com/matplotlib/matplotlib/assets/2501846/e098c639-72c6-4644-aaf5-81373c37b5ad)\r\n\r\nShould be relatively easy to fix, I think...", "created_at": "2023-11-16T18:23:32Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27290, "instance_id": "matplotlib__matplotlib-27290", "issue_numbers": ["27262", "0000"], "base_commit": "ea66786a00d351a558a9ecd7392c89606bd256d6", "patch": "diff --git a/src/_macosx.m b/src/_macosx.m\nindex 6df00d0eca8e..a580362f676f 100755\n--- a/src/_macosx.m\n+++ b/src/_macosx.m\n@@ -1132,8 +1132,10 @@ - (void)setCanvas: (PyObject*)newCanvas\n }\n \n static void _buffer_release(void* info, const void* data, size_t size) {\n+    PyGILState_STATE gstate = PyGILState_Ensure();\n     PyBuffer_Release((Py_buffer *)info);\n     free(info);\n+    PyGILState_Release(gstate);\n }\n \n static int _copy_agg_buffer(CGContextRef cr, PyObject *renderer)\n", "test_patch": "", "problem_statement": "[Bug]: Segmentation fault when resizing on Python 3.12 and MacOS 14\n### Bug summary\n\nI upgraded Python from 3.11 to 3.12 and now I am unable to resize the window, even with a simple plot.\r\nApart from that, the plots are displayed correctly and I can move the window.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nplt.subplots()\r\nplt.show()\n```\n\n\n### Actual outcome\n\n[1]    xxxxx segmentation fault  python3.12 main.py\n\n### Expected outcome\n\nI expected the window to be resized without crashing\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nMacOS 14\n\n### Matplotlib Version\n\n3.8.1\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\n3.12.0\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n", "hints_text": "Confirming that I was able to reproduce with Python 3.12 and Matplotlib 3.8.1 from conda-forge, macOS 14.1 on an M2.\r\n\r\nEDIT: This is using the macosx backend\nI cannot reproduce on an Intel Mac with matplotlib 3.8.1 from PyPI, so possibly just ARM related? Does 3.8.0 work as expected?\n> I cannot reproduce on an Intel Mac with matplotlib 3.8.1 from PyPI, so possibly just ARM related? Does 3.8.0 work as expected?\r\n\r\nYeah I forgot to mention this happens on an M1.\r\nI also tried version 3.8.0 and 3.7.0, but get the same result. The bug appears to be related to the use of Python 3.12\nI can also reproduce (previously had py3.11 on that machine, so did not run into it)\r\n\r\nHere is the faulthandler:\r\n\r\n```python\r\nkyle@aluminum matplotlib % python -X faulthandler \r\nPython 3.12.0 (main, Nov  3 2023, 10:35:24) [Clang 15.0.0 (clang-1500.0.40.1)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import matplotlib.pyplot as plt\r\n>>> plt.plot([2,5,1])\r\n[<matplotlib.lines.Line2D object at 0x12286e1b0>]\r\n>>> plt.show()\r\nFatal Python error: Segmentation fault\r\n\r\nCurrent thread 0x00000001e52b5300 (most recent call first):\r\n  File \"/Users/kyle/.pyenv/versions/edge-312/lib/python3.12/site-packages/matplotlib/backends/backend_macosx.py\", line 183 in start_main_loop\r\n  File \"/Users/kyle/.pyenv/versions/edge-312/lib/python3.12/site-packages/matplotlib/backend_bases.py\", line 3448 in show\r\n  File \"/Users/kyle/.pyenv/versions/edge-312/lib/python3.12/site-packages/matplotlib/pyplot.py\", line 527 in show\r\n  File \"<stdin>\", line 1 in <module>\r\n\r\nExtension modules: numpy.core._multiarray_umath, numpy.core._multiarray_tests, numpy.linalg._umath_linalg, numpy.fft._pocketfft_internal, numpy.random._common, numpy.random.bit_generator, numpy.random._bounded_integers, numpy.random._mt19937, numpy.random.mtrand, numpy.random._philox, numpy.random._pcg64, numpy.random._sfc64, numpy.random._generator, matplotlib._c_internal_utils, PIL._imaging, matplotlib._path, kiwisolver._cext, matplotlib._image, matplotlib.backends._macosx (total: 19)\r\n```\r\n\r\nCan also confirm that it seems specific to the macosx backend (e.g. qt does _not_ segfault)\r\n\r\nNo surprise, but the innermost python call identified by the faulthandler traceback is a line calling into the obj-C extension module:\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/fac632fe3c66344418b654d0ac86e9598c1fa89f/lib/matplotlib/backends/backend_macosx.py#L183\r\n\r\nEdit: Python compiled from source via pyenv, so not specific to conda.\nThis suggests that the issues is with our extension module and have been bit by the c-level changes in upstream.\nBisects to https://github.com/python/cpython/commit/df3173d28ef25a0f97d2cca8cf4e64e062a08d06 (python/cpython#101660)\r\n\r\nThat commit changed memory allocation behavior, though not immediately obvious to me what we are doing wrong (if anything).\r\n\r\nThe stated intent of the change is to enable per-subinterpretter GIL, though we do not (intentionally) use that feature (though the commit message does indicate value outside of that, and also states that the errors are indicative of problems down the line). ", "created_at": "2023-11-08T22:35:15Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27276, "instance_id": "matplotlib__matplotlib-27276", "issue_numbers": ["27274", "0000"], "base_commit": "8ecb2c47f050be4d93cd3aaca96c86f547aef938", "patch": "diff --git a/lib/matplotlib/ticker.py b/lib/matplotlib/ticker.py\nindex 41114aafbf3e..8f863582b33b 100644\n--- a/lib/matplotlib/ticker.py\n+++ b/lib/matplotlib/ticker.py\n@@ -1996,13 +1996,11 @@ def __init__(self, nbins=None, **kwargs):\n             If True, autoscaling will result in a range symmetric about zero.\n \n         prune : {'lower', 'upper', 'both', None}, default: None\n-            Remove edge ticks -- useful for stacked or ganged plots where\n-            the upper tick of one axes overlaps with the lower tick of the\n-            axes above it, primarily when :rc:`axes.autolimit_mode` is\n-            ``'round_numbers'``.  If ``prune=='lower'``, the smallest tick will\n-            be removed.  If ``prune == 'upper'``, the largest tick will be\n-            removed.  If ``prune == 'both'``, the largest and smallest ticks\n-            will be removed.  If *prune* is *None*, no ticks will be removed.\n+            Remove the 'lower' tick, the 'upper' tick, or ticks on 'both' sides\n+            *if they fall exactly on an axis' edge* (this typically occurs when\n+            :rc:`axes.autolimit_mode` is 'round_numbers').  Removing such ticks\n+            is mostly useful for stacked or ganged plots, where the upper tick\n+            of an axes overlaps with the lower tick of the axes above it.\n \n         min_n_ticks : int, default: 2\n             Relax *nbins* and *integer* constraints if necessary to obtain\n", "test_patch": "", "problem_statement": "[Bug]: prune parameter of MaxNLocator has no effect\n### Bug summary\r\n\r\nThe `MaxNLocator` with the `prune` parameter does not work as documented.\r\nI read:\r\n\r\n> **prune: {'lower', 'upper', 'both', None}, default: None**\r\n> \r\n> Remove edge ticks -- useful for stacked or ganged plots where the upper tick of one axes overlaps with the lower tick of the axes above it, primarily when [rcParams[\"axes.autolimit_mode\"]](https://matplotlib.org/stable/users/explain/customizing.html?highlight=axes.autolimit_mode#matplotlibrc-sample) (default: 'data') is 'round_numbers'. If prune=='lower', the smallest tick will be removed. If prune == 'upper', the largest tick will be removed. If prune == 'both', the largest and smallest ticks will be removed. If prune is None, no ticks will be removed.\r\n\r\nHowever, no tick is removed when I set `prune` to \"lower\", \"upper\" or \"both\".\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib import ticker as mtick\r\nfig, ax = plt.subplots()\r\nax.plot(range(4), range(4))\r\nax.xaxis.set_major_locator(mtick.MaxNLocator(4, prune=\"both\"))\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https://github.com/matplotlib/matplotlib/assets/12114853/89f8792f-c97c-4583-abb5-7f062c2e2e56)\r\n\r\n### Expected outcome\r\n\r\n![MaxNLocator_prune_expected](https://github.com/matplotlib/matplotlib/assets/12114853/724f91e6-5619-427a-91f9-218da816f822)\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nUbuntu\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nmodule://matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\n3.12.0\r\n\r\n### Jupyter version\r\n\r\n4.0.7\r\n\r\n### Installation\r\n\r\nconda\n", "hints_text": "From the description, I think it means those ticks that appear right at one or other end of the axis, and therefore would overlap if you have two axes right next to each other.  For example, it works fine in this case:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.ticker as mtick\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(range(4))\r\nax.set_xlim([0, 3])\r\n\r\nax.xaxis.set_major_locator(mtick.MaxNLocator(3))\r\nax.set_title(\"No Prune\")\r\nplt.savefig(\"noprune.png\")\r\n\r\nax.xaxis.set_major_locator(mtick.MaxNLocator(3, prune=\"both\"))\r\nax.set_title(\"Prune\")\r\nplt.savefig(\"prune.png\")\r\n```\r\n![noprune](https://github.com/matplotlib/matplotlib/assets/10599679/4b8fa179-2702-40fc-8221-a21c99fea0fc)\r\n\r\n![prune](https://github.com/matplotlib/matplotlib/assets/10599679/ba3b0f65-2c71-4007-a81c-ff02af7c6dc0)\r\n", "created_at": "2023-11-06T19:35:05Z"}
{"repo": "matplotlib/matplotlib", "pull_number": 27267, "instance_id": "matplotlib__matplotlib-27267", "issue_numbers": ["25691", "0000"], "base_commit": "4524fdbdcabb5e986ad4fd6709ee5e607f3826df", "patch": "diff --git a/lib/matplotlib/axes/_secondary_axes.py b/lib/matplotlib/axes/_secondary_axes.py\nindex 4c757f61c7b6..7ee3c8b13c07 100644\n--- a/lib/matplotlib/axes/_secondary_axes.py\n+++ b/lib/matplotlib/axes/_secondary_axes.py\n@@ -6,6 +6,7 @@\n import matplotlib.ticker as mticker\n from matplotlib.axes._base import _AxesBase, _TransformedBoundsLocator\n from matplotlib.axis import Axis\n+from matplotlib.transforms import Transform\n \n \n class SecondaryAxis(_AxesBase):\n@@ -144,11 +145,17 @@ def set_functions(self, functions):\n             If a transform is supplied, then the transform must have an\n             inverse.\n         \"\"\"\n+\n         if (isinstance(functions, tuple) and len(functions) == 2 and\n                 callable(functions[0]) and callable(functions[1])):\n             # make an arbitrary convert from a two-tuple of functions\n             # forward and inverse.\n             self._functions = functions\n+        elif isinstance(functions, Transform):\n+            self._functions = (\n+                 functions.transform,\n+                 lambda x: functions.inverted().transform(x)\n+            )\n         elif functions is None:\n             self._functions = (lambda x: x, lambda x: x)\n         else:\n", "test_patch": "diff --git a/lib/matplotlib/tests/baseline_images/test_axes/secondary_xy.png b/lib/matplotlib/tests/baseline_images/test_axes/secondary_xy.png\nindex bbf9f9e13211..b69241a06bc6 100644\nBinary files a/lib/matplotlib/tests/baseline_images/test_axes/secondary_xy.png and b/lib/matplotlib/tests/baseline_images/test_axes/secondary_xy.png differ\ndiff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 799bf5ddd774..3ae1a9376ceb 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7494,6 +7494,20 @@ def test_annotate_across_transforms():\n                 arrowprops=dict(arrowstyle=\"->\"))\n \n \n+class _Translation(mtransforms.Transform):\n+    input_dims = 1\n+    output_dims = 1\n+\n+    def __init__(self, dx):\n+        self.dx = dx\n+\n+    def transform(self, values):\n+        return values + self.dx\n+\n+    def inverted(self):\n+        return _Translation(-self.dx)\n+\n+\n @image_comparison(['secondary_xy.png'], style='mpl20')\n def test_secondary_xy():\n     fig, axs = plt.subplots(1, 2, figsize=(10, 5), constrained_layout=True)\n@@ -7513,6 +7527,7 @@ def invert(x):\n         secax(0.4, functions=(lambda x: 2 * x, lambda x: x / 2))\n         secax(0.6, functions=(lambda x: x**2, lambda x: x**(1/2)))\n         secax(0.8)\n+        secax(\"top\" if nn == 0 else \"right\", functions=_Translation(2))\n \n \n def test_secondary_fail():\n", "problem_statement": "[Bug]: Secondary axis does not support Transform as functions\n### Bug summary\n\nThe [documentation for `secondary_[xy]axis`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.secondary_xaxis.html#matplotlib.axes.Axes.secondary_xaxis) claims to accept a `Transform` for the `functions` parameter.\r\n\r\nHowever, the checks in `set_functions` do not accept `Transform`:\r\nhttps://github.com/matplotlib/matplotlib/blob/3f4d4c10d40c1c60e9572b5e4702a463e2a06747/lib/matplotlib/axes/_secondary_axes.py#L147-L158\r\n\r\nand any usage of the internal attribute seems to assume a tuple of callables:\r\nhttps://github.com/matplotlib/matplotlib/blob/3f4d4c10d40c1c60e9572b5e4702a463e2a06747/lib/matplotlib/axes/_secondary_axes.py#L193-L194\r\nhttps://github.com/matplotlib/matplotlib/blob/3f4d4c10d40c1c60e9572b5e4702a463e2a06747/lib/matplotlib/axes/_secondary_axes.py#L216\r\n\r\nBoth this documentation and the checks have been in the code since it was added in #11859.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.transforms import IdentityTransform\r\n\r\nfig, ax = plt.subplots()\r\nsecax = ax.secondary_xaxis('top', functions=IdentityTransform)\r\n# OR:\r\nsecax = ax.secondary_xaxis('top', functions=IdentityTransform())\r\n# OR:\r\nsecax = ax.secondary_xaxis('top', functions=(IdentityTransform, IdentityTransform))\r\n# OR:\r\nsecax = ax.secondary_xaxis('top', functions=(IdentityTransform(), IdentityTransform()))\n```\n\n\n### Actual outcome\n\nWith a single transform (class or object), _or_ a tuple of transform objects, it fails in the setter:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"galleries/examples/subplots_axes_and_figures/secondary_axis.py\", line 40, in <module>\r\n    secax = ax.secondary_xaxis('top', functions=IdentityTransform)\r\n  File \"lib/matplotlib/axes/_axes.py\", line 586, in secondary_xaxis\r\n    secondary_ax = SecondaryAxis(self, 'x', location, functions,\r\n  File \"lib/matplotlib/axes/_secondary_axes.py\", line 42, in __init__\r\n    self.set_functions(functions)\r\n  File \"lib/matplotlib/axes/_secondary_axes.py\", line 155, in set_functions\r\n    raise ValueError('functions argument of secondary axes '\r\nValueError: functions argument of secondary axes must be a two-tuple of callable functions with the first function being the transform and the second being the inverse\r\n```\r\nWith a tuple of transform classes, the setter allows it, but it fails when drawing:\r\n```\r\nTraceback (most recent call last):\r\n  File \"lib/matplotlib/backends/backend_qt.py\", line 461, in _draw_idle\r\n    self.draw()\r\n  File \"lib/matplotlib/backends/backend_agg.py\", line 401, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"lib/matplotlib/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"lib/matplotlib/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"lib/matplotlib/figure.py\", line 3115, in draw\r\n    artists = self._get_draw_artists(renderer)\r\n  File \"lib/matplotlib/figure.py\", line 225, in _get_draw_artists\r\n    child.apply_aspect(\r\n  File \"lib/matplotlib/axes/_secondary_axes.py\", line 120, in apply_aspect\r\n    self._set_lims()\r\n  File \"lib/matplotlib/axes/_secondary_axes.py\", line 216, in _set_lims\r\n    lims = self._functions[0](np.array(lims))\r\n  File \"lib/matplotlib/transforms.py\", line 1759, in __init__\r\n    super().__init__(*args, **kwargs)\r\n  File \"lib/matplotlib/transforms.py\", line 125, in __init__\r\n    self._shorthand_name = shorthand_name or ''\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\n\n### Expected outcome\n\nAt least one of the options works, or it should not be documented as accepted.\n\n### Additional information\n\nI noticed this oddity in the types while reviewing #25224, but not sure what we intend here.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3f4d4c10d40c1c60e9572b5e4702a463e2a06747\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout\n", "hints_text": "That seems like an oversight, or something that got lost in the shuffle of adding a forward and inverse.  \r\n\r\nI don't think we should allow a tuple of transforms - one of the advantages of using a transform is that it has an inverse?  \n> I don't think we should allow a tuple of transforms - one of the advantages of using a transform is that it has an inverse?\r\n\r\nI don't think it's necessary; it's just something I tried to get past the checks and see if the internals were fine with it.", "created_at": "2023-11-05T00:05:19Z"}
