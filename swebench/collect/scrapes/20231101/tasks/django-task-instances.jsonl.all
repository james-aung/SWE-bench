{"repo": "django/django", "pull_number": 18465, "instance_id": "django__django-18465", "issue_numbers": ["35623"], "base_commit": "e03083917db03757e48f8edac4c8491b72c8a3c4", "patch": "diff --git a/docs/topics/db/models.txt b/docs/topics/db/models.txt\nindex aefb35ed9c9c..369747c2637b 100644\n--- a/docs/topics/db/models.txt\n+++ b/docs/topics/db/models.txt\n@@ -720,6 +720,9 @@ Django places some restrictions on model field names:\n \n #. A field name cannot end with an underscore, for similar reasons.\n \n+#. A field name cannot be ``check``, as this would override the check\n+   framework's ``Model.check()`` method.\n+\n These limitations can be worked around, though, because your field name doesn't\n necessarily have to match your database column name. See the\n :attr:`~Field.db_column` option.\n", "test_patch": "", "problem_statement": "Document that fields cannot be named 'check'\nDescription\n\t \nI've been tasked with migrating a large codebase from Django 3.2 to 4.2.\nUpon updating to 4.0, I noticed that the \u200bmodels.E020 system check was being triggered.\nThis project has had multiple models with \"check\" fields for many years. This error was not being triggered before 4.0 because class methods were protected from being overwritten by fields. This behavior \u200bwas changed here\n\u200bThis commit's message is very explicit about \"check\" being a reserved word that cannot be redefined as anything else other than a method. However, the \u200bdocumentation on field name restrictions is silent about that, only stating that:\nA field name cannot be a Python reserved word, because that would result in a Python syntax error.\nA field name cannot contain more than one underscore in a row, due to the way Django\u2019s query lookup syntax works.\nA field name cannot end with an underscore.\nFor now I've silenced the models.E020 error, but this is far from ideal, what would be the best way to still run all model system checks without having to change our models to use a different field name?\n", "hints_text": [["For context, this check was introduced in \u200bDjango 1.7.1. I agree that fields are not allowed to be called check should be added to the \u200bdocumentation on field names \ud83d\udc4d I am going to slightly repurpose and accept this ticket for this. Replying to Francisco Camerini: For now I've silenced the models.E020 error, but this is far from ideal, what would be the best way to still run all model system checks without having to change our models to use a different field name? I am not sure there is another option. I think that this check wasn't being raised before might have been down to the model hierarchy structure (hard to tell without seeing the models - refs #30427, #16176). You may have to update the field names and set db_column=\"check\". You might get more support if you were to ask this on one of our \u200bsupport channels", 1721641445.0]], "created_at": "2024-08-10T13:59:43Z"}
{"repo": "django/django", "pull_number": 18462, "instance_id": "django__django-18462", "issue_numbers": ["35665"], "base_commit": "ca47884410acb7cb1d36bc8a573b67a5b197d3e2", "patch": "diff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\nindex a83560b89296..72c6180f50c8 100644\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -116,6 +116,7 @@ def django_test_skips(self):\n             \"Oracle requires ORDER BY in row_number, ANSI:SQL doesn't.\": {\n                 \"expressions_window.tests.WindowFunctionTests.\"\n                 \"test_row_number_no_ordering\",\n+                \"prefetch_related.tests.PrefetchLimitTests.test_empty_order\",\n             },\n             \"Oracle doesn't support changing collations on indexed columns (#33671).\": {\n                 \"migrations.test_operations.OperationTests.\"\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex eee0eafc837a..154e684ff047 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1425,16 +1425,14 @@ class ExpressionList(Func):\n \n     template = \"%(expressions)s\"\n \n-    def __init__(self, *expressions, **extra):\n-        if not expressions:\n-            raise ValueError(\n-                \"%s requires at least one expression.\" % self.__class__.__name__\n-            )\n-        super().__init__(*expressions, **extra)\n-\n     def __str__(self):\n         return self.arg_joiner.join(str(arg) for arg in self.source_expressions)\n \n+    def as_sql(self, *args, **kwargs):\n+        if not self.source_expressions:\n+            return \"\", ()\n+        return super().as_sql(*args, **kwargs)\n+\n     def as_sqlite(self, compiler, connection, **extra_context):\n         # Casting to numeric is unnecessary.\n         return self.as_sql(compiler, connection, **extra_context)\ndiff --git a/docs/releases/5.1.1.txt b/docs/releases/5.1.1.txt\nindex f307b2a0ee81..25c0b4c297c4 100644\n--- a/docs/releases/5.1.1.txt\n+++ b/docs/releases/5.1.1.txt\n@@ -9,4 +9,6 @@ Django 5.1.1 fixes several bugs in 5.1.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 5.1 that caused a crash of ``Window()`` when\n+  passing an empty sequence to the ``order_by`` parameter, and a crash of\n+  ``Prefetch()`` for a sliced queryset without ordering (:ticket:`35665`).\n", "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex e9e41cff1ebf..75aa1b0894e5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2315,11 +2315,6 @@ def test_equal_output_field(self):\n         self.assertNotEqual(value, other_value)\n         self.assertNotEqual(value, no_output_field)\n \n-    def test_raise_empty_expressionlist(self):\n-        msg = \"ExpressionList requires at least one expression\"\n-        with self.assertRaisesMessage(ValueError, msg):\n-            ExpressionList()\n-\n     def test_compile_unresolved(self):\n         # This test might need to be revisited later on if #25425 is enforced.\n         compiler = Time.objects.all().query.get_compiler(connection=connection)\ndiff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fd674e319bc4..fd9858ccf9bd 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -928,6 +928,20 @@ def test_multiple_ordering(self):\n             ),\n         )\n \n+    def test_empty_ordering(self):\n+        \"\"\"\n+        Explicit empty ordering makes little sense but it is something that\n+        was historically allowed.\n+        \"\"\"\n+        qs = Employee.objects.annotate(\n+            sum=Window(\n+                expression=Sum(\"salary\"),\n+                partition_by=\"department\",\n+                order_by=[],\n+            )\n+        ).order_by(\"department\", \"sum\")\n+        self.assertEqual(len(qs), 12)\n+\n     def test_related_ordering_with_count(self):\n         qs = Employee.objects.annotate(\n             department_sum=Window(\ndiff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex a418beb5a52f..9b1dfdd0d1a6 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1999,6 +1999,21 @@ def test_window_not_supported(self):\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             list(Book.objects.prefetch_related(Prefetch(\"authors\", authors[1:])))\n \n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_empty_order(self):\n+        authors = Author.objects.order_by()\n+        with self.assertNumQueries(3):\n+            books = list(\n+                Book.objects.prefetch_related(\n+                    Prefetch(\"authors\", authors),\n+                    Prefetch(\"authors\", authors[:1], to_attr=\"authors_sliced\"),\n+                )\n+            )\n+        for book in books:\n+            with self.subTest(book=book):\n+                self.assertEqual(len(book.authors_sliced), 1)\n+                self.assertIn(book.authors_sliced[0], list(book.authors.all()))\n+\n \n class DeprecationTests(TestCase):\n     def test_get_current_queryset_warning(self):\n", "problem_statement": "Prefetch() fails with \"OrderByList\" when queryset has no order_by and is sliced\nDescription\n\t \nIn v5.1 the Prefetch operator causes an issue when no order_by() is specified, and the query contains a slice. \nMust have no order by (either explict order_by() or model Meta contains no order by)\nMust be sliced - any form works, :10, 10:, 10:20\nDoes not crash in v5.0.7. I did not see this mentioned in the Prefetch documentation, or the changelog. \nshort_list = Prefetch(\n\t\"products\",\n\tqueryset=Product.objects.order_by()[:10],\n\tto_attr=\"short_list\",\n)\nquery = Store.objects.prefetch_related(short_list)\nprint(query) # errors\nThe stack trace:\n File \"python3.12/site-packages/django/db/models/expressions.py\", line 1896, in __init__\n\tself.order_by = OrderByList(*self.order_by)\n\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"python3.12/site-packages/django/db/models/expressions.py\", line 1414, in __init__\n\tsuper().__init__(*expressions, **extra)\n File \"python3.12/site-packages/django/db/models/expressions.py\", line 1382, in __init__\n\traise ValueError(\nValueError: OrderByList requires at least one expression.\nI was able to replicate this in a clean project, against sqlite, with the following 2 simple models, used in the example above:\nclass Store(models.Model):\n\tname = models.CharField(max_length=100)\nclass Product(models.Model):\n\tstore = models.ForeignKey(Store, on_delete=models.CASCADE, related_name='products')\n\tname = models.CharField(max_length=100)\n\tclass Meta:\n\t\tordering = ['name']\n", "hints_text": [["I managed to reproduce and the issue the issue is relatively simple to address. It should obviously not crash but just so you know using slicing without ordering generally makes little sense as the backend is allowed to return rows in any order.", 1723187513.0]], "created_at": "2024-08-09T12:58:50Z"}
{"repo": "django/django", "pull_number": 18453, "instance_id": "django__django-18453", "issue_numbers": ["35658"], "base_commit": "69aa13ffb92f6a7c62661c616a8c7b0f515ea43d", "patch": "diff --git a/django/core/files/storage/memory.py b/django/core/files/storage/memory.py\nindex 39a8aef3aea8..22b8c62bd1a2 100644\n--- a/django/core/files/storage/memory.py\n+++ b/django/core/files/storage/memory.py\n@@ -45,10 +45,9 @@ class InMemoryFileNode(ContentFile, TimingMixin):\n     modification, and access times.\n     \"\"\"\n \n-    def __init__(self, content=\"\", name=\"\"):\n-        self.file = None\n+    def __init__(self, content=\"\", name=None):\n+        super().__init__(content, name)\n         self._content_type = type(content)\n-        self._initialize_stream()\n         self._initialize_times()\n \n     def open(self, mode):\n@@ -142,7 +141,11 @@ def _resolve_child(self, path_segment, create_if_missing, child_cls):\n         if create_if_missing:\n             self._update_accessed_time()\n             self._update_modified_time()\n-            return self._children.setdefault(path_segment, child_cls())\n+            if child_cls is InMemoryFileNode:\n+                child = child_cls(name=path_segment)\n+            else:\n+                child = child_cls()\n+            return self._children.setdefault(path_segment, child)\n         return self._children.get(path_segment)\n \n     def listdir(self):\n", "test_patch": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex c7ca8735210a..b486578cdbce 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1024,6 +1024,23 @@ def test_stringio(self):\n         with temp_storage.open(\"tests/stringio\") as f:\n             self.assertEqual(f.read(), b\"content\")\n \n+    @override_settings(\n+        STORAGES={\n+            DEFAULT_STORAGE_ALIAS: {\n+                \"BACKEND\": \"django.core.files.storage.InMemoryStorage\"\n+            }\n+        }\n+    )\n+    def test_create_file_field_from_another_file_field_in_memory_storage(self):\n+        f = ContentFile(\"content\", \"file.txt\")\n+        obj = Storage.objects.create(storage_callable_default=f)\n+        new_obj = Storage.objects.create(\n+            storage_callable_default=obj.storage_callable_default.file\n+        )\n+        storage = callable_default_storage()\n+        with storage.open(new_obj.storage_callable_default.name) as f:\n+            self.assertEqual(f.read(), b\"content\")\n+\n \n class FieldCallableFileStorageTests(SimpleTestCase):\n     def setUp(self):\n", "problem_statement": "InMemoryFileNode object has no attribute \"name\"\nDescription\n\t\t\n(last modified by David)\t\t\nUsing the InMemoryStorage into an other model by using:\n# models.py\nclass MyModel(models.Model):\n\tattachment = models.FileField(...)\n# script.py\nobj = MyModel.objects.create(attachment=ContentFile(b'content', 'myfile.txt') \nrepr(obj.attachment)\nAn excetption is raised: AttributeError(\"'InMemoryFileNode' object has no attribute 'name'\") raised in repr()\nThis may be caused by the fact that InMemoryFileNode inheriths from ContentFile but does not use the name attribute nor uses the base class __init__ method:\n\u200bhttps://github.com/django/django/blob/509763c79952cde02d9f5b584af4278bdbed77b2/django/core/files/storage/memory.py#L48-L52\nThis resulting in a partially initialized object without an important property.\n", "hints_text": [["I agree about the need of the issue. I also found other places where the 'name' attribute may be accessed, which would result in a similar error as described above. I just made a PR: \u200bhttps://github.com/django/django/pull/18453", 1722977962.0]], "created_at": "2024-08-07T01:52:57Z"}
{"repo": "django/django", "pull_number": 18449, "instance_id": "django__django-18449", "issue_numbers": ["35657"], "base_commit": "e9e14709ffaefaf90c1b49e3d5a1c79b481df52a", "patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7c911f4b2352..0716d3599e94 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -9,6 +9,7 @@\n from django.core.files.storage import Storage, default_storage\n from django.core.files.utils import validate_file_name\n from django.db.models import signals\n+from django.db.models.expressions import DatabaseDefault\n from django.db.models.fields import Field\n from django.db.models.query_utils import DeferredAttribute\n from django.db.models.utils import AltersData\n@@ -197,6 +198,12 @@ def __get__(self, instance, cls=None):\n             attr = self.field.attr_class(instance, self.field, file)\n             instance.__dict__[self.field.attname] = attr\n \n+        # If this value is a DatabaseDefault, initialize the attribute class\n+        # for this field with its db_default value.\n+        elif isinstance(file, DatabaseDefault):\n+            attr = self.field.attr_class(instance, self.field, self.field.db_default)\n+            instance.__dict__[self.field.attname] = attr\n+\n         # Other types of files may be assigned as well, but they need to have\n         # the FieldFile interface added to them. Thus, we wrap any other type of\n         # File inside a FieldFile (well, the field's attr_class, which is\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex 5cc3faec98a2..704ecf2c610d 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -32,3 +32,6 @@ Bugfixes\n * Fixed a bug in Django 5.0 which caused constraint validation to either crash\n   or incorrectly raise validation errors for constraints referring to fields\n   using ``Field.db_default`` (:ticket:`35638`).\n+\n+* Fixed a crash in Django 5.0 when saving a model containing a ``FileField``\n+  with a ``db_default`` set (:ticket:`35657`).\n", "test_patch": "diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 873c3e176abb..cb0207cae909 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -72,6 +72,9 @@ def pathlib_upload_to(self, filename):\n     default = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", default=\"tests/default.txt\"\n     )\n+    db_default = models.FileField(\n+        storage=temp_storage, upload_to=\"tests\", db_default=\"tests/db_default.txt\"\n+    )\n     empty = models.FileField(storage=temp_storage)\n     limited_length = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", max_length=20\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 868b18dd2c06..c7ca8735210a 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -944,6 +944,20 @@ def test_filefield_default(self):\n         self.assertEqual(obj.default.read(), b\"default content\")\n         obj.default.close()\n \n+    def test_filefield_db_default(self):\n+        temp_storage.save(\"tests/db_default.txt\", ContentFile(\"default content\"))\n+        obj = Storage.objects.create()\n+        self.assertEqual(obj.db_default.name, \"tests/db_default.txt\")\n+        self.assertEqual(obj.db_default.read(), b\"default content\")\n+        obj.db_default.close()\n+\n+        # File is not deleted, even if there are no more objects using it.\n+        obj.delete()\n+        s = Storage()\n+        self.assertEqual(s.db_default.name, \"tests/db_default.txt\")\n+        self.assertEqual(s.db_default.read(), b\"default content\")\n+        s.db_default.close()\n+\n     def test_empty_upload_to(self):\n         # upload_to can be empty, meaning it does not use subdirectory.\n         obj = Storage()\n", "problem_statement": "Specifying db_default on FileField causes crash on instance save\nDescription\n\t \nI guess there's the existential question: \"Does db_default make sense with FileField/ImageField?\" Perhaps, as long as there's a file at the path defined by the db_default expression? \ud83e\udd14\nIn any case when defined with a FileField, the presence of DatabaseDefault as the field's value causes a crash:\nGiven the model:\nclass Foo(models.Model):\n\tbar = models.FileField(db_default=\"path/to/file.txt\")\nWe get AttributeError exceptions when attempting to create an instance:\n>>> Foo.objects.create()\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"/path/to/django/django/db/models/manager.py\", line 87, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/query.py\", line 660, in create\n\tobj.save(force_insert=True, using=self.db)\n File \"/path/to/django/django/db/models/base.py\", line 891, in save\n\tself.save_base(\n File \"/path/to/django/django/db/models/base.py\", line 997, in save_base\n\tupdated = self._save_table(\n\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/base.py\", line 1160, in _save_table\n\tresults = self._do_insert(\n\t\t\t ^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/base.py\", line 1201, in _do_insert\n\treturn manager._insert(\n\t\t ^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/manager.py\", line 87, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/query.py\", line 1828, in _insert\n\treturn query.get_compiler(using=using).execute_sql(returning_fields)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/sql/compiler.py\", line 1847, in execute_sql\n\tfor sql, params in self.as_sql():\n\t\t\t\t\t ^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/sql/compiler.py\", line 1770, in as_sql\n\tvalue_rows = [\n\t\t\t\t ^\n File \"/path/to/django/django/db/models/sql/compiler.py\", line 1771, in <listcomp>\n\t[\n File \"/path/to/django/django/db/models/sql/compiler.py\", line 1772, in <listcomp>\n\tself.prepare_value(field, self.pre_save_val(field, obj))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/sql/compiler.py\", line 1720, in pre_save_val\n\treturn field.pre_save(obj, add=True)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/django/django/db/models/fields/files.py\", line 320, in pre_save\n\tif file.name is None and file._file is not None:\n\t ^^^^^^^^^\nAttributeError: 'DatabaseDefault' object has no attribute 'name'\n", "hints_text": [["I feel like the behavior should mimic default here - accepting", 1722834159.0], ["Hi, I tested this issue and it indeed exists. It can be resolved by initiating self.name to None in init, and that's it I would send a PR to address this alongside a test, if you are ok.", 1722840437.0], ["Replying to Mohammad Salehi: Hi, I tested this issue and it indeed exists. It can be resolved by initiating self.name to None in init, and that's it I would send a PR to address this alongside a test, if you are ok. That doesn't sound right I've opened a PR", 1722841714.0]], "created_at": "2024-08-05T12:07:30Z"}
{"repo": "django/django", "pull_number": 18442, "instance_id": "django__django-18442", "issue_numbers": ["35553"], "base_commit": "fdc638bf4a35b5497d0b3b4faedaf552da792f99", "patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 191fe3cbb513..04a5edbd3086 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -53,7 +53,8 @@ class HashedFilesMixin:\n         (\n             (\n                 (\n-                    r\"\"\"(?P<matched>import(?s:(?P<import>[\\s\\{].*?))\"\"\"\n+                    r\"\"\"(?P<matched>import\"\"\"\n+                    r\"\"\"(?s:(?P<import>[\\s\\{].*?|\\*\\s*as\\s*\\w+))\"\"\"\n                     r\"\"\"\\s*from\\s*['\"](?P<url>[./].*?)[\"']\\s*;)\"\"\"\n                 ),\n                 \"\"\"import%(import)s from \"%(url)s\";\"\"\",\n", "test_patch": "diff --git a/tests/staticfiles_tests/project/documents/cached/module.js b/tests/staticfiles_tests/project/documents/cached/module.js\nindex 7764e740d697..c56530aea6d2 100644\n--- a/tests/staticfiles_tests/project/documents/cached/module.js\n+++ b/tests/staticfiles_tests/project/documents/cached/module.js\n@@ -2,6 +2,10 @@\n import rootConst from \"/static/absolute_root.js\";\n import testConst from \"./module_test.js\";\n import * as NewModule from \"./module_test.js\";\n+import*as m from \"./module_test.js\";\n+import *as m from \"./module_test.js\";\n+import* as m from \"./module_test.js\";\n+import*  as  m from \"./module_test.js\";\n import { testConst as alias } from \"./module_test.js\";\n import { firstConst, secondConst } from \"./module_test.js\";\n import {\ndiff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 030b7dc6db0e..d6ea03b7446a 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -674,7 +674,7 @@ class TestCollectionJSModuleImportAggregationManifestStorage(CollectionTestCase)\n \n     def test_module_import(self):\n         relpath = self.hashed_file_path(\"cached/module.js\")\n-        self.assertEqual(relpath, \"cached/module.55fd6938fbc5.js\")\n+        self.assertEqual(relpath, \"cached/module.4326210cf0bd.js\")\n         tests = [\n             # Relative imports.\n             b'import testConst from \"./module_test.477bbebe77f0.js\";',\n@@ -686,6 +686,11 @@ def test_module_import(self):\n             b'const dynamicModule = import(\"./module_test.477bbebe77f0.js\");',\n             # Creating a module object.\n             b'import * as NewModule from \"./module_test.477bbebe77f0.js\";',\n+            # Creating a minified module object.\n+            b'import*as m from \"./module_test.477bbebe77f0.js\";',\n+            b'import* as m from \"./module_test.477bbebe77f0.js\";',\n+            b'import *as m from \"./module_test.477bbebe77f0.js\";',\n+            b'import*  as  m from \"./module_test.477bbebe77f0.js\";',\n             # Aliases.\n             b'import { testConst as alias } from \"./module_test.477bbebe77f0.js\";',\n             b\"import {\\n\"\n@@ -701,7 +706,7 @@ def test_module_import(self):\n \n     def test_aggregating_modules(self):\n         relpath = self.hashed_file_path(\"cached/module.js\")\n-        self.assertEqual(relpath, \"cached/module.55fd6938fbc5.js\")\n+        self.assertEqual(relpath, \"cached/module.4326210cf0bd.js\")\n         tests = [\n             b'export * from \"./module_test.477bbebe77f0.js\";',\n             b'export { testConst } from \"./module_test.477bbebe77f0.js\";',\n", "problem_statement": "HashedFilesMixin for ES modules does not work with `import*as ...` syntax\nDescription\n\t \nDjango's regex does not work with the following:\nimport*as l from \"/static/jsapp/jsapp/dtmod.min.js\";import*as h from \"/static/jsapp/jsapp/nummod.min.js\";import*as m from \"/static/leave/jsapp/fetcher.min.js\";import {BaseComponent as g} from \"/static/wcapp/jsapp/wc-base.min.425310100bce.js\";\nAs you can see only the 4th import was correctly altered, the first 3 werent even detected, (below is the same as above but placed the imports on seprate lines for readability):\nimport*as l from \"/static/jsapp/jsapp/dtmod.min.js\";\nimport*as h from \"/static/jsapp/jsapp/nummod.min.js\";\nimport*as m from \"/static/leave/jsapp/fetcher.min.js\";\nimport {BaseComponent as g} from \"/static/wcapp/jsapp/wc-base.min.425310100bce.js\";\nThis regex handles the missing case:\n\t\t\t(\n\t\t\t\tr\"\"\"(?P<matched>(?P<import_as>import\\s*\\*as\\s\\S+)\\s+from\\s*[\"'](?P<url>[./].*?)[\"']\\s*;)\"\"\",\n\t\t\t\t\"\"\"%(import_as)s from \"%(url)s\";\"\"\",\n\t\t\t),\n", "hints_text": [["Replying to Michael: import*as l from \"/static/jsapp/jsapp/dtmod.min.js\"; import*as h from \"/static/jsapp/jsapp/nummod.min.js\"; import*as m from \"/static/leave/jsapp/fetcher.min.js\"; import {BaseComponent as g} from \"/static/wcapp/jsapp/wc-base.min.425310100bce.js\"; This doesn't look valid to me, shouldn't it be import * as not import*as?", 1719196957.0], ["Hi, no it is not invalid, that is the result of minification, removing any extra whitespace, most production system will serve minified files, so it's much more likely to not have the space.", 1719203706.0], ["Replying to Michael: Hi, no it is not invalid, that is the result of minification, removing any extra whitespace, most production system will serve minified files, so it's much more likely to not have the space. Ah, TIL \ud83d\ude01 confirmed that this is the output of many minifiers Confirmed that your suggested patch works for me, here is also a test: tests/staticfiles_tests/project/documents/cached/module.js diff --git a/tests/staticfiles_tests/project/documents/cached/module.js b/tests/staticfiles_tests/project/documents/cached/module.js index 7764e740d6..30ca25e9b6 100644 a b 22import rootConst from \"/static/absolute_root.js\"; 33import testConst from \"./module_test.js\"; 44import * as NewModule from \"./module_test.js\"; 5import*as m from\"./module_test.js\"; 56import { testConst as alias } from \"./module_test.js\"; 67import { firstConst, secondConst } from \"./module_test.js\"; 78import { tests/staticfiles_tests/test_storage.py diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py index 469d5ec690..956341a858 100644 a b class TestCollectionJSModuleImportAggregationManifestStorage(CollectionTestCase) 674674 675675 def test_module_import(self): 676676 relpath = self.hashed_file_path(\"cached/module.js\") 677 self.assertEqual(relpath, \"cached/module.55fd6938fbc5.js\") 677 self.assertEqual(relpath, \"cached/module.d16a17156de1.js\") 678678 tests = [ 679679 # Relative imports. 680680 b'import testConst from \"./module_test.477bbebe77f0.js\";', \u2026 \u2026 class TestCollectionJSModuleImportAggregationManifestStorage(CollectionTestCase) 686686 b'const dynamicModule = import(\"./module_test.477bbebe77f0.js\");', 687687 # Creating a module object. 688688 b'import * as NewModule from \"./module_test.477bbebe77f0.js\";', 689 # Creating a minified module object. 690 b'import*as m from \"./module_test.477bbebe77f0.js\";', 689691 # Aliases. 690692 b'import { testConst as alias } from \"./module_test.477bbebe77f0.js\";', 691693 b\"import {\\n\" Would you like to raise a PR?", 1719207598.0], ["Okay great, thanks for handling it. I dont know what \"TIL\" means, but cheers!", 1719217441.0], ["Replying to Michael: Okay great, thanks for handling it. I dont know what \"TIL\" means, but cheers! Sorry it's short for \"Today I learned\"", 1719221426.0], ["output of this produces import *as m from \"./module_test.477bbebe77f0.477bbebe77f0.js\"; for me. I don't know why. Should not it be import *as m from \"./module_test.477bbebe77f0.js\";", 1719501114.0], ["django/contrib/staticfiles/storage.py diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py index 85172ea42d..394975c9de 100644 a b class HashedFilesMixin: 7373 r\"\"\"(?P<matched>import\\([\"'](?P<url>.*?)[\"']\\))\"\"\", 7474 \"\"\"import(\"%(url)s\")\"\"\", 7575 ), 76 ( 77 r\"\"\"(?P<matched>(?P<import_as>import\\s*\\*as\\s\\S+)\\s+from\\s*[\"'](?P<url>[./].*?)[\"']\\s*;)\"\"\", 78 \"\"\"%(import_as)s from \"%(url)s\";\"\"\", 79 ), 7680 ), 7781 ) 7882 patterns = ( \u2026 \u2026 class HashedFilesMixin: 287291 288292 # where to store the new paths 289293 hashed_files = {} 290 291294 # build a list of adjustable files 292295 adjustable_paths = [ 293296 path for path in paths if matches_patterns(path, self._patterns) 294297 ] 295 296298 # Adjustable files to yield at end, keyed by the original path. 297299 processed_adjustable_paths = {} 298300 tests/staticfiles_tests/project/documents/cached/module.js diff --git a/tests/staticfiles_tests/project/documents/cached/module.js b/tests/staticfiles_tests/project/documents/cached/module.js index 7764e740d6..602561798f 100644 a b 22import rootConst from \"/static/absolute_root.js\"; 33import testConst from \"./module_test.js\"; 44import * as NewModule from \"./module_test.js\"; 5import *as m from \"./module_test.js\"; 56import { testConst as alias } from \"./module_test.js\"; 67import { firstConst, secondConst } from \"./module_test.js\"; 78import { tests/staticfiles_tests/test_storage.py diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py index dc8607a307..6290d9d51a 100644 a b class TestCollectionJSModuleImportAggregationManifestStorage(CollectionTestCase) 643643 644644 def test_module_import(self): 645645 relpath = self.hashed_file_path(\"cached/module.js\") 646 self.assertEqual(relpath, \"cached/module.55fd6938fbc5.js\") 646 self.assertEqual(relpath, \"cached/module.0415cd43ac63.js\") 647647 tests = [ 648648 # Relative imports. 649649 b'import testConst from \"./module_test.477bbebe77f0.js\";', \u2026 \u2026 class TestCollectionJSModuleImportAggregationManifestStorage(CollectionTestCase) 655655 b'const dynamicModule = import(\"./module_test.477bbebe77f0.js\");', 656656 # Creating a module object. 657657 b'import * as NewModule from \"./module_test.477bbebe77f0.js\";', 658 # Creating a minified module object. 659 b'import*as m from \"./module_test.477bbebe77f0.js\";', 658660 # Aliases. 659661 b'import { testConst as alias } from \"./module_test.477bbebe77f0.js\";', 660662 b\"import {\\n\"", 1719502715.0]], "created_at": "2024-08-02T20:28:46Z"}
{"repo": "django/django", "pull_number": 18440, "instance_id": "django__django-18440", "issue_numbers": ["35295"], "base_commit": "b478cae00643d6730746f2614792b35a7d3187ff", "patch": "diff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\nindex aa657b3ba459..a83560b89296 100644\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -204,10 +204,6 @@ def supports_comparing_boolean_expr(self):\n     def supports_aggregation_over_interval_types(self):\n         return self.connection.oracle_version >= (23,)\n \n-    @cached_property\n-    def supports_bulk_insert_with_multiple_rows(self):\n-        return self.connection.oracle_version >= (23,)\n-\n     @cached_property\n     def bare_select_suffix(self):\n         return \"\" if self.connection.oracle_version >= (23,) else \" FROM DUAL\"\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex 507c5fb369cb..86340bbf4ac1 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -678,24 +678,6 @@ def bulk_insert_sql(self, fields, placeholder_rows):\n             for field in fields\n             if field\n         ]\n-        if (\n-            self.connection.features.supports_bulk_insert_with_multiple_rows\n-            # A workaround with UNION of SELECTs is required for models without\n-            # any fields.\n-            and field_placeholders\n-        ):\n-            placeholder_rows_sql = []\n-            for row in placeholder_rows:\n-                placeholders_row = (\n-                    field_placeholder % placeholder\n-                    for field_placeholder, placeholder in zip(\n-                        field_placeholders, row, strict=True\n-                    )\n-                )\n-                placeholder_rows_sql.append(placeholders_row)\n-            return super().bulk_insert_sql(fields, placeholder_rows_sql)\n-        # Oracle < 23c doesn't support inserting multiple rows in a single\n-        # statement, use UNION of SELECTs as a workaround.\n         query = []\n         for row in placeholder_rows:\n             select = []\n", "test_patch": "", "problem_statement": "Use INSERT with multiple rows on Oracle 23c+\nDescription\n\t \nOracle 23c finally allows to INSERT multiple rows into a table in a single step without a UNION-SELECT workaround \ud83c\udf89 \n\u200bhttps://oracle-base.com/articles/23c/table-values-constructor-23c#insert\n", "hints_text": [["\u200bPR", 1710248364.0], ["The current patch fails on field_defaults.tests.DefaultTests.test_bulk_create_mixed_db_defaults_function: django.db.utils.DatabaseError: ORA-01797: this operator must be followed by ANY or ALL", 1710255558.0], ["In 33c06ca0: Refs #32673, Refs #35295 -- Avoided wrapping rhs direct values in lookups.", 1710330403.0], ["In 912f72a: Refs #35295 -- Added BaseDatabaseOperations.bulk_insert_sql(). Co-authored-by: Nick Pope <nick@\u2026>", 1710393080.0], ["In 175b049: Fixed #35295 -- Used INSERT with multiple rows on Oracle 23c.", 1710393080.0]], "created_at": "2024-08-02T12:54:49Z"}
{"repo": "django/django", "pull_number": 18439, "instance_id": "django__django-18439", "issue_numbers": ["35645"], "base_commit": "a16f13a8661297eda12c4177bb01fa2e5b5ccc56", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex d81bcab6a18f..37910431a0c8 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -13,6 +13,7 @@ html[data-theme=\"light\"],\n     --body-fg: #333;\n     --body-bg: #fff;\n     --body-quiet-color: #666;\n+    --body-medium-color: #444;\n     --body-loud-color: #000;\n \n     --header-color: #ffc;\n@@ -149,7 +150,6 @@ h1 {\n     margin: 0 0 20px;\n     font-weight: 300;\n     font-size: 1.25rem;\n-    color: var(--body-quiet-color);\n }\n \n h2 {\n@@ -165,7 +165,7 @@ h2.subhead {\n h3 {\n     font-size: 0.875rem;\n     margin: .8em 0 .3em 0;\n-    color: var(--body-quiet-color);\n+    color: var(--body-medium-color);\n     font-weight: bold;\n }\n \n@@ -173,6 +173,7 @@ h4 {\n     font-size: 0.75rem;\n     margin: 1em 0 .8em 0;\n     padding-bottom: 3px;\n+    color: var(--body-medium-color);\n }\n \n h5 {\n@@ -319,7 +320,7 @@ td, th {\n }\n \n th {\n-    font-weight: 600;\n+    font-weight: 500;\n     text-align: left;\n }\n \n@@ -340,7 +341,7 @@ tfoot td {\n }\n \n thead th.required {\n-    color: var(--body-loud-color);\n+    font-weight: bold;\n }\n \n tr.alt {\ndiff --git a/django/contrib/admin/static/admin/css/dark_mode.css b/django/contrib/admin/static/admin/css/dark_mode.css\nindex 2123be05c49b..7e12a81578bc 100644\n--- a/django/contrib/admin/static/admin/css/dark_mode.css\n+++ b/django/contrib/admin/static/admin/css/dark_mode.css\n@@ -5,7 +5,8 @@\n   \n       --body-fg: #eeeeee;\n       --body-bg: #121212;\n-      --body-quiet-color: #e0e0e0;\n+      --body-quiet-color: #d0d0d0;\n+      --body-medium-color: #e0e0e0;\n       --body-loud-color: #ffffff;\n   \n       --breadcrumbs-link-fg: #e0e0e0;\n@@ -41,7 +42,8 @@ html[data-theme=\"dark\"] {\n \n     --body-fg: #eeeeee;\n     --body-bg: #121212;\n-    --body-quiet-color: #e0e0e0;\n+    --body-quiet-color: #d0d0d0;\n+    --body-medium-color: #e0e0e0;\n     --body-loud-color: #ffffff;\n \n     --breadcrumbs-link-fg: #e0e0e0;\ndiff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex 8b24fad39fa3..776a920e25ad 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -44,7 +44,6 @@ label {\n \n .required label, label.required {\n     font-weight: bold;\n-    color: var(--body-fg);\n }\n \n /* RADIO BUTTONS */\n@@ -381,7 +380,7 @@ body.popup .submit-row {\n .inline-related h4,\n .inline-related:not(.tabular) .collapse summary {\n     margin: 0;\n-    color: var(--body-quiet-color);\n+    color: var(--body-medium-color);\n     padding: 5px;\n     font-size: 0.8125rem;\n     background: var(--darkened-bg);\n@@ -390,10 +389,6 @@ body.popup .submit-row {\n     border-right-color: var(--darkened-bg);\n }\n \n-.inline-related h3 {\n-    color: var(--body-loud-color);\n-}\n-\n .inline-related h3 span.delete {\n     float: right;\n }\ndiff --git a/docs/intro/_images/admin01.png b/docs/intro/_images/admin01.png\nindex 8b7625867608..61fe8ba199f5 100644\nBinary files a/docs/intro/_images/admin01.png and b/docs/intro/_images/admin01.png differ\ndiff --git a/docs/intro/_images/admin02.png b/docs/intro/_images/admin02.png\nindex 63f7b2933a28..24f428dcd6cc 100644\nBinary files a/docs/intro/_images/admin02.png and b/docs/intro/_images/admin02.png differ\ndiff --git a/docs/intro/_images/admin03t.png b/docs/intro/_images/admin03t.png\nindex d549c9b5b567..3245bd654b8b 100644\nBinary files a/docs/intro/_images/admin03t.png and b/docs/intro/_images/admin03t.png differ\ndiff --git a/docs/intro/_images/admin04t.png b/docs/intro/_images/admin04t.png\nindex b36bda145295..517b2296b308 100644\nBinary files a/docs/intro/_images/admin04t.png and b/docs/intro/_images/admin04t.png differ\ndiff --git a/docs/intro/_images/admin05t.png b/docs/intro/_images/admin05t.png\nindex d23553b31db1..427a26ba18a4 100644\nBinary files a/docs/intro/_images/admin05t.png and b/docs/intro/_images/admin05t.png differ\ndiff --git a/docs/intro/_images/admin06t.png b/docs/intro/_images/admin06t.png\nindex 7c23efa90712..b3b90ea15dad 100644\nBinary files a/docs/intro/_images/admin06t.png and b/docs/intro/_images/admin06t.png differ\ndiff --git a/docs/intro/_images/admin07.png b/docs/intro/_images/admin07.png\nindex 38c276049b29..d13b0e9ef80b 100644\nBinary files a/docs/intro/_images/admin07.png and b/docs/intro/_images/admin07.png differ\ndiff --git a/docs/intro/_images/admin08t.png b/docs/intro/_images/admin08t.png\nindex 90945380571c..824bf562e2f1 100644\nBinary files a/docs/intro/_images/admin08t.png and b/docs/intro/_images/admin08t.png differ\ndiff --git a/docs/intro/_images/admin09.png b/docs/intro/_images/admin09.png\nindex f90810dfe183..16ccff4b416e 100644\nBinary files a/docs/intro/_images/admin09.png and b/docs/intro/_images/admin09.png differ\ndiff --git a/docs/intro/_images/admin10t.png b/docs/intro/_images/admin10t.png\nindex b74f9bb05bcb..e0376ec700ae 100644\nBinary files a/docs/intro/_images/admin10t.png and b/docs/intro/_images/admin10t.png differ\ndiff --git a/docs/intro/_images/admin11t.png b/docs/intro/_images/admin11t.png\nindex 256fd3f431ff..2dda5c0d0570 100644\nBinary files a/docs/intro/_images/admin11t.png and b/docs/intro/_images/admin11t.png differ\ndiff --git a/docs/intro/_images/admin12t.png b/docs/intro/_images/admin12t.png\nindex 51da9d4ee31b..6b43c7ae6d84 100644\nBinary files a/docs/intro/_images/admin12t.png and b/docs/intro/_images/admin12t.png differ\ndiff --git a/docs/intro/_images/admin13t.png b/docs/intro/_images/admin13t.png\nindex 892aff32ae25..0d79edefd4f0 100644\nBinary files a/docs/intro/_images/admin13t.png and b/docs/intro/_images/admin13t.png differ\ndiff --git a/docs/intro/_images/admin14t.png b/docs/intro/_images/admin14t.png\nindex 5802c8f6f4a0..44ae24fe4001 100644\nBinary files a/docs/intro/_images/admin14t.png and b/docs/intro/_images/admin14t.png differ\ndiff --git a/docs/ref/contrib/admin/_images/actions-as-modeladmin-methods.png b/docs/ref/contrib/admin/_images/actions-as-modeladmin-methods.png\nindex ceb6f20e9ec3..6ae454e0de73 100644\nBinary files a/docs/ref/contrib/admin/_images/actions-as-modeladmin-methods.png and b/docs/ref/contrib/admin/_images/actions-as-modeladmin-methods.png differ\ndiff --git a/docs/ref/contrib/admin/_images/adding-actions-to-the-modeladmin.png b/docs/ref/contrib/admin/_images/adding-actions-to-the-modeladmin.png\nindex afdf4c3032e2..9510706dadef 100644\nBinary files a/docs/ref/contrib/admin/_images/adding-actions-to-the-modeladmin.png and b/docs/ref/contrib/admin/_images/adding-actions-to-the-modeladmin.png differ\ndiff --git a/docs/ref/contrib/admin/_images/admin-actions.png b/docs/ref/contrib/admin/_images/admin-actions.png\nindex 763b23a14904..7c3a6ccc2e0b 100644\nBinary files a/docs/ref/contrib/admin/_images/admin-actions.png and b/docs/ref/contrib/admin/_images/admin-actions.png differ\ndiff --git a/docs/ref/contrib/admin/_images/fieldsets.png b/docs/ref/contrib/admin/_images/fieldsets.png\nindex f785cb9f754c..e5bc614f25d8 100644\nBinary files a/docs/ref/contrib/admin/_images/fieldsets.png and b/docs/ref/contrib/admin/_images/fieldsets.png differ\ndiff --git a/docs/ref/contrib/admin/_images/list_filter.png b/docs/ref/contrib/admin/_images/list_filter.png\nindex 61b1c2b596c0..02c4879d182e 100644\nBinary files a/docs/ref/contrib/admin/_images/list_filter.png and b/docs/ref/contrib/admin/_images/list_filter.png differ\ndiff --git a/docs/ref/contrib/admin/_images/raw_id_fields.png b/docs/ref/contrib/admin/_images/raw_id_fields.png\nindex 6886b8faccf5..7f16b11032d3 100644\nBinary files a/docs/ref/contrib/admin/_images/raw_id_fields.png and b/docs/ref/contrib/admin/_images/raw_id_fields.png differ\n", "test_patch": "", "problem_statement": "Inline H3 header style is visually stronger than the page's H1 (admin, light theme).\nDescription\n\t \nFollowing the review of \u200bPR 18308 (which fixes #35558 and a fix landed in e510bb1ab1fb22837c169e0459b81cf388b6d8d2), it was noticed that since the inline H3 header was set to --body-loud-color, in the light theme this color (black) is stronger than the page's H1, which is --body-quiet-color (#666, dark-ish gray).\nThe page's H1 should be visually stronger than the H2 and H3 headings, so I'm proposing to:\nHave the table headers for required fields use --body-fg (#333), instead of black, to match what every other required form label uses, and to visually show a difference between the inline H3 and its content (this is what motivated the changes in #35558).\nHave the page's H1 use --body-loud-color to ensure this header is visually stronger than any other heading in the page.\nPR coming up shortly.\n", "hints_text": [["Thank you for following up Unfortunately this would require an update to almost all images in docs/ref/contrib/admin/_images and docs/intro/_images", 1722421991.0]], "created_at": "2024-08-01T14:24:43Z"}
{"repo": "django/django", "pull_number": 18437, "instance_id": "django__django-18437", "issue_numbers": ["35601"], "base_commit": "946c3cf7342cc40c2d8e3d865c96a4ec990f76f4", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 11ba2c89a499..31f1b963139f 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -624,6 +624,7 @@ answer newbie questions, and generally made Django that much better:\n     Lowe Thiderman <lowe.thiderman@gmail.com>\n     Luan Pablo <luanpab@gmail.com>\n     Lucas Connors <https://www.revolutiontech.ca/>\n+    Lucas Esposito <espositolucas95@gmail.com>\n     Luciano Ramalho\n     Lucidiot <lucidiot@brainshit.fr>\n     Ludvig Ericson <ludvig.ericson@gmail.com>\ndiff --git a/django/forms/jinja2/django/forms/widgets/tel.html b/django/forms/jinja2/django/forms/widgets/tel.html\nnew file mode 100644\nindex 000000000000..08b1e61c0b0d\n--- /dev/null\n+++ b/django/forms/jinja2/django/forms/widgets/tel.html\n@@ -0,0 +1,1 @@\n+{% include \"django/forms/widgets/input.html\" %}\ndiff --git a/django/forms/templates/django/forms/widgets/tel.html b/django/forms/templates/django/forms/widgets/tel.html\nnew file mode 100644\nindex 000000000000..08b1e61c0b0d\n--- /dev/null\n+++ b/django/forms/templates/django/forms/widgets/tel.html\n@@ -0,0 +1,1 @@\n+{% include \"django/forms/widgets/input.html\" %}\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex f1e233865c4a..ca5f2724db97 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -32,6 +32,7 @@\n     \"URLInput\",\n     \"ColorInput\",\n     \"SearchInput\",\n+    \"TelInput\",\n     \"PasswordInput\",\n     \"HiddenInput\",\n     \"MultipleHiddenInput\",\n@@ -365,6 +366,11 @@ class SearchInput(Input):\n     template_name = \"django/forms/widgets/search.html\"\n \n \n+class TelInput(Input):\n+    input_type = \"tel\"\n+    template_name = \"django/forms/widgets/tel.html\"\n+\n+\n class PasswordInput(Input):\n     input_type = \"password\"\n     template_name = \"django/forms/widgets/password.html\"\ndiff --git a/docs/ref/forms/widgets.txt b/docs/ref/forms/widgets.txt\nindex bd970f1517d1..0a7a415583b7 100644\n--- a/docs/ref/forms/widgets.txt\n+++ b/docs/ref/forms/widgets.txt\n@@ -580,6 +580,28 @@ These widgets make use of the HTML elements ``input`` and ``textarea``.\n     * ``template_name``: ``'django/forms/widgets/search.html'``\n     * Renders as: ``<input type=\"search\" ...>``\n \n+``TelInput``\n+~~~~~~~~~~~~~~\n+\n+.. versionadded:: 5.2\n+\n+.. class:: TelInput\n+\n+    * ``input_type``: ``'tel'``\n+    * ``template_name``: ``'django/forms/widgets/tel.html'``\n+    * Renders as: ``<input type=\"tel\" ...>``\n+\n+    Browsers perform no client-side validation by default because telephone\n+    number formats vary so much around the world. You can add some by setting\n+    ``pattern``, ``minlength``, or ``maxlength`` in the :attr:`Widget.attrs`\n+    argument.\n+\n+    Additionally, you can add server-side validation to your form field with a\n+    validator like :class:`~django.core.validators.RegexValidator` or via\n+    third-party packages, such as `django-phonenumber-field`_.\n+\n+.. _django-phonenumber-field: https://django-phonenumber-field.readthedocs.io/en/latest/index.html\n+\n ``PasswordInput``\n ~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex cb57b9255c9f..60794ac8ede6 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -173,6 +173,9 @@ Forms\n * The new :class:`~django.forms.SearchInput` form widget is for entering search\n   queries and renders as ``<input type=\"search\" ...>``.\n \n+* The new :class:`~django.forms.TelInput` form widget is for entering telephone\n+  numbers and renders as ``<input type=\"tel\" ...>``.\n+\n Generic Views\n ~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_telinput.py b/tests/forms_tests/widget_tests/test_telinput.py\nnew file mode 100644\nindex 000000000000..1477f153d160\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_telinput.py\n@@ -0,0 +1,12 @@\n+from django.forms import TelInput\n+\n+from .base import WidgetTest\n+\n+\n+class TelInputTest(WidgetTest):\n+    widget = TelInput()\n+\n+    def test_render(self):\n+        self.check_html(\n+            self.widget, \"telephone\", \"\", html='<input type=\"tel\" name=\"telephone\">'\n+        )\n", "problem_statement": "Add TelInput widget\nDescription\n\t \n\u200bRelevant forum discussion \nAdd a TelInput widget that would render as\n<input type=\"tel\" ...>\n", "hints_text": [["Accepting following the forum conversation, highlighting this fragment from \u200bthe MDN docs about its relevancy for small screens and overall accessibility: Despite the fact that inputs of type tel are functionally identical to standard text inputs, they do serve useful purposes; the most quickly apparent of these is that mobile browsers \u2014 especially on mobile phones \u2014 may opt to present a custom keypad optimized for entering phone numbers. Using a specific input type for telephone numbers also makes adding custom validation and handling of phone numbers more convenient.", 1721316421.0]], "created_at": "2024-08-01T01:40:18Z"}
{"repo": "django/django", "pull_number": 18435, "instance_id": "django__django-18435", "issue_numbers": ["35591"], "base_commit": "95827452571eb976c4f0d5e9ac46843948dd5fe6", "patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 132ee4c0795a..3795809a1226 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -188,3 +188,12 @@ def on_bind(self, server_port):\n             f\"Quit the server with {quit_command}.\",\n             file=self.stdout,\n         )\n+        if os.environ.get(\"HIDE_PRODUCTION_WARNING\") != \"true\":\n+            self.stdout.write(\n+                self.style.WARNING(\n+                    \"WARNING: This is a development server. Do not use it in a \"\n+                    \"production setting. Use a production WSGI or ASGI server \"\n+                    \"instead.\\nFor more information on production servers see: \"\n+                    \"https://docs.djangoproject.com/en/stable/howto/deployment/\"\n+                )\n+            )\ndiff --git a/docs/intro/tutorial01.txt b/docs/intro/tutorial01.txt\nindex db59ca49df75..0536eca2f776 100644\n--- a/docs/intro/tutorial01.txt\n+++ b/docs/intro/tutorial01.txt\n@@ -134,6 +134,9 @@ You'll see the following output on the command line:\n     Starting development server at http://127.0.0.1:8000/\n     Quit the server with CONTROL-C.\n \n+    WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.\n+    For more information on production servers see: https://docs.djangoproject.com/en/stable/howto/deployment/\n+\n .. note::\n     Ignore the warning about unapplied database migrations for now; we'll deal\n     with the database shortly.\ndiff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt\nindex 8173224e4ceb..52eaaa331b65 100644\n--- a/docs/ref/django-admin.txt\n+++ b/docs/ref/django-admin.txt\n@@ -947,6 +947,20 @@ multithreaded by default.\n Uses IPv6 for the development server. This changes the default IP address from\n ``127.0.0.1`` to ``::1``.\n \n+.. envvar:: HIDE_PRODUCTION_WARNING\n+\n+.. versionadded:: 5.2\n+\n+By default, a warning is printed to the console that ``runserver`` is not\n+suitable for production:\n+\n+.. code-block:: text\n+\n+    WARNING: This is a development server. Do not use it in a production setting. Use a production WSGI or ASGI server instead.\n+    For more information on production servers see: https://docs.djangoproject.com/en/stable/howto/deployment/\n+\n+Set this environment variable to ``\"true\"`` to hide this warning.\n+\n Examples of using different ports and addresses\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 92bb501d61cb..6b63bc9524fd 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -194,7 +194,10 @@ Logging\n Management Commands\n ~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* A new warning is printed to the console when running :djadmin:`runserver` that\n+  ``runserver`` is unsuitable for production. This warning can be hidden by\n+  setting the :envvar:`HIDE_PRODUCTION_WARNING` environment variable to\n+  ``\"true\"``.\n \n Migrations\n ~~~~~~~~~~\n", "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 2e77f2c97a62..67362460a99d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1597,6 +1597,13 @@ def test_zero_ip_addr(self):\n             \"Starting development server at http://0.0.0.0:8000/\",\n             self.output.getvalue(),\n         )\n+        self.assertIn(\n+            \"WARNING: This is a development server. Do not use it in a \"\n+            \"production setting. Use a production WSGI or ASGI server instead.\"\n+            \"\\nFor more information on production servers see: \"\n+            \"https://docs.djangoproject.com/en/stable/howto/deployment/\",\n+            self.output.getvalue(),\n+        )\n \n     def test_on_bind(self):\n         self.cmd.addr = \"127.0.0.1\"\n@@ -1606,6 +1613,30 @@ def test_on_bind(self):\n             \"Starting development server at http://127.0.0.1:14437/\",\n             self.output.getvalue(),\n         )\n+        self.assertIn(\n+            \"WARNING: This is a development server. Do not use it in a \"\n+            \"production setting. Use a production WSGI or ASGI server instead.\"\n+            \"\\nFor more information on production servers see: \"\n+            \"https://docs.djangoproject.com/en/stable/howto/deployment/\",\n+            self.output.getvalue(),\n+        )\n+\n+    @mock.patch.dict(os.environ, {\"HIDE_PRODUCTION_WARNING\": \"true\"})\n+    def test_hide_production_warning_with_environment_variable(self):\n+        self.cmd.addr = \"0\"\n+        self.cmd._raw_ipv6 = False\n+        self.cmd.on_bind(\"8000\")\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+        self.assertNotIn(\n+            \"WARNING: This is a development server. Do not use it in a \"\n+            \"production setting. Use a production WSGI or ASGI server instead.\"\n+            \"\\nFor more information on production servers see: \"\n+            \"https://docs.djangoproject.com/en/stable/howto/deployment/\",\n+            self.output.getvalue(),\n+        )\n \n     @unittest.skipUnless(socket.has_ipv6, \"platform doesn't support IPv6\")\n     def test_runner_addrport_ipv6(self):\n", "problem_statement": "Add warning to runserver that it should not be used for production\nDescription\n\t \nAs per this discussion on the \u200bforum, I think adding a warning to the start of runserver would be valuable to those new to Django and a healthy reminder to those coming back to Django. \nThe wording of the warning is:\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\nFor more information on production servers see the documentation: https://docs.djangoproject.com/en/5.0/howto/deployment/\nAdditionally a flag should be added to optionally hide the warning. --hide-unsuitable-for-production was a suggestion.\nFinally the following 2 pages of the documentation should have add some wording to highlight that a deployed project should not use runserver.\n\u200bhttps://docs.djangoproject.com/en/5.0/howto/deployment/ (Add a warning or paragraph that mentions switching)\n\u200bhttps://docs.djangoproject.com/en/5.0/howto/deployment/checklist/ (Add a section to switch away from runserver)\n", "hints_text": [["I think it's worth highlighting that it does say \"development server\": Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK. We also have a warning in the \u200brunserver docs and a \u200bwarning in the tutorial (note that the tutorial runserver output would need to be updated if we make a change here). So I think this is not that we don't have this already but a request to make this information more prominent", 1720668622.0], ["This will be the new output by default. Warning can be disabled by using --hide-unsuitable-for-production flag Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK. WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. For more information on production servers see the documentation: https://docs.djangoproject.com/en/5.0/howto/deployment/", 1720675079.0], ["Task list: add flag to runserver command add new message with flag to hide it update output at \u200bhttps://docs.djangoproject.com/en/5.0/intro/tutorial01/#the-development-server update reference docs: \u200bhttps://docs.djangoproject.com/en/5.0/ref/django-admin/#runserver update deployment checklist update deployment docs with a warning add tests for new flag update existing tests to include extended output", 1722421918.0], ["\u200bPR", 1722425099.0], ["Updated the PR.", 1723026415.0]], "created_at": "2024-07-31T16:24:36Z"}
{"repo": "django/django", "pull_number": 18434, "instance_id": "django__django-18434", "issue_numbers": ["35648"], "base_commit": "e03083917db03757e48f8edac4c8491b72c8a3c4", "patch": "diff --git a/django/utils/safestring.py b/django/utils/safestring.py\nindex 4eb0207a66ae..1ac9b877e952 100644\n--- a/django/utils/safestring.py\n+++ b/django/utils/safestring.py\n@@ -35,10 +35,16 @@ def __add__(self, rhs):\n         Concatenating a safe string with another safe bytestring or\n         safe string is safe. Otherwise, the result is no longer safe.\n         \"\"\"\n-        t = super().__add__(rhs)\n-        if isinstance(rhs, SafeData):\n-            return SafeString(t)\n-        return t\n+        if isinstance(rhs, str):\n+            t = super().__add__(rhs)\n+            if isinstance(rhs, SafeData):\n+                t = SafeString(t)\n+            return t\n+\n+        # Give the rhs object a chance to handle the addition, for example if\n+        # the rhs object's class implements `__radd__`. More details:\n+        # https://docs.python.org/3/reference/datamodel.html#object.__radd__\n+        return NotImplemented\n \n     def __str__(self):\n         return self\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex a15e66920531..9b81117095b6 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -262,7 +262,10 @@ URLs\n Utilities\n ~~~~~~~~~\n \n-* ...\n+* :class:`~django.utils.safestring.SafeString` now raises\n+  :exc:`NotImplementedError` in ``__add__`` for non-string right-hand side\n+  values. This aligns with the :py:class:`str` addition behavior and allows\n+  ``__radd__`` to be used if available.\n \n Validators\n ~~~~~~~~~~\n", "test_patch": "diff --git a/tests/utils_tests/test_safestring.py b/tests/utils_tests/test_safestring.py\nindex 1a79afbf483f..2ae8e57b191b 100644\n--- a/tests/utils_tests/test_safestring.py\n+++ b/tests/utils_tests/test_safestring.py\n@@ -121,3 +121,65 @@ def test_default_safe_data_additional_attrs(self):\n         msg = \"object has no attribute 'dynamic_attr'\"\n         with self.assertRaisesMessage(AttributeError, msg):\n             s.dynamic_attr = True\n+\n+    def test_add_str(self):\n+        s = SafeString(\"a&b\")\n+        cases = [\n+            (\"test\", \"a&amp;btest\"),\n+            (\"<p>unsafe</p>\", \"a&amp;b&lt;p&gt;unsafe&lt;/p&gt;\"),\n+            (SafeString(\"<p>safe</p>\"), SafeString(\"a&b<p>safe</p>\")),\n+        ]\n+        for case, expected in cases:\n+            with self.subTest(case=case):\n+                self.assertRenderEqual(\"{{ s }}\", expected, s=s + case)\n+\n+    def test_add_obj(self):\n+\n+        base_str = \"<strong>strange</strong>\"\n+        add_str = \"hello</br>\"\n+\n+        class Add:\n+            def __add__(self, other):\n+                return base_str + other\n+\n+        class AddSafe:\n+            def __add__(self, other):\n+                return mark_safe(base_str) + other\n+\n+        class Radd:\n+            def __radd__(self, other):\n+                return other + base_str\n+\n+        class RaddSafe:\n+            def __radd__(self, other):\n+                return other + mark_safe(base_str)\n+\n+        left_add_expected = f\"{base_str}{add_str}\"\n+        right_add_expected = f\"{add_str}{base_str}\"\n+        cases = [\n+            # Left-add test cases.\n+            (Add(), add_str, left_add_expected, str),\n+            (Add(), mark_safe(add_str), left_add_expected, str),\n+            (AddSafe(), add_str, left_add_expected, str),\n+            (AddSafe(), mark_safe(add_str), left_add_expected, SafeString),\n+            # Right-add test cases.\n+            (add_str, Radd(), right_add_expected, str),\n+            (mark_safe(add_str), Radd(), right_add_expected, str),\n+            (add_str, Radd(), right_add_expected, str),\n+            (mark_safe(add_str), RaddSafe(), right_add_expected, SafeString),\n+        ]\n+        for lhs, rhs, expected, expected_type in cases:\n+            with self.subTest(lhs=lhs, rhs=rhs):\n+                result = lhs + rhs\n+                self.assertEqual(result, expected)\n+                self.assertEqual(type(result), expected_type)\n+\n+        cases = [\n+            (\"hello\", Add()),\n+            (\"hello\", AddSafe()),\n+            (Radd(), \"hello\"),\n+            (RaddSafe(), \"hello\"),\n+        ]\n+        for lhs, rhs in cases:\n+            with self.subTest(lhs=lhs, rhs=rhs), self.assertRaises(TypeError):\n+                lhs + rhs\n", "problem_statement": "SafeString and overriding addition do not work well together\nDescription\n\t \nWhen you have an object which is added to a string you can override __radd__.\nHowever, the current implementation of SafeString.__add__ unconditionally calls super().__add__, which means that the RHS doesn't get a chance at handling the addition. I propose making SafeString.__add__ a bit more defensive and only call super().__add__ if it actually knows that it can handle the type.\nThe full diff of my proposed change is here:\n\u200bhttps://github.com/django/django/compare/main...matthiask:django:safe-string-add-safety\nThe first commit is \u200bhttps://github.com/django/django/commit/2a118c2bec3e2952b7ab344e12e95cf42554cd5b\nIt shows that overriding __radd__ works with str objects on the LHS but doesn't work with SafeString objects.\nThe second commit is \u200bhttps://github.com/django/django/commit/61767c66c00323b7b862d812679879a4fdc47a43\nIt allows the test to pass. I'm not 100% sure the proposed __add__ implementation handles everything it should.\n", "hints_text": [["\u200bPR", 1722423086.0], ["Hello Matthias! Thank you for taking the time to create this ticket and the corresponding PR. I'm accepting on the basis that I agree with your reasoning that it is expected that a SafeString instance should work and operate like any str since \u200bthe docs clearly say: A str subclass that has been specifically marked as \u201csafe\u201d (requires no further escaping) for HTML output purposes.", 1722436750.0], ["Similar-ish to #26287.", 1722438447.0], ["Branch is looking good! I requested a few small tweaks to tests.", 1723197417.0], ["I have applied the requested changes (I hope!) so I'm going to unset the flag again.", 1723200373.0]], "created_at": "2024-07-31T15:50:35Z"}
{"repo": "django/django", "pull_number": 18433, "instance_id": "django__django-18433", "issue_numbers": ["35646"], "base_commit": "1eac690d25dd49088256954d4046813daa37dc95", "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex c1265bfe6be3..38f133846129 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -113,7 +113,7 @@ class SafeExceptionReporterFilter:\n \n     cleansed_substitute = \"********************\"\n     hidden_settings = _lazy_re_compile(\n-        \"API|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\", flags=re.I\n+        \"API|AUTH|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\", flags=re.I\n     )\n \n     def cleanse_setting(self, key, value):\ndiff --git a/docs/howto/error-reporting.txt b/docs/howto/error-reporting.txt\nindex 61450dfe7ab3..17ba14c35c17 100644\n--- a/docs/howto/error-reporting.txt\n+++ b/docs/howto/error-reporting.txt\n@@ -282,7 +282,11 @@ following attributes and methods:\n \n             import re\n \n-            re.compile(r\"API|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\", flags=re.IGNORECASE)\n+            re.compile(r\"API|AUTH|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE\", flags=re.IGNORECASE)\n+\n+        .. versionchanged:: 5.2\n+\n+            The term ``AUTH`` was added.\n \n     .. method:: is_active(request)\n \ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex ba9a3dfd4c5c..b732e98c9f03 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -150,7 +150,8 @@ Email\n Error Reporting\n ~~~~~~~~~~~~~~~\n \n-* ...\n+* The attribute :attr:`.SafeExceptionReporterFilter.hidden_settings` now\n+  treats values as sensitive if their name includes ``AUTH``.\n \n File Storage\n ~~~~~~~~~~~~\n", "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 9383c0d873eb..4b0a7cf49db6 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1552,6 +1552,14 @@ class ExceptionReporterFilterTests(\n     \"\"\"\n \n     rf = RequestFactory()\n+    sensitive_settings = [\n+        \"SECRET_KEY\",\n+        \"SECRET_KEY_FALLBACKS\",\n+        \"PASSWORD\",\n+        \"API_KEY\",\n+        \"SOME_TOKEN\",\n+        \"MY_AUTH\",\n+    ]\n \n     def test_non_sensitive_request(self):\n         \"\"\"\n@@ -1774,42 +1782,30 @@ def test_sensitive_settings(self):\n         The debug page should not show some sensitive settings\n         (password, secret key, ...).\n         \"\"\"\n-        sensitive_settings = [\n-            \"SECRET_KEY\",\n-            \"SECRET_KEY_FALLBACKS\",\n-            \"PASSWORD\",\n-            \"API_KEY\",\n-            \"AUTH_TOKEN\",\n-        ]\n-        for setting in sensitive_settings:\n-            with self.settings(DEBUG=True, **{setting: \"should not be displayed\"}):\n-                response = self.client.get(\"/raises500/\")\n-                self.assertNotContains(\n-                    response, \"should not be displayed\", status_code=500\n-                )\n+        for setting in self.sensitive_settings:\n+            with self.subTest(setting=setting):\n+                with self.settings(DEBUG=True, **{setting: \"should not be displayed\"}):\n+                    response = self.client.get(\"/raises500/\")\n+                    self.assertNotContains(\n+                        response, \"should not be displayed\", status_code=500\n+                    )\n \n     def test_settings_with_sensitive_keys(self):\n         \"\"\"\n         The debug page should filter out some sensitive information found in\n         dict settings.\n         \"\"\"\n-        sensitive_settings = [\n-            \"SECRET_KEY\",\n-            \"SECRET_KEY_FALLBACKS\",\n-            \"PASSWORD\",\n-            \"API_KEY\",\n-            \"AUTH_TOKEN\",\n-        ]\n-        for setting in sensitive_settings:\n+        for setting in self.sensitive_settings:\n             FOOBAR = {\n                 setting: \"should not be displayed\",\n                 \"recursive\": {setting: \"should not be displayed\"},\n             }\n-            with self.settings(DEBUG=True, FOOBAR=FOOBAR):\n-                response = self.client.get(\"/raises500/\")\n-                self.assertNotContains(\n-                    response, \"should not be displayed\", status_code=500\n-                )\n+            with self.subTest(setting=setting):\n+                with self.settings(DEBUG=True, FOOBAR=FOOBAR):\n+                    response = self.client.get(\"/raises500/\")\n+                    self.assertNotContains(\n+                        response, \"should not be displayed\", status_code=500\n+                    )\n \n     def test_cleanse_setting_basic(self):\n         reporter_filter = SafeExceptionReporterFilter()\n@@ -1883,10 +1879,26 @@ def test_cleanse_setting_recurses_in_list_tuples(self):\n         )\n \n     def test_request_meta_filtering(self):\n-        request = self.rf.get(\"/\", headers={\"secret-header\": \"super_secret\"})\n+        headers = {\n+            \"API_URL\": \"super secret\",\n+            \"A_SIGNATURE_VALUE\": \"super secret\",\n+            \"MY_KEY\": \"super secret\",\n+            \"PASSWORD\": \"super secret\",\n+            \"SECRET_VALUE\": \"super secret\",\n+            \"SOME_TOKEN\": \"super secret\",\n+            \"THE_AUTH\": \"super secret\",\n+        }\n+        request = self.rf.get(\"/\", headers=headers)\n         reporter_filter = SafeExceptionReporterFilter()\n+        cleansed_headers = reporter_filter.get_safe_request_meta(request)\n+        for header in headers:\n+            with self.subTest(header=header):\n+                self.assertEqual(\n+                    cleansed_headers[f\"HTTP_{header}\"],\n+                    reporter_filter.cleansed_substitute,\n+                )\n         self.assertEqual(\n-            reporter_filter.get_safe_request_meta(request)[\"HTTP_SECRET_HEADER\"],\n+            cleansed_headers[\"HTTP_COOKIE\"],\n             reporter_filter.cleansed_substitute,\n         )\n \n@@ -1910,9 +1922,7 @@ def test_cleanse_session_cookie_value(self):\n \n class CustomExceptionReporterFilter(SafeExceptionReporterFilter):\n     cleansed_substitute = \"XXXXXXXXXXXXXXXXXXXX\"\n-    hidden_settings = _lazy_re_compile(\n-        \"API|TOKEN|KEY|SECRET|PASS|SIGNATURE|DATABASE_URL\", flags=re.I\n-    )\n+    hidden_settings = _lazy_re_compile(\"PASS|DATABASE\", flags=re.I)\n \n \n @override_settings(\n", "problem_statement": "SafeExceptionReporterFilter should filter settings and headers such as HTTP_AUTHORIZATION\nDescription\n\t \nFollowing a report from Carlos Pastor:\nHTTP_AUTHORIZATION is not filtered out by django.views.debug.SafeExceptionReporterFilter.get_safe_request_meta.\n[...] Many frameworks use this header to store the session tokens, including django-rest-framework when used with the TokenAuthentication class. The token will leak by the default AdminEmailHandler class, as it is stored in this header.\nConsidering that sensitive data filtering is implemented as a \"best effort solution\" and that is documented accordingly (see \u200bdocs), this ticket aims to harden SafeExceptionReporterFilter.\n", "hints_text": [], "created_at": "2024-07-31T14:48:02Z"}
{"repo": "django/django", "pull_number": 18431, "instance_id": "django__django-18431", "issue_numbers": ["35643"], "base_commit": "b478cae00643d6730746f2614792b35a7d3187ff", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 1d426f49b6d2..49263d5944e4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -403,8 +403,13 @@ def _order_by_pairs(self):\n                 )\n                 continue\n \n-            ref, *transforms = col.split(LOOKUP_SEP)\n-            if expr := self.query.annotations.get(ref):\n+            if expr := self.query.annotations.get(col):\n+                ref = col\n+                transforms = []\n+            else:\n+                ref, *transforms = col.split(LOOKUP_SEP)\n+                expr = self.query.annotations.get(ref)\n+            if expr:\n                 if self.query.combinator and self.select:\n                     if transforms:\n                         raise NotImplementedError(\n", "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 075e70710228..a5914f18781b 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1750,6 +1750,26 @@ def __init__(self, expr):\n             ],\n         )\n \n+    def test_order_by_aggregate_default_alias(self):\n+        publisher_books = (\n+            Publisher.objects.values(\"book\")\n+            .annotate(Count(\"book\"))\n+            .order_by(\"book__count\", \"book__id\")\n+            .values_list(\"book\", flat=True)\n+        )\n+        self.assertQuerySetEqual(\n+            publisher_books,\n+            [\n+                None,\n+                self.b1.id,\n+                self.b2.id,\n+                self.b3.id,\n+                self.b4.id,\n+                self.b5.id,\n+                self.b6.id,\n+            ],\n+        )\n+\n     def test_empty_result_optimization(self):\n         with self.assertNumQueries(0):\n             self.assertEqual(\n", "problem_statement": "Regression in Queryset sequence of value, annotate, order, value\nDescription\n\t \nTesting the 5.1RC on our project, I noticed a failure in a queryset that worked before (Django 5.0.7)\nI've added a test case:\ndiff --git i/tests/queries/tests.py w/tests/queries/tests.py\nindex 7ac8a65d42..c19d877ffc 100644\n--- i/tests/queries/tests.py\n+++ w/tests/queries/tests.py\n@@ -1375,6 +1375,16 @@ class Queries1Tests(TestCase):\n\t\t self.assertCountEqual(items_after, [self.i2, self.i3, self.i4])\n\t\t self.assertCountEqual(items_before, items_after)\n+\tdef test_values_count_value(self):\n+\t\tself.assertSequenceEqual(\n+\t\t\tTag.objects.all()\n+\t\t\t.values(\"category\")\n+\t\t\t.annotate(Count(\"category\"))\n+\t\t\t.order_by(\"-category__count\")\n+\t\t\t.values_list(\"category\", flat=True),\n+\t\t\t[self.nc1.id, None],\n+\t\t)\n+\n class Queries2Tests(TestCase):\n\t @classmethod\n", "hints_text": [["====================================================================== ERROR: test_values_count_value (queries.tests.Queries1Tests.test_values_count_value) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/Users/charettes/Workspace/django/django/db/models/sql/query.py\", line 1889, in transform return self.try_transform(wrapped, name) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/query.py\", line 1426, in try_transform raise FieldError( django.core.exceptions.FieldError: Unsupported lookup 'count' for AutoField or join on the field not permitted, perhaps you meant contains? During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/charettes/Workspace/django/tests/queries/tests.py\", line 1389, in test_values_count_value self.assertSequenceEqual( File \"/usr/local/Cellar/python@3.12/3.12.3/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/case.py\", line 1003, in assertSequenceEqual len1 = len(seq1) ^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/query.py\", line 363, in __len__ self._fetch_all() File \"/Users/charettes/Workspace/django/django/db/models/query.py\", line 1909, in _fetch_all self._result_cache = list(self._iterable_class(self)) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/query.py\", line 268, in __iter__ for row in compiler.results_iter( ^^^^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 1531, in results_iter results = self.execute_sql( ^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 1567, in execute_sql sql, params = self.as_sql() ^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 756, in as_sql extra_select, order_by, group_by = self.pre_sql_setup( ^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 85, in pre_sql_setup order_by = self.get_order_by() ^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 480, in get_order_by for expr, is_ref in self._order_by_pairs(): File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 463, in _order_by_pairs yield from self.find_ordering_name( ^^^^^^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/compiler.py\", line 1109, in find_ordering_name (OrderBy(transform_function(t, alias), descending=descending), False) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/query.py\", line 1893, in transform raise last_field_exception File \"/Users/charettes/Workspace/django/django/db/models/sql/query.py\", line 1866, in setup_joins path, final_field, targets, rest = self.names_to_path( ^^^^^^^^^^^^^^^^^^^ File \"/Users/charettes/Workspace/django/django/db/models/sql/query.py\", line 1771, in names_to_path raise FieldError( django.core.exceptions.FieldError: Cannot resolve keyword 'count' into field. Choices are: dumbcategory_ptr, dumbcategory_ptr_id, id, name, tag Bisected to b0ad41198b3e333f57351e3fce5a1fb47f23f376. The problem here is that Aggregation.default_alias generates an alias that \u200bis composed of LOOKUP_SEP. In other words, the added logic didn't account for annotations containing a lookup separator to exists.", 1722349398.0]], "created_at": "2024-07-31T03:59:06Z"}
{"repo": "django/django", "pull_number": 18425, "instance_id": "django__django-18425", "issue_numbers": ["35638"], "base_commit": "7f8d839722b72aeb3ec5a4278ae57c18283acacd", "patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\nindex a6351dc008a6..2701c4ba4844 100644\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -178,7 +178,7 @@ def __repr__(self):\n \n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         queryset = model._default_manager.using(using)\n-        replacement_map = instance._get_field_value_map(\n+        replacement_map = instance._get_field_expression_map(\n             meta=model._meta, exclude=exclude\n         )\n         replacements = {F(field): value for field, value in replacement_map.items()}\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 9f8c1c0cc0af..d4b8bab96337 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1333,12 +1333,17 @@ def _get_next_or_previous_in_order(self, is_next):\n             setattr(self, cachename, obj)\n         return getattr(self, cachename)\n \n-    def _get_field_value_map(self, meta, exclude=None):\n+    def _get_field_expression_map(self, meta, exclude=None):\n         if exclude is None:\n             exclude = set()\n         meta = meta or self._meta\n         field_map = {\n-            field.name: Value(getattr(self, field.attname), field)\n+            field.name: (\n+                value\n+                if (value := getattr(self, field.attname))\n+                and hasattr(value, \"resolve_expression\")\n+                else Value(value, field)\n+            )\n             for field in meta.local_concrete_fields\n             if field.name not in exclude and not field.generated\n         }\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 0a63e38d8365..915ace512911 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -241,7 +241,7 @@ def remove_sql(self, model, schema_editor):\n         return schema_editor._delete_check_sql(model, self.name)\n \n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n-        against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n+        against = instance._get_field_expression_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.condition).check(against, using=using):\n                 raise ValidationError(\n@@ -638,7 +638,7 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n                         return\n             replacements = {\n                 F(field): value\n-                for field, value in instance._get_field_value_map(\n+                for field, value in instance._get_field_expression_map(\n                     meta=model._meta, exclude=exclude\n                 ).items()\n             }\n@@ -668,7 +668,9 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n                     code=self.violation_error_code,\n                 )\n         else:\n-            against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n+            against = instance._get_field_expression_map(\n+                meta=model._meta, exclude=exclude\n+            )\n             try:\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 4a242012ee37..dc09e43fda18 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1250,9 +1250,41 @@ def as_sql(self, compiler, connection):\n \n \n class DatabaseDefault(Expression):\n-    \"\"\"Placeholder expression for the database default in an insert query.\"\"\"\n+    \"\"\"\n+    Expression to use DEFAULT keyword during insert otherwise the underlying expression.\n+    \"\"\"\n+\n+    def __init__(self, expression, output_field=None):\n+        super().__init__(output_field)\n+        self.expression = expression\n+\n+    def get_source_expressions(self):\n+        return [self.expression]\n+\n+    def set_source_expressions(self, exprs):\n+        (self.expression,) = exprs\n+\n+    def resolve_expression(\n+        self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False\n+    ):\n+        resolved_expression = self.expression.resolve_expression(\n+            query=query,\n+            allow_joins=allow_joins,\n+            reuse=reuse,\n+            summarize=summarize,\n+            for_save=for_save,\n+        )\n+        # Defaults used outside an INSERT context should resolve to their\n+        # underlying expression.\n+        if not for_save:\n+            return resolved_expression\n+        return DatabaseDefault(\n+            resolved_expression, output_field=self._output_field_or_none\n+        )\n \n     def as_sql(self, compiler, connection):\n+        if not connection.features.supports_default_keyword_in_insert:\n+            return compiler.compile(self.expression)\n         return \"DEFAULT\", []\n \n \ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 796c4d23c458..d1f31f021135 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -983,13 +983,7 @@ def get_internal_type(self):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        value = getattr(model_instance, self.attname)\n-        if not connection.features.supports_default_keyword_in_insert:\n-            from django.db.models.expressions import DatabaseDefault\n-\n-            if isinstance(value, DatabaseDefault):\n-                return self._db_default_expression\n-        return value\n+        return getattr(model_instance, self.attname)\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n@@ -1031,7 +1025,9 @@ def _get_default(self):\n         if self.db_default is not NOT_PROVIDED:\n             from django.db.models.expressions import DatabaseDefault\n \n-            return DatabaseDefault\n+            return lambda: DatabaseDefault(\n+                self._db_default_expression, output_field=self\n+            )\n \n         if (\n             not self.empty_strings_allowed\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex 31de9985c46a..5cc3faec98a2 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -28,3 +28,7 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a system check crash when\n   ``ModelAdmin.date_hierarchy`` was a ``GeneratedField`` with an\n   ``output_field`` of ``DateField`` or ``DateTimeField`` (:ticket:`35628`).\n+\n+* Fixed a bug in Django 5.0 which caused constraint validation to either crash\n+  or incorrectly raise validation errors for constraints referring to fields\n+  using ``Field.db_default`` (:ticket:`35638`).\n", "test_patch": "diff --git a/tests/constraints/models.py b/tests/constraints/models.py\nindex 87b97b2a85f0..983d5505022d 100644\n--- a/tests/constraints/models.py\n+++ b/tests/constraints/models.py\n@@ -128,3 +128,10 @@ class JSONFieldModel(models.Model):\n \n     class Meta:\n         required_db_features = {\"supports_json_field\"}\n+\n+\n+class ModelWithDatabaseDefault(models.Model):\n+    field = models.CharField(max_length=255)\n+    field_with_db_default = models.CharField(\n+        max_length=255, db_default=models.Value(\"field_with_db_default\")\n+    )\ndiff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 00c3d958e3eb..350f05f2b851 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -4,7 +4,7 @@\n from django.db import IntegrityError, connection, models\n from django.db.models import F\n from django.db.models.constraints import BaseConstraint, UniqueConstraint\n-from django.db.models.functions import Abs, Lower\n+from django.db.models.functions import Abs, Lower, Upper\n from django.db.transaction import atomic\n from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import ignore_warnings\n@@ -14,6 +14,7 @@\n     ChildModel,\n     ChildUniqueConstraintProduct,\n     JSONFieldModel,\n+    ModelWithDatabaseDefault,\n     Product,\n     UniqueConstraintConditionProduct,\n     UniqueConstraintDeferrable,\n@@ -396,6 +397,33 @@ def test_check_deprecation(self):\n         with self.assertWarnsRegex(RemovedInDjango60Warning, msg):\n             self.assertIs(constraint.check, other_condition)\n \n+    def test_database_default(self):\n+        models.CheckConstraint(\n+            condition=models.Q(field_with_db_default=\"field_with_db_default\"),\n+            name=\"check_field_with_db_default\",\n+        ).validate(ModelWithDatabaseDefault, ModelWithDatabaseDefault())\n+\n+        # Ensure that a check also does not silently pass with either\n+        # FieldError or DatabaseError when checking with a db_default.\n+        with self.assertRaises(ValidationError):\n+            models.CheckConstraint(\n+                condition=models.Q(\n+                    field_with_db_default=\"field_with_db_default\", field=\"field\"\n+                ),\n+                name=\"check_field_with_db_default_2\",\n+            ).validate(\n+                ModelWithDatabaseDefault, ModelWithDatabaseDefault(field=\"not-field\")\n+            )\n+\n+        with self.assertRaises(ValidationError):\n+            models.CheckConstraint(\n+                condition=models.Q(field_with_db_default=\"field_with_db_default\"),\n+                name=\"check_field_with_db_default\",\n+            ).validate(\n+                ModelWithDatabaseDefault,\n+                ModelWithDatabaseDefault(field_with_db_default=\"other value\"),\n+            )\n+\n \n class UniqueConstraintTests(TestCase):\n     @classmethod\n@@ -1265,3 +1293,30 @@ def test_requires_name(self):\n         msg = \"A unique constraint must be named.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             models.UniqueConstraint(fields=[\"field\"])\n+\n+    def test_database_default(self):\n+        models.UniqueConstraint(\n+            fields=[\"field_with_db_default\"], name=\"unique_field_with_db_default\"\n+        ).validate(ModelWithDatabaseDefault, ModelWithDatabaseDefault())\n+        models.UniqueConstraint(\n+            Upper(\"field_with_db_default\"),\n+            name=\"unique_field_with_db_default_expression\",\n+        ).validate(ModelWithDatabaseDefault, ModelWithDatabaseDefault())\n+\n+        ModelWithDatabaseDefault.objects.create()\n+\n+        msg = (\n+            \"Model with database default with this Field with db default already \"\n+            \"exists.\"\n+        )\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            models.UniqueConstraint(\n+                fields=[\"field_with_db_default\"], name=\"unique_field_with_db_default\"\n+            ).validate(ModelWithDatabaseDefault, ModelWithDatabaseDefault())\n+\n+        msg = \"Constraint \u201cunique_field_with_db_default_expression\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            models.UniqueConstraint(\n+                Upper(\"field_with_db_default\"),\n+                name=\"unique_field_with_db_default_expression\",\n+            ).validate(ModelWithDatabaseDefault, ModelWithDatabaseDefault())\ndiff --git a/tests/postgres_tests/migrations/0002_create_test_models.py b/tests/postgres_tests/migrations/0002_create_test_models.py\nindex 5538b436ad3f..188f79607d78 100644\n--- a/tests/postgres_tests/migrations/0002_create_test_models.py\n+++ b/tests/postgres_tests/migrations/0002_create_test_models.py\n@@ -434,7 +434,7 @@ class Migration(migrations.Migration):\n                         primary_key=True,\n                     ),\n                 ),\n-                (\"ints\", IntegerRangeField(null=True, blank=True)),\n+                (\"ints\", IntegerRangeField(null=True, blank=True, db_default=(5, 10))),\n                 (\"bigints\", BigIntegerRangeField(null=True, blank=True)),\n                 (\"decimals\", DecimalRangeField(null=True, blank=True)),\n                 (\"timestamps\", DateTimeRangeField(null=True, blank=True)),\ndiff --git a/tests/postgres_tests/models.py b/tests/postgres_tests/models.py\nindex a97894e32778..e3118bc5902b 100644\n--- a/tests/postgres_tests/models.py\n+++ b/tests/postgres_tests/models.py\n@@ -130,7 +130,7 @@ class LineSavedSearch(PostgreSQLModel):\n \n \n class RangesModel(PostgreSQLModel):\n-    ints = IntegerRangeField(blank=True, null=True)\n+    ints = IntegerRangeField(blank=True, null=True, db_default=(5, 10))\n     bigints = BigIntegerRangeField(blank=True, null=True)\n     decimals = DecimalRangeField(blank=True, null=True)\n     timestamps = DateTimeRangeField(blank=True, null=True)\ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\nindex 770d4b170232..f571a96f3534 100644\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -1213,3 +1213,12 @@ class Meta:\n             constraint_name,\n             self.get_constraints(ModelWithExclusionConstraint._meta.db_table),\n         )\n+\n+    def test_database_default(self):\n+        constraint = ExclusionConstraint(\n+            name=\"ints_equal\", expressions=[(\"ints\", RangeOperators.EQUAL)]\n+        )\n+        RangesModel.objects.create()\n+        msg = \"Constraint \u201cints_equal\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(RangesModel, RangesModel())\ndiff --git a/tests/validation/models.py b/tests/validation/models.py\nindex 653be4a239bf..ed8875036452 100644\n--- a/tests/validation/models.py\n+++ b/tests/validation/models.py\n@@ -48,7 +48,7 @@ def clean(self):\n \n class UniqueFieldsModel(models.Model):\n     unique_charfield = models.CharField(max_length=100, unique=True)\n-    unique_integerfield = models.IntegerField(unique=True)\n+    unique_integerfield = models.IntegerField(unique=True, db_default=42)\n     non_unique_field = models.IntegerField()\n \n \ndiff --git a/tests/validation/test_unique.py b/tests/validation/test_unique.py\nindex 4a8b3894f03b..36ee6e9da0cb 100644\n--- a/tests/validation/test_unique.py\n+++ b/tests/validation/test_unique.py\n@@ -146,6 +146,20 @@ def test_primary_key_unique_check_not_performed_when_not_adding(self):\n             mtv = ModelToValidate(number=10, name=\"Some Name\")\n             mtv.full_clean()\n \n+    def test_unique_db_default(self):\n+        UniqueFieldsModel.objects.create(unique_charfield=\"foo\", non_unique_field=42)\n+        um = UniqueFieldsModel(unique_charfield=\"bar\", non_unique_field=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            um.full_clean()\n+        self.assertEqual(\n+            cm.exception.message_dict,\n+            {\n+                \"unique_integerfield\": [\n+                    \"Unique fields model with this Unique integerfield already exists.\"\n+                ]\n+            },\n+        )\n+\n     def test_unique_for_date(self):\n         Post.objects.create(\n             title=\"Django 1.0 is released\",\n", "problem_statement": "validate_constraints() fails on models with fields using db_default\nDescription\n\t \nFollow up to #35223\nRelated forum thread: \u200bhttps://forum.djangoproject.com/t/proposal-to-have-db-default-considered-in-model-forms/33358/3\nGiven the model\nclass Foo(models.Model):\n\tbar = models.CharField(db_default=\"bar\")\n\tclass Meta:\n\t\tconstraints = [\n\t\t\tmodels.CheckConstraint(check=models.Q(bar=\"bar\"), name=\"is_bar\"),\n\t\t]\nvalidating constraints should ideally not fail but currently does:\n>>> foo = Foo()\n>>> foo.validate_constraints()\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"/path/to/django/django/db/models/base.py\", line 1598, in validate_constraints\n\traise ValidationError(errors)\ndjango.core.exceptions.ValidationError: {'__all__': ['Constraint \u201cis_bar\u201d is violated.']}\nI couldn't find an easy workaround for this.\nIf I apply this small patch to Q.check(), then validate_constraints() uses the default expression and runs a suitable check query. Perhaps can take this as a starting point and add something similar to Django?\nindex 1bf396723e..5380cc17d0 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -120,12 +120,16 @@ class Q(tree.Node):\n\t\t \"\"\"\n\t\t # Avoid circular imports.\n\t\t from django.db.models import BooleanField, Value\n+\t\tfrom django.db.models.expressions import DatabaseDefault\n\t\t from django.db.models.functions import Coalesce\n\t\t from django.db.models.sql import Query\n\t\t from django.db.models.sql.constants import SINGLE\n\t\t query = Query(None)\n\t\t for name, value in against.items():\n+\t\t\t# not ideal, value is wrapped in a Value by Model._get_field_value_map()\n+\t\t\tif isinstance(getattr(value, \"value\"), DatabaseDefault):\n+\t\t\t\tvalue = value.field.db_default\n\t\t\t if not hasattr(value, \"resolve_expression\"):\n\t\t\t\t value = Value(value)\n\t\t\t query.add_annotation(value, name, select=False)\n", "hints_text": [["Thank you for your report! We should adjust _get_field_value_map to take into account db_default (and possibly rename to _get_field_expr_map) so all constraints are adjusted appropriately. I suspect that other constraints as well as the unique=True and unique_together validations that validate_unique provides are also affected e.g. class Foo(models.Model): bar = models.CharField(unique=True, db_default=\"bar\") Foo.objects.create() Foo().validate_unique() # No ValidationError raised but would result in an integrity error on `save` I haven't tested the above but I don't see any special handling of db_default in validate_unique Marking as release blocker as db_default was introduced in 5.0.", 1722241419.0], ["We should adjust _get_field_value_map to take into account db_default (and possibly rename to _get_field_expr_map) so all constraints are adjusted appropriately. \ud83d\udc4d Yup was also thinking this so good to see some confirmation there I suspect that other constraints as well as the unique=True and unique_together validations that validate_unique provides are also affected e.g. Ah nice, I didn't think of this. Whoever picks this test up will need to write a test for that too \u261d\ufe0f I was thinking of starting a PR tomorrow if I have time, but if someone else want to pick it up before then - you're welcome to do so.", 1722244068.0], ["Patch needs improvement: unset Just need to verify whether we still want to keep the changes to _get_field_value_map() \u2026 may no longer necessary with Simon's more recent suggestion", 1722585272.0], ["Replying to David Sanders: Just need to verify whether we still want to keep the changes to _get_field_value_map() \u2026 may no longer necessary with Simon's more recent suggestion Ah sorry! I'll let you unset when you're ready", 1722586312.0], ["Turns out we did need it\u2026 unsetting pending any further reviews & follow-ups \ud83d\ude05", 1722594651.0]], "created_at": "2024-07-30T06:11:45Z"}
{"repo": "django/django", "pull_number": 18423, "instance_id": "django__django-18423", "issue_numbers": ["28646"], "base_commit": "e3de574c1e60f644b817e5d938c2d0bd3e535f00", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 3e38c56d50d4..f6b675339a3f 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -964,9 +964,7 @@ def _alter_field(\n                 fks_dropped.add((old_field.column,))\n                 self.execute(self._delete_fk_sql(model, fk_name))\n         # Has unique been removed?\n-        if old_field.unique and (\n-            not new_field.unique or self._field_became_primary_key(old_field, new_field)\n-        ):\n+        if old_field.unique and not old_field.primary_key and not new_field.unique:\n             # Find the unique constraint for this field\n             meta_constraint_names = {\n                 constraint.name for constraint in model._meta.constraints\ndiff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex 0c8548a5d663..c0a785c7e15e 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -140,6 +140,13 @@ def _get_sequence_name(self, table, column):\n                     return sequence[\"name\"]\n         return None\n \n+    def _is_changing_type_of_indexed_text_column(self, old_field, old_type, new_type):\n+        return (old_field.db_index or old_field.unique) and (\n+            (old_type.startswith(\"varchar\") and not new_type.startswith(\"varchar\"))\n+            or (old_type.startswith(\"text\") and not new_type.startswith(\"text\"))\n+            or (old_type.startswith(\"citext\") and not new_type.startswith(\"citext\"))\n+        )\n+\n     def _alter_column_type_sql(\n         self, model, old_field, new_field, new_type, old_collation, new_collation\n     ):\n@@ -147,11 +154,7 @@ def _alter_column_type_sql(\n         # different type.\n         old_db_params = old_field.db_parameters(connection=self.connection)\n         old_type = old_db_params[\"type\"]\n-        if (old_field.db_index or old_field.unique) and (\n-            (old_type.startswith(\"varchar\") and not new_type.startswith(\"varchar\"))\n-            or (old_type.startswith(\"text\") and not new_type.startswith(\"text\"))\n-            or (old_type.startswith(\"citext\") and not new_type.startswith(\"citext\"))\n-        ):\n+        if self._is_changing_type_of_indexed_text_column(old_field, old_type, new_type):\n             index_name = self._create_index_name(\n                 model._meta.db_table, [old_field.column], suffix=\"_like\"\n             )\n@@ -255,6 +258,25 @@ def _alter_column_type_sql(\n                 model, old_field, new_field, new_type, old_collation, new_collation\n             )\n \n+    def _new_index_should_be_added(self, old_field, new_field):\n+        return not (old_field.db_index or old_field.unique) and (\n+            new_field.db_index or new_field.unique\n+        )\n+\n+    def _deleted_index_should_be_recreated(\n+        self, old_field, new_field, old_type, new_type\n+    ):\n+        if (\n+            not old_field.unique\n+            and (\n+                not new_field.db_index\n+                or (new_field.unique and not new_field.primary_key)\n+            )\n+        ) or (\n+            self._is_changing_type_of_indexed_text_column(old_field, old_type, new_type)\n+        ):\n+            return True\n+\n     def _alter_field(\n         self,\n         model,\n@@ -277,8 +299,10 @@ def _alter_field(\n             strict,\n         )\n         # Added an index? Create any PostgreSQL-specific indexes.\n-        if (not (old_field.db_index or old_field.unique) and new_field.db_index) or (\n-            not old_field.unique and new_field.unique\n+        if self._new_index_should_be_added(\n+            old_field, new_field\n+        ) or self._deleted_index_should_be_recreated(\n+            old_field, new_field, old_type, new_type\n         ):\n             like_index_statement = self._create_like_index_sql(model, new_field)\n             if like_index_statement is not None:\n", "test_patch": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex 0ff1dda1d92c..1f565eb03d0e 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -102,7 +102,7 @@ def assertIndexExists(\n                     .values()\n                     if (\n                         c[\"columns\"] == list(columns)\n-                        and (index_type is None or c[\"type\"] == index_type)\n+                        and (index_type is None or c.get(\"type\") == index_type)\n                         and not c[\"unique\"]\n                     )\n                 ),\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3ac813b899b7..42629e349466 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1,4 +1,5 @@\n import math\n+import unittest\n from decimal import Decimal\n \n from django.core.exceptions import FieldDoesNotExist\n@@ -6213,6 +6214,52 @@ def test_add_field_after_generated_field(self):\n         self.assertEqual(pony_new.static, 2)\n \n \n+class PrimaryKeyOperations(OperationTestBase):\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_slugfields_change_primary_key_operations(self):\n+        operation1 = migrations.CreateModel(\n+            \"SimpleModel\",\n+            [\n+                (\"field1\", models.SlugField(max_length=20, primary_key=True)),\n+                (\"field2\", models.SlugField(max_length=20)),\n+            ],\n+        )\n+        operation2 = migrations.AlterField(\n+            \"SimpleModel\",\n+            \"field1\",\n+            models.SlugField(max_length=20, primary_key=False),\n+        )\n+        operation3 = migrations.AlterField(\n+            \"SimpleModel\",\n+            \"field2\",\n+            models.SlugField(max_length=20, primary_key=True),\n+        )\n+        project_state = ProjectState()\n+        new_state = project_state.clone()\n+        operation1.state_forwards(\"migrtest\", new_state)\n+\n+        self.assertTableNotExists(\"migrtest_simplemodel\")\n+        with connection.schema_editor() as editor:\n+            operation1.state_forwards(\"migrtest\", new_state)\n+            operation1.database_forwards(\"migrtest\", editor, project_state, new_state)\n+            project_state, new_state = new_state, new_state.clone()\n+            operation2.state_forwards(\"migrtest\", new_state)\n+            operation2.database_forwards(\"migrtest\", editor, project_state, new_state)\n+            project_state, new_state = new_state, new_state.clone()\n+            operation3.state_forwards(\"migrtest\", new_state)\n+            operation3.database_forwards(\"migrtest\", editor, project_state, new_state)\n+        self.assertTableExists(\"migrtest_simplemodel\")\n+        self.assertColumnExists(\"migrtest_simplemodel\", \"field1\")\n+        self.assertColumnExists(\"migrtest_simplemodel\", \"field2\")\n+        with connection.cursor() as cursor:\n+            primary_keys = connection.introspection.get_primary_key_columns(\n+                cursor, \"migrtest_simplemodel\"\n+            )\n+        self.assertEqual([\"field2\"], primary_keys)\n+        self.assertIndexExists(\"migrtest_simplemodel\", [\"field1\"], index_type=\"idx\")\n+        self.assertIndexExists(\"migrtest_simplemodel\", [\"field2\"], index_type=\"idx\")\n+\n+\n class SwappableOperationTests(OperationTestBase):\n     \"\"\"\n     Key operations ignore swappable models\ndiff --git a/tests/schema/models.py b/tests/schema/models.py\nindex 75e32a0eabed..2fc9095b61a6 100644\n--- a/tests/schema/models.py\n+++ b/tests/schema/models.py\n@@ -147,6 +147,20 @@ class Meta:\n         db_table = \"INTEGERPK\"  # uppercase to ensure proper quoting\n \n \n+class CharFieldPK(models.Model):\n+    field1 = models.CharField(max_length=10, primary_key=True)\n+\n+    class Meta:\n+        apps = new_apps\n+\n+\n+class CharFieldPKUnique(models.Model):\n+    field1 = models.CharField(max_length=10, primary_key=True, unique=True)\n+\n+    class Meta:\n+        apps = new_apps\n+\n+\n class Note(models.Model):\n     info = models.TextField()\n     address = models.TextField(null=True)\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 3a2947cf4343..88e346e9232a 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -86,6 +86,8 @@\n     BookWithO2O,\n     BookWithoutAuthor,\n     BookWithSlug,\n+    CharFieldPK,\n+    CharFieldPKUnique,\n     IntegerPK,\n     Node,\n     Note,\n@@ -121,6 +123,8 @@ class SchemaTests(TransactionTestCase):\n         BookWithLongName,\n         BookWithO2O,\n         BookWithSlug,\n+        CharFieldPK,\n+        CharFieldPKUnique,\n         IntegerPK,\n         Node,\n         Note,\n@@ -5210,6 +5214,213 @@ def test_alter_field_add_db_index_to_charfield_with_unique(self):\n             [\"schema_tag_slug_2c418ba3_like\", \"schema_tag_slug_key\"],\n         )\n \n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_charfield_primary_key_to_db_index(self):\n+        # Create the table and verify initial indexes.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(CharFieldPK)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPK, \"field1\"),\n+            [\"schema_charfieldpk_field1_0eb93b91_like\", \"schema_charfieldpk_pkey\"],\n+        )\n+        # Alter to remove primary_key and set db_index=True.\n+        old_field1 = CharFieldPK._meta.get_field(\"field1\")\n+        new_field1 = CharField(db_index=True, primary_key=False)\n+        new_field1.set_attributes_from_name(\"field1\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(CharFieldPK, old_field1, new_field1, strict=True)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPK, \"field1\"),\n+            [\n+                \"schema_charfieldpk_field1_0eb93b91\",\n+                \"schema_charfieldpk_field1_0eb93b91_like\",\n+            ],\n+        )\n+\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_charfield_primary_key_to_unique(self):\n+        # Create the table and verify initial indexes.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(CharFieldPK)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPK, \"field1\"),\n+            [\"schema_charfieldpk_field1_0eb93b91_like\", \"schema_charfieldpk_pkey\"],\n+        )\n+        # Alter to remove primary_key and set unique=True.\n+        old_field1 = CharFieldPK._meta.get_field(\"field1\")\n+        new_field1 = CharField(unique=True, primary_key=False)\n+        new_field1.set_attributes_from_name(\"field1\")\n+        new_field1.model = CharFieldPK\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(CharFieldPK, old_field1, new_field1, strict=True)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPK, \"field1\"),\n+            [\n+                \"schema_charfieldpk_field1_0eb93b91_like\",\n+                \"schema_charfieldpk_field1_0eb93b91_uniq\",\n+            ],\n+        )\n+\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_charfield_primary_key_to_db_index_and_unique(self):\n+        # Create the table and verify initial indexes.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(CharFieldPK)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPK, \"field1\"),\n+            [\"schema_charfieldpk_field1_0eb93b91_like\", \"schema_charfieldpk_pkey\"],\n+        )\n+        # Alter to remove primary_key and set db_index=True and unique=True.\n+        old_field1 = CharFieldPK._meta.get_field(\"field1\")\n+        new_field1 = CharField(unique=True, db_index=True, primary_key=False)\n+        new_field1.set_attributes_from_name(\"field1\")\n+        new_field1.model = CharFieldPK\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(CharFieldPK, old_field1, new_field1, strict=True)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPK, \"field1\"),\n+            [\n+                \"schema_charfieldpk_field1_0eb93b91_like\",\n+                \"schema_charfieldpk_field1_0eb93b91_uniq\",\n+            ],\n+        )\n+\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_charfield_primary_key_unique_to_just_unique(self):\n+        # Create the table and verify initial indexes.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(CharFieldPKUnique)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPKUnique, \"field1\"),\n+            [\n+                \"schema_charfieldpkunique_field1_ffc9a22c_like\",\n+                \"schema_charfieldpkunique_pkey\",\n+            ],\n+        )\n+        # Alter to remove primary_key (but still unique).\n+        old_field1 = CharFieldPKUnique._meta.get_field(\"field1\")\n+        new_field1 = CharField(unique=True, primary_key=False)\n+        new_field1.set_attributes_from_name(\"field1\")\n+        new_field1.model = CharFieldPKUnique\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(CharFieldPKUnique, old_field1, new_field1, strict=True)\n+        self.assertEqual(\n+            self.get_constraints_for_column(CharFieldPKUnique, \"field1\"),\n+            [\n+                \"schema_charfieldpkunique_field1_ffc9a22c_like\",\n+                \"schema_charfieldpkunique_field1_ffc9a22c_uniq\",\n+            ],\n+        )\n+\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_charfield_db_index_to_textfield_db_index(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(AuthorCharFieldWithIndex)\n+        self.assertEqual(\n+            self.get_constraints_for_column(AuthorCharFieldWithIndex, \"char_field\"),\n+            [\n+                \"schema_authorcharfieldwithindex_char_field_06a11776\",\n+                \"schema_authorcharfieldwithindex_char_field_06a11776_like\",\n+            ],\n+        )\n+        old_field = AuthorCharFieldWithIndex._meta.get_field(\"char_field\")\n+        new_field = TextField(db_index=True)\n+        new_field.set_attributes_from_name(\"char_field\")\n+        new_field.model = AuthorCharFieldWithIndex\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(\n+                AuthorCharFieldWithIndex, old_field, new_field, strict=True\n+            )\n+        self.assertEqual(\n+            self.get_constraints_for_column(AuthorCharFieldWithIndex, \"char_field\"),\n+            [\n+                \"schema_authorcharfieldwithindex_char_field_06a11776\",\n+                \"schema_authorcharfieldwithindex_char_field_06a11776_like\",\n+            ],\n+        )\n+\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_charfield_change_max_length_no_index_created(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        self.assertEqual(\n+            self.get_constraints_for_column(Author, \"name\"),\n+            [],\n+        )\n+        old_name = Author._meta.get_field(\"name\")\n+        new_name = CharField(max_length=20)\n+        new_name.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(Author, old_name, new_name, strict=True)\n+        self.assertEqual(\n+            self.get_constraints_for_column(Author, \"name\"),\n+            [],\n+        )\n+\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_remove_db_index(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(AuthorCharFieldWithIndex)\n+        self.assertEqual(\n+            self.get_constraints_for_column(AuthorCharFieldWithIndex, \"char_field\"),\n+            [\n+                \"schema_authorcharfieldwithindex_char_field_06a11776\",\n+                \"schema_authorcharfieldwithindex_char_field_06a11776_like\",\n+            ],\n+        )\n+        old_char_field = AuthorCharFieldWithIndex._meta.get_field(\"char_field\")\n+        new_char_field = CharField(max_length=31, db_index=False)\n+        new_char_field.set_attributes_from_name(\"char_field\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(\n+                AuthorCharFieldWithIndex, old_char_field, new_char_field, strict=True\n+            )\n+        self.assertEqual(\n+            self.get_constraints_for_column(AuthorCharFieldWithIndex, \"char_field\"),\n+            [],\n+        )\n+\n+    @isolate_apps(\"schema\")\n+    @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific\")\n+    def test_slugfields_change_primary_key(self):\n+        class SimpleModel(Model):\n+            field1 = SlugField(max_length=20, primary_key=True)\n+            field2 = SlugField(max_length=20)\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(SimpleModel)\n+        self.assertEqual(\n+            self.get_constraints_for_column(SimpleModel, \"field1\"),\n+            [\n+                \"schema_simplemodel_field1_f07a3d6a_like\",\n+                \"schema_simplemodel_pkey\",\n+            ],\n+        )\n+        # Remove primary_key from field1.\n+        old_field1 = SimpleModel._meta.get_field(\"field1\")\n+        new_field1 = CharField(max_length=20, primary_key=False)\n+        new_field1.set_attributes_from_name(\"field1\")\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(SimpleModel, old_field1, new_field1, strict=True)\n+        self.assertEqual(self.get_constraints_for_column(SimpleModel, \"field1\"), [])\n+        # Add primary_key to field2.\n+        old_field2 = SimpleModel._meta.get_field(\"field2\")\n+        new_field2 = CharField(max_length=20, primary_key=True)\n+        new_field2.set_attributes_from_name(\"field2\")\n+        new_field2.model = SimpleModel\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(SimpleModel, old_field2, new_field2, strict=True)\n+        self.assertEqual(\n+            self.get_constraints_for_column(SimpleModel, \"field2\"),\n+            [\n+                \"schema_simplemodel_field2_08772539_like\",\n+                \"schema_simplemodel_field2_08772539_pk\",\n+            ],\n+        )\n+\n     def test_alter_field_add_index_to_integerfield(self):\n         # Create the table and verify no initial indexes.\n         with connection.schema_editor() as editor:\n", "problem_statement": "Migration calls \"CREATE INDEX\" when one already exists when 'unique' field attribute is added (PostgreSQL)\nDescription\n\t\t\n(last modified by Hari - \u4f55\u745e\u7406)\t\t\nPostgreSQL migration automatically creates an index for fields that set db_index=True. An example is SlugField, which sets this property implicitly. Thereafter when the unique=True property is added to the field the resultant migration script generates an AlterField object to apply this unique attribute. The schema editor then incorrectly detects this new unique=True attribute to indicate the need to create a like index statement on the field which causes an error as it conflicts with the already existing index.\nThe offending piece of code seems to be at django/db/backends/postgresql/schema.py:117. \n if ((not (old_field.db_index or old_field.unique) and new_field.db_index) or\n\t\t\t\t(not old_field.unique and new_field.unique)):\n\t\t\tlike_index_statement = self._create_like_index_sql(model, new_field)\n\t\t\tif like_index_statement is not None:\n\t\t\t\tself.execute(like_index_statement)\nIf it's changed as:\n if (not (old_field.db_index or old_field.unique) and (new_field.db_index or new_field.unique)):\n\t\t\tlike_index_statement = self._create_like_index_sql(model, new_field)\n\t\t\tif like_index_statement is not None:\n\t\t\t\tself.execute(like_index_statement)\nthis error won't occur. \nPostgreSQL 9.5 introduces IF NOT EXISTS to the CREATE INDEX statement which if added to the schema template can also address this problem without changing the above logic.\nI encountered the problem with SlugField() which implicitly sets db_index=True on PostgreSQL 9.4.\nInterestingly, I only discovered this when I used django-tenant-schemas which adds a thin layer on top of the default Database router setting the schema search path before handing over the work to the default router. With a vanilla Django installation using default router, the second call to create a like index does not throw an error. However, upon reviewing the code, the logic does look incorrect. Also issuing the duplicate SQL statement in PostgreSQL console also throws an error.\nI'm still investigating to see if this there's more to this than what I just described.\n", "hints_text": [["That code was last touched in 9356f63a99957f01c14a9788617428a172a29fcb. Your proposal results in some tests failures. Can you write a test for tests/schema/tests.py that demonstrates this issue?", 1506591513.0], ["I couldn't reproduce this by changing SlugField() to SlugField(unique=True). Perhaps the bug is in django-tenant-schemas. Please reopen if you find that Django is at fault and add more specific steps to reproduce.", 1507283629.0], ["Django tries to create a like index twice and fails when I try to make existing SlugField a primary key in a manually written migration. The code to reproduce: import unittest from django.db import connection, migrations, models from django.db.migrations.state import ProjectState from django.test import TestCase class ChangePrimaryKeyTest(TestCase): def test_change_primary_key(self): # Set PostgreSQL messages locale to get error messages in English operation0 = migrations.RunSQL(\"SET lc_messages = 'C';\") # Create a model with two fields operation1 = migrations.CreateModel( 'SimpleModel', [ (\"field1\", models.SlugField(max_length=20, primary_key=True)), (\"field2\", models.SlugField(max_length=20)), ], ) # Drop field1 primary key constraint - this doesn't fail operation2 = migrations.AlterField( \"SimpleModel\", \"field1\", models.SlugField(max_length=20, primary_key=False), ) # Add a primary key constraint to field2 - this fails operation3 = migrations.AlterField( \"SimpleModel\", \"field2\", models.SlugField(max_length=20, primary_key=True), ) project_state = ProjectState() with connection.schema_editor() as editor: new_state = project_state.clone() operation0.database_forwards( \"migrtest\", editor, project_state, new_state) operation1.state_forwards(\"migrtest\", new_state) operation1.database_forwards( \"migrtest\", editor, project_state, new_state) project_state, new_state = new_state, new_state.clone() operation2.state_forwards(\"migrtest\", new_state) operation2.database_forwards( \"migrtest\", editor, project_state, new_state) project_state, new_state = new_state, new_state.clone() operation3.state_forwards(\"migrtest\", new_state) operation3.database_forwards( \"migrtest\", editor, project_state, new_state) Error message: ERROR: test_change_primary_key (migrtest.tests.ChangePrimaryKeyTest) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/usr/lib/python3.6/site-packages/django/db/backends/utils.py\", line 65, in execute return self.cursor.execute(sql, params) psycopg2.ProgrammingError: relation \"migrtest_simplemodel_field2_972171aa_like\" already exists", 1508525511.0], ["I can reproduce as long as the three operations are in the same migration. The crash doesn't happen if you put the AlterField operations in a separate migration.", 1508747743.0], ["The test case given is incorrect, as Django always uses a fresh schema editor for each migration step: \u200bhttps://github.com/django/django/blob/master/django/db/migrations/executor.py#L225 This passes and is similar to other cases in migrations/test_operations.py: def test_change_primary_key(self): # Create a model with two fields operation1 = migrations.CreateModel( 'SimpleModel', [ (\"field1\", models.SlugField(max_length=20, primary_key=True)), (\"field2\", models.SlugField(max_length=20)), ], ) # Drop field1 primary key constraint - this doesn't fail operation2 = migrations.AlterField( \"SimpleModel\", \"field1\", models.SlugField(max_length=20, primary_key=False), ) # Add a primary key constraint to field2 - this fails operation3 = migrations.AlterField( \"SimpleModel\", \"field2\", models.SlugField(max_length=20, primary_key=True), ) project_state = ProjectState() new_state = project_state.clone() operation1.state_forwards(\"migrtest\", new_state) with connection.schema_editor() as editor: operation1.database_forwards(\"migrtest\", editor, project_state, new_state) project_state, new_state = new_state, new_state.clone() operation2.state_forwards(\"migrtest\", new_state) with connection.schema_editor() as editor: operation2.database_forwards(\"migrtest\", editor, project_state, new_state) project_state, new_state = new_state, new_state.clone() operation3.state_forwards(\"migrtest\", new_state) with connection.schema_editor() as editor: operation3.database_forwards(\"migrtest\", editor, project_state, new_state) I'm going to try working off the original bug description to reproduce the bug. Edit: Apparently this is a permitted way of using schema_editor, e.g. in SeparateDatabaseAndState. This suggests all the test cases should be doubled up (shared schema editor vs separate schema editors). So I'll try fixing the test case given.", 1512488989.0], ["I have added a reasonable PR. \u200bhttps://github.com/django/django/pull/9438 The root cause is that schema_editor.create_model defers the creation of indexes, so at any time you can either have indexes on the database (can be found using schema_editor._constraint_names), deferred or not at all. \u200bhttps://github.com/django/django/blob/master/django/db/backends/base/schema.py#L300 According to the comment they are deferred for SQLite, so one solution would be letting schema editors override the behaviour - removing it for non-sqlite, or just for postgres. I think it will become more difficult to reason about the schema editor in that case, and if done properly the deferred sql can also be an optimiser, removing redundant index creations and deletions. Every place that an index is added ought to check whether the index creation is already deferred, and remove the deferred one if so (in favour of an immediate one). Every place that an index is removed needs to check both deferred indexes and actual indexes. We can probably find more bugs by parameterising the schema and migration tests to try using separate schema_editors (which flushes deferred SQL to the database every step) or sharing schema_editors. Not all the lines added have a test backing them up but I think it's ready for somebody to have a look at and decide whether the approach is good.", 1512574672.0], ["Comments on PR: we have an error in the boolean logic, not correctly distinguishing between the _unique and primary_key cases. Making the check target _unique is enough to avoid the issue: if ((not (old_field.db_index or old_field.unique) and new_field.db_index) or (not old_field.unique and new_field._unique)): (The original suggestion leads to just 3 failures a fix should be simple enough...)", 1520858702.0], ["I'm going to mark this for #djangocph for the sprint in Copenhagen. Whilst it's right in the heart of the migration framework, I think it should be an easy fix. Here's the GitHub permalink to the problem if check: \u200bhttps://github.com/django/django/blob/fb8fd535c0f47cffb4da0c5900f3f66e1ec8d432/django/db/backends/postgresql/schema.py#L124-L126 If you apply the original suggested fix you get a small number of failures (3 I think). These relate to needing to add an index due to a unique flag being added. That's the last or in the problem if. The test from \u200bhttps://github.com/django/django/pull/9438 checks the new problem behaviour. (Can it live with the tests that fail if you apply the suggested fix?) That new test fails because the unique property is essentially _unique or primary_key, which is too wide. As I said above, using new_field._unique was enough to make the test pass. The task here is to go through that and make sure it's correct. Make sure the test is in the right place. Add a comment in the code (if it's needed). Maybe a release note etc.", 1521024674.0], ["\u200bPR", 1706801314.0]], "created_at": "2024-07-29T11:39:04Z"}
{"repo": "django/django", "pull_number": 18422, "instance_id": "django__django-18422", "issue_numbers": ["35639"], "base_commit": "b6ad8b687adf011245270df17a38c1a42792e3d7", "patch": "diff --git a/django/contrib/admin/actions.py b/django/contrib/admin/actions.py\nindex eefb63837ec6..865c16aff237 100644\n--- a/django/contrib/admin/actions.py\n+++ b/django/contrib/admin/actions.py\n@@ -61,7 +61,7 @@ def delete_selected(modeladmin, request, queryset):\n     if perms_needed or protected:\n         title = _(\"Cannot delete %(name)s\") % {\"name\": objects_name}\n     else:\n-        title = _(\"Are you sure?\")\n+        title = _(\"Delete multiple objects\")\n \n     context = {\n         **modeladmin.admin_site.each_context(request),\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 2257b3072ef4..6d5c0708a322 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2229,7 +2229,7 @@ def _delete_view(self, request, object_id, extra_context):\n         if perms_needed or protected:\n             title = _(\"Cannot delete %(name)s\") % {\"name\": object_name}\n         else:\n-            title = _(\"Are you sure?\")\n+            title = _(\"Delete\")\n \n         context = {\n             **self.admin_site.each_context(request),\n", "test_patch": "diff --git a/tests/admin_views/test_actions.py b/tests/admin_views/test_actions.py\nindex 8e1fc144e4c7..467fe046ef78 100644\n--- a/tests/admin_views/test_actions.py\n+++ b/tests/admin_views/test_actions.py\n@@ -72,6 +72,7 @@ def test_model_admin_default_delete_action(self):\n         self.assertContains(\n             confirmation, \"Are you sure you want to delete the selected subscribers?\"\n         )\n+        self.assertContains(confirmation, \"<h1>Delete multiple objects</h1>\")\n         self.assertContains(confirmation, \"<h2>Summary</h2>\")\n         self.assertContains(confirmation, \"<li>Subscribers: 2</li>\")\n         self.assertContains(confirmation, \"<li>External subscribers: 1</li>\")\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex e0a4926b91b6..9dbe1e143229 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3003,6 +3003,7 @@ def test_delete_view(self):\n         response = self.client.get(\n             reverse(\"admin:admin_views_section_delete\", args=(self.s1.pk,))\n         )\n+        self.assertContains(response, \"<h1>Delete</h1>\")\n         self.assertContains(response, \"<h2>Summary</h2>\")\n         self.assertContains(response, \"<li>Articles: 3</li>\")\n         # test response contains link to related Article\n", "problem_statement": "Title of deletion confirmation page could be clearer\nDescription\n\t \nCurrently, both the delete_selected actions confirmation page and the page for deleting a single object have the title \"Are you sure?\"\nThe \"Are you sure\" is immediately repeated in the sentence below.\nI propose replacing the title with the value from the breadcrumb, \"Delete multiple objects\" and \"Delete\", to make it clearer to users that they are about to confirm a destructive action.\n(This has happened multiple times in the last few years, and has been reported as a problem by a client, it's not just me bikeshedding here.)\n", "hints_text": [["\u200bPR", 1722228000.0], ["Hello Matthias, thank you for taking the time to create this ticket. I agree with your rationale! Your PR will be reviewed soon.", 1722239670.0]], "created_at": "2024-07-29T09:39:27Z"}
{"repo": "django/django", "pull_number": 18413, "instance_id": "django__django-18413", "issue_numbers": ["35599"], "base_commit": "aa9079505082d92d4ee5dc6a4adca056422422ed", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex faf64206185d..11ba2c89a499 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -112,6 +112,7 @@ answer newbie questions, and generally made Django that much better:\n     An\u017ee Pe\u010dar <anze@pecar.me>\n     Aram Dulyan\n     arien <regexbot@gmail.com>\n+    Arjun Omray <arjunomray@gmail.com>\n     Armin Ronacher\n     Aron Podrigal <aronp@guaranteedplus.com>\n     Arsalan Ghassemi <arsalan.ghassemi@gmail.com>\ndiff --git a/django/forms/jinja2/django/forms/widgets/color.html b/django/forms/jinja2/django/forms/widgets/color.html\nnew file mode 100644\nindex 000000000000..08b1e61c0b0d\n--- /dev/null\n+++ b/django/forms/jinja2/django/forms/widgets/color.html\n@@ -0,0 +1,1 @@\n+{% include \"django/forms/widgets/input.html\" %}\ndiff --git a/django/forms/templates/django/forms/widgets/color.html b/django/forms/templates/django/forms/widgets/color.html\nnew file mode 100644\nindex 000000000000..08b1e61c0b0d\n--- /dev/null\n+++ b/django/forms/templates/django/forms/widgets/color.html\n@@ -0,0 +1,1 @@\n+{% include \"django/forms/widgets/input.html\" %}\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex e7717c2ff60f..f1e233865c4a 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -30,6 +30,7 @@\n     \"NumberInput\",\n     \"EmailInput\",\n     \"URLInput\",\n+    \"ColorInput\",\n     \"SearchInput\",\n     \"PasswordInput\",\n     \"HiddenInput\",\n@@ -354,6 +355,11 @@ class URLInput(Input):\n     template_name = \"django/forms/widgets/url.html\"\n \n \n+class ColorInput(Input):\n+    input_type = \"color\"\n+    template_name = \"django/forms/widgets/color.html\"\n+\n+\n class SearchInput(Input):\n     input_type = \"search\"\n     template_name = \"django/forms/widgets/search.html\"\ndiff --git a/docs/ref/forms/widgets.txt b/docs/ref/forms/widgets.txt\nindex 1a868c32faa0..bd970f1517d1 100644\n--- a/docs/ref/forms/widgets.txt\n+++ b/docs/ref/forms/widgets.txt\n@@ -558,6 +558,17 @@ These widgets make use of the HTML elements ``input`` and ``textarea``.\n     * ``template_name``: ``'django/forms/widgets/url.html'``\n     * Renders as: ``<input type=\"url\" ...>``\n \n+``ColorInput``\n+~~~~~~~~~~~~~~\n+\n+.. versionadded:: 5.2\n+\n+.. class:: ColorInput\n+\n+    * ``input_type``: ``'color'``\n+    * ``template_name``:``'django/forms/widgets/color.html'``\n+    * Renders as: ``<input type='color' ...>``\n+\n ``SearchInput``\n ~~~~~~~~~~~~~~~\n \ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex b732e98c9f03..cb57b9255c9f 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -166,6 +166,10 @@ File Uploads\n Forms\n ~~~~~\n \n+* The new :class:`~django.forms.ColorInput` form widget is for entering a color\n+  in ``rrggbb`` hexadecimal format and renders as ``<input type='color' ...>``.\n+  Some browsers support a visual color picker interface for this input type.\n+\n * The new :class:`~django.forms.SearchInput` form widget is for entering search\n   queries and renders as ``<input type=\"search\" ...>``.\n \n", "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_colorinput.py b/tests/forms_tests/widget_tests/test_colorinput.py\nnew file mode 100644\nindex 000000000000..f316534bfaa0\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_colorinput.py\n@@ -0,0 +1,15 @@\n+from django.forms import ColorInput\n+\n+from .base import WidgetTest\n+\n+\n+class ColorInputTest(WidgetTest):\n+    widget = ColorInput()\n+\n+    def test_render(self):\n+        self.check_html(\n+            self.widget,\n+            \"color\",\n+            \"\",\n+            html=\"<input type='color' name='color'>\",\n+        )\n", "problem_statement": "Add ColorInput widget\nDescription\n\t \n\u200bRelevant forum discussion \nAdd a ColorInput widget that would render as\n<input type=\"color\" ...>\n", "hints_text": [["I agree that adding this widget is beneficial, and \u200bdecent cross browser support seems available. Accepting based on the linked forum discussion.", 1721304739.0], ["Here is a PR for the issue: \u200bhttps://github.com/django/django/pull/18413", 1721954730.0]], "created_at": "2024-07-26T05:44:56Z"}
{"repo": "django/django", "pull_number": 18412, "instance_id": "django__django-18412", "issue_numbers": ["35586"], "base_commit": "228128618bd895ecad235d2215f4ad4e3232595d", "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex dc09e43fda18..eee0eafc837a 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -182,6 +182,8 @@ class BaseExpression:\n     allowed_default = False\n     # Can the expression be used during a constraint validation?\n     constraint_validation_compatible = True\n+    # Does the expression possibly return more than one row?\n+    set_returning = False\n \n     def __init__(self, output_field=None):\n         if output_field is not None:\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c1e2fc1d4f11..aef3f48f10a7 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -491,6 +491,11 @@ def get_aggregation(self, using, aggregate_exprs):\n             )\n             or having\n         )\n+        set_returning_annotations = {\n+            alias\n+            for alias, annotation in self.annotation_select.items()\n+            if getattr(annotation, \"set_returning\", False)\n+        }\n         # Decide if we need to use a subquery.\n         #\n         # Existing aggregations would cause incorrect results as\n@@ -510,6 +515,7 @@ def get_aggregation(self, using, aggregate_exprs):\n             or qualify\n             or self.distinct\n             or self.combinator\n+            or set_returning_annotations\n         ):\n             from django.db.models.sql.subqueries import AggregateQuery\n \n@@ -551,6 +557,9 @@ def get_aggregation(self, using, aggregate_exprs):\n                         if annotation.get_group_by_cols():\n                             annotation_mask.add(annotation_alias)\n                     inner_query.set_annotation_mask(annotation_mask)\n+                    # Annotations that possibly return multiple rows cannot\n+                    # be masked as they might have an incidence on the query.\n+                    annotation_mask |= set_returning_annotations\n \n             # Add aggregates to the outer AggregateQuery. This requires making\n             # sure all columns referenced by the aggregates are selected in the\ndiff --git a/docs/ref/models/expressions.txt b/docs/ref/models/expressions.txt\nindex 1b6a208d0165..7833580ac137 100644\n--- a/docs/ref/models/expressions.txt\n+++ b/docs/ref/models/expressions.txt\n@@ -1095,6 +1095,16 @@ calling the appropriate methods on the wrapped expression.\n         :py:data:`NotImplemented` which forces the expression to be computed on\n         the database.\n \n+    .. attribute:: set_returning\n+\n+    .. versionadded:: 5.2\n+\n+        Tells Django that this expression contains a set-returning function,\n+        enforcing subquery evaluation. It's used, for example, to allow some\n+        Postgres set-returning functions (e.g. ``JSONB_PATH_QUERY``,\n+        ``UNNEST``, etc.) to skip optimization and be properly evaluated when\n+        annotations spawn rows themselves. Defaults to ``False``.\n+\n     .. method:: resolve_expression(query=None, allow_joins=True, reuse=None, summarize=False, for_save=False)\n \n         Provides the chance to do any preprocessing or validation of\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 02a068e5af6f..a15e66920531 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -218,6 +218,10 @@ Models\n * Added support for validation of model constraints which use a\n   :class:`~django.db.models.GeneratedField`.\n \n+* The new :attr:`.Expression.set_returning` attribute specifies that the\n+  expression contains a set-returning function, enforcing subquery evaluation.\n+  This is necessary for many Postgres set-returning functions.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/annotations/models.py b/tests/annotations/models.py\nindex fbb9ca698849..914770d2fe7a 100644\n--- a/tests/annotations/models.py\n+++ b/tests/annotations/models.py\n@@ -58,3 +58,11 @@ class Company(models.Model):\n class Ticket(models.Model):\n     active_at = models.DateTimeField()\n     duration = models.DurationField()\n+\n+\n+class JsonModel(models.Model):\n+    data = models.JSONField(default=dict, blank=True)\n+    id = models.IntegerField(primary_key=True)\n+\n+    class Meta:\n+        required_db_features = {\"supports_json_field\"}\ndiff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex 703847e1dd52..29660a827e22 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -1,7 +1,9 @@\n import datetime\n from decimal import Decimal\n+from unittest import skipUnless\n \n from django.core.exceptions import FieldDoesNotExist, FieldError\n+from django.db import connection\n from django.db.models import (\n     BooleanField,\n     Case,\n@@ -15,6 +17,7 @@\n     FloatField,\n     Func,\n     IntegerField,\n+    JSONField,\n     Max,\n     OuterRef,\n     Q,\n@@ -43,6 +46,7 @@\n     Company,\n     DepartmentStore,\n     Employee,\n+    JsonModel,\n     Publisher,\n     Store,\n     Ticket,\n@@ -1167,6 +1171,23 @@ def test_alias_forbidden_chars(self):\n                 with self.assertRaisesMessage(ValueError, msg):\n                     Book.objects.annotate(**{crafted_alias: Value(1)})\n \n+    @skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL tests\")\n+    @skipUnlessDBFeature(\"supports_json_field\")\n+    def test_set_returning_functions(self):\n+        class JSONBPathQuery(Func):\n+            function = \"jsonb_path_query\"\n+            output_field = JSONField()\n+            set_returning = True\n+\n+        test_model = JsonModel.objects.create(\n+            data={\"key\": [{\"id\": 1, \"name\": \"test1\"}, {\"id\": 2, \"name\": \"test2\"}]}, id=1\n+        )\n+        qs = JsonModel.objects.annotate(\n+            table_element=JSONBPathQuery(\"data\", Value(\"$.key[*]\"))\n+        ).filter(pk=test_model.pk)\n+\n+        self.assertEqual(qs.count(), len(qs))\n+\n \n class AliasTests(TestCase):\n     @classmethod\n", "problem_statement": "Aggregation optimization doesn't account for not referenced set-returning annotations on Postgres\nDescription\n\t \nThere is a bug where the queryset count is inaccurate when doing an annotation with JSONB_PATH_QUERY. The count is fixed after the queryset is evaluated. \nI discovered this bug via PageNumberPagination from rest_framework.pagination, specifically in the function paginate_queryset. This Paginator takes in an object_list (in this case a Queryset) and determines the length by first checking if a .count() method is available, otherwise by doing len(object_list). In this case, it is determining length through Queryset.count().\nWhen the Queryset is annotated, and the length of the results increases, the count remains stale--only returning the original count. \nCurrently I have a workaround by adding a DISTINCT, INTERSECTION, UNION, or DIFFERENCE to the queryset. Unfortunately, I now also need to have ordering which makes this tricky to continue working around.\nI believe this was a regression back in 4.2. This was previously asked about here: https://code.djangoproject.com/ticket/28477#comment:22, and this thread was referred: \u200bhttps://forum.djangoproject.com/t/django-4-2-behavior-change-when-using-arrayagg-on-unnested-arrayfield-postgresql-specific/21547. However, the Unnest approach does not work for our use case.\nHere are steps to reproduce:\nmodels.py:\nclass TestModel(models.Model):\n\ttest_json = models.JSONField(default=dict, blank=True)\n\tid = models.IntegerField(primary_key=True)\ntests.py\nfrom .models import TestModel\nfrom django.contrib.postgres.fields import JSONField\nfrom django.db.models import Func, Value\n\tdef test_bug(self):\n\t\ttest_model = TestModel.objects.create(\n\t\t\ttest_json={\n\t\t\t\t\"test_key\" : [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\" : 1,\n\t\t\t\t\t\t\"name\" : \"test1\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\" : 2,\n\t\t\t\t\t\t\"name\" : \"test2\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tid=1\n\t\t)\n\t\ttest_model.save()\n\t\tqs = TestModel.objects.annotate(\n\t\t\ttable_element=Func(\n\t\t\t\t\"test_json\",\n\t\t\t\tValue(\"$.test_key[*]\"),\n\t\t\t\tfunction=\"jsonb_path_query\",\n\t\t\t\toutput_field=JSONField(),\n\t\t\t\tsubquery=True\n\t\t\t)\n\t\t).filter(pk=1)\n\t\t# qs.count() and len(qs) should be equal, but currently they are not. Running qs.count() after len(qs) is currently equal because the queryset was evaluated.\n\t\tself.assertEqual(qs.count(), len(qs))\nThank you for any guidance and/or support!\n", "hints_text": [["Edit: the subquery=True parameter was from another recommendation I found, however whether or not it is included has had no impact on the net result.", 1720535015.0], ["This one is tricky, the ORM and its aggregation logic was not built in a way that accounts for annotations spawning rows themselves (instead of through JOINs) like some \u200bPostgres set-returning functions (e.g. UNNEST). These do effectively throw a wrench in the optimization introduced in 4.2 (see #28477) if the set-returning annotation is not referenced by the aggregation. What is really needed here is likely a Expression.set_returning: bool = False attribute that the ORM can consider to enforce the subquery pushdown and preventing of annotation eliding. Something like django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index 4ee22420d9..8656979630 100644 a b class BaseExpression: 182182 allowed_default = False 183183 # Can the expression be used during a constraint validation? 184184 constraint_validation_compatible = True 185 # Does the expression possibly returns more than one row? 186 set_returning = False 185187 186188 def __init__(self, output_field=None): 187189 if output_field is not None: django/db/models/sql/query.py diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index 438bb5ddbd..4f1210c49e 100644 a b def get_aggregation(self, using, aggregate_exprs): 491491 ) 492492 or having 493493 ) 494 set_returning_annotations = { 495 alias 496 for alias, annotation in self.annotation_select.items() 497 if getattr(annotation, \"set_returning\", False) 498 } 494499 # Decide if we need to use a subquery. 495500 # 496501 # Existing aggregations would cause incorrect results as \u2026 \u2026 def get_aggregation(self, using, aggregate_exprs): 510515 or qualify 511516 or self.distinct 512517 or self.combinator 518 or set_returning_annotations 513519 ): 514520 from django.db.models.sql.subqueries import AggregateQuery 515521 \u2026 \u2026 def get_aggregation(self, using, aggregate_exprs): 550556 for annotation_alias, annotation in self.annotation_select.items(): 551557 if annotation.get_group_by_cols(): 552558 annotation_mask.add(annotation_alias) 559 # Annotations that possibly return multiple rows cannot 560 # be masked as they might have an incidence on the query. 561 annotation_mask |= set_returning_annotations 553562 inner_query.set_annotation_mask(annotation_mask) 554563 555564 # Add aggregates to the outer AggregateQuery. This requires making That could then be used like class JSONPathQuery(Func): function = \"jsonb_path_query\" output_field = JSONField() set_returning = True JSONPathQuery(\"test_json\", Value(\"$.test_key[*]\")) The challenge here is that Django doesn't have any core set-returning function (which also explains why this slipped under the radar for so long) so maybe we should also consider adding support for contrib.postgres.Unnest which is a common one that would allow us to ensure proper test coverage and document it as an example of when this flag should be set?", 1720540193.0], ["Adding a bit more details about set-returning functions close equivalents on \u200bSQLite, \u200bMySQL, and \u200bOracle. The gist is that a the query SELECT testmodel.* , jsonb_path_query(testmodel.data, '$.test_key[*]') AS table_element FROM testmodel can also be expressed as SELECT testmodel.* , table_element_tbl.value AS table_element FROM testmodel , jsonb_path_query(testmodel.data, '$.test_key[*]') AS table_element_tbl(value) And if we added support the automatic addition of set_returning (or table_valued functions?) to alias_map (what is used to generate the FROM clause) it could also possibly allow to solve the long standing problem of \u200badding support for features such as generate_series? That would allow the sql.Query.get_aggregation logic to remain unchanged and keep pruning unreferenced aliased (which is really specific to Postgres) as the reference in the FROM clause would still span the rows SELECT COUNT(*) FROM ( SELECT id FROM testmodel, jsonb_path_query(testmodel.data, '$.test_key[*]') AS table_element_tbl(value) )", 1720554808.0], ["Went ahead and implemented/tested your suggestions and they work great for our individual use case. Also pushed a PR for this. I know there may be additional items now within the scope, such as support for Unnest, but I wanted to go ahead and get the ball rolling. Let me know if there are other ways I can help. Thanks!", 1721916100.0]], "created_at": "2024-07-25T18:55:19Z"}
{"repo": "django/django", "pull_number": 18407, "instance_id": "django__django-18407", "issue_numbers": ["35628"], "base_commit": "90adba85b29230acfe354bffd82bc0d3a4d63c9d", "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 94e700cf68c5..a4d7066d10b8 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -1184,7 +1184,7 @@ def _check_date_hierarchy(self, obj):\n                     )\n                 ]\n             else:\n-                if not isinstance(field, (models.DateField, models.DateTimeField)):\n+                if field.get_internal_type() not in {\"DateField\", \"DateTimeField\"}:\n                     return must_be(\n                         \"a DateField or DateTimeField\",\n                         option=\"date_hierarchy\",\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex df3bc9ae2a1c..31de9985c46a 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -24,3 +24,7 @@ Bugfixes\n * Fixed a regression in Django 5.0.7 that caused a crash in\n   ``LocaleMiddleware`` when processing a language code over 500 characters\n   (:ticket:`35627`).\n+\n+* Fixed a bug in Django 5.0 that caused a system check crash when\n+  ``ModelAdmin.date_hierarchy`` was a ``GeneratedField`` with an\n+  ``output_field`` of ``DateField`` or ``DateTimeField`` (:ticket:`35628`).\n", "test_patch": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex f767a6c92b3b..94a80ca0060f 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -4,16 +4,17 @@\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n+from django.db import models\n from django.db.models import CASCADE, F, Field, ForeignKey, ManyToManyField, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n-from django.test import SimpleTestCase\n+from django.test import TestCase, skipUnlessDBFeature\n from django.test.utils import isolate_apps\n \n from .models import Band, Song, User, ValidationTestInlineModel, ValidationTestModel\n \n \n-class CheckTestCase(SimpleTestCase):\n+class CheckTestCase(TestCase):\n     def assertIsInvalid(\n         self,\n         model_admin,\n@@ -97,6 +98,29 @@ class TestModelAdmin(ModelAdmin):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    @isolate_apps(\"modeladmin\")\n+    def assertGeneratedDateTimeFieldIsValid(self, *, db_persist):\n+        class TestModel(Model):\n+            date = models.DateTimeField()\n+            date_copy = models.GeneratedField(\n+                expression=F(\"date\"),\n+                output_field=models.DateTimeField(),\n+                db_persist=db_persist,\n+            )\n+\n+        class TestModelAdmin(ModelAdmin):\n+            date_hierarchy = \"date_copy\"\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_valid_case_stored_generated_field(self):\n+        self.assertGeneratedDateTimeFieldIsValid(db_persist=True)\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_valid_case_virtual_generated_field(self):\n+        self.assertGeneratedDateTimeFieldIsValid(db_persist=False)\n+\n     def test_field_attname(self):\n         class TestModelAdmin(ModelAdmin):\n             raw_id_fields = [\"band_id\"]\n@@ -1029,6 +1053,33 @@ class TestModelAdmin(ModelAdmin):\n             \"admin.E128\",\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def assertGeneratedIntegerFieldIsInvalid(self, *, db_persist):\n+        class TestModel(Model):\n+            generated = models.GeneratedField(\n+                expression=models.Value(1),\n+                output_field=models.IntegerField(),\n+                db_persist=db_persist,\n+            )\n+\n+        class TestModelAdmin(ModelAdmin):\n+            date_hierarchy = \"generated\"\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin,\n+            TestModel,\n+            \"The value of 'date_hierarchy' must be a DateField or DateTimeField.\",\n+            \"admin.E128\",\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_related_invalid_field_type_stored_generated_field(self):\n+        self.assertGeneratedIntegerFieldIsInvalid(db_persist=True)\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_related_invalid_field_type_virtual_generated_field(self):\n+        self.assertGeneratedIntegerFieldIsInvalid(db_persist=False)\n+\n     def test_valid_case(self):\n         class TestModelAdmin(ModelAdmin):\n             date_hierarchy = \"pub_date\"\n", "problem_statement": "date_hierarchy doesn't support GenerateField with output_field set to DateTimeField or DateField\nDescription\n\t\t\n(last modified by john-parton)\t\t\nIf you have a GeneratedField with output_field set to DateField or DateTimeField, you cannot use it in the admin as a date_hierarchy because of a check. If you skip the check, it actually works just fine in my testing. I believe this the check could be adjusted to account for this.\n# models.py\nclass TestModel(models.Model):\n\tdate_range = DateTimeRangeField(_(\"Date range\"))\n\tstart_date = models.GeneratedField(\n\t\texpression=Lower(\"date_range\"),\n\t\toutput_field=models.DateTimeField(),\n\t\tdb_persist=True,\n\t)\n\t\n \n# admin.py\nclass TestAdmin(admin.ModelAdmin):\n\tdate_hierarchy = \"start_date\"\n\t# Skipping checks actually makes this work exactly correctly\n\tdef check(self, *args, **kwargs):\n\t\treturn ()\nI'll see if I can whip up a patch.\n", "hints_text": [["Initial patch here: \u200bhttps://github.com/django/django/pull/18407 No docs or tests yet.", 1721829596.0]], "created_at": "2024-07-24T18:57:01Z"}
{"repo": "django/django", "pull_number": 18403, "instance_id": "django__django-18403", "issue_numbers": ["35627"], "base_commit": "f359990e4909db8722820849d61a6f5724338723", "patch": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 4439fdad3f3a..1c423304511d 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -517,7 +517,7 @@ def get_supported_language_variant(lang_code, strict=False):\n                 # There is a generic variant under the maximum length accepted length.\n                 lang_code = lang_code[:index]\n             else:\n-                raise ValueError(\"'lang_code' exceeds the maximum accepted length\")\n+                raise LookupError(lang_code)\n         # If 'zh-hant-tw' is not supported, try special fallback or subsequent\n         # language codes i.e. 'zh-hant' and 'zh'.\n         possible_lang_codes = [lang_code]\ndiff --git a/docs/ref/utils.txt b/docs/ref/utils.txt\nindex 65dc9952bcc1..d6c70a9bb016 100644\n--- a/docs/ref/utils.txt\n+++ b/docs/ref/utils.txt\n@@ -1148,7 +1148,7 @@ For a complete discussion on the usage of the following see the\n     ``'es-ar'`` isn't.\n \n     ``lang_code`` has a maximum accepted length of 500 characters. A\n-    :exc:`ValueError` is raised if ``lang_code`` exceeds this limit and\n+    :exc:`LookupError` is raised if ``lang_code`` exceeds this limit and\n     ``strict`` is ``True``, or if there is no generic variant and ``strict``\n     is ``False``.\n \n@@ -1160,10 +1160,10 @@ For a complete discussion on the usage of the following see the\n \n     Raises :exc:`LookupError` if nothing is found.\n \n-    .. versionchanged:: 4.2.14\n+    .. versionchanged:: 4.2.15\n \n         In older versions, ``lang_code`` values over 500 characters were\n-        processed without raising a :exc:`ValueError`.\n+        processed without raising a :exc:`LookupError`.\n \n .. function:: to_locale(language)\n \ndiff --git a/docs/releases/4.2.15.txt b/docs/releases/4.2.15.txt\nnew file mode 100644\nindex 000000000000..a15eced1a331\n--- /dev/null\n+++ b/docs/releases/4.2.15.txt\n@@ -0,0 +1,14 @@\n+===========================\n+Django 4.2.15 release notes\n+===========================\n+\n+*Expected August 6, 2024*\n+\n+Django 4.2.15 fixes a regression in 4.2.14.\n+\n+Bugfixes\n+========\n+\n+* Fixed a regression in Django 4.2.14 that caused a crash in\n+  ``LocaleMiddleware`` when processing a language code over 500 characters\n+  (:ticket:`35627`).\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex 7bdb5488b29b..0f5123f68ff1 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -19,3 +19,7 @@ Bugfixes\n * Fixed a crash when creating a model with a ``Field.db_default`` and a\n   ``Meta.constraints`` constraint composed of ``__endswith``, ``__startswith``,\n   or ``__contains`` lookups (:ticket:`35625`).\n+\n+* Fixed a regression in Django 5.0.7 that caused a crash in\n+  ``LocaleMiddleware`` when processing a language code over 500 characters\n+  (:ticket:`35627`).\ndiff --git a/docs/releases/index.txt b/docs/releases/index.txt\nindex 2ace2b44afbd..bece4a981a0c 100644\n--- a/docs/releases/index.txt\n+++ b/docs/releases/index.txt\n@@ -55,6 +55,7 @@ versions of the documentation contain the release notes for any later releases.\n .. toctree::\n    :maxdepth: 1\n \n+   4.2.15\n    4.2.14\n    4.2.13\n    4.2.12\n", "test_patch": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1bd1dadf936f..8f8a33e5b024 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1673,14 +1673,13 @@ def test_get_supported_language_variant_real(self):\n             g(\"xyz\")\n         with self.assertRaises(LookupError):\n             g(\"xy-zz\")\n-        msg = \"'lang_code' exceeds the maximum accepted length\"\n         with self.assertRaises(LookupError):\n             g(\"x\" * LANGUAGE_CODE_MAX_LENGTH)\n-        with self.assertRaisesMessage(ValueError, msg):\n+        with self.assertRaises(LookupError):\n             g(\"x\" * (LANGUAGE_CODE_MAX_LENGTH + 1))\n         # 167 * 3 = 501 which is LANGUAGE_CODE_MAX_LENGTH + 1.\n         self.assertEqual(g(\"en-\" * 167), \"en\")\n-        with self.assertRaisesMessage(ValueError, msg):\n+        with self.assertRaises(LookupError):\n             g(\"en-\" * 167, strict=True)\n         self.assertEqual(g(\"en-\" * 30000), \"en\")  # catastrophic test\n \n@@ -1734,6 +1733,7 @@ def test_get_language_from_path_real(self):\n             (\"/i-mingo/\", \"i-mingo\"),\n             (\"/kl-tunumiit/\", \"kl-tunumiit\"),\n             (\"/nan-hani-tw/\", \"nan-hani-tw\"),\n+            (f\"/{'a' * 501}/\", None),\n         ]\n         for path, language in tests:\n             with self.subTest(path=path):\n@@ -2009,6 +2009,11 @@ def test_get_language_from_request(self):\n         lang = get_language_from_request(request)\n         self.assertEqual(\"bg\", lang)\n \n+    def test_get_language_from_request_code_too_long(self):\n+        request = self.rf.get(\"/\", headers={\"accept-language\": \"a\" * 501})\n+        lang = get_language_from_request(request)\n+        self.assertEqual(\"en-us\", lang)\n+\n     def test_get_language_from_request_null(self):\n         lang = trans_null.get_language_from_request(None)\n         self.assertEqual(lang, \"en\")\n", "problem_statement": "LocaleMiddleware does not handle ValueError 'lang_code' exceeds the maximum accepted length\nDescription\n\t \nTry any Django powered site where LocaleMiddleware is enanled and visit domain.com/aaaaaaaaaaa.... (where there are 1000 'a'). \nThis line kicks in: \u200bhttps://github.com/django/django/blob/main/django/utils/translation/trans_real.py#L520\nI think the outcome should be a 404 instead of raising ValueError all the way up.\n", "hints_text": [["Regression in 9e9792228a6bb5d6402a5d645bc3be4cf364aefb Perhaps we should raise a LookupError rather than a ValueError, I believe this needs backporting to 4.2, 5.0, 5.1", 1721709979.0], ["I'd be happy to break the ice with Django contributions with this one, if possible. In the PR I am catching both ValueError and LookupError in the callers. I am happy to also raise LookupError instead and not modify anything else.", 1721711536.0], ["\u200bhttps://github.com/django/django/pull/18403", 1721711589.0]], "created_at": "2024-07-23T08:54:19Z"}
{"repo": "django/django", "pull_number": 18401, "instance_id": "django__django-18401", "issue_numbers": ["35625"], "base_commit": "8d6a20b656ff3fa18e36954668a44a831c2f6ddd", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex e5f28d9c6adc..3e38c56d50d4 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -164,7 +164,7 @@ def __enter__(self):\n     def __exit__(self, exc_type, exc_value, traceback):\n         if exc_type is None:\n             for sql in self.deferred_sql:\n-                self.execute(sql)\n+                self.execute(sql, None)\n         if self.atomic_migration:\n             self.atomic.__exit__(exc_type, exc_value, traceback)\n \n@@ -265,16 +265,29 @@ def table_sql(self, model):\n                 )\n                 if autoinc_sql:\n                     self.deferred_sql.extend(autoinc_sql)\n-        constraints = [\n-            constraint.constraint_sql(model, self)\n-            for constraint in model._meta.constraints\n-        ]\n+        # The BaseConstraint DDL creation methods such as constraint_sql(),\n+        # create_sql(), and delete_sql(), were not designed in a way that\n+        # separate SQL from parameters which make their generated SQL unfit to\n+        # be used in a context where parametrization is delegated to the\n+        # backend.\n+        constraint_sqls = []\n+        if params:\n+            # If parameters are present (e.g. a DEFAULT clause on backends that\n+            # allow parametrization) defer constraint creation so they are not\n+            # mixed with SQL meant to be parametrized.\n+            for constraint in model._meta.constraints:\n+                self.deferred_sql.append(constraint.create_sql(model, self))\n+        else:\n+            constraint_sqls.extend(\n+                constraint.constraint_sql(model, self)\n+                for constraint in model._meta.constraints\n+            )\n         sql = self.sql_create_table % {\n             \"table\": self.quote_name(model._meta.db_table),\n             \"definition\": \", \".join(\n-                str(constraint)\n-                for constraint in (*column_sqls, *constraints)\n-                if constraint\n+                str(statement)\n+                for statement in (*column_sqls, *constraint_sqls)\n+                if statement\n             ),\n         }\n         if model._meta.db_tablespace:\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex 1037b78f757a..7bdb5488b29b 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -15,3 +15,7 @@ Bugfixes\n * Fixed a regression in Django 5.0 where ``ModelAdmin.action_checkbox`` could\n   break the admin changelist HTML page when rendering a model instance with a\n   ``__html__`` method (:ticket:`35606`).\n+\n+* Fixed a crash when creating a model with a ``Field.db_default`` and a\n+  ``Meta.constraints`` constraint composed of ``__endswith``, ``__startswith``,\n+  or ``__contains`` lookups (:ticket:`35625`).\n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex f86550082995..3ac813b899b7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -4107,6 +4107,64 @@ def test_add_constraint(self):\n             definition[2], {\"model_name\": \"Pony\", \"constraint\": gt_constraint}\n         )\n \n+    @skipUnlessDBFeature(\"supports_table_check_constraints\")\n+    def test_create_model_constraint_percent_escaping(self):\n+        app_label = \"add_constraint_string_quoting\"\n+        from_state = ProjectState()\n+        checks = [\n+            # \"%\" generated in startswith lookup should be escaped in a way\n+            # that is considered a leading wildcard.\n+            (\n+                models.Q(name__startswith=\"Albert\"),\n+                {\"name\": \"Alberta\"},\n+                {\"name\": \"Artur\"},\n+            ),\n+            # Literal \"%\" should be escaped in a way that is not a considered a\n+            # wildcard.\n+            (models.Q(rebate__endswith=\"%\"), {\"rebate\": \"10%\"}, {\"rebate\": \"10%$\"}),\n+            # Right-hand-side baked \"%\" literals should not be used for\n+            # parameters interpolation.\n+            (\n+                ~models.Q(surname__startswith=models.F(\"name\")),\n+                {\"name\": \"Albert\"},\n+                {\"name\": \"Albert\", \"surname\": \"Alberto\"},\n+            ),\n+            # Exact matches against \"%\" literals should also be supported.\n+            (\n+                models.Q(name=\"%\"),\n+                {\"name\": \"%\"},\n+                {\"name\": \"Albert\"},\n+            ),\n+        ]\n+        for check, valid, invalid in checks:\n+            with self.subTest(condition=check, valid=valid, invalid=invalid):\n+                constraint = models.CheckConstraint(condition=check, name=\"constraint\")\n+                operation = migrations.CreateModel(\n+                    \"Author\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=100)),\n+                        (\"surname\", models.CharField(max_length=100, db_default=\"\")),\n+                        (\"rebate\", models.CharField(max_length=100)),\n+                    ],\n+                    options={\"constraints\": [constraint]},\n+                )\n+                to_state = from_state.clone()\n+                operation.state_forwards(app_label, to_state)\n+                with connection.schema_editor() as editor:\n+                    operation.database_forwards(app_label, editor, from_state, to_state)\n+                Author = to_state.apps.get_model(app_label, \"Author\")\n+                try:\n+                    with transaction.atomic():\n+                        Author.objects.create(**valid).delete()\n+                    with self.assertRaises(IntegrityError), transaction.atomic():\n+                        Author.objects.create(**invalid)\n+                finally:\n+                    with connection.schema_editor() as editor:\n+                        migrations.DeleteModel(\"Author\").database_forwards(\n+                            app_label, editor, to_state, from_state\n+                        )\n+\n     @skipUnlessDBFeature(\"supports_table_check_constraints\")\n     def test_add_constraint_percent_escaping(self):\n         app_label = \"add_constraint_string_quoting\"\n", "problem_statement": "ProgrammingError with Postgres backend when setting db_default and constraint using the LIKE operator\nDescription\n\t \nA ProgrammingError is raised when declaring a model with a field using db_default and a constraint such as field__startswith when the database backend is postgres.\nExample:\n# models.py\nclass MyFoo(models.Model):\n\tname = models.CharField(default=\"\", db_default=\"\", max_length=255)\n\tclass Meta:\n\t\tconstraints = [\n\t\t\tmodels.CheckConstraint(\n\t\t\t\tcheck=models.Q(name__startswith=\"foo\"),\n\t\t\t\tname=\"name_startswith_foo\"\n\t\t\t)\n\t\t]\n# migrations/0002_my_migration.py\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t('my_app', '0001_initial'),\n\t]\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname='MyFoo',\n\t\t\tfields=[\n\t\t\t\t('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n\t\t\t\t('name', models.CharField(default='', db_default='', max_length=255)),\n\t\t\t],\n\t\t\toptions={\n\t\t\t\t\"constraints\": [\n\t\t\t\t\tmodels.CheckConstraint(check=models.Q(('name__startswith', 'foo')), name='name_startswith_foo')\n\t\t\t\t]\n\t\t\t}\n\t\t),\n\t]\nThen if you run sqlmigrate:\n$ python manage.py sqlmigrate my_app 0001\nTraceback (most recent call last):\n File \"/app/manage.py\", line 23, in <module>\n\tmain()\n File \"/app/manage.py\", line 19, in main\n\texecute_from_command_line(sys.argv)\n File \"/venv/lib/python3.12/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/venv/lib/python3.12/site-packages/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/venv/lib/python3.12/site-packages/django/core/management/base.py\", line 413, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/venv/lib/python3.12/site-packages/django/core/management/commands/sqlmigrate.py\", line 38, in execute\n\treturn super().execute(*args, **options)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/django/core/management/base.py\", line 459, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/django/core/management/commands/sqlmigrate.py\", line 80, in handle\n\tsql_statements = loader.collect_sql(plan)\n\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/django/db/migrations/loader.py\", line 381, in collect_sql\n\tstate = migration.apply(state, schema_editor, collect_sql=True)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/django/db/migrations/migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"/venv/lib/python3.12/site-packages/django/db/migrations/operations/models.py\", line 96, in database_forwards\n\tschema_editor.create_model(model)\n File \"/venv/lib/python3.12/site-packages/django/db/backends/base/schema.py\", line 492, in create_model\n\tself.execute(sql, params or None)\n File \"/venv/lib/python3.12/site-packages/django/db/backends/postgresql/schema.py\", line 46, in execute\n\tsql = self.connection.ops.compose_sql(str(sql), params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/django/db/backends/postgresql/operations.py\", line 195, in compose_sql\n\treturn mogrify(sql, params, self.connection)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/django/db/backends/postgresql/psycopg_any.py\", line 22, in mogrify\n\treturn ClientCursor(cursor.connection).mogrify(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/psycopg/client_cursor.py\", line 45, in mogrify\n\tpgq = self._convert_query(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/psycopg/_cursor_base.py\", line 455, in _convert_query\n\tpgq.convert(query, params)\n File \"/venv/lib/python3.12/site-packages/psycopg/_queries.py\", line 264, in convert\n\t(self.template, self._order, self._parts) = f(bquery, self._encoding)\n\t\t\t\t\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/psycopg/_queries.py\", line 298, in _query2pg_client_nocache\n\tparts = _split_query(query, encoding, collapse_double_percent=False)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/venv/lib/python3.12/site-packages/psycopg/_queries.py\", line 398, in _split_query\n\traise e.ProgrammingError(\npsycopg.ProgrammingError: only '%s', '%b', '%t' are allowed as placeholders, got '%''\nWith pdb, we can see what the SQL query looks like at this stage:\n(Pdb) query\nb'CREATE TABLE \"my_app_myfoo\" (\"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, \"name\" varchar(255) DEFAULT %s NOT NULL, CONSTRAINT \"name_startswit_foo\" CHECK (\"name\"::text LIKE \\'foo%\\'))'\nA similar error happens when using psycopg2 instead of psycopg3. However, everything is fine when using the sqlite backend.\n\u2139\ufe0f This migration is not the one auto-generated by django with the makemigrations command. It is however a valid migration that matches the model definition. This is also the SQL generated when setting up the test database with pytest when running with --no-migrations.\n$ pytest --create-db --no-migrations\n/venv/lib/python3.12/site-packages/pytest_django/plugin.py:532: in _django_db_marker\n\trequest.getfixturevalue(\"_django_db_helper\")\n/venv/lib/python3.12/site-packages/pytest_django/fixtures.py:139: in django_db_setup\n\tdb_cfg = setup_databases(\n/venv/lib/python3.12/site-packages/django/test/utils.py:203: in setup_databases\n\tconnection.creation.create_test_db(\n/venv/lib/python3.12/site-packages/django/db/backends/base/creation.py:78: in create_test_db\n\tcall_command(\n/venv/lib/python3.12/site-packages/django/core/management/__init__.py:194: in call_command\n\treturn command.execute(*args, **defaults)\n/venv/lib/python3.12/site-packages/django/core/management/base.py:459: in execute\n\toutput = self.handle(*args, **options)\n/venv/lib/python3.12/site-packages/pytest_django/fixtures.py:304: in handle\n\treturn super().handle(*args, **kwargs)\n/venv/lib/python3.12/site-packages/django/core/management/base.py:107: in wrapper\n\tres = handle_func(*args, **kwargs)\n/venv/lib/python3.12/site-packages/django/core/management/commands/migrate.py:321: in handle\n\tself.sync_apps(connection, executor.loader.unmigrated_apps)\n/venv/lib/python3.12/site-packages/django/core/management/commands/migrate.py:483: in sync_apps\n\teditor.create_model(model)\n/venv/lib/python3.12/site-packages/django/db/backends/base/schema.py:492: in create_model\n\tself.execute(sql, params or None)\n/venv/lib/python3.12/site-packages/django/db/backends/postgresql/schema.py:46: in execute\n\tsql = self.connection.ops.compose_sql(str(sql), params)\n/venv/lib/python3.12/site-packages/django/db/backends/postgresql/operations.py:195: in compose_sql\n\treturn mogrify(sql, params, self.connection)\n/venv/lib/python3.12/site-packages/django/db/backends/postgresql/psycopg_any.py:22: in mogrify\n\treturn ClientCursor(cursor.connection).mogrify(sql, params)\n/venv/lib/python3.12/site-packages/psycopg/client_cursor.py:45: in mogrify\n\tpgq = self._convert_query(query, params)\n/venv/lib/python3.12/site-packages/psycopg/_cursor_base.py:455: in _convert_query\n\tpgq.convert(query, params)\n/venv/lib/python3.12/site-packages/psycopg/_queries.py:264: in convert\n\t(self.template, self._order, self._parts) = f(bquery, self._encoding)\n/venv/lib/python3.12/site-packages/psycopg/_queries.py:298: in _query2pg_client_nocache\n\tparts = _split_query(query, encoding, collapse_double_percent=False)\npsycopg.ProgrammingError: only '%s', '%b', '%t' are allowed as placeholders, got '%''\n", "hints_text": [["Managed to reproduce. The issue is in the same vein as #35336 and the long tail of problems related to improper escaping handling in the schema editor (#30408, #34553, #32369). The big design problem here is that the Constraint.(constraint|create|delete)_sql interface returns sql: str instead of (sql: str, params: tuple) to the schema editor which has no other choice not to use backend bindings (passing (sql, None) to cursor.execute) but it decides to do so when requires_literal_defaults = False (PostgresSQL, MySQL) for DEFAULT. In other words, unless we change Constraint and Index to return un-parametrized SQL we cannot use parametrized SQL when performing any operation that involve them. I think we should mark this one as a release blocker because db_default was added in 5.0 and the latter still receives patches for bugs in new features until 5.1 is released? I'll try to work on a non-invasive patch that disable backend parametrization attempts entirely so it can possibly be backported and likely create another issue to discuss switching the whole DDL generation machinery to provide (sql: str, params: tuple) and let the schema editor decide how it wants to deal with parametrization (use it on Postgres + MySQL) and rely on quote_value otherwise through a single supports_parametrized_ddl feature flag.", 1721661013.0]], "created_at": "2024-07-23T04:48:41Z"}
{"repo": "django/django", "pull_number": 18399, "instance_id": "django__django-18399", "issue_numbers": ["35622"], "base_commit": "e1606d27b4fed653c80817f3a13cf8bc6f3163f0", "patch": "diff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 92bb501d61cb..5732a5473c7e 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -240,7 +240,9 @@ Templates\n Tests\n ~~~~~\n \n-* ...\n+* Stack frames from Django's custom assertions are now hidden. This makes test\n+  failures easier to read and enables :option:`test --pdb` to directly enter\n+  into the failing test method.\n \n URLs\n ~~~~\n", "test_patch": "diff --git a/django/contrib/admin/tests.py b/django/contrib/admin/tests.py\nindex dc857055b117..3810c359e59f 100644\n--- a/django/contrib/admin/tests.py\n+++ b/django/contrib/admin/tests.py\n@@ -6,6 +6,9 @@\n from django.utils.deprecation import MiddlewareMixin\n from django.utils.translation import gettext as _\n \n+# Make unittest ignore frames in this module when reporting failures.\n+__unittest = True\n+\n \n class CSPMiddleware(MiddlewareMixin):\n     \"\"\"The admin's JavaScript should be compatible with CSP.\"\"\"\ndiff --git a/django/contrib/messages/test.py b/django/contrib/messages/test.py\nindex 3a69f54585ed..9f3e1bf0bcb0 100644\n--- a/django/contrib/messages/test.py\n+++ b/django/contrib/messages/test.py\n@@ -1,5 +1,8 @@\n from .api import get_messages\n \n+# Make unittest ignore frames in this module when reporting failures.\n+__unittest = True\n+\n \n class MessagesTestMixin:\n     def assertMessages(self, response, expected_messages, *, ordered=True):\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 6027332cd547..cd7e7b45d685 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -67,6 +67,9 @@\n     \"skipUnlessDBFeature\",\n )\n \n+# Make unittest ignore frames in this module when reporting failures.\n+__unittest = True\n+\n \n if not PY311:\n     # Backport of unittest.case._enter_context() from Python 3.11.\ndiff --git a/tests/messages_tests/tests.py b/tests/messages_tests/tests.py\nindex 19aeee9a08c0..3f5cd56e85e7 100644\n--- a/tests/messages_tests/tests.py\n+++ b/tests/messages_tests/tests.py\n@@ -1,5 +1,7 @@\n import importlib\n import sys\n+import traceback\n+import unittest\n from unittest import mock\n \n from django.conf import settings\n@@ -185,3 +187,17 @@ def test_mismatching_length(self):\n         )\n         with self.assertRaisesMessage(AssertionError, msg):\n             self.assertMessages(response, [])\n+\n+    def test_method_frames_ignored_by_unittest(self):\n+        response = FakeResponse()\n+        try:\n+            self.assertMessages(response, [object()])\n+        except AssertionError:\n+            exc_type, exc, tb = sys.exc_info()\n+\n+        result = unittest.TestResult()\n+        result.addFailure(self, (exc_type, exc, tb))\n+        stack = traceback.extract_tb(exc.__traceback__)\n+        self.assertEqual(len(stack), 1)\n+        # Top element in the stack is this method, not assertMessages.\n+        self.assertEqual(stack[-1].name, \"test_method_frames_ignored_by_unittest\")\ndiff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex cd64c087c43d..60b65e309a31 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1,6 +1,7 @@\n import os\n import sys\n import threading\n+import traceback\n import unittest\n import warnings\n from io import StringIO\n@@ -1113,6 +1114,19 @@ def test_not_equal_parsing_errors(self):\n         with self.assertRaises(AssertionError):\n             self.assertJSONNotEqual(valid_json, invalid_json)\n \n+    def test_method_frames_ignored_by_unittest(self):\n+        try:\n+            self.assertJSONEqual(\"1\", \"2\")\n+        except AssertionError:\n+            exc_type, exc, tb = sys.exc_info()\n+\n+        result = unittest.TestResult()\n+        result.addFailure(self, (exc_type, exc, tb))\n+        stack = traceback.extract_tb(exc.__traceback__)\n+        self.assertEqual(len(stack), 1)\n+        # Top element in the stack is this method, not assertJSONEqual.\n+        self.assertEqual(stack[-1].name, \"test_method_frames_ignored_by_unittest\")\n+\n \n class XMLEqualTests(SimpleTestCase):\n     def test_simple_equal(self):\n", "problem_statement": "Make unittest ignore Django frames in tracebacks\nDescription\n\t \nMake unittest ignore Django frames in tracebacks\nThe module containing Django\u2019s custom assert methods (django.test.testcases) does not have the __unittest attribute. This makes unit test unnecessarily display frames in those methods when tests fail, and opens the debugger there when using --pdb.\nunittest ignores stack frames in modules with __unittest defined (\u200bsource, \u200bexample). If add this in django.test.testcases, we get the same behaviour.\nTake these two failing tests:\nfrom django.test import SimpleTestCase\nclass ExampleTests(SimpleTestCase):\n\tdef test_1_unittest_assert(self):\n\t\tx = 0\n\t\tself.assertTrue(x)\n\tdef test_2_django_assert(self):\n\t\ty = \"[]\"\n\t\tself.assertJSONEqual(\"{}\", y)\nRunning them gives:\n./manage.py test\nFound 2 test(s).\nSystem check identified no issues (0 silenced).\nFF\n======================================================================\nFAIL: test_1_unittest_assert (example.tests.ExampleTests.test_1_unittest_assert)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/.../example/tests.py\", line 7, in test_1_unittest_assert\n\tself.assertTrue(x)\nAssertionError: 0 is not true\n======================================================================\nFAIL: test_2_django_assert (example.tests.ExampleTests.test_2_django_assert)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/.../example/tests.py\", line 11, in test_2_django_assert\n\tself.assertJSONEqual(\"{}\", y)\n File \"/.../django/test/testcases.py\", line 1020, in assertJSONEqual\n\tself.assertEqual(data, expected_data, msg=msg)\nAssertionError: {} != []\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\nFAILED (failures=2)\nNotice how the only frame shown for test_1_unittest_assert is in the test itself, whilst test_2_django_assert contains the frame from within Django. This is useless noise for the user, which is why unittest hides its own frames\nAlso, when running tests with --pdb, pdb opens within the test for test_1_unittest_assert.\nWe can run x to check the value of variable x and c to continue:\n$ ./manage.py test --pdb\nFound 2 test(s).\nSystem check identified no issues (0 silenced).\nF\nOpening PDB: AssertionError('0 is not true')\n> /.../example/tests.py(7)test_1_unittest_assert()\n-> self.assertTrue(x)\n(Pdb) x\n0\n(Pdb) c\nBut in test_2_django_assert, pdb opens within the assertJSONEqual method.\nWe need to run u (up) to traverse the stack to the test method before we can do any meaningful debugging.\n(Some assert methods require multiple u commands.)\nF\nOpening PDB: AssertionError('{} != []')\n> /.../django/test/testcases.py(1020)assertJSONEqual()\n-> self.assertEqual(data, expected_data, msg=msg)\n(Pdb) u\n> /.../example/tests.py(11)test_2_django_assert()\n-> self.assertJSONEqual(\"{}\", y)\n(Pdb) y\n'[]'\n(Pdb) c\n", "hints_text": [], "created_at": "2024-07-22T10:14:14Z"}
{"repo": "django/django", "pull_number": 18384, "instance_id": "django__django-18384", "issue_numbers": ["35614"], "base_commit": "9cb8baa0c4fa2c10789c5c8b65f4465932d4d172", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 262d722dc1d8..1d426f49b6d2 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1616,14 +1616,15 @@ def execute_sql(\n     def as_subquery_condition(self, alias, columns, compiler):\n         qn = compiler.quote_name_unless_alias\n         qn2 = self.connection.ops.quote_name\n+        query = self.query.clone()\n \n-        for index, select_col in enumerate(self.query.select):\n+        for index, select_col in enumerate(query.select):\n             lhs_sql, lhs_params = self.compile(select_col)\n             rhs = \"%s.%s\" % (qn(alias), qn2(columns[index]))\n-            self.query.where.add(RawSQL(\"%s = %s\" % (lhs_sql, rhs), lhs_params), AND)\n+            query.where.add(RawSQL(\"%s = %s\" % (lhs_sql, rhs), lhs_params), AND)\n \n-        sql, params = self.as_sql()\n-        return \"EXISTS (%s)\" % sql, params\n+        sql, params = query.as_sql(compiler, self.connection)\n+        return \"EXISTS %s\" % sql, params\n \n     def explain_query(self):\n         result = list(self.execute_sql())\n", "test_patch": "diff --git a/tests/foreign_object/tests.py b/tests/foreign_object/tests.py\nindex c9e8da579239..2d3aa800f75b 100644\n--- a/tests/foreign_object/tests.py\n+++ b/tests/foreign_object/tests.py\n@@ -223,6 +223,13 @@ def test_double_nested_query(self):\n             [m2],\n         )\n \n+    def test_query_does_not_mutate(self):\n+        \"\"\"\n+        Recompiling the same subquery doesn't mutate it.\n+        \"\"\"\n+        queryset = Friendship.objects.filter(to_friend__in=Person.objects.all())\n+        self.assertEqual(str(queryset.query), str(queryset.query))\n+\n     def test_select_related_foreignkey_forward_works(self):\n         Membership.objects.create(\n             membership_country=self.usa, person=self.bob, group=self.cia\n", "problem_statement": "SQLCompiler.as_subquery_condition shouldn't modify the query object\nDescription\n\t\t\n(last modified by Csirmaz Bendeg\u00faz)\t\t\nSQLCompiler.as_subquery_condition modifies the query object.\n\u200bdjango/db/models/sql/compiler.py#L1619\nself.query.where.add(RawSQL(\"%s = %s\" % (lhs_sql, rhs), lhs_params), AND)\nThis is unfortunate, because whenever the query is re-compiled, it adds another condition.\nI noticed the issue when inspecting .query on a queryset. Each time I accessed .query, a new condition appeared.\nAn example queryset can be found in test MultiColumnFKTests.test_double_nested_query.\n", "hints_text": [], "created_at": "2024-07-18T10:34:39Z"}
{"repo": "django/django", "pull_number": 18380, "instance_id": "django__django-18380", "issue_numbers": ["35603"], "base_commit": "0e49a8c3bd9119795525d9f076f73740741479b7", "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex dcba973ff48b..ffb9f3c816c4 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -884,6 +884,11 @@ def __repr__(self):\n     def __getitem__(self, subscript):\n         return Sliced(self, subscript)\n \n+    def __contains__(self, other):\n+        # Disable old-style iteration protocol inherited from implementing\n+        # __getitem__() to prevent this method from hanging.\n+        raise TypeError(f\"argument of type '{self.__class__.__name__}' is not iterable\")\n+\n     def resolve_expression(\n         self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False\n     ):\n", "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 353890009201..64103f14db92 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1302,6 +1302,11 @@ def test_not_equal_Value(self):\n         self.assertNotEqual(f, value)\n         self.assertNotEqual(value, f)\n \n+    def test_contains(self):\n+        msg = \"argument of type 'F' is not iterable\"\n+        with self.assertRaisesMessage(TypeError, msg):\n+            \"\" in F(\"name\")\n+\n \n class ExpressionsTests(TestCase):\n     def test_F_reuse(self):\n", "problem_statement": "\"string\" in F(\"...\") hangs\nDescription\n\t \nPrior to 94b6f101f7dc363a8e71593570b17527dbb9f77f, this test passes:\ntests/expressions/tests.py\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex cbb441601c..0600e04e06 100644\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n class FTests(SimpleTestCase):\n\t\t\t \u00a0\n\t\t\t\n12921292\u00a0 \u00a0 \u00a0 \u00a0 self.assertNotEqual(f, value)\n12931293\u00a0 \u00a0 \u00a0 \u00a0 self.assertNotEqual(value, f)\n12941294\n\u00a01295\u00a0 \u00a0 def test_in(self):\n\u00a01296\u00a0 \u00a0 \u00a0 \u00a0 with self.assertRaisesMessage(TypeError, \"argument of type 'F' is not iterable\"):\n\u00a01297\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"foo\" in F(\"name\")\n\u00a01298\n12951299\n12961300class ExpressionsTests(TestCase):\n12971301\u00a0 \u00a0 def test_F_reuse(self):\nAfterward, it hangs indefinitely.\n", "hints_text": [["The issue lies in implementing __getitem__ without implementing __contains__, per \u200bthe Python docs For objects that don\u2019t define __contains__(), the membership test first tries iteration via __iter__(), then the old sequence iteration protocol via __getitem__(), see \u200bthis section in the language reference. Basically what \"foo\" in F(\"name\") translates to is the following old-style iteration protocol Lastly, the old-style iteration protocol is tried: if a class defines __getitem__(), x in y is True if and only if there is a non-negative integer index i such that x is y[i] or x == y[i], and no lower integer index raises the IndexError exception. def __contains__(self, value): index = 0 while True: try: item = self.__getitem__(index) except IndexError: return False if item is value or item == value: return True index += 1 which explains why it hangs indefinitely. Implementing __contains__ resolves the issue django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index dcba973ff4..0e4d259fa3 100644 a b def __repr__(self): 884884 def __getitem__(self, subscript): 885885 return Sliced(self, subscript) 886886 887 def __contains__(self, other): 888 return False 889 887890 def resolve_expression( 888891 self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False 889892 ):", 1721079626.0], ["Simon, do you think it's better to return False than the old behavior of raising an exception saying that F isn't iterable? The code where I encountered this is: if LOOKUP_SEP in self.query.order_by: raise NotSupportedError(\"Ordering can't span tables.\") This naive implementation doesn't account for F objects in ordering. If we change the behavior to return False, my code will crash a bit later. That doesn't matter since this problem needs to be fixed eventually, but I tend to think continuing to raise an exception in F.__contains__() would be fine since it doesn't have any meaning.", 1721225210.0], ["Tim, given we don't actually support it I think raising a TypeError might effectively be more appropriate. I tried skimming the Python docs to understand if doing so would be against any established protocol and I couldn't find anything we'd be in violation of. To make sure we're aligned, you were thinking of something like django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index dcba973ff4..1d16781959 100644 a b def __repr__(self): 884884 def __getitem__(self, subscript): 885885 return Sliced(self, subscript) 886886 887 def __contains__(self, other): 888 # Disable old-style iteration protocol inherited from implementing 889 # `__getitem__` for slicing to prevent containment checks from hanging. 890 raise TypeError(f\"argument of type '{self.__class__.__name__}' is not iterable\") 891 887892 def resolve_expression( 888893 self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False 889894 ):", 1721227918.0], ["\u200bPR. LGTM!", 1721237091.0], ["Lufafa, we appreciate your interesting in contributing code to Django but please ask before jumping on assigning tickets to yourself when an active discussion is taking place.", 1721238756.0]], "created_at": "2024-07-17T22:21:34Z"}
{"repo": "django/django", "pull_number": 18377, "instance_id": "django__django-18377", "issue_numbers": ["35598"], "base_commit": "3f880890699d4412cf23b59dba425111f62afb3a", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 6e54cc1ea69d..ca14052f5dd5 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -494,6 +494,7 @@ answer newbie questions, and generally made Django that much better:\n     Jeremy Carbaugh <jcarbaugh@gmail.com>\n     Jeremy Dunck <jdunck@gmail.com>\n     Jeremy Lain\u00e9 <jeremy.laine@m4x.org>\n+    Jeremy Thompson <https://jhthompson.ca>\n     Jerin Peter George <jerinpetergeorge@gmail.com>\n     Jesse Young <adunar@gmail.com>\n     Jezeniel Zapanta <jezeniel.zapanta@gmail.com>\ndiff --git a/django/forms/jinja2/django/forms/widgets/search.html b/django/forms/jinja2/django/forms/widgets/search.html\nnew file mode 100644\nindex 000000000000..08b1e61c0b0d\n--- /dev/null\n+++ b/django/forms/jinja2/django/forms/widgets/search.html\n@@ -0,0 +1,1 @@\n+{% include \"django/forms/widgets/input.html\" %}\ndiff --git a/django/forms/templates/django/forms/widgets/search.html b/django/forms/templates/django/forms/widgets/search.html\nnew file mode 100644\nindex 000000000000..08b1e61c0b0d\n--- /dev/null\n+++ b/django/forms/templates/django/forms/widgets/search.html\n@@ -0,0 +1,1 @@\n+{% include \"django/forms/widgets/input.html\" %}\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 4fae110d5ed8..e7717c2ff60f 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -30,6 +30,7 @@\n     \"NumberInput\",\n     \"EmailInput\",\n     \"URLInput\",\n+    \"SearchInput\",\n     \"PasswordInput\",\n     \"HiddenInput\",\n     \"MultipleHiddenInput\",\n@@ -353,6 +354,11 @@ class URLInput(Input):\n     template_name = \"django/forms/widgets/url.html\"\n \n \n+class SearchInput(Input):\n+    input_type = \"search\"\n+    template_name = \"django/forms/widgets/search.html\"\n+\n+\n class PasswordInput(Input):\n     input_type = \"password\"\n     template_name = \"django/forms/widgets/password.html\"\ndiff --git a/docs/ref/forms/widgets.txt b/docs/ref/forms/widgets.txt\nindex f76759b25454..1a868c32faa0 100644\n--- a/docs/ref/forms/widgets.txt\n+++ b/docs/ref/forms/widgets.txt\n@@ -558,6 +558,17 @@ These widgets make use of the HTML elements ``input`` and ``textarea``.\n     * ``template_name``: ``'django/forms/widgets/url.html'``\n     * Renders as: ``<input type=\"url\" ...>``\n \n+``SearchInput``\n+~~~~~~~~~~~~~~~\n+\n+.. versionadded:: 5.2\n+\n+.. class:: SearchInput\n+\n+    * ``input_type``: ``'search'``\n+    * ``template_name``: ``'django/forms/widgets/search.html'``\n+    * Renders as: ``<input type=\"search\" ...>``\n+\n ``PasswordInput``\n ~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 5d5887fe34a3..ba9a3dfd4c5c 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -165,7 +165,8 @@ File Uploads\n Forms\n ~~~~~\n \n-* ...\n+* The new :class:`~django.forms.SearchInput` form widget is for entering search\n+  queries and renders as ``<input type=\"search\" ...>``.\n \n Generic Views\n ~~~~~~~~~~~~~\n", "test_patch": "diff --git a/tests/forms_tests/widget_tests/test_searchinput.py b/tests/forms_tests/widget_tests/test_searchinput.py\nnew file mode 100644\nindex 000000000000..b11ffaaa8248\n--- /dev/null\n+++ b/tests/forms_tests/widget_tests/test_searchinput.py\n@@ -0,0 +1,12 @@\n+from django.forms import SearchInput\n+\n+from .base import WidgetTest\n+\n+\n+class SearchInputTest(WidgetTest):\n+    widget = SearchInput()\n+\n+    def test_render(self):\n+        self.check_html(\n+            self.widget, \"search\", \"\", html='<input type=\"search\" name=\"search\">'\n+        )\n", "problem_statement": "Add SearchInput widget\nDescription\n\t \n\u200bRelevant forum discussion \nAdd a SearchInput widget that would render as\n<input type=\"search\" ...>\n", "hints_text": [["PR here: \u200bhttps://github.com/django/django/pull/18377", 1721214300.0]], "created_at": "2024-07-17T15:57:03Z"}
{"repo": "django/django", "pull_number": 18376, "instance_id": "django__django-18376", "issue_numbers": ["35594"], "base_commit": "5dc17177c38662d6f4408258ee117cd80e0cb933", "patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 3e6c5205c696..0a63e38d8365 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -8,7 +8,7 @@\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.expressions import Exists, ExpressionList, F, RawSQL\n from django.db.models.indexes import IndexExpression\n-from django.db.models.lookups import Exact\n+from django.db.models.lookups import Exact, IsNull\n from django.db.models.query_utils import Q\n from django.db.models.sql.query import Query\n from django.db.utils import DEFAULT_DB_ALIAS\n@@ -642,30 +642,31 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n                     meta=model._meta, exclude=exclude\n                 ).items()\n             }\n-            expressions = []\n+            filters = []\n             for expr in self.expressions:\n                 if hasattr(expr, \"get_expression_for_validation\"):\n                     expr = expr.get_expression_for_validation()\n-                expressions.append(Exact(expr, expr.replace_expressions(replacements)))\n-            queryset = queryset.filter(*expressions)\n+                rhs = expr.replace_expressions(replacements)\n+                condition = Exact(expr, rhs)\n+                if self.nulls_distinct is False:\n+                    condition = Q(condition) | Q(IsNull(expr, True), IsNull(rhs, True))\n+                filters.append(condition)\n+            queryset = queryset.filter(*filters)\n         model_class_pk = instance._get_pk_val(model._meta)\n         if not instance._state.adding and model_class_pk is not None:\n             queryset = queryset.exclude(pk=model_class_pk)\n         if not self.condition:\n             if queryset.exists():\n-                if self.expressions:\n+                if self.fields:\n+                    # When fields are defined, use the unique_error_message() for\n+                    # backward compatibility.\n                     raise ValidationError(\n-                        self.get_violation_error_message(),\n-                        code=self.violation_error_code,\n+                        instance.unique_error_message(model, self.fields),\n                     )\n-                # When fields are defined, use the unique_error_message() for\n-                # backward compatibility.\n-                for model, constraints in instance.get_constraints():\n-                    for constraint in constraints:\n-                        if constraint is self:\n-                            raise ValidationError(\n-                                instance.unique_error_message(model, self.fields),\n-                            )\n+                raise ValidationError(\n+                    self.get_violation_error_message(),\n+                    code=self.violation_error_code,\n+                )\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n             try:\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex 1c30ed4766a7..8e072049b2c3 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -9,4 +9,5 @@ Django 5.0.8 fixes several bugs in 5.0.7.\n Bugfixes\n ========\n \n-* ...\n+* Added missing validation for ``UniqueConstraint(nulls_distinct=False)`` when\n+  using ``*expressions`` (:ticket:`35594`).\n", "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 86efaa79e706..31c5d646523b 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -4,7 +4,7 @@\n from django.db import IntegrityError, connection, models\n from django.db.models import F\n from django.db.models.constraints import BaseConstraint, UniqueConstraint\n-from django.db.models.functions import Lower\n+from django.db.models.functions import Abs, Lower\n from django.db.transaction import atomic\n from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import ignore_warnings\n@@ -896,6 +896,13 @@ def test_validate(self):\n                 ChildUniqueConstraintProduct(name=self.p1.name, color=self.p1.color),\n             )\n \n+    def test_validate_fields_unattached(self):\n+        Product.objects.create(price=42)\n+        constraint = models.UniqueConstraint(fields=[\"price\"], name=\"uniq_prices\")\n+        msg = \"Product with this Price already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(Product, Product(price=42))\n+\n     @skipUnlessDBFeature(\"supports_partial_indexes\")\n     def test_validate_condition(self):\n         p1 = UniqueConstraintConditionProduct.objects.create(name=\"p1\")\n@@ -921,7 +928,7 @@ def test_validate_condition(self):\n         )\n \n     @skipUnlessDBFeature(\"supports_partial_indexes\")\n-    def test_validate_conditon_custom_error(self):\n+    def test_validate_condition_custom_error(self):\n         p1 = UniqueConstraintConditionProduct.objects.create(name=\"p1\")\n         constraint = models.UniqueConstraint(\n             fields=[\"name\"],\n@@ -1063,6 +1070,32 @@ def test_validate_nullable_textfield_with_isnull_true(self):\n         is_not_null_constraint.validate(Product, Product(price=4, discounted_price=3))\n         is_not_null_constraint.validate(Product, Product(price=2, discounted_price=1))\n \n+    def test_validate_nulls_distinct_fields(self):\n+        Product.objects.create(price=42)\n+        constraint = models.UniqueConstraint(\n+            fields=[\"price\"],\n+            nulls_distinct=False,\n+            name=\"uniq_prices_nulls_distinct\",\n+        )\n+        constraint.validate(Product, Product(price=None))\n+        Product.objects.create(price=None)\n+        msg = \"Product with this Price already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(Product, Product(price=None))\n+\n+    def test_validate_nulls_distinct_expressions(self):\n+        Product.objects.create(price=42)\n+        constraint = models.UniqueConstraint(\n+            Abs(\"price\"),\n+            nulls_distinct=False,\n+            name=\"uniq_prices_nulls_distinct\",\n+        )\n+        constraint.validate(Product, Product(price=None))\n+        Product.objects.create(price=None)\n+        msg = f\"Constraint \u201c{constraint.name}\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(Product, Product(price=None))\n+\n     def test_name(self):\n         constraints = get_constraints(UniqueConstraintProduct._meta.db_table)\n         expected_name = \"name_color_uniq\"\ndiff --git a/tests/validation/models.py b/tests/validation/models.py\nindex f6b1e0cd620d..653be4a239bf 100644\n--- a/tests/validation/models.py\n+++ b/tests/validation/models.py\n@@ -217,17 +217,3 @@ class Meta:\n                 condition=models.Q(color__isnull=True),\n             ),\n         ]\n-\n-\n-class UniqueConstraintNullsDistinctProduct(models.Model):\n-    name = models.CharField(max_length=255, blank=True, null=True)\n-\n-    class Meta:\n-        required_db_features = {\"supports_nulls_distinct_unique_constraints\"}\n-        constraints = [\n-            models.UniqueConstraint(\n-                fields=[\"name\"],\n-                name=\"name_nulls_not_distinct_uniq\",\n-                nulls_distinct=False,\n-            ),\n-        ]\ndiff --git a/tests/validation/test_constraints.py b/tests/validation/test_constraints.py\nindex eea2d0c533cb..0b1ee6518e28 100644\n--- a/tests/validation/test_constraints.py\n+++ b/tests/validation/test_constraints.py\n@@ -6,7 +6,6 @@\n     ChildUniqueConstraintProduct,\n     Product,\n     UniqueConstraintConditionProduct,\n-    UniqueConstraintNullsDistinctProduct,\n     UniqueConstraintProduct,\n )\n \n@@ -94,25 +93,3 @@ def test_full_clean_with_partial_unique_constraints_disabled(self):\n         UniqueConstraintConditionProduct.objects.create(name=\"product\")\n         product = UniqueConstraintConditionProduct(name=\"product\")\n         product.full_clean(validate_constraints=False)\n-\n-    @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n-    def test_full_clean_with_nulls_distinct_unique_constraints(self):\n-        UniqueConstraintNullsDistinctProduct.objects.create(name=None)\n-        product = UniqueConstraintNullsDistinctProduct(name=None)\n-        with self.assertRaises(ValidationError) as cm:\n-            product.full_clean()\n-        self.assertEqual(\n-            cm.exception.message_dict,\n-            {\n-                \"name\": [\n-                    \"Unique constraint nulls distinct product with this Name \"\n-                    \"already exists.\"\n-                ]\n-            },\n-        )\n-\n-    @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n-    def test_full_clean_with_nulls_distinct_unique_constraints_disabled(self):\n-        UniqueConstraintNullsDistinctProduct.objects.create(name=None)\n-        product = UniqueConstraintNullsDistinctProduct(name=None)\n-        product.full_clean(validate_constraints=False)\n", "problem_statement": "Add support for non-distinct NULL expressions to UniqueConstraint.validate()\nDescription\n\t\t\n(last modified by Mark Gensler)\t\t\nExpressions which evaluate to NULL within UniqueConstraint(*expressions, nulls_distinct=False) are still treated as distinct by UniqueConstraint.validate(). This means a ValidationError is not raised when it should be.\nSimilarly, if the database connection uses interprets_empty_strings_as_nulls this is also ignored by .validate().\nShould #35575 be merged, this problem would also extend to any GeneratedField included in UniqueConstraint(fields=[...], nulls_distinct=False).\nE.g.\nclass Book(models.Model):\n\tname = CharField(max_length=255, null=True, blank=True)\n\tclass Meta:\n\t\tconstraints = [\n\t\t\tUniqueConstraint(F(\"name\"), nulls_distinct=False, name=\"book_name_null_unique\")\n\t\t]\nthen\n> Book.objects.create(name=None)\n> book = Book(name=None)\n> book.full_clean() # Should raise a `ValidationError` but doesn't.\n> book.save() # The database raises a `UniqueViolation`.\nThis ticket was raised following discussion in \u200bhttps://github.com/django/django/pull/18356#pullrequestreview-2166340541\n", "hints_text": [["Thanks for creating the report! This was missed in #34701. Elevating to release blocker as this is a bug in a newly released feature. I guess solution would be that when nulls_distinct=False all expressions checks should be turned into OR (rhs IS NULL AND lhs IS NULL) due to \u200bthe lack of general support for the IS DISTINCT FROM operator. SELECT 1 FROM book WHERE lower(name) = lower(NULL) Is turned into SELECT 1 FROM book WHERE (lower(name) = lower(NULL)) OR (lower(name) IS NULL AND lower(NULL) IS NULL)", 1720694292.0], ["Dong it would have been appreciate if you could have chimed in with Mark and myself before jumping on assignment. Worked on a PoC \u200bhere.", 1720699286.0], ["Replying to Simon Charette: Sorry for jumping in without prior discussion. I wasn't aware and will be more cautious in the future.", 1720700405.0], ["No worries and no harm done, I just wanted to make sure you wouldn't waste time on this problem since both Mark and I had a pretty good idea of where to take the patch. I guess a possible rule of thumb would be to at least wait a few days after the creation of a ticket if there seems to be active discussions and no call for someone to take the implementation work. In doubt, asking if help is required is also always welcome.", 1720700564.0], ["Thanks for the guidance. I appreciate the advice and will follow it moving forward.", 1720701170.0]], "created_at": "2024-07-17T09:33:31Z"}
{"repo": "django/django", "pull_number": 18374, "instance_id": "django__django-18374", "issue_numbers": ["35606"], "base_commit": "0e49a8c3bd9119795525d9f076f73740741479b7", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 6e54cc1ea69d..d3942907280f 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -416,6 +416,7 @@ answer newbie questions, and generally made Django that much better:\n     Himanshu Chauhan <hchauhan1404@outlook.com>\n     hipertracker@gmail.com\n     Hiroki Kiyohara <hirokiky@gmail.com>\n+    Hisham Mahmood <hishammahmood41@gmail.com>\n     Honza Kr\u00e1l <honza.kral@gmail.com>\n     Horst Gutmann <zerok@zerokspot.com>\n     Hugo Osvaldo Barrera <hugo@barrera.io>\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex e8760c2931a7..2257b3072ef4 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1026,7 +1026,9 @@ def action_checkbox(self, obj):\n         \"\"\"\n         attrs = {\n             \"class\": \"action-select\",\n-            \"aria-label\": format_html(_(\"Select this object for an action - {}\"), obj),\n+            \"aria-label\": format_html(\n+                _(\"Select this object for an action - {}\"), str(obj)\n+            ),\n         }\n         checkbox = forms.CheckboxInput(attrs, lambda value: False)\n         return checkbox.render(helpers.ACTION_CHECKBOX_NAME, str(obj.pk))\ndiff --git a/docs/releases/5.0.8.txt b/docs/releases/5.0.8.txt\nindex 8e072049b2c3..1037b78f757a 100644\n--- a/docs/releases/5.0.8.txt\n+++ b/docs/releases/5.0.8.txt\n@@ -11,3 +11,7 @@ Bugfixes\n \n * Added missing validation for ``UniqueConstraint(nulls_distinct=False)`` when\n   using ``*expressions`` (:ticket:`35594`).\n+\n+* Fixed a regression in Django 5.0 where ``ModelAdmin.action_checkbox`` could\n+  break the admin changelist HTML page when rendering a model instance with a\n+  ``__html__`` method (:ticket:`35606`).\n", "test_patch": "diff --git a/tests/admin_changelist/models.py b/tests/admin_changelist/models.py\nindex 290a3ea4ec93..78e65ab8782b 100644\n--- a/tests/admin_changelist/models.py\n+++ b/tests/admin_changelist/models.py\n@@ -23,6 +23,12 @@ class GrandChild(models.Model):\n     parent = models.ForeignKey(Child, models.SET_NULL, editable=False, null=True)\n     name = models.CharField(max_length=30, blank=True)\n \n+    def __str__(self):\n+        return self.name\n+\n+    def __html__(self):\n+        return f'<h2 class=\"main\">{self.name}</h2>'\n+\n \n class Genre(models.Model):\n     name = models.CharField(max_length=20)\ndiff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex bf85cf038f86..4d8845e11e5b 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -364,6 +364,33 @@ def test_result_list_html(self):\n             table_output,\n         )\n \n+    def test_action_checkbox_for_model_with_dunder_html(self):\n+        grandchild = GrandChild.objects.create(name=\"name\")\n+        request = self._mocked_authenticated_request(\"/grandchild/\", self.superuser)\n+        m = GrandChildAdmin(GrandChild, custom_site)\n+        cl = m.get_changelist_instance(request)\n+        cl.formset = None\n+        template = Template(\n+            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n+        )\n+        context = Context({\"cl\": cl, \"opts\": GrandChild._meta})\n+        table_output = template.render(context)\n+        link = reverse(\n+            \"admin:admin_changelist_grandchild_change\", args=(grandchild.id,)\n+        )\n+        row_html = build_tbody_html(\n+            grandchild,\n+            link,\n+            \"name\",\n+            '<td class=\"field-parent__name\">-</td>'\n+            '<td class=\"field-parent__parent__name\">-</td>',\n+        )\n+        self.assertNotEqual(\n+            table_output.find(row_html),\n+            -1,\n+            \"Failed to find expected row element: %s\" % table_output,\n+        )\n+\n     def test_result_list_editable_html(self):\n         \"\"\"\n         Regression tests for #11791: Inclusion tag result_list generates a\n", "problem_statement": "Admin changelist broken for model instances with __html__ method\nDescription\n\t \nSince [85366fbca723c9b37d0ac9db1d44e3f1cb188db2] (#34045), any model instance implementing an __html__ method producing HTML markup is breaking the admin, because of the aria-label property will contain unescaped quotes that will break the page HTML.\nMaybe the solution is forcing str(obj) in the format_html call.\n", "hints_text": [["Thank you! Replicated Maybe the solution is forcing str(obj) in the format_html call. I think this works \ud83d\udc4d", 1721105930.0], ["\u200bPR", 1721159188.0]], "created_at": "2024-07-17T00:46:08Z"}
{"repo": "django/django", "pull_number": 18371, "instance_id": "django__django-18371", "issue_numbers": ["35604"], "base_commit": "df35cf578f99522dd1ba864d513be95d47bab7a5", "patch": "diff --git a/django/core/files/storage/base.py b/django/core/files/storage/base.py\nindex 55285bc23a5e..31ecbd209ab9 100644\n--- a/django/core/files/storage/base.py\n+++ b/django/core/files/storage/base.py\n@@ -51,6 +51,10 @@ def save(self, name, content, max_length=None):\n         validate_file_name(name, allow_relative_path=True)\n         return name\n \n+    def is_name_available(self, name, max_length=None):\n+        exceeds_max_length = max_length and len(name) > max_length\n+        return not self.exists(name) and not exceeds_max_length\n+\n     # These methods are part of the public API, with default implementations.\n \n     def get_valid_name(self, name):\n@@ -82,11 +86,11 @@ def get_available_name(self, name, max_length=None):\n         validate_file_name(file_name)\n         file_ext = \"\".join(pathlib.PurePath(file_name).suffixes)\n         file_root = file_name.removesuffix(file_ext)\n-        # If the filename already exists, generate an alternative filename\n-        # until it doesn't exist.\n+        # If the filename is not available, generate an alternative\n+        # filename until one is available.\n         # Truncate original name if required, so the new filename does not\n         # exceed the max_length.\n-        while self.exists(name) or (max_length and len(name) > max_length):\n+        while not self.is_name_available(name, max_length=max_length):\n             # file_ext includes the dot.\n             name = os.path.join(\n                 dir_name, self.get_alternative_name(file_root, file_ext)\ndiff --git a/django/core/files/storage/filesystem.py b/django/core/files/storage/filesystem.py\nindex ed752cc06296..310a0ed0dee8 100644\n--- a/django/core/files/storage/filesystem.py\n+++ b/django/core/files/storage/filesystem.py\n@@ -4,7 +4,6 @@\n from urllib.parse import urljoin\n \n from django.conf import settings\n-from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import File, locks\n from django.core.files.move import file_move_safe\n from django.core.signals import setting_changed\n@@ -192,14 +191,18 @@ def delete(self, name):\n             # concurrently.\n             pass\n \n-    def exists(self, name):\n-        try:\n-            exists = os.path.lexists(self.path(name))\n-        except SuspiciousFileOperation:\n-            raise\n+    def is_name_available(self, name, max_length=None):\n+        if self._allow_overwrite:\n+            return not (max_length and len(name) > max_length)\n+        return super().is_name_available(name, max_length=max_length)\n+\n+    def get_alternative_name(self, file_root, file_ext):\n         if self._allow_overwrite:\n-            return False\n-        return exists\n+            return f\"{file_root}{file_ext}\"\n+        return super().get_alternative_name(file_root, file_ext)\n+\n+    def exists(self, name):\n+        return os.path.lexists(self.path(name))\n \n     def listdir(self, path):\n         path = self.path(path)\ndiff --git a/docs/ref/files/storage.txt b/docs/ref/files/storage.txt\nindex e912bcc4129a..f7c290a15098 100644\n--- a/docs/ref/files/storage.txt\n+++ b/docs/ref/files/storage.txt\n@@ -129,8 +129,7 @@ The ``Storage`` class\n     .. method:: exists(name)\n \n         Returns ``True`` if a file referenced by the given name already exists\n-        in the storage system, or ``False`` if the name is available for a new\n-        file.\n+        in the storage system.\n \n     .. method:: get_accessed_time(name)\n \n", "test_patch": "diff --git a/tests/file_storage/test_generate_filename.py b/tests/file_storage/test_generate_filename.py\nindex 9631705fc8e2..483115e09cc9 100644\n--- a/tests/file_storage/test_generate_filename.py\n+++ b/tests/file_storage/test_generate_filename.py\n@@ -80,11 +80,14 @@ def test_storage_dangerous_paths(self):\n             (\"\", \"\"),\n         ]\n         s = FileSystemStorage()\n+        s_overwrite = FileSystemStorage(allow_overwrite=True)\n         msg = \"Could not derive file name from '%s'\"\n         for file_name, base_name in candidates:\n             with self.subTest(file_name=file_name):\n                 with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n                     s.get_available_name(file_name)\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n+                    s_overwrite.get_available_name(file_name)\n                 with self.assertRaisesMessage(SuspiciousFileOperation, msg % base_name):\n                     s.generate_filename(file_name)\n \n@@ -98,11 +101,14 @@ def test_storage_dangerous_paths_dir_name(self):\n             (\"\\\\tmp\\\\..\\\\path\", \"/tmp/..\"),\n         ]\n         s = FileSystemStorage()\n+        s_overwrite = FileSystemStorage(allow_overwrite=True)\n         for file_name, path in candidates:\n             msg = \"Detected path traversal attempt in '%s'\" % path\n             with self.subTest(file_name=file_name):\n                 with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n                     s.get_available_name(file_name)\n+                with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n+                    s_overwrite.get_available_name(file_name)\n                 with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n                     s.generate_filename(file_name)\n \ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 38d87dc7f2fc..868b18dd2c06 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -95,18 +95,18 @@ def test_file_access_options(self):\n         \"\"\"\n         Standard file access options are available, and work as expected.\n         \"\"\"\n-        self.assertFalse(os.path.exists(os.path.join(self.temp_dir, \"storage_test\")))\n+        self.assertFalse(self.storage.exists(\"storage_test\"))\n         f = self.storage.open(\"storage_test\", \"w\")\n         f.write(\"storage contents\")\n         f.close()\n-        self.assertTrue(os.path.exists(os.path.join(self.temp_dir, \"storage_test\")))\n+        self.assertTrue(self.storage.exists(\"storage_test\"))\n \n         f = self.storage.open(\"storage_test\", \"r\")\n         self.assertEqual(f.read(), \"storage contents\")\n         f.close()\n \n         self.storage.delete(\"storage_test\")\n-        self.assertFalse(os.path.exists(os.path.join(self.temp_dir, \"storage_test\")))\n+        self.assertFalse(self.storage.exists(\"storage_test\"))\n \n     def _test_file_time_getter(self, getter):\n         # Check for correct behavior under both USE_TZ=True and USE_TZ=False.\n@@ -275,10 +275,10 @@ def test_file_save_with_path(self):\n         \"\"\"\n         Saving a pathname should create intermediate directories as necessary.\n         \"\"\"\n-        self.assertFalse(os.path.exists(os.path.join(self.temp_dir, \"path/to\")))\n+        self.assertFalse(self.storage.exists(\"path/to\"))\n         self.storage.save(\"path/to/test.file\", ContentFile(\"file saved with path\"))\n \n-        self.assertTrue(os.path.exists(os.path.join(self.temp_dir, \"path/to\")))\n+        self.assertTrue(self.storage.exists(\"path/to\"))\n         with self.storage.open(\"path/to/test.file\") as f:\n             self.assertEqual(f.read(), b\"file saved with path\")\n \n@@ -692,12 +692,12 @@ def test_save_overwrite_behavior(self):\n         stored_name_1 = self.storage.save(name, f_1)\n         try:\n             self.assertEqual(stored_name_1, name)\n-            self.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+            self.assertTrue(self.storage.exists(name))\n             with self.storage.open(name) as fp:\n                 self.assertEqual(fp.read(), content_1)\n             stored_name_2 = self.storage.save(name, f_2)\n             self.assertEqual(stored_name_2, name)\n-            self.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+            self.assertTrue(self.storage.exists(name))\n             with self.storage.open(name) as fp:\n                 self.assertEqual(fp.read(), content_2)\n         finally:\n@@ -729,6 +729,22 @@ def test_save_overwrite_behavior_temp_file(self):\n         finally:\n             self.storage.delete(name)\n \n+    def test_file_name_truncation(self):\n+        name = \"test_long_file_name.txt\"\n+        file = ContentFile(b\"content\")\n+        stored_name = self.storage.save(name, file, max_length=10)\n+        self.addCleanup(self.storage.delete, stored_name)\n+        self.assertEqual(stored_name, \"test_l.txt\")\n+        self.assertEqual(len(stored_name), 10)\n+\n+    def test_file_name_truncation_extension_too_long(self):\n+        name = \"file_name.longext\"\n+        file = ContentFile(b\"content\")\n+        with self.assertRaisesMessage(\n+            SuspiciousFileOperation, \"Storage can not find an available filename\"\n+        ):\n+            self.storage.save(name, file, max_length=5)\n+\n \n class DiscardingFalseContentStorage(FileSystemStorage):\n     def _save(self, name, content):\n", "problem_statement": "Unexpected behaviour of FileSystemStorage.exists() due to latest changes\nDescription\n\t\t\n(last modified by Stefan Hammer)\t\t\nWith this ticket I would like to vote against the latest changes to FileSystemStorage.exists() with #35326.\nThe very basic file storage operation \"exists\" now returns False, if the option allow_overwrite is set to True, no matter if the file actually exists or not (see \u200bGithub).\nI know, the default behavior is unchanged (allow_overwrite is False by default), but nevertheless the change seems to me more like the easiest option, but not the cleanest for the API. Until now, the API was very self-explanatory.\nThe storages API is perfect due to its simplicity and extensibility, and we're using it extensively due to packages like \u200bdjango-storages. I think we should keep it that simple and rethink the above change of the basic \"exists\" operation, which in my opinion should return exactly that information.\nMaybe we should also adapt the \u200bdocumentation for exists(), as it can be interpreted in multiple ways (see \u200bhere and \u200bhere).\nI probably wouldn't have noticed this change until its occurrence in the next LTS, but (luckily) django-storages has synced the above changes into its latest version, which lead to a bug report with multiple affected people \u200bhere.\n", "hints_text": [["\u200bComment on the issue in django-storages Given the engagement on the discussion around what .exists() should do in the overwrite case, and the recent security patch to Django, it makes sense for FileSystemStorage to also overwrite get_available_name() but leave the existing exists behaviour. This previously was not something we could endorse. A clarification to the FileSystemStorage docs also make sense.", 1721099507.0]], "created_at": "2024-07-16T08:49:00Z"}
{"repo": "django/django", "pull_number": 18356, "instance_id": "django__django-18356", "issue_numbers": ["35575"], "base_commit": "69aa13ffb92f6a7c62661c616a8c7b0f515ea43d", "patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\nindex 2701c4ba4844..49124adc1551 100644\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -183,17 +183,11 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         )\n         replacements = {F(field): value for field, value in replacement_map.items()}\n         lookups = []\n-        for idx, (expression, operator) in enumerate(self.expressions):\n+        for expression, operator in self.expressions:\n             if isinstance(expression, str):\n                 expression = F(expression)\n-            if exclude:\n-                if isinstance(expression, F):\n-                    if expression.name in exclude:\n-                        return\n-                else:\n-                    for expr in expression.flatten():\n-                        if isinstance(expr, F) and expr.name in exclude:\n-                            return\n+            if exclude and self._expression_refs_exclude(model, expression, exclude):\n+                return\n             rhs_expression = expression.replace_expressions(replacements)\n             if hasattr(expression, \"get_expression_for_validation\"):\n                 expression = expression.get_expression_for_validation()\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex d4b8bab96337..a89ceafbefb5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1337,18 +1337,33 @@ def _get_field_expression_map(self, meta, exclude=None):\n         if exclude is None:\n             exclude = set()\n         meta = meta or self._meta\n-        field_map = {\n-            field.name: (\n-                value\n-                if (value := getattr(self, field.attname))\n-                and hasattr(value, \"resolve_expression\")\n-                else Value(value, field)\n-            )\n-            for field in meta.local_concrete_fields\n-            if field.name not in exclude and not field.generated\n-        }\n+        field_map = {}\n+        generated_fields = []\n+        for field in meta.local_concrete_fields:\n+            if field.name in exclude:\n+                continue\n+            if field.generated:\n+                if any(\n+                    ref[0] in exclude\n+                    for ref in self._get_expr_references(field.expression)\n+                ):\n+                    continue\n+                generated_fields.append(field)\n+                continue\n+            value = getattr(self, field.attname)\n+            if not value or not hasattr(value, \"resolve_expression\"):\n+                value = Value(value, field)\n+            field_map[field.name] = value\n         if \"pk\" not in exclude:\n             field_map[\"pk\"] = Value(self.pk, meta.pk)\n+        if generated_fields:\n+            replacements = {F(name): value for name, value in field_map.items()}\n+            for generated_field in generated_fields:\n+                field_map[generated_field.name] = ExpressionWrapper(\n+                    generated_field.expression.replace_expressions(replacements),\n+                    generated_field.output_field,\n+                )\n+\n         return field_map\n \n     def prepare_database_save(self, field):\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 915ace512911..b5952def6abd 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -68,6 +68,19 @@ def create_sql(self, model, schema_editor):\n     def remove_sql(self, model, schema_editor):\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n+    @classmethod\n+    def _expression_refs_exclude(cls, model, expression, exclude):\n+        get_field = model._meta.get_field\n+        for field_name, *__ in model._get_expr_references(expression):\n+            if field_name in exclude:\n+                return True\n+            field = get_field(field_name)\n+            if field.generated and cls._expression_refs_exclude(\n+                model, field.expression, exclude\n+            ):\n+                return True\n+        return False\n+\n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n@@ -606,36 +619,56 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         queryset = model._default_manager.using(using)\n         if self.fields:\n             lookup_kwargs = {}\n+            generated_field_names = []\n             for field_name in self.fields:\n                 if exclude and field_name in exclude:\n                     return\n                 field = model._meta.get_field(field_name)\n-                lookup_value = getattr(instance, field.attname)\n-                if (\n-                    self.nulls_distinct is not False\n-                    and lookup_value is None\n-                    or (\n-                        lookup_value == \"\"\n-                        and connections[\n-                            using\n-                        ].features.interprets_empty_strings_as_nulls\n-                    )\n-                ):\n-                    # A composite constraint containing NULL value cannot cause\n-                    # a violation since NULL != NULL in SQL.\n-                    return\n-                lookup_kwargs[field.name] = lookup_value\n-            queryset = queryset.filter(**lookup_kwargs)\n+                if field.generated:\n+                    if exclude and self._expression_refs_exclude(\n+                        model, field.expression, exclude\n+                    ):\n+                        return\n+                    generated_field_names.append(field.name)\n+                else:\n+                    lookup_value = getattr(instance, field.attname)\n+                    if (\n+                        self.nulls_distinct is not False\n+                        and lookup_value is None\n+                        or (\n+                            lookup_value == \"\"\n+                            and connections[\n+                                using\n+                            ].features.interprets_empty_strings_as_nulls\n+                        )\n+                    ):\n+                        # A composite constraint containing NULL value cannot cause\n+                        # a violation since NULL != NULL in SQL.\n+                        return\n+                    lookup_kwargs[field.name] = lookup_value\n+            lookup_args = []\n+            if generated_field_names:\n+                field_expression_map = instance._get_field_expression_map(\n+                    meta=model._meta, exclude=exclude\n+                )\n+                for field_name in generated_field_names:\n+                    expression = field_expression_map[field_name]\n+                    if self.nulls_distinct is False:\n+                        lhs = F(field_name)\n+                        condition = Q(Exact(lhs, expression)) | Q(\n+                            IsNull(lhs, True), IsNull(expression, True)\n+                        )\n+                        lookup_args.append(condition)\n+                    else:\n+                        lookup_kwargs[field_name] = expression\n+            queryset = queryset.filter(*lookup_args, **lookup_kwargs)\n         else:\n             # Ignore constraints with excluded fields.\n-            if exclude:\n-                for expression in self.expressions:\n-                    if hasattr(expression, \"flatten\"):\n-                        for expr in expression.flatten():\n-                            if isinstance(expr, F) and expr.name in exclude:\n-                                return\n-                    elif isinstance(expression, F) and expression.name in exclude:\n-                        return\n+            if exclude and any(\n+                self._expression_refs_exclude(model, expression, exclude)\n+                for expression in self.expressions\n+            ):\n+                return\n             replacements = {\n                 F(field): value\n                 for field, value in instance._get_field_expression_map(\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 92bb501d61cb..6dd90024446a 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -212,6 +212,9 @@ Models\n   methods such as\n   :meth:`QuerySet.union()<django.db.models.query.QuerySet.union>` unpredictable.\n \n+* Added support for validation of model constraints which use a\n+  :class:`~django.db.models.GeneratedField`.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/constraints/models.py b/tests/constraints/models.py\nindex 983d5505022d..829f671cdd82 100644\n--- a/tests/constraints/models.py\n+++ b/tests/constraints/models.py\n@@ -1,4 +1,5 @@\n from django.db import models\n+from django.db.models.functions import Coalesce, Lower\n \n \n class Product(models.Model):\n@@ -28,6 +29,46 @@ class Meta:\n         ]\n \n \n+class GeneratedFieldStoredProduct(models.Model):\n+    name = models.CharField(max_length=255, null=True)\n+    price = models.IntegerField(null=True)\n+    discounted_price = models.IntegerField(null=True)\n+    rebate = models.GeneratedField(\n+        expression=Coalesce(\"price\", 0)\n+        - Coalesce(\"discounted_price\", Coalesce(\"price\", 0)),\n+        output_field=models.IntegerField(),\n+        db_persist=True,\n+    )\n+    lower_name = models.GeneratedField(\n+        expression=Lower(models.F(\"name\")),\n+        output_field=models.CharField(max_length=255, null=True),\n+        db_persist=True,\n+    )\n+\n+    class Meta:\n+        required_db_features = {\"supports_stored_generated_columns\"}\n+\n+\n+class GeneratedFieldVirtualProduct(models.Model):\n+    name = models.CharField(max_length=255, null=True)\n+    price = models.IntegerField(null=True)\n+    discounted_price = models.IntegerField(null=True)\n+    rebate = models.GeneratedField(\n+        expression=Coalesce(\"price\", 0)\n+        - Coalesce(\"discounted_price\", Coalesce(\"price\", 0)),\n+        output_field=models.IntegerField(),\n+        db_persist=False,\n+    )\n+    lower_name = models.GeneratedField(\n+        expression=Lower(models.F(\"name\")),\n+        output_field=models.CharField(max_length=255, null=True),\n+        db_persist=False,\n+    )\n+\n+    class Meta:\n+        required_db_features = {\"supports_virtual_generated_columns\"}\n+\n+\n class UniqueConstraintProduct(models.Model):\n     name = models.CharField(max_length=255)\n     color = models.CharField(max_length=32, null=True)\ndiff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 350f05f2b851..9ca889ca6d77 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -4,7 +4,7 @@\n from django.db import IntegrityError, connection, models\n from django.db.models import F\n from django.db.models.constraints import BaseConstraint, UniqueConstraint\n-from django.db.models.functions import Abs, Lower, Upper\n+from django.db.models.functions import Abs, Lower, Sqrt, Upper\n from django.db.transaction import atomic\n from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import ignore_warnings\n@@ -13,6 +13,8 @@\n from .models import (\n     ChildModel,\n     ChildUniqueConstraintProduct,\n+    GeneratedFieldStoredProduct,\n+    GeneratedFieldVirtualProduct,\n     JSONFieldModel,\n     ModelWithDatabaseDefault,\n     Product,\n@@ -384,6 +386,29 @@ def test_validate_jsonfield_exact(self):\n         with self.assertRaisesMessage(ValidationError, msg):\n             json_exact_constraint.validate(JSONFieldModel, JSONFieldModel(data=data))\n \n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_validate_generated_field_stored(self):\n+        self.assertGeneratedFieldIsValidated(model=GeneratedFieldStoredProduct)\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_validate_generated_field_virtual(self):\n+        self.assertGeneratedFieldIsValidated(model=GeneratedFieldVirtualProduct)\n+\n+    def assertGeneratedFieldIsValidated(self, model):\n+        constraint = models.CheckConstraint(\n+            condition=models.Q(rebate__range=(0, 100)), name=\"bounded_rebate\"\n+        )\n+        constraint.validate(model, model(price=50, discounted_price=20))\n+\n+        invalid_product = model(price=1200, discounted_price=500)\n+        msg = f\"Constraint \u201c{constraint.name}\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(model, invalid_product)\n+\n+        # Excluding referenced or generated fields should skip validation.\n+        constraint.validate(model, invalid_product, exclude={\"price\"})\n+        constraint.validate(model, invalid_product, exclude={\"rebate\"})\n+\n     def test_check_deprecation(self):\n         msg = \"CheckConstraint.check is deprecated in favor of `.condition`.\"\n         condition = models.Q(foo=\"bar\")\n@@ -1062,6 +1087,90 @@ def test_validate_expression_str(self):\n             exclude={\"name\"},\n         )\n \n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_validate_expression_generated_field_stored(self):\n+        self.assertGeneratedFieldWithExpressionIsValidated(\n+            model=GeneratedFieldStoredProduct\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_validate_expression_generated_field_virtual(self):\n+        self.assertGeneratedFieldWithExpressionIsValidated(\n+            model=GeneratedFieldVirtualProduct\n+        )\n+\n+    def assertGeneratedFieldWithExpressionIsValidated(self, model):\n+        constraint = UniqueConstraint(Sqrt(\"rebate\"), name=\"unique_rebate_sqrt\")\n+        model.objects.create(price=100, discounted_price=84)\n+\n+        valid_product = model(price=100, discounted_price=75)\n+        constraint.validate(model, valid_product)\n+\n+        invalid_product = model(price=20, discounted_price=4)\n+        with self.assertRaisesMessage(\n+            ValidationError, f\"Constraint \u201c{constraint.name}\u201d is violated.\"\n+        ):\n+            constraint.validate(model, invalid_product)\n+\n+        # Excluding referenced or generated fields should skip validation.\n+        constraint.validate(model, invalid_product, exclude={\"rebate\"})\n+        constraint.validate(model, invalid_product, exclude={\"price\"})\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_validate_fields_generated_field_stored(self):\n+        self.assertGeneratedFieldWithFieldsIsValidated(\n+            model=GeneratedFieldStoredProduct\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_validate_fields_generated_field_virtual(self):\n+        self.assertGeneratedFieldWithFieldsIsValidated(\n+            model=GeneratedFieldVirtualProduct\n+        )\n+\n+    def assertGeneratedFieldWithFieldsIsValidated(self, model):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"lower_name\"], name=\"lower_name_unique\"\n+        )\n+        model.objects.create(name=\"Box\")\n+        constraint.validate(model, model(name=\"Case\"))\n+\n+        invalid_product = model(name=\"BOX\")\n+        msg = str(invalid_product.unique_error_message(model, [\"lower_name\"]))\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(model, invalid_product)\n+\n+        # Excluding referenced or generated fields should skip validation.\n+        constraint.validate(model, invalid_product, exclude={\"lower_name\"})\n+        constraint.validate(model, invalid_product, exclude={\"name\"})\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_validate_fields_generated_field_stored_nulls_distinct(self):\n+        self.assertGeneratedFieldNullsDistinctIsValidated(\n+            model=GeneratedFieldStoredProduct\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_validate_fields_generated_field_virtual_nulls_distinct(self):\n+        self.assertGeneratedFieldNullsDistinctIsValidated(\n+            model=GeneratedFieldVirtualProduct\n+        )\n+\n+    def assertGeneratedFieldNullsDistinctIsValidated(self, model):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"lower_name\"],\n+            name=\"lower_name_unique_nulls_distinct\",\n+            nulls_distinct=False,\n+        )\n+        model.objects.create(name=None)\n+        valid_product = model(name=\"Box\")\n+        constraint.validate(model, valid_product)\n+\n+        invalid_product = model(name=None)\n+        msg = str(invalid_product.unique_error_message(model, [\"lower_name\"]))\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(model, invalid_product)\n+\n     @skipUnlessDBFeature(\"supports_table_check_constraints\")\n     def test_validate_nullable_textfield_with_isnull_true(self):\n         is_null_constraint = models.UniqueConstraint(\ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\nindex f571a96f3534..ab5bf2bab14f 100644\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -14,6 +14,7 @@\n     F,\n     ForeignKey,\n     Func,\n+    GeneratedField,\n     IntegerField,\n     Model,\n     Q,\n@@ -32,6 +33,7 @@\n     from django.contrib.postgres.constraints import ExclusionConstraint\n     from django.contrib.postgres.fields import (\n         DateTimeRangeField,\n+        IntegerRangeField,\n         RangeBoundary,\n         RangeOperators,\n     )\n@@ -866,6 +868,38 @@ def test_validate_range_adjacent(self):\n         constraint.validate(RangesModel, RangesModel(ints=(51, 60)))\n         constraint.validate(RangesModel, RangesModel(ints=(10, 20)), exclude={\"ints\"})\n \n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    @isolate_apps(\"postgres_tests\")\n+    def test_validate_generated_field_range_adjacent(self):\n+        class RangesModelGeneratedField(Model):\n+            ints = IntegerRangeField(blank=True, null=True)\n+            ints_generated = GeneratedField(\n+                expression=F(\"ints\"),\n+                output_field=IntegerRangeField(null=True),\n+                db_persist=True,\n+            )\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(RangesModelGeneratedField)\n+\n+        constraint = ExclusionConstraint(\n+            name=\"ints_adjacent\",\n+            expressions=[(\"ints_generated\", RangeOperators.ADJACENT_TO)],\n+            violation_error_code=\"custom_code\",\n+            violation_error_message=\"Custom error message.\",\n+        )\n+        RangesModelGeneratedField.objects.create(ints=(20, 50))\n+\n+        range_obj = RangesModelGeneratedField(ints=(3, 20))\n+        with self.assertRaisesMessage(ValidationError, \"Custom error message.\"):\n+            constraint.validate(RangesModelGeneratedField, range_obj)\n+\n+        # Excluding referenced or generated field should skip validation.\n+        constraint.validate(RangesModelGeneratedField, range_obj, exclude={\"ints\"})\n+        constraint.validate(\n+            RangesModelGeneratedField, range_obj, exclude={\"ints_generated\"}\n+        )\n+\n     def test_validate_with_custom_code_and_condition(self):\n         constraint = ExclusionConstraint(\n             name=\"ints_adjacent\",\n", "problem_statement": "Add support for constraint validation on GeneratedFields\nDescription\n\t\t\n(last modified by Mark Gensler)\t\t\nGeneratedFields on a model instance are not recalculated during Model.full_clean(). Therefore, if a GeneratedField is included in the *expressions or fields parameters of a UniqueConstraint or CheckConstraint in the instance's Model._meta, the new values of the GeneratedField attribute are not used by BaseConstraint.validate().\nInstead, the model instance's GeneratedField attribute will return the value which corresponds to the most recent refresh of the instance from the database. If the instance is new and has not yet been saved, the following error is raised:\nAttributeError: Cannot read a generated field from an unsaved model.\nAn IntegrityError is correctly raised when calling Model.save() if any constraints involving GeneratedFields are violated.\nInstead, the recalculated values for GeneratedFields should be used when checking constraints.\nThis ticket was raised after fixing the bug in #35560 with PR \u200bhttps://github.com/django/django/pull/18309.\n", "hints_text": [["I'm happy to start working on this. I will raise a PR and add failing tests to catch the bug shortly. Before writing any code to address this, I'd like to discuss where best to apply the fix. I see two possible options: Recalculate GeneratedField attribute values on the fly as part of calling Constraint.validate(). This will leave the instance attributes unchanged until Model.save() is called. Recalculate GeneratedField attributes on the model instance during Model.full_clean(), prior to calls to Constraint.validate(), and irrespective of whether relevant constraints are present. The second option would allow further checks against the new GeneratedField value of the instance to be made during validation. On the other hand, the first option would leave the instance's attribute returning the value currently returned/stored by the database. Which would be best?", 1719985666.0], ["Replying to Mark Gensler: Before writing any code to address this, I'd like to discuss where best to apply the fix. I see two possible options: Recalculate GeneratedField attribute values on the fly as part of calling Constraint.validate(). This will leave the instance attributes unchanged until Model.save() is called. Recalculate GeneratedField attributes on the model instance during Model.full_clean(), prior to calls to Constraint.validate(), and irrespective of whether relevant constraints are present. My gut says option 1", 1720006174.0], ["Replying to Sarah Boyce: My gut says option 1 Yes, that seems the simpler approach which directly addresses this problem and no more. Also from the definition of a GeneratedField in the docs: A field that is always computed based on other fields in the model. This field is managed and updated by the database itself. I'll work on option 1.", 1720021858.0], ["I feel like we should avoid the naive approach of calling refresh_from_db(fields=generated_fields) as that will mutate the in-memory instance and leave it in this form as well as perform an extra query per constraint. What should be done IMO is for the query performed in UniqueConstraint to call replace_expressions({F(gfield.name): gfield.expression.replace_expressions(....) for gfield in generated_field}) so that will make class Contributor(models.Model): first_name = models.TextField() last_name = models.TextField() full_name = models.GeneratedField( Lower(Concat(\"first_name\", models.Value(\" \"), \"last_name\")) ) class Meta: constraints = { UniqueConstraint(names=\"unique_full_name\", MD5(\"full_name\")) } Contributor(first_name='Mark', last_name='Gensler').full_clean() result in the following the query, assuming first_name and last_name are available, would be SELECT 1 FROM contributor WHERE md5(lower(\"first_name\" || ' ' || \"last_name\")) = md5(lower('Mark' || ' ' || 'Gensler')) The more we push to the database the less likely we are to run into race conditions and serde roudtrip issues. Note that ExclusionConstraint is affected as well and that the logic added here will need to be made so constraints that include generated fields or have expressions with references to generated fields that themselves references exclude when provided will also need to skip validate. See the whole flatten logic for reference which that likely need to be updated to have F(\"some_generated_field\") flattened in a way that returns all the fields referenced by it.", 1720027006.0], ["I also think it's worth highlighting that this has come from us testing a PR and not \"organically\". I don't think this is a quick win and we should probably confirm that this is wanted, otherwise it might be best to document that it isn't supported.", 1720056184.0], ["Replying to Sarah Boyce: I also think it's worth highlighting that this has come from us testing a PR and not \"organically\". I don't think this is a quick win and we should probably confirm that this is wanted, otherwise it might be best to document that it isn't supported. How would we do that? Shall I raise a discussion on the django forum? I don't see any gap in pure functionality at present. Any expression which is defined for a GeneratedField could also be written directly as an input to the CheckConstraint / UniqueConstraint / ExclusionConstraint, rather than by using the GeneratedField as shorthand for that expression. This change would simply allow a more concise and readable definition of the constraint and assist with DRY. Or is there another advantage which I'm missing? If this isn't required, the only change necessary would be to prevent a GeneratedField appearing in the expression of any constraints. Otherwise a stale value would be returned for the GeneratedField attribute of an instance during constraint.validate(). This wouldn't be strictly backwards compatible, but users could re-write any existing constraints which use a GeneratedField. *EDIT* Actually rather than preventing GeneratedFields from appearing in constraints, the system could call checks.Warning(). Replying to Simon Charette: Thanks for the examples and for raising ExclusionConstraint, I had missed that. I'll investigate a solution using the outline you provided.", 1720073359.0], ["FWIW I gave a shot at what I described above to ensure that it was implementable and not too invasive and \u200bit was relatively straightforward. I don't see why we shouldn't support constraints over GeneratedField knowing that.", 1720079913.0], ["Replying to Simon Charette: FWIW I gave a shot at what I described above to ensure that it was implementable and not too invasive and \u200bit was relatively straightforward. I don't see why we shouldn't support constraints over GeneratedField knowing that. Thanks Simon, I will use what you've done as a starting point for the PR.", 1720152643.0], ["I have added a draft PR but there are still a couple of outstanding issues. I thought the PR would probably be a better place for review/discussion. Simon, would you be able to take a look? Thanks Mark", 1720439887.0]], "created_at": "2024-07-08T16:33:55Z"}
{"repo": "django/django", "pull_number": 18353, "instance_id": "django__django-18353", "issue_numbers": ["35585"], "base_commit": "fb7be022cb44d8faec52f17042fa58e4c9f02daf", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f00eb1e5a5ec..9a57af2bf371 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -650,13 +650,13 @@ def exists(self, limit=True):\n                 for combined_query in q.combined_queries\n             )\n         q.clear_ordering(force=True)\n-        if limit:\n+        if limit is True:\n             q.set_limits(high=1)\n         q.add_annotation(Value(1), \"a\")\n         return q\n \n     def has_results(self, using):\n-        q = self.exists(using)\n+        q = self.exists()\n         compiler = q.get_compiler(using=using)\n         return compiler.has_results()\n \n", "test_patch": "", "problem_statement": "`Query.has_results` calls `.exists()` with wrong argument\nDescription\n\t\t\n(last modified by Flavio Curella)\t\t\nThe has_results method of the Query class (in django/db/models/sql/query.py), passes the using argument to the exists() method:\n\tdef has_results(self, using):\n\t\tq = self.exists(using)\n\t\tcompiler = q.get_compiler(using=using)\n\t\treturn compiler.has_results()\nbut the signature of the exists method does not accept an argument to select the db connection. It only accepts an argument to limit the rows it should fetch:\n\tdef exists(self, limit=True):\n\t\t# ... snip ...\n", "hints_text": [["Regression caused by 3d734c09ff0138441dfe0a59010435871d17950f, I really wish we had type checking in this part of the code base to catch these kind of bugs that flew under the radar for almost two years.", 1720432955.0], ["Replying to Simon Charette: Regression caused by 3d734c09ff0138441dfe0a59010435871d17950f, I really wish we had type checking in this part of the code base to catch these kind of bugs that flew under the radar for almost two years. Unfortunately, it hasn't change the behavior, because limit is True by default and we check if it's truthy in Query.exists().", 1720439380.0], ["should I change to check to if limit is True:?", 1720439729.0], ["Replying to Flavio Curella: should I change to check to if limit is True:? Sounds good +1.", 1720441010.0], ["Done.", 1720441157.0], ["\u200bPR", 1720442763.0], ["PR looks good but it needs a regression test.", 1720446656.0], ["Replying to Natalia Bidart: PR looks good but it needs a regression test. IMO, it's not worth adding a regression test when the only doable option is to mock exists() call in has_results() and assert passed arguments.", 1720447040.0]], "created_at": "2024-07-08T15:01:47Z"}
{"repo": "django/django", "pull_number": 18352, "instance_id": "django__django-18352", "issue_numbers": ["35541"], "base_commit": "df35cf578f99522dd1ba864d513be95d47bab7a5", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex 769195af1370..d81bcab6a18f 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -1120,6 +1120,7 @@ a.deletelink:focus, a.deletelink:hover {\n     margin: 0;\n     border-top: 1px solid var(--hairline-color);\n     width: 100%;\n+    box-sizing: border-box;\n }\n \n .paginator a:link, .paginator a:visited {\ndiff --git a/docs/intro/_images/admin04t.png b/docs/intro/_images/admin04t.png\nindex df8b9645f606..b36bda145295 100644\nBinary files a/docs/intro/_images/admin04t.png and b/docs/intro/_images/admin04t.png differ\ndiff --git a/docs/intro/_images/admin06t.png b/docs/intro/_images/admin06t.png\nindex 1398dc94709f..7c23efa90712 100644\nBinary files a/docs/intro/_images/admin06t.png and b/docs/intro/_images/admin06t.png differ\ndiff --git a/docs/intro/_images/admin12t.png b/docs/intro/_images/admin12t.png\nindex 555059552727..51da9d4ee31b 100644\nBinary files a/docs/intro/_images/admin12t.png and b/docs/intro/_images/admin12t.png differ\n", "test_patch": "", "problem_statement": "Admin changelist total row css issue\nDescription\n\t\t\n(last modified by Sarah Boyce)\t\t\nThe border of the total row extends longer than the table\nThis would fix it for me (needs further testing)\ndjango/contrib/admin/static/admin/css/base.css\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n a.deletelink:focus, a.deletelink:hover {\n\t\t\t \u00a0\n\t\t\t\n11191119\u00a0 \u00a0 line-height: 22px;\n11201120\u00a0 \u00a0 margin: 0;\n11211121\u00a0 \u00a0 border-top: 1px solid var(--hairline-color);\n1122\u00a0\u00a0 \u00a0 width: 100%;\n11231122}\nI also believe the following related images should be updated with the lastest css:\ndocs/intro/_images/admin04t.png\ndocs/intro/_images/admin06t.png\n", "hints_text": [["Great catch Sarah, thank you! As far as I can see this is an issue in 5.0 and 4.2 as well, so not a release blocker for 5.0.", 1718876589.0], ["Hi all, I would like to take on the bug and test the fix proposed by Sarah, I believe I can handle it!", 1718956466.0], ["An alternative would be to add box-sizing: border-box; to .paginator The combination of left and right padding applied from .module p and the width: 100%; from .paginator makes it \"overflow\" To me, less css is better so would want some testing to confirm we can't just delete width: 100%; Note that the top action row <div class=\"actions\"> has the same issue on inspection", 1719230064.0], ["While trying to work on this issue myself, I found that adding width: 100% on a.deletelink:focus, a.deletelink:hover would fix one of the lines but the bottom line would still be extended. This is not the case when using box-sizing: border-box on .paginator, both the lines are of proper width. Also, I was unable to replicate the issue on <div class=\"actions\">. Should I make a PR with box-sizing: border-box on .paginator?", 1720389699.0], ["Replying to arjun omray: Should I make a PR with box-sizing: border-box on .paginator? Yes please, thank you", 1720403833.0], ["Here is the PR for required changes. \u200bhttps://github.com/django/django/pull/18352", 1720412624.0]], "created_at": "2024-07-08T09:21:16Z"}
{"repo": "django/django", "pull_number": 18345, "instance_id": "django__django-18345", "issue_numbers": ["35580"], "base_commit": "2c931fda5b341e0febf68269d2c2447a64875127", "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 7d42d1ea38a1..8b6855fce2db 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -187,7 +187,9 @@ def _check_related_query_name_is_valid(self):\n         return errors\n \n     def _check_relation_model_exists(self):\n-        rel_is_missing = self.remote_field.model not in self.opts.apps.get_models()\n+        rel_is_missing = self.remote_field.model not in self.opts.apps.get_models(\n+            include_auto_created=True\n+        )\n         rel_is_string = isinstance(self.remote_field.model, str)\n         model_name = (\n             self.remote_field.model\n", "test_patch": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex e539d4e6fbfc..9b69ae415138 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -89,6 +89,23 @@ class Model(models.Model):\n         field = Model._meta.get_field(\"m2m\")\n         self.assertEqual(field.check(from_model=Model), [])\n \n+    @isolate_apps(\"invalid_models_tests\")\n+    def test_auto_created_through_model(self):\n+        class OtherModel(models.Model):\n+            pass\n+\n+        class M2MModel(models.Model):\n+            many_to_many_rel = models.ManyToManyField(OtherModel)\n+\n+        class O2OModel(models.Model):\n+            one_to_one_rel = models.OneToOneField(\n+                \"invalid_models_tests.M2MModel_many_to_many_rel\",\n+                on_delete=models.CASCADE,\n+            )\n+\n+        field = O2OModel._meta.get_field(\"one_to_one_rel\")\n+        self.assertEqual(field.check(from_model=O2OModel), [])\n+\n     def test_many_to_many_with_useless_options(self):\n         class Model(models.Model):\n             name = models.CharField(max_length=20)\n", "problem_statement": "System check fields.E300 does not allow for related fields involving auto_created through models.\nDescription\n\t \nThe model system checks will raise the fields.E300 error if you make an auto_created through model the target of a related field. Here is an example of models that will trigger this error:\nclass E300TestModelA(models.Model):\n\tpass\nclass E300TestModelB(models.Model):\n\tmany_to_many_rel = models.ManyToManyField(E300TestModelA)\nclass E300TestModelC(models.Model):\n\tone_to_one_rel = models.OneToOneField(\"check_framework.E300TestModelB_many_to_many_rel\", on_delete=models.CASCADE)\nI realize this might be an unusual thing to do, however I have a use case that requires this and thought I would create this ticket in case others agree that this should be changed. I will create a pull request shortly.\n", "hints_text": [["I created a pull request with a fix for the bug and a regression test.", 1720190589.0]], "created_at": "2024-07-05T19:36:04Z"}
{"repo": "django/django", "pull_number": 18344, "instance_id": "django__django-18344", "issue_numbers": ["35489"], "base_commit": "3dac3271d286f2790780e89d31ddbb7197f8defa", "patch": "diff --git a/django/contrib/admin/templates/admin/widgets/foreign_key_raw_id.html b/django/contrib/admin/templates/admin/widgets/foreign_key_raw_id.html\nindex be93e0581d72..a6eba931c410 100644\n--- a/django/contrib/admin/templates/admin/widgets/foreign_key_raw_id.html\n+++ b/django/contrib/admin/templates/admin/widgets/foreign_key_raw_id.html\n@@ -1,2 +1,2 @@\n-{% include 'django/forms/widgets/input.html' %}{% if related_url %}<a href=\"{{ related_url }}\" class=\"related-lookup\" id=\"lookup_id_{{ widget.name }}\" title=\"{{ link_title }}\"></a>{% endif %}{% if link_label %}\n-<strong>{% if link_url %}<a href=\"{{ link_url }}\">{{ link_label }}</a>{% else %}{{ link_label }}{% endif %}</strong>{% endif %}\n+{% if related_url %}<div>{% endif %}{% include 'django/forms/widgets/input.html' %}{% if related_url %}<a href=\"{{ related_url }}\" class=\"related-lookup\" id=\"lookup_id_{{ widget.name }}\" title=\"{{ link_title }}\"></a>{% endif %}{% if link_label %}\n+<strong>{% if link_url %}<a href=\"{{ link_url }}\">{{ link_label }}</a>{% else %}{{ link_label }}{% endif %}</strong>{% endif %}{% if related_url %}</div>{% endif %}\n", "test_patch": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex 6f009a6f3faf..517e060b8019 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -23,6 +23,7 @@\n     UUIDField,\n )\n from django.test import SimpleTestCase, TestCase, ignore_warnings, override_settings\n+from django.test.selenium import screenshot_cases\n from django.test.utils import requires_tz_support\n from django.urls import reverse\n from django.utils import translation\n@@ -684,21 +685,21 @@ def test_render(self):\n         w = widgets.ForeignKeyRawIdWidget(rel_uuid, widget_admin_site)\n         self.assertHTMLEqual(\n             w.render(\"test\", band.uuid, attrs={}),\n-            '<input type=\"text\" name=\"test\" value=\"%(banduuid)s\" '\n+            '<div><input type=\"text\" name=\"test\" value=\"%(banduuid)s\" '\n             'class=\"vForeignKeyRawIdAdminField vUUIDField\">'\n             '<a href=\"/admin_widgets/band/?_to_field=uuid\" class=\"related-lookup\" '\n             'id=\"lookup_id_test\" title=\"Lookup\"></a>&nbsp;<strong>'\n             '<a href=\"/admin_widgets/band/%(bandpk)s/change/\">Linkin Park</a>'\n-            \"</strong>\" % {\"banduuid\": band.uuid, \"bandpk\": band.pk},\n+            \"</strong></div>\" % {\"banduuid\": band.uuid, \"bandpk\": band.pk},\n         )\n \n         rel_id = ReleaseEvent._meta.get_field(\"album\").remote_field\n         w = widgets.ForeignKeyRawIdWidget(rel_id, widget_admin_site)\n         self.assertHTMLEqual(\n             w.render(\"test\", None, attrs={}),\n-            '<input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">'\n+            '<div><input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">'\n             '<a href=\"/admin_widgets/album/?_to_field=id\" class=\"related-lookup\" '\n-            'id=\"lookup_id_test\" title=\"Lookup\"></a>',\n+            'id=\"lookup_id_test\" title=\"Lookup\"></a></div>',\n         )\n \n     def test_relations_to_non_primary_key(self):\n@@ -711,12 +712,12 @@ def test_relations_to_non_primary_key(self):\n         w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n         self.assertHTMLEqual(\n             w.render(\"test\", core.parent_id, attrs={}),\n-            '<input type=\"text\" name=\"test\" value=\"86\" '\n+            '<div><input type=\"text\" name=\"test\" value=\"86\" '\n             'class=\"vForeignKeyRawIdAdminField\">'\n             '<a href=\"/admin_widgets/inventory/?_to_field=barcode\" '\n             'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a>'\n             '&nbsp;<strong><a href=\"/admin_widgets/inventory/%(pk)s/change/\">'\n-            \"Apple</a></strong>\" % {\"pk\": apple.pk},\n+            \"Apple</a></strong></div>\" % {\"pk\": apple.pk},\n         )\n \n     def test_fk_related_model_not_in_admin(self):\n@@ -760,12 +761,12 @@ def test_proper_manager_for_label_lookup(self):\n         )\n         self.assertHTMLEqual(\n             w.render(\"test\", child_of_hidden.parent_id, attrs={}),\n-            '<input type=\"text\" name=\"test\" value=\"93\" '\n+            '<div><input type=\"text\" name=\"test\" value=\"93\" '\n             '   class=\"vForeignKeyRawIdAdminField\">'\n             '<a href=\"/admin_widgets/inventory/?_to_field=barcode\" '\n             'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a>'\n             '&nbsp;<strong><a href=\"/admin_widgets/inventory/%(pk)s/change/\">'\n-            \"Hidden</a></strong>\" % {\"pk\": hidden.pk},\n+            \"Hidden</a></strong></div>\" % {\"pk\": hidden.pk},\n         )\n \n     def test_render_unsafe_limit_choices_to(self):\n@@ -773,10 +774,10 @@ def test_render_unsafe_limit_choices_to(self):\n         w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n         self.assertHTMLEqual(\n             w.render(\"test\", None),\n-            '<input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">\\n'\n+            '<div><input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">'\n             '<a href=\"/admin_widgets/band/?name=%22%26%3E%3Cescapeme&amp;'\n             '_to_field=artist_ptr\" class=\"related-lookup\" id=\"lookup_id_test\" '\n-            'title=\"Lookup\"></a>',\n+            'title=\"Lookup\"></a></div>',\n         )\n \n     def test_render_fk_as_pk_model(self):\n@@ -784,9 +785,9 @@ def test_render_fk_as_pk_model(self):\n         w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n         self.assertHTMLEqual(\n             w.render(\"test\", None),\n-            '<input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">\\n'\n+            '<div><input type=\"text\" name=\"test\" class=\"vForeignKeyRawIdAdminField\">'\n             '<a href=\"/admin_widgets/releaseevent/?_to_field=album\" '\n-            'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a>',\n+            'class=\"related-lookup\" id=\"lookup_id_test\" title=\"Lookup\"></a></div>',\n         )\n \n \n@@ -804,10 +805,10 @@ def test_render(self):\n         self.assertHTMLEqual(\n             w.render(\"test\", [m1.pk, m2.pk], attrs={}),\n             (\n-                '<input type=\"text\" name=\"test\" value=\"%(m1pk)s,%(m2pk)s\" '\n+                '<div><input type=\"text\" name=\"test\" value=\"%(m1pk)s,%(m2pk)s\" '\n                 '   class=\"vManyToManyRawIdAdminField\">'\n                 '<a href=\"/admin_widgets/member/\" class=\"related-lookup\" '\n-                '   id=\"lookup_id_test\" title=\"Lookup\"></a>'\n+                '   id=\"lookup_id_test\" title=\"Lookup\"></a></div>'\n             )\n             % {\"m1pk\": m1.pk, \"m2pk\": m2.pk},\n         )\n@@ -815,10 +816,10 @@ def test_render(self):\n         self.assertHTMLEqual(\n             w.render(\"test\", [m1.pk]),\n             (\n-                '<input type=\"text\" name=\"test\" value=\"%(m1pk)s\" '\n+                '<div><input type=\"text\" name=\"test\" value=\"%(m1pk)s\" '\n                 '   class=\"vManyToManyRawIdAdminField\">'\n                 '<a href=\"/admin_widgets/member/\" class=\"related-lookup\" '\n-                '   id=\"lookup_id_test\" title=\"Lookup\"></a>'\n+                '   id=\"lookup_id_test\" title=\"Lookup\"></a></div>'\n             )\n             % {\"m1pk\": m1.pk},\n         )\n@@ -1680,6 +1681,7 @@ def setUp(self):\n         Band.objects.create(id=42, name=\"Bogey Blues\")\n         Band.objects.create(id=98, name=\"Green Potatoes\")\n \n+    @screenshot_cases([\"desktop_size\", \"mobile_size\", \"rtl\", \"dark\", \"high_contrast\"])\n     def test_ForeignKey(self):\n         from selenium.webdriver.common.by import By\n \n@@ -1688,6 +1690,7 @@ def test_ForeignKey(self):\n             self.live_server_url + reverse(\"admin:admin_widgets_event_add\")\n         )\n         main_window = self.selenium.current_window_handle\n+        self.take_screenshot(\"raw_id_widget\")\n \n         # No value has been selected yet\n         self.assertEqual(\n", "problem_statement": "Misalignment in raw ID fields\nDescription\n\t \nThe search icon and the text of raw foreign key fields in the admin seems to be misaligned starting in 4.2.\nI don't see any non-Django CSS in my own app that would be changing this, so if someone can confirm I'd be happy to submit a patch.\n", "hints_text": [["Hello Sam! Thank you for your report! I'm pretty sure there was a past ticket or PR about this issue but I have searched using all the keywords I could think and I can't find it, so I'm tentatively accepting this ticket. Looking forward to your contribution!", 1716988259.0], ["Well remembered! \u200bPR", 1717120010.0]], "created_at": "2024-07-05T15:22:51Z"}
{"repo": "django/django", "pull_number": 18341, "instance_id": "django__django-18341", "issue_numbers": ["35546"], "base_commit": "b6ad8b687adf011245270df17a38c1a42792e3d7", "patch": "diff --git a/docs/internals/contributing/bugs-and-features.txt b/docs/internals/contributing/bugs-and-features.txt\nindex b6b3265ba6bf..6562ebbd6481 100644\n--- a/docs/internals/contributing/bugs-and-features.txt\n+++ b/docs/internals/contributing/bugs-and-features.txt\n@@ -110,11 +110,6 @@ part of that. Here are some tips on how to make a request most effectively:\n If there's a consensus agreement on the feature, then it's appropriate to\n create a ticket. Include a link to the discussion in the ticket description.\n \n-As with most open-source projects, code talks. If you are willing to write the\n-code for the feature yourself or, even better, if you've already written it,\n-it's much more likely to be accepted. Fork Django on GitHub, create a feature\n-branch, and show us your work!\n-\n See also: :ref:`documenting-new-features`.\n \n .. _how-we-make-decisions:\ndiff --git a/docs/internals/contributing/writing-code/submitting-patches.txt b/docs/internals/contributing/writing-code/submitting-patches.txt\nindex 11a96eb91136..c924ad267c9e 100644\n--- a/docs/internals/contributing/writing-code/submitting-patches.txt\n+++ b/docs/internals/contributing/writing-code/submitting-patches.txt\n@@ -6,6 +6,8 @@ We're always grateful for contributions to Django's code. Indeed, bug reports\n with associated contributions will get fixed *far* more quickly than those\n without a solution.\n \n+.. _trivial-change:\n+\n Typo fixes and trivial documentation changes\n ============================================\n \n@@ -52,9 +54,10 @@ and time availability), claim it by following these steps:\n \n .. note::\n     The Django software foundation requests that anyone contributing more than\n-    a trivial change to Django sign and submit a `Contributor License\n-    Agreement`_, this ensures that the Django Software Foundation has clear\n-    license to all contributions allowing for a clear license for all users.\n+    a :ref:`trivial change <trivial-change>`, to Django sign and submit a\n+    `Contributor License Agreement`_, this ensures that the Django Software\n+    Foundation has clear license to all contributions allowing for a clear\n+    license for all users.\n \n .. _Login using your GitHub account: https://code.djangoproject.com/github/login\n .. _Create an account: https://www.djangoproject.com/accounts/register/\n@@ -262,9 +265,12 @@ documentation.\n Contribution checklist\n ======================\n \n-Use this checklist to review a pull request. If you are reviewing a pull\n-request that is not your own and it passes all the criteria below, please set\n-the \"Triage Stage\" on the corresponding Trac ticket to \"Ready for checkin\".\n+Use this checklist to review a pull request. If this contribution would not be\n+:ref:`considered trivial <trivial-change>`, first ensure it has an accepted\n+ticket before proceeding with the review.\n+\n+If the pull request passes all the criteria below and is not your own, please\n+set the \"Triage Stage\" on the corresponding Trac ticket to \"Ready for checkin\".\n If you've left comments for improvement on the pull request, please tick the\n appropriate flags on the Trac ticket based on the results of your review:\n \"Patch needs improvement\", \"Needs documentation\", and/or \"Needs tests\". As time\n@@ -331,5 +337,7 @@ All tickets\n   :ref:`commit message format <committing-guidelines>`?\n * Are you the patch author and a new contributor? Please add yourself to the\n   :source:`AUTHORS` file and submit a `Contributor License Agreement`_.\n+* Does this have an accepted ticket on Trac? All contributions require a ticket\n+  unless the :ref:`change is considered trivial <trivial-change>`.\n \n .. _Contributor License Agreement: https://www.djangoproject.com/foundation/cla/\n", "test_patch": "", "problem_statement": "Modernize contributing pages to align with current requirement of having an accepted ticket for non trivial changes\nDescription\n\t \nFollowing some feedback from \u200bhttps://github.com/django/django/pull/17389, there are some parts in these docs:\n\u200bhttps://docs.djangoproject.com/en/dev/internals/contributing/bugs-and-features/\n\u200bhttps://docs.djangoproject.com/en/dev/internals/contributing/writing-code/submitting-patches/\nthat could benefit from being more explicit about the need to have an accepted ticket when working on non trivial changes.\nSpecifically, I think that this paragraph is misleading:\n\"As with most open-source projects, code talks. If you are willing to write the code for the feature yourself or, even better, if you\u2019ve already written it, it\u2019s much more likely to be accepted. Fork Django on GitHub, create a feature branch, and show us your work!\"\nAnd also the patch review checklist should explicitly mention that an accepted ticket is required to get reviews/discussion in a GH PR.\n", "hints_text": [["I think this paragraph \"As with most open-source projects, code talks...\" is kinda contradictory with what is stated above and can be deleted. I traced its Git history but didn't find out why it was added while there is a lot of emphasis on submitting tickets first. Obviously, the patch review checklist requires reviews/discussion in its PR, but we can add it to the patch review checklist section.", 1719574333.0], ["I want to work on this. I have gone through the PR(\u200bhttps://github.com/django/django/pull/17389) to see the feedback. Will assign it to myself and work on it.", 1719636815.0]], "created_at": "2024-07-04T21:42:56Z"}
{"repo": "django/django", "pull_number": 18340, "instance_id": "django__django-18340", "issue_numbers": ["35424"], "base_commit": "e095c7612d49dbe371e9c7edd76ba99b6bc4f9f6", "patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 42a2c80a5e21..e13de5ba6ffd 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -761,8 +761,11 @@ def name_lower(self):\n         return self.name.lower()\n \n     def get_field(self, field_name):\n-        if field_name == \"_order\":\n-            field_name = self.options.get(\"order_with_respect_to\", field_name)\n+        if (\n+            field_name == \"_order\"\n+            and self.options.get(\"order_with_respect_to\") is not None\n+        ):\n+            field_name = self.options[\"order_with_respect_to\"]\n         return self.fields[field_name]\n \n     @classmethod\n", "test_patch": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex c64e4ebb4dc1..dbbdf777345c 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -1131,6 +1131,22 @@ class Meta:\n         self.assertIsNone(order_field.related_model)\n         self.assertIsInstance(order_field, models.PositiveSmallIntegerField)\n \n+    def test_get_order_field_after_removed_order_with_respect_to_field(self):\n+        new_apps = Apps()\n+\n+        class HistoricalRecord(models.Model):\n+            _order = models.PositiveSmallIntegerField()\n+\n+            class Meta:\n+                app_label = \"migrations\"\n+                apps = new_apps\n+\n+        model_state = ModelState.from_model(HistoricalRecord)\n+        model_state.options[\"order_with_respect_to\"] = None\n+        order_field = model_state.get_field(\"_order\")\n+        self.assertIsNone(order_field.related_model)\n+        self.assertIsInstance(order_field, models.PositiveSmallIntegerField)\n+\n     def test_manager_refer_correct_model_version(self):\n         \"\"\"\n         #24147 - Managers refer to the correct version of a\n", "problem_statement": "Migration autodetector fails when order_with_respect_to is removed, but an _order field remains\nDescription\n\t \nWe have a project with a large number of migrations that began failing during migrate/makemigrations due to order_with_respect_to having been removed, and an explicit _order field added. The historic migration contains this operation:\nmigrations.AlterOrderWithRespectTo(\n\tname='choice',\n\torder_with_respect_to=None,\n),\nThis causes an issue with the code introduced in commit \u200bhttps://github.com/django/django/commit/aa4acc164d1247c0de515c959f7b09648b57dc42 which was subsequently \"fixed\" in https://code.djangoproject.com/ticket/33449 but remains failing in the case described above.\nA minimal reproducible case has been created here: \u200bhttps://github.com/stuarta0/django-order-with-respect-to based on the django docs polls app.\nA possible solution may be to fall back to field_name if order_with_respect_to is either missing, or present with None (which is what occurs above):\ndef get_field(self, field_name):\n\tif field_name == \"_order\":\n\t\tfield_name = self.options.get(\"order_with_respect_to\") or field_name\n\treturn self.fields[field_name]\n", "hints_text": [["Thank you for the report, I'm struggling to understand what's happening in your project. There's a number of migrations in there. I don't think I have replicated the issue your seeing, what error do you see? I can find the following possible issue that given an existing migrated model class Foo(models.Model): order = models.IntegerField(default=999999) class Meta: order_with_respect_to = \"order\" when you change that model to class Foo(models.Model): _order = models.IntegerField(default=999999) class Meta: ordering = (\"_order\",) that generates a migration like from django.db import migrations class Migration(migrations.Migration): dependencies = [ ('app3', '0004_foo'), ] operations = [ migrations.AlterModelOptions( name='foo', options={'ordering': ('_order',)}, ), migrations.RenameField( model_name='foo', old_name='order', new_name='_order', ), migrations.AlterOrderWithRespectTo( name='foo', order_with_respect_to=None, ), ] Which fails with django.core.exceptions.FieldDoesNotExist: Foo has no field named 'order' But actually I don't think that's what you're talking about here? Can you reduce it down a bit further?", 1714720153.0], ["Thanks for looking into it. Due to the error you're seeing, the migrations had to be staggered to achieve the changes. e.g.: \u200b0002_alter_choice_order_with_respect_to: arranging the test. \u200b0003_choice_order: we wanted to move to our own ordering, but retain the data from the existing hidden field. Removing order_with_respect_to would've lost the data, so we added a placeholder field to store the result, and copied the values across with a simple python migration. \u200b0004_alter_choice_options_and_more: the order_with_respect_to field can be removed, which drops the hidden column. \u200b0005_alter_choice_options_rename_order_choice__order: finally, we can rename our placeholder field. Since the code is 8 years old and written by another author, I can't give you an explicit reason why the \"_order\" name was reused other than my assumption that \"order\" is a reserved word and \"_order\" was good enough for django internals at the time. However, it hasn't been an issue because django never had code that was structured in the way it is now. The answer for new projects is probably to remake or squash migrations to avoid it, but it's quite difficult on a legacy project with this scale of migrations. My suggested change in the original report fixes the issue for this case, but I haven't run django tests to see if it fails in other cases.", 1714936507.0], ["Hi Stuart, I have cloned your test repo installed Django 4.2, ran migrations and they all apply without an error for me \ud83e\udd14 I think you also need to share the error that you are seeing, I can't determine that Django is at fault here.", 1714960861.0], ["Error shown below. I've added a zip that contains the same project, but with docker compose, and a poetry lock file to ensure we're looking at the same thing. Note I can reproduce this both in a docker container, and on a production EC2 instance using system python and virtual envs. Edit: to run migrate I'm shelling into the container with docker compose run mysite bash followed by the command below: /code/mysite# python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: No migrations to apply. Traceback (most recent call last): File \"/code/mysite/manage.py\", line 22, in <module> main() File \"/code/mysite/manage.py\", line 18, in main execute_from_command_line(sys.argv) File \"/opt/venv/lib/python3.11/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line utility.execute() File \"/opt/venv/lib/python3.11/site-packages/django/core/management/__init__.py\", line 436, in execute self.fetch_command(subcommand).run_from_argv(self.argv) File \"/opt/venv/lib/python3.11/site-packages/django/core/management/base.py\", line 412, in run_from_argv self.execute(*args, **cmd_options) File \"/opt/venv/lib/python3.11/site-packages/django/core/management/base.py\", line 458, in execute output = self.handle(*args, **options) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/opt/venv/lib/python3.11/site-packages/django/core/management/base.py\", line 106, in wrapper res = handle_func(*args, **kwargs) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/opt/venv/lib/python3.11/site-packages/django/core/management/commands/migrate.py\", line 335, in handle changes = autodetector.changes(graph=executor.loader.graph) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/opt/venv/lib/python3.11/site-packages/django/db/migrations/autodetector.py\", line 46, in changes changes = self._detect_changes(convert_apps, graph) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/opt/venv/lib/python3.11/site-packages/django/db/migrations/autodetector.py\", line 197, in _detect_changes self.generate_altered_fields() File \"/opt/venv/lib/python3.11/site-packages/django/db/migrations/autodetector.py\", line 1117, in generate_altered_fields old_field = self.from_state.models[app_label, old_model_name].get_field( ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/opt/venv/lib/python3.11/site-packages/django/db/migrations/state.py\", line 765, in get_field return self.fields[field_name] ~~~~~~~~~~~^^^^^^^^^^^^ KeyError: None", 1715019734.0], ["Hi thank you Stuart for the extra context, I'm able to replicate your error too. Note for others, it can \"migrate\" without error on the first run but then error on future calls to migrate.", 1715140318.0], ["\u200bPR", 1720013562.0]], "created_at": "2024-07-03T18:32:50Z"}
{"repo": "django/django", "pull_number": 18338, "instance_id": "django__django-18338", "issue_numbers": ["35569"], "base_commit": "aa74c4083e047473ac385753e047e075e8f04890", "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 7d42d1ea38a1..8930d6ef4ab6 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -929,7 +929,9 @@ class ForeignKey(ForeignObject):\n \n     empty_strings_allowed = False\n     default_error_messages = {\n-        \"invalid\": _(\"%(model)s instance with %(field)s %(value)r does not exist.\")\n+        \"invalid\": _(\n+            \"%(model)s instance with %(field)s %(value)r is not a valid choice.\"\n+        )\n     }\n     description = _(\"Foreign Key (type determined by related field)\")\n \n", "test_patch": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex 5765c500346a..8dd91cf6edd6 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -523,7 +523,7 @@ def test_fields_with_fk(self):\n         self.assertEqual(u.group, group)\n \n         non_existent_email = \"mymail2@gmail.com\"\n-        msg = \"email instance with email %r does not exist.\" % non_existent_email\n+        msg = \"email instance with email %r is not a valid choice.\" % non_existent_email\n         with self.assertRaisesMessage(CommandError, msg):\n             call_command(\n                 \"createsuperuser\",\n@@ -594,7 +594,7 @@ def test_validate_fk(self):\n         email = Email.objects.create(email=\"mymail@gmail.com\")\n         Group.objects.all().delete()\n         nonexistent_group_id = 1\n-        msg = f\"group instance with id {nonexistent_group_id} does not exist.\"\n+        msg = f\"group instance with id {nonexistent_group_id} is not a valid choice.\"\n \n         with self.assertRaisesMessage(CommandError, msg):\n             call_command(\n@@ -611,7 +611,7 @@ def test_validate_fk_environment_variable(self):\n         email = Email.objects.create(email=\"mymail@gmail.com\")\n         Group.objects.all().delete()\n         nonexistent_group_id = 1\n-        msg = f\"group instance with id {nonexistent_group_id} does not exist.\"\n+        msg = f\"group instance with id {nonexistent_group_id} is not a valid choice.\"\n \n         with mock.patch.dict(\n             os.environ,\n@@ -631,7 +631,7 @@ def test_validate_fk_via_option_interactive(self):\n         email = Email.objects.create(email=\"mymail@gmail.com\")\n         Group.objects.all().delete()\n         nonexistent_group_id = 1\n-        msg = f\"group instance with id {nonexistent_group_id} does not exist.\"\n+        msg = f\"group instance with id {nonexistent_group_id} is not a valid choice.\"\n \n         @mock_inputs(\n             {\ndiff --git a/tests/validation/tests.py b/tests/validation/tests.py\nindex 6bb04f6f1431..494310e55340 100644\n--- a/tests/validation/tests.py\n+++ b/tests/validation/tests.py\n@@ -31,15 +31,18 @@ def test_wrong_FK_value_raises_error(self):\n         self.assertFieldFailsValidationWithMessage(\n             mtv.full_clean,\n             \"parent\",\n-            [\"model to validate instance with id %r does not exist.\" % mtv.parent_id],\n+            [\n+                \"model to validate instance with id %r is not a valid choice.\"\n+                % mtv.parent_id\n+            ],\n         )\n         mtv = ModelToValidate(number=10, name=\"Some Name\", ufm_id=\"Some Name\")\n         self.assertFieldFailsValidationWithMessage(\n             mtv.full_clean,\n             \"ufm\",\n             [\n-                \"unique fields model instance with unique_charfield %r does not exist.\"\n-                % mtv.name\n+                \"unique fields model instance with unique_charfield %r is not \"\n+                \"a valid choice.\" % mtv.name\n             ],\n         )\n \n", "problem_statement": "Misleading ValidationError wording from `limit_choices_to` violation\nDescription\n\t \nThe ValidationError raised when a choice violating ForeignKey.limit_choices_to is made refers to an instance \"not existing\", when in reality, the instance may exist but is simply not an allowed choice.\nWith the \u200bexample field:\nIn [5]: Person(staff_member_id=2).full_clean()\n---------------------------------------------------------------------------\nValidationError\t\t\t\t\t\t Traceback (most recent call last)\nCell In[5], line 1\n----> 1 Person(staff_member_id=2).full_clean()\nFile ~/release/lib/python3.12/site-packages/django/db/models/base.py:1502, in Model.full_clean(self, exclude, validate_unique, validate_constraints)\n 1499\t\t errors = e.update_error_dict(errors)\n 1501 if errors:\n-> 1502\t raise ValidationError(errors)\nValidationError: {'staff_member': ['user instance with id 2 does not exist.']}\nIn [6]: User.objects.get(id=2)\nOut[6]: <User: anonymous>\nWe could use wording like \"not a valid choice\" and reuse that wording for nonexistent instances as well if there is a disclosure concern about introducing a distinction between the two cases.\n", "hints_text": [["Changing the logic to disambiguate between \"not exists\" and \"not matching\" would require a non-negligible amount of work (we'd have to annotate the limits_choice_to criteria and check its value instead of simply doing queryset = queryset.complex_filter(...)) and introduces undesirable existence disclosure as you brought up. Switching the validation error message to \"not a valid choice\" makes sense though as it prevents disclosure, \u200bis not an invasive patch, and quite frankly is a better user error message.", 1719828760.0], ["\u200bPR", 1719989719.0]], "created_at": "2024-07-03T11:54:46Z"}
{"repo": "django/django", "pull_number": 18325, "instance_id": "django__django-18325", "issue_numbers": ["35033"], "base_commit": "d12184fedcd586e2c399ea40abe4bf865ebc87a6", "patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex 2eb8aa354bae..eb467de42951 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -286,7 +286,8 @@ def message(self):\n             # Use cached DNS_NAME for performance\n             msg[\"Message-ID\"] = make_msgid(domain=DNS_NAME)\n         for name, value in self.extra_headers.items():\n-            if name.lower() != \"from\":  # From is already handled\n+            # Avoid headers handled above.\n+            if name.lower() not in {\"from\", \"to\", \"cc\", \"reply-to\"}:\n                 msg[name] = value\n         return msg\n \n@@ -427,14 +428,13 @@ def _create_attachment(self, filename, content, mimetype=None):\n     def _set_list_header_if_not_empty(self, msg, header, values):\n         \"\"\"\n         Set msg's header, either from self.extra_headers, if present, or from\n-        the values argument.\n+        the values argument if not empty.\n         \"\"\"\n-        if values:\n-            try:\n-                value = self.extra_headers[header]\n-            except KeyError:\n-                value = \", \".join(str(v) for v in values)\n-            msg[header] = value\n+        try:\n+            msg[header] = self.extra_headers[header]\n+        except KeyError:\n+            if values:\n+                msg[header] = \", \".join(str(v) for v in values)\n \n \n class EmailMultiAlternatives(EmailMessage):\n", "test_patch": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex 1f7cbbadcaf7..a0d28eb0cee1 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -223,7 +223,7 @@ def test_cc_headers(self):\n             cc=[\"foo@example.com\"],\n             headers={\"Cc\": \"override@example.com\"},\n         ).message()\n-        self.assertEqual(message[\"Cc\"], \"override@example.com\")\n+        self.assertEqual(message.get_all(\"Cc\"), [\"override@example.com\"])\n \n     def test_cc_in_headers_only(self):\n         message = EmailMessage(\n@@ -233,7 +233,7 @@ def test_cc_in_headers_only(self):\n             [\"to@example.com\"],\n             headers={\"Cc\": \"foo@example.com\"},\n         ).message()\n-        self.assertEqual(message[\"Cc\"], \"foo@example.com\")\n+        self.assertEqual(message.get_all(\"Cc\"), [\"foo@example.com\"])\n \n     def test_reply_to(self):\n         email = EmailMessage(\n@@ -379,7 +379,7 @@ def test_from_header(self):\n             headers={\"From\": \"from@example.com\"},\n         )\n         message = email.message()\n-        self.assertEqual(message[\"From\"], \"from@example.com\")\n+        self.assertEqual(message.get_all(\"From\"), [\"from@example.com\"])\n \n     def test_to_header(self):\n         \"\"\"\n@@ -393,7 +393,7 @@ def test_to_header(self):\n             headers={\"To\": \"mailing-list@example.com\"},\n         )\n         message = email.message()\n-        self.assertEqual(message[\"To\"], \"mailing-list@example.com\")\n+        self.assertEqual(message.get_all(\"To\"), [\"mailing-list@example.com\"])\n         self.assertEqual(\n             email.to, [\"list-subscriber@example.com\", \"list-subscriber2@example.com\"]\n         )\n@@ -408,7 +408,8 @@ def test_to_header(self):\n         )\n         message = email.message()\n         self.assertEqual(\n-            message[\"To\"], \"list-subscriber@example.com, list-subscriber2@example.com\"\n+            message.get_all(\"To\"),\n+            [\"list-subscriber@example.com, list-subscriber2@example.com\"],\n         )\n         self.assertEqual(\n             email.to, [\"list-subscriber@example.com\", \"list-subscriber2@example.com\"]\n@@ -421,7 +422,7 @@ def test_to_in_headers_only(self):\n             \"bounce@example.com\",\n             headers={\"To\": \"to@example.com\"},\n         ).message()\n-        self.assertEqual(message[\"To\"], \"to@example.com\")\n+        self.assertEqual(message.get_all(\"To\"), [\"to@example.com\"])\n \n     def test_reply_to_header(self):\n         \"\"\"\n@@ -436,7 +437,7 @@ def test_reply_to_header(self):\n             headers={\"Reply-To\": \"override@example.com\"},\n         )\n         message = email.message()\n-        self.assertEqual(message[\"Reply-To\"], \"override@example.com\")\n+        self.assertEqual(message.get_all(\"Reply-To\"), [\"override@example.com\"])\n \n     def test_reply_to_in_headers_only(self):\n         message = EmailMessage(\n@@ -446,7 +447,7 @@ def test_reply_to_in_headers_only(self):\n             [\"to@example.com\"],\n             headers={\"Reply-To\": \"reply_to@example.com\"},\n         ).message()\n-        self.assertEqual(message[\"Reply-To\"], \"reply_to@example.com\")\n+        self.assertEqual(message.get_all(\"Reply-To\"), [\"reply_to@example.com\"])\n \n     def test_multiple_message_call(self):\n         \"\"\"\n@@ -461,9 +462,9 @@ def test_multiple_message_call(self):\n             headers={\"From\": \"from@example.com\"},\n         )\n         message = email.message()\n-        self.assertEqual(message[\"From\"], \"from@example.com\")\n+        self.assertEqual(message.get_all(\"From\"), [\"from@example.com\"])\n         message = email.message()\n-        self.assertEqual(message[\"From\"], \"from@example.com\")\n+        self.assertEqual(message.get_all(\"From\"), [\"from@example.com\"])\n \n     def test_unicode_address_header(self):\n         \"\"\"\n", "problem_statement": "EmailMessage repeats header if provided via the headers kwargs\nDescription\n\t\t\n(last modified by Aalekh Patel)\t\t\nIf you create an EmailMessage instance with a \"To\" key in the headers= kwarg, it attaches the To header to the email two times, violating \u200bRFC 5322#3.6.\nMy suspicion is that it attaches it the first time from extra_headers in self._set_list_header_if_not_empty(msg, 'To', self.to) at \u200bdjango.core.mail.message:266 and the second time again from extra_headers at \u200bdjango.core.mail.message:282\n\t\tmessage = EmailMessage(\n\t\t\tsubject=\"test subject\",\n\t\t\tbody=\"test body\",\n\t\t\tfrom_email=\"from@example.com\",\n\t\t\tto=[\"guy1@example.com\"],\n\t\t\theaders={\n\t\t\t\t\"To\": \", \".join([\"guy1@example.com\", \"guy2@example.com\", \"guy3@example.com\"]),\n\t\t\t},\n\t\t)\nFor example, here is a Python 3.9.18 shell output for the EmailMessage above that shows the To header appears twice.\n>>> from django.core.mail import EmailMessage\n>>> message = EmailMessage(subject=\"test subject\", body=\"test body\", from_email=\"from@example.com\",to=[\"guy1@example.com\"], headers={\"To\": \", \".join([\"guy1@example.com\", \"guy2@example.com\", \"guy3@example.com\"])})\n>>> print(list(message.message().raw_items()))\n[('Content-Type', 'text/plain; charset=\"utf-8\"'), ('MIME-Version', '1.0'), ('Content-Transfer-Encoding', '7bit'), ('Subject', 'test subject'), ('From', 'from@example.com'), ('To', 'guy1@example.com, guy2@example.com, guy3@example.com'), ('Date', 'Wed, 13 Dec 2023 15:59:31 -0000'), ('Message-ID', '<170248317136.759.5778419642073676754@036d358ca984>'), ('To', 'guy1@example.com, guy2@example.com, guy3@example.com')]\nI've provided a patch for this here: \u200bdjango/django#17606\n", "hints_text": [["Reproduced, and accepting based on the RFC which states: +----------------+--------+------------+----------------------------+ | Field | Min | Max number | Notes | | | number | | | +----------------+--------+------------+----------------------------+ | to | 0 | 1 | | This is related to #9233, and I would encourage for the solution to this ticket to cover for all those headers that should provide at most 1 occurrence.", 1702557500.0], ["Please don\u2019t CC me on tickets I have no relation to.", 1702604808.0], ["Sorry, I thought the CC was done by OP. It happens sometimes that people just ping me because they\u2019ve seen my blog or something. Why did you add me Natalia? I don\u2019t remember working on emails \ud83d\ude05", 1702604961.0], ["Hey Adam, I should have been more explicit, my bad! I CC'd you because I read your comment in ticket:32907#comment:1 and it seemed that you were interested/knowledgeable in the topic. Sorry if that was hasty!", 1702621016.0], ["Should we override with the data in headers or should be throw an exception? As the behavior is broken now an exception wouldn't be the worst thing and feels more correct (ie use the existing API to set to because that might do other things under the hood etc\u2026)", 1702733064.0], ["I agree that an exception sounds more correct, probably a ValueError, for any keys in headers that correspond to the explicit arguments like \u201cto\u201d. Natalia - no worries, I just saw this message after a number of other spammy ones \ud83d\ude05", 1702798595.0], ["Hi, i made a PR for this bug: \u200bhttps://github.com/django/django/pull/17606/files", 1703389811.0], ["This is the PR you meant \u200bhttps://github.com/django/django/pull/17642, right? :)", 1703555909.0], ["Replying to David Wobrock: This is the PR you meant \u200bhttps://github.com/django/django/pull/17642, right? :) Yes, it is", 1703579865.0], ["I do not see any tests in the PR, just because no tests fail after changes doesn't mean there are no tests required ;)", 1703594678.0], ["When working on the patch, please consider the history of the file: \u200bhttps://github.com/django/django/commit/5e75678c8b was added to ensure that to in extra_headers takes precedence and should have prevented a duplicate to header. Apparently this got broken in \u200bhttps://github.com/django/django/commit/da82939e5a31dea21a4f4d5085dfcd449fcbed3a Whatever the final solution is (raising an error if possible is preferred -- I fear it is not), existing tests and usecases shouldn't break.", 1703595089.0], ["Replying to Florian Apolloner: I do not see any tests in the PR, just because no tests fail after changes doesn't mean there are no tests required ;) I'm sorry, I will provide tests. Thanks for giving me some feedback", 1703652417.0], ["Replying to Mariusz Felisiak: Hi Mariusz, what do i need to fix in the PR? I'm asking you because I haven't seen any reviews in the PR anymore.", 1704252918.0], ["Sorry, I forgot to click \"Submit the review\".", 1704254715.0], ["I left some comments in the new PR: \u200bhttps://github.com/django/django/pull/17674", 1704425316.0], ["We need to find \u200banswers before this PR will be reviewable again. We cannot review PR if we are not sure what we want to achieve. I don't see any discussion on the forum or the mailing list, or any answers for my questions.", 1704717143.0], ["\u200bForum post", 1704970574.0], ["Note: #9214 added special handling for supplying from_email=... with a different headers={\"From\": ...}: the header value is displayed in the message, the from_email value is used as envelope-from/return-path. I can't find the reference now, but I believe using to=... with a different headers={\"To\": ...} was added around the same time and has a similar purpose: specifying the recipient separately from the displayed recipient. (This is sometimes used for distribution lists, where the list name is displayed in the header To field. It's also used for spam.) In both cases, the headers value needs to override the property value in the generated message header. (Not create an additional header.) It seems like there might also be missing tests for these special cases? [django-anymail maintainer here; a few years back, we got a \u200bspecific request to match the Django SMTPBackend's handling of these headers.]", 1719151465.0], ["Ah, the forum mentions the ticket I couldn't find: #17444 allowed different to=... and headers={\"To\": ...} I think this got broken when EmailMessage._set_list_header_if_not_empty() was added. And cc and reply_to are likely broken in the same way (based on reading the code). The problem is that Python's email.message.Message \u200bbehaves as a multi-value dict when assigning to header keys, but \u200breturns only one of the values when reading from keys. The current logic in _set_list_header_if_not_empty() assumes it works like a regular dict, and the tests from #17444 were insufficient to catch that mistake. The minimal and safe fix is something like: First make the existing tests fail on current buggy behavior: update \u200btest_to_header() to use \u200bget_all(\"To\") and verify there's only the one correct value in the list. Same thing in \u200btest_reply_to_header(). Wouldn't hurt to update some other nearby tests in the same way, and add a test_cc_header(). Then fix \u200bthis line in _set_list_header_if_not_empty() so it only assigns to the header if there's not already a header there. (Indent it one level so it only runs in the except clause.) I would suggest we not try to enforce \u200bRFC 5322-3.6 email header counting rules in Django. If/when Django \u200bmoves to Python's modern email API, those (and many other email header restrictions) will be enforced by Python.", 1719344774.0], ["(Also, that minimal and safe fix should be easy pickings)", 1719345205.0], ["The problem originally reported in this ticket was a regression introduced in #28912 \u200bPR #9454. I've added a new patch \u200bPR #18325 which addresses that specific regression. (Without attempting to add some of the other enhancements and email RFC enforcement contemplated by other discussion here.)", 1719678938.0]], "created_at": "2024-06-29T21:29:26Z"}
{"repo": "django/django", "pull_number": 18324, "instance_id": "django__django-18324", "issue_numbers": ["23790"], "base_commit": "289f48c71b0fdd058defb29879368897fb837021", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex ef5054fd1179..6e54cc1ea69d 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -87,6 +87,7 @@ answer newbie questions, and generally made Django that much better:\n     Andrew Clark <amclark7@gmail.com>\n     Andrew Durdin <adurdin@gmail.com>\n     Andrew Godwin <andrew@aeracode.org>\n+    Andrew Miller <info+django@akmiller.co.uk>\n     Andrew Pinkham <http://AndrewsForge.com>\n     Andrews Medina <andrewsmedina@gmail.com>\n     Andrew Northall <andrew@northall.me.uk>\ndiff --git a/docs/ref/applications.txt b/docs/ref/applications.txt\nindex 69d04380ce25..eecaa9e3232b 100644\n--- a/docs/ref/applications.txt\n+++ b/docs/ref/applications.txt\n@@ -186,6 +186,14 @@ Configurable attributes\n \n     It must be unique across a Django project.\n \n+    .. warning::\n+\n+        Changing this attribute after migrations have been applied for an\n+        application will result in breaking changes to a project or, in the\n+        case of a reusable app, any existing installs of that app. This is\n+        because ``AppConfig.label`` is used in database tables and migration\n+        files when referencing an app in the dependencies list.\n+\n .. attribute:: AppConfig.verbose_name\n \n     Human-readable name for the application, e.g. \"Administration\".\n", "test_patch": "", "problem_statement": "Possible bad interaction between migration dependencies and relabeling apps\nDescription\n\t\t\n(last modified by Markus Holtermann)\t\t\nAs far as I can tell, in migrations, dependencies is a list of (app_label, migration_name).\nI'm wondering what happens if one relabels an application with AppConfig.label. How can migrations handle this case?\n(I haven't tried to create such a problem. I'm just making a note before I forget.)\n", "hints_text": [["It partially works. If there are no migrations for an app yet, all migrations will be created with the changed label in the dependencies and all places it's being referenced. But as soon as you already have existing migrations and then change the label of an app, the makemigrations command blows up with: Traceback (most recent call last): File \"manage.py\", line 10, in <module> execute_from_command_line(sys.argv) File \"/home/markus/Coding/django/django/core/management/__init__.py\", line 338, in execute_from_command_line utility.execute() File \"/home/markus/Coding/django/django/core/management/__init__.py\", line 330, in execute self.fetch_command(subcommand).run_from_argv(self.argv) File \"/home/markus/Coding/django/django/core/management/base.py\", line 390, in run_from_argv self.execute(*args, **cmd_options) File \"/home/markus/Coding/django/django/core/management/base.py\", line 442, in execute output = self.handle(*args, **options) File \"/home/markus/Coding/django/django/core/management/commands/makemigrations.py\", line 58, in handle loader = MigrationLoader(None, ignore_no_migrations=True) File \"/home/markus/Coding/django/django/db/migrations/loader.py\", line 48, in __init__ self.build_graph() File \"/home/markus/Coding/django/django/db/migrations/loader.py\", line 295, in build_graph _reraise_missing_dependency(migration, parent, e) File \"/home/markus/Coding/django/django/db/migrations/loader.py\", line 265, in _reraise_missing_dependency raise exc File \"/home/markus/Coding/django/django/db/migrations/loader.py\", line 291, in build_graph self.graph.add_dependency(migration, key, parent) File \"/home/markus/Coding/django/django/db/migrations/graph.py\", line 47, in add_dependency parent django.db.migrations.graph.NodeNotFoundError: Migration testapp.0002_proxy dependencies reference nonexistent parent node ('otherapp', '0001_initial') The only way I can think of is using the appconfig.name attribute instead of appconfig.label. But that's hard to find a smooth migration path.", 1415598494.0], ["I'm afraid we messed up that part of the API and it's too late to fix :-| Andrew, do you have any thoughts on this?", 1415602641.0], ["To me this seems like a straightforward case of \"not every edge case can be automatic.\" The fix is manual, but simple, right? You just have to replace that app label in all existing migrations that reference it.", 1415619973.0], ["That's inconvenient when the affected app is a third-party app.", 1415625223.0], ["A third-party app with models changing its label has always meant changing the name of all its database tables, too (unless it uses Meta.db_table to preserve them). So it's always been the case that changing the label of an app with models is a Fairly Backwards Incompatible Thing To Do. I guess what's new in 1.7 is that a) changing app-label is easier than it used to be (no longer implies changing import path), and b) migrations introduce a new layer of label-dependence that isn't fixed by using a backwards-compatible Meta.db_table. I'm having trouble seeing a way to make this smoother, other than possibly improving the error message (though the current one isn't terrible) and probably adding a note to the docs in the AppConfig section clarifying that changing app_label midstream is a breaking change for any existing installs of that app. Fundamentally, migrations need some way to reliably and persistently reference an app, and that's always been the purpose of app-label.", 1415625848.0], ["A warning in the documentation of AppConfig.label is the way to go then.", 1415629272.0], ["This does mean that, in the new world of required migrations, using AppConfig to relabel third-party apps is pretty much impossible (due to app-label being hardcoded in migration dependencies). So the idea that AppConfig.label can allow using two third-party apps with conflicting labels is dead (if those apps both have models/migrations).", 1418887665.0], ["In theory, it would be possible for migrations to stop using app-label for dependencies and start using full dotted paths instead? Maybe? And then since db table names aren't hardcoded in migrations, maybe migrations could adapt to the app being re-labeled? (If you did the re-labeling before running any of its migrations; re-labeling midstream would still require manual table renames.) This would be a big change, but if we wanted to revive the idea of using AppConfig.label for third-party apps, I think that would be the necessary path. Using full paths of course means that if the import path for an app changes, you have to edit all its migrations. But maybe that's better, since import path is definitely under the control of the app author, always, unlike app label (since the advent of AppConfig.label). If we don't make this change to migrations, it seems possible that there are no really compelling use-cases remaining for AppConfig.label, just bugs-in-waiting, and we should consider deprecating and removing it.", 1418888038.0], ["Last thought: using AppConfig.label for third-party apps with migrations is still possible, I guess - you just have to use MIGRATION_MODULES also, and regenerate all its migrations. Which gets unfortunate if the app is upgraded and ships a new migration; you'd have to always re-create those yourself.", 1418888495.0], ["PR: \u200bhttps://github.com/django/django/pull/18324", 1719566263.0]], "created_at": "2024-06-28T14:17:23Z"}
{"repo": "django/django", "pull_number": 18322, "instance_id": "django__django-18322", "issue_numbers": ["35564"], "base_commit": "8719a6181ee6e81282822598e7f14d2d5c9b4c3c", "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 9937273c2859..94e700cf68c5 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -1,5 +1,4 @@\n import collections\n-import contextlib\n from itertools import chain\n \n from django.apps import apps\n@@ -22,9 +21,10 @@ def _issubclass(cls, classinfo):\n     issubclass() variant that doesn't raise an exception if cls isn't a\n     class.\n     \"\"\"\n-    with contextlib.suppress(TypeError):\n+    try:\n         return issubclass(cls, classinfo)\n-    return False\n+    except TypeError:\n+        return False\n \n \n def _contains_subclass(class_path, candidate_paths):\n@@ -34,9 +34,13 @@ def _contains_subclass(class_path, candidate_paths):\n     \"\"\"\n     cls = import_string(class_path)\n     for path in candidate_paths:\n-        with contextlib.suppress(ImportError, TypeError):\n-            if issubclass(import_string(path), cls):\n-                return True\n+        try:\n+            candidate_cls = import_string(path)\n+        except ImportError:\n+            # ImportErrors are raised elsewhere.\n+            continue\n+        if _issubclass(candidate_cls, cls):\n+            return True\n     return False\n \n \ndiff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 61da4f293a34..f2f9a74a6c83 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -1,4 +1,3 @@\n-import contextlib\n from itertools import chain\n from types import MethodType\n \n@@ -16,10 +15,13 @@ def _subclass_index(class_path, candidate_paths):\n     list of candidate paths. If it does not exist, return -1.\n     \"\"\"\n     cls = import_string(class_path)\n-    for i, path in enumerate(candidate_paths):\n-        with contextlib.suppress(ImportError, TypeError):\n-            if issubclass(import_string(path), cls):\n-                return i\n+    for index, path in enumerate(candidate_paths):\n+        try:\n+            candidate_cls = import_string(path)\n+            if issubclass(candidate_cls, cls):\n+                return index\n+        except (ImportError, TypeError):\n+            continue\n     return -1\n \n \n", "test_patch": "", "problem_statement": "Improve readability of subclass identification in admin and auth checks\nDescription\n\t \nWhile researching some code for another ticket I noticed noticed that the contrib.admin and contrib.auth checks modules have a very similar, but slightly different, bits of code:\n\u200b_contains_subclass and \u200b_subclass_index.\nIt took some careful reading, but they behave exactly the same, apart from one returning an index and the other a boolean.\nI have a contribution that change these implementations, with the intent to make it easier to follow the flow. \nI tried to find a place in the Django codebase to have a shared implementation, but I haven't been able to identify one. It would be nice to have a canonical implementation of these functions.\n", "hints_text": [["Thank you, agree this is nicer \ud83d\udc4d", 1719459091.0], ["In f0d05a74: Fixed #35564 -- Improved readability of subclass identification.", 1719468508.0], ["In 8cfcf9a3: Reverted \"Fixed #35564 -- Improved readability of subclass identification.\" This reverts commit f0d05a747f7a099e6c6bc58c42a787546d2212e7 due to a performance regression.", 1719561465.0]], "created_at": "2024-06-28T11:42:19Z"}
{"repo": "django/django", "pull_number": 18316, "instance_id": "django__django-18316", "issue_numbers": ["35564"], "base_commit": "e56a32b89bb7fadffdfaa2cdf12b4863ccd5af9b", "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 94e700cf68c5..9937273c2859 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -1,4 +1,5 @@\n import collections\n+import contextlib\n from itertools import chain\n \n from django.apps import apps\n@@ -21,10 +22,9 @@ def _issubclass(cls, classinfo):\n     issubclass() variant that doesn't raise an exception if cls isn't a\n     class.\n     \"\"\"\n-    try:\n+    with contextlib.suppress(TypeError):\n         return issubclass(cls, classinfo)\n-    except TypeError:\n-        return False\n+    return False\n \n \n def _contains_subclass(class_path, candidate_paths):\n@@ -34,13 +34,9 @@ def _contains_subclass(class_path, candidate_paths):\n     \"\"\"\n     cls = import_string(class_path)\n     for path in candidate_paths:\n-        try:\n-            candidate_cls = import_string(path)\n-        except ImportError:\n-            # ImportErrors are raised elsewhere.\n-            continue\n-        if _issubclass(candidate_cls, cls):\n-            return True\n+        with contextlib.suppress(ImportError, TypeError):\n+            if issubclass(import_string(path), cls):\n+                return True\n     return False\n \n \ndiff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex f2f9a74a6c83..61da4f293a34 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -1,3 +1,4 @@\n+import contextlib\n from itertools import chain\n from types import MethodType\n \n@@ -15,13 +16,10 @@ def _subclass_index(class_path, candidate_paths):\n     list of candidate paths. If it does not exist, return -1.\n     \"\"\"\n     cls = import_string(class_path)\n-    for index, path in enumerate(candidate_paths):\n-        try:\n-            candidate_cls = import_string(path)\n-            if issubclass(candidate_cls, cls):\n-                return index\n-        except (ImportError, TypeError):\n-            continue\n+    for i, path in enumerate(candidate_paths):\n+        with contextlib.suppress(ImportError, TypeError):\n+            if issubclass(import_string(path), cls):\n+                return i\n     return -1\n \n \n", "test_patch": "", "problem_statement": "Improve readability of subclass identification in admin and auth checks\nDescription\n\t \nWhile researching some code for another ticket I noticed noticed that the contrib.admin and contrib.auth checks modules have a very similar, but slightly different, bits of code:\n\u200b_contains_subclass and \u200b_subclass_index.\nIt took some careful reading, but they behave exactly the same, apart from one returning an index and the other a boolean.\nI have a contribution that change these implementations, with the intent to make it easier to follow the flow. \nI tried to find a place in the Django codebase to have a shared implementation, but I haven't been able to identify one. It would be nice to have a canonical implementation of these functions.\n", "hints_text": [], "created_at": "2024-06-26T21:50:53Z"}
{"repo": "django/django", "pull_number": 18314, "instance_id": "django__django-18314", "issue_numbers": ["35559"], "base_commit": "c6d1f98d2685f34e009e0fffdcff4ad275e55879", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex f3aed06d81ab..289939c1bd91 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -583,50 +583,28 @@ def get_combinator_sql(self, combinator, all):\n                     raise DatabaseError(\n                         \"ORDER BY not allowed in subqueries of compound statements.\"\n                     )\n-        elif self.query.is_sliced and combinator == \"union\":\n-            for compiler in compilers:\n-                # A sliced union cannot have its parts elided as some of them\n-                # might be sliced as well and in the event where only a single\n-                # part produces a non-empty resultset it might be impossible to\n-                # generate valid SQL.\n-                compiler.elide_empty = False\n-        parts = ()\n-        selected = self.query.selected\n+        parts = []\n+        empty_compiler = None\n         for compiler in compilers:\n             try:\n-                # If the columns list is limited, then all combined queries\n-                # must have the same columns list. Set the selects defined on\n-                # the query on all combined queries, if not already set.\n-                if selected is not None and compiler.query.selected is None:\n-                    compiler.query = compiler.query.clone()\n-                    compiler.query.set_values(selected)\n-                part_sql, part_args = compiler.as_sql(with_col_aliases=True)\n-                if compiler.query.combinator:\n-                    # Wrap in a subquery if wrapping in parentheses isn't\n-                    # supported.\n-                    if not features.supports_parentheses_in_compound:\n-                        part_sql = \"SELECT * FROM ({})\".format(part_sql)\n-                    # Add parentheses when combining with compound query if not\n-                    # already added for all compound queries.\n-                    elif (\n-                        self.query.subquery\n-                        or not features.supports_slicing_ordering_in_compound\n-                    ):\n-                        part_sql = \"({})\".format(part_sql)\n-                elif (\n-                    self.query.subquery\n-                    and features.supports_slicing_ordering_in_compound\n-                ):\n-                    part_sql = \"({})\".format(part_sql)\n-                parts += ((part_sql, part_args),)\n+                parts.append(self._get_combinator_part_sql(compiler))\n             except EmptyResultSet:\n                 # Omit the empty queryset with UNION and with DIFFERENCE if the\n                 # first queryset is nonempty.\n                 if combinator == \"union\" or (combinator == \"difference\" and parts):\n+                    empty_compiler = compiler\n                     continue\n                 raise\n         if not parts:\n             raise EmptyResultSet\n+        elif len(parts) == 1 and combinator == \"union\" and self.query.is_sliced:\n+            # A sliced union cannot be composed of a single component because\n+            # in the event the later is also sliced it might result in invalid\n+            # SQL due to the usage of multiple LIMIT clauses. Prevent that from\n+            # happening by always including an empty resultset query to force\n+            # the creation of an union.\n+            empty_compiler.elide_empty = False\n+            parts.append(self._get_combinator_part_sql(empty_compiler))\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == \"union\":\n             combinator_sql += \" ALL\"\n@@ -642,6 +620,32 @@ def get_combinator_sql(self, combinator, all):\n             params.extend(part)\n         return result, params\n \n+    def _get_combinator_part_sql(self, compiler):\n+        features = self.connection.features\n+        # If the columns list is limited, then all combined queries\n+        # must have the same columns list. Set the selects defined on\n+        # the query on all combined queries, if not already set.\n+        selected = self.query.selected\n+        if selected is not None and compiler.query.selected is None:\n+            compiler.query = compiler.query.clone()\n+            compiler.query.set_values(selected)\n+        part_sql, part_args = compiler.as_sql(with_col_aliases=True)\n+        if compiler.query.combinator:\n+            # Wrap in a subquery if wrapping in parentheses isn't\n+            # supported.\n+            if not features.supports_parentheses_in_compound:\n+                part_sql = \"SELECT * FROM ({})\".format(part_sql)\n+            # Add parentheses when combining with compound query if not\n+            # already added for all compound queries.\n+            elif (\n+                self.query.subquery\n+                or not features.supports_slicing_ordering_in_compound\n+            ):\n+                part_sql = \"({})\".format(part_sql)\n+        elif self.query.subquery and features.supports_slicing_ordering_in_compound:\n+            part_sql = \"({})\".format(part_sql)\n+        return part_sql, part_args\n+\n     def get_qualify_sql(self):\n         where_parts = []\n         if self.where:\n", "test_patch": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex eac153380381..ad1017c8af44 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -76,6 +76,12 @@ def test_union_none_slice(self):\n         qs3 = qs1.union(qs2)\n         self.assertNumbersEqual(qs3[:1], [0])\n \n+    def test_union_all_none_slice(self):\n+        qs = Number.objects.filter(id__in=[])\n+        with self.assertNumQueries(0):\n+            self.assertSequenceEqual(qs.union(qs), [])\n+            self.assertSequenceEqual(qs.union(qs)[0:0], [])\n+\n     def test_union_empty_filter_slice(self):\n         qs1 = Number.objects.filter(num__lte=0)\n         qs2 = Number.objects.filter(pk__in=[])\n", "problem_statement": "Calling list() on an empty sliced union still causes a database query\nDescription\n\t \nWhen upgrading from Django 4.1 to 4.2, some of our unit tests failed because of unexpected SQL queries, and those queries are still present in Django 5.0.\nWe have a Django REST Framework API view, which relies on Django's Paginator to do its pagination. It uses a QuerySet which involves a UNION of two other queries that both have some filters. Those filters can cause the whole union to be empty. The Paginator knows that the result count is 0, so it returns a page of results by slicing with [0:0].\nIn Django 4.1, calling list() on that sliced union would cause no query and an empty list is returned, but starting with 4.2, a query runs:\nqs = Thing.objects.filter(id__in=Thing.objects.none())\nlist(qs)\t\t\t\t # 0 queries\nlist(qs[0:0])\t\t\t# 0 queries\nlist(qs.union(qs))\t # 0 queries\nlist(qs.union(qs)[0:0]) # 1 query\n(\n\tSELECT \"app_thing\".\"id\" AS \"col1\"\n\tFROM \"app_thing\"\n\tWHERE 0 = 1\n) UNION (\n\tSELECT \"app_thing\".\"id\" AS \"col1\"\n\tFROM \"app_thing\"\n\tWHERE 0 = 1\n)\nI think this extra query was added in the fix for #34125.\n", "hints_text": [["I confirm that c2cc80756b8949cdd87b88bbfdfee698ced441e0 focused on the correctness aspect of the problem (avoiding the crash) without focusing on some edge cases that might still allow the query eliding to take place.", 1719300709.0]], "created_at": "2024-06-26T03:44:11Z"}
{"repo": "django/django", "pull_number": 18309, "instance_id": "django__django-18309", "issue_numbers": ["35560"], "base_commit": "704192e478885762411252979021771ba23b8adb", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 398ebdcf2396..9f8c1c0cc0af 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1340,7 +1340,7 @@ def _get_field_value_map(self, meta, exclude=None):\n         field_map = {\n             field.name: Value(getattr(self, field.attname), field)\n             for field in meta.local_concrete_fields\n-            if field.name not in exclude\n+            if field.name not in exclude and not field.generated\n         }\n         if \"pk\" not in exclude:\n             field_map[\"pk\"] = Value(self.pk, meta.pk)\ndiff --git a/docs/releases/5.0.7.txt b/docs/releases/5.0.7.txt\nindex a0e3acd640d7..0bee6d57ce77 100644\n--- a/docs/releases/5.0.7.txt\n+++ b/docs/releases/5.0.7.txt\n@@ -10,4 +10,7 @@ issues with severity \"low\", and several bugs in 5.0.6.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on\n+  unsaved model instances with a ``GeneratedField`` and certain defined\n+  :attr:`Meta.constraints <django.db.models.Options.constraints>`\n+  (:ticket:`35560`).\n", "test_patch": "diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\nindex 652c808b402d..d9811ba1645f 100644\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -609,3 +609,79 @@ class GeneratedModelNullVirtual(models.Model):\n \n     class Meta:\n         required_db_features = {\"supports_virtual_generated_columns\"}\n+\n+\n+class GeneratedModelBase(models.Model):\n+    a = models.IntegerField()\n+    a_squared = models.GeneratedField(\n+        expression=F(\"a\") * F(\"a\"),\n+        output_field=models.IntegerField(),\n+        db_persist=True,\n+    )\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class GeneratedModelVirtualBase(models.Model):\n+    a = models.IntegerField()\n+    a_squared = models.GeneratedField(\n+        expression=F(\"a\") * F(\"a\"),\n+        output_field=models.IntegerField(),\n+        db_persist=False,\n+    )\n+\n+    class Meta:\n+        abstract = True\n+\n+\n+class GeneratedModelCheckConstraint(GeneratedModelBase):\n+    class Meta:\n+        required_db_features = {\n+            \"supports_stored_generated_columns\",\n+            \"supports_table_check_constraints\",\n+        }\n+        constraints = [\n+            models.CheckConstraint(\n+                condition=models.Q(a__gt=0),\n+                name=\"Generated model check constraint a > 0\",\n+            )\n+        ]\n+\n+\n+class GeneratedModelCheckConstraintVirtual(GeneratedModelVirtualBase):\n+    class Meta:\n+        required_db_features = {\n+            \"supports_virtual_generated_columns\",\n+            \"supports_table_check_constraints\",\n+        }\n+        constraints = [\n+            models.CheckConstraint(\n+                condition=models.Q(a__gt=0),\n+                name=\"Generated model check constraint virtual a > 0\",\n+            )\n+        ]\n+\n+\n+class GeneratedModelUniqueConstraint(GeneratedModelBase):\n+    class Meta:\n+        required_db_features = {\n+            \"supports_stored_generated_columns\",\n+            \"supports_table_check_constraints\",\n+        }\n+        constraints = [\n+            models.UniqueConstraint(F(\"a\"), name=\"Generated model unique constraint a\"),\n+        ]\n+\n+\n+class GeneratedModelUniqueConstraintVirtual(GeneratedModelVirtualBase):\n+    class Meta:\n+        required_db_features = {\n+            \"supports_virtual_generated_columns\",\n+            \"supports_expression_indexes\",\n+        }\n+        constraints = [\n+            models.UniqueConstraint(\n+                F(\"a\"), name=\"Generated model unique constraint virtual a\"\n+            ),\n+        ]\ndiff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex 2fbfe3c82ad8..c185e19d8b41 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -2,6 +2,7 @@\n from decimal import Decimal\n \n from django.apps import apps\n+from django.core.exceptions import ValidationError\n from django.db import IntegrityError, connection\n from django.db.models import (\n     CharField,\n@@ -18,6 +19,8 @@\n from .models import (\n     Foo,\n     GeneratedModel,\n+    GeneratedModelCheckConstraint,\n+    GeneratedModelCheckConstraintVirtual,\n     GeneratedModelFieldWithConverters,\n     GeneratedModelNull,\n     GeneratedModelNullVirtual,\n@@ -25,6 +28,8 @@\n     GeneratedModelOutputFieldDbCollationVirtual,\n     GeneratedModelParams,\n     GeneratedModelParamsVirtual,\n+    GeneratedModelUniqueConstraint,\n+    GeneratedModelUniqueConstraintVirtual,\n     GeneratedModelVirtual,\n )\n \n@@ -186,6 +191,42 @@ def test_full_clean(self):\n         m = self._refresh_if_needed(m)\n         self.assertEqual(m.field, 3)\n \n+    @skipUnlessDBFeature(\"supports_table_check_constraints\")\n+    def test_full_clean_with_check_constraint(self):\n+        model_name = self.check_constraint_model._meta.verbose_name.capitalize()\n+\n+        m = self.check_constraint_model(a=2)\n+        m.full_clean()\n+        m.save()\n+        m = self._refresh_if_needed(m)\n+        self.assertEqual(m.a_squared, 4)\n+\n+        m = self.check_constraint_model(a=-1)\n+        with self.assertRaises(ValidationError) as cm:\n+            m.full_clean()\n+        self.assertEqual(\n+            cm.exception.message_dict,\n+            {\"__all__\": [f\"Constraint \u201c{model_name} a > 0\u201d is violated.\"]},\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_expression_indexes\")\n+    def test_full_clean_with_unique_constraint_expression(self):\n+        model_name = self.unique_constraint_model._meta.verbose_name.capitalize()\n+\n+        m = self.unique_constraint_model(a=2)\n+        m.full_clean()\n+        m.save()\n+        m = self._refresh_if_needed(m)\n+        self.assertEqual(m.a_squared, 4)\n+\n+        m = self.unique_constraint_model(a=2)\n+        with self.assertRaises(ValidationError) as cm:\n+            m.full_clean()\n+        self.assertEqual(\n+            cm.exception.message_dict,\n+            {\"__all__\": [f\"Constraint \u201c{model_name} a\u201d is violated.\"]},\n+        )\n+\n     def test_create(self):\n         m = self.base_model.objects.create(a=1, b=2)\n         m = self._refresh_if_needed(m)\n@@ -305,6 +346,8 @@ def test_nullable(self):\n class StoredGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n     base_model = GeneratedModel\n     nullable_model = GeneratedModelNull\n+    check_constraint_model = GeneratedModelCheckConstraint\n+    unique_constraint_model = GeneratedModelUniqueConstraint\n     output_field_db_collation_model = GeneratedModelOutputFieldDbCollation\n     params_model = GeneratedModelParams\n \n@@ -318,5 +361,7 @@ def test_create_field_with_db_converters(self):\n class VirtualGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n     base_model = GeneratedModelVirtual\n     nullable_model = GeneratedModelNullVirtual\n+    check_constraint_model = GeneratedModelCheckConstraintVirtual\n+    unique_constraint_model = GeneratedModelUniqueConstraintVirtual\n     output_field_db_collation_model = GeneratedModelOutputFieldDbCollationVirtual\n     params_model = GeneratedModelParamsVirtual\n", "problem_statement": "Model.full_clean() errors with GeneratedField and UniqueConstraint or CheckConstraint\nDescription\n\t \nCalling full_clean() on an unsaved model instance which has either a UniqueConstraint or CheckConstraint raises the error:\nAttributeError: Cannot read a generated field from an unsaved model.\nThis is similar to #35127.\nThe PR which will be attached shortly contains 4 new failing tests:\nmodel_fields.test_generatedfield.GeneratedFieldTests.test_full_clean_with_unique_constraint\nmodel_fields.test_generatedfield.GeneratedFieldTests.test_full_clean_with_check_constraint\nmodel_fields.test_generatedfield.VirtualGeneratedFieldTests.test_full_clean_with_unique_constraint\nmodel_fields.test_generatedfield.VirtualGeneratedFieldTests.test_full_clean_with_check_constraint\n", "hints_text": [["I've assigned this to myself as I'm happy to work on it. Will leave the discussion to the PR.", 1719306938.0]], "created_at": "2024-06-25T14:09:23Z"}
{"repo": "django/django", "pull_number": 18308, "instance_id": "django__django-18308", "issue_numbers": ["35558"], "base_commit": "bcc327aa326093a39f01a9bc98198807444900f3", "patch": "diff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex 98f2f02acb20..8b24fad39fa3 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -390,6 +390,10 @@ body.popup .submit-row {\n     border-right-color: var(--darkened-bg);\n }\n \n+.inline-related h3 {\n+    color: var(--body-loud-color);\n+}\n+\n .inline-related h3 span.delete {\n     float: right;\n }\ndiff --git a/docs/intro/_images/admin10t.png b/docs/intro/_images/admin10t.png\nindex 70f3dae9c915..b74f9bb05bcb 100644\nBinary files a/docs/intro/_images/admin10t.png and b/docs/intro/_images/admin10t.png differ\ndiff --git a/docs/intro/_images/admin14t.png b/docs/intro/_images/admin14t.png\nindex d90b3f66fd9f..5802c8f6f4a0 100644\nBinary files a/docs/intro/_images/admin14t.png and b/docs/intro/_images/admin14t.png differ\n", "test_patch": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 25512aede417..04f0a37e0284 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1858,6 +1858,7 @@ def setUp(self):\n             username=\"super\", password=\"secret\", email=\"super@example.com\"\n         )\n \n+    @screenshot_cases([\"desktop_size\", \"mobile_size\", \"dark\", \"high_contrast\"])\n     def test_add_stackeds(self):\n         \"\"\"\n         The \"Add another XXX\" link correctly adds items to the stacked formset.\n@@ -1878,6 +1879,7 @@ def test_add_stackeds(self):\n         )\n         add_button.click()\n         self.assertCountSeleniumElements(rows_selector, 4)\n+        self.take_screenshot(\"added\")\n \n     def test_delete_stackeds(self):\n         from selenium.webdriver.common.by import By\n", "problem_statement": "Inline header style looks less prominent than inline content\nDescription\n\t\t\n(last modified by Sarah Boyce)\t\t\nPreviously inline headers would always be a h4 but since #35189 these can be a h3. \nThis update has been done for a correct html structure and should not be reverted \ud83d\udc4d\nHowever the header has become less visually distinguishable from the content.\nNow:\nPreviously (picture from docs):\nNeed to make the header look a bit \"stronger\"\n", "hints_text": [], "created_at": "2024-06-25T07:50:51Z"}
{"repo": "django/django", "pull_number": 18306, "instance_id": "django__django-18306", "issue_numbers": ["35540"], "base_commit": "136a5f94099e428dd57572ebd16905fb25ef227e", "patch": "diff --git a/django/contrib/admin/static/admin/css/login.css b/django/contrib/admin/static/admin/css/login.css\nindex 389772f5bcec..805a34b5bdde 100644\n--- a/django/contrib/admin/static/admin/css/login.css\n+++ b/django/contrib/admin/static/admin/css/login.css\n@@ -21,7 +21,7 @@\n }\n \n .login #content {\n-    padding: 20px 20px 0;\n+    padding: 20px;\n }\n \n .login #container {\ndiff --git a/docs/intro/_images/admin01.png b/docs/intro/_images/admin01.png\nindex a1a0dc9619e3..8b7625867608 100644\nBinary files a/docs/intro/_images/admin01.png and b/docs/intro/_images/admin01.png differ\n", "test_patch": "", "problem_statement": "Admin login form padding issue\nDescription\n\t\t\n(last modified by Sarah Boyce)\t\t\nIf you look at the tutorial with an older screenshot of the Django admin, we're expecting some padding below the login button: \u200bhttps://docs.djangoproject.com/en/5.0/intro/tutorial02/#start-the-development-server\nCurrent\nSuggested update:\ndjango/contrib/admin/static/admin/css/login.css\ndiff --git a/django/contrib/admin/static/admin/css/login.css b/django/contrib/admin/static/admin/css/login.css\nindex 389772f5bc..805a34b5bd 100644\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n\t\t\t \u00a0\n\t\t\t\n2121}\n2222\n2323.login #content {\n24\u00a0\u00a0 \u00a0 padding: 20px\u00a020px 0;\n\u00a024\u00a0 \u00a0 padding: 20px;\n2525}\n2626\n2727.login #container {\nAfter\nWhoever picks this up should also update the image docs/intro/_images/admin01.png so that it has the latest styles \ud83d\udc4d\n", "hints_text": [["Another great catch, thank you Sarah! Confirmed that 5.0 is not affected.", 1718879311.0], ["Hey, can I work on this issue if it is available?", 1719130012.0], ["As 5.0 is not affected, marking as a release blocker for 5.1 Replying to arjun omray: Hey, can I work on this issue if it is available? I see Anthony assigned themselves recently but hasn't raised a PR. As we will need an update here relatively soon, I would say yes you can work on it. Normally I would say we should wait a bit longer but release blockers are special cases", 1719221240.0], ["\u200bhttps://github.com/django/django/pull/18306 Okay, I have raised a PR for this ticket.", 1719266406.0]], "created_at": "2024-06-25T02:55:31Z"}
{"repo": "django/django", "pull_number": 18304, "instance_id": "django__django-18304", "issue_numbers": ["35554"], "base_commit": "2a7497b0362f29db14af619a4b9c33e8e7a664a7", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex cd300e47bce7..dcfdd6eadedd 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -803,18 +803,20 @@ def save(\n                 RemovedInDjango60Warning,\n                 stacklevel=2,\n             )\n-            for arg, attr in zip(\n-                args, [\"force_insert\", \"force_update\", \"using\", \"update_fields\"]\n-            ):\n-                if arg:\n-                    if attr == \"force_insert\":\n-                        force_insert = arg\n-                    elif attr == \"force_update\":\n-                        force_update = arg\n-                    elif attr == \"using\":\n-                        using = arg\n-                    else:\n-                        update_fields = arg\n+            total_len_args = len(args) + 1  # include self\n+            if total_len_args > 5:\n+                # Recreate the proper TypeError message from Python.\n+                raise TypeError(\n+                    \"Model.save() takes from 1 to 5 positional arguments but \"\n+                    f\"{total_len_args} were given\"\n+                )\n+            force_insert = args[0]\n+            try:\n+                force_update = args[1]\n+                using = args[2]\n+                update_fields = args[3]\n+            except IndexError:\n+                pass\n \n         self._prepare_related_fields_for_save(operation_name=\"save\")\n \n@@ -888,18 +890,20 @@ async def asave(\n                 RemovedInDjango60Warning,\n                 stacklevel=2,\n             )\n-            for arg, attr in zip(\n-                args, [\"force_insert\", \"force_update\", \"using\", \"update_fields\"]\n-            ):\n-                if arg:\n-                    if attr == \"force_insert\":\n-                        force_insert = arg\n-                    elif attr == \"force_update\":\n-                        force_update = arg\n-                    elif attr == \"using\":\n-                        using = arg\n-                    else:\n-                        update_fields = arg\n+            total_len_args = len(args) + 1  # include self\n+            if total_len_args > 5:\n+                # Recreate the proper TypeError message from Python.\n+                raise TypeError(\n+                    \"Model.asave() takes from 1 to 5 positional arguments but \"\n+                    f\"{total_len_args} were given\"\n+                )\n+            force_insert = args[0]\n+            try:\n+                force_update = args[1]\n+                using = args[2]\n+                update_fields = args[3]\n+            except IndexError:\n+                pass\n \n         return await sync_to_async(self.save)(\n             force_insert=force_insert,\n", "test_patch": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 38fb9ca20035..4e89febed2b3 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -210,6 +210,35 @@ def test_save_deprecation(self):\n             a.save(False, False, None, None)\n             self.assertEqual(Article.objects.count(), 1)\n \n+    def test_save_deprecation_positional_arguments_used(self):\n+        a = Article()\n+        fields = [\"headline\"]\n+        with (\n+            self.assertWarns(RemovedInDjango60Warning),\n+            mock.patch.object(a, \"save_base\") as mock_save_base,\n+        ):\n+            a.save(None, 1, 2, fields)\n+        self.assertEqual(\n+            mock_save_base.mock_calls,\n+            [\n+                mock.call(\n+                    using=2,\n+                    force_insert=None,\n+                    force_update=1,\n+                    update_fields=frozenset(fields),\n+                )\n+            ],\n+        )\n+\n+    def test_save_too_many_positional_arguments(self):\n+        a = Article()\n+        msg = \"Model.save() takes from 1 to 5 positional arguments but 6 were given\"\n+        with (\n+            self.assertWarns(RemovedInDjango60Warning),\n+            self.assertRaisesMessage(TypeError, msg),\n+        ):\n+            a.save(False, False, None, None, None)\n+\n     async def test_asave_deprecation(self):\n         a = Article(headline=\"original\", pub_date=datetime(2014, 5, 16))\n         msg = \"Passing positional arguments to asave() is deprecated\"\n@@ -217,6 +246,35 @@ async def test_asave_deprecation(self):\n             await a.asave(False, False, None, None)\n             self.assertEqual(await Article.objects.acount(), 1)\n \n+    async def test_asave_deprecation_positional_arguments_used(self):\n+        a = Article()\n+        fields = [\"headline\"]\n+        with (\n+            self.assertWarns(RemovedInDjango60Warning),\n+            mock.patch.object(a, \"save_base\") as mock_save_base,\n+        ):\n+            await a.asave(None, 1, 2, fields)\n+        self.assertEqual(\n+            mock_save_base.mock_calls,\n+            [\n+                mock.call(\n+                    using=2,\n+                    force_insert=None,\n+                    force_update=1,\n+                    update_fields=frozenset(fields),\n+                )\n+            ],\n+        )\n+\n+    async def test_asave_too_many_positional_arguments(self):\n+        a = Article()\n+        msg = \"Model.asave() takes from 1 to 5 positional arguments but 6 were given\"\n+        with (\n+            self.assertWarns(RemovedInDjango60Warning),\n+            self.assertRaisesMessage(TypeError, msg),\n+        ):\n+            await a.asave(False, False, None, None, None)\n+\n     @ignore_warnings(category=RemovedInDjango60Warning)\n     def test_save_positional_arguments(self):\n         a = Article.objects.create(headline=\"original\", pub_date=datetime(2014, 5, 16))\ndiff --git a/tests/update_only_fields/tests.py b/tests/update_only_fields/tests.py\nindex 6c23ae27d8d5..816112bc3347 100644\n--- a/tests/update_only_fields/tests.py\n+++ b/tests/update_only_fields/tests.py\n@@ -1,5 +1,6 @@\n from django.db.models.signals import post_save, pre_save\n from django.test import TestCase\n+from django.utils.deprecation import RemovedInDjango60Warning\n \n from .models import Account, Employee, Person, Profile, ProxyEmployee\n \n@@ -256,6 +257,29 @@ def post_save_receiver(**kwargs):\n         pre_save.disconnect(pre_save_receiver)\n         post_save.disconnect(post_save_receiver)\n \n+    def test_empty_update_fields_positional_save(self):\n+        s = Person.objects.create(name=\"Sara\", gender=\"F\")\n+\n+        msg = \"Passing positional arguments to save() is deprecated\"\n+        with (\n+            self.assertWarnsMessage(RemovedInDjango60Warning, msg),\n+            self.assertNumQueries(0),\n+        ):\n+            s.save(False, False, None, [])\n+\n+    async def test_empty_update_fields_positional_asave(self):\n+        s = await Person.objects.acreate(name=\"Sara\", gender=\"F\")\n+        # Workaround for a lack of async assertNumQueries.\n+        s.name = \"Other\"\n+\n+        msg = \"Passing positional arguments to asave() is deprecated\"\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            await s.asave(False, False, None, [])\n+\n+        # No save occurred for an empty update_fields.\n+        await s.arefresh_from_db()\n+        self.assertEqual(s.name, \"Sara\")\n+\n     def test_num_queries_inheritance(self):\n         s = Employee.objects.create(name=\"Sara\", gender=\"F\")\n         s.employee_num = 1\n", "problem_statement": "Model.save() positional argument parsing slightly incorrect\nDescription\n\t \nTicket #35060 introduced a deprecation pathway for positional arguments in Model.save(). The code introduced to match positional arguments is slightly incorrect, leading to some subtle behaviour changes:\nCalling with extra positional arguments, such as Model.save(False, False, None, None, None), no longer raises a TypeError.\nCalling with positional empty update_fields, such as Model.save(False, False, None, []), would try to save all fields, due to truthy-checking of arguments.\nThese are definitely edge cases, but we can easily avoid them with alternative parsing logic. PR incoming.\n", "hints_text": [], "created_at": "2024-06-24T12:40:09Z"}
{"repo": "django/django", "pull_number": 18301, "instance_id": "django__django-18301", "issue_numbers": ["35464"], "base_commit": "86b548a59bce88a274daa17f22b59ce63282d7ba", "patch": "diff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 504ab62368c2..6af21407177c 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -437,9 +437,7 @@ subclass::\n \n     * ``description``\n         A string of optional extra text to be displayed at the top of each\n-        fieldset, under the heading of the fieldset. This string is not\n-        rendered for :class:`~django.contrib.admin.TabularInline` due to its\n-        layout.\n+        fieldset, under the heading of the fieldset.\n \n         Note that this value is *not* HTML-escaped when it's displayed in\n         the admin interface. This lets you include HTML if you so desire.\n@@ -447,6 +445,17 @@ subclass::\n         :func:`django.utils.html.escape` to escape any HTML special\n         characters.\n \n+    .. admonition:: :class:`~django.contrib.admin.TabularInline` has limited\n+        support for ``fieldsets``\n+\n+        Using ``fieldsets`` with :class:`~django.contrib.admin.TabularInline`\n+        has limited functionality. You can specify which fields will be\n+        displayed and their order within the ``TabularInline`` layout by\n+        defining ``fields`` in the ``field_options`` dictionary.\n+\n+        All other features are not supported. This includes the use of ``name``\n+        to define a title for a group of fields.\n+\n .. attribute:: ModelAdmin.filter_horizontal\n \n     By default, a :class:`~django.db.models.ManyToManyField` is displayed in\n", "test_patch": "diff --git a/tests/admin_inlines/admin.py b/tests/admin_inlines/admin.py\nindex 3b018aa5d750..c3983985c350 100644\n--- a/tests/admin_inlines/admin.py\n+++ b/tests/admin_inlines/admin.py\n@@ -106,14 +106,18 @@ class PhotoInlineMixin:\n     model = Photo\n     extra = 2\n     fieldsets = [\n-        (None, {\"fields\": [\"image\", \"title\"]}),\n+        (None, {\"fields\": [\"image\", \"title\"], \"description\": \"First group\"}),\n         (\n             \"Details\",\n-            {\"fields\": [\"description\", \"creation_date\"], \"classes\": [\"collapse\"]},\n+            {\n+                \"fields\": [\"description\", \"creation_date\"],\n+                \"classes\": [\"collapse\"],\n+                \"description\": \"Second group\",\n+            },\n         ),\n         (\n             \"Details\",  # Fieldset name intentionally duplicated\n-            {\"fields\": [\"update_date\", \"updated_by\"]},\n+            {\"fields\": [\"update_date\", \"updated_by\"], \"description\": \"Third group\"},\n         ),\n     ]\n \ndiff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 04f0a37e0284..620aac10a8a7 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -2422,3 +2422,39 @@ def test_inlines_verbose_name(self):\n                 )\n                 self.assertEqual(available.text, \"AVAILABLE ATTENDANT\")\n                 self.assertEqual(chosen.text, \"CHOSEN ATTENDANT\")\n+\n+    def test_tabular_inline_layout(self):\n+        from selenium.webdriver.common.by import By\n+\n+        self.admin_login(username=\"super\", password=\"secret\")\n+        self.selenium.get(\n+            self.live_server_url + reverse(\"admin:admin_inlines_photographer_add\")\n+        )\n+        tabular_inline = self.selenium.find_element(\n+            By.CSS_SELECTOR, \"[data-inline-type='tabular']\"\n+        )\n+        headers = tabular_inline.find_elements(By.TAG_NAME, \"th\")\n+        self.assertEqual(\n+            [h.get_attribute(\"innerText\") for h in headers],\n+            [\n+                \"\",\n+                \"IMAGE\",\n+                \"TITLE\",\n+                \"DESCRIPTION\",\n+                \"CREATION DATE\",\n+                \"UPDATE DATE\",\n+                \"UPDATED BY\",\n+                \"DELETE?\",\n+            ],\n+        )\n+        # There are no fieldset section names rendered.\n+        self.assertNotIn(\"Details\", tabular_inline.text)\n+        # There are no fieldset section descriptions rendered.\n+        self.assertNotIn(\"First group\", tabular_inline.text)\n+        self.assertNotIn(\"Second group\", tabular_inline.text)\n+        self.assertNotIn(\"Third group\", tabular_inline.text)\n+        # There are no fieldset classes applied.\n+        self.assertEqual(\n+            tabular_inline.find_elements(By.CSS_SELECTOR, \".collapse\"),\n+            [],\n+        )\n", "problem_statement": "Fieldsets defined for TabularInlines are ignored\nDescription\n\t \nFollowing the review of the PR solving #35189 and the analysis done in #35456, I found out that when defining an admin model with a TabularInline instance which defines fieldsets, those fieldsets are \"ignored\" in the UI (in terms of actually using a fieldset element, the content is shown).\nFurthermore, if the fieldsets include the collapse CSS class, nothing changes in the UI and there is not way of having collapsible fieldsets inside TabularInlines. See attached screenshots and some example models down below.\nRegarding how to fix this, I see two options:\nDiscuss with the accessibility plan whether there is a way to structure HTML to have \"collapsible fieldsets\" inside a tabular context, or\nExplicitly document that fieldsets make no sense for TabularInline. The current docs imply this setup is valid:\nInlineModelAdmin.classes\nA list or tuple containing extra CSS classes to apply to the fieldset that is rendered for the inlines. Defaults to None. As with classes configured in fieldsets, inlines with a collapse class will be initially collapsed and their header will have a small \u201cshow\u201d link.\nExample modes and admin models:\nmodels.py\nfrom django.db import models\nfrom django.utils.timezone import now\nclass Book(models.Model):\n\ttitle = models.CharField(max_length=100)\n\tauthor = models.CharField(max_length=100)\n\tpublisher = models.CharField(max_length=100)\n\tcreation_date = models.DateField(default=now)\n\tupdate_date = models.DateField(default=now)\n\tpublication_date = models.DateField(default=now)\n\tdef __str__(self):\n\t\treturn self.title\nclass Cover(models.Model):\n\tbook = models.ForeignKey(Book, on_delete=models.CASCADE)\n\timage = models.CharField(max_length=100)\n\ttitle = models.CharField(max_length=100)\n\tdescription = models.TextField()\n\tcreation_date = models.DateField(default=now)\n\tupdate_date = models.DateField(default=now)\n\tupdated_by = models.CharField(max_length=100)\nadmin.py\nfrom django.db import models\nfrom django.contrib import admin\nfrom .models import Book, Cover\nclass CoverInlineMixin:\n\tmodel = Cover\n\textra = 2\n\tfieldsets = (\n\t\t(None, {\"fields\": (\"image\", \"title\")}),\n\t\t(\"Details\", {\n\t\t\t\"fields\": (\"description\", \"creation_date\"),\n\t\t\t\"classes\": (\"collapse\",),\n\t\t}),\n\t\t(\"Details\", {\n\t\t\t\"fields\": (\"update_date\", \"updated_by\"),\n\t\t\t\"classes\": (\"collapse\",),\n\t\t}),\n\t)\nclass CoverTabularInline(CoverInlineMixin, admin.TabularInline):\n\tpass\nclass CoverStackedInline(CoverInlineMixin, admin.StackedInline):\n\tpass\nclass BookAdmin(admin.ModelAdmin):\n\tlist_display = (\"title\", \"author\", \"publisher\",\"publication_date\")\n\tsearch_fields = (\"title\", \"author\")\n\tlist_filter = (\"author\", \"publication_date\")\n\tfieldsets = (\n\t\t(None, {\n\t\t\t\"fields\": (\"title\", \"author\")\n\t\t}),\n\t\t(\"Advanced options\", {\n\t\t\t\"classes\": (\"collapse\",),\n\t\t\t\"fields\": (\"publisher\", \"publication_date\",)\n\t\t}),\n\t\t(\"Advanced options\", {\n\t\t\t\"classes\": (\"collapse\",),\n\t\t\t\"fields\": (\"creation_date\", \"update_date\",)\n\t\t}),\n\t)\n\tinlines = [\n\t\tCoverTabularInline,\n\t\tCoverStackedInline,\n\t]\nadmin.site.register(Book, BookAdmin)\n", "hints_text": [["I think this is a little similar to #21353 where a note was added to \"description\" but I think this note should be pulled out and generally be stated for \u200bTabularInlines I would vote option 2 and have a note \ud83d\udc4d", 1715941500.0], ["I am still unsure of what the UI would be for fieldsets (collapsible or otherwise) in TabularInlines. A tabular inline is a table; tables are naturally single-use elements: a table contains cells, an optional caption, and nothing more fancy. They are also very consistent in that they are just as annoying to customize, style, and make responsive as they were many years ago. There was a suggestion to make the columns collapsible instead. This is not something that can be achieved without using custom JavaScript. Per the specs, the HTML collapsible details element is not allowed within a table, nor did it work when one of our Discord members tried it in a proof of concept. Per the above, I am also in favor of option 2.", 1716012016.0]], "created_at": "2024-06-24T00:02:24Z"}
{"repo": "django/django", "pull_number": 18298, "instance_id": "django__django-18298", "issue_numbers": ["35511"], "base_commit": "aa74c4083e047473ac385753e047e075e8f04890", "patch": "diff --git a/docs/howto/windows.txt b/docs/howto/windows.txt\nindex 0ab976f0391f..83aa8d065573 100644\n--- a/docs/howto/windows.txt\n+++ b/docs/howto/windows.txt\n@@ -32,6 +32,14 @@ matches the version you installed by executing:\n \n     ...\\> py --version\n \n+.. admonition:: ``py`` is not recognized or found\n+\n+    Depending on how you've installed Python (such as via the Microsoft Store),\n+    ``py`` may not be available in the command prompt.\n+\n+    You will then need to use ``python`` instead of ``py`` when entering\n+    commands.\n+\n .. seealso::\n \n     For more details, see :doc:`python:using/windows` documentation.\n", "test_patch": "", "problem_statement": "Documentation uses the py binary in Windows, which may not always be available\nDescription\n\t \nIn places like the tutorial, the windows version of the command always uses py like, py -m django --version.\nThe py binary is available only if python is installed via the python.org installer. However, if you install python via the Microsoft Store, the pybinary is not available. \nWhen you install Python from the Microsoft Store, the py command is not included. For Linux, macOS, WSL and the Microsoft Store version of Python, you should use the python3 (or python3.7) command.\n\u200bhttps://learn.microsoft.com/en-us/windows/python/faqs#what-is-py-exe-\nThe python.org installer adds py by default, however, it only adds python if the option \"Add python.exe to PATH\" is selected in the first step of the installer.\nWithout the option, typing python or python3 will launch the \u200bMicrosoft Store \nI would recommend that in the \u200binstall section have specific instructions for Windows to use the python.org installer, not the Microsoft Store one. Also explain that the store one, doesn't have py.\n", "hints_text": [["I think having a note in the \u200bhow to install for Windows section might be more appropriate. I think the note can be that py may need to be python or python3 depending on how they installed Python \ud83e\udd14 Happy to see a PR \ud83d\udc4d", 1718160340.0], ["Replying to Sarah Boyce: I think having a note in the \u200bhow to install for Windows section might be more appropriate. I was unaware of this page, and I think that's a problem. The \u200bhow to page seems like a catch all for guides, but I doubt most people using windows that follow the tutorial will find it. To find it, if you start at the \u200binstall page of the tutorial, you have to first click in \u200bcomplete installation guide and then on \u200bHow to install Django on Windows. The quick install guide, which says \"this guide will guide you to a minimal installation that\u2019ll work while you walk through the introduction.\", has no direct mention of Windows, of the binary differences. So while the note in the Windows page would be needed, I think the the \u200binstall page should either link very clearly to the windows instructions or have the same or a similar note to the one that needs to be added in the Windows page. I'm not sure which of these two options would be better.", 1718174259.0], ["So on the install page you linked (which is the quick install intro), in the first paragraph there is a link to the \u200bcomplete installation guide. On that page, in the first section there is a link to the Windows installation guide. This is quite logical to me considering we are talking about specific cases and trouble shooting. To me, the quick guide should be \"quick/light\" and not bombard the user with too much information. They should refer to the complete guide if they encounter issues", 1718175322.0]], "created_at": "2024-06-22T17:06:13Z"}
{"repo": "django/django", "pull_number": 18294, "instance_id": "django__django-18294", "issue_numbers": ["35545"], "base_commit": "72b7aecbbfbec0ceb1a829eef82a68d7283df604", "patch": "diff --git a/django/contrib/contenttypes/models.py b/django/contrib/contenttypes/models.py\nindex 4f16e6eb6954..1ae45dea95ba 100644\n--- a/django/contrib/contenttypes/models.py\n+++ b/django/contrib/contenttypes/models.py\n@@ -75,7 +75,7 @@ def get_for_models(self, *models, for_concrete_models=True):\n                 ct = self._get_from_cache(opts)\n             except KeyError:\n                 needed_models[opts.app_label].add(opts.model_name)\n-                needed_opts[opts].append(model)\n+                needed_opts[(opts.app_label, opts.model_name)].append(model)\n             else:\n                 results[model] = ct\n         if needed_opts:\n@@ -89,18 +89,13 @@ def get_for_models(self, *models, for_concrete_models=True):\n             )\n             cts = self.filter(condition)\n             for ct in cts:\n-                opts_models = needed_opts.pop(\n-                    ct._meta.apps.get_model(ct.app_label, ct.model)._meta, []\n-                )\n+                opts_models = needed_opts.pop((ct.app_label, ct.model), [])\n                 for model in opts_models:\n                     results[model] = ct\n                 self._add_to_cache(self.db, ct)\n         # Create content types that weren't in the cache or DB.\n-        for opts, opts_models in needed_opts.items():\n-            ct = self.create(\n-                app_label=opts.app_label,\n-                model=opts.model_name,\n-            )\n+        for (app_label, model_name), opts_models in needed_opts.items():\n+            ct = self.create(app_label=app_label, model=model_name)\n             self._add_to_cache(self.db, ct)\n             for model in opts_models:\n                 results[model] = ct\n", "test_patch": "diff --git a/tests/contenttypes_tests/test_models.py b/tests/contenttypes_tests/test_models.py\nindex 799f1cc58c74..b63c57ef09fa 100644\n--- a/tests/contenttypes_tests/test_models.py\n+++ b/tests/contenttypes_tests/test_models.py\n@@ -2,7 +2,7 @@\n from django.contrib.contenttypes.models import ContentType, ContentTypeManager\n from django.contrib.contenttypes.prefetch import GenericPrefetch\n from django.db import models\n-from django.db.migrations.state import ProjectState\n+from django.db.migrations.state import ModelState, ProjectState\n from django.test import TestCase, override_settings\n from django.test.utils import isolate_apps\n \n@@ -99,6 +99,25 @@ def test_get_for_models_migrations(self):\n             cts, {ContentType: ContentType.objects.get_for_model(ContentType)}\n         )\n \n+    @isolate_apps(\"contenttypes_tests\")\n+    def test_get_for_models_migrations_create_model(self):\n+        state = ProjectState.from_apps(apps.get_app_config(\"contenttypes\"))\n+\n+        class Foo(models.Model):\n+            class Meta:\n+                app_label = \"contenttypes_tests\"\n+\n+        state.add_model(ModelState.from_model(Foo))\n+        ContentType = state.apps.get_model(\"contenttypes\", \"ContentType\")\n+        cts = ContentType.objects.get_for_models(FooWithUrl, Foo)\n+        self.assertEqual(\n+            cts,\n+            {\n+                Foo: ContentType.objects.get_for_model(Foo),\n+                FooWithUrl: ContentType.objects.get_for_model(FooWithUrl),\n+            },\n+        )\n+\n     def test_get_for_models_full_cache(self):\n         # Full cache\n         ContentType.objects.get_for_model(ContentType)\n", "problem_statement": "Fix create_permissions LookupErrors\nDescription\n\t\t\n(last modified by Csirmaz Bendeg\u00faz)\t\t\n#35408 introduced a bug in contrib.auth's create_permissions function (\u200bPR, commit d2c5a30e5a8595d06c4a70ff0f66032fee0d3c8e).\nSince this function is called by the post_migrate signal, it affects the migrate command.\nThe function raises unexpected LookupError s.\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, dev, sessions\nRunning migrations:\n Applying dev.0001_initial... OK\nTraceback (most recent call last):\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\apps\\registry.py\", line 158, in get_app_config\n\treturn self.app_configs[app_label]\n\t\t ~~~~~~~~~~~~~~~~^^^^^^^^^^^\nKeyError: 'dev'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\django_dev\\manage.py\", line 22, in <module>\n\tmain()\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\django_dev\\manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\base.py\", line 413, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\base.py\", line 459, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\base.py\", line 107, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 384, in handle\n\temit_post_migrate_signal(\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\core\\management\\sql.py\", line 52, in emit_post_migrate_signal\n\tmodels.signals.post_migrate.send(\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\dispatch\\dispatcher.py\", line 189, in send\n\tresponse = receiver(signal=self, sender=sender, **named)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\contrib\\auth\\management\\__init__.py\", line 78, in create_permissions\n\tctypes = ContentType.objects.db_manager(using).get_for_models(\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\contrib\\contenttypes\\models.py\", line 93, in get_for_models\n\tct._meta.apps.get_model(ct.app_label, ct.model)._meta, []\n\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\apps\\registry.py\", line 208, in get_model\n\tapp_config = self.get_app_config(app_label)\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\csirm\\PycharmProjects\\django-dev\\venv\\Lib\\site-packages\\django\\apps\\registry.py\", line 165, in get_app_config\n\traise LookupError(message)\nLookupError: No installed app with label 'dev'.\n", "hints_text": [["Thank you Csirmaz for this report! I can confirm I can reproduce in a simple Django project: $ python -Wall manage.py migrate generator Operations to perform: Apply all migrations: generator Running migrations: Applying generator.0001_initial... OK Traceback (most recent call last): File \"/home/nessita/fellowship/django/django/apps/registry.py\", line 158, in get_app_config return self.app_configs[app_label] ~~~~~~~~~~~~~~~~^^^^^^^^^^^ KeyError: 'generator' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/home/nessita/fellowship/checklist-generator/manage.py\", line 22, in <module> main() File \"/home/nessita/fellowship/checklist-generator/manage.py\", line 18, in main execute_from_command_line(sys.argv) File \"/home/nessita/fellowship/django/django/core/management/__init__.py\", line 442, in execute_from_command_line utility.execute() File \"/home/nessita/fellowship/django/django/core/management/__init__.py\", line 436, in execute self.fetch_command(subcommand).run_from_argv(self.argv) File \"/home/nessita/fellowship/django/django/core/management/base.py\", line 413, in run_from_argv self.execute(*args, **cmd_options) File \"/home/nessita/fellowship/django/django/core/management/base.py\", line 459, in execute output = self.handle(*args, **options) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/fellowship/django/django/core/management/base.py\", line 107, in wrapper res = handle_func(*args, **kwargs) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/fellowship/django/django/core/management/commands/migrate.py\", line 384, in handle emit_post_migrate_signal( File \"/home/nessita/fellowship/django/django/core/management/sql.py\", line 52, in emit_post_migrate_signal models.signals.post_migrate.send( File \"/home/nessita/fellowship/django/django/dispatch/dispatcher.py\", line 189, in send response = receiver(signal=self, sender=sender, **named) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/fellowship/django/django/contrib/auth/management/__init__.py\", line 78, in create_permissions ctypes = ContentType.objects.db_manager(using).get_for_models( ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/fellowship/django/django/contrib/contenttypes/models.py\", line 93, in get_for_models ct._meta.apps.get_model(ct.app_label, ct.model)._meta, [] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/fellowship/django/django/apps/registry.py\", line 208, in get_model app_config = self.get_app_config(app_label) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/fellowship/django/django/apps/registry.py\", line 165, in get_app_config raise LookupError(message) LookupError: No installed app with label 'generator'.", 1718888159.0], ["Details for people investigating: django.contrib.auth, django.contrib.contenttypes and a third app (app1) needs to be installed migrate (important) create a new model in app1 makemigrations and migrate If you were to delete the SQLite db and apply the migrations, it would run fine which makes me think we have a caching issue in ContentTypeManager.get_for_models() (#31357, #32833)", 1718936473.0]], "created_at": "2024-06-21T12:25:31Z"}
{"repo": "django/django", "pull_number": 18293, "instance_id": "django__django-18293", "issue_numbers": ["35413"], "base_commit": "f302343380c77e1eb5dab3b64dd70895a95926ca", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a7bc0610c81b..2425220d7b48 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1369,7 +1369,7 @@ def build_lookup(self, lookups, lhs, rhs):\n         # __exact is the default lookup if one isn't given.\n         *transforms, lookup_name = lookups or [\"exact\"]\n         for name in transforms:\n-            lhs = self.try_transform(lhs, name)\n+            lhs = self.try_transform(lhs, name, lookups)\n         # First try get_lookup() so that the lookup takes precedence if the lhs\n         # supports both transform and lookup for the name.\n         lookup_class = lhs.get_lookup(lookup_name)\n@@ -1403,7 +1403,7 @@ def build_lookup(self, lookups, lhs, rhs):\n \n         return lookup\n \n-    def try_transform(self, lhs, name):\n+    def try_transform(self, lhs, name, lookups=None):\n         \"\"\"\n         Helper method for build_lookup(). Try to fetch and initialize\n         a transform for name parameter from lhs.\n@@ -1420,9 +1420,14 @@ def try_transform(self, lhs, name):\n                 suggestion = \", perhaps you meant %s?\" % \" or \".join(suggested_lookups)\n             else:\n                 suggestion = \".\"\n+            if lookups is not None:\n+                name_index = lookups.index(name)\n+                unsupported_lookup = LOOKUP_SEP.join(lookups[name_index:])\n+            else:\n+                unsupported_lookup = name\n             raise FieldError(\n                 \"Unsupported lookup '%s' for %s or join on the field not \"\n-                \"permitted%s\" % (name, output_field.__name__, suggestion)\n+                \"permitted%s\" % (unsupported_lookup, output_field.__name__, suggestion)\n             )\n \n     def build_filter(\n", "test_patch": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex f107c5320a2a..2f4ea0a9a024 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -614,6 +614,10 @@ def test_call_order(self):\n             )\n             TrackCallsYearTransform.call_order = []\n             # junk transform - tries transform only, then fails\n+            msg = (\n+                \"Unsupported lookup 'junk__more_junk' for IntegerField or join\"\n+                \" on the field not permitted.\"\n+            )\n             with self.assertRaisesMessage(FieldError, msg):\n                 Author.objects.filter(birthdate__testyear__junk__more_junk=2012)\n             self.assertEqual(TrackCallsYearTransform.call_order, [\"transform\"])\ndiff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex ebdaa21e3d31..28acd72874d1 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -812,6 +812,34 @@ def test_unsupported_lookups(self):\n         ):\n             Article.objects.filter(pub_date__gobbledygook=\"blahblah\")\n \n+        with self.assertRaisesMessage(\n+            FieldError,\n+            \"Unsupported lookup 'gt__foo' for DateTimeField or join on the field \"\n+            \"not permitted, perhaps you meant gt or gte?\",\n+        ):\n+            Article.objects.filter(pub_date__gt__foo=\"blahblah\")\n+\n+        with self.assertRaisesMessage(\n+            FieldError,\n+            \"Unsupported lookup 'gt__' for DateTimeField or join on the field \"\n+            \"not permitted, perhaps you meant gt or gte?\",\n+        ):\n+            Article.objects.filter(pub_date__gt__=\"blahblah\")\n+\n+        with self.assertRaisesMessage(\n+            FieldError,\n+            \"Unsupported lookup 'gt__lt' for DateTimeField or join on the field \"\n+            \"not permitted, perhaps you meant gt or gte?\",\n+        ):\n+            Article.objects.filter(pub_date__gt__lt=\"blahblah\")\n+\n+        with self.assertRaisesMessage(\n+            FieldError,\n+            \"Unsupported lookup 'gt__lt__foo' for DateTimeField or join\"\n+            \" on the field not permitted, perhaps you meant gt or gte?\",\n+        ):\n+            Article.objects.filter(pub_date__gt__lt__foo=\"blahblah\")\n+\n     def test_unsupported_lookups_custom_lookups(self):\n         slug_field = Article._meta.get_field(\"slug\")\n         msg = (\n@@ -825,7 +853,7 @@ def test_unsupported_lookups_custom_lookups(self):\n     def test_relation_nested_lookup_error(self):\n         # An invalid nested lookup on a related field raises a useful error.\n         msg = (\n-            \"Unsupported lookup 'editor' for ForeignKey or join on the field not \"\n+            \"Unsupported lookup 'editor__name' for ForeignKey or join on the field not \"\n             \"permitted.\"\n         )\n         with self.assertRaisesMessage(FieldError, msg):\n@@ -1059,6 +1087,10 @@ def test_nonfield_lookups(self):\n         )\n         with self.assertRaisesMessage(FieldError, msg):\n             Article.objects.filter(headline__blahblah=99)\n+        msg = (\n+            \"Unsupported lookup 'blahblah__exact' for CharField or join \"\n+            \"on the field not permitted.\"\n+        )\n         with self.assertRaisesMessage(FieldError, msg):\n             Article.objects.filter(headline__blahblah__exact=99)\n         msg = (\n", "problem_statement": "FieldError: Unsupported lookup error message can be confusing.\nDescription\n\t \nOn these example queries on DateTimeFields:\nTestModel.objects.filter(created_at__gt__foo='2024-01-01')\nTestModel.objects.filter(created_at__gt__='2024-01-01') # I'm a bit surprised this one also has the same message.\nTestModel.objects.filter(created_at__gt__lt='2024-01-01')\nThe error message is this\ndjango.core.exceptions.FieldError: Unsupported lookup 'gt' for DateTimeField or join on the field not permitted, perhaps you meant gt or gte?\nThe error message should clarify better the issue.\n", "hints_text": [["Replicated, this is also true of other fields. I agree that saying something like Unsupported lookup 'gt__foo', Unsupported lookup 'gt__', and Unsupported lookup 'gt__lt' would be clearer.", 1714377563.0], ["Replying to Sarah Boyce: Replicated, this is also true of other fields. I agree that saying something like Unsupported lookup 'gt__foo', Unsupported lookup 'gt__', and Unsupported lookup 'gt__lt' would be clearer. If we just pass down LOOKUP_SEP.join(arg.split(LOOKUP_SEP)[1:]) to the build_lookup method in django/db/models/sql/query.py, it can print out the input lookup entirely. It outputs'gt__foo', 'gt__' , and 'gt__lt' . It can be an argument to the try_transform method. Not sure whether name is needed or not. Thoughts? BTW, I can handle it.", 1716721218.0], ["Can I resolve this issue?", 1718506660.0], ["PR \u200bhttps://github.com/django/django/pull/18293", 1719131430.0]], "created_at": "2024-06-21T06:59:22Z"}
{"repo": "django/django", "pull_number": 18292, "instance_id": "django__django-18292", "issue_numbers": ["35547"], "base_commit": "7ba2a0db20c37a5b1500434ca4ed48022311c171", "patch": "diff --git a/django/db/__init__.py b/django/db/__init__.py\nindex eb8118adb5c9..aa7d02d0f144 100644\n--- a/django/db/__init__.py\n+++ b/django/db/__init__.py\n@@ -20,6 +20,7 @@\n     \"close_old_connections\",\n     \"connection\",\n     \"connections\",\n+    \"reset_queries\",\n     \"router\",\n     \"DatabaseError\",\n     \"IntegrityError\",\n", "test_patch": "", "problem_statement": "reset_queries not included in __all__ of django/db/__init__.py\nDescription\n\t\t\n(last modified by Sarah Boyce)\t\t\nCurrently, the reset_queries method cannot be imported via from django.db import *.\n", "hints_text": [["PR: \u200bhttps://github.com/django/django/pull/18292", 1718893549.0]], "created_at": "2024-06-20T19:24:58Z"}
{"repo": "django/django", "pull_number": 18285, "instance_id": "django__django-18285", "issue_numbers": ["35461"], "base_commit": "20c2d625d3d5062e43918d1d7b6f623202491dd4", "patch": "diff --git a/docs/intro/tutorial08.txt b/docs/intro/tutorial08.txt\nindex 5a20e29b9d5a..c184eec47af0 100644\n--- a/docs/intro/tutorial08.txt\n+++ b/docs/intro/tutorial08.txt\n@@ -48,11 +48,11 @@ The steps are not duplicated in this tutorial, because as a third-party\n package, it may change separately to Django's schedule.\n \n Once installed, you should be able to see the DjDT \"handle\" on the right side\n-of the browser window when you refresh the polls application. Click it to open\n-the debug toolbar and use the tools in each panel. See the `panels\n-documentation page\n-<https://django-debug-toolbar.readthedocs.io/en/latest/panels.html>`__ for more\n-information on what the panels show.\n+of the browser window when you browse to ``http://localhost:8000/admin/``.\n+Click it to open the debug toolbar and use the tools in each panel. See the\n+`panels documentation page`__ for more information on what the panels show.\n+\n+__ https://django-debug-toolbar.readthedocs.io/en/latest/panels.html\n \n Getting help from others\n ========================\n", "test_patch": "", "problem_statement": "Tutorial instructions for adding django-debug-toolbar are misleading.\nDescription\n\t\t\n(last modified by Rosana Rufer)\t\t\nHey folks!\nThe instructions in step 8 of the tutorial recommend adding the django-debug-toolbar as a way to understand third-party apps, etc, but it doesn't work without additional changes to the mysite project.\n\u200bhttps://docs.djangoproject.com/en/5.0/intro/tutorial08/#installing-django-debug-toolbar\nIt finishes by saying, \"Once installed, you should be able to see the DjDT \u201chandle\u201d on the right side of the browser window when you refresh the polls application.\"\nHowever, the panel only shows if the view has a \"</body>\" tag, which none of the views you write have.\nSuggest either adding the body tag into the earlier pages, updating the documentation to say you need to add them, or using a different addon as an example.\nPatch: \u200bhttps://github.com/django/django/pull/18285\n", "hints_text": [["Hi dawbert, thank you for raising! I agree this is not the best experience for a tutorial and the docs are misleading. This body tag requirement is documented in the \u200bdjango-debug-toolbar docs so I don't think this is a bug in django-debug-toolbar, we should make a tweak \ud83d\udc4d", 1715914474.0], ["Oh, I didn't realize there wasn't an actual valid HTML template earlier in the tutorial. I see three options right now: Add steps manipulating one view's response to include the proper HTML tags Include a new advanced tutorial demoing template inheritance where it uses the proper HTML tags Refer the user to the admin interface on their app to see the toolbar and explain why it doesn't show for the other views", 1715962771.0], ["This can be fixed after adding body tag in html files, we can add documentation citing that body tag is required for toolbar handle. Should I pick this issue?", 1716020911.0], ["This was already raised and clarified in tutorial 3: \"To make the tutorial shorter, all template examples use incomplete HTML. In your own projects you should use complete HTML documents.\" Check out 26be53dd89cef46746b4a67cbc0bb29665e999a6.", 1716997320.0], ["Replying to Mariusz Felisiak: This was already raised and clarified in tutorial 3: \"To make the tutorial shorter, all template examples use incomplete HTML. In your own projects you should use complete HTML documents.\" Check out 26be53dd89cef46746b4a67cbc0bb29665e999a6. Looks like this note was added based off this forum question: \u200bhttps://forum.djangoproject.com/t/are-html-tags-needed-in-templates/806/1 Personally, I still think a clarification is required as this note says \"in your own projects\" rather than that this is requirement for part 8 of the tutorial to work as expected", 1718707867.0], ["I've been working on this and looking and testing the issue from different perspectives and I've got a proposal. Total options proposed by participants: Option A - Add the body tag in earlier pages. Option A.2 - Add a new step using template inheritance. Option B - Use a different addon as example. Option C - Suggest looking at the toolbar in /admin and explain what needs tweaking for it to work in /polls. Discussion timeline: Dawbert (Reporter) says: Following the tutorial gives wrong results when installing django-debug-toolbar as templates need to be wrapped in complete HTML but the tutorial doesn\u2019t do it for brevity. Proposing options A and B Sarah agrees Django documentation needs tweaking. Mentions the body tag requirement is already documented in the official django-toolbar app. Timothy offers options A, A.2 and C My Conclusion: It\u2019s worth doing option C. Reasoning: The main goal of this section is to learn how to add a package in the first place and a bit of django-debug-toolbar in second place. Option C provides both quickly in /admin, additionally providing a pointer on how to see such toolbar in /polls Most people following this tutorial will trip on this step for many reasons* and it\u2019s worth improving this. Pull Request with proposed change: \u200bhttps://github.com/django/django/pull/18285 \ud83d\udcdd Notion with extended reasoning here: \u200bhttps://www.notion.so/Tutorial-instructions-for-adding-django-debug-toolbar-are-misleading-1f1429081df4473cb5bad80790cc4176", 1718808272.0]], "created_at": "2024-06-19T19:39:49Z"}
{"repo": "django/django", "pull_number": 18278, "instance_id": "django__django-18278", "issue_numbers": ["35528"], "base_commit": "7a0cd09f9f85f55fdc2b3fe63bea94b21e31d3c2", "patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex 7eee5da8b8ce..2eb8aa354bae 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -505,3 +505,16 @@ def _create_alternatives(self, msg):\n                     )\n                 )\n         return msg\n+\n+    def body_contains(self, text):\n+        \"\"\"\n+        Checks that ``text`` occurs in the email body and in all attached MIME\n+        type text/* alternatives.\n+        \"\"\"\n+        if text not in self.body:\n+            return False\n+\n+        for content, mimetype in self.alternatives:\n+            if mimetype.startswith(\"text/\") and text not in content:\n+                return False\n+        return True\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 61101ce1fdcf..8b77ecc48245 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -143,6 +143,10 @@ Email\n   <django.core.mail.EmailMultiAlternatives.alternatives>` is now a list of\n   named tuples, as opposed to regular tuples.\n \n+* The new :meth:`~django.core.mail.EmailMultiAlternatives.body_contains` method\n+  returns a boolean indicating whether a provided text is contained in the\n+  email ``body`` and in all attached MIME type ``text/*`` alternatives.\n+\n Error Reporting\n ~~~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/email.txt b/docs/topics/email.txt\nindex 635864a95e55..e5d4f277f526 100644\n--- a/docs/topics/email.txt\n+++ b/docs/topics/email.txt\n@@ -436,6 +436,26 @@ Django's email library, you can do this using the\n             msg.attach_alternative(html_content, \"text/html\")\n             msg.send()\n \n+    .. method:: body_contains(text)\n+\n+        .. versionadded:: 5.2\n+\n+        Returns a boolean indicating whether the provided ``text`` is\n+        contained in the email ``body`` and in all attached MIME type\n+        ``text/*`` alternatives.\n+\n+        This can be useful when testing emails. For example::\n+\n+            def test_contains_email_content(self):\n+                subject = \"Hello World\"\n+                from_email = \"from@example.com\"\n+                to = \"to@example.com\"\n+                msg = EmailMultiAlternatives(subject, \"I am content.\", from_email, [to])\n+                msg.attach_alternative(\"<p>I am content.</p>\", \"text/html\")\n+\n+                self.assertIs(msg.body_contains(\"I am content\"), True)\n+                self.assertIs(msg.body_contains(\"<p>I am content.</p>\"), False)\n+\n Updating the default content type\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex 3746ede3380d..1f7cbbadcaf7 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -1163,6 +1163,24 @@ def test_email_multi_alternatives_content_mimetype_none(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             email_msg.attach_alternative(\"<p>content</p>\", None)\n \n+    def test_body_contains(self):\n+        email_msg = EmailMultiAlternatives()\n+        email_msg.body = \"I am content.\"\n+        self.assertIs(email_msg.body_contains(\"I am\"), True)\n+        self.assertIs(email_msg.body_contains(\"I am content.\"), True)\n+\n+        email_msg.attach_alternative(\"<p>I am different content.</p>\", \"text/html\")\n+        self.assertIs(email_msg.body_contains(\"I am\"), True)\n+        self.assertIs(email_msg.body_contains(\"I am content.\"), False)\n+        self.assertIs(email_msg.body_contains(\"<p>I am different content.</p>\"), False)\n+\n+    def test_body_contains_alternative_non_text(self):\n+        email_msg = EmailMultiAlternatives()\n+        email_msg.body = \"I am content.\"\n+        email_msg.attach_alternative(\"I am content.\", \"text/html\")\n+        email_msg.attach_alternative(b\"I am a song.\", \"audio/mpeg\")\n+        self.assertIs(email_msg.body_contains(\"I am content\"), True)\n+\n \n @requires_tz_support\n class MailTimeZoneTests(SimpleTestCase):\n", "problem_statement": "Add EmailMultiAlternatives.body_contains() to aid email test assertions\nDescription\n\t \nCurrently, it's very hard and tedious to assert the content of an email object. Therefore, we want to add a method \"body_contains()\" to \"EmailMultiAlternatives\" to check a search string in all available text-based alternatives (content parts, like HTML).\nThis method can then be easily asserted in any given unit-test.\nThere's a forum discussion going on about this topic: \u200bhttps://forum.djangoproject.com/t/improve-email-unit-testing/32044/1\nI've already created a PR for a suggetion: \u200bhttps://github.com/django/django/pull/18278/files\n", "hints_text": [], "created_at": "2024-06-17T09:38:24Z"}
{"repo": "django/django", "pull_number": 18269, "instance_id": "django__django-18269", "issue_numbers": ["34886"], "base_commit": "f1705c8780c0a7587654fc736542d55fe4a7f29b", "patch": "diff --git a/docs/topics/i18n/translation.txt b/docs/topics/i18n/translation.txt\nindex 41bee79204e4..273e85691053 100644\n--- a/docs/topics/i18n/translation.txt\n+++ b/docs/topics/i18n/translation.txt\n@@ -515,14 +515,18 @@ pass the translatable string as argument to another function, you can wrap\n this function inside a lazy call yourself. For example::\n \n     from django.utils.functional import lazy\n-    from django.utils.safestring import mark_safe\n     from django.utils.translation import gettext_lazy as _\n \n-    mark_safe_lazy = lazy(mark_safe, str)\n+\n+    def to_lower(string):\n+        return string.lower()\n+\n+\n+    to_lower_lazy = lazy(to_lower, str)\n \n And then later::\n \n-    lazy_string = mark_safe_lazy(_(\"<p>My <strong>string!</strong></p>\"))\n+    lazy_string = to_lower_lazy(_(\"My STRING!\"))\n \n Localized names of languages\n ----------------------------\n", "test_patch": "", "problem_statement": "Sample use of lazy in delayed translations is not valid in Django 4.1 and 4.2.\nDescription\n\t \nThe sample code to mark a lazy translation as \"safe\" in the docs \u200bhere seems to be invalid since Django 4.1 (#20296).\nWe're in the process of upgrading a Django 3.2 installation to Django 4.2 and we've used this utility mark_safe_lazy from the sample in our code. This code now produces the error __str__ returned non-string (type __proxy__) when rendering such a value in the templates.\nThe fix seems to simply use Django's mark_safe(gettext_lazy(...)) instead of this custom helper.\n", "hints_text": [["It was fixed in Django 5.0 (check out 066aabcb77579cf8d549119c860d11cd15e3eef1). Would you like to prepare a patch? (targeted to the stable/4.2.x).", 1696216073.0], ["Thanks for the information. I'm also happy that someone assigned itself to this, because this would be my first contribution and that would take some time... But just to be sure: the sample would work in Django 5.0 due to the fix you've mentioned, but this whole \u200bdocs block could actually be removed for Django >=4.1, because since then mark_safe() preserves lazy objects and therefore a custom helper like that mark_safe_lazy() isn't required anymore. Right?", 1696378842.0], ["Replying to Stefan Hammer: But just to be sure: the sample would work in Django 5.0 due to the fix you've mentioned, but this whole \u200bdocs block could actually be removed for Django >=4.1, because since then mark_safe() preserves lazy objects and therefore a custom helper like that mark_safe_lazy() isn't required anymore. Right? This example could stay but with a different function, or maybe it's not worth keeping \ud83e\udd37 Originally it was reported for mark_safe(). What do you think, Claude?", 1696382884.0], ["I think we might keep the section by using any string-related method of the standard lib, like isascii() for example.", 1696501873.0], ["\u200bPR", 1718094965.0]], "created_at": "2024-06-12T11:23:46Z"}
{"repo": "django/django", "pull_number": 18268, "instance_id": "django__django-18268", "issue_numbers": ["35520"], "base_commit": "704192e478885762411252979021771ba23b8adb", "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 9cc891d8077a..e8760c2931a7 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1814,6 +1814,9 @@ def _get_obj_does_not_exist_redirect(self, request, opts, object_id):\n \n     @csrf_protect_m\n     def changeform_view(self, request, object_id=None, form_url=\"\", extra_context=None):\n+        if request.method in (\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"):\n+            return self._changeform_view(request, object_id, form_url, extra_context)\n+\n         with transaction.atomic(using=router.db_for_write(self.model)):\n             return self._changeform_view(request, object_id, form_url, extra_context)\n \n@@ -2175,6 +2178,9 @@ def get_deleted_objects(self, objs, request):\n \n     @csrf_protect_m\n     def delete_view(self, request, object_id, extra_context=None):\n+        if request.method in (\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"):\n+            return self._delete_view(request, object_id, extra_context)\n+\n         with transaction.atomic(using=router.db_for_write(self.model)):\n             return self._delete_view(request, object_id, extra_context)\n \ndiff --git a/django/contrib/auth/admin.py b/django/contrib/auth/admin.py\nindex 90a53a142caa..8e1d63ef0713 100644\n--- a/django/contrib/auth/admin.py\n+++ b/django/contrib/auth/admin.py\n@@ -117,6 +117,9 @@ def lookup_allowed(self, lookup, value, request=None):\n     @sensitive_post_parameters_m\n     @csrf_protect_m\n     def add_view(self, request, form_url=\"\", extra_context=None):\n+        if request.method in (\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"):\n+            return self._add_view(request, form_url, extra_context)\n+\n         with transaction.atomic(using=router.db_for_write(self.model)):\n             return self._add_view(request, form_url, extra_context)\n \n", "test_patch": "diff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex 654161e11d80..0f18aeb31550 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -40,6 +40,7 @@ def book(request, book_id):\n @override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=[\"%s.Router\" % __name__])\n class MultiDatabaseTests(TestCase):\n     databases = {\"default\", \"other\"}\n+    READ_ONLY_METHODS = {\"get\", \"options\", \"head\", \"trace\"}\n \n     @classmethod\n     def setUpTestData(cls):\n@@ -56,48 +57,116 @@ def setUpTestData(cls):\n             b.save(using=db)\n             cls.test_book_ids[db] = b.id\n \n+    def tearDown(self):\n+        # Reset the routers' state between each test.\n+        Router.target_db = None\n+\n     @mock.patch(\"django.contrib.admin.options.transaction\")\n     def test_add_view(self, mock):\n         for db in self.databases:\n             with self.subTest(db=db):\n+                mock.mock_reset()\n                 Router.target_db = db\n                 self.client.force_login(self.superusers[db])\n-                self.client.post(\n+                response = self.client.post(\n                     reverse(\"test_adminsite:admin_views_book_add\"),\n                     {\"name\": \"Foobar: 5th edition\"},\n                 )\n+                self.assertEqual(response.status_code, 302)\n+                self.assertEqual(\n+                    response.url, reverse(\"test_adminsite:admin_views_book_changelist\")\n+                )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch(\"django.contrib.admin.options.transaction\")\n+    def test_read_only_methods_add_view(self, mock):\n+        for db in self.databases:\n+            for method in self.READ_ONLY_METHODS:\n+                with self.subTest(db=db, method=method):\n+                    mock.mock_reset()\n+                    Router.target_db = db\n+                    self.client.force_login(self.superusers[db])\n+                    response = getattr(self.client, method)(\n+                        reverse(\"test_adminsite:admin_views_book_add\"),\n+                    )\n+                    self.assertEqual(response.status_code, 200)\n+                    mock.atomic.assert_not_called()\n+\n     @mock.patch(\"django.contrib.admin.options.transaction\")\n     def test_change_view(self, mock):\n         for db in self.databases:\n             with self.subTest(db=db):\n+                mock.mock_reset()\n                 Router.target_db = db\n                 self.client.force_login(self.superusers[db])\n-                self.client.post(\n+                response = self.client.post(\n                     reverse(\n                         \"test_adminsite:admin_views_book_change\",\n                         args=[self.test_book_ids[db]],\n                     ),\n                     {\"name\": \"Test Book 2: Test more\"},\n                 )\n+                self.assertEqual(response.status_code, 302)\n+                self.assertEqual(\n+                    response.url, reverse(\"test_adminsite:admin_views_book_changelist\")\n+                )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch(\"django.contrib.admin.options.transaction\")\n+    def test_read_only_methods_change_view(self, mock):\n+        for db in self.databases:\n+            for method in self.READ_ONLY_METHODS:\n+                with self.subTest(db=db, method=method):\n+                    mock.mock_reset()\n+                    Router.target_db = db\n+                    self.client.force_login(self.superusers[db])\n+                    response = getattr(self.client, method)(\n+                        reverse(\n+                            \"test_adminsite:admin_views_book_change\",\n+                            args=[self.test_book_ids[db]],\n+                        ),\n+                        data={\"name\": \"Test Book 2: Test more\"},\n+                    )\n+                    self.assertEqual(response.status_code, 200)\n+                    mock.atomic.assert_not_called()\n+\n     @mock.patch(\"django.contrib.admin.options.transaction\")\n     def test_delete_view(self, mock):\n         for db in self.databases:\n             with self.subTest(db=db):\n+                mock.mock_reset()\n                 Router.target_db = db\n                 self.client.force_login(self.superusers[db])\n-                self.client.post(\n+                response = self.client.post(\n                     reverse(\n                         \"test_adminsite:admin_views_book_delete\",\n                         args=[self.test_book_ids[db]],\n                     ),\n                     {\"post\": \"yes\"},\n                 )\n+                self.assertEqual(response.status_code, 302)\n+                self.assertEqual(\n+                    response.url, reverse(\"test_adminsite:admin_views_book_changelist\")\n+                )\n                 mock.atomic.assert_called_with(using=db)\n \n+    @mock.patch(\"django.contrib.admin.options.transaction\")\n+    def test_read_only_methods_delete_view(self, mock):\n+        for db in self.databases:\n+            for method in self.READ_ONLY_METHODS:\n+                with self.subTest(db=db, method=method):\n+                    mock.mock_reset()\n+                    Router.target_db = db\n+                    self.client.force_login(self.superusers[db])\n+                    response = getattr(self.client, method)(\n+                        reverse(\n+                            \"test_adminsite:admin_views_book_delete\",\n+                            args=[self.test_book_ids[db]],\n+                        )\n+                    )\n+                    self.assertEqual(response.status_code, 200)\n+                    mock.atomic.assert_not_called()\n+\n \n class ViewOnSiteRouter:\n     def db_for_read(self, model, instance=None, **hints):\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 763fa44ce866..e0a4926b91b6 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -7385,7 +7385,7 @@ def test_user_permission_performance(self):\n         # Don't depend on a warm cache, see #17377.\n         ContentType.objects.clear_cache()\n \n-        expected_num_queries = 10 if connection.features.uses_savepoints else 8\n+        expected_num_queries = 8 if connection.features.uses_savepoints else 6\n         with self.assertNumQueries(expected_num_queries):\n             response = self.client.get(reverse(\"admin:auth_user_change\", args=(u.pk,)))\n             self.assertEqual(response.status_code, 200)\n@@ -7433,7 +7433,7 @@ def test_group_permission_performance(self):\n         # Ensure no queries are skipped due to cached content type for Group.\n         ContentType.objects.clear_cache()\n \n-        expected_num_queries = 8 if connection.features.uses_savepoints else 6\n+        expected_num_queries = 6 if connection.features.uses_savepoints else 4\n         with self.assertNumQueries(expected_num_queries):\n             response = self.client.get(reverse(\"admin:auth_group_change\", args=(g.pk,)))\n             self.assertEqual(response.status_code, 200)\ndiff --git a/tests/auth_tests/test_admin_multidb.py b/tests/auth_tests/test_admin_multidb.py\nindex ce2ae6b1030c..17b04faa6548 100644\n--- a/tests/auth_tests/test_admin_multidb.py\n+++ b/tests/auth_tests/test_admin_multidb.py\n@@ -30,6 +30,7 @@ def allow_relation(self, obj1, obj2, **hints):\n @override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=[\"%s.Router\" % __name__])\n class MultiDatabaseTests(TestCase):\n     databases = {\"default\", \"other\"}\n+    READ_ONLY_METHODS = {\"get\", \"options\", \"head\", \"trace\"}\n \n     @classmethod\n     def setUpTestData(cls):\n@@ -42,13 +43,17 @@ def setUpTestData(cls):\n                 email=\"test@test.org\",\n             )\n \n+    def tearDown(self):\n+        # Reset the routers' state between each test.\n+        Router.target_db = None\n+\n     @mock.patch(\"django.contrib.auth.admin.transaction\")\n     def test_add_view(self, mock):\n         for db in self.databases:\n             with self.subTest(db_connection=db):\n                 Router.target_db = db\n                 self.client.force_login(self.superusers[db])\n-                self.client.post(\n+                response = self.client.post(\n                     reverse(\"test_adminsite:auth_user_add\"),\n                     {\n                         \"username\": \"some_user\",\n@@ -56,4 +61,19 @@ def test_add_view(self, mock):\n                         \"password2\": \"helloworld\",\n                     },\n                 )\n+                self.assertEqual(response.status_code, 302)\n                 mock.atomic.assert_called_with(using=db)\n+\n+    @mock.patch(\"django.contrib.auth.admin.transaction\")\n+    def test_read_only_methods_add_view(self, mock):\n+        for db in self.databases:\n+            for method in self.READ_ONLY_METHODS:\n+                with self.subTest(db_connection=db, method=method):\n+                    mock.mock_reset()\n+                    Router.target_db = db\n+                    self.client.force_login(self.superusers[db])\n+                    response = getattr(self.client, method)(\n+                        reverse(\"test_adminsite:auth_user_add\")\n+                    )\n+                    self.assertEqual(response.status_code, 200)\n+                    mock.atomic.assert_not_called()\n", "problem_statement": "ModelAdmin uses incorrect database in change and delete views\nDescription\n\t \nIn ModelAdmin.delete_view and ModelAdmin.changelist_view, the transaction is hardcoded to use db_for_write, even if the request is read-only (eg GET). This potentially results in the wrong database being selected (or errors if db_for_write is used to prevent writing to models).\nI propose modifying these calls to use db_for_read if the request is read-only (request.method in (\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\")). Most users won't notice the difference, as the same database will be selected. But those who are using a custom router will get the database they expect.\n", "hints_text": [["I wonder if this is intentional to avoid any form of misrepresentation of data on reads due to factors like replication lag. Given the action is meant to be performed against the write database I could see it being the case.", 1718109605.0], ["9459ec82aa12cad9b859c54c2f33f50bec057f2e was added to resolve #26170 through \u200b!7143 where the point of data inconsistencies was not brought up. I think it's fair that using db_for_read for non-mutable HTTP requests was missed rather than intentional. I suspect we don't want to create a transaction in the first place if we're using db_for_read? I worry about admin extensions that might create access records against the write database and might start failing here.", 1718109848.0], ["I suspect we don't want to create a transaction in the first place if we're using db_for_read? Perhaps not, but keeping the transaction is less likely to break any existing behaviour, not to mention making more sure the view is internally consistent. Changing the database is going to be less impactful than removing a transaction. I worry about admin extensions that might create access records against the write database and might start failing here. Django's built-in LogEntry only logs writes (\"Addition\", \"Change\", \"Deletion\"), so simply viewing a model shouldn't trigger any writes. I could add a test for this, but not sure whether that's overkill.", 1718110961.0], ["\u200bPR", 1718113887.0]], "created_at": "2024-06-11T18:47:44Z"}
{"repo": "django/django", "pull_number": 18261, "instance_id": "django__django-18261", "issue_numbers": ["35537"], "base_commit": "62300b81cf7687d176af3b40aa6101942801292d", "patch": "diff --git a/django/core/mail/message.py b/django/core/mail/message.py\nindex 205c680561ca..7eee5da8b8ce 100644\n--- a/django/core/mail/message.py\n+++ b/django/core/mail/message.py\n@@ -1,4 +1,5 @@\n import mimetypes\n+from collections import namedtuple\n from email import charset as Charset\n from email import encoders as Encoders\n from email import generator, message_from_string\n@@ -190,6 +191,10 @@ def __setitem__(self, name, val):\n         MIMEMultipart.__setitem__(self, name, val)\n \n \n+Alternative = namedtuple(\"Alternative\", [\"content\", \"mimetype\"])\n+EmailAttachment = namedtuple(\"Attachment\", [\"filename\", \"content\", \"mimetype\"])\n+\n+\n class EmailMessage:\n     \"\"\"A container for email information.\"\"\"\n \n@@ -338,7 +343,7 @@ def attach(self, filename=None, content=None, mimetype=None):\n                         # actually binary, read() raises a UnicodeDecodeError.\n                         mimetype = DEFAULT_ATTACHMENT_MIME_TYPE\n \n-            self.attachments.append((filename, content, mimetype))\n+            self.attachments.append(EmailAttachment(filename, content, mimetype))\n \n     def attach_file(self, path, mimetype=None):\n         \"\"\"\n@@ -471,13 +476,15 @@ def __init__(\n             cc,\n             reply_to,\n         )\n-        self.alternatives = alternatives or []\n+        self.alternatives = [\n+            Alternative(*alternative) for alternative in (alternatives or [])\n+        ]\n \n     def attach_alternative(self, content, mimetype):\n         \"\"\"Attach an alternative content representation.\"\"\"\n         if content is None or mimetype is None:\n             raise ValueError(\"Both content and mimetype must be provided.\")\n-        self.alternatives.append((content, mimetype))\n+        self.alternatives.append(Alternative(content, mimetype))\n \n     def _create_message(self, msg):\n         return self._create_attachments(self._create_alternatives(msg))\n@@ -492,5 +499,9 @@ def _create_alternatives(self, msg):\n             if self.body:\n                 msg.attach(body_msg)\n             for alternative in self.alternatives:\n-                msg.attach(self._create_mime_attachment(*alternative))\n+                msg.attach(\n+                    self._create_mime_attachment(\n+                        alternative.content, alternative.mimetype\n+                    )\n+                )\n         return msg\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex fb2a1d017711..78006a33cb83 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -128,7 +128,15 @@ Decorators\n Email\n ~~~~~\n \n-* ...\n+* Tuple items of :class:`EmailMessage.attachments\n+  <django.core.mail.EmailMessage>` and\n+  :class:`EmailMultiAlternatives.attachments\n+  <django.core.mail.EmailMultiAlternatives>` are now named tuples, as opposed\n+  to regular tuples.\n+\n+* :attr:`EmailMultiAlternatives.alternatives\n+  <django.core.mail.EmailMultiAlternatives.alternatives>` is now a list of\n+  named tuples, as opposed to regular tuples.\n \n Error Reporting\n ~~~~~~~~~~~~~~~\ndiff --git a/docs/topics/email.txt b/docs/topics/email.txt\nindex 9b7b404ec108..1a283bdbb493 100644\n--- a/docs/topics/email.txt\n+++ b/docs/topics/email.txt\n@@ -282,8 +282,13 @@ All parameters are optional and can be set at any time prior to calling the\n   new connection is created when ``send()`` is called.\n \n * ``attachments``: A list of attachments to put on the message. These can\n-  be either :class:`~email.mime.base.MIMEBase` instances, or ``(filename,\n-  content, mimetype)`` triples.\n+  be either :class:`~email.mime.base.MIMEBase` instances, or a named tuple\n+  with attributes ``(filename, content, mimetype)``.\n+\n+  .. versionchanged:: 5.2\n+\n+    In older versions, tuple items of ``attachments`` were regular tuples,\n+    as opposed to named tuples.\n \n * ``headers``: A dictionary of extra headers to put on the message. The\n   keys are the header name, values are the header values. It's up to the\n@@ -392,10 +397,10 @@ Django's email library, you can do this using the\n \n .. class:: EmailMultiAlternatives\n \n-    A subclass of :class:`~django.core.mail.EmailMessage` that has an\n-    additional ``attach_alternative()`` method for including extra versions of\n-    the message body in the email. All the other methods (including the class\n-    initialization) are inherited directly from\n+    A subclass of :class:`~django.core.mail.EmailMessage` that allows\n+    additional versions of the message body in the email via the\n+    ``attach_alternative()`` method. This directly inherits all methods\n+    (including the class initialization) from\n     :class:`~django.core.mail.EmailMessage`.\n \n     .. method:: attach_alternative(content, mimetype)\n@@ -415,6 +420,24 @@ Django's email library, you can do this using the\n             msg.attach_alternative(html_content, \"text/html\")\n             msg.send()\n \n+    .. attribute:: alternatives\n+\n+        A list of named tuples with attributes ``(content, mimetype)``. This is\n+        particularly useful in tests::\n+\n+            self.assertEqual(len(msg.alternatives), 1)\n+            self.assertEqual(msg.alternatives[0].content, html_content)\n+            self.assertEqual(msg.alternatives[0].mimetype, \"text/html\")\n+\n+        Alternatives should only be added using the\n+        :meth:`~django.core.mail.EmailMultiAlternatives.attach_alternative`\n+        method.\n+\n+        .. versionchanged:: 5.2\n+\n+            In older versions, ``alternatives`` was a list of regular tuples, as opposed\n+            to named tuples.\n+\n Updating the default content type\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/logging_tests/tests.py b/tests/logging_tests/tests.py\nindex 610bdc112434..e58109fb78d5 100644\n--- a/tests/logging_tests/tests.py\n+++ b/tests/logging_tests/tests.py\n@@ -467,7 +467,7 @@ def test_emit_no_form_tag(self):\n         msg = mail.outbox[0]\n         self.assertEqual(msg.subject, \"[Django] ERROR: message\")\n         self.assertEqual(len(msg.alternatives), 1)\n-        body_html = str(msg.alternatives[0][0])\n+        body_html = str(msg.alternatives[0].content)\n         self.assertIn('<div id=\"traceback\">', body_html)\n         self.assertNotIn(\"<form\", body_html)\n \ndiff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex 4db752df5915..3746ede3380d 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -550,6 +550,18 @@ def test_safe_mime_multipart_with_attachments(self):\n         msg.attach(\"example.txt\", \"Text file content\", \"text/plain\")\n         self.assertIn(html_content, msg.message().as_string())\n \n+    def test_alternatives(self):\n+        msg = EmailMultiAlternatives()\n+        html_content = \"<p>This is <strong>html</strong></p>\"\n+        mime_type = \"text/html\"\n+        msg.attach_alternative(html_content, mime_type)\n+\n+        self.assertEqual(msg.alternatives[0][0], html_content)\n+        self.assertEqual(msg.alternatives[0].content, html_content)\n+\n+        self.assertEqual(msg.alternatives[0][1], mime_type)\n+        self.assertEqual(msg.alternatives[0].mimetype, mime_type)\n+\n     def test_none_body(self):\n         msg = EmailMessage(\"subject\", None, \"from@example.com\", [\"to@example.com\"])\n         self.assertEqual(msg.body, \"\")\n@@ -626,6 +638,22 @@ def test_encoding(self):\n         )\n \n     def test_attachments(self):\n+        msg = EmailMessage()\n+        file_name = \"example.txt\"\n+        file_content = \"Text file content\"\n+        mime_type = \"text/plain\"\n+        msg.attach(file_name, file_content, mime_type)\n+\n+        self.assertEqual(msg.attachments[0][0], file_name)\n+        self.assertEqual(msg.attachments[0].filename, file_name)\n+\n+        self.assertEqual(msg.attachments[0][1], file_content)\n+        self.assertEqual(msg.attachments[0].content, file_content)\n+\n+        self.assertEqual(msg.attachments[0][2], mime_type)\n+        self.assertEqual(msg.attachments[0].mimetype, mime_type)\n+\n+    def test_decoded_attachments(self):\n         \"\"\"Regression test for #9367\"\"\"\n         headers = {\"Date\": \"Fri, 09 Nov 2001 01:08:47 -0000\", \"Message-ID\": \"foo\"}\n         subject, from_email, to = \"hello\", \"from@example.com\", \"to@example.com\"\n@@ -645,14 +673,14 @@ def test_attachments(self):\n         self.assertEqual(payload[0].get_content_type(), \"multipart/alternative\")\n         self.assertEqual(payload[1].get_content_type(), \"application/pdf\")\n \n-    def test_attachments_two_tuple(self):\n+    def test_decoded_attachments_two_tuple(self):\n         msg = EmailMessage(attachments=[(\"filename1\", \"content1\")])\n         filename, content, mimetype = self.get_decoded_attachments(msg)[0]\n         self.assertEqual(filename, \"filename1\")\n         self.assertEqual(content, b\"content1\")\n         self.assertEqual(mimetype, \"application/octet-stream\")\n \n-    def test_attachments_MIMEText(self):\n+    def test_decoded_attachments_MIMEText(self):\n         txt = MIMEText(\"content1\")\n         msg = EmailMessage(attachments=[txt])\n         payload = msg.message().get_payload()\ndiff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 45a0dc70ee36..9383c0d873eb 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1463,7 +1463,7 @@ def verify_unsafe_email(self, view, check_for_POST_params=True):\n             self.assertNotIn(\"worcestershire\", body_plain)\n \n             # Frames vars are shown in html email reports.\n-            body_html = str(email.alternatives[0][0])\n+            body_html = str(email.alternatives[0].content)\n             self.assertIn(\"cooked_eggs\", body_html)\n             self.assertIn(\"scrambled\", body_html)\n             self.assertIn(\"sauce\", body_html)\n@@ -1499,7 +1499,7 @@ def verify_safe_email(self, view, check_for_POST_params=True):\n             self.assertNotIn(\"worcestershire\", body_plain)\n \n             # Frames vars are shown in html email reports.\n-            body_html = str(email.alternatives[0][0])\n+            body_html = str(email.alternatives[0].content)\n             self.assertIn(\"cooked_eggs\", body_html)\n             self.assertIn(\"scrambled\", body_html)\n             self.assertIn(\"sauce\", body_html)\n", "problem_statement": "Use a namedtuple for email attachments and alternatives\nDescription\n\t \nTicket to track: \u200bhttps://github.com/django/django/pull/18261\nThis makes unpacking the specific indexes more descriptive, whilst avoiding breaking any existing uses (since the field order hasn't changed).\nemail.alternatives[0][0] # before\nemail.alternatives[0].content #after\n", "hints_text": [], "created_at": "2024-06-09T09:34:08Z"}
{"repo": "django/django", "pull_number": 18259, "instance_id": "django__django-18259", "issue_numbers": ["22712"], "base_commit": "dfac15d57048432fd8ad3dd189276d1ef304fc4c", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex bd86da5b5726..ef5054fd1179 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -82,6 +82,7 @@ answer newbie questions, and generally made Django that much better:\n     Andreas Mock <andreas.mock@web.de>\n     Andreas Pelme <andreas@pelme.se>\n     Andr\u00e9s Torres Marroqu\u00edn <andres.torres.marroquin@gmail.com>\n+    Andreu Vallbona Plazas <avallbona@gmail.com>\n     Andrew Brehaut <https://brehaut.net/blog>\n     Andrew Clark <amclark7@gmail.com>\n     Andrew Durdin <adurdin@gmail.com>\ndiff --git a/django/contrib/staticfiles/finders.py b/django/contrib/staticfiles/finders.py\nindex 112a81d279d3..aca98b2b4914 100644\n--- a/django/contrib/staticfiles/finders.py\n+++ b/django/contrib/staticfiles/finders.py\n@@ -1,5 +1,6 @@\n import functools\n import os\n+import warnings\n \n from django.apps import apps\n from django.conf import settings\n@@ -8,6 +9,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.core.files.storage import FileSystemStorage, Storage, default_storage\n from django.utils._os import safe_join\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.functional import LazyObject, empty\n from django.utils.module_loading import import_string\n \n@@ -15,6 +17,32 @@\n searched_locations = []\n \n \n+# RemovedInDjango60Warning: When the deprecation ends, remove completely.\n+def _check_deprecated_find_param(class_name=\"\", find_all=False, **kwargs):\n+    method_name = \"find\" if not class_name else f\"{class_name}.find\"\n+    if \"all\" in kwargs:\n+        legacy_all = kwargs.pop(\"all\")\n+        msg = (\n+            \"Passing the `all` argument to find() is deprecated. Use `find_all` \"\n+            \"instead.\"\n+        )\n+        warnings.warn(msg, RemovedInDjango60Warning, stacklevel=2)\n+\n+        # If both `find_all` and `all` were given, raise TypeError.\n+        if find_all is not False:\n+            raise TypeError(\n+                f\"{method_name}() got multiple values for argument 'find_all'\"\n+            )\n+\n+        find_all = legacy_all\n+\n+    if kwargs:  # any remaining kwargs must be a TypeError\n+        first = list(kwargs.keys()).pop()\n+        raise TypeError(f\"{method_name}() got an unexpected keyword argument '{first}'\")\n+\n+    return find_all\n+\n+\n class BaseFinder:\n     \"\"\"\n     A base file finder to be used for custom staticfiles finder classes.\n@@ -26,12 +54,20 @@ def check(self, **kwargs):\n             \"configured correctly.\"\n         )\n \n-    def find(self, path, all=False):\n+    # RemovedInDjango60Warning: When the deprecation ends, remove completely.\n+    def _check_deprecated_find_param(self, **kwargs):\n+        return _check_deprecated_find_param(\n+            class_name=self.__class__.__qualname__, **kwargs\n+        )\n+\n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def find(self, path, find_all=False):\n+    def find(self, path, find_all=False, **kwargs):\n         \"\"\"\n         Given a relative file path, find an absolute file path.\n \n-        If the ``all`` parameter is False (default) return only the first found\n-        file path; if True, return a list of all found files paths.\n+        If the ``find_all`` parameter is False (default) return only the first\n+        found file path; if True, return a list of all found files paths.\n         \"\"\"\n         raise NotImplementedError(\n             \"subclasses of BaseFinder must provide a find() method\"\n@@ -113,17 +149,22 @@ def check(self, **kwargs):\n                 )\n         return errors\n \n-    def find(self, path, all=False):\n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def find(self, path, find_all=False):\n+    def find(self, path, find_all=False, **kwargs):\n         \"\"\"\n         Look for files in the extra locations as defined in STATICFILES_DIRS.\n         \"\"\"\n+        # RemovedInDjango60Warning.\n+        if kwargs:\n+            find_all = self._check_deprecated_find_param(find_all=find_all, **kwargs)\n         matches = []\n         for prefix, root in self.locations:\n             if root not in searched_locations:\n                 searched_locations.append(root)\n             matched_path = self.find_location(root, path, prefix)\n             if matched_path:\n-                if not all:\n+                if not find_all:\n                     return matched_path\n                 matches.append(matched_path)\n         return matches\n@@ -191,10 +232,15 @@ def list(self, ignore_patterns):\n                 for path in utils.get_files(storage, ignore_patterns):\n                     yield path, storage\n \n-    def find(self, path, all=False):\n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def find(self, path, find_all=False):\n+    def find(self, path, find_all=False, **kwargs):\n         \"\"\"\n         Look for files in the app directories.\n         \"\"\"\n+        # RemovedInDjango60Warning.\n+        if kwargs:\n+            find_all = self._check_deprecated_find_param(find_all=find_all, **kwargs)\n         matches = []\n         for app in self.apps:\n             app_location = self.storages[app].location\n@@ -202,7 +248,7 @@ def find(self, path, all=False):\n                 searched_locations.append(app_location)\n             match = self.find_in_app(app, path)\n             if match:\n-                if not all:\n+                if not find_all:\n                     return match\n                 matches.append(match)\n         return matches\n@@ -241,10 +287,15 @@ def __init__(self, storage=None, *args, **kwargs):\n             self.storage = self.storage()\n         super().__init__(*args, **kwargs)\n \n-    def find(self, path, all=False):\n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def find(self, path, find_all=False):\n+    def find(self, path, find_all=False, **kwargs):\n         \"\"\"\n         Look for files in the default file storage, if it's local.\n         \"\"\"\n+        # RemovedInDjango60Warning.\n+        if kwargs:\n+            find_all = self._check_deprecated_find_param(find_all=find_all, **kwargs)\n         try:\n             self.storage.path(\"\")\n         except NotImplementedError:\n@@ -254,7 +305,7 @@ def find(self, path, all=False):\n                 searched_locations.append(self.storage.location)\n             if self.storage.exists(path):\n                 match = self.storage.path(path)\n-                if all:\n+                if find_all:\n                     match = [match]\n                 return match\n         return []\n@@ -285,18 +336,23 @@ def __init__(self, *args, **kwargs):\n             )\n \n \n-def find(path, all=False):\n+# RemovedInDjango60Warning: When the deprecation ends, replace with:\n+# def find(path, find_all=False):\n+def find(path, find_all=False, **kwargs):\n     \"\"\"\n     Find a static file with the given path using all enabled finders.\n \n-    If ``all`` is ``False`` (default), return the first matching\n+    If ``find_all`` is ``False`` (default), return the first matching\n     absolute path (or ``None`` if no match). Otherwise return a list.\n     \"\"\"\n+    # RemovedInDjango60Warning.\n+    if kwargs:\n+        find_all = _check_deprecated_find_param(find_all=find_all, **kwargs)\n     searched_locations[:] = []\n     matches = []\n     for finder in get_finders():\n-        result = finder.find(path, all=all)\n-        if not all and result:\n+        result = finder.find(path, find_all=find_all)\n+        if not find_all and result:\n             return result\n         if not isinstance(result, (list, tuple)):\n             result = [result]\n@@ -304,7 +360,7 @@ def find(path, all=False):\n     if matches:\n         return matches\n     # No match.\n-    return [] if all else None\n+    return [] if find_all else None\n \n \n def get_finders():\ndiff --git a/django/contrib/staticfiles/management/commands/findstatic.py b/django/contrib/staticfiles/management/commands/findstatic.py\nindex 97413a64af86..1caebf8fa977 100644\n--- a/django/contrib/staticfiles/management/commands/findstatic.py\n+++ b/django/contrib/staticfiles/management/commands/findstatic.py\n@@ -19,7 +19,7 @@ def add_arguments(self, parser):\n \n     def handle_label(self, path, **options):\n         verbosity = options[\"verbosity\"]\n-        result = finders.find(path, all=options[\"all\"])\n+        result = finders.find(path, find_all=options[\"all\"])\n         if verbosity >= 2:\n             searched_locations = (\n                 \"\\nLooking in the following locations:\\n  %s\"\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 8b77ecc48245..bdc53493684a 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -279,4 +279,5 @@ Features deprecated in 5.2\n Miscellaneous\n -------------\n \n-* ...\n+* The ``all`` argument for the ``django.contrib.staticfiles.finders.find()``\n+  function is deprecated in favor of the ``find_all`` argument.\n", "test_patch": "diff --git a/tests/staticfiles_tests/test_finders.py b/tests/staticfiles_tests/test_finders.py\nindex 9f2509d53349..28870e6fbe28 100644\n--- a/tests/staticfiles_tests/test_finders.py\n+++ b/tests/staticfiles_tests/test_finders.py\n@@ -4,10 +4,15 @@\n from django.contrib.staticfiles import finders, storage\n from django.core.exceptions import ImproperlyConfigured\n from django.test import SimpleTestCase, override_settings\n+from django.utils.deprecation import RemovedInDjango60Warning\n \n from .cases import StaticFilesTestCase\n from .settings import TEST_ROOT\n \n+DEPRECATION_MSG = (\n+    \"Passing the `all` argument to find() is deprecated. Use `find_all` instead.\"\n+)\n+\n \n class TestFinders:\n     \"\"\"\n@@ -25,11 +30,49 @@ def test_find_first(self):\n \n     def test_find_all(self):\n         src, dst = self.find_all\n-        found = self.finder.find(src, all=True)\n+        found = self.finder.find(src, find_all=True)\n         found = [os.path.normcase(f) for f in found]\n         dst = [os.path.normcase(d) for d in dst]\n         self.assertEqual(found, dst)\n \n+    def test_find_all_deprecated_param(self):\n+        src, dst = self.find_all\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, DEPRECATION_MSG):\n+            found = self.finder.find(src, all=True)\n+            found = [os.path.normcase(f) for f in found]\n+            dst = [os.path.normcase(d) for d in dst]\n+            self.assertEqual(found, dst)\n+\n+    def test_find_all_conflicting_params(self):\n+        src, dst = self.find_all\n+        msg = (\n+            f\"{self.finder.__class__.__qualname__}.find() got multiple values for \"\n+            \"argument 'find_all'\"\n+        )\n+        with (\n+            self.assertWarnsMessage(RemovedInDjango60Warning, DEPRECATION_MSG),\n+            self.assertRaisesMessage(TypeError, msg),\n+        ):\n+            self.finder.find(src, find_all=True, all=True)\n+\n+    def test_find_all_unexpected_params(self):\n+        src, dst = self.find_all\n+        msg = (\n+            f\"{self.finder.__class__.__qualname__}.find() got an unexpected keyword \"\n+            \"argument 'wrong'\"\n+        )\n+        with (\n+            self.assertWarnsMessage(RemovedInDjango60Warning, DEPRECATION_MSG),\n+            self.assertRaisesMessage(TypeError, msg),\n+        ):\n+            self.finder.find(src, all=True, wrong=1)\n+\n+        with self.assertRaisesMessage(TypeError, msg):\n+            self.finder.find(src, find_all=True, wrong=1)\n+\n+        with self.assertRaisesMessage(TypeError, msg):\n+            self.finder.find(src, wrong=1)\n+\n \n class TestFileSystemFinder(TestFinders, StaticFilesTestCase):\n     \"\"\"\n@@ -114,6 +157,43 @@ def test_searched_locations(self):\n             [os.path.join(TEST_ROOT, \"project\", \"documents\")],\n         )\n \n+    def test_searched_locations_find_all(self):\n+        finders.find(\"spam\", find_all=True)\n+        self.assertEqual(\n+            finders.searched_locations,\n+            [os.path.join(TEST_ROOT, \"project\", \"documents\")],\n+        )\n+\n+    def test_searched_locations_deprecated_all(self):\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, DEPRECATION_MSG):\n+            finders.find(\"spam\", all=True)\n+            self.assertEqual(\n+                finders.searched_locations,\n+                [os.path.join(TEST_ROOT, \"project\", \"documents\")],\n+            )\n+\n+    def test_searched_locations_conflicting_params(self):\n+        msg = \"find() got multiple values for argument 'find_all'\"\n+        with (\n+            self.assertWarnsMessage(RemovedInDjango60Warning, DEPRECATION_MSG),\n+            self.assertRaisesMessage(TypeError, msg),\n+        ):\n+            finders.find(\"spam\", find_all=True, all=True)\n+\n+    def test_searched_locations_unexpected_params(self):\n+        msg = \"find() got an unexpected keyword argument 'wrong'\"\n+        with (\n+            self.assertWarnsMessage(RemovedInDjango60Warning, DEPRECATION_MSG),\n+            self.assertRaisesMessage(TypeError, msg),\n+        ):\n+            finders.find(\"spam\", all=True, wrong=1)\n+\n+        with self.assertRaisesMessage(TypeError, msg):\n+            finders.find(\"spam\", find_all=True, wrong=1)\n+\n+        with self.assertRaisesMessage(TypeError, msg):\n+            finders.find(\"spam\", wrong=1)\n+\n     @override_settings(MEDIA_ROOT=\"\")\n     def test_location_empty(self):\n         msg = (\n", "problem_statement": "Consider not using built-in functions as parameters\nDescription\n\t\t\n(last modified by Anton Samarchyan)\t\t\nCurrently the staticfiles finders' find function has a parameter all which is also a built-in function. Personally, I consider using built-ins as parameters/variables to be bad form, and would usually just rename the parameter in my subclasses. Unfortunately, find is explicitly called with all=all in django.contrib.staticfiles.finders.find(). So, to use the built in all() one needs to use from __builtin__ import all as all_.\nThere are probably more examples throughout the codebase, but this is the one I've run into.\n", "hints_text": [["Unfortunately, I think changing this is not going to be worth it, backwards compatibility wise. Will leave it open for a second opinion though.", 1401302313.0], ["Couldn't the arguments undergo the normal django deprecation cycle? For two version accept both, but issue a warning if the builtin version is used.", 1401365600.0], ["The all kwarg is a private API, so we can change it. However, we should check whether this is going to break popular third-party addons. (I don't know the staticfiles landscape very well.)", 1402052835.0], ["I think I can work on this ticket. I've created a draft pull request \u200bPR Let me know what do you think about it.", 1717869076.0]], "created_at": "2024-06-08T18:44:50Z"}
{"repo": "django/django", "pull_number": 18252, "instance_id": "django__django-18252", "issue_numbers": ["34881"], "base_commit": "d28626ecf8bd340084ed70ff2d88e8dbab001e2c", "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 34b14107a7eb..9aad9c809ee7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -460,11 +460,11 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n                     model = new_model\n                     related_key = (app_label, self.new_name_lower)\n                 else:\n-                    model = related_object.related_model\n                     related_key = (\n                         related_object.related_model._meta.app_label,\n                         related_object.related_model._meta.model_name,\n                     )\n+                    model = to_state.apps.get_model(*related_key)\n                 to_field = to_state.apps.get_model(*related_key)._meta.get_field(\n                     related_object.field.name\n                 )\n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 1caa6479562d..6d1435818f51 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1345,6 +1345,89 @@ def test_rename_m2m_model_after_rename_field(self):\n         ponyrider = PonyRider.objects.create()\n         ponyrider.riders.add(jockey)\n \n+    def test_rename_m2m_field_with_2_references(self):\n+        app_label = \"test_rename_multiple_references\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    name=\"Person\",\n+                    fields=[\n+                        (\n+                            \"id\",\n+                            models.BigAutoField(\n+                                auto_created=True,\n+                                primary_key=True,\n+                                serialize=False,\n+                                verbose_name=\"ID\",\n+                            ),\n+                        ),\n+                        (\"name\", models.CharField(max_length=255)),\n+                    ],\n+                ),\n+                migrations.CreateModel(\n+                    name=\"Relation\",\n+                    fields=[\n+                        (\n+                            \"id\",\n+                            models.BigAutoField(\n+                                auto_created=True,\n+                                primary_key=True,\n+                                serialize=False,\n+                                verbose_name=\"ID\",\n+                            ),\n+                        ),\n+                        (\n+                            \"child\",\n+                            models.ForeignKey(\n+                                on_delete=models.CASCADE,\n+                                related_name=\"relations_as_child\",\n+                                to=\"test_rename_multiple_references.person\",\n+                            ),\n+                        ),\n+                        (\n+                            \"parent\",\n+                            models.ForeignKey(\n+                                on_delete=models.CASCADE,\n+                                related_name=\"relations_as_parent\",\n+                                to=\"test_rename_multiple_references.person\",\n+                            ),\n+                        ),\n+                    ],\n+                ),\n+                migrations.AddField(\n+                    model_name=\"person\",\n+                    name=\"parents_or_children\",\n+                    field=models.ManyToManyField(\n+                        blank=True,\n+                        through=\"test_rename_multiple_references.Relation\",\n+                        to=\"test_rename_multiple_references.person\",\n+                    ),\n+                ),\n+            ],\n+        )\n+        Person = project_state.apps.get_model(app_label, \"Person\")\n+        Relation = project_state.apps.get_model(app_label, \"Relation\")\n+\n+        person1 = Person.objects.create(name=\"John Doe\")\n+        person2 = Person.objects.create(name=\"Jane Smith\")\n+        Relation.objects.create(child=person2, parent=person1)\n+\n+        self.assertTableExists(app_label + \"_person\")\n+        self.assertTableNotExists(app_label + \"_personfoo\")\n+\n+        self.apply_operations(\n+            app_label,\n+            project_state,\n+            operations=[\n+                migrations.RenameModel(old_name=\"Person\", new_name=\"PersonFoo\"),\n+            ],\n+        )\n+\n+        self.assertTableNotExists(app_label + \"_person\")\n+        self.assertTableExists(app_label + \"_personfoo\")\n+\n     def test_add_field(self):\n         \"\"\"\n         Tests the AddField operation.\n", "problem_statement": "migrate crashes when renaming model referenced twice by ManyToManyField.through model on SQLite.\nDescription\n\t\t\n(last modified by dennisvang)\t\t\nDescription\nPlease consider the (contrived) minimal example below, part of an app called myapp:\nclass Person(models.Model):\n\tname = models.CharField(max_length=255)\n\tparents_or_children = models.ManyToManyField(\n\t\tto='self', through='myapp.Relation', blank=True\n\t)\nclass Relation(models.Model):\n\tparent = models.ForeignKey(\n\t\tto='myapp.Person',\n\t\trelated_name='relations_as_parent',\n\t\ton_delete=models.CASCADE,\n\t)\n\tchild = models.ForeignKey(\n\t\tto='myapp.Person',\n\t\trelated_name='relations_as_child',\n\t\ton_delete=models.CASCADE,\n\t)\nNow suppose I rename the Person model to Foo and update corresponding references.\nThen I run manage.py makemigrations, which correctly recognizes that the model has been renamed.\nNow, applying this migration to an empty database works, without issue, but applying the migration to a database with existing data fails with an IntegrityError.\nSteps to reproduce\nstart a new project, start a new app called myapp, with models as above.\nrun makemigrations and migrate\nLoad (valid) data from the following fixture:\n[\n {\"model\": \"myapp.person\", \"pk\": 1, \"fields\": {\"name\": \"Jenny\"}}, \n {\"model\": \"myapp.person\", \"pk\": 2, \"fields\": {\"name\": \"Johnny\"}}, \n {\"model\": \"myapp.person\", \"pk\": 3, \"fields\": {\"name\": \"Mom\"}}, \n {\"model\": \"myapp.person\", \"pk\": 4, \"fields\": {\"name\": \"Dad\"}}, \n {\"model\": \"myapp.relation\", \"pk\": 1, \"fields\": {\"parent\": 3, \"child\": 1}},\n {\"model\": \"myapp.relation\", \"pk\": 2, \"fields\": {\"parent\": 3, \"child\": 2}},\n {\"model\": \"myapp.relation\", \"pk\": 3, \"fields\": {\"parent\": 4, \"child\": 1}}, \n {\"model\": \"myapp.relation\", \"pk\": 4, \"fields\": {\"parent\": 4, \"child\": 2}}\n]\nrename the Person model to e.g. Foo and update all references in code\nrun makemigrations and migrate again\nWhat happens\nThe migrate command fails with\ndjango.db.utils.IntegrityError: The row in table 'myapp_relation' with primary key '1' has an invalid foreign key: myapp_relation.child_id contains a value '1' that does not have a corresponding value in myapp_person.id.\nBut a Person with id=1 does exist in the database.\nWhat I would expect to happen\nI would expect this to work without any problems.\nNotes\nI also tried the same steps with an implicit through model , i.e. children = models.ManyToManyField(to='self', blank=True).\nThis works without issue.\n", "hints_text": [["Hello! Thank you for your ticket. Could you please attach the migrations generated by each of the makemigrations runs?", 1695909648.0], ["Following the ticket description, I have been able to reproduce. Migrations are attached, and SQLs are: 0001 BEGIN; -- -- Create model Person -- CREATE TABLE \"ticket_34881_person\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"name\" varchar(255) NOT NULL); -- -- Create model Relation -- CREATE TABLE \"ticket_34881_relation\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"child_id\" bigint NOT NULL REFERENCES \"ticket_34881_person\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"parent_id\" bigint NOT NULL REFERENCES \"ticket_34881_person\" (\"id\") DEFERRABLE INITIALLY DEFERRED); -- -- Add field parents_or_children to person -- CREATE TABLE \"new__ticket_34881_person\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"name\" varchar(255) NOT NULL); INSERT INTO \"new__ticket_34881_person\" (\"id\", \"name\") SELECT \"id\", \"name\" FROM \"ticket_34881_person\"; DROP TABLE \"ticket_34881_person\"; ALTER TABLE \"new__ticket_34881_person\" RENAME TO \"ticket_34881_person\"; CREATE INDEX \"ticket_34881_relation_child_id_77021f7a\" ON \"ticket_34881_relation\" (\"child_id\"); CREATE INDEX \"ticket_34881_relation_parent_id_20447c41\" ON \"ticket_34881_relation\" (\"parent_id\"); COMMIT; 0002 (I renamed Person to PersonFoo) BEGIN; -- -- Rename model Person to PersonFoo -- ALTER TABLE \"ticket_34881_person\" RENAME TO \"ticket_34881_personfoo\"; CREATE TABLE \"new__ticket_34881_relation\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"child_id\" bigint NOT NULL REFERENCES \"ticket_34881_personfoo\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"parent_id\" bigint NOT NULL REFERENCES \"ticket_34881_person\" (\"id\") DEFERRABLE INITIALLY DEFERRED); INSERT INTO \"new__ticket_34881_relation\" (\"id\", \"parent_id\", \"child_id\") SELECT \"id\", \"parent_id\", \"child_id\" FROM \"ticket_34881_relation\"; DROP TABLE \"ticket_34881_relation\"; ALTER TABLE \"new__ticket_34881_relation\" RENAME TO \"ticket_34881_relation\"; CREATE INDEX \"ticket_34881_relation_child_id_77021f7a\" ON \"ticket_34881_relation\" (\"child_id\"); CREATE INDEX \"ticket_34881_relation_parent_id_20447c41\" ON \"ticket_34881_relation\" (\"parent_id\"); CREATE TABLE \"new__ticket_34881_relation\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"parent_id\" bigint NOT NULL REFERENCES \"ticket_34881_personfoo\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"child_id\" bigint NOT NULL REFERENCES \"ticket_34881_person\" (\"id\") DEFERRABLE INITIALLY DEFERRED); INSERT INTO \"new__ticket_34881_relation\" (\"id\", \"child_id\", \"parent_id\") SELECT \"id\", \"child_id\", \"parent_id\" FROM \"ticket_34881_relation\"; DROP TABLE \"ticket_34881_relation\"; ALTER TABLE \"new__ticket_34881_relation\" RENAME TO \"ticket_34881_relation\"; CREATE INDEX \"ticket_34881_relation_parent_id_20447c41\" ON \"ticket_34881_relation\" (\"parent_id\"); CREATE INDEX \"ticket_34881_relation_child_id_77021f7a\" ON \"ticket_34881_relation\" (\"child_id\"); COMMIT;", 1695916325.0], ["Assuming a simpler model for Person where the M2M is implicit, and doing the rename, does indeed work. The SQL for the migration is: 0003 (renamed SimplerPerson to SimplerPersonFoo) BEGIN; -- -- Rename model SimplerPerson to SimplerPersonFoo -- ALTER TABLE \"ticket_34881_simplerperson\" RENAME TO \"ticket_34881_simplerpersonfoo\"; CREATE TABLE \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"from_simplerpersonfoo_id\" bigint NOT NULL REFERENCES \"ticket_34881_simplerpersonfoo\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"to_simplerpersonfoo_id\" bigint NOT NULL REFERENCES \"ticket_34881_simplerpersonfoo\" (\"id\") DEFERRABLE INITIALLY DEFERRED); INSERT INTO \"ticket_34881_simplerpersonfoo_parents_or_children\" (id, from_simplerpersonfoo_id, to_simplerpersonfoo_id) SELECT id, from_simplerperson_id, to_simplerperson_id FROM \"ticket_34881_simplerperson_parents_or_children\"; DROP TABLE \"ticket_34881_simplerperson_parents_or_children\"; CREATE UNIQUE INDEX \"ticket_34881_simplerpersonfoo_parents_or_children_from_simplerpersonfoo_id_to_simplerpersonfoo_id_f05f0b12_uniq\" ON \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"from_simplerpersonfoo_id\", \"to_simplerpersonfoo_id\"); CREATE INDEX \"ticket_34881_simplerpersonfoo_parents_or_children_from_simplerpersonfoo_id_6d3cdfb4\" ON \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"from_simplerpersonfoo_id\"); CREATE INDEX \"ticket_34881_simplerpersonfoo_parents_or_children_to_simplerpersonfoo_id_83aff647\" ON \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"to_simplerpersonfoo_id\"); COMMIT; It's worth noting that the content of the explicit M2M (Relation) has these rows: sqlite> SELECT * FROM ticket_34881_relation; 1|1|3 2|2|3 3|1|4 4|2|4 While the rows for the implicit one include: sqlite> SELECT * FROM ticket_34881_simplerperson_parents_or_children; 1|3|1 2|3|2 3|1|3 4|2|3 5|4|1 6|4|2 7|1|4 8|2|4 It may look like a valid issue but I'll cc Simon and Mariusz for a second opinion.", 1695917143.0], ["Thanks for the report. As far as I'm aware, this is an issue only on SQLite, caused by remaking a table twice, where the second remake doesn't take into account the first alteration.", 1695952403.0], ["Replying to Natalia Bidart: Assuming a simpler model for Person where the M2M is implicit, and doing the rename, does indeed work. The SQL for the migration is: 0003 (renamed SimplerPerson to SimplerPersonFoo) BEGIN; -- -- Rename model SimplerPerson to SimplerPersonFoo -- ALTER TABLE \"ticket_34881_simplerperson\" RENAME TO \"ticket_34881_simplerpersonfoo\"; CREATE TABLE \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"from_simplerpersonfoo_id\" bigint NOT NULL REFERENCES \"ticket_34881_simplerpersonfoo\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"to_simplerpersonfoo_id\" bigint NOT NULL REFERENCES \"ticket_34881_simplerpersonfoo\" (\"id\") DEFERRABLE INITIALLY DEFERRED); INSERT INTO \"ticket_34881_simplerpersonfoo_parents_or_children\" (id, from_simplerpersonfoo_id, to_simplerpersonfoo_id) SELECT id, from_simplerperson_id, to_simplerperson_id FROM \"ticket_34881_simplerperson_parents_or_children\"; DROP TABLE \"ticket_34881_simplerperson_parents_or_children\"; CREATE UNIQUE INDEX \"ticket_34881_simplerpersonfoo_parents_or_children_from_simplerpersonfoo_id_to_simplerpersonfoo_id_f05f0b12_uniq\" ON \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"from_simplerpersonfoo_id\", \"to_simplerpersonfoo_id\"); CREATE INDEX \"ticket_34881_simplerpersonfoo_parents_or_children_from_simplerpersonfoo_id_6d3cdfb4\" ON \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"from_simplerpersonfoo_id\"); CREATE INDEX \"ticket_34881_simplerpersonfoo_parents_or_children_to_simplerpersonfoo_id_83aff647\" ON \"ticket_34881_simplerpersonfoo_parents_or_children\" (\"to_simplerpersonfoo_id\"); COMMIT; It's worth noting that the content of the explicit M2M (Relation) has these rows: sqlite> SELECT * FROM ticket_34881_relation; 1|1|3 2|2|3 3|1|4 4|2|4 While the rows for the implicit one include: sqlite> SELECT * FROM ticket_34881_simplerperson_parents_or_children; 1|3|1 2|3|2 3|1|3 4|2|3 5|4|1 6|4|2 7|1|4 8|2|4 It may look like a valid issue but I'll cc Simon and Mariusz for a second opinion. Thanks for reproducing this. :-) You are right, for the implicit M2M relation, I should have set symmetrical=False in order to get the equivalent of my explicit Relation. However, the rename also works fine for the implicit case with symmetrical=False.", 1695991274.0], ["I'm taking part in the DjangoCon US Sprints and am going to try and fix this issue.", 1697715137.0], ["I spent some time digging into this today. To account for the unique nature of sqlite a _remake_table() \u200blink method was added to recreate the table under the various conditions under which it is required for table schema changes \u200bsqlite docs. The problem is that the code is not aware of previous calls of _remake_table() or if multiple will be required for a single table. To fix this I am going to try to aggregate all of the alter statements into a single call, resulting in a single create statement. To accomplish this I added an alter_fields() method to BaseDatabaseSchemaEditor that is passed a list of tuples to of the fields to be updated. It then loops over those fields to call the original alter_field() method. So far the new method is only being called in RenameModel. \u200bSee commit with current progress I next plan override this new method in the sqlite DatabaseSchemaEditor to allow for new logic that aggregates the alter statements into a single remake of the table. I'm going to continue down this path unless anyone has feedback, or recommendations towards a different approach.", 1697742963.0], ["I made some progress on this: Created a regression test for the issue \u200bcommit link In the SQLite DatabaseSchemaEditor I laid out all the code paths that are possible. I still need to implement the one that will be the new single table rebuild. \u200bcommit link I have the beginnings of tests for all the code paths for alter_fields(). I'm still working out how to properly assert that I am getting the results I want, but I validated that each case is hitting to correct conditional via breakpoint. \u200bcommit link containing current alter_fields code Right now it is looking like I will need to repeat a lot of the logic super().alter_field() and from self._alter_field() to ensure all of the validation is consistent. So next I'm going to look into breaking some of that out into private method to keep things a bit more dry. \u200bfull set of changes so far", 1697815041.0], ["Thanks for working on this patch during DjangConUS Jase! From reviewing your changes and tests I get a sense that there might be an even less invasive way to address this particular issue. The crux of the problem here, as you've identified it, is the SQLite backend needs to rebuild the table entirely and it cannot be done from an old representation of the model iteratively. By the time alter_field is called the columns of the tables related to the one being renamed are already altered in the database (a RENAME operation repoints all referencing columns) so it should be safe to provide the model originating from to_state \u200blike we do when dealing with self-referencing related objects. By retrieving the model meant to be passed to alter_field from to to_state django/db/migrations/operations/models.py diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py index d616cafb45..83e3fb772d 100644 a b def database_forwards(self, app_label, schema_editor, from_state, to_state): 421421 model = new_model 422422 related_key = (app_label, self.new_name_lower) 423423 else: 424 model = related_object.related_model 425424 related_key = ( 426425 related_object.related_model._meta.app_label, 427426 related_object.related_model._meta.model_name, 428427 ) 428 model = to_state.apps.get_model(*related_key) 429429 to_field = to_state.apps.get_model(*related_key)._meta.get_field( 430430 related_object.field.name 431431 ) The tests seem to be passing. I think that your work on alter_fields might be beneficial to support tickets like #24203 but might not be strictly necessary to address this particular issue.", 1698192402.0], ["I have picked this ticket up at the DjangoCon Europe sprint and opened a PR that adds Jase's test and Simon's solution: \u200bhttps://github.com/django/django/pull/18252", 1717837763.0], ["In e99187e: Fixed #34881 -- Fixed a crash when renaming a model with multiple ManyToManyField.through references on SQLite. Thank you to dennisvang for the report and Jase Hackman for the test. Co-authored-by: Jase Hackman <jase.hackman@\u2026>", 1718275767.0]], "created_at": "2024-06-08T13:49:40Z"}
{"repo": "django/django", "pull_number": 18251, "instance_id": "django__django-18251", "issue_numbers": ["35505"], "base_commit": "a0c44d4e23f8f509757f97f28fbbb1ced3382361", "patch": "diff --git a/django/contrib/admin/templates/admin/base.html b/django/contrib/admin/templates/admin/base.html\nindex f01a7ab61ce2..18e3a2a9fce2 100644\n--- a/django/contrib/admin/templates/admin/base.html\n+++ b/django/contrib/admin/templates/admin/base.html\n@@ -121,5 +121,6 @@\n   <symbol viewBox=\"0 0 24 24\" width=\"1rem\" height=\"1rem\" id=\"icon-sun\"><path d=\"M0 0h24v24H0z\" fill=\"currentColor\"/><path d=\"M12 18a6 6 0 1 1 0-12 6 6 0 0 1 0 12zm0-2a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM11 1h2v3h-2V1zm0 19h2v3h-2v-3zM3.515 4.929l1.414-1.414L7.05 5.636 5.636 7.05 3.515 4.93zM16.95 18.364l1.414-1.414 2.121 2.121-1.414 1.414-2.121-2.121zm2.121-14.85l1.414 1.415-2.121 2.121-1.414-1.414 2.121-2.121zM5.636 16.95l1.414 1.414-2.121 2.121-1.414-1.414 2.121-2.121zM23 11v2h-3v-2h3zM4 11v2H1v-2h3z\"/></symbol>\n </svg>\n <!-- END SVGs -->\n+{% block extrabody %}{% endblock extrabody %}\n </body>\n </html>\ndiff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 20f2ce758255..504ab62368c2 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -2827,6 +2827,32 @@ linked to the document in ``{% block dark-mode-vars %}``.\n \n .. _prefers-color-scheme: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\n \n+.. _extrabody:\n+\n+``extrabody`` block\n+===================\n+\n+.. versionadded:: 5.2\n+\n+You can add custom HTML, JavaScript, or other content to appear just before the\n+closing ``</body>`` tag of templates that extend ``admin/base.html`` by\n+extending the ``extrabody`` block. For example, if you want an alert to appear\n+on page load you could add a ``admin/base.html`` template override to your\n+project:\n+\n+.. code-block:: html+django\n+\n+    {% extends 'admin/base.html' %}\n+\n+    {% block extrabody %}\n+        {{ block.super }}\n+        <script>\n+            document.addEventListener('DOMContentLoaded', function() {\n+                window.alert('Welcome!');\n+            });\n+        </script>\n+    {% endblock extrabody %}\n+\n ``AdminSite`` objects\n =====================\n \ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex fb2a1d017711..0a0cfb0aef3e 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -37,7 +37,9 @@ Minor features\n :mod:`django.contrib.admin`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* The ``admin/base.html`` template now has a new block\n+  :ref:`extrabody <extrabody>` for adding custom code before the closing\n+  ``</body>`` tag.\n \n :mod:`django.contrib.admindocs`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "test_patch": "diff --git a/tests/admin_views/templates/admin/base_site.html b/tests/admin_views/templates/admin/base_site.html\nindex 97145712899f..27158e9e4460 100644\n--- a/tests/admin_views/templates/admin/base_site.html\n+++ b/tests/admin_views/templates/admin/base_site.html\n@@ -1,3 +1,5 @@\n {% extends \"admin/base.html\" %}\n \n {% block bodyclass %}bodyclass_consistency_check{% endblock %}\n+\n+{% block extrabody %}extrabody_check{% endblock extrabody %}\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex cb6815e7a85a..763fa44ce866 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -1746,6 +1746,10 @@ def test_extended_bodyclass_template_change_form(self):\n         response = self.client.get(reverse(\"admin:admin_views_section_add\"))\n         self.assertContains(response, \"bodyclass_consistency_check \")\n \n+    def test_extended_extrabody(self):\n+        response = self.client.get(reverse(\"admin:admin_views_section_add\"))\n+        self.assertContains(response, \"extrabody_check\\n</body>\")\n+\n     def test_change_password_template(self):\n         user = User.objects.get(username=\"super\")\n         response = self.client.get(\n", "problem_statement": "Add a template block to the admin for extension by third party apps\nDescription\n\t \nNaming TBD, but a block before the end of the body.\nPerhaps {% block extra_body %}, or...?\nOriginally proposed by Carlton as a way to allow keyboard shortcuts to exist as a third party app for a while.\n", "hints_text": [["Yes, a small block at the bottom would be a useful addition (similar to others we have in the head, for example).", 1717824673.0], ["PR can be found here: \u200bhttps://github.com/django/django/pull/18251", 1717836662.0]], "created_at": "2024-06-08T13:49:06Z"}
{"repo": "django/django", "pull_number": 18245, "instance_id": "django__django-18245", "issue_numbers": ["35488"], "base_commit": "2a32b233822683c51e59722b7c9aa0789fc4ab1b", "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4cda4e534e42..09be448984e1 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -23,6 +23,7 @@\n     SelectMultiple,\n )\n from django.utils.choices import BaseChoiceIterator\n+from django.utils.hashable import make_hashable\n from django.utils.text import capfirst, get_text_list\n from django.utils.translation import gettext\n from django.utils.translation import gettext_lazy as _\n@@ -834,8 +835,8 @@ def validate_unique(self):\n                     (\n                         d._get_pk_val()\n                         if hasattr(d, \"_get_pk_val\")\n-                        # Prevent \"unhashable type: list\" errors later on.\n-                        else tuple(d) if isinstance(d, list) else d\n+                        # Prevent \"unhashable type\" errors later on.\n+                        else make_hashable(d)\n                     )\n                     for d in row_data\n                 )\n", "test_patch": "diff --git a/tests/model_formsets/tests.py b/tests/model_formsets/tests.py\nindex f78772da5617..e5c026cee6d5 100644\n--- a/tests/model_formsets/tests.py\n+++ b/tests/model_formsets/tests.py\n@@ -1703,6 +1703,30 @@ class Meta:\n             [{}, {\"__all__\": [\"Please correct the duplicate values below.\"]}, {}],\n         )\n \n+    def test_inlineformset_with_jsonfield(self):\n+        class BookForm(forms.ModelForm):\n+            title = forms.JSONField()\n+\n+            class Meta:\n+                model = Book\n+                fields = (\"title\",)\n+\n+        BookFormSet = inlineformset_factory(Author, Book, form=BookForm)\n+        data = {\n+            \"book_set-TOTAL_FORMS\": \"3\",\n+            \"book_set-INITIAL_FORMS\": \"0\",\n+            \"book_set-MAX_NUM_FORMS\": \"\",\n+            \"book_set-0-title\": {\"test1\": \"test2\"},\n+            \"book_set-1-title\": {\"test1\": \"test2\"},\n+            \"book_set-2-title\": {\"test3\": \"test4\"},\n+        }\n+        author = Author.objects.create(name=\"test\")\n+        formset = BookFormSet(data, instance=author)\n+        self.assertEqual(\n+            formset.errors,\n+            [{}, {\"__all__\": [\"Please correct the duplicate values below.\"]}, {}],\n+        )\n+\n     def test_model_formset_with_custom_pk(self):\n         # a formset for a Model that has a custom primary key that still needs to be\n         # added to the formset automatically\n", "problem_statement": "BaseModelFormSet.validate_unique() raises unhashable type error for unique fields with unhashable types\nDescription\n\t \nGiven a User based on AbstractUser and a model:\nclass DestinationConfig(model.Model):\n\tclass Meta:\n\t\tconstraints = [models.UniqueConstraint(fields=[\"user\", \"settings\"], name=\"unique_destination_per_user\")]\n\tuser = models.ForeignKey(User, on_delete=models.CASCADE)\n\tsettings = models.JSONField()\nAdmin like so:\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nclass DestinationConfigInline(admin.TabularInline):\n\tmodel = DestinationConfig\n\tordering = [\"media\", \"label\"]\n\textra = 1\n\tdef get_formset(self, request, obj=None, **kwargs):\n\t\tself.parent_obj = obj\n\t\treturn super(DestinationConfigInline, self).get_formset(request, obj, **kwargs)\n\tdef get_queryset(self, request):\n\t\tqs = super(DestinationConfigInline, self).get_queryset(request)\n\t\treturn qs.filter(user=self.parent_obj)\nclass UserAdmin(BaseUserAdmin):\n\tinlines = [DestinationConfigInline]\nadmin.site.register(User, UserAdmin)\nThen attempting to save a change to a specific user leads to a traceback like this:\nEnvironment:\nRequest Method: POST\nRequest URL: https://ACENSORED.DOMAIN/admin/APP_auth/user/65/change/\nDjango Version: 5.0.6\nPython Version: 3.10.12\nInstalled Applications:\n['channels',\n 'django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles',\n 'corsheaders',\n 'social_django',\n 'rest_framework',\n 'rest_framework.authtoken',\n 'drf_spectacular',\n 'django_filters',\n 'phonenumber_field',\n 'argus.auth',\n 'argus.incident',\n 'argus.ws',\n 'argus.notificationprofile',\n 'argus.dev']\nInstalled Middleware:\n['django.middleware.security.SecurityMiddleware',\n 'corsheaders.middleware.CorsMiddleware',\n 'whitenoise.middleware.WhiteNoiseMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n 'social_django.middleware.SocialAuthExceptionMiddleware',\n 'django.contrib.auth.middleware.RemoteUserMiddleware']\nTraceback (most recent call last):\n File \"/usr/local/lib/python3.10/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n File \"/usr/local/lib/python3.10/site-packages/django/core/handlers/base.py\", line 197, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/admin/options.py\", line 688, in wrapper\n\treturn self.admin_site.admin_view(view)(*args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/utils/decorators.py\", line 134, in _wrapper_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/views/decorators/cache.py\", line 62, in _wrapper_view_func\n\tresponse = view_func(request, *args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/admin/sites.py\", line 242, in inner\n\treturn view(request, *args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/admin/options.py\", line 1889, in change_view\n\treturn self.changeform_view(request, object_id, form_url, extra_context)\n File \"/usr/local/lib/python3.10/site-packages/django/utils/decorators.py\", line 46, in _wrapper\n\treturn bound_method(*args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/utils/decorators.py\", line 134, in _wrapper_view\n\tresponse = view_func(request, *args, **kwargs)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/admin/options.py\", line 1747, in changeform_view\n\treturn self._changeform_view(request, object_id, form_url, extra_context)\n File \"/usr/local/lib/python3.10/site-packages/django/contrib/admin/options.py\", line 1797, in _changeform_view\n\tif all_valid(formsets) and form_validated:\n File \"/usr/local/lib/python3.10/site-packages/django/forms/formsets.py\", line 579, in all_valid\n\treturn all([formset.is_valid() for formset in formsets])\n File \"/usr/local/lib/python3.10/site-packages/django/forms/formsets.py\", line 579, in <listcomp>\n\treturn all([formset.is_valid() for formset in formsets])\n File \"/usr/local/lib/python3.10/site-packages/django/forms/formsets.py\", line 384, in is_valid\n\tself.errors\n File \"/usr/local/lib/python3.10/site-packages/django/forms/formsets.py\", line 366, in errors\n\tself.full_clean()\n File \"/usr/local/lib/python3.10/site-packages/django/forms/formsets.py\", line 456, in full_clean\n\tself.clean()\n File \"/usr/local/lib/python3.10/site-packages/django/forms/models.py\", line 789, in clean\n\tself.validate_unique()\n File \"/usr/local/lib/python3.10/site-packages/django/forms/models.py\", line 831, in validate_unique\n\tif row_data in seen_data:\nException Type: TypeError at /admin/APP_auth/user/65/change/\nException Value: unhashable type: 'dict'\nrow_data was ('user', {'email_address': 'CENSORED@ANOTHERCENSORED.DOMAIN', 'html': True})\nseen_data was set().\nIs it a design decision that JSONFields cannot be unique/in UniqueConstraints?\nIf yes, can it be documented, preferably with a note as to what to do if you *do* want a unique JSONField?\nIf no, can validate_unique be changed to work in this instance?\nThis has also been tested on:\nDjango Version: 4.2.11\nPython Version: 3.10.14\n", "hints_text": [["This is different to #23964 but could be fixed as part of #23964. Is it a design decision that JSONFields cannot be unique/in UniqueConstraints? No, looks like you have uncovered a bug specific to model formsets \ud83d\udc4d thank you for the report", 1716970781.0], ["The problem happens to manifests itself for JSONField with UniqueConstraint but it happens for any field with a non-hashable value that has a unique constraint defined on it. e.g. class FooBar(models.Model): settings = models.JSONField(unique=True) Would exhibit the same problem and the same could be said of HStoreField or other custom fields dealing with dict, set, and other non-hashable data types. Using django.utils.make_hashable in BaseModelFormSet.validate_unique seems like a potential low-lift solution but even this function can raise a TypeError if dealing with non-hashable value so maybe we're better off silencing these TypeError and let the model level unique constraint validation kick in. I think the latter would be a better approach because uniqueness on such fields cannot be determined at the Python level. For example, JSONField relies on the jsonb type on Postgres so the ordering of keys is not preserved which means that {\"foo\": \"bar\", \"bar\": \"foo\"} would be considered equal to {\"bar\": \"foo\", \"foo\": \"bar\"} but not on MySQL which json type is a basically longtext with JSON validation and preserves insertion order.", 1716971183.0], ["I think this has little to do with #23964 (which focuses on Meta.constraints) and is more of an analogous to #26819 (which was for another field using non-hashable types) but for JSONField. django/forms/models.py diff --git a/django/forms/models.py b/django/forms/models.py index 4cda4e534e..42feeac5c2 100644 a b 2323 SelectMultiple, 2424) 2525from django.utils.choices import BaseChoiceIterator 26from django.utils.hashable import make_hashable 2627from django.utils.text import capfirst, get_text_list 2728from django.utils.translation import gettext 2829from django.utils.translation import gettext_lazy as _ \u2026 \u2026 def validate_unique(self): 835836 d._get_pk_val() 836837 if hasattr(d, \"_get_pk_val\") 837838 # Prevent \"unhashable type: list\" errors later on. 838 else tuple(d) if isinstance(d, list) else d 839 else make_hashable(d) 839840 ) 840841 for d in row_data 841842 ) The problem IMO is that 06a11ef6ecf324db0a1530b8cca727883698f442 focused on one type on unhashable value instead of the generic problem.", 1716975003.0], ["Yes I agree, thank you Simon \ud83d\udc4d", 1716976520.0], ["Marking as easy picking as all that is required here is likely to submit a PR with the change above to use make_hashable and add a test similar to the one added in 06a11ef6ecf324db0a1530b8cca727883698f442 but using a form.JSONField instead. It might be a good one to pick up if you've never contributed to Django Hanne!", 1717006662.0], ["Created PR: \u200bhttps://github.com/django/django/pull/18245", 1717835684.0]], "created_at": "2024-06-08T13:10:47Z"}
{"repo": "django/django", "pull_number": 18240, "instance_id": "django__django-18240", "issue_numbers": ["35506"], "base_commit": "f302343380c77e1eb5dab3b64dd70895a95926ca", "patch": "diff --git a/docs/intro/tutorial01.txt b/docs/intro/tutorial01.txt\nindex f506fc605dc9..d00dd626ceba 100644\n--- a/docs/intro/tutorial01.txt\n+++ b/docs/intro/tutorial01.txt\n@@ -222,10 +222,25 @@ and put the following Python code in it:\n     def index(request):\n         return HttpResponse(\"Hello, world. You're at the polls index.\")\n \n-This is the simplest view possible in Django. To call the view, we need to map\n-it to a URL - and for this we need a URLconf.\n+This is the most basic view possible in Django. To access it in a browser, we\n+need to map it to a URL - and for this we need to define a URL configuration,\n+or \"URLconf\" for short. These URL configurations are defined inside each\n+Django app, and they are Python files named ``urls.py``.\n+\n+To define a URLconf for the ``polls`` app, create a file ``polls/urls.py``\n+with the following content:\n+\n+.. code-block:: python\n+    :caption: ``polls/urls.py``\n+\n+    from django.urls import path\n+\n+    from . import views\n+\n+    urlpatterns = [\n+        path(\"\", views.index, name=\"index\"),\n+    ]\n \n-To create a URLconf in the polls directory, create a file called ``urls.py``.\n Your app directory should now look like:\n \n .. code-block:: text\n@@ -241,21 +256,9 @@ Your app directory should now look like:\n         urls.py\n         views.py\n \n-In the ``polls/urls.py`` file include the following code:\n-\n-.. code-block:: python\n-    :caption: ``polls/urls.py``\n-\n-    from django.urls import path\n-\n-    from . import views\n-\n-    urlpatterns = [\n-        path(\"\", views.index, name=\"index\"),\n-    ]\n-\n-The next step is to point the root URLconf at the ``polls.urls`` module. In\n-``mysite/urls.py``, add an import for ``django.urls.include`` and insert an\n+The next step is to configure the global URLconf in the ``mysite`` project to\n+include the URLconf defined in ``polls.urls``. To do this, add an import for\n+``django.urls.include`` in ``mysite/urls.py`` and insert an\n :func:`~django.urls.include` in the ``urlpatterns`` list, so you have:\n \n .. code-block:: python\n", "test_patch": "", "problem_statement": "Rewrite confusing \"URLconf\" references in the Tutorial Part 1\nDescription\n\t \nThe term \"URLconf\" can be confusing and distracting for the user.\nIt is first mentioned with no context whatsoever, and it keeps getting used throughout the tutorial.\nAs the tutorial progresses, it just keeps getting more and more confusing. \nAt first it may seem like it is a class. At a second glance, it may seem like it's the name given to the urls.py file. At some point, it may even look like it's each \"path\" inside the urlpatterns variable.\nIt is important to not confuse the user with too many technical terms at this stage. Especially, since the user hasn't yet been able to see any result once it gets here.\n\u200bhttps://docs.djangoproject.com/en/dev/intro/tutorial01/#write-your-first-view\n", "hints_text": [["I'm skeptical that the \u200bproposed changes are an improvement. It's important not to do too many needless rewordings that require retranslation. I could see adding the term \"URLconf\" to \u200bthe glossary.", 1717842910.0]], "created_at": "2024-06-08T10:59:15Z"}
{"repo": "django/django", "pull_number": 18237, "instance_id": "django__django-18237", "issue_numbers": ["35483"], "base_commit": "fa7848146738a9fe1d415ee4808664e54739eeb7", "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4cda4e534e42..68d664a91a27 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -11,6 +11,7 @@\n     ImproperlyConfigured,\n     ValidationError,\n )\n+from django.core.validators import ProhibitNullCharactersValidator\n from django.db.models.utils import AltersData\n from django.forms.fields import ChoiceField, Field\n from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass\n@@ -1486,6 +1487,10 @@ def __init__(\n         self.limit_choices_to = limit_choices_to  # limit the queryset later.\n         self.to_field_name = to_field_name\n \n+    def validate_no_null_characters(self, value):\n+        non_null_character_validator = ProhibitNullCharactersValidator()\n+        return non_null_character_validator(value)\n+\n     def get_limit_choices_to(self):\n         \"\"\"\n         Return ``limit_choices_to`` for this form field.\n@@ -1550,6 +1555,7 @@ def prepare_value(self, value):\n     def to_python(self, value):\n         if value in self.empty_values:\n             return None\n+        self.validate_no_null_characters(value)\n         try:\n             key = self.to_field_name or \"pk\"\n             if isinstance(value, self.queryset.model):\n@@ -1630,6 +1636,7 @@ def _check_values(self, value):\n                 code=\"invalid_list\",\n             )\n         for pk in value:\n+            self.validate_no_null_characters(pk)\n             try:\n                 self.queryset.filter(**{key: pk})\n             except (ValueError, TypeError):\n", "test_patch": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex 19e9db69a058..83d801768aca 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -7,7 +7,7 @@\n from django.template import Context, Template\n from django.test import TestCase\n \n-from .models import Article, Author, Book, Category, Writer\n+from .models import Article, Author, Book, Category, ExplicitPK, Writer\n \n \n class ModelChoiceFieldTests(TestCase):\n@@ -79,6 +79,12 @@ def test_clean_to_field_name(self):\n         self.assertEqual(f.clean(self.c1.slug), self.c1)\n         self.assertEqual(f.clean(self.c1), self.c1)\n \n+    def test_model_choice_null_characters(self):\n+        f = forms.ModelChoiceField(queryset=ExplicitPK.objects.all())\n+        msg = \"Null characters are not allowed.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean(\"\\x00something\")\n+\n     def test_choices(self):\n         f = forms.ModelChoiceField(\n             Category.objects.filter(pk=self.c1.id), required=False\ndiff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 3f927cb0534c..c6e12e1aab51 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2227,6 +2227,15 @@ def test_model_multiple_choice_number_of_queries(self):\n         f = forms.ModelMultipleChoiceField(queryset=Writer.objects.all())\n         self.assertNumQueries(1, f.clean, [p.pk for p in persons[1:11:2]])\n \n+    def test_model_multiple_choice_null_characters(self):\n+        f = forms.ModelMultipleChoiceField(queryset=ExplicitPK.objects.all())\n+        msg = \"Null characters are not allowed.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean([\"\\x00something\"])\n+\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.clean([\"valid\", \"\\x00something\"])\n+\n     def test_model_multiple_choice_run_validators(self):\n         \"\"\"\n         ModelMultipleChoiceField run given validators (#14144).\n", "problem_statement": "ModelMultipleChoiceField with CharField key throws ValueError if data contains NUL (0x00) characters\nDescription\n\t \nIn a form using a ModelMultipleChoiceField with a model that has a CharField primary key, I'm getting server errors when a request submits input with a nul (0x00) character. This is resulting from a ValueError raised by the postgresql backend. It happens whether the data is submitted as a query string or in the request body.\nI've tried adding an explicit ProhibitNullCharactersValidator to the field, but this fails because the field's clean method runs validators after evaluating whether the input is a member of the queryset.\nA fairly minimal example that exhibits this is:\nclass MyModel(models.Model):\n\tslug = models.CharField(primary_key=True)\nclass MyForm(forms.Form):\n\tfield = forms.ModelMultipleChoiceField(queryset=MyModel.objects.all())\ndef my_view(request):\n\tform = MyForm(data=request.GET)\n\tif form.is_valid():\n\t\treturn HttpResponse(\"yay\")\n\treturn HttpResponse(\"boo\", status=400)\nWith that running, the following triggers the error:\n$ curl 'http://localhost:8000/my-view?field=hi%00'\nThe output from the Django dev server is\nERROR: django.request:241: Internal Server Error: /my-view\nTraceback (most recent call last):\n File \"/home/dev/.local/lib/python3.9/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n File \"/home/dev/.local/lib/python3.9/site-packages/django/core/handlers/base.py\", line 197, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n File \"/workspace/ietf/doc/views_search.py\", line 98, in my_view\n\tif form.is_valid():\n File \"/home/dev/.local/lib/python3.9/site-packages/django/forms/forms.py\", line 201, in is_valid\n\treturn self.is_bound and not self.errors\n File \"/home/dev/.local/lib/python3.9/site-packages/django/forms/forms.py\", line 196, in errors\n\tself.full_clean()\n File \"/home/dev/.local/lib/python3.9/site-packages/django/forms/forms.py\", line 433, in full_clean\n\tself._clean_fields()\n File \"/home/dev/.local/lib/python3.9/site-packages/django/forms/forms.py\", line 445, in _clean_fields\n\tvalue = field.clean(value)\n File \"/home/dev/.local/lib/python3.9/site-packages/django/forms/models.py\", line 1590, in clean\n\tqs = self._check_values(value)\n File \"/home/dev/.local/lib/python3.9/site-packages/django/forms/models.py\", line 1623, in _check_values\n\tpks = {str(getattr(o, key)) for o in qs}\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/models/query.py\", line 398, in __iter__\n\tself._fetch_all()\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/models/query.py\", line 1881, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/models/query.py\", line 91, in __iter__\n\tresults = compiler.execute_sql(\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/models/sql/compiler.py\", line 1562, in execute_sql\n\tcursor.execute(sql, params)\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/backends/utils.py\", line 102, in execute\n\treturn super().execute(sql, params)\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/backends/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/backends/utils.py\", line 80, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/home/dev/.local/lib/python3.9/site-packages/django/db/backends/utils.py\", line 89, in _execute\n\treturn self.cursor.execute(sql, params)\nValueError: A string literal cannot contain NUL (0x00) characters.\n[27/May/2024 08:02:37] \"GET /my-view?field=hi%00 HTTP/1.0\" 500 180131\nAs a workaround, replacing forms.ModelMultipleChoiceField with\nclass MyModelMultipleChoiceField(forms.ModelMultipleChoiceField):\n\tvalidate_no_nulls = validators.ProhibitNullCharactersValidator()\n\tdef clean(self, value):\n\t\tfor item in value:\n\t\t\tself.validate_no_nulls(item)\n\t\treturn super().clean(value)\ncorrectly handles the same input, with only \n[27/May/2024 08:04:22] \"GET /my-view?field=hi%00 HTTP/1.0\" 400 3\nin the server log.\nI'm seeing this with Django 4.2.13 using the postgresql backend with psycopg2 2.99 against PostgreSQL 14.6.\n", "hints_text": [["Replicated, thank you for the report! My failing test if it's useful tests/model_forms/tests.py diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py index 3f927cb053..16bdbf8d21 100644 a b class ModelMultipleChoiceFieldTests(TestCase): 22272227 f = forms.ModelMultipleChoiceField(queryset=Writer.objects.all()) 22282228 self.assertNumQueries(1, f.clean, [p.pk for p in persons[1:11:2]]) 22292229 2230 def test_model_multiple_choice_null_characters(self): 2231 f = forms.ModelMultipleChoiceField(queryset=ExplicitPK.objects.all()) 2232 msg = \"Null characters are not allowed.\" 2233 with self.assertRaisesMessage(ValidationError, msg): 2234 f.clean([\"\\x00something\"]) 2235 22302236 def test_model_multiple_choice_run_validators(self): 22312237 \"\"\" 22322238 ModelMultipleChoiceField run given validators (#14144). Relates to #28201.", 1716861545.0]], "created_at": "2024-06-08T10:27:00Z"}
{"repo": "django/django", "pull_number": 18233, "instance_id": "django__django-18233", "issue_numbers": ["35503"], "base_commit": "adae619426b6f50046b3daaa744db52989c9d6db", "patch": "diff --git a/docs/intro/tutorial01.txt b/docs/intro/tutorial01.txt\nindex cb296129c00e..2d57620a96ae 100644\n--- a/docs/intro/tutorial01.txt\n+++ b/docs/intro/tutorial01.txt\n@@ -64,18 +64,6 @@ work, see :ref:`troubleshooting-django-admin`.\n     ``django`` (which will conflict with Django itself) or ``test`` (which\n     conflicts with a built-in Python package).\n \n-.. admonition:: Where should this code live?\n-\n-    If your background is in plain old PHP (with no use of modern frameworks),\n-    you're probably used to putting code under the web server's document root\n-    (in a place such as ``/var/www``). With Django, you don't do that. It's\n-    not a good idea to put any of this Python code within your web server's\n-    document root, because it risks the possibility that people may be able\n-    to view your code over the web. That's not good for security.\n-\n-    Put your code in some directory **outside** of the document root, such as\n-    :file:`/home/mycode`.\n-\n Let's look at what :djadmin:`startproject` created:\n \n .. code-block:: text\n", "test_patch": "", "problem_statement": "Remove confusing documentation about PHP users.\nDescription\n\t \nReference to PHP may not be the best to include in beginners documentation at the time this ticket is being open. It may have made sense in 2007, but must seem perplexing to readers in 2024.\nWhere should this code live?\n\u200bhttps://docs.djangoproject.com/en/dev/intro/tutorial01/#creating-a-project\nThis ticket has been issued at the DjangoCon 2024 - Vigo, at the Sprints Days.\n", "hints_text": [["\u200bPR", 1717824687.0], ["In 6efbeb9: Fixed #35503 -- Removed distracting PHP reference in tutorial 1.", 1717832514.0], ["In 25df397: [5.0.x] Fixed #35503 -- Removed distracting PHP reference in tutorial 1. Backport of 6efbeb997cb0aa41555ac464a2b7579a37945b6a from main.", 1717832591.0], ["In 3372978: [5.1.x] Fixed #35503 -- Removed distracting PHP reference in tutorial 1. Backport of 6efbeb997cb0aa41555ac464a2b7579a37945b6a from main.", 1717832627.0]], "created_at": "2024-06-08T09:36:37Z"}
{"repo": "django/django", "pull_number": 18221, "instance_id": "django__django-18221", "issue_numbers": ["35417"], "base_commit": "8733e9af998f0009d62e4f0f3d5ee566e93a4893", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 56cda522029e..bd86da5b5726 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -375,6 +375,7 @@ answer newbie questions, and generally made Django that much better:\n     George Karpenkov <george@metaworld.ru>\n     George Song <george@damacy.net>\n     George Vilches <gav@thataddress.com>\n+    George Y. Kussumoto <georgeyk.dev@gmail.com>\n     Georg \"Hugo\" Bauer <gb@hugo.westfalen.de>\n     Georgi Stanojevski <glisha@gmail.com>\n     Gerardo Orozco <gerardo.orozco.mosqueda@gmail.com>\ndiff --git a/django/template/context.py b/django/template/context.py\nindex 080a2dd9c085..0c28b479cdad 100644\n--- a/django/template/context.py\n+++ b/django/template/context.py\n@@ -31,7 +31,9 @@ def __init__(self, dict_=None):\n     def _reset_dicts(self, value=None):\n         builtins = {\"True\": True, \"False\": False, \"None\": None}\n         self.dicts = [builtins]\n-        if value is not None:\n+        if isinstance(value, BaseContext):\n+            self.dicts += value.dicts[1:]\n+        elif value is not None:\n             self.dicts.append(value)\n \n     def __copy__(self):\n", "test_patch": "diff --git a/tests/template_tests/test_context.py b/tests/template_tests/test_context.py\nindex 7420bb4c368f..6d8ee7a6e62f 100644\n--- a/tests/template_tests/test_context.py\n+++ b/tests/template_tests/test_context.py\n@@ -158,6 +158,17 @@ def test_flatten_context_with_context(self):\n             },\n         )\n \n+    def test_flatten_context_with_context_copy(self):\n+        ctx1 = Context({\"a\": 2})\n+        ctx2 = ctx1.new(Context({\"b\": 4}))\n+        self.assertEqual(\n+            ctx2.dicts, [{\"True\": True, \"False\": False, \"None\": None}, {\"b\": 4}]\n+        )\n+        self.assertEqual(\n+            ctx2.flatten(),\n+            {\"False\": False, \"None\": None, \"True\": True, \"b\": 4},\n+        )\n+\n     def test_context_comparable(self):\n         \"\"\"\n         #21765 -- equality comparison should work\n", "problem_statement": "RequestContext.new creates a context that cannot be flattened\nDescription\n\t\t\n(last modified by Lily Foote)\t\t\nIn \u200bInclusionNode.render Django creates a new_context from two existing contexts (context and _dict) by calling new_context = context.new(_dict). These can both be instances of RequestContext leading to new_context also being a RequestContext (I have not tried with any other context types). However, calling new_context.flatten() raises a ValueError:\nValueError: dictionary update sequence element #0 has length 1; 2 is required\nI can reproduce this in a small test:\nfrom django.template.context import RequestContext\nfrom django.test import RequestFactory, TestCase\nclass RequestContextTestCase(TestCase):\n\tdef test_flatten_request_context_new(self):\n\t\tfactory = RequestFactory()\n\t\trequest = factory.get(\"/foo/\")\n\t\tcontext = RequestContext(request)\n\t\tcontext_2 = RequestContext(request)\n\t\tcontext_3 = context.new(context_2)\n\t\tself.assertEqual(\n\t\t\tcontext_3.flatten(), {\"False\": False, \"None\": None, \"True\": True}\n\t\t)\nI discovered this when running Kolo on a Django admin view (\u200bhttp://127.0.0.1:8000/admin/auth/user/). Kolo calls context.flatten() internally when introspecting a template during rendering, which leads to this exception:\nTraceback (most recent call last):\n File \"/home/lily/work/kloppindustries/kolo/python/src/kolo/profiler.py\", line 170, in __call__\n\tframe_data = processor.process(\n\t\t\t\t ^^^^^^^^^^^^^^^^^^\n File \"/home/lily/work/kloppindustries/kolo/python/src/kolo/plugins.py\", line 107, in process\n\tdata.update(self.process_extra(frame, event, arg, self.context))\n\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/lily/work/kloppindustries/kolo/python/src/kolo/filters/django.py\", line 89, in process_django_template\n\ttemplate_context = template_context.flatten()\n\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/lily/.local/share/lilyenv/virtualenvs/kolo-sandbox/3.12/lib/python3.12/site-packages/django/template/context.py\", line 120, in flatten\n\tflat.update(d)\nValueError: dictionary update sequence element #0 has length 3; 2 is required\nThis is similar to #24765 and #26041.\n", "hints_text": [["Investigating a bit more, this also applies to Context and RenderContext.", 1714483146.0], ["Replicated (thank you for the test case) and also confirmed Context and RenderContext, thank you!", 1714618352.0], ["PR: \u200bhttps://github.com/django/django/pull/18221 Hi, it's my first contribution here, so let me know if I failed to follow the guidelines.", 1717511698.0]], "created_at": "2024-06-04T18:34:55Z"}
{"repo": "django/django", "pull_number": 18208, "instance_id": "django__django-18208", "issue_numbers": ["35473"], "base_commit": "f4a08b6ddfcacadfe9ff8364bf1c6c54f5dd370f", "patch": "diff --git a/docs/releases/security.txt b/docs/releases/security.txt\nindex 404af4d00fc6..5ded7966f1c9 100644\n--- a/docs/releases/security.txt\n+++ b/docs/releases/security.txt\n@@ -1381,7 +1381,7 @@ Versions affected\n \n * Django 1.2 :commit:`(patch) <7f84657b6b2243cc787bdb9f296710c8d13ad0bd>`\n \n-October 9, 2009 - :cve:`2009-3965`\n+October 9, 2009 - :cve:`2009-3695`\n ----------------------------------\n \n Denial-of-service via pathological regular expression performance. `Full\n", "test_patch": "", "problem_statement": "Typo in historic security advisory\nDescription\n\t \nHey all, \nWanted to raise a very minor issue to you all. I work on the advisory database for github and had a user come and suggest an improvement on an old CVE from 2009 (CVE-2009-3965)\nSee: \u200bhttps://github.com/github/advisory-database/pull/4451\nThe CVE itself seemed entirely unrelated to me, but then a reference to some django docs was brought up \n\u200bhttps://docs.djangoproject.com/en/3.2/releases/security/#october-9-2009-cve-2009-3965\nwhich references the same CVE id. \nI ended up doing some digging and I think what happened is that someone typoed on that doc and it should have been 3695 rather than 3965\nSee: \u200bhttps://nvd.nist.gov/vuln/detail/CVE-2009-3695\nvs \u200bhttps://nvd.nist.gov/vuln/detail/CVE-2009-3965\nAnyway, very minor issue but figured it would be good to report it all the same so that it can get updated :)\n", "hints_text": [["Hi, this is my first contribution. I have created a PR. Kindly lemme know if I missed anything!", 1716945361.0], ["In 02dab94: Fixed #35473 -- Fixed CVE number in security archive. Updated to CVE-2009-3695 from CVE-2009-3965.", 1716949576.0]], "created_at": "2024-05-29T05:16:47Z"}
{"repo": "django/django", "pull_number": 18199, "instance_id": "django__django-18199", "issue_numbers": ["35469"], "base_commit": "d3a7ed5bcc45000a6c3dd55d85a4caaa83299f83", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 38136e7213cc..e5f28d9c6adc 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1582,12 +1582,23 @@ def create_index_name(*args, **kwargs):\n         )\n \n     def _delete_index_sql(self, model, name, sql=None):\n-        return Statement(\n+        statement = Statement(\n             sql or self.sql_delete_index,\n             table=Table(model._meta.db_table, self.quote_name),\n             name=self.quote_name(name),\n         )\n \n+        # Remove all deferred statements referencing the deleted index.\n+        table_name = statement.parts[\"table\"].table\n+        index_name = statement.parts[\"name\"]\n+        for sql in list(self.deferred_sql):\n+            if isinstance(sql, Statement) and sql.references_index(\n+                table_name, index_name\n+            ):\n+                self.deferred_sql.remove(sql)\n+\n+        return statement\n+\n     def _rename_index_sql(self, model, old_name, new_name):\n         return Statement(\n             self.sql_rename_index,\ndiff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 75787ef8ab5c..cb8d2defd20c 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -21,6 +21,12 @@ def references_column(self, table, column):\n         \"\"\"\n         return False\n \n+    def references_index(self, table, index):\n+        \"\"\"\n+        Return whether or not this instance references the specified index.\n+        \"\"\"\n+        return False\n+\n     def rename_table_references(self, old_table, new_table):\n         \"\"\"\n         Rename all references to the old_name to the new_table.\n@@ -52,6 +58,9 @@ def __init__(self, table, quote_name):\n     def references_table(self, table):\n         return self.table == table\n \n+    def references_index(self, table, index):\n+        return self.references_table(table) and str(self) == index\n+\n     def rename_table_references(self, old_table, new_table):\n         if self.table == old_table:\n             self.table = new_table\n@@ -207,6 +216,12 @@ def references_column(self, table, column):\n             for part in self.parts.values()\n         )\n \n+    def references_index(self, table, index):\n+        return any(\n+            hasattr(part, \"references_index\") and part.references_index(table, index)\n+            for part in self.parts.values()\n+        )\n+\n     def rename_table_references(self, old_table, new_table):\n         for part in self.parts.values():\n             if hasattr(part, \"rename_table_references\"):\n", "test_patch": "diff --git a/tests/backends/test_ddl_references.py b/tests/backends/test_ddl_references.py\nindex 86984ed3e889..8975b9712438 100644\n--- a/tests/backends/test_ddl_references.py\n+++ b/tests/backends/test_ddl_references.py\n@@ -166,10 +166,13 @@ def test_str(self):\n \n \n class MockReference:\n-    def __init__(self, representation, referenced_tables, referenced_columns):\n+    def __init__(\n+        self, representation, referenced_tables, referenced_columns, referenced_indexes\n+    ):\n         self.representation = representation\n         self.referenced_tables = referenced_tables\n         self.referenced_columns = referenced_columns\n+        self.referenced_indexes = referenced_indexes\n \n     def references_table(self, table):\n         return table in self.referenced_tables\n@@ -177,6 +180,9 @@ def references_table(self, table):\n     def references_column(self, table, column):\n         return (table, column) in self.referenced_columns\n \n+    def references_index(self, table, index):\n+        return (table, index) in self.referenced_indexes\n+\n     def rename_table_references(self, old_table, new_table):\n         if old_table in self.referenced_tables:\n             self.referenced_tables.remove(old_table)\n@@ -195,32 +201,43 @@ def __str__(self):\n class StatementTests(SimpleTestCase):\n     def test_references_table(self):\n         statement = Statement(\n-            \"\", reference=MockReference(\"\", {\"table\"}, {}), non_reference=\"\"\n+            \"\", reference=MockReference(\"\", {\"table\"}, {}, {}), non_reference=\"\"\n         )\n         self.assertIs(statement.references_table(\"table\"), True)\n         self.assertIs(statement.references_table(\"other\"), False)\n \n     def test_references_column(self):\n         statement = Statement(\n-            \"\", reference=MockReference(\"\", {}, {(\"table\", \"column\")}), non_reference=\"\"\n+            \"\",\n+            reference=MockReference(\"\", {}, {(\"table\", \"column\")}, {}),\n+            non_reference=\"\",\n         )\n         self.assertIs(statement.references_column(\"table\", \"column\"), True)\n         self.assertIs(statement.references_column(\"other\", \"column\"), False)\n \n+    def test_references_index(self):\n+        statement = Statement(\n+            \"\",\n+            reference=MockReference(\"\", {}, {}, {(\"table\", \"index\")}),\n+            non_reference=\"\",\n+        )\n+        self.assertIs(statement.references_index(\"table\", \"index\"), True)\n+        self.assertIs(statement.references_index(\"other\", \"index\"), False)\n+\n     def test_rename_table_references(self):\n-        reference = MockReference(\"\", {\"table\"}, {})\n+        reference = MockReference(\"\", {\"table\"}, {}, {})\n         statement = Statement(\"\", reference=reference, non_reference=\"\")\n         statement.rename_table_references(\"table\", \"other\")\n         self.assertEqual(reference.referenced_tables, {\"other\"})\n \n     def test_rename_column_references(self):\n-        reference = MockReference(\"\", {}, {(\"table\", \"column\")})\n+        reference = MockReference(\"\", {}, {(\"table\", \"column\")}, {})\n         statement = Statement(\"\", reference=reference, non_reference=\"\")\n         statement.rename_column_references(\"table\", \"column\", \"other\")\n         self.assertEqual(reference.referenced_columns, {(\"table\", \"other\")})\n \n     def test_repr(self):\n-        reference = MockReference(\"reference\", {}, {})\n+        reference = MockReference(\"reference\", {}, {}, {})\n         statement = Statement(\n             \"%(reference)s - %(non_reference)s\",\n             reference=reference,\n@@ -229,7 +246,7 @@ def test_repr(self):\n         self.assertEqual(repr(statement), \"<Statement 'reference - non_reference'>\")\n \n     def test_str(self):\n-        reference = MockReference(\"reference\", {}, {})\n+        reference = MockReference(\"reference\", {}, {}, {})\n         statement = Statement(\n             \"%(reference)s - %(non_reference)s\",\n             reference=reference,\ndiff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 107703c39a20..0c4158a8866c 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -3,7 +3,7 @@\n \n from django.conf import settings\n from django.db import connection\n-from django.db.models import CASCADE, ForeignKey, Index, Q\n+from django.db.models import CASCADE, CharField, ForeignKey, Index, Q\n from django.db.models.functions import Lower\n from django.test import (\n     TestCase,\n@@ -87,6 +87,24 @@ def test_descending_columns_list_sql(self):\n             str(index.create_sql(Article, editor)),\n         )\n \n+    @skipUnlessDBFeature(\"can_create_inline_fk\", \"can_rollback_ddl\")\n+    def test_alter_field_unique_false_removes_deferred_sql(self):\n+        field_added = CharField(max_length=127, unique=True)\n+        field_added.set_attributes_from_name(\"charfield_added\")\n+\n+        field_to_alter = CharField(max_length=127, unique=True)\n+        field_to_alter.set_attributes_from_name(\"charfield_altered\")\n+        altered_field = CharField(max_length=127, unique=False)\n+        altered_field.set_attributes_from_name(\"charfield_altered\")\n+\n+        with connection.schema_editor() as editor:\n+            editor.add_field(ArticleTranslation, field_added)\n+            editor.add_field(ArticleTranslation, field_to_alter)\n+            self.assertEqual(len(editor.deferred_sql), 2)\n+            editor.alter_field(ArticleTranslation, field_to_alter, altered_field)\n+            self.assertEqual(len(editor.deferred_sql), 1)\n+            self.assertIn(\"charfield_added\", str(editor.deferred_sql[0].parts[\"name\"]))\n+\n \n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n     available_apps = [\"indexes\"]\n", "problem_statement": "Squashing migrations from unique=True to unique=False to UniqueConstraint produces irreversible migration on Postgres\nDescription\n\t\t\n(last modified by Jacob Walls)\t\t\nRhymes a bit with #31503, just in the reverse direction.\nCreate a model with a unique=True field, create a migration. I used URLField.\nCreate an empty migration, e.g with migrations.RunSQL(sql=\"SELECT 1\", reverse_sql=\"\"). (This will prevent the next AlterField from optimizing out when squashing. There are likely other possible reproducers without this step.)\nAlter the field from step 1 to have unique=False, create a migration\nAdd a UniqueConstraint to the model that involves just that field, create a migration\nSquash the four migrations\nMigrate forward\nMigrate to zero, with or without removing the other migrations or the replaced attribute\nResult:\n Unapplying polls.0001_initial_squashed_0004_menu_unique_site...Traceback (most recent call last):\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/utils.py\", line 87, in _execute\n\treturn self.cursor.execute(sql)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^\npsycopg2.errors.DuplicateTable: relation \"polls_menu_site_61d71486_like\" already exists\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"/Users/jwalls/prj/night/manage.py\", line 22, in <module>\n\tmain()\n File \"/Users/jwalls/prj/night/manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/core/management/base.py\", line 412, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/core/management/base.py\", line 458, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/core/management/base.py\", line 106, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/core/management/commands/migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/migrations/executor.py\", line 141, in migrate\n\tstate = self._migrate_all_backwards(plan, full_plan, fake=fake)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/migrations/executor.py\", line 219, in _migrate_all_backwards\n\tself.unapply_migration(states[migration], migration, fake=fake)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/migrations/executor.py\", line 279, in unapply_migration\n\tstate = migration.unapply(state, schema_editor)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/migrations/migration.py\", line 193, in unapply\n\toperation.database_backwards(\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/migrations/operations/fields.py\", line 240, in database_backwards\n\tself.database_forwards(app_label, schema_editor, from_state, to_state)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/migrations/operations/fields.py\", line 235, in database_forwards\n\tschema_editor.alter_field(from_model, from_field, to_field)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/base/schema.py\", line 831, in alter_field\n\tself._alter_field(\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/postgresql/schema.py\", line 304, in _alter_field\n\tself.execute(like_index_statement)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/postgresql/schema.py\", line 48, in execute\n\treturn super().execute(sql, None)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/base/schema.py\", line 201, in execute\n\tcursor.execute(sql, params)\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/utils.py\", line 102, in execute\n\treturn super().execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/utils.py\", line 80, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\twith self.db.wrap_database_errors:\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/utils.py\", line 91, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/Users/jwalls/release/lib/python3.12/site-packages/django/db/backends/utils.py\", line 87, in _execute\n\treturn self.cursor.execute(sql)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^\ndjango.db.utils.ProgrammingError: relation \"polls_menu_site_61d71486_like\" already exists\n*\nfailing squashed migration:\n# Generated by Django 4.2.13 on 2024-05-21 00:59\nfrom django.db import migrations, models\nclass Migration(migrations.Migration):\n\tdependencies = []\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname=\"Menu\",\n\t\t\tfields=[\n\t\t\t\t(\n\t\t\t\t\t\"id\",\n\t\t\t\t\tmodels.BigAutoField(\n\t\t\t\t\t\tauto_created=True,\n\t\t\t\t\t\tprimary_key=True,\n\t\t\t\t\t\tserialize=False,\n\t\t\t\t\t\tverbose_name=\"ID\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t(\"site\", models.URLField(unique=True)),\n\t\t\t],\n\t\t),\n\t\tmigrations.RunSQL(\n\t\t\tsql=\"SELECT 1\",\n\t\t\treverse_sql=\"\",\n\t\t),\n\t\tmigrations.AlterField(\n\t\t\tmodel_name=\"menu\",\n\t\t\tname=\"site\",\n\t\t\tfield=models.URLField(),\n\t\t),\n\t\tmigrations.AddConstraint(\n\t\t\tmodel_name=\"menu\",\n\t\t\tconstraint=models.UniqueConstraint(fields=(\"site\",), name=\"unique_site\"),\n\t\t),\n\t]\nMy final model looked like:\nfrom django.db import models\nclass Menu(models.Model):\n\tsite = models.URLField()\n\tclass Meta:\n\t\tconstraints = [\n\t\t\tmodels.UniqueConstraint(fields=[\"site\"], name=\"unique_site\")\n\t\t]\nTested on postgres 14.3.2\n", "hints_text": [["Hi Jacob, thank you for this. I tried to replicate on main with SQLite and couldn't, so this might be postgres specific (I will try out again later). I was wondering if you have seen #28646 and whether you think this is related or this issue would be resolved with that ticket?", 1716349699.0], ["Replicated on Postgres, accepting \ud83d\udc4d", 1716353244.0], ["Thanks for the link to #28646. It's related, but most of the discussion there centers around the \"boolean logic\" cited in that ticket's OP. I tried the various patches, and they don't fix my report because they just shuffle the logic fathoming the booleans db_index and unique on old_field and new_fields, whereas the problem here seems to be that one of those values is wrong. #26805 inspired me to check SlugField. I can't reproduce with SlugField, leading me to wonder if it's something to do with URLField's different implementation of deconstruct()? When using SlugField, and breaking on the comment \"Added an index? ...\" in db/backends/postgresql/schema.py, I get: (Pdb) new_field.db_index True versus with URLField: (Pdb) new_field.db_index False", 1716361075.0], ["Sorry, still forming first impressions here, but just piping up to clarify that my last comment mostly barks up the wrong tree: the field values for db_index and whatnot look fine. And on a closer read of #28646, it strikes me as mostly focused on SlugField, which *doesn't* have the problem presented here. So I think having separate tickets makes sense.", 1716367952.0], ["Confirmed the patch wouldn't fix it and agree let's track this separately, thank you for taking a look \ud83d\udc4d", 1716432258.0], ["\u200bPR", 1716656851.0]], "created_at": "2024-05-25T21:18:52Z"}
{"repo": "django/django", "pull_number": 18197, "instance_id": "django__django-18197", "issue_numbers": ["35479"], "base_commit": "bcbc4b9b8a4a47c8e045b060a9860a5c038192de", "patch": "diff --git a/.github/workflows/selenium.yml b/.github/workflows/selenium.yml\nindex fa916a0dedf0..7e46e0cfb10c 100644\n--- a/.github/workflows/selenium.yml\n+++ b/.github/workflows/selenium.yml\n@@ -43,7 +43,7 @@ jobs:\n     name: PostgreSQL\n     services:\n       postgres:\n-        image: postgres:13-alpine\n+        image: postgres:14-alpine\n         env:\n           POSTGRES_DB: django\n           POSTGRES_USER: user\ndiff --git a/django/contrib/gis/db/backends/postgis/operations.py b/django/contrib/gis/db/backends/postgis/operations.py\nindex 17d7b3213d9b..7a347c52878a 100644\n--- a/django/contrib/gis/db/backends/postgis/operations.py\n+++ b/django/contrib/gis/db/backends/postgis/operations.py\n@@ -203,7 +203,7 @@ def spatial_version(self):\n                 raise ImproperlyConfigured(\n                     'Cannot determine PostGIS version for database \"%s\" '\n                     'using command \"SELECT postgis_lib_version()\". '\n-                    \"GeoDjango requires at least PostGIS version 3.0. \"\n+                    \"GeoDjango requires at least PostGIS version 3.1. \"\n                     \"Was the database created from a spatial database \"\n                     \"template?\" % self.connection.settings_dict[\"NAME\"]\n                 )\ndiff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\nindex a31f65718334..a6351dc008a6 100644\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -1,7 +1,7 @@\n from types import NoneType\n \n from django.core.exceptions import ValidationError\n-from django.db import DEFAULT_DB_ALIAS, NotSupportedError\n+from django.db import DEFAULT_DB_ALIAS\n from django.db.backends.ddl_references import Expressions, Statement, Table\n from django.db.models import BaseConstraint, Deferrable, F, Q\n from django.db.models.expressions import Exists, ExpressionList\n@@ -114,7 +114,6 @@ def constraint_sql(self, model, schema_editor):\n         )\n \n     def create_sql(self, model, schema_editor):\n-        self.check_supported(schema_editor)\n         return Statement(\n             \"ALTER TABLE %(table)s ADD %(constraint)s\",\n             table=Table(model._meta.db_table, schema_editor.quote_name),\n@@ -128,17 +127,6 @@ def remove_sql(self, model, schema_editor):\n             schema_editor.quote_name(self.name),\n         )\n \n-    def check_supported(self, schema_editor):\n-        if (\n-            self.include\n-            and self.index_type.lower() == \"spgist\"\n-            and not schema_editor.connection.features.supports_covering_spgist_indexes\n-        ):\n-            raise NotSupportedError(\n-                \"Covering exclusion constraints using an SP-GiST index \"\n-                \"require PostgreSQL 14+.\"\n-            )\n-\n     def deconstruct(self):\n         path, args, kwargs = super().deconstruct()\n         kwargs[\"expressions\"] = self.expressions\ndiff --git a/django/contrib/postgres/indexes.py b/django/contrib/postgres/indexes.py\nindex 05fdbeed5e22..ce9e2cee14de 100644\n--- a/django/contrib/postgres/indexes.py\n+++ b/django/contrib/postgres/indexes.py\n@@ -1,4 +1,3 @@\n-from django.db import NotSupportedError\n from django.db.models import Func, Index\n from django.utils.functional import cached_property\n \n@@ -234,13 +233,6 @@ def get_with_params(self):\n             with_params.append(\"fillfactor = %d\" % self.fillfactor)\n         return with_params\n \n-    def check_supported(self, schema_editor):\n-        if (\n-            self.include\n-            and not schema_editor.connection.features.supports_covering_spgist_indexes\n-        ):\n-            raise NotSupportedError(\"Covering SP-GiST indexes require PostgreSQL 14+.\")\n-\n \n class OpClass(Func):\n     template = \"%(expressions)s %(name)s\"\ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex ef697e85b03a..6170b5501aeb 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -7,7 +7,7 @@\n \n \n class DatabaseFeatures(BaseDatabaseFeatures):\n-    minimum_database_version = (13,)\n+    minimum_database_version = (14,)\n     allows_group_by_selected_pks = True\n     can_return_columns_from_insert = True\n     can_return_rows_from_bulk_insert = True\n@@ -152,10 +152,6 @@ def introspected_field_types(self):\n             \"PositiveSmallIntegerField\": \"SmallIntegerField\",\n         }\n \n-    @cached_property\n-    def is_postgresql_14(self):\n-        return self.connection.pg_version >= 140000\n-\n     @cached_property\n     def is_postgresql_15(self):\n         return self.connection.pg_version >= 150000\n@@ -164,8 +160,6 @@ def is_postgresql_15(self):\n     def is_postgresql_16(self):\n         return self.connection.pg_version >= 160000\n \n-    has_bit_xor = property(operator.attrgetter(\"is_postgresql_14\"))\n-    supports_covering_spgist_indexes = property(operator.attrgetter(\"is_postgresql_14\"))\n     supports_unlimited_charfield = True\n     supports_nulls_distinct_unique_constraints = property(\n         operator.attrgetter(\"is_postgresql_15\")\ndiff --git a/docs/ref/contrib/gis/install/geolibs.txt b/docs/ref/contrib/gis/install/geolibs.txt\nindex 041409d53c7c..a0a66c0dc6ae 100644\n--- a/docs/ref/contrib/gis/install/geolibs.txt\n+++ b/docs/ref/contrib/gis/install/geolibs.txt\n@@ -12,7 +12,7 @@ Program                   Description                           Required\n `PROJ`_                   Cartographic Projections library      Yes (PostgreSQL and SQLite only)  9.x, 8.x, 7.x, 6.x\n :doc:`GDAL <../gdal>`     Geospatial Data Abstraction Library   Yes                               3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0\n :doc:`GeoIP <../geoip2>`  IP-based geolocation library          No                                2\n-`PostGIS`__               Spatial extensions for PostgreSQL     Yes (PostgreSQL only)             3.4, 3.3, 3.2, 3.1, 3.0\n+`PostGIS`__               Spatial extensions for PostgreSQL     Yes (PostgreSQL only)             3.4, 3.3, 3.2, 3.1\n `SpatiaLite`__            Spatial extensions for SQLite         Yes (SQLite only)                 5.1, 5.0, 4.3\n ========================  ====================================  ================================  ===========================================\n \n@@ -35,7 +35,6 @@ totally fine with GeoDjango. Your mileage may vary.\n     GDAL 3.6.0 2022-11-03\n     GDAL 3.7.0 2023-05-10\n     GDAL 3.8.0 2023-11-13\n-    PostGIS 3.0.0 2019-10-20\n     PostGIS 3.1.0 2020-12-18\n     PostGIS 3.2.0 2021-12-18\n     PostGIS 3.3.0 2022-08-27\ndiff --git a/docs/ref/contrib/gis/install/index.txt b/docs/ref/contrib/gis/install/index.txt\nindex 7706790b2a81..e7bc885d4beb 100644\n--- a/docs/ref/contrib/gis/install/index.txt\n+++ b/docs/ref/contrib/gis/install/index.txt\n@@ -56,7 +56,7 @@ supported versions, and any notes for each of the supported database backends:\n ==================  ==============================  ==================  =========================================\n Database            Library Requirements            Supported Versions  Notes\n ==================  ==============================  ==================  =========================================\n-PostgreSQL          GEOS, GDAL, PROJ, PostGIS       13+                 Requires PostGIS.\n+PostgreSQL          GEOS, GDAL, PROJ, PostGIS       14+                 Requires PostGIS.\n MySQL               GEOS, GDAL                      8.0.11+             :ref:`Limited functionality <mysql-spatial-limitations>`.\n Oracle              GEOS, GDAL                      19+                 XE not supported.\n SQLite              GEOS, GDAL, PROJ, SpatiaLite    3.31.0+             Requires SpatiaLite 4.3+\n@@ -300,7 +300,7 @@ Summary:\n \n .. code-block:: shell\n \n-    $ sudo port install postgresql13-server\n+    $ sudo port install postgresql14-server\n     $ sudo port install geos\n     $ sudo port install proj6\n     $ sudo port install postgis3\n@@ -314,14 +314,14 @@ Summary:\n \n     .. code-block:: shell\n \n-        export PATH=/opt/local/bin:/opt/local/lib/postgresql13/bin\n+        export PATH=/opt/local/bin:/opt/local/lib/postgresql14/bin\n \n     In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that\n     the libraries can be found by Python:\n \n     .. code-block:: shell\n \n-        export DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib:/opt/local/lib/postgresql13\n+        export DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib:/opt/local/lib/postgresql14\n \n __ https://www.macports.org/\n \ndiff --git a/docs/ref/contrib/postgres/functions.txt b/docs/ref/contrib/postgres/functions.txt\nindex f5d9cdd87392..4602f7fd9d56 100644\n--- a/docs/ref/contrib/postgres/functions.txt\n+++ b/docs/ref/contrib/postgres/functions.txt\n@@ -14,12 +14,6 @@ All of these functions are available from the\n \n Returns a version 4 UUID.\n \n-On PostgreSQL < 13, the `pgcrypto extension`_ must be installed. You can use\n-the :class:`~django.contrib.postgres.operations.CryptoExtension` migration\n-operation to install it.\n-\n-.. _pgcrypto extension: https://www.postgresql.org/docs/current/pgcrypto.html\n-\n Usage example:\n \n .. code-block:: pycon\ndiff --git a/docs/ref/databases.txt b/docs/ref/databases.txt\nindex c8e9f2ebff82..3e50d2e46a6b 100644\n--- a/docs/ref/databases.txt\n+++ b/docs/ref/databases.txt\n@@ -115,7 +115,7 @@ below for information on how to set up your database correctly.\n PostgreSQL notes\n ================\n \n-Django supports PostgreSQL 13 and higher. `psycopg`_ 3.1.8+ or `psycopg2`_\n+Django supports PostgreSQL 14 and higher. `psycopg`_ 3.1.8+ or `psycopg2`_\n 2.8.4+ is required, though the latest `psycopg`_ 3.1.8+ is recommended.\n \n .. note::\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex 9d28415df191..fb2a1d017711 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -238,6 +238,17 @@ backends.\n \n * ...\n \n+:mod:`django.contrib.gis`\n+-------------------------\n+\n+* Support for PostGIS 3.0 is removed.\n+\n+Dropped support for PostgreSQL 13\n+---------------------------------\n+\n+Upstream support for PostgreSQL 13 ends in November 2025. Django 5.2 supports\n+PostgreSQL 14 and higher.\n+\n Miscellaneous\n -------------\n \n", "test_patch": "diff --git a/.github/workflows/schedule_tests.yml b/.github/workflows/schedule_tests.yml\nindex c4523af4a030..8b1f01ad867d 100644\n--- a/.github/workflows/schedule_tests.yml\n+++ b/.github/workflows/schedule_tests.yml\n@@ -90,7 +90,7 @@ jobs:\n     continue-on-error: true\n     services:\n       postgres:\n-        image: postgres:13-alpine\n+        image: postgres:14-alpine\n         env:\n           POSTGRES_DB: django\n           POSTGRES_USER: user\n@@ -163,7 +163,7 @@ jobs:\n     name: Selenium tests, PostgreSQL\n     services:\n       postgres:\n-        image: postgres:13-alpine\n+        image: postgres:14-alpine\n         env:\n           POSTGRES_DB: django\n           POSTGRES_USER: user\ndiff --git a/tests/backends/postgresql/tests.py b/tests/backends/postgresql/tests.py\nindex 47f8d940041b..0b4f580612b4 100644\n--- a/tests/backends/postgresql/tests.py\n+++ b/tests/backends/postgresql/tests.py\n@@ -548,12 +548,12 @@ def test_copy_cursors(self):\n \n     def test_get_database_version(self):\n         new_connection = no_pool_connection()\n-        new_connection.pg_version = 130009\n-        self.assertEqual(new_connection.get_database_version(), (13, 9))\n+        new_connection.pg_version = 140009\n+        self.assertEqual(new_connection.get_database_version(), (14, 9))\n \n-    @mock.patch.object(connection, \"get_database_version\", return_value=(12,))\n+    @mock.patch.object(connection, \"get_database_version\", return_value=(13,))\n     def test_check_database_version_supported(self, mocked_get_database_version):\n-        msg = \"PostgreSQL 13 or later is required (found 12).\"\n+        msg = \"PostgreSQL 14 or later is required (found 13).\"\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             connection.check_database_version_supported()\n         self.assertTrue(mocked_get_database_version.called)\ndiff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py\nindex 7e1e16d0c0db..b72310bdf1c1 100644\n--- a/tests/postgres_tests/test_aggregates.py\n+++ b/tests/postgres_tests/test_aggregates.py\n@@ -1,4 +1,4 @@\n-from django.db import connection, transaction\n+from django.db import transaction\n from django.db.models import (\n     CharField,\n     F,\n@@ -13,7 +13,6 @@\n )\n from django.db.models.fields.json import KeyTextTransform, KeyTransform\n from django.db.models.functions import Cast, Concat, LPad, Substr\n-from django.test import skipUnlessDBFeature\n from django.test.utils import Approximate\n from django.utils import timezone\n \n@@ -95,9 +94,8 @@ def test_empty_result_set(self):\n             BoolOr(\"boolean_field\"),\n             JSONBAgg(\"integer_field\"),\n             StringAgg(\"char_field\", delimiter=\";\"),\n+            BitXor(\"integer_field\"),\n         ]\n-        if connection.features.has_bit_xor:\n-            tests.append(BitXor(\"integer_field\"))\n         for aggregation in tests:\n             with self.subTest(aggregation=aggregation):\n                 # Empty result with non-execution optimization.\n@@ -133,9 +131,8 @@ def test_default_argument(self):\n                 StringAgg(\"char_field\", delimiter=\";\", default=Value(\"<empty>\")),\n                 \"<empty>\",\n             ),\n+            (BitXor(\"integer_field\", default=0), 0),\n         ]\n-        if connection.features.has_bit_xor:\n-            tests.append((BitXor(\"integer_field\", default=0), 0))\n         for aggregation, expected_result in tests:\n             with self.subTest(aggregation=aggregation):\n                 # Empty result with non-execution optimization.\n@@ -348,7 +345,6 @@ def test_bit_or_on_only_false_values(self):\n         )\n         self.assertEqual(values, {\"bitor\": 0})\n \n-    @skipUnlessDBFeature(\"has_bit_xor\")\n     def test_bit_xor_general(self):\n         AggregateTestModel.objects.create(integer_field=3)\n         values = AggregateTestModel.objects.filter(\n@@ -356,14 +352,12 @@ def test_bit_xor_general(self):\n         ).aggregate(bitxor=BitXor(\"integer_field\"))\n         self.assertEqual(values, {\"bitxor\": 2})\n \n-    @skipUnlessDBFeature(\"has_bit_xor\")\n     def test_bit_xor_on_only_true_values(self):\n         values = AggregateTestModel.objects.filter(\n             integer_field=1,\n         ).aggregate(bitxor=BitXor(\"integer_field\"))\n         self.assertEqual(values, {\"bitxor\": 1})\n \n-    @skipUnlessDBFeature(\"has_bit_xor\")\n     def test_bit_xor_on_only_false_values(self):\n         values = AggregateTestModel.objects.filter(\n             integer_field=0,\ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\nindex 3cc76cdcfe55..770d4b170232 100644\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -4,7 +4,7 @@\n from django.contrib.postgres.indexes import OpClass\n from django.core.checks import Error\n from django.core.exceptions import ValidationError\n-from django.db import IntegrityError, NotSupportedError, connection, transaction\n+from django.db import IntegrityError, connection, transaction\n from django.db.models import (\n     CASCADE,\n     CharField,\n@@ -997,7 +997,6 @@ def test_range_adjacent_gist_include(self):\n         RangesModel.objects.create(ints=(10, 19))\n         RangesModel.objects.create(ints=(51, 60))\n \n-    @skipUnlessDBFeature(\"supports_covering_spgist_indexes\")\n     def test_range_adjacent_spgist_include(self):\n         constraint_name = \"ints_adjacent_spgist_include\"\n         self.assertNotIn(\n@@ -1034,7 +1033,6 @@ def test_range_adjacent_gist_include_condition(self):\n             editor.add_constraint(RangesModel, constraint)\n         self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))\n \n-    @skipUnlessDBFeature(\"supports_covering_spgist_indexes\")\n     def test_range_adjacent_spgist_include_condition(self):\n         constraint_name = \"ints_adjacent_spgist_include_condition\"\n         self.assertNotIn(\n@@ -1067,7 +1065,6 @@ def test_range_adjacent_gist_include_deferrable(self):\n             editor.add_constraint(RangesModel, constraint)\n         self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))\n \n-    @skipUnlessDBFeature(\"supports_covering_spgist_indexes\")\n     def test_range_adjacent_spgist_include_deferrable(self):\n         constraint_name = \"ints_adjacent_spgist_include_deferrable\"\n         self.assertNotIn(\n@@ -1084,27 +1081,6 @@ def test_range_adjacent_spgist_include_deferrable(self):\n             editor.add_constraint(RangesModel, constraint)\n         self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))\n \n-    def test_spgist_include_not_supported(self):\n-        constraint_name = \"ints_adjacent_spgist_include_not_supported\"\n-        constraint = ExclusionConstraint(\n-            name=constraint_name,\n-            expressions=[(\"ints\", RangeOperators.ADJACENT_TO)],\n-            index_type=\"spgist\",\n-            include=[\"id\"],\n-        )\n-        msg = (\n-            \"Covering exclusion constraints using an SP-GiST index require \"\n-            \"PostgreSQL 14+.\"\n-        )\n-        with connection.schema_editor() as editor:\n-            with mock.patch(\n-                \"django.db.backends.postgresql.features.DatabaseFeatures.\"\n-                \"supports_covering_spgist_indexes\",\n-                False,\n-            ):\n-                with self.assertRaisesMessage(NotSupportedError, msg):\n-                    editor.add_constraint(RangesModel, constraint)\n-\n     def test_range_adjacent_opclass(self):\n         constraint_name = \"ints_adjacent_opclass\"\n         self.assertNotIn(\n@@ -1187,7 +1163,6 @@ def test_range_adjacent_gist_opclass_include(self):\n             editor.add_constraint(RangesModel, constraint)\n         self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))\n \n-    @skipUnlessDBFeature(\"supports_covering_spgist_indexes\")\n     def test_range_adjacent_spgist_opclass_include(self):\n         constraint_name = \"ints_adjacent_spgist_opclass_include\"\n         self.assertNotIn(\ndiff --git a/tests/postgres_tests/test_indexes.py b/tests/postgres_tests/test_indexes.py\nindex 8a7ee39a76ea..f98d03c6c1ed 100644\n--- a/tests/postgres_tests/test_indexes.py\n+++ b/tests/postgres_tests/test_indexes.py\n@@ -1,5 +1,3 @@\n-from unittest import mock\n-\n from django.contrib.postgres.indexes import (\n     BloomIndex,\n     BrinIndex,\n@@ -11,10 +9,9 @@\n     PostgresIndex,\n     SpGistIndex,\n )\n-from django.db import NotSupportedError, connection\n+from django.db import connection\n from django.db.models import CharField, F, Index, Q\n from django.db.models.functions import Cast, Collate, Length, Lower\n-from django.test import skipUnlessDBFeature\n from django.test.utils import register_lookup\n \n from . import PostgreSQLSimpleTestCase, PostgreSQLTestCase\n@@ -640,7 +637,6 @@ def test_spgist_parameters(self):\n             index_name, self.get_constraints(TextFieldModel._meta.db_table)\n         )\n \n-    @skipUnlessDBFeature(\"supports_covering_spgist_indexes\")\n     def test_spgist_include(self):\n         index_name = \"scene_spgist_include_setting\"\n         index = SpGistIndex(name=index_name, fields=[\"scene\"], include=[\"setting\"])\n@@ -654,20 +650,6 @@ def test_spgist_include(self):\n             editor.remove_index(Scene, index)\n         self.assertNotIn(index_name, self.get_constraints(Scene._meta.db_table))\n \n-    def test_spgist_include_not_supported(self):\n-        index_name = \"spgist_include_exception\"\n-        index = SpGistIndex(fields=[\"scene\"], name=index_name, include=[\"setting\"])\n-        msg = \"Covering SP-GiST indexes require PostgreSQL 14+.\"\n-        with self.assertRaisesMessage(NotSupportedError, msg):\n-            with mock.patch(\n-                \"django.db.backends.postgresql.features.DatabaseFeatures.\"\n-                \"supports_covering_spgist_indexes\",\n-                False,\n-            ):\n-                with connection.schema_editor() as editor:\n-                    editor.add_index(Scene, index)\n-        self.assertNotIn(index_name, self.get_constraints(Scene._meta.db_table))\n-\n     def test_custom_suffix(self):\n         class CustomSuffixIndex(PostgresIndex):\n             suffix = \"sfx\"\n", "problem_statement": "Drop support for PostgreSQL 13 and PostGIS 3.0.\nDescription\n\t \nThe end of support for PostgreSQL 13 is November 2025. Therefore, Django 5.2 (released in April 2025) may set PostgreSQL 14 as the minimum version that it supports (see SupportedDatabaseVersions). Also drop support for PostGIS 3.0.\n", "hints_text": [["\u200bPR", 1716560876.0]], "created_at": "2024-05-24T19:27:24Z"}
{"repo": "django/django", "pull_number": 18195, "instance_id": "django__django-18195", "issue_numbers": ["35477"], "base_commit": "0f694ce2ebce01356d48302c33c23902b4777537", "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex ab46caa12ecd..31e96ff91ce8 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -154,14 +154,14 @@ def validate_passwords(\n         if not usable_password:\n             return self.cleaned_data\n \n-        if not password1:\n+        if not password1 and password1_field_name not in self.errors:\n             error = ValidationError(\n                 self.fields[password1_field_name].error_messages[\"required\"],\n                 code=\"required\",\n             )\n             self.add_error(password1_field_name, error)\n \n-        if not password2:\n+        if not password2 and password2_field_name not in self.errors:\n             error = ValidationError(\n                 self.fields[password2_field_name].error_messages[\"required\"],\n                 code=\"required\",\n", "test_patch": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex b44f1edb242b..3dd93243048a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -60,6 +60,21 @@ def setUpTestData(cls):\n         )\n \n \n+class ExtraValidationFormMixin:\n+    def __init__(self, *args, failing_fields=None, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.failing_fields = failing_fields or {}\n+\n+    def failing_helper(self, field_name):\n+        if field_name in self.failing_fields:\n+            errors = [\n+                ValidationError(error, code=\"invalid\")\n+                for error in self.failing_fields[field_name]\n+            ]\n+            raise ValidationError(errors)\n+        return self.cleaned_data[field_name]\n+\n+\n class BaseUserCreationFormTest(TestDataMixin, TestCase):\n     def test_user_already_exists(self):\n         data = {\n@@ -324,6 +339,22 @@ def test_password_help_text(self):\n             \"</li></ul>\",\n         )\n \n+    def test_password_extra_validations(self):\n+        class ExtraValidationForm(ExtraValidationFormMixin, BaseUserCreationForm):\n+            def clean_password1(self):\n+                return self.failing_helper(\"password1\")\n+\n+            def clean_password2(self):\n+                return self.failing_helper(\"password2\")\n+\n+        data = {\"username\": \"extra\", \"password1\": \"abc\", \"password2\": \"abc\"}\n+        for fields in ([\"password1\"], [\"password2\"], [\"password1\", \"password2\"]):\n+            with self.subTest(fields=fields):\n+                errors = {field: [f\"Extra validation for {field}.\"] for field in fields}\n+                form = ExtraValidationForm(data, failing_fields=errors)\n+                self.assertIs(form.is_valid(), False)\n+                self.assertDictEqual(form.errors, errors)\n+\n     @override_settings(\n         AUTH_PASSWORD_VALIDATORS=[\n             {\n@@ -865,6 +896,27 @@ def test_html_autocomplete_attributes(self):\n                     form.fields[field_name].widget.attrs[\"autocomplete\"], autocomplete\n                 )\n \n+    def test_password_extra_validations(self):\n+        class ExtraValidationForm(ExtraValidationFormMixin, SetPasswordForm):\n+            def clean_new_password1(self):\n+                return self.failing_helper(\"new_password1\")\n+\n+            def clean_new_password2(self):\n+                return self.failing_helper(\"new_password2\")\n+\n+        user = User.objects.get(username=\"testclient\")\n+        data = {\"new_password1\": \"abc\", \"new_password2\": \"abc\"}\n+        for fields in (\n+            [\"new_password1\"],\n+            [\"new_password2\"],\n+            [\"new_password1\", \"new_password2\"],\n+        ):\n+            with self.subTest(fields=fields):\n+                errors = {field: [f\"Extra validation for {field}.\"] for field in fields}\n+                form = ExtraValidationForm(user, data, failing_fields=errors)\n+                self.assertIs(form.is_valid(), False)\n+                self.assertDictEqual(form.errors, errors)\n+\n \n class PasswordChangeFormTest(TestDataMixin, TestCase):\n     def test_incorrect_password(self):\n@@ -1456,6 +1508,23 @@ def test_password_whitespace_not_stripped(self):\n         self.assertEqual(form.cleaned_data[\"password2\"], data[\"password2\"])\n         self.assertEqual(form.changed_data, [\"password\"])\n \n+    def test_password_extra_validations(self):\n+        class ExtraValidationForm(ExtraValidationFormMixin, AdminPasswordChangeForm):\n+            def clean_password1(self):\n+                return self.failing_helper(\"password1\")\n+\n+            def clean_password2(self):\n+                return self.failing_helper(\"password2\")\n+\n+        user = User.objects.get(username=\"testclient\")\n+        data = {\"username\": \"extra\", \"password1\": \"abc\", \"password2\": \"abc\"}\n+        for fields in ([\"password1\"], [\"password2\"], [\"password1\", \"password2\"]):\n+            with self.subTest(fields=fields):\n+                errors = {field: [f\"Extra validation for {field}.\"] for field in fields}\n+                form = ExtraValidationForm(user, data, failing_fields=errors)\n+                self.assertIs(form.is_valid(), False)\n+                self.assertDictEqual(form.errors, errors)\n+\n     def test_non_matching_passwords(self):\n         user = User.objects.get(username=\"testclient\")\n         data = {\"password1\": \"password1\", \"password2\": \"password2\"}\n", "problem_statement": "Required field error added to new_password1 on forms that inherit SetPasswordForm with additional new_password1 level validation.\nDescription\n\t\t\n(last modified by \u05d0\u05d5\u05e8\u05d9)\t\t\nHi,\nI ran Speedy Net's tests with Django 5.1a1. Some tests failed with an unexpected error messages. These tests passed with Django versions 4.2.13 and 5.0.6.\nTo run these tests, run ./tests_manage_all_sites_with_all_warnings.sh test speedy.core.accounts.tests.test_views.EditProfileCredentialsViewEnglishTestCase --shuffle --test-all-languages with Django==5.1a1 installed. Here are the error messages:\n'new_password1': ['This password is too short. It must contain at least 8 characters.', 'This field is required.'] (the actual error message received)\n'new_password1': ['This password is too short. It must contain at least 8 characters.'] (the expected error message)\nIt looks like the error message \"This field is required.\" is unexpected and doesn't appear with Django versions 4.2.13 and 5.0.6. Notice that this field was not missing but too short. A similar problem happens when the new password is too long.\nI confirm the extra error message appears on the site with Django 5.1a1 and I created screenshots which I'm attaching here. The first screenshot I attached is with Django 5.1a1 and the second one with Django 4.2.13 (and is the expected error messages).\n", "hints_text": [["Hi \u05d0\u05d5\u05e8\u05d9, I spent quite a while with this. Next time please share links to your tests or code in the ticket. git bisect confirmed this is a regression in e626716c28b6286f8cf0f8174077f3d2244f3eb3 (ref #34429) Here is a test case: tests/auth_tests/test_forms.py diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py index b44f1edb24..f5e2612bf5 100644 a b import re 33import urllib.parse 44from unittest import mock 55 6from django.contrib.auth import password_validation 67from django.contrib.auth.forms import ( 78 AdminPasswordChangeForm, 89 AuthenticationForm, \u2026 \u2026 class SetPasswordFormTest(TestDataMixin, TestCase): 865866 form.fields[field_name].widget.attrs[\"autocomplete\"], autocomplete 866867 ) 867868 869 @override_settings( 870 AUTH_PASSWORD_VALIDATORS=[ 871 { 872 \"NAME\": ( 873 \"django.contrib.auth.password_validation.MinimumLengthValidator\" 874 ), 875 \"OPTIONS\": {\"min_length\": 12}, 876 }, 877 ] 878 ) 879 def test_extra_validation(self): 880 class ModifiedSetPasswordForm(SetPasswordForm): 881 def clean_new_password1(self): 882 new_password = self.cleaned_data[\"new_password1\"] 883 password_validation.validate_password(password=new_password) 884 return new_password 885 886 user = User.objects.get(username=\"testclient\") 887 form = ModifiedSetPasswordForm( 888 user, {\"new_password1\": \"abc\", \"new_password2\": \"abc\"} 889 ) 890 self.assertIs(form.is_valid(), False) 891 self.assertEqual( 892 form[\"new_password1\"].errors, 893 [\"This password is too short. It must contain at least 12 characters.\"], 894 ) 895 self.assertEqual( 896 form[\"new_password2\"].errors, 897 [\"This password is too short. It must contain at least 12 characters.\"], 898 ) 899 868900 869901class PasswordChangeFormTest(TestDataMixin, TestCase): 870902 def test_incorrect_password(self):", 1716525227.0], ["Thank you for testing 5.1 and raising the ticket \u05d0\u05d5\u05e8\u05d9 \ud83d\udc4d", 1716525498.0], ["Replying to Sarah Boyce: Hi \u05d0\u05d5\u05e8\u05d9, I spent quite a while with this. Next time please share links to your tests or code in the ticket. Sorry about that. Code is under \u200bhttps://github.com/speedy-net/speedy-net. Tests are in relevant test files. Recent tests I ran are under \u200bhttps://github.com/speedy-net/speedy-net/actions. The tests I mentioned in this ticket (speedy.core.accounts.tests.test_views.EditProfileCredentialsViewEnglishTestCase) are under \u200bhttps://github.com/speedy-net/speedy-net/blob/main/speedy/core/accounts/tests/test_views.py. Notice that there are also tests for French, German and other languages.", 1716547089.0]], "created_at": "2024-05-24T10:18:43Z"}
{"repo": "django/django", "pull_number": 18194, "instance_id": "django__django-18194", "issue_numbers": ["35470"], "base_commit": "e2428292abaca4758a7508175d31667fe2dff57c", "patch": "diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex c1691770da82..88ccf6106e83 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -3664,14 +3664,14 @@ Forms\n \n Globalization (``i18n``/``l10n``)\n ---------------------------------\n-* :setting:`DATE_FORMAT`\n-* :setting:`DATE_INPUT_FORMATS`\n-* :setting:`DATETIME_FORMAT`\n-* :setting:`DATETIME_INPUT_FORMATS`\n-* :setting:`DECIMAL_SEPARATOR`\n+\n+.. _settings-i18n:\n+\n+Internationalization (``i18n``)\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n * :setting:`FIRST_DAY_OF_WEEK`\n * :setting:`FORMAT_MODULE_PATH`\n-* :setting:`LANGUAGE_CODE`\n * :setting:`LANGUAGE_COOKIE_AGE`\n * :setting:`LANGUAGE_COOKIE_DOMAIN`\n * :setting:`LANGUAGE_COOKIE_HTTPONLY`\n@@ -3682,6 +3682,21 @@ Globalization (``i18n``/``l10n``)\n * :setting:`LANGUAGES`\n * :setting:`LANGUAGES_BIDI`\n * :setting:`LOCALE_PATHS`\n+* :setting:`TIME_ZONE`\n+* :setting:`USE_I18N`\n+* :setting:`USE_TZ`\n+\n+.. _settings-l10n:\n+\n+Localization (``l10n``)\n+~~~~~~~~~~~~~~~~~~~~~~~\n+\n+* :setting:`DATE_FORMAT`\n+* :setting:`DATE_INPUT_FORMATS`\n+* :setting:`DATETIME_FORMAT`\n+* :setting:`DATETIME_INPUT_FORMATS`\n+* :setting:`DECIMAL_SEPARATOR`\n+* :setting:`LANGUAGE_CODE`\n * :setting:`MONTH_DAY_FORMAT`\n * :setting:`NUMBER_GROUPING`\n * :setting:`SHORT_DATE_FORMAT`\n@@ -3689,10 +3704,7 @@ Globalization (``i18n``/``l10n``)\n * :setting:`THOUSAND_SEPARATOR`\n * :setting:`TIME_FORMAT`\n * :setting:`TIME_INPUT_FORMATS`\n-* :setting:`TIME_ZONE`\n-* :setting:`USE_I18N`\n * :setting:`USE_THOUSAND_SEPARATOR`\n-* :setting:`USE_TZ`\n * :setting:`YEAR_MONTH_FORMAT`\n \n HTTP\n", "test_patch": "", "problem_statement": "Separate i18n and l10n globalization settings into two sublists.\nDescription\n\t \nfrom this discussion \u200bhttps://github.com/django/django/pull/18028#discussion_r1567427192\n", "hints_text": [["Thank you! I agree that, separating \u200bGlobalization (i18n/l10n) settings between those that may overriding by locale formats and those that don't, is a nice clarification\ud83d\udc4d", 1716342442.0], ["\u200bPR", 1716452562.0]], "created_at": "2024-05-23T13:19:59Z"}
{"repo": "django/django", "pull_number": 18187, "instance_id": "django__django-18187", "issue_numbers": ["35467"], "base_commit": "02dab94c7b8585c7ae3854465574d768e1df75d3", "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 12467de74da4..9cc891d8077a 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -6,7 +6,7 @@\n from functools import partial, update_wrapper\n from urllib.parse import parse_qsl\n from urllib.parse import quote as urlquote\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from django import forms\n from django.conf import settings\n@@ -1384,7 +1384,7 @@ def render_change_form(\n         )\n \n     def _get_preserved_qsl(self, request, preserved_filters):\n-        query_string = urlparse(request.build_absolute_uri()).query\n+        query_string = urlsplit(request.build_absolute_uri()).query\n         return parse_qsl(query_string.replace(preserved_filters, \"\"))\n \n     def response_add(self, request, obj, post_url_continue=None):\ndiff --git a/django/contrib/admin/templatetags/admin_urls.py b/django/contrib/admin/templatetags/admin_urls.py\nindex 871b0d5f2051..176e7a49ed0b 100644\n--- a/django/contrib/admin/templatetags/admin_urls.py\n+++ b/django/contrib/admin/templatetags/admin_urls.py\n@@ -1,4 +1,4 @@\n-from urllib.parse import parse_qsl, unquote, urlparse, urlunparse\n+from urllib.parse import parse_qsl, unquote, urlsplit, urlunsplit\n \n from django import template\n from django.contrib.admin.utils import quote\n@@ -24,8 +24,8 @@ def add_preserved_filters(context, url, popup=False, to_field=None):\n     preserved_filters = context.get(\"preserved_filters\")\n     preserved_qsl = context.get(\"preserved_qsl\")\n \n-    parsed_url = list(urlparse(url))\n-    parsed_qs = dict(parse_qsl(parsed_url[4]))\n+    parsed_url = list(urlsplit(url))\n+    parsed_qs = dict(parse_qsl(parsed_url[3]))\n     merged_qs = {}\n \n     if preserved_qsl:\n@@ -66,5 +66,5 @@ def add_preserved_filters(context, url, popup=False, to_field=None):\n \n     merged_qs.update(parsed_qs)\n \n-    parsed_url[4] = urlencode(merged_qs)\n-    return urlunparse(parsed_url)\n+    parsed_url[3] = urlencode(merged_qs)\n+    return urlunsplit(parsed_url)\ndiff --git a/django/contrib/auth/decorators.py b/django/contrib/auth/decorators.py\nindex ea1cef079514..78e76a9ae9b4 100644\n--- a/django/contrib/auth/decorators.py\n+++ b/django/contrib/auth/decorators.py\n@@ -1,6 +1,6 @@\n import asyncio\n from functools import wraps\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from asgiref.sync import async_to_sync, sync_to_async\n \n@@ -25,8 +25,8 @@ def _redirect_to_login(request):\n             resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)\n             # If the login url is the same scheme and net location then just\n             # use the path as the \"next\" url.\n-            login_scheme, login_netloc = urlparse(resolved_login_url)[:2]\n-            current_scheme, current_netloc = urlparse(path)[:2]\n+            login_scheme, login_netloc = urlsplit(resolved_login_url)[:2]\n+            current_scheme, current_netloc = urlsplit(path)[:2]\n             if (not login_scheme or login_scheme == current_scheme) and (\n                 not login_netloc or login_netloc == current_netloc\n             ):\ndiff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py\nindex 761929d67dcd..cb409ee778a8 100644\n--- a/django/contrib/auth/middleware.py\n+++ b/django/contrib/auth/middleware.py\n@@ -1,5 +1,5 @@\n from functools import partial\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from django.conf import settings\n from django.contrib import auth\n@@ -74,8 +74,8 @@ def handle_no_permission(self, request, view_func):\n         resolved_login_url = resolve_url(self.get_login_url(view_func))\n         # If the login url is the same scheme and net location then use the\n         # path as the \"next\" url.\n-        login_scheme, login_netloc = urlparse(resolved_login_url)[:2]\n-        current_scheme, current_netloc = urlparse(path)[:2]\n+        login_scheme, login_netloc = urlsplit(resolved_login_url)[:2]\n+        current_scheme, current_netloc = urlsplit(path)[:2]\n         if (not login_scheme or login_scheme == current_scheme) and (\n             not login_netloc or login_netloc == current_netloc\n         ):\ndiff --git a/django/contrib/auth/mixins.py b/django/contrib/auth/mixins.py\nindex 0e46000d976e..1f2e95ff0061 100644\n--- a/django/contrib/auth/mixins.py\n+++ b/django/contrib/auth/mixins.py\n@@ -1,4 +1,4 @@\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from django.conf import settings\n from django.contrib.auth import REDIRECT_FIELD_NAME\n@@ -51,8 +51,8 @@ def handle_no_permission(self):\n         resolved_login_url = resolve_url(self.get_login_url())\n         # If the login url is the same scheme and net location then use the\n         # path as the \"next\" url.\n-        login_scheme, login_netloc = urlparse(resolved_login_url)[:2]\n-        current_scheme, current_netloc = urlparse(path)[:2]\n+        login_scheme, login_netloc = urlsplit(resolved_login_url)[:2]\n+        current_scheme, current_netloc = urlsplit(path)[:2]\n         if (not login_scheme or login_scheme == current_scheme) and (\n             not login_netloc or login_netloc == current_netloc\n         ):\ndiff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\nindex 9a6d18bcd2f5..a18cfdb347c0 100644\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -1,4 +1,4 @@\n-from urllib.parse import urlparse, urlunparse\n+from urllib.parse import urlsplit, urlunsplit\n \n from django.conf import settings\n \n@@ -183,13 +183,13 @@ def redirect_to_login(next, login_url=None, redirect_field_name=REDIRECT_FIELD_N\n     \"\"\"\n     resolved_url = resolve_url(login_url or settings.LOGIN_URL)\n \n-    login_url_parts = list(urlparse(resolved_url))\n+    login_url_parts = list(urlsplit(resolved_url))\n     if redirect_field_name:\n-        querystring = QueryDict(login_url_parts[4], mutable=True)\n+        querystring = QueryDict(login_url_parts[3], mutable=True)\n         querystring[redirect_field_name] = next\n-        login_url_parts[4] = querystring.urlencode(safe=\"/\")\n+        login_url_parts[3] = querystring.urlencode(safe=\"/\")\n \n-    return HttpResponseRedirect(urlunparse(login_url_parts))\n+    return HttpResponseRedirect(urlunsplit(login_url_parts))\n \n \n # Class-based password reset views\ndiff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 7394eff81857..686718a35501 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -36,13 +36,13 @@ def _should_handle(self, path):\n         * the host is provided as part of the base_url\n         * the request's path isn't under the media path (or equal)\n         \"\"\"\n-        return path.startswith(self.base_url[2]) and not self.base_url[1]\n+        return path.startswith(self.base_url.path) and not self.base_url.netloc\n \n     def file_path(self, url):\n         \"\"\"\n         Return the relative path to the media file on disk for the given URL.\n         \"\"\"\n-        relative_url = url.removeprefix(self.base_url[2])\n+        relative_url = url.removeprefix(self.base_url.path)\n         return url2pathname(relative_url)\n \n     def serve(self, request):\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 4ec7b7aee74f..1a58a6074346 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -792,13 +792,13 @@ def __init__(self, *, assume_scheme=None, **kwargs):\n     def to_python(self, value):\n         def split_url(url):\n             \"\"\"\n-            Return a list of url parts via urlparse.urlsplit(), or raise\n+            Return a list of url parts via urlsplit(), or raise\n             ValidationError for some malformed URLs.\n             \"\"\"\n             try:\n                 return list(urlsplit(url))\n             except ValueError:\n-                # urlparse.urlsplit can raise a ValueError with some\n+                # urlsplit can raise a ValueError with some\n                 # misformatted URLs.\n                 raise ValidationError(self.error_messages[\"invalid\"], code=\"invalid\")\n \ndiff --git a/django/http/response.py b/django/http/response.py\nindex eecd972cd688..0d756403dbc1 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -9,7 +9,7 @@\n import warnings\n from email.header import Header\n from http.client import responses\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from asgiref.sync import async_to_sync, sync_to_async\n \n@@ -616,7 +616,7 @@ class HttpResponseRedirectBase(HttpResponse):\n     def __init__(self, redirect_to, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         self[\"Location\"] = iri_to_uri(redirect_to)\n-        parsed = urlparse(str(redirect_to))\n+        parsed = urlsplit(str(redirect_to))\n         if parsed.scheme and parsed.scheme not in self.allowed_schemes:\n             raise DisallowedRedirect(\n                 \"Unsafe redirect to URL with protocol '%s'\" % parsed.scheme\ndiff --git a/django/middleware/common.py b/django/middleware/common.py\nindex 9f71b9d27885..bf22d00f0128 100644\n--- a/django/middleware/common.py\n+++ b/django/middleware/common.py\n@@ -1,5 +1,5 @@\n import re\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from django.conf import settings\n from django.core.exceptions import PermissionDenied\n@@ -171,7 +171,7 @@ def is_ignorable_request(self, request, uri, domain, referer):\n \n         # The referer is equal to the current URL, ignoring the scheme (assumed\n         # to be a poorly implemented bot).\n-        parsed_referer = urlparse(referer)\n+        parsed_referer = urlsplit(referer)\n         if parsed_referer.netloc in [\"\", domain] and parsed_referer.path == uri:\n             return True\n \ndiff --git a/django/middleware/csrf.py b/django/middleware/csrf.py\nindex f7943494ba22..5ae1aae5c620 100644\n--- a/django/middleware/csrf.py\n+++ b/django/middleware/csrf.py\n@@ -8,7 +8,7 @@\n import logging\n import string\n from collections import defaultdict\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from django.conf import settings\n from django.core.exceptions import DisallowedHost, ImproperlyConfigured\n@@ -174,7 +174,7 @@ class CsrfViewMiddleware(MiddlewareMixin):\n     @cached_property\n     def csrf_trusted_origins_hosts(self):\n         return [\n-            urlparse(origin).netloc.lstrip(\"*\")\n+            urlsplit(origin).netloc.lstrip(\"*\")\n             for origin in settings.CSRF_TRUSTED_ORIGINS\n         ]\n \n@@ -190,7 +190,7 @@ def allowed_origin_subdomains(self):\n         \"\"\"\n         allowed_origin_subdomains = defaultdict(list)\n         for parsed in (\n-            urlparse(origin)\n+            urlsplit(origin)\n             for origin in settings.CSRF_TRUSTED_ORIGINS\n             if \"*\" in origin\n         ):\n@@ -284,7 +284,7 @@ def _origin_verified(self, request):\n         if request_origin in self.allowed_origins_exact:\n             return True\n         try:\n-            parsed_origin = urlparse(request_origin)\n+            parsed_origin = urlsplit(request_origin)\n         except ValueError:\n             return False\n         request_scheme = parsed_origin.scheme\n@@ -300,7 +300,7 @@ def _check_referer(self, request):\n             raise RejectRequest(REASON_NO_REFERER)\n \n         try:\n-            referer = urlparse(referer)\n+            referer = urlsplit(referer)\n         except ValueError:\n             raise RejectRequest(REASON_MALFORMED_REFERER)\n \ndiff --git a/django/utils/http.py b/django/utils/http.py\nindex 78dfee7feecf..bf783562dddb 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -6,7 +6,7 @@\n from email.utils import formatdate\n from urllib.parse import quote, unquote\n from urllib.parse import urlencode as original_urlencode\n-from urllib.parse import urlparse\n+from urllib.parse import urlsplit\n \n from django.utils.datastructures import MultiValueDict\n from django.utils.regex_helper import _lazy_re_compile\n@@ -271,11 +271,11 @@ def url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):\n \n def _url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=False):\n     # Chrome considers any URL with more than two slashes to be absolute, but\n-    # urlparse is not so flexible. Treat any url with three slashes as unsafe.\n+    # urlsplit is not so flexible. Treat any url with three slashes as unsafe.\n     if url.startswith(\"///\"):\n         return False\n     try:\n-        url_info = urlparse(url)\n+        url_info = urlsplit(url)\n     except ValueError:  # e.g. invalid IPv6 addresses\n         return False\n     # Forbid URLs like http:///example.com - with a scheme, but without a hostname.\ndiff --git a/docs/ref/urlresolvers.txt b/docs/ref/urlresolvers.txt\nindex eb0b991f1bb2..b335d1fc395c 100644\n--- a/docs/ref/urlresolvers.txt\n+++ b/docs/ref/urlresolvers.txt\n@@ -203,7 +203,7 @@ A :class:`ResolverMatch` object can also be assigned to a triple::\n One possible use of :func:`~django.urls.resolve` would be to test whether a\n view would raise a ``Http404`` error before redirecting to it::\n \n-    from urllib.parse import urlparse\n+    from urllib.parse import urlsplit\n     from django.urls import resolve\n     from django.http import Http404, HttpResponseRedirect\n \n@@ -215,7 +215,7 @@ view would raise a ``Http404`` error before redirecting to it::\n         # modify the request and response as required, e.g. change locale\n         # and set corresponding locale cookie\n \n-        view, args, kwargs = resolve(urlparse(next)[2])\n+        view, args, kwargs = resolve(urlsplit(next).path)\n         kwargs[\"request\"] = request\n         try:\n             view(*args, **kwargs)\n", "test_patch": "diff --git a/django/test/client.py b/django/test/client.py\nindex aa42c1f60ace..a755aae05caf 100644\n--- a/django/test/client.py\n+++ b/django/test/client.py\n@@ -8,7 +8,7 @@\n from http import HTTPStatus\n from importlib import import_module\n from io import BytesIO, IOBase\n-from urllib.parse import unquote_to_bytes, urljoin, urlparse, urlsplit\n+from urllib.parse import unquote_to_bytes, urljoin, urlsplit\n \n from asgiref.sync import sync_to_async\n \n@@ -458,11 +458,7 @@ def _encode_json(self, data, content_type):\n         return json.dumps(data, cls=self.json_encoder) if should_encode else data\n \n     def _get_path(self, parsed):\n-        path = parsed.path\n-        # If there are parameters, add them\n-        if parsed.params:\n-            path += \";\" + parsed.params\n-        path = unquote_to_bytes(path)\n+        path = unquote_to_bytes(parsed.path)\n         # Replace the behavior where non-ASCII values in the WSGI environ are\n         # arbitrarily decoded with ISO-8859-1.\n         # Refs comment in `get_bytes_from_wsgi()`.\n@@ -647,7 +643,7 @@ def generic(\n         **extra,\n     ):\n         \"\"\"Construct an arbitrary HTTP request.\"\"\"\n-        parsed = urlparse(str(path))  # path can be lazy\n+        parsed = urlsplit(str(path))  # path can be lazy\n         data = force_bytes(data, settings.DEFAULT_CHARSET)\n         r = {\n             \"PATH_INFO\": self._get_path(parsed),\n@@ -671,8 +667,7 @@ def generic(\n         # If QUERY_STRING is absent or empty, we want to extract it from the URL.\n         if not r.get(\"QUERY_STRING\"):\n             # WSGI requires latin-1 encoded strings. See get_path_info().\n-            query_string = parsed[4].encode().decode(\"iso-8859-1\")\n-            r[\"QUERY_STRING\"] = query_string\n+            r[\"QUERY_STRING\"] = parsed.query.encode().decode(\"iso-8859-1\")\n         return self.request(**r)\n \n \n@@ -748,7 +743,7 @@ def generic(\n         **extra,\n     ):\n         \"\"\"Construct an arbitrary HTTP request.\"\"\"\n-        parsed = urlparse(str(path))  # path can be lazy.\n+        parsed = urlsplit(str(path))  # path can be lazy.\n         data = force_bytes(data, settings.DEFAULT_CHARSET)\n         s = {\n             \"method\": method,\n@@ -772,7 +767,7 @@ def generic(\n         else:\n             # If QUERY_STRING is absent or empty, we want to extract it from\n             # the URL.\n-            s[\"query_string\"] = parsed[4]\n+            s[\"query_string\"] = parsed.query\n         if headers:\n             extra.update(HttpHeaders.to_asgi_names(headers))\n         s[\"headers\"] += [\ndiff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 0a802c887bf0..f1c6b5ae9c54 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -21,7 +21,7 @@\n     urljoin,\n     urlparse,\n     urlsplit,\n-    urlunparse,\n+    urlunsplit,\n )\n from urllib.request import url2pathname\n \n@@ -541,11 +541,9 @@ def assertURLEqual(self, url1, url2, msg_prefix=\"\"):\n         def normalize(url):\n             \"\"\"Sort the URL's query string parameters.\"\"\"\n             url = str(url)  # Coerce reverse_lazy() URLs.\n-            scheme, netloc, path, params, query, fragment = urlparse(url)\n+            scheme, netloc, path, query, fragment = urlsplit(url)\n             query_parts = sorted(parse_qsl(query))\n-            return urlunparse(\n-                (scheme, netloc, path, params, urlencode(query_parts), fragment)\n-            )\n+            return urlunsplit((scheme, netloc, path, urlencode(query_parts), fragment))\n \n         if msg_prefix:\n             msg_prefix += \": \"\n@@ -1637,11 +1635,11 @@ def _should_handle(self, path):\n         * the host is provided as part of the base_url\n         * the request's path isn't under the media path (or equal)\n         \"\"\"\n-        return path.startswith(self.base_url[2]) and not self.base_url[1]\n+        return path.startswith(self.base_url.path) and not self.base_url.netloc\n \n     def file_path(self, url):\n         \"\"\"Return the relative path to the file on disk for the given URL.\"\"\"\n-        relative_url = url.removeprefix(self.base_url[2])\n+        relative_url = url.removeprefix(self.base_url.path)\n         return url2pathname(relative_url)\n \n     def get_response(self, request):\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex d49e7d028b7b..cb6815e7a85a 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -4,7 +4,7 @@\n import unittest\n import zoneinfo\n from unittest import mock\n-from urllib.parse import parse_qsl, urljoin, urlparse\n+from urllib.parse import parse_qsl, urljoin, urlsplit\n \n from django import forms\n from django.contrib import admin\n@@ -357,7 +357,7 @@ def test_add_query_string_persists(self):\n                             **save_option,\n                         },\n                     )\n-                    parsed_url = urlparse(response.url)\n+                    parsed_url = urlsplit(response.url)\n                     self.assertEqual(parsed_url.query, qsl)\n \n     def test_change_query_string_persists(self):\n@@ -386,7 +386,7 @@ def test_change_query_string_persists(self):\n                             **save_option,\n                         },\n                     )\n-                    parsed_url = urlparse(response.url)\n+                    parsed_url = urlsplit(response.url)\n                     self.assertEqual(parsed_url.query, qsl)\n \n     def test_basic_edit_GET(self):\n@@ -8032,11 +8032,11 @@ def assertURLEqual(self, url1, url2, msg_prefix=\"\"):\n         Assert that two URLs are equal despite the ordering\n         of their querystring. Refs #22360.\n         \"\"\"\n-        parsed_url1 = urlparse(url1)\n+        parsed_url1 = urlsplit(url1)\n         path1 = parsed_url1.path\n         parsed_qs1 = dict(parse_qsl(parsed_url1.query))\n \n-        parsed_url2 = urlparse(url2)\n+        parsed_url2 = urlsplit(url2)\n         path2 = parsed_url2.path\n         parsed_qs2 = dict(parse_qsl(parsed_url2.query))\n \ndiff --git a/tests/csrf_tests/tests.py b/tests/csrf_tests/tests.py\nindex 9407221cd13b..b73627653485 100644\n--- a/tests/csrf_tests/tests.py\n+++ b/tests/csrf_tests/tests.py\n@@ -709,25 +709,21 @@ def test_https_malformed_referer(self):\n         response = mw.process_view(req, post_form_view, (), {})\n         self.assertContains(response, malformed_referer_msg, status_code=403)\n         # missing scheme\n-        # >>> urlparse('//example.com/')\n-        # ParseResult(\n-        #   scheme='', netloc='example.com', path='/', params='', query='', fragment='',\n-        # )\n+        # >>> urlsplit('//example.com/')\n+        # SplitResult(scheme='', netloc='example.com', path='/', query='', fragment='')\n         req.META[\"HTTP_REFERER\"] = \"//example.com/\"\n         self._check_referer_rejects(mw, req)\n         response = mw.process_view(req, post_form_view, (), {})\n         self.assertContains(response, malformed_referer_msg, status_code=403)\n         # missing netloc\n-        # >>> urlparse('https://')\n-        # ParseResult(\n-        #   scheme='https', netloc='', path='', params='', query='', fragment='',\n-        # )\n+        # >>> urlsplit('https://')\n+        # SplitResult(scheme='https', netloc='', path='', query='', fragment='')\n         req.META[\"HTTP_REFERER\"] = \"https://\"\n         self._check_referer_rejects(mw, req)\n         response = mw.process_view(req, post_form_view, (), {})\n         self.assertContains(response, malformed_referer_msg, status_code=403)\n         # Invalid URL\n-        # >>> urlparse('https://[')\n+        # >>> urlsplit('https://[')\n         # ValueError: Invalid IPv6 URL\n         req.META[\"HTTP_REFERER\"] = \"https://[\"\n         self._check_referer_rejects(mw, req)\n@@ -979,7 +975,7 @@ def test_bad_origin_csrf_trusted_origin_bad_protocol(self):\n     @override_settings(ALLOWED_HOSTS=[\"www.example.com\"])\n     def test_bad_origin_cannot_be_parsed(self):\n         \"\"\"\n-        A POST request with an origin that can't be parsed by urlparse() is\n+        A POST request with an origin that can't be parsed by urlsplit() is\n         rejected.\n         \"\"\"\n         req = self._get_POST_request_with_token()\n", "problem_statement": "Prefer urlsplit() over urlparse()\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nMany places in Django use [urlparse()](\u200bhttps://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse), which supports the rarely-used \u201cpath parameter\u201d syntax (not to be confused with query parameters). The urlsplit() function is similar but does not parse such path parameters, which makes it a bit faster.\nI think most or all calls to urlparse() can be replaced with urlsplit(), and similarly urlunparse() with urlunsplit(). This may make a small but measurable performance difference in common paths, such as in CsrfViewMiddleware or the test Client.\nSee more in this Anthony Sottile video: \u200bhttps://www.youtube.com/watch?v=ABJvdsIANds , where he reports a 3% import time improvement on the Stripe project.\n", "hints_text": [["Accepting for someone to make updates and confirm with benchmarks. \ud83d\udc4d", 1716266136.0], ["From some basic testing, it looks like this should have a nice improvement: In [1]: import urllib.parse In [2]: %timeit urllib.parse.urlparse(\"https://example.com\") 1.52 \u00b5s \u00b1 37.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each) In [3]: %timeit urllib.parse.urlsplit(\"https://example.com\") 258 ns \u00b1 1.14 ns per loop (mean \u00b1 std. dev. of 7 runs, 1,000,000 loops each) The difference stays about constant, even with longer URLs. The specifics will obviously vary by hardware and Python version (the above is 3.12.3), but ~6x improvement is definitely worthwhile.", 1716310799.0], ["\u200bPR.", 1716350008.0]], "created_at": "2024-05-22T08:44:39Z"}
{"repo": "django/django", "pull_number": 18184, "instance_id": "django__django-18184", "issue_numbers": ["35139"], "base_commit": "4971a9afe5642569f3dcfcd3972ebb39e88dd457", "patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 47c84eba3bea..7c911f4b2352 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -90,10 +90,13 @@ def open(self, mode=\"rb\"):\n     # to further manipulate the underlying file, as well as update the\n     # associated model instance.\n \n+    def _set_instance_attribute(self, name, content):\n+        setattr(self.instance, self.field.attname, name)\n+\n     def save(self, name, content, save=True):\n         name = self.field.generate_filename(self.instance, name)\n         self.name = self.storage.save(name, content, max_length=self.field.max_length)\n-        setattr(self.instance, self.field.attname, self.name)\n+        self._set_instance_attribute(self.name, content)\n         self._committed = True\n \n         # Save the object because it has changed, unless save is False\n@@ -391,6 +394,12 @@ def __set__(self, instance, value):\n \n \n class ImageFieldFile(ImageFile, FieldFile):\n+    def _set_instance_attribute(self, name, content):\n+        setattr(self.instance, self.field.attname, content)\n+        # Update the name in case generate_filename() or storage.save() changed\n+        # it, but bypass the descriptor to avoid re-reading the file.\n+        self.instance.__dict__[self.field.attname] = self.name\n+\n     def delete(self, save=True):\n         # Clear the image dimensions cache\n         if hasattr(self, \"_dimensions_cache\"):\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex bb5e4f3fe415..8d6c136e6db3 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -434,6 +434,11 @@ Miscellaneous\n   :class:`~django.core.exceptions.FieldError` when saving a file without a\n   ``name``.\n \n+* ``ImageField.update_dimension_fields(force=True)`` is no longer called after\n+  saving the image to storage. If your storage backend resizes images, the\n+  ``width_field`` and ``height_field`` will not match the width and height of\n+  the image.\n+\n .. _deprecated-features-5.1:\n \n Features deprecated in 5.1\n", "test_patch": "diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\nindex e34f3c8947aa..18a6fdbc1c83 100644\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -13,6 +13,8 @@\n from django.utils.functional import SimpleLazyObject\n from django.utils.translation import gettext_lazy as _\n \n+from .storage import NoReadFileSystemStorage\n+\n try:\n     from PIL import Image\n except ImportError:\n@@ -373,6 +375,21 @@ class PersonTwoImages(models.Model):\n             width_field=\"headshot_width\",\n         )\n \n+    class PersonNoReadImage(models.Model):\n+        \"\"\"\n+        Model that defines an ImageField with a storage backend that does not\n+        support reading.\n+        \"\"\"\n+\n+        mugshot = models.ImageField(\n+            upload_to=\"tests\",\n+            storage=NoReadFileSystemStorage(),\n+            width_field=\"mugshot_width\",\n+            height_field=\"mugshot_height\",\n+        )\n+        mugshot_width = models.IntegerField()\n+        mugshot_height = models.IntegerField()\n+\n \n class CustomJSONDecoder(json.JSONDecoder):\n     def __init__(self, object_hook=None, *args, **kwargs):\ndiff --git a/tests/model_fields/storage.py b/tests/model_fields/storage.py\nnew file mode 100644\nindex 000000000000..9002c126834a\n--- /dev/null\n+++ b/tests/model_fields/storage.py\n@@ -0,0 +1,6 @@\n+from django.core.files.storage.filesystem import FileSystemStorage\n+\n+\n+class NoReadFileSystemStorage(FileSystemStorage):\n+    def open(self, *args, **kwargs):\n+        raise AssertionError(\"This storage class does not support reading.\")\ndiff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 8c93ed1bdbeb..7265da598b63 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -18,6 +18,7 @@\n     from .models import (\n         Person,\n         PersonDimensionsFirst,\n+        PersonNoReadImage,\n         PersonTwoImages,\n         PersonWithHeight,\n         PersonWithHeightAndWidth,\n@@ -30,7 +31,7 @@ class Person:\n         pass\n \n     PersonWithHeight = PersonWithHeightAndWidth = PersonDimensionsFirst = Person\n-    PersonTwoImages = Person\n+    PersonTwoImages = PersonNoReadImage = Person\n \n \n class ImageFieldTestMixin(SerializeMixin):\n@@ -469,3 +470,28 @@ def test_dimensions(self):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n         self.assertIs(p.headshot.was_opened, True)\n+\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class NoReadTests(ImageFieldTestMixin, TestCase):\n+    def test_width_height_correct_name_mangling_correct(self):\n+        instance1 = PersonNoReadImage()\n+\n+        instance1.mugshot.save(\"mug\", self.file1)\n+\n+        self.assertEqual(instance1.mugshot_width, 4)\n+        self.assertEqual(instance1.mugshot_height, 8)\n+\n+        instance1.save()\n+\n+        self.assertEqual(instance1.mugshot_width, 4)\n+        self.assertEqual(instance1.mugshot_height, 8)\n+\n+        instance2 = PersonNoReadImage()\n+        instance2.mugshot.save(\"mug\", self.file1)\n+        instance2.save()\n+\n+        self.assertNotEqual(instance1.mugshot.name, instance2.mugshot.name)\n+\n+        self.assertEqual(instance1.mugshot_width, instance2.mugshot_width)\n+        self.assertEqual(instance1.mugshot_height, instance2.mugshot_height)\n", "problem_statement": "Performing a save() with an ImageField where width_field or height_field is set results in an extra read operation\nDescription\n\t \nI have prepped a github repo here with the basic tests: \u200bhttps://github.com/john-parton/django-image-field-extra-read\nConditions for behavior\nYou must have an ImageField with the width_field or height_field arguments set.\nDescription of current behavior\nWhen a model is saved, the image file is written out using the Storage API, and then\nin order for the width and height fields to be updated, the file is read back out\nand then the width and height are extracted from the image.\nIn the case the storage is local, the performance impact is probably negligible, \nunless the application is seriously IO constrained, however if the storage is\nremote, the performance impact is significant, and there can be other impacts on\noperations.\nFor instance, if using S3 as backing, more GET operations are performed than\nstrictly necessary. This could be a few dollars a day of operational costs if your\nscale is small, but can be significant if egress charges are high.\nAs another example, CloudFlare Images rate limits requests. This effectively cuts\nthe rate limit in half because every save operations requires an additional GET.\nProposed behavior\nThe proposed behavior is to simple read the image file which is resident in memory\nwithout reading it back out from the storage backend.\nPossible breaking issues\nThe vast majority of storage backends and use cases likely guarantee that if you\nwrite a file into storage, and then retrieve it, you will get the same file back.\nHowever, for some image-specific services, they will compress or crush larger images.\nFor users who specifically have this use case, they may end up with the width_field\nand height_field not representing the actual size of the image in the store, but\nrather the size of the image at time of upload.\nExplanation of current behavior\nIt looks like when a model's save() method is called, the field's pre_save() method\nis called which results in the descriptor for the field having its get method\ncalled and then immediately having its set method called with a similar value.\nThe effect is to coerce the value of the field to ImageFieldFile which is a subclass\nof ImageFile. The ImageFieldFile instance is assigned a property of file which\nis the wrapped original value.\nThe image field then saves and persists the data using the storage API, and then the\nwrapped file isn't referred to later to get the width and height. When the width and\nheight are requested, the file is read back out of storage.\nProposed fix\nNo specific fix at this time.\nMitigating breaking issues\nConsidering how unusual this use case is, it may be sufficient to document the change\nin behavior and provide a code snippet to wire up a signal handler to do the\nadditional read for those users who have the unusual storage backends and actually\ncare about the width/height being what is on disk. This would also allow users to\ncustomize the behavior. For instance, maybe if the image is under a certain resolution,\nthe storage provider guarantees they don't mangle the image. A user could enshrine\nthat logic in the signal handler, so they could still get the performance uplift where\nappropriate.\nSummary\nIt seems pretty unlikely that this is the intended behavior, and seems to largely be a byproduct of heavy descriptor use and \"magic\" in the code. I've tried mitigating this in my application code, but it requires me to monkey patch some private methods, and I'm not even sure I got it right. Any attempt to \"fix\" this at a level higher than Django's internals will just result in an unmaintainable mess. Back when Django was new, I'm not sure I would make this argument, but now storage is usually backed by some API like S3, I think it makes sense to make avoiding an extra network request the \"sane default.\"\n", "hints_text": [["Looks like a duplicate of #8307. Can you add your analysis as a comment in the original ticket?", 1706109145.0], ["Wow, okay. I did a search and thought it was thorough. Didn't realize it was a Pre- 1.0 existing issue. I'll update it there.", 1706109498.0]], "created_at": "2024-05-21T08:55:07Z"}
{"repo": "django/django", "pull_number": 18172, "instance_id": "django__django-18172", "issue_numbers": ["35443"], "base_commit": "b049bec7cfe9b5854584d240addb44fa1e9375a5", "patch": "diff --git a/django/contrib/humanize/templatetags/humanize.py b/django/contrib/humanize/templatetags/humanize.py\nindex 19000c185cb7..174e367a692a 100644\n--- a/django/contrib/humanize/templatetags/humanize.py\n+++ b/django/contrib/humanize/templatetags/humanize.py\n@@ -24,12 +24,14 @@\n def ordinal(value):\n     \"\"\"\n     Convert an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',\n-    3 is '3rd', etc. Works for any integer.\n+    3 is '3rd', etc. Works for any non-negative integer.\n     \"\"\"\n     try:\n         value = int(value)\n     except (TypeError, ValueError):\n         return value\n+    if value < 0:\n+        return str(value)\n     if value % 100 in (11, 12, 13):\n         # Translators: Ordinal format for 11 (11th), 12 (12th), and 13 (13th).\n         value = pgettext(\"ordinal 11, 12, 13\", \"{}th\").format(value)\ndiff --git a/docs/ref/contrib/humanize.txt b/docs/ref/contrib/humanize.txt\nindex 7c1af53ed354..1596f30b97f9 100644\n--- a/docs/ref/contrib/humanize.txt\n+++ b/docs/ref/contrib/humanize.txt\n@@ -143,3 +143,4 @@ Examples:\n * ``3`` becomes ``3rd``.\n \n You can pass in either an integer or a string representation of an integer.\n+Negative integers are returned unchanged.\n", "test_patch": "diff --git a/tests/humanize_tests/tests.py b/tests/humanize_tests/tests.py\nindex 5e4f7f0ef7f1..ab967e287476 100644\n--- a/tests/humanize_tests/tests.py\n+++ b/tests/humanize_tests/tests.py\n@@ -55,6 +55,9 @@ def test_ordinal(self):\n             \"102\",\n             \"103\",\n             \"111\",\n+            \"-0\",\n+            \"-1\",\n+            \"-105\",\n             \"something else\",\n             None,\n         )\n@@ -70,6 +73,9 @@ def test_ordinal(self):\n             \"102nd\",\n             \"103rd\",\n             \"111th\",\n+            \"0th\",\n+            \"-1\",\n+            \"-105\",\n             \"something else\",\n             None,\n         )\n", "problem_statement": "Fix negative numbers for ordinals\nDescription\n\t \nThe ordinal template tag in /contrib/humanize/templatetags/humanize.py returns strange results for negative numbers. For example:\n-1 becomes -1th\n-9 becomes -9st\n-8 becomes -8nd\n-7 becomes -7rd\nI think that can be regarded as a bug. I can think of following approaches for dealing with it.\n0) The null option. Won't fix. Assume ordinals are not supposed to support negative numbers. I can live with that; I don't have a use case for them either. I only discovered this anomaly while running a unit test with a -1 input. But it does feel weird to knowingly have this issue.\n1) Treat it as invalid input and just return the original input; similar to a ValueError.\n2) Treat it as a positive number, and return the ordinal for its absolute value.\n3) Treat it as valid input, and return the ordinal for its absolute value with a minus sign in front of it. I assume that will work for non-English languages too.\nI suggest doing 3). Either way, if a decision or recommendation is made to do anything about it I can prepare a PR.\n", "hints_text": [["I think option 1 with a tweak to the docs, I don't think saying -2nd makes sense to support", 1715563489.0]], "created_at": "2024-05-16T08:37:19Z"}
{"repo": "django/django", "pull_number": 18161, "instance_id": "django__django-18161", "issue_numbers": ["35441"], "base_commit": "62300b81cf7687d176af3b40aa6101942801292d", "patch": "diff --git a/docs/ref/templates/api.txt b/docs/ref/templates/api.txt\nindex 26e4ff4c2359..a46717b8d724 100644\n--- a/docs/ref/templates/api.txt\n+++ b/docs/ref/templates/api.txt\n@@ -201,12 +201,37 @@ Once you have a compiled :class:`Template` object, you can render a context\n with it. You can reuse the same template to render it several times with\n different contexts.\n \n-.. class:: Context(dict_=None)\n+.. class:: Context(dict_=None, autoescape=True, use_l10n=None, use_tz=None)\n \n     The constructor of ``django.template.Context`` takes an optional argument \u2014\n     a dictionary mapping variable names to variable values.\n \n-    For details, see :ref:`playing-with-context` below.\n+    Three optional keyword arguments can also be specified:\n+\n+    * ``autoescape`` controls whether HTML autoescaping is enabled.\n+\n+      It defaults to ``True``.\n+\n+      .. warning::\n+\n+          Only set it to ``False`` if you're rendering non-HTML templates!\n+\n+    * ``use_l10n`` overrides whether values will be localized by default. If\n+      set to ``True`` numbers and dates will be formatted based on locale.\n+\n+      It defaults to ``None``.\n+\n+      See :ref:`topic-l10n-templates` for details.\n+\n+    * ``use_tz`` overrides whether dates are converted to the local time when\n+      rendered in a template. If set to ``True`` all dates will be rendered\n+      using the local timezone. This takes precedence over :setting:`USE_TZ`.\n+\n+      It defaults to ``None``.\n+\n+      See :ref:`time-zones-in-templates` for details.\n+\n+    For example usage, see :ref:`playing-with-context` below.\n \n .. method:: Template.render(context)\n \n@@ -610,9 +635,9 @@ against ``dict``::\n Using ``RequestContext``\n ------------------------\n \n-.. class:: RequestContext(request, dict_=None, processors=None)\n+.. class:: RequestContext(request, dict_=None, processors=None, use_l10n=None, use_tz=None, autoescape=True)\n \n-Django comes with a special ``Context`` class,\n+Django comes with a special :class:`~django.template.Context` class,\n ``django.template.RequestContext``, that acts slightly differently from the\n normal ``django.template.Context``. The first difference is that it takes an\n :class:`~django.http.HttpRequest` as its first argument. For example::\n", "test_patch": "", "problem_statement": "Context autoescape parameter is not documented\nDescription\n\t \nIn #35296 I was advised to use the autoescape parameter of the Context constructor. However, it is not documented. The \u200breference for Context only mentions the dict_ parameter.\nIf this parameter is part of the public API, it should be documented.\n", "hints_text": [["Hello Roman, I have followed the docs and pointers you provided and I think you are right, the Context docs could use some improving. Would you be willing to help making a patch? Thank you!", 1715269399.0], ["I'll write some docs for this!", 1715457045.0], ["Here's a link to the patch: \u200bhttps://github.com/django/django/pull/18161", 1715551890.0]], "created_at": "2024-05-13T03:08:58Z"}
{"repo": "django/django", "pull_number": 18160, "instance_id": "django__django-18160", "issue_numbers": ["35275"], "base_commit": "ceaf1e2848583ba832cc74715da38c802b6b0671", "patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\nindex ff702c53b0ea..a31f65718334 100644\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -1,6 +1,5 @@\n from types import NoneType\n \n-from django.contrib.postgres.indexes import OpClass\n from django.core.exceptions import ValidationError\n from django.db import DEFAULT_DB_ALIAS, NotSupportedError\n from django.db.backends.ddl_references import Expressions, Statement, Table\n@@ -208,12 +207,10 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n                         if isinstance(expr, F) and expr.name in exclude:\n                             return\n             rhs_expression = expression.replace_expressions(replacements)\n-            # Remove OpClass because it only has sense during the constraint\n-            # creation.\n-            if isinstance(expression, OpClass):\n-                expression = expression.get_source_expressions()[0]\n-            if isinstance(rhs_expression, OpClass):\n-                rhs_expression = rhs_expression.get_source_expressions()[0]\n+            if hasattr(expression, \"get_expression_for_validation\"):\n+                expression = expression.get_expression_for_validation()\n+            if hasattr(rhs_expression, \"get_expression_for_validation\"):\n+                rhs_expression = rhs_expression.get_expression_for_validation()\n             lookup = PostgresOperatorLookup(lhs=expression, rhs=rhs_expression)\n             lookup.postgres_operator = operator\n             lookups.append(lookup)\ndiff --git a/django/contrib/postgres/indexes.py b/django/contrib/postgres/indexes.py\nindex cc944ed33558..05fdbeed5e22 100644\n--- a/django/contrib/postgres/indexes.py\n+++ b/django/contrib/postgres/indexes.py\n@@ -244,6 +244,7 @@ def check_supported(self, schema_editor):\n \n class OpClass(Func):\n     template = \"%(expressions)s %(name)s\"\n+    constraint_validation_compatible = False\n \n     def __init__(self, expression, name):\n         super().__init__(expression, name=name)\ndiff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 9c63a0940d8b..3e6c5205c696 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -6,7 +6,7 @@\n from django.core.exceptions import FieldDoesNotExist, FieldError, ValidationError\n from django.db import connections\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import Exists, ExpressionList, F, OrderBy, RawSQL\n+from django.db.models.expressions import Exists, ExpressionList, F, RawSQL\n from django.db.models.indexes import IndexExpression\n from django.db.models.lookups import Exact\n from django.db.models.query_utils import Q\n@@ -644,9 +644,8 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n             }\n             expressions = []\n             for expr in self.expressions:\n-                # Ignore ordering.\n-                if isinstance(expr, OrderBy):\n-                    expr = expr.expression\n+                if hasattr(expr, \"get_expression_for_validation\"):\n+                    expr = expr.get_expression_for_validation()\n                 expressions.append(Exact(expr, expr.replace_expressions(replacements)))\n             queryset = queryset.filter(*expressions)\n         model_class_pk = instance._get_pk_val(model._meta)\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 6032b4d1f49b..4ee22420d964 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -180,6 +180,8 @@ class BaseExpression:\n     window_compatible = False\n     # Can the expression be used as a database default value?\n     allowed_default = False\n+    # Can the expression be used during a constraint validation?\n+    constraint_validation_compatible = True\n \n     def __init__(self, output_field=None):\n         if output_field is not None:\n@@ -484,6 +486,20 @@ def select_format(self, compiler, sql, params):\n             return self.output_field.select_format(compiler, sql, params)\n         return sql, params\n \n+    def get_expression_for_validation(self):\n+        # Ignore expressions that cannot be used during a constraint validation.\n+        if not getattr(self, \"constraint_validation_compatible\", True):\n+            try:\n+                (expression,) = self.get_source_expressions()\n+            except ValueError as e:\n+                raise ValueError(\n+                    \"Expressions with constraint_validation_compatible set to False \"\n+                    \"must have only one source expression.\"\n+                ) from e\n+            else:\n+                return expression\n+        return self\n+\n \n @deconstructible\n class Expression(BaseExpression, Combinable):\n@@ -1716,6 +1732,7 @@ def as_sql(self, compiler, *args, **kwargs):\n class OrderBy(Expression):\n     template = \"%(expression)s %(ordering)s\"\n     conditional = False\n+    constraint_validation_compatible = False\n \n     def __init__(self, expression, descending=False, nulls_first=None, nulls_last=None):\n         if nulls_first and nulls_last:\ndiff --git a/docs/ref/models/expressions.txt b/docs/ref/models/expressions.txt\nindex 67baef7dfc26..f630142294dc 100644\n--- a/docs/ref/models/expressions.txt\n+++ b/docs/ref/models/expressions.txt\n@@ -1058,6 +1058,15 @@ calling the appropriate methods on the wrapped expression.\n         Tells Django that this expression can be used in\n         :attr:`Field.db_default`. Defaults to ``False``.\n \n+    .. attribute:: constraint_validation_compatible\n+\n+        .. versionadded:: 5.1\n+\n+        Tells Django that this expression can be used during a constraint\n+        validation. Expressions with ``constraint_validation_compatible`` set\n+        to ``False`` must have only one source expression. Defaults to\n+        ``True``.\n+\n     .. attribute:: contains_aggregate\n \n         Tells Django that this expression contains an aggregate and that a\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex f2a6bccb0c4d..f068f3e96b05 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -281,6 +281,10 @@ Models\n   reload a model's value. This can be used to lock the row before reloading or\n   to select related objects.\n \n+* The new :attr:`.Expression.constraint_validation_compatible` attribute allows\n+  specifying that the expression should be ignored during a constraint\n+  validation.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex f7233305a7a4..353890009201 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1425,6 +1425,16 @@ class TestModel(Model):\n             hash(Expression(TestModel._meta.get_field(\"other_field\"))),\n         )\n \n+    def test_get_expression_for_validation_only_one_source_expression(self):\n+        expression = Expression()\n+        expression.constraint_validation_compatible = False\n+        msg = (\n+            \"Expressions with constraint_validation_compatible set to False must have \"\n+            \"only one source expression.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            expression.get_expression_for_validation()\n+\n \n class ExpressionsNumericTests(TestCase):\n     @classmethod\ndiff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\nindex b3de53efd73f..3cc76cdcfe55 100644\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -266,6 +266,19 @@ def test_opclass_func(self):\n         self.assertNotIn(constraint.name, self.get_constraints(Scene._meta.db_table))\n         Scene.objects.create(scene=\"ScEnE 10\", setting=\"Sir Bedemir's Castle\")\n \n+    def test_opclass_func_validate_constraints(self):\n+        constraint_name = \"test_opclass_func_validate_constraints\"\n+        constraint = UniqueConstraint(\n+            OpClass(Lower(\"scene\"), name=\"text_pattern_ops\"),\n+            name=\"test_opclass_func_validate_constraints\",\n+        )\n+        Scene.objects.create(scene=\"First scene\")\n+        # Non-unique scene.\n+        msg = f\"Constraint \u201c{constraint_name}\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            constraint.validate(Scene, Scene(scene=\"first Scene\"))\n+        constraint.validate(Scene, Scene(scene=\"second Scene\"))\n+\n \n class ExclusionConstraintTests(PostgreSQLTestCase):\n     def get_constraints(self, table):\n", "problem_statement": "Constraints validation fails on UniqueConstraint using OpClass\nDescription\n\t \nAdding a UniqueConstraint using PostgreSQL-specific OpClass on a model breaks constraints validation performed when calling validate_constraints on a model when using PostgreSQL.\nMinimal reproducer\nfrom django.contrib.postgres.indexes import OpClass\nfrom django.db import models\nfrom django.db.models.functions import Lower\nclass Place(models.Model):\n\tname = models.CharField(max_length=255)\n\tclass Meta:\n\t\tapp_label = \"opclass_issue\"\n\t\tconstraints = [\n\t\t\tmodels.UniqueConstraint(\n\t\t\t\tOpClass(Lower(\"name\"), name=\"text_pattern_ops\"),\n\t\t\t\tname=\"lower_name_uniq\",\n\t\t\t)\n\t\t]\nplace = Place(name=\"Narnia\")\n\tplace.validate_constraints()\nThis leads to the following error:\ndjango.db.utils.ProgrammingError: syntax error at or near \"text_pattern_ops\"\nLINE 1: ...place\" WHERE LOWER(\"opclass_issue_place\".\"name\") text_patte...\nFull SQL query that is generated:\nSELECT 1 AS \"a\" FROM \"opclass_issue_place\" WHERE LOWER(\"opclass_issue_place\".\"name\") text_pattern_ops = (LOWER('narnia') text_pattern_ops) LIMIT 1\nJust in case, this happens even though django.contrib.postgres is correctly installed in INSTALLED_APPS, so the issue is not related to that.\nI've also created a test and adapted the CI to run it in \u200bhttps://github.com/backmarket-oss/django/pull/2/files, which leads to \u200bhttps://github.com/backmarket-oss/django/actions/runs/8171237603/job/22339033423?pr=2 showing the failure.\nPotential root cause\nOpClass wrapper should only make sense when creating the constraint, and should not be used when validating the constraint, as this leads to an invalid SQL query.\nLooking at the code for the PostgreSQL specific ExclusionConstraint, a similar conclusion was reached, and OpClass is explicitly removed in validate method: \u200bhttps://github.com/django/django/blob/4426b1a72dc289643e2ae8c190b8dc4b3a39daf7/django/contrib/postgres/constraints.py#L211-L216.\nPotential fix\nApplying a similar fix as the one above in UniqueConstraint, showcased in \u200bhttps://github.com/backmarket-oss/django/pull/1/files applied on top of the other PR above, leads to \u200bhttps://github.com/backmarket-oss/django/actions/runs/8171242801/job/22339050847?pr=1 where the added test is now passing.\nIf you think that this is the correct fix to apply, or have a lead for another fix, I'd be happy to make a proper pull request targeting Django repository.\n", "hints_text": [["Good catch, thanks for the report. Please prepare a patch via GitHub PR (a regression test is required).", 1709721079.0], ["\u200bPR", 1715526533.0]], "created_at": "2024-05-12T18:20:16Z"}
{"repo": "django/django", "pull_number": 18157, "instance_id": "django__django-18157", "issue_numbers": ["35428"], "base_commit": "604e32ee9300a0d76665e07010afc230007e4a79", "patch": "diff --git a/django/contrib/auth/hashers.py b/django/contrib/auth/hashers.py\nindex e23ae6243ec6..b53974756119 100644\n--- a/django/contrib/auth/hashers.py\n+++ b/django/contrib/auth/hashers.py\n@@ -570,7 +570,7 @@ class ScryptPasswordHasher(BasePasswordHasher):\n     algorithm = \"scrypt\"\n     block_size = 8\n     maxmem = 0\n-    parallelism = 1\n+    parallelism = 5\n     work_factor = 2**14\n \n     def encode(self, password, salt, n=None, r=None, p=None):\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex f2a6bccb0c4d..311b38330807 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -46,6 +46,9 @@ Minor features\n * The default iteration count for the PBKDF2 password hasher is increased from\n   720,000 to 870,000.\n \n+* In order to follow OWASP recommendations, the default ``parallelism`` of the\n+  ``ScryptPasswordHasher`` is increased from 1 to 5.\n+\n * :class:`~django.contrib.auth.forms.BaseUserCreationForm` and\n   :class:`~django.contrib.auth.forms.AdminPasswordChangeForm` now support\n   disabling password-based authentication by setting an unusable password on\n", "test_patch": "diff --git a/tests/auth_tests/test_hashers.py b/tests/auth_tests/test_hashers.py\nindex 1b0d2c65be4b..bec298cc3a00 100644\n--- a/tests/auth_tests/test_hashers.py\n+++ b/tests/auth_tests/test_hashers.py\n@@ -650,8 +650,8 @@ def test_scrypt(self):\n         encoded = make_password(\"l\u00e8tmein\", \"seasalt\", \"scrypt\")\n         self.assertEqual(\n             encoded,\n-            \"scrypt$16384$seasalt$8$1$Qj3+9PPyRjSJIebHnG81TMjsqtaIGxNQG/aEB/NY\"\n-            \"afTJ7tibgfYz71m0ldQESkXFRkdVCBhhY8mx7rQwite/Pw==\",\n+            \"scrypt$16384$seasalt$8$5$ECMIUp+LMxMSK8xB/IVyba+KYGTI7FTnet025q/1f\"\n+            \"/vBAVnnP3hdYqJuRi+mJn6ji6ze3Fbb7JEFPKGpuEf5vw==\",\n         )\n         self.assertIs(is_password_usable(encoded), True)\n         self.assertIs(check_password(\"l\u00e8tmein\", encoded), True)\n", "problem_statement": "ScryptPasswordHasher parallelism parameter is lower than the recommended in OWASP\nDescription\n\t \nFollowing this \u200bforum thread on password hashers iterations/parameters, it was agreed that the current parallelism parameter for ScryptPasswordHasher should be increased to 5. Alternatively we could switch to N=2^16 (64 MiB), r=8 (1024 bytes), p=2 or N=2^15 (32 MiB), r=8 (1024 bytes), p=3.\nSource: \u200bhttps://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#scrypt\n", "hints_text": [], "created_at": "2024-05-10T20:09:24Z"}
{"repo": "django/django", "pull_number": 18155, "instance_id": "django__django-18155", "issue_numbers": ["35393"], "base_commit": "c7fc9f20b49b5889a9a8f47de45165ac443c1a21", "patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex a4aa8e40e327..d28a38281472 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -509,6 +509,11 @@ def needs_explicit_pk_field(self):\n             # Auto fields are editable, so check for auto or non-editable pk.\n             self.form._meta.model._meta.auto_field\n             or not self.form._meta.model._meta.pk.editable\n+            # The pk can be editable, but excluded from the inline.\n+            or (\n+                self.form._meta.exclude\n+                and self.form._meta.model._meta.pk.name in self.form._meta.exclude\n+            )\n             or\n             # Also search any parents for an auto field. (The pk info is\n             # propagated to child models so that does not need to be checked\n", "test_patch": "diff --git a/tests/admin_inlines/admin.py b/tests/admin_inlines/admin.py\nindex 3cdaee22df26..578142d192fe 100644\n--- a/tests/admin_inlines/admin.py\n+++ b/tests/admin_inlines/admin.py\n@@ -57,6 +57,8 @@\n     Teacher,\n     Title,\n     TitleCollection,\n+    UUIDChild,\n+    UUIDParent,\n )\n \n site = admin.AdminSite(name=\"admin\")\n@@ -471,6 +473,16 @@ class ShowInlineChildInline(admin.StackedInline):\n     model = ShowInlineChild\n \n \n+class UUIDChildInline(admin.StackedInline):\n+    model = UUIDChild\n+    exclude = (\"id\",)\n+\n+\n+class UUIDParentModelAdmin(admin.ModelAdmin):\n+    model = UUIDParent\n+    inlines = [UUIDChildInline]\n+\n+\n class ShowInlineParentAdmin(admin.ModelAdmin):\n     def get_inlines(self, request, obj):\n         if obj is not None and obj.show_inlines:\n@@ -513,6 +525,7 @@ def get_inlines(self, request, obj):\n site.register(CourseProxy1, ClassAdminTabularVertical)\n site.register(CourseProxy2, ClassAdminTabularHorizontal)\n site.register(ShowInlineParent, ShowInlineParentAdmin)\n+site.register(UUIDParent, UUIDParentModelAdmin)\n # Used to test hidden fields in tabular and stacked inlines.\n site2 = admin.AdminSite(name=\"tabular_inline_hidden_field_admin\")\n site2.register(SomeParentModel, inlines=[ChildHiddenFieldTabularInline])\ndiff --git a/tests/admin_inlines/models.py b/tests/admin_inlines/models.py\nindex 5a85556a55c7..64aaca8d14e5 100644\n--- a/tests/admin_inlines/models.py\n+++ b/tests/admin_inlines/models.py\n@@ -3,6 +3,7 @@\n \"\"\"\n \n import random\n+import uuid\n \n from django.contrib.contenttypes.fields import GenericForeignKey\n from django.contrib.contenttypes.models import ContentType\n@@ -399,3 +400,13 @@ class BothVerboseNameProfile(Profile):\n     class Meta:\n         verbose_name = \"Model with both - name\"\n         verbose_name_plural = \"Model with both - plural name\"\n+\n+\n+class UUIDParent(models.Model):\n+    pass\n+\n+\n+class UUIDChild(models.Model):\n+    id = models.UUIDField(default=uuid.uuid4, primary_key=True)\n+    title = models.CharField(max_length=128)\n+    parent = models.ForeignKey(UUIDParent, on_delete=models.CASCADE)\ndiff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex dee703825d1e..25512aede417 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -44,6 +44,8 @@\n     SomeChildModel,\n     SomeParentModel,\n     Teacher,\n+    UUIDChild,\n+    UUIDParent,\n     VerboseNamePluralProfile,\n     VerboseNameProfile,\n )\n@@ -115,6 +117,19 @@ def test_readonly_stacked_inline_label(self):\n         )\n         self.assertContains(response, \"<label>Inner readonly label:</label>\")\n \n+    def test_excluded_id_for_inlines_uses_hidden_field(self):\n+        parent = UUIDParent.objects.create()\n+        child = UUIDChild.objects.create(title=\"foo\", parent=parent)\n+        response = self.client.get(\n+            reverse(\"admin:admin_inlines_uuidparent_change\", args=(parent.id,))\n+        )\n+        self.assertContains(\n+            response,\n+            f'<input type=\"hidden\" name=\"uuidchild_set-0-id\" value=\"{child.id}\" '\n+            'id=\"id_uuidchild_set-0-id\">',\n+            html=True,\n+        )\n+\n     def test_many_to_many_inlines(self):\n         \"Autogenerated many-to-many inlines are displayed correctly (#13407)\"\n         response = self.client.get(reverse(\"admin:admin_inlines_author_add\"))\n", "problem_statement": "InlineAdmin's are not possible with an editable UUIDField as primary key.\nDescription\n\t\t\n(last modified by Sarah Boyce)\t\t\nThis issue was reported on \u200bStackOverflow: if we have a model with an editable primary key that is not an AutoField, the editing of inlines fails.\nThis is because then the hidden field to \"backlink\" to the original item fails: there is no `<input type=\"hidden\" id=\"id_child_set-0-id\" name=\"child_set-0-id\"> in the formsets, so no instances are attached to the forms of the formset. At best this would thus create new instances, at worst, it will in case of the UUID just fail to edit the inline objects and thus reject the entire form(set) and therefore reject the edit of the object in general.\nThe steps to reproduce these are using models:\nclass Parent(models.Model):\n\tname = models.CharField(max_length=128)\nclass Child(models.Model):\n\tid = models.UUIDField(primary_key=True, default=uuid.uuid4)\n\tname = models.CharField(max_length=128)\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE)\nand then work with an admin:\nclass ChildInline(admin.TabularInline):\n\tmodel = Child\n\texclude = (\"id\",) # important\n\textra = 1\n\tverbose_name = \"Subexample\"\n\tshow_change_link = True\n@admin.register(Parent)\nclass ParentAdmin(admin.ModelAdmin):\n\tsearch_fields = (\"name\", )\n\tinlines = [ChildInline,]\nAn easy workaround is to mark the id field of the Child as editable=False, which will resolve the issue. But it is not said that the UUID should *never* be editable, it is for example possible to exclude that for the inline, but then use it for another ModelAdmin, perhaps to duplicate to another UUID, or just use another primary key field altogether.\nThe fix turned out to be quite minimal: just ensure that the primary key field is added, so in the helpers.py, for the InlineAdminForm, we use:\n\tdef needs_explicit_pk_field(self):\n\t\treturn (\n\t\t\t# Auto fields are editable, so check for auto or non-editable pk.\n\t\t\tself.form._meta.model._meta.auto_field\n\t\t\tor not self.form._meta.model._meta.pk.editable\n\t\t\tor self.form._meta.model._meta.pk.name in (self.form._meta.exclude or ())\n\t\t\tor\n\t\t\t# Also search any parents for an auto field. (The pk info is\n\t\t\t# propagated to child models so that does not need to be checked\n\t\t\t# in parents.)\n\t\t\tany(\n\t\t\t\tparent._meta.auto_field or not parent._meta.model._meta.pk.editable\n\t\t\t\tfor parent in self.form._meta.model._meta.get_parent_list()\n\t\t\t)\n\t\t)\n", "hints_text": [], "created_at": "2024-05-10T14:14:09Z"}
{"repo": "django/django", "pull_number": 18150, "instance_id": "django__django-18150", "issue_numbers": ["35401"], "base_commit": "f812b927a541fecc8ee445e1fd4dbe9d0540d523", "patch": "diff --git a/docs/ref/csrf.txt b/docs/ref/csrf.txt\nindex 6072dcd7324d..e963c1e62782 100644\n--- a/docs/ref/csrf.txt\n+++ b/docs/ref/csrf.txt\n@@ -152,7 +152,8 @@ class-based views<decorating-class-based-views>`.\n \n .. function:: csrf_protect(view)\n \n-    Decorator that provides the protection of ``CsrfViewMiddleware`` to a view.\n+    Decorator that provides the protection of\n+    :class:`~django.middleware.csrf.CsrfViewMiddleware` to a view.\n \n     Usage::\n \ndiff --git a/docs/ref/middleware.txt b/docs/ref/middleware.txt\nindex ba9bef7e6f81..c762457839e7 100644\n--- a/docs/ref/middleware.txt\n+++ b/docs/ref/middleware.txt\n@@ -153,6 +153,9 @@ header, the middleware adds one if needed. If the response has an ``ETag`` or\n ``If-Modified-Since``, the response is replaced by an\n :class:`~django.http.HttpResponseNotModified`.\n \n+You can handle conditional GET operations with individual views using the\n+:func:`~django.views.decorators.http.conditional_page()` decorator.\n+\n Locale middleware\n -----------------\n \n@@ -569,6 +572,9 @@ Adds protection against Cross Site Request Forgeries by adding hidden form\n fields to POST forms and checking requests for the correct value. See the\n :doc:`Cross Site Request Forgery protection documentation </ref/csrf>`.\n \n+You can add Cross Site Request Forgery protection to individual views using the\n+:func:`~django.views.decorators.csrf.csrf_protect()` decorator.\n+\n ``X-Frame-Options`` middleware\n ------------------------------\n \ndiff --git a/docs/topics/http/decorators.txt b/docs/topics/http/decorators.txt\nindex 9cad14495434..1c48e667f105 100644\n--- a/docs/topics/http/decorators.txt\n+++ b/docs/topics/http/decorators.txt\n@@ -63,6 +63,11 @@ control caching behavior on particular views.\n \n .. function:: condition(etag_func=None, last_modified_func=None)\n \n+.. function:: conditional_page()\n+\n+    This decorator provides the conditional GET operation handling of\n+    :class:`~django.middleware.http.ConditionalGetMiddleware` to a view.\n+\n .. function:: etag(etag_func)\n \n .. function:: last_modified(last_modified_func)\n", "test_patch": "", "problem_statement": "Document the `conditional_page` decorator\nDescription\n\t \nThe \u200bGZip Middleware documentation makes mention of the \u200bgzip_page decorator, but the \u200bConditional GET middleware doesn't mention there's an equivalent conditional_page decorator, likely ecause there's no mention of that in the \u200bHTTP decorators or in the \u200bConditional View Processing topics.\nAs far as I can tell, the named decorator has been around since \u200b0.9x and it's probably just accidentally not described anywhere, when everything else in that module is.\nSee also: #6181 and \u200bthis blog post describing the intent, from James Bennett back in 2007 (yay for cool URIs which haven't suffered link rot!)\n", "hints_text": [["Good find, thank you! It might also make sense for the \u200b\u200bCsrfViewMiddleware to similarly mention \u200bcsrf_protect.", 1713955524.0], ["\u200bPR", 1715229371.0], ["In 708b01c7: Refs #35401 -- Linked the CsrfViewMiddleware docs to the csrf_protect() decorator.", 1718172694.0], ["In e2428292: Fixed #35401 -- Documented the conditional_page() decorator.", 1718172694.0]], "created_at": "2024-05-09T09:33:13Z"}
{"repo": "django/django", "pull_number": 18144, "instance_id": "django__django-18144", "issue_numbers": ["35436"], "base_commit": "0e445badd54fafc75dd1a5dff9fee6e6a171eafe", "patch": "diff --git a/django/contrib/postgres/forms/hstore.py b/django/contrib/postgres/forms/hstore.py\nindex 6a20f7b729e1..f824f78c3e27 100644\n--- a/django/contrib/postgres/forms/hstore.py\n+++ b/django/contrib/postgres/forms/hstore.py\n@@ -20,7 +20,7 @@ class HStoreField(forms.CharField):\n \n     def prepare_value(self, value):\n         if isinstance(value, dict):\n-            return json.dumps(value)\n+            return json.dumps(value, ensure_ascii=False)\n         return value\n \n     def to_python(self, value):\n", "test_patch": "diff --git a/tests/postgres_tests/test_hstore.py b/tests/postgres_tests/test_hstore.py\nindex 2aaad637c655..cac3eb742af0 100644\n--- a/tests/postgres_tests/test_hstore.py\n+++ b/tests/postgres_tests/test_hstore.py\n@@ -410,6 +410,13 @@ class HStoreFormTest(Form):\n         form_w_hstore = HStoreFormTest({\"f1\": '{\"a\": 2}'}, initial={\"f1\": {\"a\": 1}})\n         self.assertTrue(form_w_hstore.has_changed())\n \n+    def test_prepare_value(self):\n+        field = forms.HStoreField()\n+        self.assertEqual(\n+            field.prepare_value({\"aira_maplayer\": \"\u0391\u03c1\u03b4\u03b5\u03c5\u03c4\u03b9\u03ba\u03cc \u03b4\u03af\u03ba\u03c4\u03c5\u03bf\"}),\n+            '{\"aira_maplayer\": \"\u0391\u03c1\u03b4\u03b5\u03c5\u03c4\u03b9\u03ba\u03cc \u03b4\u03af\u03ba\u03c4\u03c5\u03bf\"}',\n+        )\n+\n \n class TestValidator(PostgreSQLSimpleTestCase):\n     def test_simple_valid(self):\n", "problem_statement": "HStoreField shows nonASCII characters as unicode-escaped in the admin\nDescription\n\t \nI have an HStoreField() that has the following contents:\naira=# select title from aira_maplayer where id=22;\n\t\t\t\t\t\ttitle\t\t\t\t\t\t \n------------------------------------------------------\n \"el\"=>\"\u0391\u03c1\u03b4\u03b5\u03c5\u03c4\u03b9\u03ba\u03cc \u03b4\u03af\u03ba\u03c4\u03c5\u03bf\", \"en\"=>\"Irrigation network\"\n(1 row)\nIn the Django admin, it shows like this:\n{\"el\": \"\\u0391\\u03c1\\u03b4\\u03b5\\u03c5\\u03c4\\u03b9\\u03ba\\u03cc \\u03b4\\u03af\\u03ba\\u03c4\\u03c5\\u03bf\", \"en\": \"Irrigation network\"}\n", "hints_text": [["The reason for it is that contrib.postgres.forms.HStoreField.prepare_value doesn't pass ensure_ascii=False to json.dumps. When we fixed it for JSONField in #32080 we didn't do the same for HStoreField unfortunately.", 1715000305.0], ["I'll fix the bug and post the PR :)", 1715155305.0], ["The patch LGTM and is aligned on how we tested JSONField in de81676b51e4dad510ef387c3ae625f9091fe57f. Thank you for taking the time to submit a patch Jae Hyuck.", 1715160016.0], ["Replying to Simon Charette: The patch LGTM and is aligned on how we tested JSONField in de81676b51e4dad510ef387c3ae625f9091fe57f. Thank you for taking the time to submit a patch Jae Hyuck. Thank you :) I'm still lacking a lot, but I'll learn and contribute a lot to Django.", 1715160312.0]], "created_at": "2024-05-08T13:15:57Z"}
{"repo": "django/django", "pull_number": 18138, "instance_id": "django__django-18138", "issue_numbers": ["35430"], "base_commit": "7e39ae5c8cf4c6601a4f47b72914349481c5331b", "patch": "diff --git a/docs/topics/i18n/timezones.txt b/docs/topics/i18n/timezones.txt\nindex 594c1688a566..1b9ea709c63c 100644\n--- a/docs/topics/i18n/timezones.txt\n+++ b/docs/topics/i18n/timezones.txt\n@@ -9,7 +9,10 @@ Overview\n \n When support for time zones is enabled, Django stores datetime information in\n UTC in the database, uses time-zone-aware datetime objects internally, and\n-translates them to the end user's time zone in templates and forms.\n+converts them to the end user's time zone in forms. Templates will use the\n+:ref:`default time zone <default-current-time-zone>`, but this can be updated\n+to the end user's time zone through the use of :ref:`filters and tags\n+<time-zones-in-templates>`.\n \n This is handy if your users live in more than one time zone and you want to\n display datetime information according to each user's wall clock.\n", "test_patch": "", "problem_statement": "Documentation about timezone is misleading\nDescription\n\t \nOfficial documentation says :\nWhen support for time zones is enabled, Django stores datetime information in UTC in the database, uses time-zone-aware datetime objects internally, and translates them to the end user\u2019s time zone in templates and forms.\nThis is not True. In templates (including admin panel), Django uses TIME_ZONE setting instead of end user's timezone.\n", "hints_text": [["Yes thank you! This is clearer further down in the \"Time zone aware input in forms\" and \"Time zone aware output in templates\" section. I recommend that end user's time zone is updated to :ref:`default current time zone <default-current-time-zone>` here.", 1714809097.0], ["Hello, This is my first contribution to this project, and I'm excited to be a part of this community. I've submitted a pull request to address the issue detailed in ticket #35430, aiming to correct the documentation regarding time zone handling in Django. I would appreciate any feedback or suggestions for improvement as I'm eager to learn and contribute effectively. Thank you for reviewing my changes! Best regards, username: koupro0204 \u200b\u200bhttps://github.com/django/django/pull/18138", 1715044145.0]], "created_at": "2024-05-07T06:08:48Z"}
{"repo": "django/django", "pull_number": 18131, "instance_id": "django__django-18131", "issue_numbers": ["35425"], "base_commit": "9a27c76021f934201cccf12215514a3091325ec8", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e68baf4e5763..cd300e47bce7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1088,6 +1088,7 @@ def _save_table(\n         if (\n             not raw\n             and not force_insert\n+            and not force_update\n             and self._state.adding\n             and (\n                 (meta.pk.default and meta.pk.default is not NOT_PROVIDED)\n", "test_patch": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex bda59d82fa85..38fb9ca20035 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -186,6 +186,12 @@ def test_save_primary_with_default(self):\n         with self.assertNumQueries(1):\n             PrimaryKeyWithDefault().save()\n \n+    def test_save_primary_with_default_force_update(self):\n+        # An UPDATE attempt is made if explicitly requested.\n+        obj = PrimaryKeyWithDefault.objects.create()\n+        with self.assertNumQueries(1):\n+            PrimaryKeyWithDefault(uuid=obj.pk).save(force_update=True)\n+\n     def test_save_primary_with_db_default(self):\n         # An UPDATE attempt is skipped when a primary key has db_default.\n         with self.assertNumQueries(1):\n", "problem_statement": ".save(force_update=True) not respected for model instances with default primary keys\nDescription\n\t\t\n(last modified by Jacob Walls)\t\t\nWith this model,\nclass WithDefault(models.Model):\n\tid = models.UUIDField(primary_key=True, default=uuid.uuid4)\n\tmessage = models.CharField(null=True)\nthe first IntegrityError at line 5 is expected as of https://code.djangoproject.com/ticket/29260#comment:3, but the second one at line 6, I suggest, is not.\nIn [1]: from models import WithDefault\nIn [2]: import uuid\nIn [3]: known_uuid = uuid.uuid4()\nIn [4]: WithDefault.objects.create(pk=known_uuid)\nOut[4]: <WithDefault: WithDefault object (0ccbf1df-6296-4efe-8f5d-8f9091d9ebdc)>\nIn [5]: WithDefault(pk=known_uuid, message=\"overwritten\").save()\n---------------------------------------------------------------------------\nUniqueViolation\t\t\t\t\t\t Traceback (most recent call last)\nUniqueViolation: duplicate key value violates unique constraint \"models_withdefault_pkey\"\nDETAIL: Key (id)=(0ccbf1df-6296-4efe-8f5d-8f9091d9ebdc) already exists.\n...\nIntegrityError: duplicate key value violates unique constraint \"models_withdefault_pkey\"\nDETAIL: Key (id)=(0ccbf1df-6296-4efe-8f5d-8f9091d9ebdc) already exists.\nIn [6]: WithDefault(pk=known_uuid, message=\"overwritten\").save(force_update=True)\n---------------------------------------------------------------------------\nUniqueViolation\t\t\t\t\t\t Traceback (most recent call last)\nFile ~/django/django/db/backends/utils.py:105, in CursorWrapper._execute(self, sql, params, *ignored_wrapper_args)\n\t104 else:\n--> 105\t return self.cursor.execute(sql, params)\nUniqueViolation: duplicate key value violates unique constraint \"models_withdefault_pkey\"\nDETAIL: Key (id)=(0ccbf1df-6296-4efe-8f5d-8f9091d9ebdc) already exists.\nThe above exception was the direct cause of the following exception:\nIntegrityError\t\t\t\t\t\t\tTraceback (most recent call last)\nCell In[6], line 1\n----> 1 WithDefault(pk=known_uuid, message=\"overwritten\").save(force_update=True)\nFile ~/django/django/db/models/base.py:1185, in Model._do_insert(self, manager, using, fields, returning_fields, raw)\n 1180 def _do_insert(self, manager, using, fields, returning_fields, raw):\n 1181\t \"\"\"\n 1182\t Do an INSERT. If returning_fields is defined then this method should\n 1183\t return the newly created data for the model.\n 1184\t \"\"\"\n-> 1185\t return manager._insert(\n 1186\t\t [self],\n 1187\t\t fields=fields,\n 1188\t\t returning_fields=returning_fields,\n 1189\t\t using=using,\n 1190\t\t raw=raw,\n 1191\t )\n...\nIntegrityError: duplicate key value violates unique constraint \"models_withdefault_pkey\"\nDETAIL: Key (id)=(0ccbf1df-6296-4efe-8f5d-8f9091d9ebdc) already exists.\nI had an illuminating \u200bconversation on the forum regarding my surprise at the behavior of save() when dealing with the first failure on line 5. Stating what I learned from it in case helpful.\nUntil yesterday, I thought that the following two calls were equivalent, other than perhaps one being faster for updates and the other faster for inserts. In fact, I thought this equivalence would have been a nice clarification of the value prop of the ORM that \u201c\u200bDjango abstracts the need to use INSERT or UPDATE SQL statements.\u201d In other words, what does save() do? It updates or creates.\ndef overwrite_1(known_uuid):\n\tMyModel.objects.update_or_create(\n\t\tpk=known_uuid,\n\t\tdefaults={\n\t\t\t\"other_field\": 1,\n\t\t},\n\t)\ndef overwrite_2(known_uuid):\n\tMyModel(\n\t\tpk=known_uuid,\n\t\tother_field=1,\n\t).save()\nSo, at least when I'm in an overwriting posture--and Ken brings up a good point that \u200bforcing the user to opt in to this potential for data loss for existing primary keys is worth something--I prefer save(). It's simpler and doesn't involve \"defaults\". (What's a \"default\" got to do with updating one row's values?) It's also faster for the UPDATE case, which is my hot path. I might be in the minority, and could be convinced otherwise. (A third variation is possible, .filter(pk=known).update(...), but not unless you know the objects necessarily exist.) But everything I just said is skating on pretty rarefied ice -- the basic point is that huh, I have to be careful with save() depending on the details of my field definitions?\nThis was acknowledged as an acceptable wart in #29260 and then documented further in #31071 with a fleshed out comment in the 3.0 release notes.\nAt all of those points, though, it was assumed that this would still succeed:\ndef overwrite_2(known_uuid):\n\tMyModel(\n\t\tpk=known_uuid,\n\t\tother_field=1,\n\t).save(force_update=True)\nThis ticket is for that bug, the failure on line 6 in my REPL. (had a looksee, likely to be a one-line fix, happy to PR it \ud83e\udd1e).\n---\nBut perhaps in another ticket, or on the forum, we could consider whether we should drive at the solution discussed several times by the participants on those tickets (~\"if only there were a way to determine whether a field's value came from a default...\"). On the thread I suggest we could do that by \u200badjusting ._state.adding = False to agree with the \u200bdocumentation stating that when explicitly specifying primary keys, \"Django will assume you\u2019re changing the existing record rather than creating a new one.\"\nTo paraphrase Carlton, who \u200bsuggested reverting #29260, that change traded one user's desire to optimize out one query, which can already be had with force_insert=True, for another person's obligation to start using force_update=True (once we fix it), which we \u200bdiscourage, or to avoid save() altogether in favor of the QuerySet API, which seems like a loss for feature parity / understandability.\nI understand this might cause churn in the \"release story\" if we revisit it, but it's churn that wouldn't require user action. Appreciate all the hard work that went into developing and reviewing those changes--I'm totally fine with a decision to let it be. \ud83d\ude42\n---\nI'll volunteer some small edits to the docs. I re-read the save() docs and didn't grok what \"existing model instance\" meant, since \"exist\" is also used in the sentence to refer to existing database rows. (We could say \"fetched.\") And Ken pointed me to the \u200b3.0 release notes, which I wouldn't have discovered on my own developing a feature against 4.2. Suggest surfacing up the recipes in that 3.0 release note somewhere more permanent.\n", "hints_text": [["\u200bPR", 1714839774.0]], "created_at": "2024-05-04T21:16:42Z"}
{"repo": "django/django", "pull_number": 18130, "instance_id": "django__django-18130", "issue_numbers": ["35429"], "base_commit": "0e445badd54fafc75dd1a5dff9fee6e6a171eafe", "patch": "diff --git a/django/contrib/auth/management/commands/changepassword.py b/django/contrib/auth/management/commands/changepassword.py\nindex 669d8cf5d045..db980c82cab4 100644\n--- a/django/contrib/auth/management/commands/changepassword.py\n+++ b/django/contrib/auth/management/commands/changepassword.py\n@@ -4,7 +4,7 @@\n from django.contrib.auth.password_validation import validate_password\n from django.core.exceptions import ValidationError\n from django.core.management.base import BaseCommand, CommandError\n-from django.db import DEFAULT_DB_ALIAS\n+from django.db import DEFAULT_DB_ALIAS, connections\n \n UserModel = get_user_model()\n \n@@ -32,6 +32,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help='Specifies the database to use. Default is \"default\".',\n         )\n \ndiff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\nindex 75ef68ff6812..d5d5d193c845 100644\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -11,7 +11,7 @@\n from django.contrib.auth.password_validation import validate_password\n from django.core import exceptions\n from django.core.management.base import BaseCommand, CommandError\n-from django.db import DEFAULT_DB_ALIAS\n+from django.db import DEFAULT_DB_ALIAS, connections\n from django.utils.functional import cached_property\n from django.utils.text import capfirst\n \n@@ -56,6 +56,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help='Specifies the database to use. Default is \"default\".',\n         )\n         for field_name in self.UserModel.REQUIRED_FIELDS:\ndiff --git a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\nindex 950e615f0c86..27aaf1d51bac 100644\n--- a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n+++ b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n@@ -3,7 +3,7 @@\n from django.apps import apps\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import BaseCommand\n-from django.db import DEFAULT_DB_ALIAS, router\n+from django.db import DEFAULT_DB_ALIAS, connections, router\n from django.db.models.deletion import Collector\n \n \n@@ -21,6 +21,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help='Nominates the database to use. Defaults to the \"default\" database.',\n         )\n         parser.add_argument(\ndiff --git a/django/core/management/commands/check.py b/django/core/management/commands/check.py\nindex 6348c9fc6814..e61cff79f3f3 100644\n--- a/django/core/management/commands/check.py\n+++ b/django/core/management/commands/check.py\n@@ -2,6 +2,7 @@\n from django.core import checks\n from django.core.checks.registry import registry\n from django.core.management.base import BaseCommand, CommandError\n+from django.db import connections\n \n \n class Command(BaseCommand):\n@@ -43,6 +44,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             action=\"append\",\n+            choices=tuple(connections),\n             dest=\"databases\",\n             help=\"Run database related checks against these aliases.\",\n         )\ndiff --git a/django/core/management/commands/createcachetable.py b/django/core/management/commands/createcachetable.py\nindex 65ed1686d207..a8965b1edcdb 100644\n--- a/django/core/management/commands/createcachetable.py\n+++ b/django/core/management/commands/createcachetable.py\n@@ -30,6 +30,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=\"Nominates a database onto which the cache tables will be \"\n             'installed. Defaults to the \"default\" database.',\n         )\ndiff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex bdb130594faf..b177a7e0835a 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -16,6 +16,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 \"Nominates a database onto which to open a shell. Defaults to the \"\n                 '\"default\" database.'\ndiff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py\nindex 01ff8974dd14..5a9ab8391963 100644\n--- a/django/core/management/commands/dumpdata.py\n+++ b/django/core/management/commands/dumpdata.py\n@@ -6,7 +6,7 @@\n from django.core import serializers\n from django.core.management.base import BaseCommand, CommandError\n from django.core.management.utils import parse_apps_and_model_labels\n-from django.db import DEFAULT_DB_ALIAS, router\n+from django.db import DEFAULT_DB_ALIAS, connections, router\n \n try:\n     import bz2\n@@ -56,6 +56,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=\"Nominates a specific database to dump fixtures from. \"\n             'Defaults to the \"default\" database.',\n         )\ndiff --git a/django/core/management/commands/flush.py b/django/core/management/commands/flush.py\nindex e9d440dd8651..a057393d53e2 100644\n--- a/django/core/management/commands/flush.py\n+++ b/django/core/management/commands/flush.py\n@@ -25,6 +25,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help='Nominates a database to flush. Defaults to the \"default\" database.',\n         )\n \ndiff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex 5c2ed53db8f0..77605b178f69 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -25,6 +25,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 'Nominates a database to introspect. Defaults to using the \"default\" '\n                 \"database.\"\ndiff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex bb46e8ae78c0..8c76e526338f 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -55,6 +55,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 \"Nominates a specific database to load fixtures into. Defaults to the \"\n                 '\"default\" database.'\ndiff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex 3a0e9e87ff84..5e6b19c09530 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -47,6 +47,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 'Nominates a database to synchronize. Defaults to the \"default\" '\n                 \"database.\"\ndiff --git a/django/core/management/commands/showmigrations.py b/django/core/management/commands/showmigrations.py\nindex 203f92151d21..e88f83f273aa 100644\n--- a/django/core/management/commands/showmigrations.py\n+++ b/django/core/management/commands/showmigrations.py\n@@ -19,6 +19,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 \"Nominates a database to show migrations for. Defaults to the \"\n                 '\"default\" database.'\ndiff --git a/django/core/management/commands/sqlflush.py b/django/core/management/commands/sqlflush.py\nindex bc82e1f05ff9..d0512a68a83c 100644\n--- a/django/core/management/commands/sqlflush.py\n+++ b/django/core/management/commands/sqlflush.py\n@@ -16,6 +16,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 'Nominates a database to print the SQL for. Defaults to the \"default\" '\n                 \"database.\"\ndiff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex 2f6993682f6b..3e3151f0cf3c 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -19,6 +19,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 'Nominates a database to create SQL for. Defaults to the \"default\" '\n                 \"database.\"\ndiff --git a/django/core/management/commands/sqlsequencereset.py b/django/core/management/commands/sqlsequencereset.py\nindex 9653fa59d007..cc0d100499b8 100644\n--- a/django/core/management/commands/sqlsequencereset.py\n+++ b/django/core/management/commands/sqlsequencereset.py\n@@ -14,6 +14,7 @@ def add_arguments(self, parser):\n         parser.add_argument(\n             \"--database\",\n             default=DEFAULT_DB_ALIAS,\n+            choices=tuple(connections),\n             help=(\n                 'Nominates a database to print the SQL for. Defaults to the \"default\" '\n                 \"database.\"\n", "test_patch": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 688aaa0a2f8d..c2bb9f9e5d2e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2301,6 +2301,35 @@ def test_precedence(self):\n             self.assertEqual(out.getvalue().strip(), \"simple_app\")\n \n \n+class CommandDBOptionChoiceTests(SimpleTestCase):\n+    def test_invalid_choice_db_option(self):\n+        expected_error = (\n+            \"Error: argument --database: invalid choice: \"\n+            \"'deflaut' (choose from 'default', 'other')\"\n+        )\n+        args = [\n+            \"changepassword\",\n+            \"createsuperuser\",\n+            \"remove_stale_contenttypes\",\n+            \"check\",\n+            \"createcachetable\",\n+            \"dbshell\",\n+            \"flush\",\n+            \"dumpdata\",\n+            \"inspectdb\",\n+            \"loaddata\",\n+            \"showmigrations\",\n+            \"sqlflush\",\n+            \"sqlmigrate\",\n+            \"sqlsequencereset\",\n+            \"migrate\",\n+        ]\n+\n+        for arg in args:\n+            with self.assertRaisesMessage(CommandError, expected_error):\n+                call_command(arg, \"--database\", \"deflaut\", verbosity=0)\n+\n+\n class ArgumentOrder(AdminScriptTestCase):\n     \"\"\"Tests for 2-stage argument parsing scheme.\n \n", "problem_statement": "Add argparse choices to --database options\nDescription\n\t \nMany management commands take a --database option to select which database to operate on. Currently, this is unvalidated, causing crashes when a bad name is typed:\n$ ./manage.py migrate --database deflaut\nTraceback (most recent call last):\n ...\n File \"/.../django/core/management/commands/migrate.py\", line 100, in handle\n\tself.check(databases=[database])\n ...\n File \"/.../django/db/models/fields/__init__.py\", line 442, in _check_backend_specific_checks\n\terrors.extend(connections[alias].validation.check_field(self, **kwargs))\n\t\t\t\t ~~~~~~~~~~~^^^^^^^\n File \"/.../django/utils/connection.py\", line 61, in __getitem__\n\traise self.exception_class(f\"The connection '{alias}' doesn't exist.\")\ndjango.utils.connection.ConnectionDoesNotExist: The connection 'deflaut' doesn't exist.\nWe can add \u200bargparse\u2019s choices for validation:\n--- django/core/management/commands/migrate.py\n+++ django/core/management/commands/migrate.py\n@@ -47,6 +47,7 @@ def add_arguments(self, parser):\n\t\t parser.add_argument(\n\t\t\t \"--database\",\n\t\t\t default=DEFAULT_DB_ALIAS,\n+\t\t\tchoices=tuple(connections),\n\t\t\t help=(\n\t\t\t\t 'Nominates a database to synchronize. Defaults to the \"default\" '\n\t\t\t\t \"database.\"\nThe failure is then graceful, and lists the available options:\n$ ./manage.py migrate --database deflaut\nusage: manage.py migrate ...\nmanage.py migrate: error: argument --database: invalid choice: 'deflaut' (choose from 'default')\n", "hints_text": [["Replying to Adam Johnson: As you told me, I applied them to the all relevant database options.", 1714860943.0], ["Replying to Adam Johnson: We can add \u200bargparse\u2019s choices for validation: --- django/core/management/commands/migrate.py +++ django/core/management/commands/migrate.py @@ -47,6 +47,7 @@ def add_arguments(self, parser): parser.add_argument( \"--database\", default=DEFAULT_DB_ALIAS, + choices=tuple(connections), help=( 'Nominates a database to synchronize. Defaults to the \"default\" ' \"database.\" Can we? Do we really want to iterate over connections? As far as I'm aware, this will force initialization of all database connections. I don't think it's acceptable. IMO it's not worth doing.", 1714890515.0], ["Do we really want to iterate over connections? As far as I'm aware, this will force initialization of all database connections I know it's confusing (I had to check myself to make sure when accepting the ticket) but connections.__iter__ \u200bdoesn't create any connections it simply iterates over settings.DATABASES.", 1714914498.0]], "created_at": "2024-05-04T06:30:13Z"}
{"repo": "django/django", "pull_number": 18128, "instance_id": "django__django-18128", "issue_numbers": ["35427"], "base_commit": "e72049aa6302411d8cdf2e798e15fa38e76b92fc", "patch": "diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt\nindex 3fba67bf20fc..fa4f6e9ca849 100644\n--- a/docs/ref/django-admin.txt\n+++ b/docs/ref/django-admin.txt\n@@ -584,7 +584,7 @@ Updates the message files for all available languages.\n .. django-admin-option:: --extension EXTENSIONS, -e EXTENSIONS\n \n Specifies a list of file extensions to examine (default: ``html``, ``txt``,\n-``py`` or ``js`` if :option:`--domain` is ``js``).\n+``py`` or ``js`` if :option:`--domain` is ``djangojs``).\n \n Example usage:\n \n", "test_patch": "", "problem_statement": "Details of extension argument for makemessages management command not correct\nDescription\n\t \nThe documentation of the extension argument of the makemessages management command is not correct:\nSpecifies a list of file extensions to examine (default: ``html``, ``txt``,\n``py`` or ``js`` if :option:`--domain` is ``js``).\nshould be\nSpecifies a list of file extensions to examine (default: ``html``, ``txt``,\n``py`` or ``js`` if :option:`--domain` is ``djangojs``).\nThe domain is not js, it should be djangojs.\n\u200bhttps://github.com/django/django/blob/main/docs/ref/django-admin.txt#L586-L587\n", "hints_text": [["Good catch thank you!", 1714709925.0], ["\u200bPR", 1714749789.0]], "created_at": "2024-05-03T20:16:34Z"}
{"repo": "django/django", "pull_number": 18125, "instance_id": "django__django-18125", "issue_numbers": ["35426"], "base_commit": "32d163e680817e202e0def3fbb70d2450b02cffd", "patch": "diff --git a/django/contrib/contenttypes/prefetch.py b/django/contrib/contenttypes/prefetch.py\nindex b02ed3bae573..97ac60295bb4 100644\n--- a/django/contrib/contenttypes/prefetch.py\n+++ b/django/contrib/contenttypes/prefetch.py\n@@ -3,7 +3,7 @@\n \n \n class GenericPrefetch(Prefetch):\n-    def __init__(self, lookup, querysets=None, to_attr=None):\n+    def __init__(self, lookup, querysets, to_attr=None):\n         for queryset in querysets:\n             if queryset is not None and (\n                 isinstance(queryset, RawQuerySet)\ndiff --git a/docs/ref/contrib/contenttypes.txt b/docs/ref/contrib/contenttypes.txt\nindex fa446796594e..5aad2a4ec726 100644\n--- a/docs/ref/contrib/contenttypes.txt\n+++ b/docs/ref/contrib/contenttypes.txt\n@@ -603,7 +603,7 @@ information.\n \n .. versionadded:: 5.0\n \n-.. class:: GenericPrefetch(lookup, querysets=None, to_attr=None)\n+.. class:: GenericPrefetch(lookup, querysets, to_attr=None)\n \n This lookup is similar to ``Prefetch()`` and it should only be used on\n ``GenericForeignKey``. The ``querysets`` argument accepts a list of querysets,\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex bb1d732167ba..7e7963e707da 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -30,3 +30,6 @@ Bugfixes\n \n * Fixed a bug in Django 5.0 that caused a migration crash when altering a\n   ``GeneratedField`` referencing a renamed field (:ticket:`35422`).\n+\n+* Fixed a bug in Django 5.0 where the ``querysets`` argument of\n+  ``GenericPrefetch`` was not required (:ticket:`35426`).\n", "test_patch": "diff --git a/tests/contenttypes_tests/test_models.py b/tests/contenttypes_tests/test_models.py\nindex 88f715ceffcf..799f1cc58c74 100644\n--- a/tests/contenttypes_tests/test_models.py\n+++ b/tests/contenttypes_tests/test_models.py\n@@ -331,6 +331,14 @@ def test_multidb(self):\n \n \n class GenericPrefetchTests(TestCase):\n+    def test_querysets_required(self):\n+        msg = (\n+            \"GenericPrefetch.__init__() missing 1 required \"\n+            \"positional argument: 'querysets'\"\n+        )\n+        with self.assertRaisesMessage(TypeError, msg):\n+            GenericPrefetch(\"question\")\n+\n     def test_values_queryset(self):\n         msg = \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n         with self.assertRaisesMessage(ValueError, msg):\n", "problem_statement": "`GenericPrefetch` should have `queryset` parameter as required\nDescription\n\t\t\n(last modified by Sobolev Nikita)\t\t\nOriginal issue: https://code.djangoproject.com/ticket/33651\nSource: \u200bhttps://github.com/django/django/blob/91a4b9a8ec2237434f06866f39c7977e889aeae6/django/contrib/contenttypes/prefetch.py#L6-L7\nRight now this code is really strange. It produces this result:\n>>> import django\n>>> from django.contrib.contenttypes.prefetch import GenericPrefetch\n>>> GenericPrefetch('a')\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/Users/sobolev/Documents/github/wemake-django-template/.venv/lib/python3.11/site-packages/django/contrib/contenttypes/prefetch.py\", line 7, in __init__\n\tfor queryset in querysets:\nTypeError: 'NoneType' object is not iterable\nI guess that there are two ways:\nUsing if querysets is None: querysets = []\nRequiring this argument, which I guess is the correct thing to do. Why would we ever want this field to be empty?\nI will send a PR with the fix.\nI found this while working on \u200bhttps://github.com/typeddjango/django-stubs/pull/2115\n", "hints_text": [["Hi Sobelev, thank you for the report and patch! Agreed this is a bug in cac94dd8aa2fb49cd2e06b5b37cf039257284bb0, as this is a new feature introduced in 5.0, marking as a release blocker.", 1714716300.0]], "created_at": "2024-05-03T08:43:40Z"}
{"repo": "django/django", "pull_number": 18122, "instance_id": "django__django-18122", "issue_numbers": ["35422"], "base_commit": "9aeb38c296c69532c7e64b5e3d706a5eb17b3f12", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 116c98f432ce..38136e7213cc 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -3,6 +3,7 @@\n from datetime import datetime\n \n from django.conf import settings\n+from django.core.exceptions import FieldError\n from django.db.backends.ddl_references import (\n     Columns,\n     Expressions,\n@@ -831,6 +832,7 @@ def alter_field(self, model, old_field, new_field, strict=False):\n         old_type = old_db_params[\"type\"]\n         new_db_params = new_field.db_parameters(connection=self.connection)\n         new_type = new_db_params[\"type\"]\n+        modifying_generated_field = False\n         if (old_type is None and old_field.remote_field is None) or (\n             new_type is None and new_field.remote_field is None\n         ):\n@@ -869,13 +871,19 @@ def alter_field(self, model, old_field, new_field, strict=False):\n                 \"through= on M2M fields)\" % (old_field, new_field)\n             )\n         elif old_field.generated != new_field.generated or (\n-            new_field.generated\n-            and (\n-                old_field.db_persist != new_field.db_persist\n-                or old_field.generated_sql(self.connection)\n-                != new_field.generated_sql(self.connection)\n-            )\n+            new_field.generated and old_field.db_persist != new_field.db_persist\n         ):\n+            modifying_generated_field = True\n+        elif new_field.generated:\n+            try:\n+                old_field_sql = old_field.generated_sql(self.connection)\n+            except FieldError:\n+                # Field used in a generated field was renamed.\n+                modifying_generated_field = True\n+            else:\n+                new_field_sql = new_field.generated_sql(self.connection)\n+                modifying_generated_field = old_field_sql != new_field_sql\n+        if modifying_generated_field:\n             raise ValueError(\n                 f\"Modifying GeneratedFields is not supported - the field {new_field} \"\n                 \"must be removed and re-added with the new definition.\"\ndiff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\nindex cafc6702ebba..21088544acfc 100644\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -158,6 +158,18 @@ def django_test_skips(self):\n                     },\n                 }\n             )\n+        if not self.connection.mysql_is_mariadb:\n+            skips.update(\n+                {\n+                    \"MySQL doesn't allow renaming columns referenced by generated \"\n+                    \"columns\": {\n+                        \"migrations.test_operations.OperationTests.\"\n+                        \"test_invalid_generated_field_changes_on_rename_stored\",\n+                        \"migrations.test_operations.OperationTests.\"\n+                        \"test_invalid_generated_field_changes_on_rename_virtual\",\n+                    },\n+                }\n+            )\n         return skips\n \n     @cached_property\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex 5421cc9fec80..c12498173d31 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -27,3 +27,6 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a migration crash when a\n   ``GeneratedField`` was added before any of the referenced fields from its\n   ``expression`` definition (:ticket:`35359`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash when altering a\n+  ``GeneratedField`` referencing a rename field (:ticket:`35422`).\n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 5767fbc42f9a..d59548f7af55 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -5890,6 +5890,50 @@ def test_invalid_generated_field_changes_stored(self):\n     def test_invalid_generated_field_changes_virtual(self):\n         self._test_invalid_generated_field_changes(db_persist=False)\n \n+    def _test_invalid_generated_field_changes_on_rename(self, db_persist):\n+        app_label = \"test_igfcor\"\n+        operation = migrations.AddField(\n+            \"Pony\",\n+            \"modified_pink\",\n+            models.GeneratedField(\n+                expression=F(\"pink\") + F(\"pink\"),\n+                output_field=models.IntegerField(),\n+                db_persist=db_persist,\n+            ),\n+        )\n+        project_state, new_state = self.make_test_state(app_label, operation)\n+        # Add generated column.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        # Rename field used in the generated field.\n+        operations = [\n+            migrations.RenameField(\"Pony\", \"pink\", \"renamed_pink\"),\n+            migrations.AlterField(\n+                \"Pony\",\n+                \"modified_pink\",\n+                models.GeneratedField(\n+                    expression=F(\"renamed_pink\"),\n+                    output_field=models.IntegerField(),\n+                    db_persist=db_persist,\n+                ),\n+            ),\n+        ]\n+        msg = (\n+            \"Modifying GeneratedFields is not supported - the field \"\n+            f\"{app_label}.Pony.modified_pink must be removed and re-added with the \"\n+            \"new definition.\"\n+        )\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.apply_operations(app_label, new_state, operations)\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_invalid_generated_field_changes_on_rename_stored(self):\n+        self._test_invalid_generated_field_changes_on_rename(db_persist=True)\n+\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_invalid_generated_field_changes_on_rename_virtual(self):\n+        self._test_invalid_generated_field_changes_on_rename(db_persist=False)\n+\n     @skipUnlessDBFeature(\n         \"supports_stored_generated_columns\",\n         \"supports_virtual_generated_columns\",\n", "problem_statement": "Migration crash when renaming a field referenced in GeneratedField.expression\nDescription\n\t \nGiven a model (migrated) on SQLite\nclass Foo(models.Model):\n\tname = models.CharField(max_length=10)\n\tlower_name = models.GeneratedField(\n\t\texpression=Lower(\"name\"),\n\t\toutput_field=models.CharField(max_length=10),\n\t\tdb_persist=True,\n\t)\nwhen you update to\nclass Foo(models.Model):\n\tsurname = models.CharField(max_length=10)\n\tlower_name = models.GeneratedField(\n\t\texpression=Lower(\"surname\"),\n\t\toutput_field=models.CharField(max_length=10),\n\t\tdb_persist=True,\n\t)\nand makemigrations, you then get asked Was foo.name renamed to foo.surname (a CharField)? [y/N] and say y (because it was)\nYou then get a crash when migrating:\nOperations to perform:\n Apply all migrations: app3\nRunning migrations:\n Applying app3.0005_rename_name_foo_surname_alter_foo_lower_name...Traceback (most recent call last):\n File \"path_to_project\\mysite\\manage.py\", line 22, in <module>\n\tmain()\n File \"path_to_project\\mysite\\manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\core\\management\\__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\core\\management\\__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\core\\management\\base.py\", line 413, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\core\\management\\base.py\", line 459, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\core\\management\\base.py\", line 107, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\core\\management\\commands\\migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\migrations\\executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\migrations\\executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\migrations\\executor.py\", line 255, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\migrations\\migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\migrations\\operations\\fields.py\", line 241, in database_forwards\n\tschema_editor.alter_field(from_model, from_field, to_field)\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\backends\\base\\schema.py\", line 875, in alter_field\n\tor old_field.generated_sql(self.connection)\n\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\models\\fields\\generated.py\", line 58, in generated_sql\n\tresolved_expression = self.expression.resolve_expression(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\models\\expressions.py\", line 1052, in resolve_expression\n\tc.source_expressions[pos] = arg.resolve_expression(\n\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\models\\expressions.py\", line 874, in resolve_expression\n\treturn query.resolve_ref(self.name, allow_joins, reuse, summarize)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 2010, in resolve_ref\n\tjoin_info = self.setup_joins(\n\t\t\t\t^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1863, in setup_joins\n\tpath, final_field, targets, rest = self.names_to_path(\n\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^\n File \"path_to_project\\venv\\Lib\\site-packages\\django\\db\\models\\sql\\query.py\", line 1768, in names_to_path\n\traise FieldError(\ndjango.core.exceptions.FieldError: Cannot resolve keyword 'name' into field. Choices are: id, lower_name, surname\n", "hints_text": [["Thank you Sarah, I reproduced and confirmed that this is not a dupe of #35359 (or at least the fix for that ticket is not fixing this issue). This is a release blocker for 5.0 given that GeneratedField was added in that Django version. I also reproduced in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.", 1714648361.0], ["I don't think the problem is specific to SQLite. The non-invasive back portable solution I can think of is for FieldError to be caught and also result in a ValueError \u200bpointing out that the generated field must be removed first. In other words, if we can't generate the SQL for the old field anymore but we can for the new one then it was certainly changed and the same lack of alteration support limitation applies.", 1714649369.0], ["In other words, if we can't generate the SQL for the old field anymore but we can for the new one then it was certainly changed and the same lack of alteration support limitation applies. Makes sense! Agree that I found this on SQLite is irrelevant", 1714652231.0], ["\u200bPR", 1714657393.0]], "created_at": "2024-05-02T18:42:58Z"}
{"repo": "django/django", "pull_number": 18120, "instance_id": "django__django-18120", "issue_numbers": ["12978"], "base_commit": "a0c44d4e23f8f509757f97f28fbbb1ced3382361", "patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 2378a14874d2..0947ab212ce4 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -160,6 +160,7 @@ def get_feed(self, obj, request):\n             feed_copyright=self._get_dynamic_attr(\"feed_copyright\", obj),\n             feed_guid=self._get_dynamic_attr(\"feed_guid\", obj),\n             ttl=self._get_dynamic_attr(\"ttl\", obj),\n+            stylesheets=self._get_dynamic_attr(\"stylesheets\", obj),\n             **self.feed_extra_kwargs(obj),\n         )\n \ndiff --git a/django/utils/feedgenerator.py b/django/utils/feedgenerator.py\nindex 3bd456ca687a..fae327143086 100644\n--- a/django/utils/feedgenerator.py\n+++ b/django/utils/feedgenerator.py\n@@ -24,6 +24,7 @@\n \n import datetime\n import email\n+import mimetypes\n from io import StringIO\n from urllib.parse import urlparse\n \n@@ -57,6 +58,53 @@ def get_tag_uri(url, date):\n     return \"tag:%s%s:%s/%s\" % (bits.hostname, d, bits.path, bits.fragment)\n \n \n+def _guess_stylesheet_mimetype(url):\n+    \"\"\"\n+    Return the given stylesheet's mimetype tuple, using a slightly custom\n+    version of Python's mimetypes.guess_type().\n+    \"\"\"\n+    mimetypedb = mimetypes.MimeTypes()\n+\n+    # The official mimetype for XSLT files is technically `application/xslt+xml`\n+    # but as of 2024 almost no browser supports that (they all expect text/xsl).\n+    # On top of that, windows seems to assume that the type for xsl is text/xml.\n+    mimetypedb.readfp(StringIO(\"text/xsl\\txsl\\ntext/xsl\\txslt\"))\n+\n+    return mimetypedb.guess_type(url)\n+\n+\n+class Stylesheet:\n+    \"\"\"An RSS stylesheet\"\"\"\n+\n+    def __init__(self, url, mimetype=\"\", media=\"screen\"):\n+        self._url = url\n+        self._mimetype = mimetype\n+        self.media = media\n+\n+    # Using a property to delay the evaluation of self._url as late as possible\n+    # in case of a lazy object (like reverse_lazy(...) for example).\n+    @property\n+    def url(self):\n+        return iri_to_uri(self._url)\n+\n+    @property\n+    def mimetype(self):\n+        if self._mimetype == \"\":\n+            return _guess_stylesheet_mimetype(self.url)[0]\n+        return self._mimetype\n+\n+    def __str__(self):\n+        data = [f'href=\"{self.url}\"']\n+        if self.mimetype is not None:\n+            data.append(f'type=\"{self.mimetype}\"')\n+        if self.media is not None:\n+            data.append(f'media=\"{self.media}\"')\n+        return \" \".join(data)\n+\n+    def __repr__(self):\n+        return repr((self.url, self.mimetype, self.media))\n+\n+\n class SyndicationFeed:\n     \"Base class for all syndication feeds. Subclasses should provide write()\"\n \n@@ -75,12 +123,24 @@ def __init__(\n         feed_copyright=None,\n         feed_guid=None,\n         ttl=None,\n+        stylesheets=None,\n         **kwargs,\n     ):\n         def to_str(s):\n             return str(s) if s is not None else s\n \n+        def to_stylesheet(s):\n+            return s if isinstance(s, Stylesheet) else Stylesheet(s)\n+\n         categories = categories and [str(c) for c in categories]\n+\n+        if stylesheets is not None:\n+            if isinstance(stylesheets, (Stylesheet, str)):\n+                raise TypeError(\n+                    f\"stylesheets should be a list, not {stylesheets.__class__}\"\n+                )\n+            stylesheets = [to_stylesheet(s) for s in stylesheets]\n+\n         self.feed = {\n             \"title\": to_str(title),\n             \"link\": iri_to_uri(link),\n@@ -95,6 +155,7 @@ def to_str(s):\n             \"feed_copyright\": to_str(feed_copyright),\n             \"id\": feed_guid or link,\n             \"ttl\": to_str(ttl),\n+            \"stylesheets\": stylesheets,\n             **kwargs,\n         }\n         self.items = []\n@@ -166,6 +227,12 @@ def add_root_elements(self, handler):\n         \"\"\"\n         pass\n \n+    def add_stylesheets(self, handler):\n+        \"\"\"\n+        Add stylesheet(s) to the feed. Called from write().\n+        \"\"\"\n+        pass\n+\n     def item_attributes(self, item):\n         \"\"\"\n         Return extra attributes to place on each item (i.e. item/entry) element.\n@@ -228,6 +295,9 @@ class RssFeed(SyndicationFeed):\n     def write(self, outfile, encoding):\n         handler = SimplerXMLGenerator(outfile, encoding, short_empty_elements=True)\n         handler.startDocument()\n+        # Any stylesheet must come after the start of the document but before any tag.\n+        # https://www.w3.org/Style/styling-XML.en.html\n+        self.add_stylesheets(handler)\n         handler.startElement(\"rss\", self.rss_attributes())\n         handler.startElement(\"channel\", self.root_attributes())\n         self.add_root_elements(handler)\n@@ -247,6 +317,10 @@ def write_items(self, handler):\n             self.add_item_elements(handler, item)\n             handler.endElement(\"item\")\n \n+    def add_stylesheets(self, handler):\n+        for stylesheet in self.feed[\"stylesheets\"] or []:\n+            handler.processingInstruction(\"xml-stylesheet\", stylesheet)\n+\n     def add_root_elements(self, handler):\n         handler.addQuickElement(\"title\", self.feed[\"title\"])\n         handler.addQuickElement(\"link\", self.feed[\"link\"])\ndiff --git a/docs/ref/contrib/syndication.txt b/docs/ref/contrib/syndication.txt\nindex d9672c5b0006..d0a3cc41f7fc 100644\n--- a/docs/ref/contrib/syndication.txt\n+++ b/docs/ref/contrib/syndication.txt\n@@ -596,6 +596,24 @@ This example illustrates all possible attributes and methods for a\n \n         ttl = 600  # Hard-coded Time To Live.\n \n+        # STYLESHEETS -- Optional. To set, provide one of the following three.\n+        # The framework looks for them in this order.\n+\n+        def stylesheets(self, obj):\n+            \"\"\"\n+            Takes the object returned by get_object() and returns the feed's\n+            stylesheets (as URL strings or as Stylesheet instances).\n+            \"\"\"\n+\n+        def stylesheets(self):\n+            \"\"\"\n+            Returns the feed's stylesheets (as URL strings or Stylesheet\n+            instances).\n+            \"\"\"\n+\n+        # Hardcoded stylesheets.\n+        stylesheets = [\"/stylesheet1.xsl\", \"stylesheet2.xsl\"]\n+\n         # ITEMS -- One of the following three is required. The framework looks\n         # for them in this order.\n \n@@ -961,16 +979,26 @@ They share this interface:\n     * ``feed_copyright``\n     * ``feed_guid``\n     * ``ttl``\n+    * ``stylesheets``\n \n     Any extra keyword arguments you pass to ``__init__`` will be stored in\n     ``self.feed`` for use with `custom feed generators`_.\n \n-    All parameters should be strings, except ``categories``, which should be a\n-    sequence of strings. Beware that some control characters\n-    are `not allowed <https://www.w3.org/International/questions/qa-controls>`_\n-    in XML documents. If your content has some of them, you might encounter a\n+    All parameters should be strings, except for two:\n+\n+    * ``categories`` should be a sequence of strings.\n+    * ``stylesheets`` should be a sequence of either strings or\n+      :class:`~django.utils.feedgenerator.Stylesheet` instances.\n+\n+    Beware that some control characters are\n+    `not allowed <https://www.w3.org/International/questions/qa-controls>`_ in\n+    XML documents. If your content has some of them, you might encounter a\n     :exc:`ValueError` when producing the feed.\n \n+    .. versionchanged:: 5.2\n+\n+        The ``stylesheets`` argument was added.\n+\n :meth:`.SyndicationFeed.add_item`\n     Add an item to the feed with the given parameters.\n \n@@ -1095,3 +1123,90 @@ For example, you might start implementing an iTunes RSS feed generator like so::\n \n There's a lot more work to be done for a complete custom feed class, but the\n above example should demonstrate the basic idea.\n+\n+.. _feed-stylesheets:\n+\n+Feed stylesheets\n+----------------\n+\n+.. versionadded:: 5.2\n+\n+If you wish to have your RSS feed render nicely in a browser, you will need to\n+provide styling information for the XML file, typically in XSLT_ or CSS\n+formats.\n+\n+You can add this to your RSS feed by setting the ``stylesheets`` attribute on\n+the feed class.\n+\n+This can be a hardcoded URL::\n+\n+    from django.contrib.syndication.views import Feed\n+\n+\n+    class FeedWithHardcodedStylesheet(Feed):\n+        stylesheets = [\n+            \"https://example.com/rss_stylesheet.xslt\",\n+        ]\n+\n+You can also use Django's static files system::\n+\n+    from django.contrib.syndication.views import Feed\n+    from django.templatetags.static import static\n+\n+\n+    class FeedWithStaticFileStylesheet(Feed):\n+        stylesheets = [\n+            static(\"rss_styles.xslt\"),\n+        ]\n+\n+Another option is to have a view in your project that renders the XSLT\n+document. You can then link it like so::\n+\n+    from django.contrib.syndication.views import Feed\n+    from django.urls import reverse_lazy\n+\n+\n+    class FeedWithStylesheetView(Feed):\n+        stylesheets = [\n+            reverse_lazy(\"your-custom-view-name\"),\n+        ]\n+\n+Django will normally try to guess the MIME type of the given URL based on its\n+extension, but if that fails you can specify it using the\n+:class:`~django.utils.feedgenerator.Stylesheet` class::\n+\n+    from django.contrib.syndication.views import Feed\n+    from django.utils.feedgenerator import Stylesheet\n+\n+\n+    class FeedWithHardcodedStylesheet(Feed):\n+        stylesheets = [\n+            Stylesheet(\"https://example.com/rss_stylesheet\", mimetype=\"text/xsl\"),\n+        ]\n+\n+Similarly, if you'd like to use a different ``media`` attribute than ``screen``\n+(Django's default), you can use the\n+:class:`~django.utils.feedgenerator.Stylesheet` class again::\n+\n+    from django.contrib.syndication.views import Feed\n+    from django.utils.feedgenerator import Stylesheet\n+\n+\n+    class FeedWithHardcodedStylesheet(Feed):\n+        stylesheets = [\n+            Stylesheet(\"https://example.com/rss_stylesheet.xslt\", media=\"print\"),\n+        ]\n+\n+Any of these options can be combined when using multiple stylesheets::\n+\n+    from django.contrib.syndication.views import Feed\n+    from django.utils.feedgenerator import Stylesheet\n+\n+\n+    class MultiStylesheetFeed(Feed):\n+        stylesheets = [\n+            \"/stylesheet1.xsl\",\n+            Stylesheet(\"/stylesheet2.xsl\"),\n+        ]\n+\n+.. _xslt: https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT\ndiff --git a/docs/ref/utils.txt b/docs/ref/utils.txt\nindex 3e357cba1717..9fb1e83e9e20 100644\n--- a/docs/ref/utils.txt\n+++ b/docs/ref/utils.txt\n@@ -331,6 +331,32 @@ https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004\n \n     See https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id\n \n+``Stylesheet``\n+--------------\n+\n+.. versionadded:: 5.2\n+\n+.. class:: Stylesheet(url, mimetype=\"\", media=\"screen\")\n+\n+    Represents an RSS stylesheet.\n+\n+    .. attribute:: url\n+\n+        Required argument. The URL where the stylesheet is located.\n+\n+    .. attribute:: mimetype\n+\n+        An optional string containing the MIME type of the stylesheet. If not\n+        specified, Django will attempt to guess it by using Python's\n+        :py:func:`mimetypes.guess_type()`. Use ``mimetype=None`` if you don't\n+        want your stylesheet to have a MIME type specified.\n+\n+    .. attribute:: media\n+\n+        An optional string which will be used as the ``media`` attribute of\n+        the stylesheet. Defaults to ``\"screen\"``. Use ``media=None`` if you\n+        don't want your stylesheet to have a ``media`` attribute.\n+\n ``SyndicationFeed``\n -------------------\n \n@@ -339,7 +365,7 @@ https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004\n     Base class for all syndication feeds. Subclasses should provide\n     ``write()``.\n \n-    .. method:: __init__(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, **kwargs)\n+    .. method:: __init__(title, link, description, language=None, author_email=None, author_name=None, author_link=None, subtitle=None, categories=None, feed_url=None, feed_copyright=None, feed_guid=None, ttl=None, stylesheets=None, **kwargs)\n \n         Initialize the feed with the given dictionary of metadata, which applies\n         to the entire feed.\n@@ -347,8 +373,15 @@ https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004\n         Any extra keyword arguments you pass to ``__init__`` will be stored in\n         ``self.feed``.\n \n-        All parameters should be strings, except ``categories``, which should\n-        be a sequence of strings.\n+        All parameters should be strings, except for two:\n+\n+        * ``categories`` should be a sequence of strings.\n+        * ``stylesheets`` should be a sequence of either strings or\n+          :class:`Stylesheet` instances.\n+\n+        .. versionchanged:: 5.2\n+\n+            The ``stylesheets`` argument was added.\n \n     .. method:: add_item(title, link, description, author_email=None, author_name=None, author_link=None, pubdate=None, comments=None, unique_id=None, categories=(), item_copyright=None, ttl=None, updateddate=None, enclosures=None, **kwargs)\n \n@@ -368,6 +401,13 @@ https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004\n         Add elements in the root (i.e. feed/channel) element.\n         Called from ``write()``.\n \n+    .. method:: add_stylesheets(self, handler)\n+\n+        .. versionadded:: 5.2\n+\n+        Add stylesheet information to the document.\n+        Called from ``write()``.\n+\n     .. method:: item_attributes(item)\n \n         Return extra attributes to place on each item (i.e. item/entry)\ndiff --git a/docs/releases/5.2.txt b/docs/releases/5.2.txt\nindex fb2a1d017711..1aec45df4eb5 100644\n--- a/docs/releases/5.2.txt\n+++ b/docs/releases/5.2.txt\n@@ -98,7 +98,10 @@ Minor features\n :mod:`django.contrib.syndication`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* All :class:`~django.utils.feedgenerator.SyndicationFeed` classes now support\n+  a ``stylesheets`` attribute. If specified, an ``<? xml-stylesheet ?>``\n+  processing instruction will be added to the top of the document for each\n+  stylesheet in the given list. See :ref:`feed-stylesheets` for more details.\n \n Asynchronous views\n ~~~~~~~~~~~~~~~~~~\n", "test_patch": "diff --git a/tests/syndication_tests/feeds.py b/tests/syndication_tests/feeds.py\nindex a35dc29e2090..56e540c63385 100644\n--- a/tests/syndication_tests/feeds.py\n+++ b/tests/syndication_tests/feeds.py\n@@ -236,6 +236,13 @@ def item_title(self, item):\n         return \"Title: %s\" % item.title\n \n \n+class TestFeedWithStylesheets(TestRss2Feed):\n+    stylesheets = [\n+        \"/stylesheet1.xsl\",\n+        feedgenerator.Stylesheet(\"/stylesheet2.xsl\"),\n+    ]\n+\n+\n class NaiveDatesFeed(TestAtomFeed):\n     \"\"\"\n     A feed with naive (non-timezone-aware) dates.\ndiff --git a/tests/syndication_tests/tests.py b/tests/syndication_tests/tests.py\nindex a68ed879db85..6403f7461a56 100644\n--- a/tests/syndication_tests/tests.py\n+++ b/tests/syndication_tests/tests.py\n@@ -4,12 +4,16 @@\n from django.contrib.sites.models import Site\n from django.contrib.syndication import views\n from django.core.exceptions import ImproperlyConfigured\n+from django.templatetags.static import static\n from django.test import TestCase, override_settings\n from django.test.utils import requires_tz_support\n+from django.urls import reverse, reverse_lazy\n from django.utils import timezone\n from django.utils.feedgenerator import (\n     Atom1Feed,\n     Rss201rev2Feed,\n+    Stylesheet,\n+    SyndicationFeed,\n     rfc2822_date,\n     rfc3339_date,\n )\n@@ -561,6 +565,125 @@ def test_feed_no_content_self_closing_tag(self):\n                 doc = feed.writeString(\"utf-8\")\n                 self.assertIn(f'<{tag} href=\"https://feed.url.com\" rel=\"self\"/>', doc)\n \n+    def test_stylesheets_none(self):\n+        feed = Rss201rev2Feed(\n+            title=\"test\",\n+            link=\"https://example.com\",\n+            description=\"test\",\n+            stylesheets=None,\n+        )\n+        self.assertNotIn(\"xml-stylesheet\", feed.writeString(\"utf-8\"))\n+\n+    def test_stylesheets(self):\n+        testdata = [\n+            # Plain strings.\n+            (\"/test.xsl\", 'href=\"/test.xsl\" type=\"text/xsl\" media=\"screen\"'),\n+            (\"/test.xslt\", 'href=\"/test.xslt\" type=\"text/xsl\" media=\"screen\"'),\n+            (\"/test.css\", 'href=\"/test.css\" type=\"text/css\" media=\"screen\"'),\n+            (\"/test\", 'href=\"/test\" media=\"screen\"'),\n+            (\n+                \"https://example.com/test.xsl\",\n+                'href=\"https://example.com/test.xsl\" type=\"text/xsl\" media=\"screen\"',\n+            ),\n+            (\n+                \"https://example.com/test.css\",\n+                'href=\"https://example.com/test.css\" type=\"text/css\" media=\"screen\"',\n+            ),\n+            (\n+                \"https://example.com/test\",\n+                'href=\"https://example.com/test\" media=\"screen\"',\n+            ),\n+            (\"/\u2665.xsl\", 'href=\"/%E2%99%A5.xsl\" type=\"text/xsl\" media=\"screen\"'),\n+            (\n+                static(\"stylesheet.xsl\"),\n+                'href=\"/static/stylesheet.xsl\" type=\"text/xsl\" media=\"screen\"',\n+            ),\n+            (\n+                static(\"stylesheet.css\"),\n+                'href=\"/static/stylesheet.css\" type=\"text/css\" media=\"screen\"',\n+            ),\n+            (static(\"stylesheet\"), 'href=\"/static/stylesheet\" media=\"screen\"'),\n+            (\n+                reverse(\"syndication-xsl-stylesheet\"),\n+                'href=\"/syndication/stylesheet.xsl\" type=\"text/xsl\" media=\"screen\"',\n+            ),\n+            (\n+                reverse_lazy(\"syndication-xsl-stylesheet\"),\n+                'href=\"/syndication/stylesheet.xsl\" type=\"text/xsl\" media=\"screen\"',\n+            ),\n+            # Stylesheet objects.\n+            (\n+                Stylesheet(\"/test.xsl\"),\n+                'href=\"/test.xsl\" type=\"text/xsl\" media=\"screen\"',\n+            ),\n+            (Stylesheet(\"/test.xsl\", mimetype=None), 'href=\"/test.xsl\" media=\"screen\"'),\n+            (Stylesheet(\"/test.xsl\", media=None), 'href=\"/test.xsl\" type=\"text/xsl\"'),\n+            (Stylesheet(\"/test.xsl\", mimetype=None, media=None), 'href=\"/test.xsl\"'),\n+            (\n+                Stylesheet(\"/test.xsl\", mimetype=\"text/xml\"),\n+                'href=\"/test.xsl\" type=\"text/xml\" media=\"screen\"',\n+            ),\n+        ]\n+        for stylesheet, expected in testdata:\n+            feed = Rss201rev2Feed(\n+                title=\"test\",\n+                link=\"https://example.com\",\n+                description=\"test\",\n+                stylesheets=[stylesheet],\n+            )\n+            doc = feed.writeString(\"utf-8\")\n+            with self.subTest(expected=expected):\n+                self.assertIn(f\"<?xml-stylesheet {expected}?>\", doc)\n+\n+    def test_stylesheets_instructions_are_at_the_top(self):\n+        response = self.client.get(\"/syndication/stylesheet/\")\n+        doc = minidom.parseString(response.content)\n+        self.assertEqual(doc.childNodes[0].nodeName, \"xml-stylesheet\")\n+        self.assertEqual(\n+            doc.childNodes[0].data,\n+            'href=\"/stylesheet1.xsl\" type=\"text/xsl\" media=\"screen\"',\n+        )\n+        self.assertEqual(doc.childNodes[1].nodeName, \"xml-stylesheet\")\n+        self.assertEqual(\n+            doc.childNodes[1].data,\n+            'href=\"/stylesheet2.xsl\" type=\"text/xsl\" media=\"screen\"',\n+        )\n+\n+    def test_stylesheets_typeerror_if_str_or_stylesheet(self):\n+        for stylesheet, error_message in [\n+            (\"/stylesheet.xsl\", \"stylesheets should be a list, not <class 'str'>\"),\n+            (\n+                Stylesheet(\"/stylesheet.xsl\"),\n+                \"stylesheets should be a list, \"\n+                \"not <class 'django.utils.feedgenerator.Stylesheet'>\",\n+            ),\n+        ]:\n+            args = (\"title\", \"/link\", \"description\")\n+            with self.subTest(stylesheets=stylesheet):\n+                self.assertRaisesMessage(\n+                    TypeError,\n+                    error_message,\n+                    SyndicationFeed,\n+                    *args,\n+                    stylesheets=stylesheet,\n+                )\n+\n+    def test_stylesheets_repr(self):\n+        testdata = [\n+            (Stylesheet(\"/test.xsl\", mimetype=None), \"('/test.xsl', None, 'screen')\"),\n+            (Stylesheet(\"/test.xsl\", media=None), \"('/test.xsl', 'text/xsl', None)\"),\n+            (\n+                Stylesheet(\"/test.xsl\", mimetype=None, media=None),\n+                \"('/test.xsl', None, None)\",\n+            ),\n+            (\n+                Stylesheet(\"/test.xsl\", mimetype=\"text/xml\"),\n+                \"('/test.xsl', 'text/xml', 'screen')\",\n+            ),\n+        ]\n+        for stylesheet, expected in testdata:\n+            self.assertEqual(repr(stylesheet), expected)\n+\n     @requires_tz_support\n     def test_feed_last_modified_time_naive_date(self):\n         \"\"\"\ndiff --git a/tests/syndication_tests/urls.py b/tests/syndication_tests/urls.py\nindex 50f673373ec4..bb1d3d990df2 100644\n--- a/tests/syndication_tests/urls.py\n+++ b/tests/syndication_tests/urls.py\n@@ -36,8 +36,14 @@\n     path(\"syndication/articles/\", feeds.ArticlesFeed()),\n     path(\"syndication/template/\", feeds.TemplateFeed()),\n     path(\"syndication/template_context/\", feeds.TemplateContextFeed()),\n+    path(\"syndication/stylesheet/\", feeds.TestFeedWithStylesheets()),\n     path(\"syndication/rss2/single-enclosure/\", feeds.TestSingleEnclosureRSSFeed()),\n     path(\"syndication/rss2/multiple-enclosure/\", feeds.TestMultipleEnclosureRSSFeed()),\n     path(\"syndication/atom/single-enclosure/\", feeds.TestSingleEnclosureAtomFeed()),\n     path(\"syndication/atom/multiple-enclosure/\", feeds.TestMultipleEnclosureAtomFeed()),\n+    path(\n+        \"syndication/stylesheet.xsl\",\n+        lambda request: None,\n+        name=\"syndication-xsl-stylesheet\",\n+    ),\n ]\ndiff --git a/tests/utils_tests/test_feedgenerator.py b/tests/utils_tests/test_feedgenerator.py\nindex ee15b6e92883..e5ceafb8fa2e 100644\n--- a/tests/utils_tests/test_feedgenerator.py\n+++ b/tests/utils_tests/test_feedgenerator.py\n@@ -1,7 +1,9 @@\n import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase\n from django.utils import feedgenerator\n+from django.utils.functional import SimpleLazyObject\n from django.utils.timezone import get_fixed_timezone\n \n \n@@ -148,3 +150,12 @@ def test_latest_post_date_returns_utc_time(self):\n                     rss_feed.latest_post_date().tzinfo,\n                     datetime.timezone.utc,\n                 )\n+\n+    def test_stylesheet_keeps_lazy_urls(self):\n+        m = mock.Mock(return_value=\"test.css\")\n+        stylesheet = feedgenerator.Stylesheet(SimpleLazyObject(m))\n+        m.assert_not_called()\n+        self.assertEqual(\n+            str(stylesheet), 'href=\"test.css\" type=\"text/css\" media=\"screen\"'\n+        )\n+        m.assert_called_once()\n", "problem_statement": "Support in syndication framework for CSS stylesheet links\nDescription\n\t \nIt would be very helpful to be able to add CSS stylesheets to feeds produced by the syndication framework. As far as I know, this is not possible now without overriding the write method of the feed class.\n", "hints_text": [["I'm not aware of any CSS technique that works reliably for RSS or Atom feeds. This is largely because RSS is intended to be machine readable, not human readable. If I'm mistaken, I'm open to suggestions on what technique we should be supporting.", 1267602365.0], ["RSS feeds contain CSS and/or XSL stylesheets all the time. Here's a link on how to add an RSS stylesheet: \u200bhttp://www.oreillynet.com/pub/a/network/2005/07/01/rss.html I tried to include a list of major websites that use stylesheets in their RSS feeds, but the spam filter blocked it. However, if you check the feeds of CNN, CBS News, Reuters, Newsweek, Time and many more, you'll see XSL and/or CSS stylesheets linked in the source.", 1267621307.0], ["Turns out easier than expected. saxutils supports adding XML processing instructions. Added support for stylesheets, per the W3 spec, in the feedgenerator and in contrib.syndication.", 1278348680.0], ["Updated proposed patch, with tests and docs", 1278402510.0], ["Accepting based on comment 2.", 1355656682.0], ["Updated the patch to apply cleanly, but noticed with the current implementation the stylesheets are only added to RSS feeds and not ATOM feeds. Does ATOM not support stylesheets?", 1375182614.0], ["Is this still useful now that browsers have dropped the RSS button?", 1406912975.0], ["I think it's still relevant. feedburner styles their feeds for example. I updated the patch to apply cleanly again, but we do need to add support for stylesheets in the ATOM feedgenerator (I started this, but didn't make the test updates). Also, I think we should avoid hardcoding text/css since stylesheets could also be xsl. Maybe extracting the stylesheet extension is enough or maybe the stylehseets attribute should be tuples of ('stylesheet', 'type'). Finally, the patch is also missing release notes.", 1408007800.0]], "created_at": "2024-05-01T09:18:53Z"}
{"repo": "django/django", "pull_number": 18111, "instance_id": "django__django-18111", "issue_numbers": ["35412"], "base_commit": "8c257cecffc314179a5375ab8a16ca0ff3b6fb16", "patch": "diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex d95c6fb2d108..502d8546e377 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -9,7 +9,7 @@\n \n \n class DatabaseFeatures(BaseDatabaseFeatures):\n-    minimum_database_version = (3, 27)\n+    minimum_database_version = (3, 31)\n     test_db_allows_multiple_connections = False\n     supports_unspecified_pk = True\n     supports_timezones = False\n@@ -31,18 +31,15 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_parentheses_in_compound = False\n     can_defer_constraint_checks = True\n     supports_over_clause = True\n-    supports_frame_range_fixed_distance = Database.sqlite_version_info >= (3, 28, 0)\n-    supports_frame_exclusion = Database.sqlite_version_info >= (3, 28, 0)\n-    supports_aggregate_filter_clause = Database.sqlite_version_info >= (3, 30, 1)\n-    supports_order_by_nulls_modifier = Database.sqlite_version_info >= (3, 30, 0)\n-    # NULLS LAST/FIRST emulation on < 3.30 requires subquery wrapping.\n-    requires_compound_order_by_subquery = Database.sqlite_version_info < (3, 30)\n+    supports_frame_range_fixed_distance = True\n+    supports_frame_exclusion = True\n+    supports_aggregate_filter_clause = True\n     order_by_nulls_first = True\n     supports_json_field_contains = False\n     supports_update_conflicts = True\n     supports_update_conflicts_with_target = True\n-    supports_stored_generated_columns = Database.sqlite_version_info >= (3, 31, 0)\n-    supports_virtual_generated_columns = Database.sqlite_version_info >= (3, 31, 0)\n+    supports_stored_generated_columns = True\n+    supports_virtual_generated_columns = True\n     test_collations = {\n         \"ci\": \"nocase\",\n         \"cs\": \"binary\",\ndiff --git a/docs/ref/contrib/gis/install/index.txt b/docs/ref/contrib/gis/install/index.txt\nindex 3f948a81d49a..7706790b2a81 100644\n--- a/docs/ref/contrib/gis/install/index.txt\n+++ b/docs/ref/contrib/gis/install/index.txt\n@@ -59,7 +59,7 @@ Database            Library Requirements            Supported Versions  Notes\n PostgreSQL          GEOS, GDAL, PROJ, PostGIS       13+                 Requires PostGIS.\n MySQL               GEOS, GDAL                      8.0.11+             :ref:`Limited functionality <mysql-spatial-limitations>`.\n Oracle              GEOS, GDAL                      19+                 XE not supported.\n-SQLite              GEOS, GDAL, PROJ, SpatiaLite    3.27.0+             Requires SpatiaLite 4.3+\n+SQLite              GEOS, GDAL, PROJ, SpatiaLite    3.31.0+             Requires SpatiaLite 4.3+\n ==================  ==============================  ==================  =========================================\n \n See also `this comparison matrix`__ on the OSGeo Wiki for\ndiff --git a/docs/ref/databases.txt b/docs/ref/databases.txt\nindex acebfdf34856..c8e9f2ebff82 100644\n--- a/docs/ref/databases.txt\n+++ b/docs/ref/databases.txt\n@@ -812,7 +812,7 @@ appropriate typecasting.\n SQLite notes\n ============\n \n-Django supports SQLite 3.27.0 and later.\n+Django supports SQLite 3.31.0 and later.\n \n SQLite_ provides an excellent development alternative for applications that\n are predominantly read-only or require a smaller installation footprint. As\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex a07f8942a5aa..b461524c7094 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -419,6 +419,8 @@ Miscellaneous\n * The undocumented ``django.urls.converters.get_converter()`` function is\n   removed.\n \n+* The minimum supported version of SQLite is increased from 3.27.0 to 3.31.0.\n+\n .. _deprecated-features-5.1:\n \n Features deprecated in 5.1\n", "test_patch": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex 109d210e5483..fafc0b182f64 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -109,9 +109,9 @@ def test_pathlib_name(self):\n             connections[\"default\"].close()\n             self.assertTrue(os.path.isfile(os.path.join(tmp, \"test.db\")))\n \n-    @mock.patch.object(connection, \"get_database_version\", return_value=(3, 26))\n+    @mock.patch.object(connection, \"get_database_version\", return_value=(3, 30))\n     def test_check_database_version_supported(self, mocked_get_database_version):\n-        msg = \"SQLite 3.27 or later is required (found 3.26).\"\n+        msg = \"SQLite 3.31 or later is required (found 3.30).\"\n         with self.assertRaisesMessage(NotSupportedError, msg):\n             connection.check_database_version_supported()\n         self.assertTrue(mocked_get_database_version.called)\n", "problem_statement": "Drop support for SQLite < 3.31.0.\nDescription\n\t \nSQLite 3.28+ supports EXCLUSION and fixed distances in window expressions.\nSQLite 3.30.1+ supports SQL 2003 FILTER (WHERE ...) in aggregate expressions.\nSQLite 3.31+ supports virtual fields.\nUbuntu Focal ships with SQLite 3.31.1 (which will still by supported by Django).\nDebian Bullseye ships with 3.34.1 (which will still by supported by Django) and will EOL in July 2024.\nPython 3.10 ships with 3.35.4(5).\n\u200bSQLite 3.30.1 was released in October 2019. SQLite version support seems like a similar situation as GEOS libraries which we generally support about 5 years after released.\n", "hints_text": [["\u200bPR", 1714303768.0]], "created_at": "2024-04-28T16:29:09Z"}
{"repo": "django/django", "pull_number": 18109, "instance_id": "django__django-18109", "issue_numbers": ["35384"], "base_commit": "34f329ecac79d2d40df5ed83233ea8e42a5f530f", "patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 95985684ee12..47c84eba3bea 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -3,7 +3,8 @@\n \n from django import forms\n from django.core import checks\n-from django.core.files.base import File\n+from django.core.exceptions import FieldError\n+from django.core.files.base import ContentFile, File\n from django.core.files.images import ImageFile\n from django.core.files.storage import Storage, default_storage\n from django.core.files.utils import validate_file_name\n@@ -12,6 +13,7 @@\n from django.db.models.query_utils import DeferredAttribute\n from django.db.models.utils import AltersData\n from django.utils.translation import gettext_lazy as _\n+from django.utils.version import PY311\n \n \n class FieldFile(File, AltersData):\n@@ -312,6 +314,15 @@ def get_prep_value(self, value):\n \n     def pre_save(self, model_instance, add):\n         file = super().pre_save(model_instance, add)\n+        if file.name is None and file._file is not None:\n+            exc = FieldError(\n+                f\"File for {self.name} must have \"\n+                \"the name attribute specified to be saved.\"\n+            )\n+            if PY311 and isinstance(file._file, ContentFile):\n+                exc.add_note(\"Pass a 'name' argument to ContentFile.\")\n+            raise exc\n+\n         if file and not file._committed:\n             # Commit the file to storage prior to saving the model\n             file.save(file.name, file.file, save=False)\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex f2a6bccb0c4d..48711fbee717 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -421,6 +421,10 @@ Miscellaneous\n \n * The minimum supported version of SQLite is increased from 3.27.0 to 3.31.0.\n \n+* :class:`~django.db.models.FileField` now raises a\n+  :class:`~django.core.exceptions.FieldError` when saving a file without a\n+  ``name``.\n+\n .. _deprecated-features-5.1:\n \n Features deprecated in 5.1\n", "test_patch": "diff --git a/tests/model_fields/test_filefield.py b/tests/model_fields/test_filefield.py\nindex 2259c1e480d7..478e9edd36bc 100644\n--- a/tests/model_fields/test_filefield.py\n+++ b/tests/model_fields/test_filefield.py\n@@ -5,13 +5,14 @@\n import unittest\n from pathlib import Path\n \n-from django.core.exceptions import SuspiciousFileOperation\n+from django.core.exceptions import FieldError, SuspiciousFileOperation\n from django.core.files import File, temp\n from django.core.files.base import ContentFile\n from django.core.files.uploadedfile import TemporaryUploadedFile\n from django.db import IntegrityError, models\n from django.test import TestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.utils.version import PY311\n \n from .models import Document\n \n@@ -72,6 +73,27 @@ def test_save_without_name(self):\n             with self.assertRaisesMessage(SuspiciousFileOperation, msg):\n                 document.save()\n \n+    def test_save_content_file_without_name(self):\n+        d = Document()\n+        d.myfile = ContentFile(b\"\")\n+        msg = \"File for myfile must have the name attribute specified to be saved.\"\n+        with self.assertRaisesMessage(FieldError, msg) as cm:\n+            d.save()\n+\n+        if PY311:\n+            self.assertEqual(\n+                cm.exception.__notes__, [\"Pass a 'name' argument to ContentFile.\"]\n+            )\n+\n+    def test_delete_content_file(self):\n+        file = ContentFile(b\"\", name=\"foo\")\n+        d = Document.objects.create(myfile=file)\n+        d.myfile.delete()\n+        self.assertIsNone(d.myfile.name)\n+        msg = \"The 'myfile' attribute has no file associated with it.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            getattr(d.myfile, \"file\")\n+\n     def test_defer(self):\n         Document.objects.create(myfile=\"something.txt\")\n         self.assertEqual(Document.objects.defer(\"myfile\")[0].myfile, \"something.txt\")\n", "problem_statement": "Assigning a file without a name property to a FileField results in file getting discarded silently\nDescription\n\t \nIf you assign a File object without a name (A ContentFile or otherwise) to an instance and then save it, the storage backend is not invoked, the data isn't persisted, and the column isn't updated. All without raising an error or even a logger message.\nWe've isolated the behavior here: \u200bhttps://github.com/john-parton/django-file-field-no-name/blob/dc557c641552b02623f50ef044d73435b9e97ead/test_app/tests.py#L28-L41\nThere's some discussion here: \u200bhttps://forum.djangoproject.com/t/setting-filefield-imagefield-where-file-has-no-name/30192/24\nThe general consensus is that some error should be raised.\nI'll see if I can submit a patch. I flagged this as Database layer, because the patch will likely be in models.files, not the storage backend.\n", "hints_text": [["Thank you for the analysis and discussions \ud83d\udc4d", 1713403002.0], ["The patch will still not pass test_can_reread_content_file at \u200bhttps://github.com/john-parton/django-file-field-no-name/blob/dc557c641552b02623f50ef044d73435b9e97ead/test_app/tests.py#L74-L83 I think it deserves it's own ticket and disccusion.", 1714255672.0]], "created_at": "2024-04-28T02:39:19Z"}
{"repo": "django/django", "pull_number": 18105, "instance_id": "django__django-18105", "issue_numbers": ["35408"], "base_commit": "dd46cab6e076ec766ef0727a16f4219e3e6cb552", "patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex b29a980cb2d5..c40f2aa69dd2 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -46,6 +46,13 @@ def create_permissions(\n     if not app_config.models_module:\n         return\n \n+    try:\n+        Permission = apps.get_model(\"auth\", \"Permission\")\n+    except LookupError:\n+        return\n+    if not router.allow_migrate_model(using, Permission):\n+        return\n+\n     # Ensure that contenttypes are created for this app. Needed if\n     # 'django.contrib.auth' is in INSTALLED_APPS before\n     # 'django.contrib.contenttypes'.\n@@ -62,28 +69,15 @@ def create_permissions(\n     try:\n         app_config = apps.get_app_config(app_label)\n         ContentType = apps.get_model(\"contenttypes\", \"ContentType\")\n-        Permission = apps.get_model(\"auth\", \"Permission\")\n     except LookupError:\n         return\n \n-    if not router.allow_migrate_model(using, Permission):\n-        return\n-\n-    # This will hold the permissions we're looking for as\n-    # (content_type, (codename, name))\n-    searched_perms = []\n-    # The codenames and ctypes that should exist.\n-    ctypes = set()\n-    for klass in app_config.get_models():\n-        # Force looking up the content types in the current database\n-        # before creating foreign keys to them.\n-        ctype = ContentType.objects.db_manager(using).get_for_model(\n-            klass, for_concrete_model=False\n-        )\n+    models = list(app_config.get_models())\n \n-        ctypes.add(ctype)\n-        for perm in _get_all_permissions(klass._meta):\n-            searched_perms.append((ctype, perm))\n+    # Grab all the ContentTypes.\n+    ctypes = ContentType.objects.db_manager(using).get_for_models(\n+        *models, for_concrete_models=False\n+    )\n \n     # Find all the Permissions that have a content_type for a model we're\n     # looking for.  We don't need to check for codenames since we already have\n@@ -91,20 +85,22 @@ def create_permissions(\n     all_perms = set(\n         Permission.objects.using(using)\n         .filter(\n-            content_type__in=ctypes,\n+            content_type__in=set(ctypes.values()),\n         )\n         .values_list(\"content_type\", \"codename\")\n     )\n \n     perms = []\n-    for ct, (codename, name) in searched_perms:\n-        if (ct.pk, codename) not in all_perms:\n-            permission = Permission()\n-            permission._state.db = using\n-            permission.codename = codename\n-            permission.name = name\n-            permission.content_type = ct\n-            perms.append(permission)\n+    for model in models:\n+        ctype = ctypes[model]\n+        for codename, name in _get_all_permissions(model._meta):\n+            if (ctype.pk, codename) not in all_perms:\n+                permission = Permission()\n+                permission._state.db = using\n+                permission.codename = codename\n+                permission.name = name\n+                permission.content_type = ctype\n+                perms.append(permission)\n \n     Permission.objects.using(using).bulk_create(perms)\n     if verbosity >= 2:\n", "test_patch": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex 0cc56b6760d7..5765c500346a 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1528,7 +1528,7 @@ class CreatePermissionsMultipleDatabasesTests(TestCase):\n \n     def test_set_permissions_fk_to_using_parameter(self):\n         Permission.objects.using(\"other\").delete()\n-        with self.assertNumQueries(6, using=\"other\") as captured_queries:\n+        with self.assertNumQueries(4, using=\"other\") as captured_queries:\n             create_permissions(apps.get_app_config(\"auth\"), verbosity=0, using=\"other\")\n         self.assertIn(\"INSERT INTO\", captured_queries[-1][\"sql\"].upper())\n         self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n", "problem_statement": "Optimize post-migrate permission creation\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nI have often seen django.contrib.auth.management.create_permissions() take a significant amount of time in test run profiles. It can be optimized by batching more of its operations, including making ContentTypeManager.get_for_models() use batch creation.\nFor a comparison, I profiled 1518 of Django\u2019s tests in modules called \u201cmodels\u201d:\n$ python -m cProfile -o profile runtests.py --parallel 1 *model*\n$ python -m pstats profile <<< 'sort cumtime\nstats 10000' | less\nBefore optimization stats:\nTotal 11,938,857 function calls taking 5.349 seconds.\n88 calls to create_permissions() take 456ms, ~8.5% of the total time.\nAfter optimization stats:\nTotal 11,359,071 function calls taking 5.035 seconds.\n88 calls to create_permissions() now take 239ms, ~4.7% of the toal time.\n217ms and 579,786 function calls saved.\nOptimization is limited because the post_migrate signal runs once per migrated app config, so there\u2019s no chance to bulk create *all* content types and permissions at once. If we introduced a new \u201call migrated apps\u201d signal, that could reduce runtime further by batching all creation.\n", "hints_text": [["Accepting following an initial review of the patch which looks sensible. Setting as patch needs improvement due to the comments raised by David and Mariusz.", 1714134972.0], ["I repeated the profiling with the latest version of the patch, on top of the latest main commit. The numbers are similar. Before optimization stats: Total 12,387,798 function calls taking 5.589 seconds. 88 calls to create_permissions() take 483ms, ~8.6% of the total time. After optimization stats: Total 11,797,519 function calls taking 5.207 seconds. 88 calls to create_permissions() take 241ms, ~4.6% of the total time. 590,279 function calls and 242ms saved.", 1714750043.0]], "created_at": "2024-04-26T10:09:28Z"}
{"repo": "django/django", "pull_number": 18104, "instance_id": "django__django-18104", "issue_numbers": ["35407"], "base_commit": "ceea86baa36b91d0002911770340a2d7bd4f64b7", "patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex ed7be7dd7a84..68a7228cbea6 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -5,6 +5,7 @@\n from django.apps import apps\n from django.conf import settings\n from django.core.exceptions import FieldDoesNotExist, ImproperlyConfigured\n+from django.core.signals import setting_changed\n from django.db import connections\n from django.db.models import AutoField, Manager, OrderWrt, UniqueConstraint\n from django.db.models.query_utils import PathInfo\n@@ -230,6 +231,9 @@ def contribute_to_class(self, cls, name):\n                 self.db_table, connection.ops.max_name_length()\n             )\n \n+        if self.swappable:\n+            setting_changed.connect(self.setting_changed)\n+\n     def _format_names(self, objs):\n         \"\"\"App label/class name interpolation for object names.\"\"\"\n         names = {\"app_label\": self.app_label.lower(), \"class\": self.model_name}\n@@ -399,7 +403,7 @@ def verbose_name_raw(self):\n         with override(None):\n             return str(self.verbose_name)\n \n-    @property\n+    @cached_property\n     def swapped(self):\n         \"\"\"\n         Has this model been swapped out for another? If so, return the model\n@@ -427,6 +431,10 @@ def swapped(self):\n                     return swapped_for\n         return None\n \n+    def setting_changed(self, *, setting, **kwargs):\n+        if setting == self.swappable and \"swapped\" in self.__dict__:\n+            del self.swapped\n+\n     @cached_property\n     def managers(self):\n         managers = []\n", "test_patch": "diff --git a/tests/model_meta/models.py b/tests/model_meta/models.py\nindex bc69d61a59cd..20a75baf4f2e 100644\n--- a/tests/model_meta/models.py\n+++ b/tests/model_meta/models.py\n@@ -166,6 +166,11 @@ class Relating(models.Model):\n     people_hidden = models.ManyToManyField(Person, related_name=\"+\")\n \n \n+class Swappable(models.Model):\n+    class Meta:\n+        swappable = \"MODEL_META_TESTS_SWAPPED\"\n+\n+\n # ParentListTests models\n class CommonAncestor(models.Model):\n     pass\ndiff --git a/tests/model_meta/tests.py b/tests/model_meta/tests.py\nindex 0aa04d760d19..93883b5cf1c3 100644\n--- a/tests/model_meta/tests.py\n+++ b/tests/model_meta/tests.py\n@@ -3,7 +3,7 @@\n from django.core.exceptions import FieldDoesNotExist\n from django.db.models import CharField, Field, ForeignObjectRel, ManyToManyField\n from django.db.models.options import EMPTY_RELATION_TREE, IMMUTABLE_WARNING\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n from .models import (\n     AbstractPerson,\n@@ -16,6 +16,7 @@\n     Relating,\n     Relation,\n     SecondParent,\n+    Swappable,\n )\n from .results import TEST_RESULTS\n \n@@ -233,6 +234,31 @@ def test_gettext(self):\n         self.assertEqual(Person._meta.verbose_name_raw, \"Person\")\n \n \n+class SwappedTests(SimpleTestCase):\n+    def test_plain_model_none(self):\n+        self.assertIsNone(Relation._meta.swapped)\n+\n+    def test_unset(self):\n+        self.assertIsNone(Swappable._meta.swapped)\n+\n+    def test_set_and_unset(self):\n+        with override_settings(MODEL_META_TESTS_SWAPPED=\"model_meta.Relation\"):\n+            self.assertEqual(Swappable._meta.swapped, \"model_meta.Relation\")\n+        self.assertIsNone(Swappable._meta.swapped)\n+\n+    def test_setting_none(self):\n+        with override_settings(MODEL_META_TESTS_SWAPPED=None):\n+            self.assertIsNone(Swappable._meta.swapped)\n+\n+    def test_setting_non_label(self):\n+        with override_settings(MODEL_META_TESTS_SWAPPED=\"not-a-label\"):\n+            self.assertEqual(Swappable._meta.swapped, \"not-a-label\")\n+\n+    def test_setting_self(self):\n+        with override_settings(MODEL_META_TESTS_SWAPPED=\"model_meta.swappable\"):\n+            self.assertIsNone(Swappable._meta.swapped)\n+\n+\n class RelationTreeTests(SimpleTestCase):\n     all_models = (Relation, AbstractPerson, BasePerson, Person, ProxyPerson, Relating)\n \n", "problem_statement": "Cache Model._meta.swapped\nDescription\n\t \nAnother candidate for caching, like #35232 before.\nThe Model._meta.swapped property returns the model that this one has been swapped for. Since most models are not swappable (only auth.User is officially swappable), it returns None in nearly all cases.\nI found this property was the most called function in Django when profiling a subset of Django\u2019s tests, with:\n$ python -m cProfile -o profile runtests.py --parallel 1 *model*\n$ python -m pstats profile <<< 'sort ncalls\nstats 10000' | less\nThis showed 439,484 calls to swapped, taking 29ms of the 5.597s test run, or 0.5% of the total runtime.\nAfter adding @cached_property, this is reduced to 3,653 calls, rounding down to 0ms.\n", "hints_text": [["Thank you Adam! I a little on the fence on this one but let's give it a chance. Could you please a test in the PR to cover for the new (non trivial) logic?", 1714115192.0]], "created_at": "2024-04-26T09:21:07Z"}
{"repo": "django/django", "pull_number": 18101, "instance_id": "django__django-18101", "issue_numbers": ["35405"], "base_commit": "15fff62d5d8f28b6b61d63341535c9aafc64c865", "patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 770f88265c6f..a3e87f6ed45e 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -140,7 +140,8 @@ def _check_content_type_field(self):\n             else:\n                 return []\n \n-    def get_cache_name(self):\n+    @cached_property\n+    def cache_name(self):\n         return self.name\n \n     def get_content_type(self, obj=None, id=None, using=None, model=None):\ndiff --git a/django/db/models/fields/mixins.py b/django/db/models/fields/mixins.py\nindex e7f282210e93..9f2809dfc8ad 100644\n--- a/django/db/models/fields/mixins.py\n+++ b/django/db/models/fields/mixins.py\n@@ -1,31 +1,52 @@\n+import warnings\n+\n from django.core import checks\n+from django.utils.deprecation import RemovedInDjango60Warning\n+from django.utils.functional import cached_property\n \n NOT_PROVIDED = object()\n \n \n class FieldCacheMixin:\n-    \"\"\"Provide an API for working with the model's fields value cache.\"\"\"\n+    \"\"\"\n+    An API for working with the model's fields value cache.\n+\n+    Subclasses must set self.cache_name to a unique entry for the cache -\n+    typically the field\u2019s name.\n+    \"\"\"\n \n+    # RemovedInDjango60Warning.\n     def get_cache_name(self):\n         raise NotImplementedError\n \n-    def get_cached_value(self, instance, default=NOT_PROVIDED):\n+    @cached_property\n+    def cache_name(self):\n+        # RemovedInDjango60Warning: when the deprecation ends, replace with:\n+        # raise NotImplementedError\n         cache_name = self.get_cache_name()\n+        warnings.warn(\n+            f\"Override {self.__class__.__qualname__}.cache_name instead of \"\n+            \"get_cache_name().\",\n+            RemovedInDjango60Warning,\n+        )\n+        return cache_name\n+\n+    def get_cached_value(self, instance, default=NOT_PROVIDED):\n         try:\n-            return instance._state.fields_cache[cache_name]\n+            return instance._state.fields_cache[self.cache_name]\n         except KeyError:\n             if default is NOT_PROVIDED:\n                 raise\n             return default\n \n     def is_cached(self, instance):\n-        return self.get_cache_name() in instance._state.fields_cache\n+        return self.cache_name in instance._state.fields_cache\n \n     def set_cached_value(self, instance, value):\n-        instance._state.fields_cache[self.get_cache_name()] = value\n+        instance._state.fields_cache[self.cache_name] = value\n \n     def delete_cached_value(self, instance):\n-        del instance._state.fields_cache[self.get_cache_name()]\n+        del instance._state.fields_cache[self.cache_name]\n \n \n class CheckFieldDefaultMixin:\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 3e4bfe34c1b1..7d42d1ea38a1 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -509,7 +509,8 @@ def target_field(self):\n             )\n         return target_fields[0]\n \n-    def get_cache_name(self):\n+    @cached_property\n+    def cache_name(self):\n         return self.name\n \n \ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c7848ee63a3e..bc288c47ecec 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -210,7 +210,7 @@ def get_prefetch_querysets(self, instances, querysets=None):\n             rel_obj_attr,\n             instance_attr,\n             True,\n-            self.field.get_cache_name(),\n+            self.field.cache_name,\n             False,\n         )\n \n@@ -486,7 +486,7 @@ def get_prefetch_querysets(self, instances, querysets=None):\n             rel_obj_attr,\n             instance_attr,\n             True,\n-            self.related.get_cache_name(),\n+            self.related.cache_name,\n             False,\n         )\n \n@@ -744,7 +744,7 @@ def _apply_rel_filters(self, queryset):\n         def _remove_prefetched_objects(self):\n             try:\n                 self.instance._prefetched_objects_cache.pop(\n-                    self.field.remote_field.get_cache_name()\n+                    self.field.remote_field.cache_name\n                 )\n             except (AttributeError, KeyError):\n                 pass  # nothing to clear from cache\n@@ -760,7 +760,7 @@ def get_queryset(self):\n                 )\n             try:\n                 return self.instance._prefetched_objects_cache[\n-                    self.field.remote_field.get_cache_name()\n+                    self.field.remote_field.cache_name\n                 ]\n             except (AttributeError, KeyError):\n                 queryset = super().get_queryset()\n@@ -798,7 +798,7 @@ def get_prefetch_querysets(self, instances, querysets=None):\n                 if not self.field.is_cached(rel_obj):\n                     instance = instances_dict[rel_obj_attr(rel_obj)]\n                     setattr(rel_obj, self.field.name, instance)\n-            cache_name = self.field.remote_field.get_cache_name()\n+            cache_name = self.field.remote_field.cache_name\n             return queryset, rel_obj_attr, instance_attr, False, cache_name, False\n \n         def add(self, *objs, bulk=True):\ndiff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex c9f9232ff73c..a39bfd07daaa 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -248,7 +248,8 @@ def get_path_info(self, filtered_relation=None):\n     def path_infos(self):\n         return self.get_path_info()\n \n-    def get_cache_name(self):\n+    @cached_property\n+    def cache_name(self):\n         \"\"\"\n         Return the name of the cache key to use for storing an instance of the\n         forward model on the reverse model.\ndiff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt\nindex 4f89481ac7a9..1a74a2a46bbb 100644\n--- a/docs/internals/deprecation.txt\n+++ b/docs/internals/deprecation.txt\n@@ -82,6 +82,8 @@ details on these changes.\n * The ``OS_OPEN_FLAGS`` attribute of\n   :class:`~django.core.files.storage.FileSystemStorage` will be removed.\n \n+* The ``get_cache_name()`` method of ``FieldCacheMixin`` will be removed.\n+\n .. _deprecation-removed-in-5.1:\n \n 5.1\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 388487b32247..bb5e4f3fe415 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -474,6 +474,8 @@ Miscellaneous\n   overwriting files in storage, set the new\n   :attr:`~django.core.files.storage.FileSystemStorage.allow_overwrite` option\n   to ``True`` instead.\n+* The ``get_cache_name()`` method of ``FieldCacheMixin`` is deprecated in favor\n+  of the ``cache_name`` cached property.\n \n Features removed in 5.1\n =======================\n", "test_patch": "diff --git a/tests/model_fields/test_mixins.py b/tests/model_fields/test_mixins.py\nnew file mode 100644\nindex 000000000000..5ccfac4d7899\n--- /dev/null\n+++ b/tests/model_fields/test_mixins.py\n@@ -0,0 +1,75 @@\n+from django.db.models.fields.mixins import FieldCacheMixin\n+from django.test import SimpleTestCase\n+from django.utils.deprecation import RemovedInDjango60Warning\n+from django.utils.functional import cached_property\n+\n+from .models import Foo\n+\n+\n+# RemovedInDjango60Warning.\n+class ExampleOld(FieldCacheMixin):\n+    def get_cache_name(self):\n+        return \"example\"\n+\n+\n+class Example(FieldCacheMixin):\n+    @cached_property\n+    def cache_name(self):\n+        return \"example\"\n+\n+\n+class FieldCacheMixinTests(SimpleTestCase):\n+    def setUp(self):\n+        self.instance = Foo()\n+        self.field = Example()\n+\n+    # RemovedInDjango60Warning: when the deprecation ends, replace with:\n+    # def test_cache_name_not_implemented(self):\n+    #   with self.assertRaises(NotImplementedError):\n+    #       FieldCacheMixin().cache_name\n+    def test_get_cache_name_not_implemented(self):\n+        with self.assertRaises(NotImplementedError):\n+            FieldCacheMixin().get_cache_name()\n+\n+    # RemovedInDjango60Warning.\n+    def test_get_cache_name_deprecated(self):\n+        msg = \"Override ExampleOld.cache_name instead of get_cache_name().\"\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            result = ExampleOld().cache_name\n+        self.assertEqual(result, \"example\")\n+\n+    def test_cache_name(self):\n+        result = Example().cache_name\n+        self.assertEqual(result, \"example\")\n+\n+    def test_get_cached_value_missing(self):\n+        with self.assertRaises(KeyError):\n+            self.field.get_cached_value(self.instance)\n+\n+    def test_get_cached_value_default(self):\n+        default = object()\n+        result = self.field.get_cached_value(self.instance, default=default)\n+        self.assertIs(result, default)\n+\n+    def test_get_cached_value_after_set(self):\n+        value = object()\n+\n+        self.field.set_cached_value(self.instance, value)\n+        result = self.field.get_cached_value(self.instance)\n+\n+        self.assertIs(result, value)\n+\n+    def test_is_cached_false(self):\n+        result = self.field.is_cached(self.instance)\n+        self.assertFalse(result)\n+\n+    def test_is_cached_true(self):\n+        self.field.set_cached_value(self.instance, 1)\n+        result = self.field.is_cached(self.instance)\n+        self.assertTrue(result)\n+\n+    def test_delete_cached_value(self):\n+        self.field.set_cached_value(self.instance, 1)\n+        self.field.delete_cached_value(self.instance)\n+        result = self.field.is_cached(self.instance)\n+        self.assertFalse(result)\n", "problem_statement": "Use @cached_property for FieldCacheMixin cache key\nDescription\n\t \nFieldCacheMixin is used by related fields to track their cached values. Its existing design means calling get_cache_name() for each operation, even though that value doesn\u2019t change. Changing get_cache_name() into a cached property can thus save a bunch of small but useless function calls working with related fields.\nI profiled this change by using cProfile on a selection of tests using related fields:\n$ python -m cProfile -s cumtime -o profile runtests.py --parallel 1 foreign_object *relat*\n...\nFound 399 test(s).\n...\nBefore, there were 12,520 function calls:\n$ python -m pstats profile <<< 'sort cumtime\nstats 10000' | rg get_cache_name\n\t11193\t0.001\t0.000\t0.001\t0.000 /Users/chainz/Documents/Projects/django/django/db/models/fields/related.py:512(get_cache_name)\n\t 712\t0.000\t0.000\t0.000\t0.000 /Users/chainz/Documents/Projects/django/django/db/models/fields/reverse_related.py:251(get_cache_name)\n\t 615\t0.000\t0.000\t0.000\t0.000 /Users/chainz/Documents/Projects/django/django/contrib/contenttypes/fields.py:143(get_cache_name)\nAfter, there are just 227 calls (should be one per related field):\n$ python -m pstats profile <<< 'sort cumtime\nstats 10000' | rg cache_name\n\t 172\t0.000\t0.000\t0.000\t0.000 /Users/chainz/Documents/Projects/django/django/db/models/fields/related.py:512(cache_name)\n\t 34\t0.000\t0.000\t0.000\t0.000 /Users/chainz/Documents/Projects/django/django/db/models/fields/reverse_related.py:251(cache_name)\n\t 21\t0.000\t0.000\t0.000\t0.000 /Users/chainz/Documents/Projects/django/django/contrib/contenttypes/fields.py:143(cache_name)\nThe time saving is minimal here. It may be notable when working with a lot of model instances.\n", "hints_text": [["It's a change that isn't too invasive so I think it's worth doing. I think we should add a deprecation shim for get_cache_name though.", 1714047614.0], ["Patch is LGTM", 1714119104.0], ["I agree the branch looks good but tests are missing, setting flags accordingly.", 1714134455.0]], "created_at": "2024-04-25T17:07:05Z"}
{"repo": "django/django", "pull_number": 18097, "instance_id": "django__django-18097", "issue_numbers": ["35382"], "base_commit": "195d885ca01b14e3ce9a1881c3b8f7074f953736", "patch": "diff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex 1d9fa9858eec..94e6b5caf8c0 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -415,16 +415,6 @@ body.popup .submit-row {\n     width: 100%;\n }\n \n-.inline-related fieldset.module h3 {\n-    margin: 0;\n-    padding: 2px 5px 3px 5px;\n-    font-size: 0.6875rem;\n-    text-align: left;\n-    font-weight: bold;\n-    background: #bcd;\n-    color: var(--body-bg);\n-}\n-\n .inline-group .tabular fieldset.module {\n     border: none;\n }\n", "test_patch": "", "problem_statement": "Remove unused CSS style `.inline-related fieldset.module h3`\nDescription\n\t\t\n(last modified by Natalia Bidart)\t\t\nCurrently, the CSS definition in forms.css for .inline-related fieldset.module h3 (which is at least 16 years old) is not being used in the Django code base. The only templates using the inline-related CSS class are contrib/admin/templates/admin/edit_inline/tabular.html and contrib/admin/templates/admin/edit_inline/stacked.html, and the former only uses h3 elements inside a div element which does not fulfill the CSS rule, and in the latter there is no usage of h3 at all.\n", "hints_text": [["Thank you Sarah for the report, it makes sense. I checked and the background color is at least 16 years old! Do you have any concrete suggestion for the new font color?", 1713441957.0], ["Black #000?", 1713442405.0], ["Looks good! I checked the base.css and noticed we have a --body-fg: #333 which also seems like a good option. I would remove the bold though!", 1713443094.0], ["During a \u200bDiscord conversation between Sarah and Ben, they realized that this low-contrast issue was only reproducible in the context of a PR fixing #35189, meaning that the issue is not present in main. So we are re-purposing this ticket to confirm and delete the unused CSS style .inline-related fieldset.module h3.", 1713519301.0], ["I'm new here and I wanna help. Can anyone guide me, please?", 1713614661.0], ["Hello, author of the fix for the aforementioned other ticket here. The light blue color used for inline H3s feels random; it does not fit the Django Admin's color scheme. Since the CSS hasn't been touched for years and is unused, and the color is not referred to with CSS custom properties, I assume it's an old remnant that wasn't meant to match modern admin styles. Hence I propose we find a style or color that better fits with the current base colors tint-wise, and find a suitable text color with a WCAG-approved contrasting text color. I am not a designer, so I would experiment with my PR and see what works. It's not a scientific method. If anyone has had a good thought about this before, let me know! Edit: I can also make it look like it does currently so you won't notice a visual difference.", 1713680137.0], ["Just an FYI, this ticket has bee repurposed to fully remove the unused CSS rule so there is no need to pick new colors. If a new color is needed in a future work that introduces this h3 back, the colors should be discussed in that PR/ticket. Thank you!", 1713772384.0], ["I have removed this whole selector and contents for .inline-related fieldset.module h3 in my PR for ticket #35189 (\u200bPR #17910). Do you want to have this as a separate PR, as well?", 1713846698.0], ["Do you want to have this as a separate PR, as well? Yes please, let's get this merged as a distinct and independent cleanup change. Having a ticket to track this is probably overkill, but merging in a separate commit has a couple of advantages and it's quite common we try to pull out commits and merge early when possible/appropriate. \ud83d\udc4d", 1713848164.0]], "created_at": "2024-04-23T14:51:45Z"}
{"repo": "django/django", "pull_number": 18096, "instance_id": "django__django-18096", "issue_numbers": ["35395"], "base_commit": "195d885ca01b14e3ce9a1881c3b8f7074f953736", "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex a08ce2710dca..02cac06bcfd7 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -644,7 +644,7 @@ def slice_filter(value, arg):\n                 bits.append(int(x))\n         return value[slice(*bits)]\n \n-    except (ValueError, TypeError):\n+    except (ValueError, TypeError, KeyError):\n         return value  # Fail silently.\n \n \n", "test_patch": "diff --git a/tests/template_tests/filter_tests/test_slice.py b/tests/template_tests/filter_tests/test_slice.py\nindex 5a5dd6b1550b..23257b1282b4 100644\n--- a/tests/template_tests/filter_tests/test_slice.py\n+++ b/tests/template_tests/filter_tests/test_slice.py\n@@ -53,3 +53,6 @@ def test_range_step(self):\n     def test_fail_silently(self):\n         obj = object()\n         self.assertEqual(slice_filter(obj, \"0::2\"), obj)\n+\n+    def test_empty_dict(self):\n+        self.assertEqual(slice_filter({}, \"1\"), {})\n", "problem_statement": "slice filter crashes on an empty dict with Python 3.12\nDescription\n\t\t\n(last modified by Tim Graham)\t\t\nI have a template with a fragment like this:\n<span class=\"fs-6\">Supplier: {{ po_metadata|get_item:dict_item.PONumber|get_item:\"supplier\" }} PO Date: {{ po_metadata|get_item:dict_item.PONumber|get_item:\"order_date\" | slice:\":10\" }} </span>\nWhen using python 3.13.2, I get an exception in django/template/defaultfilters.py slice_filter()\nThis code does not throw an exception with 3.11\nThe exception is a Key Error and it happens because instead a list being passed to the filter, a dictionary is. An empty dict in my case. \nIn python 3.11, the breakpoints in slice_filter() are not hit. Somehow the preceeding filters are behaving differently in case of po_metadata being an empty dict.\n", "hints_text": [["Hi Tim, You haven't provided complete steps to reproduce the issue as your snippet involves custom template filters. The issue may be in those filters. You should debug the problem and confirm that Django is at fault. If so, reopen the issue with an explanation. See TicketClosingReasons/UseSupportChannels if you need help.", 1713767247.0], ["Fair enough. The code below is the slice_filter from the 4.2.11 source. If you run this code in python 3.11, the filter returns {} (an empty dict) If you run it in python 3.12, it raises an exception. Traceback (most recent call last): File \"/app/./test_filter.py\", line 21, in <module> r = slice_filter({},\":5\") ^^^^^^^^^^^^^^^^^^^^^ File \"/app/./test_filter.py\", line 13, in slice_filter return value[slice(*bits)] ~~~~~^^^^^^^^^^^^^^ KeyError: slice(None, 5, None) def slice_filter(value, arg): \"\"\" Return a slice of the list using the same syntax as Python's list slicing. \"\"\" try: bits = [] for x in str(arg).split(\":\"): if not x: bits.append(None) else: bits.append(int(x)) return value[slice(*bits)] except (ValueError, TypeError) as e: return value # Fail silently. if __name__ == \"__main__\": r = slice_filter({},\":5\") print(f\"{r=}\") I will try to work out why, but this at least describes the problem I think.", 1713769529.0], ["the slice() function is being interpreted as key in 3.12 but not in prior python versions. the calculation of bits is identical. Python 3.12 docs say that slice objects are now hashable, so it gets treated as a key I suppose. I wonder how it worked in prior python versions. Including KeyError in the caught exceptions restores consistent behaviour. def slice_filter(value, arg): \"\"\" Return a slice of the list using the same syntax as Python's list slicing. \"\"\" try: bits = [] for x in str(arg).split(\":\"): if not x: bits.append(None) else: bits.append(int(x)) return value[slice(*bits)] except (ValueError, TypeError, KeyError): return value # Fail silently.", 1713770545.0], ["Thanks. It looks like unexpected usage since slicing dictionaries doesn't make sense. It won't hurt to fix it, but I don't think the fix will be backported so you may have to work around it in your code. A test which passes on Python 3.11 and crashes on 3.12. tests/template_tests/filter_tests/test_slice.py diff --git a/tests/template_tests/filter_tests/test_slice.py b/tests/template_tests/filter_tests/test_slice.py index 5a5dd6b155..23257b1282 100644 a b class FunctionTests(SimpleTestCase): 5353 def test_fail_silently(self): 5454 obj = object() 5555 self.assertEqual(slice_filter(obj, \"0::2\"), obj) 56 57 def test_empty_dict(self): 58 self.assertEqual(slice_filter({}, \"1\"), {})", 1713776469.0], ["When I submit a patch for this, is there a preferred way I can request that it be backported to 4.2 LTS, so at least someone considers it?", 1713829726.0], ["PR link \u200bhttps://github.com/django/django/pull/18096", 1713833703.0]], "created_at": "2024-04-23T05:49:10Z"}
{"repo": "django/django", "pull_number": 18092, "instance_id": "django__django-18092", "issue_numbers": ["20744"], "base_commit": "53719d6b5b745dd99b1ab9315afb242f706ebbf1", "patch": "diff --git a/docs/ref/forms/fields.txt b/docs/ref/forms/fields.txt\nindex 8b07c6e2b287..d6bd67e3d43e 100644\n--- a/docs/ref/forms/fields.txt\n+++ b/docs/ref/forms/fields.txt\n@@ -7,7 +7,7 @@ Form fields\n \n .. currentmodule:: django.forms\n \n-.. class:: Field(**kwargs)\n+.. class:: Field\n \n When you create a ``Form`` class, the most important part is defining the\n fields of the form. Each field has custom validation logic, along with a few\n", "test_patch": "", "problem_statement": "Docs imply that forms.Field.__init__ accepts any keyword arguments\nDescription\n\t \nAt \u200bhttps://docs.djangoproject.com/en/dev/ref/forms/fields/ there is this:\nclass Field(**kwargs)\nwith no stated constraints on kwargs, thus implying (incorrectly) that any keyword argument can safely be passed to the forms.Field constructor.\nThat leads to code which worked in previous Django versions but regresses in the current version. The case I have in mind is \u200bin django-authority's admin.py where the kwargs passed to formfield_callback (which can include request) are passed on to Field.formfield, whose documentation says \u201cAll of the kwargs dictionary is passed directly to the form field\u2019s __init__() method\u201d ... and that __init__ method can't include request. So upgrading Django yields this somewhat tricky-to-troubleshoot error in a django-authority admin action:\nTypeError: __init__() got an unexpected keyword argument 'request'\n ...\n File \"django/forms/models.py\", line 170, in fields_for_model\n\tformfield = formfield_callback(f, **kwargs)\n File \"authority/admin.py\", line 33, in formfield_for_dbfield\n\treturn db_field.formfield(**kwargs)\n File \"django/db/models/fields/__init__.py\", line 646, in formfield\n\treturn super(CharField, self).formfield(**defaults)\n File \"django/db/models/fields/__init__.py\", line 499, in formfield\n\treturn form_class(**defaults)\n File \"django/forms/fields.py\", line 188, in __init__\n\tsuper(CharField, self).__init__(*args, **kwargs)\nAt some point in this chain, the request keyword argument must be popped out. Presumably directly before the call to Field.formfield. In any case, this requirement should be documented.\n(Or forms.Field.__init__ could be changed to tolerate and ignore unknown keyword arguments. But that's a riskier change.)\n", "hints_text": [["I opened a simple pull request changing .. class:: Field(**kwargs) to .. class:: Field in the docs. That's how the Form class is documented.", 1713611411.0]], "created_at": "2024-04-20T16:09:48Z"}
{"repo": "django/django", "pull_number": 18091, "instance_id": "django__django-18091", "issue_numbers": ["35392"], "base_commit": "53719d6b5b745dd99b1ab9315afb242f706ebbf1", "patch": "diff --git a/django/db/models/__init__.py b/django/db/models/__init__.py\nindex 3923cea591d4..fe81d92d3666 100644\n--- a/django/db/models/__init__.py\n+++ b/django/db/models/__init__.py\n@@ -46,7 +46,12 @@\n from django.db.models.indexes import __all__ as indexes_all\n from django.db.models.lookups import Lookup, Transform\n from django.db.models.manager import Manager\n-from django.db.models.query import Prefetch, QuerySet, prefetch_related_objects\n+from django.db.models.query import (\n+    Prefetch,\n+    QuerySet,\n+    aprefetch_related_objects,\n+    prefetch_related_objects,\n+)\n from django.db.models.query_utils import FilteredRelation, Q\n \n # Imports that would create circular imports if sorted\n@@ -104,6 +109,7 @@\n     \"Prefetch\",\n     \"Q\",\n     \"QuerySet\",\n+    \"aprefetch_related_objects\",\n     \"prefetch_related_objects\",\n     \"DEFERRED\",\n     \"Model\",\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex 788753c82633..8836b861316e 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -20,3 +20,6 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a crash when applying migrations\n   including alterations to ``GeneratedField`` such as setting ``db_index=True``\n   on SQLite (:ticket:`35373`).\n+\n+* Allowed importing ``aprefetch_related_objects`` from ``django.db.models``\n+  (:ticket:`35392`).\n", "test_patch": "", "problem_statement": "aprefetch_related_objects cannot be imported from django.db.models\nDescription\n\t \naprefetch_related_objects cannot be imported from django.db.models like prefetch_related_objects can. Because the docs (\u200bhttps://docs.djangoproject.com/en/5.0/ref/models/querysets/#prefetch-related-objects) say nothing about importing the async version from a different place, I believe this to be an oversight.\nYou can work around this by importing from django.db.models.query but if that's the intended behavior, the documentation should be updated to reflect that. Let me know and I'll do so happily! Otherwise, see my attached patch for a fix to the import.\n", "hints_text": [["\u200bhttps://github.com/django/django/pull/18091", 1713533805.0], ["Good catch. It's a bug in fff14736f1cc594f79ea0e2656b8375d837b7aca. Please add a release note to the 5.0.5.txt.", 1713541388.0]], "created_at": "2024-04-19T18:36:34Z"}
{"repo": "django/django", "pull_number": 18087, "instance_id": "django__django-18087", "issue_numbers": ["35321"], "base_commit": "2be37b253341cfd1f1363c533e6f896230f047a7", "patch": "diff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex df426ed991b9..b58cbd964e6e 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -171,7 +171,7 @@ input[type=\"submit\"], button {\n     /* Forms */\n \n     label {\n-        font-size: 0.875rem;\n+        font-size: 1rem;\n     }\n \n     /*\n@@ -192,7 +192,7 @@ input[type=\"submit\"], button {\n         margin: 0;\n         padding: 6px 8px;\n         min-height: 2.25rem;\n-        font-size: 0.875rem;\n+        font-size: 1rem;\n     }\n \n     .form-row select {\n", "test_patch": "", "problem_statement": "Django Admin in Mobile Safari zooms in on text inputs\nDescription\n\t \nThe Django Admin on Mobile Safari currently has a bug where tapping on an input field or textarea causes the screen to zoom in slightly, leaving the user to zoom back out again when they have finished editing.\nThis is related to a fix from a while ago where we ensured our meta viewport didn't restrict zooming - which was a good accessibility change! https://code.djangoproject.com/ticket/34617\nWe can fix the zoom by very slightly increasing the font-size used for these fields. 16px is the magic value that prevents Mobile Safari from zooming in on a selected field.\nI've applied this fix to my own site using a custom template here: \u200bhttps://github.com/simonw/simonwillisonblog/blob/f5bf2f8fa035c62ef6b373d8237e9bc9e177052d/templates/admin/base_site.html\nHere's a demo video I made on my iPhone: \u200bhttps://static.simonwillison.net/static/2024/mobile-safari-zoom-django-admin.mov\nIt shows two Django Admin instances. In the first half of the video I interact with the default admin, showing how tapping on input text and textarea fields zooms the screen in slightly.\nIn the second half of the video I interact with a customized version of the Admin that sets font-size: 16px on those fields. This removes the default zoom.\nI think we should standardize on 16px for all form fields in the admin. I've patched a bunch of them on my own instance, but the one thing I haven't fixed yet is the select2 form field used for e.g. autocompleted tag entry.\n", "hints_text": [["Here's where the font-size is set for those fields: \u200bhttps://github.com/django/django/blob/6f7c0a4d66f36c59ae9eafa168b455e462d81901/django/contrib/admin/static/admin/css/responsive.css#L181-L196 It's set to font-size: 0.875rem as-of this change two years ago: \u200bhttps://github.com/django/django/commit/1f42a352e04d2e63117f067a1432594ffbb6a8b4 - which changed it from the previous font-size of 14px (still small enough to cause a zoom on Mobile Safari) to using rem values instead. I believe 1rem would be the equivalent of 16px. Here's the issue where px was swapped out for rem, to ensure browser font sizing worked correctly: https://code.djangoproject.com/ticket/33434", 1710969386.0], ["This change will likely have knock-on effects. Labels are currently set to 0.8125rem - should they be increased to 1rem too? \u200bhttps://github.com/django/django/blob/6f7c0a4d66f36c59ae9eafa168b455e462d81901/django/contrib/admin/static/admin/css/forms.css#L39-L43", 1710969637.0], ["I also found these \"form defaults\" here: \u200bhttps://github.com/django/django/blob/6f7c0a4d66f36c59ae9eafa168b455e462d81901/django/contrib/admin/static/admin/css/base.css#L471-L478 input, textarea, select, .form-row p, form .button { margin: 2px 0; padding: 2px 3px; vertical-align: middle; font-family: var(--font-family-primary); font-weight: normal; font-size: 0.8125rem; }", 1710969723.0], ["Thanks for the detailed report. I'll leave a specific fix to be discussed and confirmed by the Accessibility Team.", 1710977422.0], ["So, does this ticket requires some discussion before picking it up?", 1710998187.0], ["16px is probably a good minimum for all (non-small) text in the admin, but I think restricting this to just labels for now to fix this issue is a good first step. 1rem is probably the way to go.", 1710998635.0], ["Then, can I just add this: label { font-size: 1rem; } to the base.css file in django/contrib/admin/static/admin/css folder? I guess I'll try that and see what happens.", 1711270985.0]], "created_at": "2024-04-18T17:20:23Z"}
{"repo": "django/django", "pull_number": 18086, "instance_id": "django__django-18086", "issue_numbers": ["34994", "35386"], "base_commit": "2be37b253341cfd1f1363c533e6f896230f047a7", "patch": "diff --git a/django/contrib/admin/templates/admin/includes/fieldset.html b/django/contrib/admin/templates/admin/includes/fieldset.html\nindex 9a4372f79109..04e76055ce73 100644\n--- a/django/contrib/admin/templates/admin/includes/fieldset.html\n+++ b/django/contrib/admin/templates/admin/includes/fieldset.html\n@@ -9,7 +9,7 @@\n             {% for field in line %}\n                 <div>\n                     {% if not line.fields|length == 1 and not field.is_readonly %}{{ field.errors }}{% endif %}\n-                        <div class=\"flex-container{% if not line.fields|length == 1 %} fieldBox{% if field.field.name %} field-{{ field.field.name }}{% endif %}{% if not field.is_readonly and field.errors %} errors{% endif %}{% if field.field.is_hidden %} hidden{% endif %}{% elif field.is_checkbox %} checkbox-row{% endif %}\">\n+                        <div class=\"flex-container{% if not line.fields|length == 1 %} fieldBox{% if field.field.name %} field-{{ field.field.name }}{% endif %}{% if not field.is_readonly and field.errors %} errors{% endif %}{% if field.field.is_hidden %} hidden{% endif %}{% endif %}{% if field.is_checkbox %} checkbox-row{% endif %}\">\n                             {% if field.is_checkbox %}\n                                 {{ field.field }}{{ field.label_tag }}\n                             {% else %}\ndiff --git a/docs/releases/4.2.12.txt b/docs/releases/4.2.12.txt\nindex 64a6832d5945..7423dd8745a8 100644\n--- a/docs/releases/4.2.12.txt\n+++ b/docs/releases/4.2.12.txt\n@@ -12,3 +12,7 @@ Bugfixes\n * Fixed a crash in Django 4.2 when validating email max line lengths with\n   content decoded using the ``surrogateescape`` error handling scheme\n   (:ticket:`35361`).\n+\n+* Fixed a regression in Django 4.2 where multiple checkboxes in the admin would\n+  be centered on narrower screen widths (:ticket:`34994`) or have misaligned\n+  labels (:ticket:`35386`).\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex 788753c82633..e343d730b026 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -20,3 +20,7 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a crash when applying migrations\n   including alterations to ``GeneratedField`` such as setting ``db_index=True``\n   on SQLite (:ticket:`35373`).\n+\n+* Fixed a regression in Django 4.2 where multiple checkboxes in the admin would\n+  be centered on narrower screen widths (:ticket:`34994`) or have misaligned\n+  labels (:ticket:`35386`).\n", "test_patch": "", "problem_statement": "Visual regression in admin checkboxes on mobile\nDescription\n\t\t\n(last modified by Tom Carrick)\t\t\nI think it may have been intentional, but it looks pretty wrong.\nIncorrect checkbox help text alignment in multi-field rows\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nFor a single checkbox, styles align the help under the checkbox:\nWhen the checkbox appears with any other field in the same line, this is undone:\nExample admin:\nfrom django.contrib import admin\nfrom example.models import Switcher\nclass SwitcherAdmin(admin.ModelAdmin):\n\tfieldsets = [\n\t\t(\n\t\t\tNone,\n\t\t\t{\n\t\t\t\t\"fields\": [\n\t\t\t\t\t(\"up\", \"down\"),\n\t\t\t\t],\n\t\t\t},\n\t\t),\n\t]\nadmin.site.register(Switcher, SwitcherAdmin)\n(It doesn\u2019t matter if the other field is a checkbox or not.)\nChanging fieldset.html so checkbox-row is applied unconditionally to checkbox-containing field boxes fixes this regression, plus #34994:\n", "hints_text": [["oops, sorry", 1700728092.0], ["\u200bPR", 1700728138.0], ["As per my testing, this is a regression in d687febce5868545f99974d2499a91f81a32fef5 not in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07.", 1700739518.0], ["Replying to Natalia Bidart: As per my testing, this is a regression in d687febce5868545f99974d2499a91f81a32fef5 not in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Are you sure? I checked with Django 4.2.7 and it's centered, it looks fine in Django 4.1.13.", 1700746383.0], ["Replying to Mariusz Felisiak: Replying to Natalia Bidart: As per my testing, this is a regression in d687febce5868545f99974d2499a91f81a32fef5 not in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Are you sure? I checked with Django 4.2.7 and it's centered, it looks fine in Django 4.1.13. Yes, I'm sure. I checked out revno d687febce5868545f99974d2499a91f81a32fef5 and the problem is clearly there, and then I checked out the revno right before it (21757bbdcd6ef31f2a4092fa1bd55dff29214c7a) and the check boxes are OK. d687febce5868545f99974d2499a91f81a32fef5 was backported to 4.2 in revno 788f7b8100dbef050129bf5c1e0af47e7bc89b28", 1700746632.0], ["d687febce5868545f99974d2499a91f81a32fef5 was backported to 4.2 in revno 788f7b8100dbef050129bf5c1e0af47e7bc89b28 So it's still a release blocker for Django 4.2.", 1700747232.0], ["In a89c715c: Fixed #34994 -- Fixed checkbox layout in admin's change page for narrow screen widths. Regression in d687febce5868545f99974d2499a91f81a32fef5.", 1700747691.0], ["In 4d33816c: [5.0.x] Fixed #34994 -- Fixed checkbox layout in admin's change page for narrow screen widths. Regression in d687febce5868545f99974d2499a91f81a32fef5. Backport of a89c715c3bcf7ab1a90747cf8658ebce6304b6e4 from main", 1700747833.0], ["In bac9e94: [4.2.x] Fixed #34994 -- Fixed checkbox layout in admin's change page for narrow screen widths. Regression in d687febce5868545f99974d2499a91f81a32fef5. Backport of a89c715c3bcf7ab1a90747cf8658ebce6304b6e4 from main", 1700747865.0], ["two checkboxes centred", 1713422049.0], ["This is still broken for fieldsets with a checkbox plus another field on the same line, like: class SwitcherAdmin(admin.ModelAdmin): fieldsets = [ ( None, { \"fields\": [ (\"up\", \"down\"), ], }, ), ] This is due to checkbox-row being only applied when there\u2019s a single checkbox in the row. I am making a small PR that fixes this issue and another, #35386. Follw on that ticket.", 1713423062.0], ["single-correct", 1713422794.0], ["double-incorrect", 1713422806.0], ["fixed", 1713422975.0], ["previous-dense", 1713423733.0], ["I ran a bisect and confirmed this was a regression in 96a598356a9ea8c2c05b22cadc12e256a3b295fd, before which checkboxes would be densely packed:", 1713423756.0], ["Thank you Adam, great catch!", 1713425777.0]], "created_at": "2024-04-18T11:56:16Z"}
{"repo": "django/django", "pull_number": 18079, "instance_id": "django__django-18079", "issue_numbers": ["35373"], "base_commit": "47c608202a58c8120d049c98d5d27c4609551d33", "patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 495714a894ea..c5b428fc678c 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -150,6 +150,9 @@ def is_self_referential(f):\n             body.pop(old_field.name, None)\n             mapping.pop(old_field.column, None)\n             body[new_field.name] = new_field\n+            rename_mapping[old_field.name] = new_field.name\n+            if new_field.generated:\n+                continue\n             if old_field.null and not new_field.null:\n                 if new_field.db_default is NOT_PROVIDED:\n                     default = self.prepare_default(self.effective_default(new_field))\n@@ -162,7 +165,6 @@ def is_self_referential(f):\n                 mapping[new_field.column] = case_sql\n             else:\n                 mapping[new_field.column] = self.quote_name(old_field.column)\n-            rename_mapping[old_field.name] = new_field.name\n         # Remove any deleted fields\n         if delete_field:\n             del body[delete_field.name]\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex f8b66a599929..788753c82633 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -16,3 +16,7 @@ Bugfixes\n * Fixed a compatibility issue encountered in Python 3.11.9+ and 3.12.3+ when\n   validating email max line lengths with content decoded using the\n   ``surrogateescape`` error handling scheme (:ticket:`35361`).\n+\n+* Fixed a bug in Django 5.0 that caused a crash when applying migrations\n+  including alterations to ``GeneratedField`` such as setting ``db_index=True``\n+  on SQLite (:ticket:`35373`).\n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex ff126d446a64..3a2947cf4343 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -928,6 +928,39 @@ class Meta:\n         self.assertEqual(obj.generated, \"foo%\")\n         self.assertIs(obj.contains_foo, True)\n \n+    @isolate_apps(\"schema\")\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_alter_generated_field(self):\n+        class GeneratedFieldIndexedModel(Model):\n+            number = IntegerField(default=1)\n+            generated = GeneratedField(\n+                expression=F(\"number\"),\n+                db_persist=True,\n+                output_field=IntegerField(),\n+            )\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(GeneratedFieldIndexedModel)\n+\n+        old_field = GeneratedFieldIndexedModel._meta.get_field(\"generated\")\n+        new_field = GeneratedField(\n+            expression=F(\"number\"),\n+            db_persist=True,\n+            db_index=True,\n+            output_field=IntegerField(),\n+        )\n+        new_field.contribute_to_class(GeneratedFieldIndexedModel, \"generated\")\n+\n+        with connection.schema_editor() as editor:\n+            editor.alter_field(GeneratedFieldIndexedModel, old_field, new_field)\n+\n+        self.assertIn(\n+            \"generated\", self.get_indexes(GeneratedFieldIndexedModel._meta.db_table)\n+        )\n+\n     @isolate_apps(\"schema\")\n     def test_add_auto_field(self):\n         class AddAutoFieldModel(Model):\n", "problem_statement": "GeneratedField alteration fail on SQLite due table remake data insertion\nDescription\n\t \nA migration where I added an index to a generated column resulted in a migrations that fails with \ndjango.db.utils.OperationalError: cannot INSERT into generated column \"effectivePrice\"\n", "hints_text": [["Thank you for your report, a traceback and a description of the backend you are using would have been appreciated. This looks like a problem isolated to SQLite due to the way _remake_table doesn't exclude generated fields from its INSERT INTO new_table SELECT ... FROM old_table at table rename time (a necessary step since SQLite doesn't support most table alterations). django/db/backends/sqlite3/schema.py diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py index 495714a894..32f4f08459 100644 a b def is_self_referential(f): 150150 body.pop(old_field.name, None) 151151 mapping.pop(old_field.column, None) 152152 body[new_field.name] = new_field 153 if old_field.null and not new_field.null: 153 if new_field.generated: 154 pass 155 elif old_field.null and not new_field.null: 154156 if new_field.db_default is NOT_PROVIDED: 155157 default = self.prepare_default(self.effective_default(new_field)) 156158 else:", 1713053409.0]], "created_at": "2024-04-16T04:18:25Z"}
{"repo": "django/django", "pull_number": 18076, "instance_id": "django__django-18076", "issue_numbers": ["35375"], "base_commit": "dd238212082f6547d5b03c5af6ec53368c39568e", "patch": "diff --git a/django/contrib/admin/static/admin/css/rtl.css b/django/contrib/admin/static/admin/css/rtl.css\nindex 1ab09fd10f5d..b8f60e0a347f 100644\n--- a/django/contrib/admin/static/admin/css/rtl.css\n+++ b/django/contrib/admin/static/admin/css/rtl.css\n@@ -282,6 +282,10 @@ form .form-row p.datetime {\n     margin-right: 2px;\n }\n \n+.inline-group .tabular td.original p {\n+    right: 0;\n+}\n+\n .selector .selector-chooser {\n     margin: 0;\n }\n", "test_patch": "", "problem_statement": "Original line of tabular inline admin is always shown on the left, even in RTL\nDescription\n\t \nWhen using a tabular inline admin model, the \"original\" line (containing the string representation and, optionally, a view/change link) is always show on the left. This is fine in most cases, expect for cases where the language is RTL (right-to-left).\nThe following CSS, if put in django/contrib/admin/static/admin/css/rtl.css, should resolve the issue:\n.inline-group .tabular td.original p {\n\tright: 0;\n}\nAlternatively, instead of having specific styling for RTL, we can use inset-inline-start instead of left, which will work correctly for both LTR and RTL. I believe this should be changed here:\n\u200bhttps://github.com/django/django/blob/dd238212082f6547d5b03c5af6ec53368c39568e/django/contrib/admin/static/admin/css/forms.css#L458\n", "hints_text": [["Thank you for the report and the patch! I think I prefer option 2 but still testing \ud83d\udc4d", 1713169059.0], ["Went for option 1 as the accessibility team is in the process of discussing the use of logical properties, see: \u200bhttps://github.com/django/django/pull/17560", 1713171814.0], ["In 2bcf555: Fixed #35375 -- Fixed tabular inline admin original line to be on the right in RTL.", 1713172324.0]], "created_at": "2024-04-15T11:56:07Z"}
{"repo": "django/django", "pull_number": 18068, "instance_id": "django__django-18068", "issue_numbers": ["35359"], "base_commit": "97d48cd3c6f409584b5cc19fbddfca917bae78fd", "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex f000d9fcaa34..353b99225884 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1126,6 +1126,8 @@ def _generate_added_field(self, app_label, model_name, field_name):\n                     self.to_state,\n                 )\n             )\n+        if field.generated:\n+            dependencies.extend(self._get_dependencies_for_generated_field(field))\n         # You can't just add NOT NULL fields with no default or fields\n         # which don't allow empty strings as default.\n         time_fields = (models.DateField, models.DateTimeField, models.TimeField)\n@@ -1547,6 +1549,27 @@ def _get_dependencies_for_foreign_key(app_label, model_name, field, project_stat\n             )\n         return dependencies\n \n+    def _get_dependencies_for_generated_field(self, field):\n+        dependencies = []\n+        referenced_base_fields = models.Q(field.expression).referenced_base_fields\n+        newly_added_fields = sorted(self.new_field_keys - self.old_field_keys)\n+        for app_label, model_name, added_field_name in newly_added_fields:\n+            added_field = self.to_state.models[app_label, model_name].get_field(\n+                added_field_name\n+            )\n+            if (\n+                added_field.remote_field and added_field.remote_field.model\n+            ) or added_field.name in referenced_base_fields:\n+                dependencies.append(\n+                    OperationDependency(\n+                        app_label,\n+                        model_name,\n+                        added_field.name,\n+                        OperationDependency.Type.CREATE,\n+                    )\n+                )\n+        return dependencies\n+\n     def _get_dependencies_for_model(self, app_label, model_name):\n         \"\"\"Return foreign key dependencies of the given model.\"\"\"\n         dependencies = []\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex 8836b861316e..5421cc9fec80 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -23,3 +23,7 @@ Bugfixes\n \n * Allowed importing ``aprefetch_related_objects`` from ``django.db.models``\n   (:ticket:`35392`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash when a\n+  ``GeneratedField`` was added before any of the referenced fields from its\n+  ``expression`` definition (:ticket:`35359`).\n", "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 4b532df51665..d4345208ca43 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -13,6 +13,7 @@\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.questioner import MigrationQuestioner\n from django.db.migrations.state import ModelState, ProjectState\n+from django.db.models.functions import Concat, Lower\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.test.utils import isolate_lru_cache\n \n@@ -1369,6 +1370,82 @@ def test_add_date_fields_with_auto_now_add_asking_for_default(\n         self.assertOperationFieldAttributes(changes, \"testapp\", 0, 2, auto_now_add=True)\n         self.assertEqual(mocked_ask_method.call_count, 3)\n \n+    def test_add_field_before_generated_field(self):\n+        initial_state = ModelState(\n+            \"testapp\",\n+            \"Author\",\n+            [\n+                (\"name\", models.CharField(max_length=20)),\n+            ],\n+        )\n+        updated_state = ModelState(\n+            \"testapp\",\n+            \"Author\",\n+            [\n+                (\"name\", models.CharField(max_length=20)),\n+                (\"surname\", models.CharField(max_length=20)),\n+                (\n+                    \"lower_full_name\",\n+                    models.GeneratedField(\n+                        expression=Concat(Lower(\"name\"), Lower(\"surname\")),\n+                        output_field=models.CharField(max_length=30),\n+                        db_persist=True,\n+                    ),\n+                ),\n+            ],\n+        )\n+        changes = self.get_changes([initial_state], [updated_state])\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AddField\", \"AddField\"])\n+        self.assertOperationFieldAttributes(\n+            changes, \"testapp\", 0, 1, expression=Concat(Lower(\"name\"), Lower(\"surname\"))\n+        )\n+\n+    def test_add_fk_before_generated_field(self):\n+        initial_state = ModelState(\n+            \"testapp\",\n+            \"Author\",\n+            [\n+                (\"name\", models.CharField(max_length=20)),\n+            ],\n+        )\n+        updated_state = [\n+            ModelState(\n+                \"testapp\",\n+                \"Publisher\",\n+                [\n+                    (\"name\", models.CharField(max_length=20)),\n+                ],\n+            ),\n+            ModelState(\n+                \"testapp\",\n+                \"Author\",\n+                [\n+                    (\"name\", models.CharField(max_length=20)),\n+                    (\n+                        \"publisher\",\n+                        models.ForeignKey(\"testapp.Publisher\", models.CASCADE),\n+                    ),\n+                    (\n+                        \"lower_full_name\",\n+                        models.GeneratedField(\n+                            expression=Concat(\"name\", \"publisher_id\"),\n+                            output_field=models.CharField(max_length=20),\n+                            db_persist=True,\n+                        ),\n+                    ),\n+                ],\n+            ),\n+        ]\n+        changes = self.get_changes([initial_state], updated_state)\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(\n+            changes, \"testapp\", 0, [\"CreateModel\", \"AddField\", \"AddField\"]\n+        )\n+        self.assertOperationFieldAttributes(\n+            changes, \"testapp\", 0, 2, expression=Concat(\"name\", \"publisher_id\")\n+        )\n+\n     def test_remove_field(self):\n         \"\"\"Tests autodetection of removed fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_empty])\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 79519db0bc7a..5767fbc42f9a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -9,7 +9,7 @@\n from django.db.migrations.state import ModelState, ProjectState\n from django.db.models import F\n from django.db.models.expressions import Value\n-from django.db.models.functions import Abs, Pi\n+from django.db.models.functions import Abs, Concat, Pi\n from django.db.transaction import atomic\n from django.test import (\n     SimpleTestCase,\n@@ -1379,6 +1379,54 @@ def test_add_field(self):\n         self.assertEqual(definition[1], [])\n         self.assertEqual(sorted(definition[2]), [\"field\", \"model_name\", \"name\"])\n \n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_add_generate_field(self):\n+        app_label = \"test_add_generate_field\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Rider\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                    ],\n+                ),\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=20)),\n+                        (\n+                            \"rider\",\n+                            models.ForeignKey(\n+                                f\"{app_label}.Rider\", on_delete=models.CASCADE\n+                            ),\n+                        ),\n+                        (\n+                            \"name_and_id\",\n+                            models.GeneratedField(\n+                                expression=Concat((\"name\"), (\"rider_id\")),\n+                                output_field=models.TextField(),\n+                                db_persist=True,\n+                            ),\n+                        ),\n+                    ],\n+                ),\n+            ],\n+        )\n+        Pony = project_state.apps.get_model(app_label, \"Pony\")\n+        Rider = project_state.apps.get_model(app_label, \"Rider\")\n+        rider = Rider.objects.create()\n+        pony = Pony.objects.create(name=\"pony\", rider=rider)\n+        self.assertEqual(pony.name_and_id, str(pony.name) + str(rider.id))\n+\n+        new_rider = Rider.objects.create()\n+        pony.rider = new_rider\n+        pony.save()\n+        pony.refresh_from_db()\n+        self.assertEqual(pony.name_and_id, str(pony.name) + str(new_rider.id))\n+\n     def test_add_charfield(self):\n         \"\"\"\n         Tests the AddField operation on TextField.\n", "problem_statement": "Got `django.core.exceptions.FieldError` when adding GeneratedField\nDescription\n\t \nHere is an exists model\nclass Foo1(models.Model):\n\tage = models.IntegerField()\nThen adding GeneratedField\nclass Foo1(models.Model):\n\tage = models.IntegerField()\n\tname = models.CharField(max_length=10)\n\tlower_name = models.GeneratedField(\n\t\texpression=Lower(\"name\"),\n\t\toutput_field=models.CharField(max_length=11),\n\t\tdb_persist=True,\n\t)\nRun makemigrations get below file\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t('temp_django_test', '0006_foo1'),\n\t]\n\toperations = [\n\t\tmigrations.AddField(\n\t\t\tmodel_name='foo1',\n\t\t\tname='lower_name',\n\t\t\tfield=models.GeneratedField(db_persist=True, expression=django.db.models.functions.text.Lower('name'), output_field=models.CharField(max_length=11)),\n\t\t),\n\t\tmigrations.AddField(\n\t\t\tmodel_name='foo1',\n\t\t\tname='name',\n\t\t\tfield=models.CharField(default='a', max_length=10),\n\t\t\tpreserve_default=False,\n\t\t),\n\t]\nThen run migrate, will got error\ntemp-django-5.0 \u276f python manage.py migrate\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, sessions, temp_django_test\nRunning migrations:\n Applying temp_django_test.0007_foo1_lower_name_foo1_name...Traceback (most recent call last):\n File \"/Users/wangdi/Desktop/test_scripts.nosync/temp-django-5.0/manage.py\", line 22, in <module>\n\tmain()\n File \"/Users/wangdi/Desktop/test_scripts.nosync/temp-django-5.0/manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"/Users/wangdi/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/Users/wangdi/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/Users/wangdi/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/core/management/base.py\", line 413, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/core/management/base.py\", line 459, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/core/management/base.py\", line 107, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/core/management/commands/migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 252, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/migrations/migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/migrations/operations/fields.py\", line 108, in database_forwards\n\tschema_editor.add_field(\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/backends/mysql/schema.py\", line 103, in add_field\n\tsuper().add_field(model, field)\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/backends/base/schema.py\", line 709, in add_field\n\tdefinition, params = self.column_sql(model, field, include_default=True)\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/backends/base/schema.py\", line 369, in column_sql\n\t\" \".join(\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/backends/base/schema.py\", line 336, in _iter_column_sql\n\tgenerated_sql, generated_params = self._column_generated_sql(field)\n\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/backends/base/schema.py\", line 434, in _column_generated_sql\n\texpression_sql, params = field.generated_sql(self.connection)\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/models/fields/generated.py\", line 58, in generated_sql\n\tresolved_expression = self.expression.resolve_expression(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/models/expressions.py\", line 975, in resolve_expression\n\tc.source_expressions[pos] = arg.resolve_expression(\n\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/models/expressions.py\", line 854, in resolve_expression\n\treturn query.resolve_ref(self.name, allow_joins, reuse, summarize)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/models/sql/query.py\", line 2014, in resolve_ref\n\tjoin_info = self.setup_joins(\n\t\t\t\t^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/models/sql/query.py\", line 1867, in setup_joins\n\tpath, final_field, targets, rest = self.names_to_path(\n\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^\n File \"/Users/wd0517/Desktop/test_scripts.nosync/temp-django-5.0/.venv/lib/python3.11/site-packages/django/db/models/sql/query.py\", line 1772, in names_to_path\n\traise FieldError(\ndjango.core.exceptions.FieldError: Cannot resolve keyword 'name' into field. Choices are: age, id, lower_name\nEnvironment:\nPython 3.11.8\nDjango 5.0.4\nMySQL 8.0.34\nI think the bug is caused by the order of operations in Migration, after adjusting it, then can be migrate successfully\n", "hints_text": [["The auto-detector has to be adapted to make the AddField of generated field depend on any other AddField or AlterField of field it references through .expression. Since GeneratedField cannot depend on other GeneratedField the easier way of doing to avoid introspecting .expression is likely to make them depend on all other non-GeneratedField fields being added per model so they are always last.", 1712443015.0], ["For anyone picking up this ticket: Simon & I were discussing ways to get fields from expressions in this PR: \u200bhttps://github.com/django/django/pull/16054", 1712458794.0], ["Thanks David, I knew this was implemented somewhere but I lost track of where exactly! I think that relying on this property once it lands is definitely the way to go so it's reused by multiple code paths but in the case of stable/5.x we might be better off by always adding them last. Thoughts?", 1712478645.0], ["I think that relying on this property once it lands is definitely the way to go so it's reused by multiple code paths but in the case of stable/5.x we might be better off by always adding them last. Thoughts? Hm can't fks depend on these though because the constraints for those are also grouped together last. \ud83e\udd14", 1712662886.0], ["Hm can't fks depend on these though because the constraints for those are also grouped together last. \ud83e\udd14 Right. Since GeneratedField cannot be foreign keys though it should still allow for the following grouping of fields? non_fk_non_generated_field | fk_fields | generated_fields", 1712904907.0], ["\u200bPR", 1712915421.0]], "created_at": "2024-04-12T14:47:44Z"}
{"repo": "django/django", "pull_number": 18059, "instance_id": "django__django-18059", "issue_numbers": ["35364"], "base_commit": "c223d14025dd9ef0d354332c537ed8622a1ec29c", "patch": "diff --git a/django/utils/log.py b/django/utils/log.py\nindex fd0cc1bdc1ff..a25b97a7d5a4 100644\n--- a/django/utils/log.py\n+++ b/django/utils/log.py\n@@ -92,6 +92,13 @@ def __init__(self, include_html=False, email_backend=None, reporter_class=None):\n         )\n \n     def emit(self, record):\n+        # Early return when no email will be sent.\n+        if (\n+            not settings.ADMINS\n+            # Method not overridden.\n+            and self.send_mail.__func__ is AdminEmailHandler.send_mail\n+        ):\n+            return\n         try:\n             request = record.request\n             subject = \"%s (%s IP): %s\" % (\n", "test_patch": "diff --git a/tests/logging_tests/tests.py b/tests/logging_tests/tests.py\nindex 20d2852fde00..610bdc112434 100644\n--- a/tests/logging_tests/tests.py\n+++ b/tests/logging_tests/tests.py\n@@ -1,6 +1,7 @@\n import logging\n from contextlib import contextmanager\n from io import StringIO\n+from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n \n@@ -470,6 +471,26 @@ def test_emit_no_form_tag(self):\n         self.assertIn('<div id=\"traceback\">', body_html)\n         self.assertNotIn(\"<form\", body_html)\n \n+    @override_settings(ADMINS=[])\n+    def test_emit_no_admins(self):\n+        handler = AdminEmailHandler()\n+        record = self.logger.makeRecord(\n+            \"name\",\n+            logging.ERROR,\n+            \"function\",\n+            \"lno\",\n+            \"message\",\n+            None,\n+            None,\n+        )\n+        with mock.patch.object(\n+            handler,\n+            \"format_subject\",\n+            side_effect=AssertionError(\"Should not be called\"),\n+        ):\n+            handler.emit(record)\n+        self.assertEqual(len(mail.outbox), 0)\n+\n \n class SettingsConfigTest(AdminScriptTestCase):\n     \"\"\"\ndiff --git a/tests/view_tests/tests/test_defaults.py b/tests/view_tests/tests/test_defaults.py\nindex 415a9a8c6746..66bc1da16889 100644\n--- a/tests/view_tests/tests/test_defaults.py\n+++ b/tests/view_tests/tests/test_defaults.py\n@@ -123,7 +123,7 @@ def test_bad_request(self):\n     )\n     def test_custom_bad_request_template(self):\n         response = self.client.get(\"/raises400/\")\n-        self.assertIs(response.wsgi_request, response.context[-1].request)\n+        self.assertIs(response.wsgi_request, response.context.request)\n \n     @override_settings(\n         TEMPLATES=[\n", "problem_statement": "AdminEmailHandler wastes work when ADMINS isn\u2019t set\nDescription\n\t \nAdminEmailHandler.emit() does a lot of work to assemble the message it passes to mail_admins. If settings.ADMINS is empty, mail_admins() returns instantly, wasting all the message-creation work. It\u2019s quite common to not configure ADMINS, whether in lieu of more advanced tools like Sentry, or during tests.\nIn a quick benchmark on my M1 Mac Pro on Python 3.11, the overhead is ~2.5ms:\nIn [1]: import logging\nIn [2]: logger = logging.getLogger('django')\nIn [3]: %timeit logger.error(\"Yada\")\n...\n2.78 ms \u00b1 75.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nIn [4]: logger = logging.getLogger('example')\nIn [5]: %timeit logger.error(\"Yada\")\n...\n8.37 \u00b5s \u00b1 38.9 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\nThis can be avoided by adding an initial check to AdminEmailHandler.emit().\n", "hints_text": [["Makes sense, thank you!", 1712655969.0]], "created_at": "2024-04-09T14:47:07Z"}
{"repo": "django/django", "pull_number": 18058, "instance_id": "django__django-18058", "issue_numbers": ["35350"], "base_commit": "ca5cd3e3e8e53f15e68ccd727ec8fe719cc48099", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 3d40bc42869a..e68baf4e5763 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1063,12 +1063,16 @@ def _save_table(\n         for a single table.\n         \"\"\"\n         meta = cls._meta\n-        non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]\n+        non_pks_non_generated = [\n+            f\n+            for f in meta.local_concrete_fields\n+            if not f.primary_key and not f.generated\n+        ]\n \n         if update_fields:\n-            non_pks = [\n+            non_pks_non_generated = [\n                 f\n-                for f in non_pks\n+                for f in non_pks_non_generated\n                 if f.name in update_fields or f.attname in update_fields\n             ]\n \n@@ -1100,7 +1104,7 @@ def _save_table(\n                     None,\n                     (getattr(self, f.attname) if raw else f.pre_save(self, False)),\n                 )\n-                for f in non_pks\n+                for f in non_pks_non_generated\n             ]\n             forced_update = update_fields or force_update\n             updated = self._do_update(\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex fd36171c4084..506127b0ca8d 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -9,4 +9,6 @@ Django 5.0.5 fixes several bugs in 5.0.4.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a bug in Django 5.0 that caused a crash of ``Model.save()`` when\n+  creating an instance of a model with a ``GeneratedField`` and providing a\n+  primary key (:ticket:`35350`).\n", "test_patch": "diff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex 641ce591e479..2fbfe3c82ad8 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -207,6 +207,12 @@ def test_save(self):\n         m.refresh_from_db()\n         self.assertEqual(m.field, 8)\n \n+    def test_save_model_with_pk(self):\n+        m = self.base_model(pk=1, a=1, b=2)\n+        m.save()\n+        m = self._refresh_if_needed(m)\n+        self.assertEqual(m.field, 3)\n+\n     def test_save_model_with_foreign_key(self):\n         fk_object = Foo.objects.create(a=\"abc\", d=Decimal(\"12.34\"))\n         m = self.base_model(a=1, b=2, fk=fk_object)\n", "problem_statement": "Crash on write of new instance when using GeneratedField\nDescription\n\t\t\n(last modified by Matt Hegarty)\t\t\nWe have an \u200bissue in django-import-export where imports of new instances fails when the model has a GeneratedField.\nThis occurs when an instance is being created which doesn't already exist in the database, which the \u200bdocs imply is supported by GeneratedField:\nA stored generated column is computed when it is written (inserted or updated)\nThe stack trace is attached.\nSteps to reproduce:\n Clone \u200bthis repo and use the 'issue-1779-generatedfield' branch.\n Create a \u200bvenv\n Install the example app following the instructions \u200bhere\n Navigate to \"Books\", click \"Import\", then select the attached sample.csv file.\n Click \"Submit\" and you will see the error.\npython 3.12\ndjango 5.0.3\n", "hints_text": [["sample csv for import", 1712133475.0], ["stack trace", 1712133487.0], ["This is similar to #35019 (fixed by 03af8fbd0f1cfc08edadda248cf5d3498e8ed2f7) but when dealing with instances that have a primary key assigned and force_insert is not specified. When this is the case Mode.save \u200bwill first attempt to perform an UPDATE as it cannot know whether or not the row exists. It seems that the non_pk logic in _save_table needs to be adapted to also needs to exclude deferred fields when computing values for update purpose.", 1712146853.0]], "created_at": "2024-04-08T16:15:29Z"}
{"repo": "django/django", "pull_number": 18057, "instance_id": "django__django-18057", "issue_numbers": ["35361"], "base_commit": "8b53560eea9f10a1271d3bdf765dc6f969c7d9d5", "patch": "diff --git a/docs/releases/4.2.12.txt b/docs/releases/4.2.12.txt\nnew file mode 100644\nindex 000000000000..cd5b674476d1\n--- /dev/null\n+++ b/docs/releases/4.2.12.txt\n@@ -0,0 +1,14 @@\n+===========================\n+Django 4.2.12 release notes\n+===========================\n+\n+*Expected May 6, 2024*\n+\n+Django 4.2.12 fixes a bug in 4.2.11.\n+\n+Bugfixes\n+========\n+\n+* Fixed a crash in Django 4.2 when validating email max line lengths with\n+  content decoded using the ``surrogateescape`` error handling scheme,\n+  particularly in Python versions 3.11.9+ and 3.12.3+ (:ticket:`35361`).\ndiff --git a/docs/releases/5.0.5.txt b/docs/releases/5.0.5.txt\nindex 506127b0ca8d..ab619c05addf 100644\n--- a/docs/releases/5.0.5.txt\n+++ b/docs/releases/5.0.5.txt\n@@ -12,3 +12,7 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a crash of ``Model.save()`` when\n   creating an instance of a model with a ``GeneratedField`` and providing a\n   primary key (:ticket:`35350`).\n+\n+* Fixed a crash in Django 5.0 when validating email max line lengths with\n+  content decoded using the ``surrogateescape`` error handling scheme,\n+  particularly in Python versions 3.11.9+ and 3.12.3+ (:ticket:`35361`).\ndiff --git a/docs/releases/index.txt b/docs/releases/index.txt\nindex 19d3d9e458e6..928b4e078819 100644\n--- a/docs/releases/index.txt\n+++ b/docs/releases/index.txt\n@@ -45,6 +45,7 @@ versions of the documentation contain the release notes for any later releases.\n .. toctree::\n    :maxdepth: 1\n \n+   4.2.12\n    4.2.11\n    4.2.10\n    4.2.9\n", "test_patch": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex dd6b72ab4907..9e55398d6073 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -92,6 +92,37 @@ def test_ascii(self):\n         self.assertEqual(message[\"From\"], \"from@example.com\")\n         self.assertEqual(message[\"To\"], \"to@example.com\")\n \n+    @mock.patch(\"django.core.mail.message.MIMEText.set_payload\")\n+    def test_nonascii_as_string_with_ascii_charset(self, mock_set_payload):\n+        \"\"\"Line length check should encode the payload supporting `surrogateescape`.\n+\n+        Following https://github.com/python/cpython/issues/76511, newer\n+        versions of Python (3.11.9, 3.12.3 and 3.13) ensure that a message's\n+        payload is encoded with the provided charset and `surrogateescape` is\n+        used as the error handling strategy.\n+\n+        This test is heavily based on the test from the fix for the bug above.\n+        Line length checks in SafeMIMEText's set_payload should also use the\n+        same error handling strategy to avoid errors such as:\n+\n+        UnicodeEncodeError: 'utf-8' codec can't encode <...>: surrogates not allowed\n+\n+        \"\"\"\n+\n+        def simplified_set_payload(instance, payload, charset):\n+            instance._payload = payload\n+\n+        mock_set_payload.side_effect = simplified_set_payload\n+\n+        text = (\n+            \"Text heavily based in Python's text for non-ascii messages: F\u00f6\u00f6 b\u00e4r\"\n+        ).encode(\"iso-8859-1\")\n+        body = text.decode(\"ascii\", errors=\"surrogateescape\")\n+        email = EmailMessage(\"Subject\", body, \"from@example.com\", [\"to@example.com\"])\n+        message = email.message()\n+        mock_set_payload.assert_called_once()\n+        self.assertEqual(message.get_payload(decode=True), text)\n+\n     def test_multiple_recipients(self):\n         email = EmailMessage(\n             \"Subject\",\n", "problem_statement": "SafeMIMEText.set_payload() crash on Python 3.11.9\nDescription\n\t \nA recent bug fix to Python \u200bgh-76511 has been back ported to Python 3.11 and 3.12.\nSee the release notes of \u200bPython 3.11.9 and the soon to be released \u200bPython 3.12.3.\nAs part of the work to prepare Django for Python 3.13, a fix for this has already been merged to main in b231bcd19e57267ce1fc21d42d46f0b65fdcfcf8.\nBelieve this needs to be back ported to Django 4.2 and Django 5.0 to support the latest (or soon to be latest) Python 3.11 and Python 3.12 versions.\nConfirmed when testing Django 4.2 against Python 3.11.9, we know have the following test failure:\n======================================================================\nERROR [0.034s]: test_dont_base64_encode (tests.mail.tests.MailTests.test_dont_base64_encode)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/tests/django/tests/mail/tests.py\", line 902, in test_dont_base64_encode\n\ts = msg.message().as_string()\n\t\t^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/tests/django/django/core/mail/message.py\", line 133, in as_string\n\tg.flatten(self, unixfrom=unixfrom, linesep=linesep)\n File \"/usr/local/lib/python3.11/email/generator.py\", line 115, in flatten\n\tself._write(msg)\n File \"/usr/local/lib/python3.11/email/generator.py\", line 180, in _write\n\tself._dispatch(msg)\n File \"/usr/local/lib/python3.11/email/generator.py\", line 217, in _dispatch\n\tmeth(msg)\n File \"/usr/local/lib/python3.11/email/generator.py\", line 246, in _handle_text\n\tmsg.set_payload(msg._payload, charset)\n File \"/tests/django/django/core/mail/message.py\", line 168, in set_payload\n\thas_long_lines = any(\n\t\t\t\t\t ^^^^\n File \"/tests/django/django/core/mail/message.py\", line 169, in <genexpr>\n\tlen(line.encode()) > RFC5322_EMAIL_LINE_LENGTH_LIMIT\n\t\t^^^^^^^^^^^^^\nUnicodeEncodeError: 'utf-8' codec can't encode characters in position 28-33: surrogates not allowed\n", "hints_text": [["Related forum discussion: \u200bhttps://forum.djangoproject.com/t/send-mail-throws-unicodeencodeerror-under-python-3-11-9/29871/3", 1712562822.0], ["PR for main adding a test (to be backported along with the fix from b231bcd19e57267ce1fc21d42d46f0b65fdcfcf8): \u200bhttps://github.com/django/django/pull/18057/", 1712573025.0]], "created_at": "2024-04-08T15:40:00Z"}
{"repo": "django/django", "pull_number": 18055, "instance_id": "django__django-18055", "issue_numbers": ["35356"], "base_commit": "53719d6b5b745dd99b1ab9315afb242f706ebbf1", "patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 7162c4fea9d1..9be17a4a84c3 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -340,38 +340,37 @@ def _unregister_instance_lookup(self, lookup, lookup_name=None):\n     _unregister_class_lookup = classmethod(_unregister_class_lookup)\n \n \n-def select_related_descend(field, restricted, requested, select_mask, reverse=False):\n+def select_related_descend(field, restricted, requested, select_mask):\n     \"\"\"\n-    Return True if this field should be used to descend deeper for\n-    select_related() purposes. Used by both the query construction code\n-    (compiler.get_related_selections()) and the model instance creation code\n-    (compiler.klass_info).\n+    Return whether `field` should be used to descend deeper for\n+    `select_related()` purposes.\n \n     Arguments:\n-     * field - the field to be checked\n-     * restricted - a boolean field, indicating if the field list has been\n-       manually restricted using a requested clause)\n-     * requested - The select_related() dictionary.\n-     * select_mask - the dictionary of selected fields.\n-     * reverse - boolean, True if we are checking a reverse select related\n+     * `field` - the field to be checked. Can be either a `Field` or\n+       `ForeignObjectRel` instance.\n+     * `restricted` - a boolean field, indicating if the field list has been\n+       manually restricted using a select_related() clause.\n+     * `requested` - the select_related() dictionary.\n+     * `select_mask` - the dictionary of selected fields.\n     \"\"\"\n+    # Only relationships can be descended.\n     if not field.remote_field:\n         return False\n-    if field.remote_field.parent_link and not reverse:\n+    # Forward MTI parent links should not be explicitly descended as they are\n+    # always JOIN'ed against (unless excluded by `select_mask`).\n+    if getattr(field.remote_field, \"parent_link\", False):\n         return False\n-    if restricted:\n-        if reverse and field.related_query_name() not in requested:\n-            return False\n-        if not reverse and field.name not in requested:\n-            return False\n-    if not restricted and field.null:\n+    # When `select_related()` is used without a `*requested` mask all\n+    # relationships are descended unless they are nullable.\n+    if not restricted:\n+        return not field.null\n+    # When `select_related(*requested)` is used only fields that are part of\n+    # `requested` should be descended.\n+    if field.name not in requested:\n         return False\n-    if (\n-        restricted\n-        and select_mask\n-        and field.name in requested\n-        and field not in select_mask\n-    ):\n+    # Prevent invalid usages of `select_related()` and `only()`/`defer()` such\n+    # as `select_related(\"a\").only(\"b\")` and `select_related(\"a\").defer(\"a\")`.\n+    if select_mask and field not in select_mask:\n         raise FieldError(\n             f\"Field {field.model._meta.object_name}.{field.name} cannot be both \"\n             \"deferred and traversed using select_related at the same time.\"\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 676625df6fe7..7377e555c3ac 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1253,21 +1253,20 @@ def get_related_klass_infos(klass_info, related_klass_infos):\n \n         if restricted:\n             related_fields = [\n-                (o.field, o.related_model)\n+                (o, o.field, o.related_model)\n                 for o in opts.related_objects\n                 if o.field.unique and not o.many_to_many\n             ]\n-            for related_field, model in related_fields:\n-                related_select_mask = select_mask.get(related_field) or {}\n+            for related_object, related_field, model in related_fields:\n                 if not select_related_descend(\n-                    related_field,\n+                    related_object,\n                     restricted,\n                     requested,\n-                    related_select_mask,\n-                    reverse=True,\n+                    select_mask,\n                 ):\n                     continue\n \n+                related_select_mask = select_mask.get(related_object) or {}\n                 related_field_name = related_field.related_query_name()\n                 fields_found.add(related_field_name)\n \n@@ -1280,7 +1279,7 @@ def get_related_klass_infos(klass_info, related_klass_infos):\n                     \"model\": model,\n                     \"field\": related_field,\n                     \"reverse\": True,\n-                    \"local_setter\": related_field.remote_field.set_cached_value,\n+                    \"local_setter\": related_object.set_cached_value,\n                     \"remote_setter\": related_field.set_cached_value,\n                     \"from_parent\": from_parent,\n                 }\n@@ -1296,7 +1295,7 @@ def get_related_klass_infos(klass_info, related_klass_infos):\n                     select_fields.append(len(select))\n                     select.append((col, None))\n                 klass_info[\"select_fields\"] = select_fields\n-                next = requested.get(related_field.related_query_name(), {})\n+                next = requested.get(related_field_name, {})\n                 next_klass_infos = self.get_related_selections(\n                     select,\n                     related_select_mask,\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b3f130c0b44e..a7bc0610c81b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -791,46 +791,44 @@ def _get_defer_select_mask(self, opts, mask, select_mask=None):\n         if select_mask is None:\n             select_mask = {}\n         select_mask[opts.pk] = {}\n-        # All concrete fields that are not part of the defer mask must be\n-        # loaded. If a relational field is encountered it gets added to the\n-        # mask for it be considered if `select_related` and the cycle continues\n-        # by recursively calling this function.\n-        for field in opts.concrete_fields:\n+        # All concrete fields and related objects that are not part of the\n+        # defer mask must be included. If a relational field is encountered it\n+        # gets added to the mask for it be considered if `select_related` and\n+        # the cycle continues by recursively calling this function.\n+        for field in opts.concrete_fields + opts.related_objects:\n             field_mask = mask.pop(field.name, None)\n-            field_att_mask = mask.pop(field.attname, None)\n+            field_att_mask = None\n+            if field_attname := getattr(field, \"attname\", None):\n+                field_att_mask = mask.pop(field_attname, None)\n             if field_mask is None and field_att_mask is None:\n                 select_mask.setdefault(field, {})\n             elif field_mask:\n                 if not field.is_relation:\n                     raise FieldError(next(iter(field_mask)))\n+                # Virtual fields such as many-to-many and generic foreign keys\n+                # cannot be effectively deferred. Historically, they were\n+                # allowed to be passed to QuerySet.defer(). Ignore such field\n+                # references until a layer of validation at mask alteration\n+                # time is eventually implemented.\n+                if field.many_to_many:\n+                    continue\n                 field_select_mask = select_mask.setdefault(field, {})\n-                related_model = field.remote_field.model._meta.concrete_model\n+                related_model = field.related_model._meta.concrete_model\n                 self._get_defer_select_mask(\n                     related_model._meta, field_mask, field_select_mask\n                 )\n-        # Remaining defer entries must be references to reverse relationships.\n-        # The following code is expected to raise FieldError if it encounters\n-        # a malformed defer entry.\n+        # Remaining defer entries must be references to filtered relations\n+        # otherwise they are surfaced as missing field errors.\n         for field_name, field_mask in mask.items():\n             if filtered_relation := self._filtered_relations.get(field_name):\n                 relation = opts.get_field(filtered_relation.relation_name)\n                 field_select_mask = select_mask.setdefault((field_name, relation), {})\n-                field = relation.field\n+                related_model = relation.related_model._meta.concrete_model\n+                self._get_defer_select_mask(\n+                    related_model._meta, field_mask, field_select_mask\n+                )\n             else:\n-                reverse_rel = opts.get_field(field_name)\n-                # While virtual fields such as many-to-many and generic foreign\n-                # keys cannot be effectively deferred we've historically\n-                # allowed them to be passed to QuerySet.defer(). Ignore such\n-                # field references until a layer of validation at mask\n-                # alteration time will be implemented eventually.\n-                if not hasattr(reverse_rel, \"field\"):\n-                    continue\n-                field = reverse_rel.field\n-                field_select_mask = select_mask.setdefault(field, {})\n-            related_model = field.model._meta.concrete_model\n-            self._get_defer_select_mask(\n-                related_model._meta, field_mask, field_select_mask\n-            )\n+                opts.get_field(field_name)\n         return select_mask\n \n     def _get_only_select_mask(self, opts, mask, select_mask=None):\n@@ -840,13 +838,7 @@ def _get_only_select_mask(self, opts, mask, select_mask=None):\n         # Only include fields mentioned in the mask.\n         for field_name, field_mask in mask.items():\n             field = opts.get_field(field_name)\n-            # Retrieve the actual field associated with reverse relationships\n-            # as that's what is expected in the select mask.\n-            if field in opts.related_objects:\n-                field_key = field.field\n-            else:\n-                field_key = field\n-            field_select_mask = select_mask.setdefault(field_key, {})\n+            field_select_mask = select_mask.setdefault(field, {})\n             if field_mask:\n                 if not field.is_relation:\n                     raise FieldError(next(iter(field_mask)))\n", "test_patch": "diff --git a/tests/defer_regress/models.py b/tests/defer_regress/models.py\nindex dd492993b739..38ba4a622f6c 100644\n--- a/tests/defer_regress/models.py\n+++ b/tests/defer_regress/models.py\n@@ -10,6 +10,12 @@ class Item(models.Model):\n     text = models.TextField(default=\"xyzzy\")\n     value = models.IntegerField()\n     other_value = models.IntegerField(default=0)\n+    source = models.OneToOneField(\n+        \"self\",\n+        related_name=\"destination\",\n+        on_delete=models.CASCADE,\n+        null=True,\n+    )\n \n \n class RelatedItem(models.Model):\ndiff --git a/tests/defer_regress/tests.py b/tests/defer_regress/tests.py\nindex 10100e348db9..1209325f2195 100644\n--- a/tests/defer_regress/tests.py\n+++ b/tests/defer_regress/tests.py\n@@ -309,6 +309,27 @@ def test_only_reverse_many_to_many_ignored(self):\n         with self.assertNumQueries(1):\n             self.assertEqual(Item.objects.only(\"request\").get(), item)\n \n+    def test_self_referential_one_to_one(self):\n+        first = Item.objects.create(name=\"first\", value=1)\n+        second = Item.objects.create(name=\"second\", value=2, source=first)\n+        with self.assertNumQueries(1):\n+            deferred_first, deferred_second = (\n+                Item.objects.select_related(\"source\", \"destination\")\n+                .only(\"name\", \"source__name\", \"destination__value\")\n+                .order_by(\"pk\")\n+            )\n+        with self.assertNumQueries(0):\n+            self.assertEqual(deferred_first.name, first.name)\n+            self.assertEqual(deferred_second.name, second.name)\n+            self.assertEqual(deferred_second.source.name, first.name)\n+            self.assertEqual(deferred_first.destination.value, second.value)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(deferred_first.value, first.value)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(deferred_second.source.value, first.value)\n+        with self.assertNumQueries(1):\n+            self.assertEqual(deferred_first.destination.name, second.name)\n+\n \n class DeferDeletionSignalsTests(TestCase):\n     senders = [Item, Proxy]\n", "problem_statement": "Issue with OneToOneField and recursive relationships in select_related() and only().\nDescription\n\t \nIn Django a 4.2 project, if you have a model with a recursive relationship OneToOneField like this:\nclass Example(models.Model):\n\tname = models.CharField(max_length=32)\n\tsource = models.OneToOneField(\n\t\t'self', related_name='destination', on_delete=models.CASCADE\n\t)\nAnd then query this model using:\nExample.objects.select_related(\n\t\"source\",\n\t\"destination\",\n).only(\n\t\"name\",\n\t\"source__name\",\n\t\"destination__name\",\n).all()\nIt throws the following error:\ndjango.core.exceptions.FieldError: Field Example.source cannot be both deferred and traversed using select_related at the same time.\nExpected behavior:\nThe queryset should apply the select_related() and only() without an exception occurring as the only() is specifying sub fields of the fields in the select_related(). Or at least this is how it used to behave.\nInterestingly, if you change the queryset to the following, it works without any issues:\nExample.objects.select_related(\"source\").only(\"name\", \"source__name\").all()\nAnd vice versa also works:\nExample.objects.select_related(\"destination\").only(\"name\", \"destination__name\").all()\nEffected versions:\nThis error occurs in version 4.2+ of Django.\nThis worked as expected in all versions of Django 4.1. \nAs far as I can tell, this is a regression as a brief search doesn't indicate this functionality was explicitly changed at any point. I have not tested whether this is only an issue with recursive relationships or a general issues with reverse relationships.\n", "hints_text": [["Likely related to #21204 (b3db6c8dcb5145f7d45eff517bcd96460475c879) which was merged in 4.2.", 1712335718.0], ["tests/defer_regress/models.py diff --git a/tests/defer_regress/models.py b/tests/defer_regress/models.py index dd492993b7..38ba4a622f 100644 a b class Item(models.Model): 1010 text = models.TextField(default=\"xyzzy\") 1111 value = models.IntegerField() 1212 other_value = models.IntegerField(default=0) 13 source = models.OneToOneField( 14 \"self\", 15 related_name=\"destination\", 16 on_delete=models.CASCADE, 17 null=True, 18 ) 1319 1420 1521class RelatedItem(models.Model): tests/defer_regress/tests.py diff --git a/tests/defer_regress/tests.py b/tests/defer_regress/tests.py index 10100e348d..98473e0c4f 100644 a b def test_only_reverse_many_to_many_ignored(self): 309309 with self.assertNumQueries(1): 310310 self.assertEqual(Item.objects.only(\"request\").get(), item) 311311 312 def test_self_referential(self): 313 first = Item.objects.create(name=\"first\", value=1) 314 second = Item.objects.create(name=\"second\", value=2, source=first) 315 with self.assertNumQueries(1): 316 deferred_first, deferred_second = ( 317 Item.objects.select_related(\"source\", \"destination\") 318 .only(\"name\", \"source__name\", \"destination__value\") 319 .order_by(\"pk\") 320 ) 321 with self.assertNumQueries(0): 322 self.assertEqual(deferred_first.name, first.name) 323 self.assertEqual(deferred_second.name, second.name) 324 self.assertEqual(deferred_second.source.name, first.name) 325 self.assertEqual(deferred_first.destination.value, second.value) 326 312327 313328class DeferDeletionSignalsTests(TestCase): 314329 senders = [Item, Proxy]", 1712348850.0], ["#34612 could have fixed it but it took a different approach.", 1712350093.0]], "created_at": "2024-04-06T03:23:34Z"}
{"repo": "django/django", "pull_number": 18050, "instance_id": "django__django-18050", "issue_numbers": ["35354"], "base_commit": "4d2ef9bb826db76acb5ed7609a9162de9b651921", "patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 3af080599ab1..bb6a6bfb3ce7 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -50,21 +50,13 @@ def __init__(self, scope, body_file):\n         self._post_parse_error = False\n         self._read_started = False\n         self.resolver_match = None\n+        self.path = scope[\"path\"]\n         self.script_name = get_script_prefix(scope)\n         if self.script_name:\n             # TODO: Better is-prefix checking, slash handling?\n             self.path_info = scope[\"path\"].removeprefix(self.script_name)\n         else:\n             self.path_info = scope[\"path\"]\n-        # The Django path is different from ASGI scope path args, it should\n-        # combine with script name.\n-        if self.script_name:\n-            self.path = \"%s/%s\" % (\n-                self.script_name.rstrip(\"/\"),\n-                self.path_info.replace(\"/\", \"\", 1),\n-            )\n-        else:\n-            self.path = scope[\"path\"]\n         # HTTP basics.\n         self.method = self.scope[\"method\"].upper()\n         # Ensure query string is encoded correctly.\ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex fafcd527c91c..fdd44a887d0b 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -1667,7 +1667,7 @@ the server-provided value of ``SCRIPT_NAME``, which may be a rewritten version\n of the preferred value or not supplied at all. It is also used by\n :func:`django.setup()` to set the URL resolver script prefix outside of the\n request/response cycle (e.g. in management commands and standalone scripts) to\n-generate correct URLs when ``SCRIPT_NAME`` is not ``/``.\n+generate correct URLs when ``FORCE_SCRIPT_NAME`` is provided.\n \n .. setting:: FORM_RENDERER\n \n", "test_patch": "diff --git a/tests/handlers/tests.py b/tests/handlers/tests.py\nindex 959e4737d251..ffa362abdd76 100644\n--- a/tests/handlers/tests.py\n+++ b/tests/handlers/tests.py\n@@ -335,11 +335,13 @@ def test_root_path(self):\n         self.assertEqual(request.script_name, \"/root\")\n         self.assertEqual(request.path_info, \"/somepath/\")\n \n-    @override_settings(FORCE_SCRIPT_NAME=\"/FORCED_PREFIX/\")\n+    @override_settings(FORCE_SCRIPT_NAME=\"/FORCED_PREFIX\")\n     def test_force_script_name(self):\n         async_request_factory = AsyncRequestFactory()\n-        request = async_request_factory.request(**{\"path\": \"/somepath/\"})\n+        request = async_request_factory.request(**{\"path\": \"/FORCED_PREFIX/somepath/\"})\n         self.assertEqual(request.path, \"/FORCED_PREFIX/somepath/\")\n+        self.assertEqual(request.script_name, \"/FORCED_PREFIX\")\n+        self.assertEqual(request.path_info, \"/somepath/\")\n \n     async def test_sync_streaming(self):\n         response = await self.async_client.get(\"/streaming/\")\n", "problem_statement": "Simplify ASGIRequest path handling.\nDescription\n\t\t\n(last modified by Carlton Gibson)\t\t\nFollowing the ASGI HTTP Connection Scope docs[0], the provided path is already the correct value that Django requires. \nIn combination with root_path, from which script_name is derived, the path_info variable is set. \nIt's then redundant to re-calculate path from script_name and path_info. \nSee also, a clarifying discussion on the ASGIref repo[1]. \n[0]: \u200bhttps://asgi.readthedocs.io/en/latest/specs/www.html#http-connection-scope\n[1]: \u200bhttps://github.com/django/asgiref/issues/424\n", "hints_text": [["\u200bPR", 1712287565.0]], "created_at": "2024-04-05T08:25:37Z"}
{"repo": "django/django", "pull_number": 18045, "instance_id": "django__django-18045", "issue_numbers": ["35339"], "base_commit": "ec8552417df51df8482df61b8ad78a7002634011", "patch": "diff --git a/django/contrib/postgres/aggregates/mixins.py b/django/contrib/postgres/aggregates/mixins.py\nindex 68f24a5ce3a3..d6ff535158db 100644\n--- a/django/contrib/postgres/aggregates/mixins.py\n+++ b/django/contrib/postgres/aggregates/mixins.py\n@@ -1,3 +1,4 @@\n+from django.core.exceptions import FullResultSet\n from django.db.models.expressions import OrderByList\n \n \n@@ -17,19 +18,30 @@ def resolve_expression(self, *args, **kwargs):\n         return super().resolve_expression(*args, **kwargs)\n \n     def get_source_expressions(self):\n-        if self.order_by is not None:\n-            return super().get_source_expressions() + [self.order_by]\n-        return super().get_source_expressions()\n+        return super().get_source_expressions() + [self.order_by]\n \n     def set_source_expressions(self, exprs):\n-        if isinstance(exprs[-1], OrderByList):\n-            *exprs, self.order_by = exprs\n+        *exprs, self.order_by = exprs\n         return super().set_source_expressions(exprs)\n \n     def as_sql(self, compiler, connection):\n-        if self.order_by is not None:\n-            order_by_sql, order_by_params = compiler.compile(self.order_by)\n-        else:\n-            order_by_sql, order_by_params = \"\", ()\n-        sql, sql_params = super().as_sql(compiler, connection, ordering=order_by_sql)\n-        return sql, (*sql_params, *order_by_params)\n+        *source_exprs, filtering_expr, ordering_expr = self.get_source_expressions()\n+\n+        order_by_sql = \"\"\n+        order_by_params = []\n+        if ordering_expr is not None:\n+            order_by_sql, order_by_params = compiler.compile(ordering_expr)\n+\n+        filter_params = []\n+        if filtering_expr is not None:\n+            try:\n+                _, filter_params = compiler.compile(filtering_expr)\n+            except FullResultSet:\n+                pass\n+\n+        source_params = []\n+        for source_expr in source_exprs:\n+            source_params += compiler.compile(source_expr)[1]\n+\n+        sql, _ = super().as_sql(compiler, connection, ordering=order_by_sql)\n+        return sql, (*source_params, *order_by_params, *filter_params)\ndiff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 0cbffacd1b97..bf94decab7a8 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -50,12 +50,10 @@ def get_source_fields(self):\n \n     def get_source_expressions(self):\n         source_expressions = super().get_source_expressions()\n-        if self.filter:\n-            return source_expressions + [self.filter]\n-        return source_expressions\n+        return source_expressions + [self.filter]\n \n     def set_source_expressions(self, exprs):\n-        self.filter = self.filter and exprs.pop()\n+        *exprs, self.filter = exprs\n         return super().set_source_expressions(exprs)\n \n     def resolve_expression(\n@@ -63,8 +61,10 @@ def resolve_expression(\n     ):\n         # Aggregates are not allowed in UPDATE queries, so ignore for_save\n         c = super().resolve_expression(query, allow_joins, reuse, summarize)\n-        c.filter = c.filter and c.filter.resolve_expression(\n-            query, allow_joins, reuse, summarize\n+        c.filter = (\n+            c.filter.resolve_expression(query, allow_joins, reuse, summarize)\n+            if c.filter\n+            else None\n         )\n         if summarize:\n             # Summarized aggregates cannot refer to summarized aggregates.\n@@ -104,7 +104,9 @@ def resolve_expression(\n \n     @property\n     def default_alias(self):\n-        expressions = self.get_source_expressions()\n+        expressions = [\n+            expr for expr in self.get_source_expressions() if expr is not None\n+        ]\n         if len(expressions) == 1 and hasattr(expressions[0], \"name\"):\n             return \"%s__%s\" % (expressions[0].name, self.name.lower())\n         raise TypeError(\"Complex expressions require an alias\")\n", "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 4408535228fd..075e70710228 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1291,7 +1291,7 @@ class MyMax(Max):\n \n             def as_sql(self, compiler, connection):\n                 copy = self.copy()\n-                copy.set_source_expressions(copy.get_source_expressions()[0:1])\n+                copy.set_source_expressions(copy.get_source_expressions()[0:1] + [None])\n                 return super(MyMax, copy).as_sql(compiler, connection)\n \n         with self.assertRaisesMessage(TypeError, \"Complex aggregates require an alias\"):\ndiff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py\nindex 386c55da2550..7e1e16d0c0db 100644\n--- a/tests/postgres_tests/test_aggregates.py\n+++ b/tests/postgres_tests/test_aggregates.py\n@@ -12,7 +12,7 @@\n     Window,\n )\n from django.db.models.fields.json import KeyTextTransform, KeyTransform\n-from django.db.models.functions import Cast, Concat, Substr\n+from django.db.models.functions import Cast, Concat, LPad, Substr\n from django.test import skipUnlessDBFeature\n from django.test.utils import Approximate\n from django.utils import timezone\n@@ -238,6 +238,16 @@ def test_array_agg_jsonfield_ordering(self):\n         )\n         self.assertEqual(values, {\"arrayagg\": [\"en\", \"pl\"]})\n \n+    def test_array_agg_filter_and_ordering_params(self):\n+        values = AggregateTestModel.objects.aggregate(\n+            arrayagg=ArrayAgg(\n+                \"char_field\",\n+                filter=Q(json_field__has_key=\"lang\"),\n+                ordering=LPad(Cast(\"integer_field\", CharField()), 2, Value(\"0\")),\n+            )\n+        )\n+        self.assertEqual(values, {\"arrayagg\": [\"Foo2\", \"Foo4\"]})\n+\n     def test_array_agg_filter(self):\n         values = AggregateTestModel.objects.aggregate(\n             arrayagg=ArrayAgg(\"integer_field\", filter=Q(integer_field__gt=0)),\n", "problem_statement": "Ordering and filtering a Postgres ArrayAgg with parameters inverts SQL param order\nDescription\n\t \nWhen trying to build an ArrayAgg annotation that has a filter with parameters and a ordering with parameters, the SQL that is built will invert the parameters, putting the filter parameters before the ordering parameters. I was not able to find an existing ticket for this issue. \nI have verified this against the current dev branch as well as version 3.2.\nI was able to reproduce this in a test in the test_aggregates.py file.\n\tdef test_array_agg_filter_and_ordering_params(self):\n\t\tvalues = AggregateTestModel.objects.aggregate(\n\t\t\tarrayagg=ArrayAgg(\n\t\t\t\t\"char_field\",\n\t\t\t\tfilter=Q(json_field__has_key=\"lang\"),\n\t\t\t\tordering=LPad(Cast(\"integer_field\", CharField()), 2, Value(\"0\")),\n\t\t\t)\n\t\t)\n\t\tself.assertEqual(values, {\"arrayagg\": [\"Foo2\", \"Foo4\"]})\nThe resulting error is something like\nTraceback (most recent call last):\n File \"/Users/camuthig/projects/oss/django/django/db/backends/utils.py\", line 105, in _execute\n\treturn self.cursor.execute(sql, params)\npsycopg2.errors.UndefinedFunction: function lpad(character varying, integer, integer) does not exist\nLINE 1: ...s_tests_aggregatetestmodel\".\"char_field\" ORDER BY LPAD((\"pos...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nHINT: No function matches the given name and argument types. You might need to add explicit type casts.\nThe issue is that the result of the OrderableAggMixin.as_sql function is \nSQL: \nARRAY_AGG(\"postgres_tests_aggregatetestmodel\".\"char_field\" ORDER BY LPAD((\"postgres_tests_aggregatetestmodel\".\"integer_field\")::varchar, %s, %s)) FILTER (WHERE \"postgres_tests_aggregatetestmodel\".\"json_field\" ? %s)\nParameters\n[ \"lang\", 2, \"0\"]\nSo we are trying to use \"lang\" and 2 as the values for the ordering function, and \"0\" as the parameter for the filtering function. This is made a bit more confusing if the expression you are aggregating also has a parameter, because that should be before the ordering parameters. It should be\nExpression parameters\nOrdering parameters\nFiltering parameters\nThis happens because both the expression and filtering parameters come from the standard Aggregate parent class, and are then put in front of the ordering parameters in the Postgres-specific orderable mixin.\nI have been able to resolve this issue locally by altering the OrderableAggMixin.as_sql function to retrieve the parameters from the parent and then split them manually. \nclass OrderableAggMixin:\n\t# ... other functions\n\tdef as_sql(self, compiler, connection):\n\t\tif self.order_by is not None:\n\t\t\torder_by_sql, order_by_params = compiler.compile(self.order_by)\n\t\telse:\n\t\t\torder_by_sql, order_by_params = \"\", ()\n\t\tsql, expression_params = super().as_sql(compiler, connection, ordering=order_by_sql)\n\t\tfilter_params = ()\n\t\tif self.filter:\n\t\t\ttry:\n\t\t\t\t_, filter_params = self.filter.as_sql(compiler, connection)\n\t\t\t\texpression_params = expression_params[:-len(filter_params)]\n\t\t\texcept FullResultSet:\n\t\t\t\tpass\n\t\treturn sql, (*expression_params, *order_by_params, *filter_params)\nThis solution technically works, but it feels a bit clunky, so I am open to suggestions on how to improve it. I can also create a pull request with the change if you would like to see it, though my changes are all captured here already.\n", "hints_text": [["Hello Chris, thank you for your detailed report. I can confirm that the provided test fails in current main as shown below. Adding Simon and Mariusz as cc to see if they can provide advice on the tests/postgres_tests/test_aggregates.py diff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py index 386c55da25..5ab27752d1 100644 a b from django.db.models import ( 1212 Window, 1313) 1414from django.db.models.fields.json import KeyTextTransform, KeyTransform 15 from django.db.models.functions import Cast, Concat, Substr 15from django.db.models.functions import Cast, Concat, LPad, Substr 1616from django.test import skipUnlessDBFeature 1717from django.test.utils import Approximate 1818from django.utils import timezone \u2026 \u2026 class TestGeneralAggregate(PostgreSQLTestCase): 188188 ) 189189 self.assertEqual(values, {\"arrayagg\": expected_output}) 190190 191 def test_array_agg_filter_and_ordering_params(self): 192 values = AggregateTestModel.objects.aggregate( 193 arrayagg=ArrayAgg( 194 \"char_field\", 195 filter=Q(json_field__has_key=\"lang\"), 196 ordering=LPad(Cast(\"integer_field\", CharField()), 2, Value(\"0\")), 197 ) 198 ) 199 self.assertEqual(values, {\"arrayagg\": [\"Foo2\", \"Foo4\"]}) 200 191201 def test_array_agg_integerfield(self): 192202 values = AggregateTestModel.objects.aggregate( 193203 arrayagg=ArrayAgg(\"integer_field\") Full trace with --debug-sql: ====================================================================== ERROR: test_array_agg_filter_and_ordering_params (postgres_tests.test_aggregates.TestGeneralAggregate.test_array_agg_filter_and_ordering_params) ---------------------------------------------------------------------- Traceback (most recent call last): File \"/home/nessita/fellowship/django/django/db/backends/utils.py\", line 105, in _execute return self.cursor.execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/nessita/.virtualenvs/djangodev/lib/python3.11/site-packages/psycopg/cursor.py\", line 732, in execute raise ex.with_traceback(None) psycopg.errors.UndefinedFunction: function lpad(character varying, unknown, integer) does not exist LINE 1: ...s_tests_aggregatetestmodel\".\"char_field\" ORDER BY LPAD((\"pos... ^ HINT: No function matches the given name and argument types. You might need to add explicit type casts. The above exception was the direct cause of the following exception: Traceback (most recent call last): ... File \"/home/nessita/.virtualenvs/djangodev/lib/python3.11/site-packages/psycopg/cursor.py\", line 732, in execute raise ex.with_traceback(None) django.db.utils.ProgrammingError: function lpad(character varying, unknown, integer) does not exist LINE 1: ...s_tests_aggregatetestmodel\".\"char_field\" ORDER BY LPAD((\"pos... ^ HINT: No function matches the given name and argument types. You might need to add explicit type casts. ---------------------------------------------------------------------- (0.000) SELECT ARRAY_AGG(\"postgres_tests_aggregatetestmodel\".\"char_field\" ORDER BY LPAD((\"postgres_tests_aggregatetestmodel\".\"integer_field\")::varchar, 'lang', 2)) FILTER ( WHERE \"postgres_tests_aggregatetestmodel\".\"json_field\" ? '0') AS \"arrayagg\" FROM \"postgres_tests_aggregatetestmodel\"; args=('lang', Int4(2), '0'); ALIAS=DEFAULT", 1711712569.0], ["Thank you for the detailed report Chris and for the regression test Natalia this is very useful! Since this a long standing issue and we thus don't have to deal with a backport I would suggest we bite the bullet and refactor things up to have OrderableAggMixin merged in Aggregate and have a flag similar to allow_distinct. The crux of the issue here is that we try be clever and have the get_source_expressions / set_source_expressions signature change depending on whether or not a filter and and order_by are assigned (the len of expressions will change) so we can satisfy list[Expression] but with a variadic length. We tried doing that for a while with Window but it became clear that using None as placeholders for unspecified expressions was much easier to reason about. Embracing this approach made sure pretty much everything not expects get_expressions to be list[Expression | None] so it's a safe path to take now and doing so would avoids the conditional shenanigans that are causing out of order due to expressions.pop and mixin in types. Another big plus to having all the logic lives in Aggregate is that it makes implementing things like STRING_AGG (AKA GROUP_CONCAT) and \u200bother expressions that gain support for ordering overnight much easier and tested in a generic way. If that's something you're interesting in working on Chris I'd be happy to provide you reviewing support.", 1711827233.0], ["I think I see what you are going for, Simon. I'll give that a go and send up a pull request once I have something to share.", 1711965209.0], ["Sounds good! I suggest you start by making both Aggregate and OrderableAggMixin unconditionally return None in their source_expressions getters and setters when they respectively don't have any filter and ordering. This should address the immediate issue reported in this ticket and from there, if you're feeling confident, merging OrderableAggMixin and dealing with its deprecation could be tackled in a follow up ticket.", 1711979504.0]], "created_at": "2024-04-03T22:50:57Z"}
{"repo": "django/django", "pull_number": 18038, "instance_id": "django__django-18038", "issue_numbers": ["35347"], "base_commit": "8665cf03d79c4b6222514c5943ccf3863a19cf08", "patch": "diff --git a/docs/intro/tutorial02.txt b/docs/intro/tutorial02.txt\nindex d558a3eb1dc1..3cda0d38d6bc 100644\n--- a/docs/intro/tutorial02.txt\n+++ b/docs/intro/tutorial02.txt\n@@ -515,8 +515,8 @@ Save these changes and start a new Python interactive shell by running\n     # Give the Question a couple of Choices. The create call constructs a new\n     # Choice object, does the INSERT statement, adds the choice to the set\n     # of available choices and returns the new Choice object. Django creates\n-    # a set to hold the \"other side\" of a ForeignKey relation\n-    # (e.g. a question's choice) which can be accessed via the API.\n+    # a set (defined as \"choice_set\") to hold the \"other side\" of a ForeignKey\n+    # relation (e.g. a question's choice) which can be accessed via the API.\n     >>> q = Question.objects.get(pk=1)\n \n     # Display any choices from the related object set -- none so far.\n", "test_patch": "", "problem_statement": "Clarify choice_set attribute in tutorial 2\nDescription\n\t \n[Tutorial 2](\u200bhttps://docs.djangoproject.com/en/5.0/intro/tutorial02/) introduces usage of the function choice_set, generated from the foreign key to Question in the Choice object. However, the tutorial does not specify where this function comes from or why it is created. \nAdding a short blurb in the comments of the code block will clarify this and explain how choice_set is created.\n", "hints_text": [["The clarification is already present in the docs: Django creates a set to hold the \"other side\" of a ForeignKey relation (e.g. a question's choice) which can be accessed via the API. which says almost the same of what's proposed in the PR, but it's in the same paragraph where the next steps are explained as a meaningful unit. I'm not sure this should be changed, would you have more details on why the above may not be sufficient?", 1711993419.0]], "created_at": "2024-04-01T18:29:41Z"}
{"repo": "django/django", "pull_number": 18037, "instance_id": "django__django-18037", "issue_numbers": ["18119"], "base_commit": "15fff62d5d8f28b6b61d63341535c9aafc64c865", "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 57940a59dab5..b1c5c053b846 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -66,22 +66,16 @@ def __eq__(self, other):\n \n \n @deconstructible\n-class URLValidator(RegexValidator):\n+class DomainNameValidator(RegexValidator):\n+    message = _(\"Enter a valid domain name.\")\n     ul = \"\\u00a1-\\uffff\"  # Unicode letters range (must not be a raw string).\n-\n-    # IP patterns\n-    ipv4_re = (\n-        r\"(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)\"\n-        r\"(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}\"\n-    )\n-    ipv6_re = r\"\\[[0-9a-f:.]+\\]\"  # (simple regex, validated later)\n-\n-    # Host patterns\n+    # Host patterns.\n     hostname_re = (\n         r\"[a-z\" + ul + r\"0-9](?:[a-z\" + ul + r\"0-9-]{0,61}[a-z\" + ul + r\"0-9])?\"\n     )\n-    # Max length for domain name labels is 63 characters per RFC 1034 sec. 3.1\n+    # Max length for domain name labels is 63 characters per RFC 1034 sec. 3.1.\n     domain_re = r\"(?:\\.(?!-)[a-z\" + ul + r\"0-9-]{1,63}(?<!-))*\"\n+    # Top-level domain.\n     tld_re = (\n         r\"\\.\"  # dot\n         r\"(?!-)\"  # can't start with a dash\n@@ -90,6 +84,60 @@ class URLValidator(RegexValidator):\n         r\"(?<!-)\"  # can't end with a dash\n         r\"\\.?\"  # may have a trailing dot\n     )\n+    ascii_only_hostname_re = r\"[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\"\n+    ascii_only_domain_re = r\"(?:\\.(?!-)[a-zA-Z0-9-]{1,63}(?<!-))*\"\n+    ascii_only_tld_re = (\n+        r\"\\.\"  # dot\n+        r\"(?!-)\"  # can't start with a dash\n+        r\"(?:[a-zA-Z0-9-]{2,63})\"  # domain label\n+        r\"(?<!-)\"  # can't end with a dash\n+        r\"\\.?\"  # may have a trailing dot\n+    )\n+\n+    max_length = 255\n+\n+    def __init__(self, **kwargs):\n+        self.accept_idna = kwargs.pop(\"accept_idna\", True)\n+\n+        if self.accept_idna:\n+            self.regex = _lazy_re_compile(\n+                self.hostname_re + self.domain_re + self.tld_re, re.IGNORECASE\n+            )\n+        else:\n+            self.regex = _lazy_re_compile(\n+                self.ascii_only_hostname_re\n+                + self.ascii_only_domain_re\n+                + self.ascii_only_tld_re,\n+                re.IGNORECASE,\n+            )\n+        super().__init__(**kwargs)\n+\n+    def __call__(self, value):\n+        if not isinstance(value, str) or len(value) > self.max_length:\n+            raise ValidationError(self.message, code=self.code, params={\"value\": value})\n+        if not self.accept_idna and not value.isascii():\n+            raise ValidationError(self.message, code=self.code, params={\"value\": value})\n+        super().__call__(value)\n+\n+\n+validate_domain_name = DomainNameValidator()\n+\n+\n+@deconstructible\n+class URLValidator(RegexValidator):\n+    ul = \"\\u00a1-\\uffff\"  # Unicode letters range (must not be a raw string).\n+\n+    # IP patterns\n+    ipv4_re = (\n+        r\"(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)\"\n+        r\"(?:\\.(?:0|25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|[1-9][0-9]?)){3}\"\n+    )\n+    ipv6_re = r\"\\[[0-9a-f:.]+\\]\"  # (simple regex, validated later)\n+\n+    hostname_re = DomainNameValidator.hostname_re\n+    domain_re = DomainNameValidator.domain_re\n+    tld_re = DomainNameValidator.tld_re\n+\n     host_re = \"(\" + hostname_re + domain_re + tld_re + \"|localhost)\"\n \n     regex = _lazy_re_compile(\ndiff --git a/docs/ref/validators.txt b/docs/ref/validators.txt\nindex fb69ec8d3348..3287d0560ee3 100644\n--- a/docs/ref/validators.txt\n+++ b/docs/ref/validators.txt\n@@ -159,6 +159,25 @@ to, or in lieu of custom ``field.clean()`` methods.\n         validation, so you'd need to add them to the ``allowlist`` as\n         necessary.\n \n+``DomainNameValidator``\n+-----------------------\n+\n+.. versionadded:: 5.1\n+\n+.. class:: DomainNameValidator(accept_idna=True, message=None, code=None)\n+\n+    A :class:`RegexValidator` subclass that ensures a value looks like a domain\n+    name. Values longer than 255 characters are always considered invalid. IP\n+    addresses are not accepted as valid domain names.\n+\n+    In addition to the optional arguments of its parent :class:`RegexValidator`\n+    class, ``DomainNameValidator`` accepts an extra optional attribute:\n+\n+    .. attribute:: accept_idna\n+\n+        Determines whether to accept internationalized domain names, that is,\n+        domain names that contain non-ASCII characters. Defaults to ``True``.\n+\n ``URLValidator``\n ----------------\n \n@@ -201,6 +220,15 @@ to, or in lieu of custom ``field.clean()`` methods.\n \n     An :class:`EmailValidator` instance without any customizations.\n \n+``validate_domain_name``\n+------------------------\n+\n+.. versionadded:: 5.1\n+\n+.. data:: validate_domain_name\n+\n+    A :class:`DomainNameValidator` instance without any customizations.\n+\n ``validate_slug``\n -----------------\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 2def385f9870..77c55ba53cf7 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -361,7 +361,10 @@ Utilities\n Validators\n ~~~~~~~~~~\n \n-* ...\n+* The new :class:`~django.core.validators.DomainNameValidator` validates domain\n+  names, including internationalized domain names. The new\n+  :func:`~django.core.validators.validate_domain_name` function returns an\n+  instance of :class:`~django.core.validators.DomainNameValidator`.\n \n .. _backwards-incompatible-5.1:\n \n", "test_patch": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 5376517a4a84..ba1db5ea46d3 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -9,6 +9,7 @@\n from django.core.validators import (\n     BaseValidator,\n     DecimalValidator,\n+    DomainNameValidator,\n     EmailValidator,\n     FileExtensionValidator,\n     MaxLengthValidator,\n@@ -21,6 +22,7 @@\n     URLValidator,\n     int_list_validator,\n     validate_comma_separated_integer_list,\n+    validate_domain_name,\n     validate_email,\n     validate_image_file_extension,\n     validate_integer,\n@@ -618,6 +620,38 @@\n     (ProhibitNullCharactersValidator(), \"\\x00something\", ValidationError),\n     (ProhibitNullCharactersValidator(), \"something\", None),\n     (ProhibitNullCharactersValidator(), None, None),\n+    (validate_domain_name, \"000000.org\", None),\n+    (validate_domain_name, \"python.org\", None),\n+    (validate_domain_name, \"python.co.uk\", None),\n+    (validate_domain_name, \"python.tk\", None),\n+    (validate_domain_name, \"domain.with.idn.tld.\u0909\u0926\u093e\u0939\u0930\u0923.\u092a\u0930\u0940\u0915\u094d\u0937\", None),\n+    (validate_domain_name, \"\u0131\u00e7\u011f\u00fc.com\", None),\n+    (validate_domain_name, \"xn--7ca6byfyc.com\", None),\n+    (validate_domain_name, \"hg.python.org\", None),\n+    (validate_domain_name, \"python.xyz\", None),\n+    (validate_domain_name, \"djangoproject.com\", None),\n+    (validate_domain_name, \"DJANGOPROJECT.COM\", None),\n+    (validate_domain_name, \"spam.eggs\", None),\n+    (validate_domain_name, \"python-python.com\", None),\n+    (validate_domain_name, \"python.name.uk\", None),\n+    (validate_domain_name, \"python.tips\", None),\n+    (validate_domain_name, \"http://\u4f8b\u5b50.\u6d4b\u8bd5\", None),\n+    (validate_domain_name, \"http://dashinpunytld.xn---c\", None),\n+    (validate_domain_name, \"python..org\", ValidationError),\n+    (validate_domain_name, \"python-.org\", ValidationError),\n+    (validate_domain_name, \"too-long-name.\" * 20 + \"com\", ValidationError),\n+    (validate_domain_name, \"stupid-name\u8bd5\", ValidationError),\n+    (validate_domain_name, \"255.0.0.0\", ValidationError),\n+    (validate_domain_name, \"fe80::1\", ValidationError),\n+    (validate_domain_name, \"1:2:3:4:5:6:7:8\", ValidationError),\n+    (DomainNameValidator(accept_idna=False), \"non-idna-domain-name-passes.com\", None),\n+    (\n+        DomainNameValidator(accept_idna=False),\n+        \"domain.with.idn.tld.\u0909\u0926\u093e\u0939\u0930\u0923.\u092a\u0930\u0940\u0915\u094d\u0937\",\n+        ValidationError,\n+    ),\n+    (DomainNameValidator(accept_idna=False), \"\u0131\u00e7\u011f\u00fc.com\", ValidationError),\n+    (DomainNameValidator(accept_idna=False), \"not-domain-name\", ValidationError),\n ]\n \n # Add valid and invalid URL tests.\n@@ -847,3 +881,25 @@ def test_prohibit_null_characters_validator_equality(self):\n             ProhibitNullCharactersValidator(message=\"message\", code=\"code1\"),\n             ProhibitNullCharactersValidator(message=\"message\", code=\"code2\"),\n         )\n+\n+    def test_domain_name_equality(self):\n+        self.assertEqual(\n+            DomainNameValidator(),\n+            DomainNameValidator(),\n+        )\n+        self.assertNotEqual(\n+            DomainNameValidator(),\n+            EmailValidator(),\n+        )\n+        self.assertNotEqual(\n+            DomainNameValidator(),\n+            DomainNameValidator(code=\"custom_code\"),\n+        )\n+        self.assertEqual(\n+            DomainNameValidator(message=\"custom error message\"),\n+            DomainNameValidator(message=\"custom error message\"),\n+        )\n+        self.assertNotEqual(\n+            DomainNameValidator(message=\"custom error message\"),\n+            DomainNameValidator(message=\"custom error message\", code=\"custom_code\"),\n+        )\n", "problem_statement": "add DomainNameValidator to validate Internet Domain Names\nDescription\n\t \nInternet Domain Names are very present throughout, e.g. in URLs and e-mail addresses.\nThis patch adds django.core.validators.DomainNameValidator to check Internet Domain Names.\nDomainNameValidator supports IDNA (utf) domain names, but it can reject them if optional accept_idna=False is passed to the constructor (defaults to accept).\nDomainNameValidator is implemented as follows:\nderives RegexValidator\nuses the same RegEx of URLValidator (with the additional constrain to accept only 127 labels / 255 chars, as per RFC)\nif plain validation fails, converts UTF -> ASCII with IDNA encoding and attempts to validate again (unless accept_idna=False)\nBased on this Validator, I will submit separate patches to add DomainNameField support for models.\n", "hints_text": [["I think it is a good idea to centralize domain name validation. I detected at least three points where we could use this validator (django/core/mail/message.py, django/core/validators.py (URLValidator), django/utils/html.py). For DRY reasons, the domain regex part should be shared with URLValidator. In __init__, just use self.accept_idna = kwargs.pop('accept_idna', True)", 1334295293.0], ["DomainNameValidator patch #2 - remove validator-own attributes before super()", 1334299450.0], ["In attachment:domainnamevalidator_2.txt\u200b : fix the constructor argument as per claudep suggestion return a specific error message based on IDNA being accepted or not", 1334299599.0], ["\u200bhttps://github.com/django/django/pull/3477", 1415280641.0], ["This is blocked on #20003. Patch will need to be updated after that change.", 1419434399.0], ["would be nice to have", 1457063867.0], ["Updated \u200bPR.", 1474923191.0]], "created_at": "2024-03-31T20:06:25Z"}
{"repo": "django/django", "pull_number": 18034, "instance_id": "django__django-18034", "issue_numbers": ["35344"], "base_commit": "425b26092f038accd2a5c5fc5a9bd3f82d4dd847", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex a9cddfd4b121..4fb830afb6d5 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -508,6 +508,7 @@ answer newbie questions, and generally made Django that much better:\n     Joe Topjian <http://joe.terrarum.net/geek/code/python/django/>\n     Johan C. St\u00f6ver <johan@nilling.nl>\n     Johann Queuniet <johann.queuniet@adh.naellia.eu>\n+    Johannes Westphal <jojo@w-hat.de>\n     john@calixto.net\n     John D'Agostino <john.dagostino@gmail.com>\n     John D'Ambrosio <dambrosioj@gmail.com>\ndiff --git a/django/db/models/fields/generated.py b/django/db/models/fields/generated.py\nindex 257feeeba269..5b6b188df077 100644\n--- a/django/db/models/fields/generated.py\n+++ b/django/db/models/fields/generated.py\n@@ -39,7 +39,7 @@ def cached_col(self):\n         return Col(self.model._meta.db_table, self, self.output_field)\n \n     def get_col(self, alias, output_field=None):\n-        if alias != self.model._meta.db_table and output_field is None:\n+        if alias != self.model._meta.db_table and output_field in (None, self):\n             output_field = self.output_field\n         return super().get_col(alias, output_field)\n \ndiff --git a/docs/releases/5.0.4.txt b/docs/releases/5.0.4.txt\nindex 6503f1ada34d..6872d5998af7 100644\n--- a/docs/releases/5.0.4.txt\n+++ b/docs/releases/5.0.4.txt\n@@ -21,3 +21,6 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a migration crash on PostgreSQL 15+\n   when adding a partial ``UniqueConstraint`` with ``nulls_distinct``\n   (:ticket:`35329`).\n+\n+* Fixed a crash in Django 5.0 when performing queries involving table aliases\n+  and lookups on a ``GeneratedField`` of the aliased table (:ticket:`35344`).\n", "test_patch": "diff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex a636e984fdbe..641ce591e479 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -123,7 +123,12 @@ class Square(Model):\n                 db_persist=True,\n             )\n \n-        col = Square._meta.get_field(\"area\").get_col(\"alias\")\n+        field = Square._meta.get_field(\"area\")\n+\n+        col = field.get_col(\"alias\")\n+        self.assertIsInstance(col.output_field, IntegerField)\n+\n+        col = field.get_col(\"alias\", field)\n         self.assertIsInstance(col.output_field, IntegerField)\n \n         class FloatSquare(Model):\n@@ -134,7 +139,12 @@ class FloatSquare(Model):\n                 output_field=FloatField(),\n             )\n \n-        col = FloatSquare._meta.get_field(\"area\").get_col(\"alias\")\n+        field = FloatSquare._meta.get_field(\"area\")\n+\n+        col = field.get_col(\"alias\")\n+        self.assertIsInstance(col.output_field, FloatField)\n+\n+        col = field.get_col(\"alias\", field)\n         self.assertIsInstance(col.output_field, FloatField)\n \n     @isolate_apps(\"model_fields\")\n", "problem_statement": "GeneratedField get_col output_field bug\nDescription\n\t \nRelated issue #34838.\nFor generated fields, get_col gets called with output_field=<instance of the generated field>. Consequently, if an alias is specified, the output_field of the generated Col is of type GeneratedField instead of the actual output_field of the GeneratedField, since the current code only handles the case where get_col's output_field parameter is None, but not when it is self.\nError\nFile \"django/contrib/postgres/fields/ranges.py\", line 253, in as_postgresql\n\tcast_internal_type = self.lhs.output_field.base_field.get_internal_type()\nAttributeError: 'GeneratedField' object has no attribute 'base_field'\nPatch\ndjango/db/models/fields/generated.py\ndiff --git a/django/db/models/fields/generated.py b/django/db/models/fields/generated.py\nindex 257feeeba2..5b6b188df0 100644\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n class GeneratedField(Field):\n\t\t\t \u00a0\n\t\t\t\n3939\u00a0 \u00a0 \u00a0 \u00a0 return Col(self.model._meta.db_table, self, self.output_field)\n4040\n4141\u00a0 \u00a0 def get_col(self, alias, output_field=None):\n42\u00a0\u00a0 \u00a0 \u00a0 \u00a0 if alias != self.model._meta.db_table and output_field is None:\n\u00a042\u00a0 \u00a0 \u00a0 \u00a0 if alias != self.model._meta.db_table and output_field in (None, self):\n4343\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 output_field = self.output_field\n4444\u00a0 \u00a0 \u00a0 \u00a0 return super().get_col(alias, output_field)\n", "hints_text": [["PR \u200bhttps://github.com/django/django/pull/18034.", 1711820208.0], ["Nice catch and thank you for submitting a PR including a regression test, this is brilliant! Pending a mention in the 5.0.4 release notes this LGTM!", 1711825673.0]], "created_at": "2024-03-30T22:30:58Z"}
{"repo": "django/django", "pull_number": 18028, "instance_id": "django__django-18028", "issue_numbers": ["35306"], "base_commit": "f1705c8780c0a7587654fc736542d55fe4a7f29b", "patch": "diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex 88ccf6106e83..34c835fb8265 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -1842,9 +1842,7 @@ standard :term:`language ID format <language code>`. For example, U.S. English\n is ``\"en-us\"``. See also the `list of language identifiers`_ and\n :doc:`/topics/i18n/index`.\n \n-:setting:`USE_I18N` must be active for this setting to have any effect.\n-\n-It serves two purposes:\n+It serves three purposes:\n \n * If the locale middleware isn't in use, it decides which translation is served\n   to all users.\n@@ -1852,6 +1850,11 @@ It serves two purposes:\n   user's preferred language can't be determined or is not supported by the\n   website. It also provides the fallback translation when a translation for a\n   given literal doesn't exist for the user's preferred language.\n+* If localization is explicitly disabled via the :tfilter:`unlocalize` filter\n+  or the :ttag:`{% localize off %}<localize>` tag, it provides fallback\n+  localization formats which will be applied instead. See\n+  :ref:`controlling localization in templates <topic-l10n-templates>` for\n+  details.\n \n See :ref:`how-django-discovers-language-preference` for more details.\n \ndiff --git a/docs/topics/i18n/formatting.txt b/docs/topics/i18n/formatting.txt\nindex 1010ce2e8480..e1b6213ca23c 100644\n--- a/docs/topics/i18n/formatting.txt\n+++ b/docs/topics/i18n/formatting.txt\n@@ -89,6 +89,9 @@ To activate or deactivate localization for a template block, use:\n         {{ value }}\n     {% endlocalize %}\n \n+When localization is disabled, the :ref:`localization settings <settings-l10n>`\n+formats are applied.\n+\n See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that will\n do the same job on a per-variable basis.\n \n@@ -133,8 +136,9 @@ To force localization of a single value, use :tfilter:`localize`. To\n control localization over a large section of a template, use the\n :ttag:`localize` template tag.\n \n-Returns a string representation for unlocalized numbers  (``int``, ``float``,\n-or ``Decimal``).\n+Returns a string representation for numbers  (``int``, ``float``, or\n+``Decimal``) with the :ref:`localization settings <settings-l10n>` formats\n+applied.\n \n .. _custom-format-files:\n \n", "test_patch": "", "problem_statement": "Improve documentation for the various date format settings\nDescription\n\t \nThe doc:\n\u200bhttps://docs.djangoproject.com/en/5.0/ref/settings/#language-code\nspecifically states:\n\"USE_I18N must be active for this setting to have any effect.\"\nThis is not true. If USE_I18N is False and a language can not be determined (e.g. the locale middleware is not active), the date template filter will use the value of LANGUAGE_CODE.\nI think the handling of date formatting is now very confusing, and the doc for DATE_FORMAT, DATETIME_FORMAT, etc is at best incomplete because it's very difficult to understand when (if ever) these settings are actually used now that the USE_L10N setting has been fully deprecated. \nI'm not raising this as a doc issue because I think this system is now somewhat broken. Personally I think that USE_L10N should be brought back; there needs to be a way to turn off localisation of dates (and numbers) separately to translations - they're not the same thing. \nI know I can force a particular locale to be used via LANGUAGE_CODE, but I specifically want my format to be used, and the existing DATE_FORMAT, etc settings seems like the right way to do that. I just need a way to force their use, which used to be simply setting USE_L10N = True.\n", "hints_text": [["I agree and also miss the USE_L10N setting. Removing it feels like a large tech company that believes they know better than you, and force various changes without asking you to opt in. Unlike linux where it's the same, unless you wish to opt in. Anyways if USE_L10N is never coming back, we need to deprecate it properly, its still lurking in the code base, grepping to see where its used, with Django 5.0.3 shows: utils/cache.py|340 col 17| if settings.USE_I18N: utils/cache.py|420 col 49| is_accept_language_redundant = settings.USE_I18N utils/translation/trans_null.py|3 col 12| # settings.USE_I18N = False can use this module rather than trans_real.py. utils/translation/reloader.py|13 col 17| if settings.USE_I18N: utils/translation/__init__.py|43 col 12| # settings.USE_I18N, as late as possible, so that modules can be imported utils/translation/__init__.py|54 col 5| USE_I18N will have no effect to which function is served upon request. If utils/translation/__init__.py|55 col 33| your tests rely on changing USE_I18N, you can delete all the functions utils/translation/__init__.py|66 col 21| if settings.USE_I18N: conf/global_settings.py|158 col 1| USE_I18N = True conf/project_template/project_name/settings.py-tpl|110 col 1| USE_I18N = True conf/urls/i18n.py|13 col 21| if not settings.USE_I18N:", 1710753048.0], ["Thank you for your comment Michael, though it seems that your may be mixing USE_L10N with USE_I18N?", 1710753466.0], ["Hello Richard, thank you for your report. I've been debugging your issue for a few days now. I think we may need to make some docs adjustments as you imply, but I do not think the code is broken. See as a references \u200bthis post in stackoverflow. Have you tried using the formats.py approach to solve your need?", 1710753591.0], ["Replying to Natalia Bidart: Thank you for your comment Michael, though it seems that your may be mixing USE_L10N with USE_I18N? Hi Natalia, oh apologies, thank you for clearing that up, cheers!", 1710755318.0], ["Replying to Natalia Bidart: Have you tried using the formats.py approach to solve your need? Hi Natalia - I've just tried this and it has worked - thanks! I guess you're right and this can be solved with doc updates. Personally I would still like the option to just turn this off, i.e. reinstate USE_L10N. You can turn translation off so why not allow localisation to be turned off too? I really don't understand the rationale for removing this setting in the first place. Best wishes.", 1710755537.0], ["(Adding Claude as cc.) Claude, do you have any pointers on how to make use of the DATE_FORMAT and related settings? Specifically, how to have them honored in templates. As an example, I tried using the date template tag, and the settings seem ignored, having the format from LANGUAGE_CODE taking precedence. I know this is mentioned in the docs: Note that the corresponding locale-dictated format has higher precedence and will be applied instead. But since LANGUAGE_CODE can not be unset (afaik), it seems unclear when the DATE_FORMAT and related settings are used (outside of the formats.py approach). Just for clarity's sake, I don't think there is a bug in Django, I think we could add some clarifications to the docs to be more explicit about this particular usage. (Another data point: even using {% localize off %} does not honor the settings values. This feels unexpected to me...)", 1710755917.0], ["Accepting for the documentation improvements pending feedback from Claude.", 1710762672.0], ["Similar report: #35142", 1710831952.0], ["Replying to Natalia Bidart: (Another data point: even using {% localize off %} does not honor the settings values. This feels unexpected to me...) Are you sure? This \u200bpassing test seems to show the contrary. Could you double-check?", 1711179684.0], ["The docs definitely need an update. Something like: The default formatting to use when localization is disabled, typically with the un/localize template tag/filter. (with a link to \u200bhttps://docs.djangoproject.com/en/stable/topics/i18n/formatting/#controlling-localization-in-templates, which should also states in return that the format used is the one from the settings). In normal circumstances, the \u200blocale-dictated format has higher precedence and will be applied instead.", 1711180371.0], ["Replying to Claude Paroz: Replying to Natalia Bidart: (Another data point: even using {% localize off %} does not honor the settings values. This feels unexpected to me...) Are you sure? This \u200bpassing test seems to show the contrary. Could you double-check? I am sure, but with a caveat :-) I have double checked and in my manual tests, I was explicitly passing the |date template filter. So, basically, if we add this case to your test (I renamed your original date to my_date for clarity): date_plus_tag_template = Template( \"{% load l10n %}Localized: {{ my_date|date }}. {% localize off %}Unlocalized: \" \"{{ my_date|date }}{% endlocalize %}.\" ) There is this test failure: AssertionError: 'Localized: 15. Dezember 2024. Unlocalized: 15. Dezember 2024.' != 'Localized: 15. Dezember 2024. Unlocalized: 15-12-2024.' Using my_date|date:'DATE_FORMAT' also makes the test fails. For example, a valid use case for explicitly wanting to pipe date to a given context provided date would be to truncate a datetime to date .", 1711354529.0], ["Ah yes, I missed that! It looks to me as a bug in itself, and maybe merits its own ticket. I transformed my commit as a \u200bWIP PR.", 1711457413.0], ["Replying to Claude Paroz: Ah yes, I missed that! It looks to me as a bug in itself, and maybe merits its own ticket. I transformed my commit as a \u200bWIP PR. I agree is a ticket on its own, I created and accepted #35333 providing two tests, one for date and one for time, using subTest. Would you fancy incorporating that in your PR?", 1711461129.0], ["\u200bPR", 1711683838.0], ["Richard, could you please take a look at the \u200bproposed PR to confirm if that helps in terms of documentation improvements?", 1712239788.0], ["The proposed change to the LANGUAGE_CODE setting, in context, reads: A string representing the language code for this installation. This should be in standard language ID format. For example, U.S. English is \"en-us\", the default format to use when localization is disabled with localize and unlocalize template filter or tag see controlling localization in templates. See also the list of language identifiers and /topics/i18n/index. That doesn't read well to me, and also doesn't really cover the situation. I think the first sentence needs to change to make it clear this is a fallback, e.g.: A string representing the fallback language code for this installation. The line \"USE_I18N must be active for this setting to have any effect.\" is not true and should be removed I think. Finally, a third entry could be added to the list of 'purposes', e.g. If localization is explicitly disabled via the localize and unlocalize template filters or tags. See controlling localization in templates. The proposed change to formatting.txt seems confusing and unnecessary to me.", 1712291062.0], ["Hey Richard, does this work for you \u200bPR.", 1712910053.0], ["That works for me - thanks Lufafa!", 1712911198.0], ["Adding the link from #35470 is required", 1718593227.0]], "created_at": "2024-03-28T10:45:39Z"}
{"repo": "django/django", "pull_number": 18027, "instance_id": "django__django-18027", "issue_numbers": ["35336"], "base_commit": "5f180216409d75290478c71ddb0ff8a68c91dc16", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 635793b1e32e..116c98f432ce 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -317,9 +317,9 @@ def _iter_column_sql(\n             if default_value is not None:\n                 column_default = \"DEFAULT \" + self._column_default_sql(field)\n                 if self.connection.features.requires_literal_defaults:\n-                    # Some databases can't take defaults as a parameter (Oracle).\n-                    # If this is the case, the individual schema backend should\n-                    # implement prepare_default().\n+                    # Some databases can't take defaults as a parameter\n+                    # (Oracle, SQLite). If this is the case, the individual\n+                    # schema backend should implement prepare_default().\n                     yield column_default % self.prepare_default(default_value)\n                 else:\n                     yield column_default\n@@ -333,7 +333,9 @@ def _iter_column_sql(\n         ):\n             null = True\n         if field.generated:\n-            yield self._column_generated_sql(field)\n+            generated_sql, generated_params = self._column_generated_sql(field)\n+            params.extend(generated_params)\n+            yield generated_sql\n         elif not null:\n             yield \"NOT NULL\"\n         elif not self.connection.features.implied_column_null:\n@@ -420,7 +422,7 @@ def db_default_sql(self, field):\n         compiler = query.get_compiler(connection=self.connection)\n         default_sql, params = compiler.compile(db_default)\n         if self.connection.features.requires_literal_defaults:\n-            # Some databases doesn't support parameterized defaults (Oracle,\n+            # Some databases don't support parameterized defaults (Oracle,\n             # SQLite). If this is the case, the individual schema backend\n             # should implement prepare_default().\n             default_sql %= tuple(self.prepare_default(p) for p in params)\n@@ -431,9 +433,10 @@ def _column_generated_sql(self, field):\n         \"\"\"Return the SQL to use in a GENERATED ALWAYS clause.\"\"\"\n         expression_sql, params = field.generated_sql(self.connection)\n         persistency_sql = \"STORED\" if field.db_persist else \"VIRTUAL\"\n-        if params:\n+        if self.connection.features.requires_literal_defaults:\n             expression_sql = expression_sql % tuple(self.quote_value(p) for p in params)\n-        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\"\n+            params = ()\n+        return f\"GENERATED ALWAYS AS ({expression_sql}) {persistency_sql}\", params\n \n     @staticmethod\n     def _effective_default(field):\n@@ -484,7 +487,7 @@ def create_model(self, model):\n         \"\"\"\n         sql, params = self.table_sql(model)\n         # Prevent using [] as params, in the case a literal '%' is used in the\n-        # definition.\n+        # definition on backends that don't support parametrized DDL.\n         self.execute(sql, params or None)\n \n         if self.connection.features.supports_comments:\n@@ -746,7 +749,9 @@ def add_field(self, model, field):\n             \"column\": self.quote_name(field.column),\n             \"definition\": definition,\n         }\n-        self.execute(sql, params)\n+        # Prevent using [] as params, in the case a literal '%' is used in the\n+        # definition on backends that don't support parametrized DDL.\n+        self.execute(sql, params or None)\n         # Drop the default if we need to\n         if (\n             field.db_default is NOT_PROVIDED\ndiff --git a/django/db/backends/oracle/schema.py b/django/db/backends/oracle/schema.py\nindex c8dd64650fcb..0d70522a2afa 100644\n--- a/django/db/backends/oracle/schema.py\n+++ b/django/db/backends/oracle/schema.py\n@@ -198,9 +198,7 @@ def _generate_temp_name(self, for_name):\n         return self.normalize_name(for_name + \"_\" + suffix)\n \n     def prepare_default(self, value):\n-        # Replace % with %% as %-formatting is applied in\n-        # FormatStylePlaceholderCursor._fix_for_params().\n-        return self.quote_value(value).replace(\"%\", \"%%\")\n+        return self.quote_value(value)\n \n     def _field_should_be_indexed(self, model, field):\n         create_index = super()._field_should_be_indexed(model, field)\ndiff --git a/docs/releases/5.0.4.txt b/docs/releases/5.0.4.txt\nindex 6872d5998af7..6b922b09c0b8 100644\n--- a/docs/releases/5.0.4.txt\n+++ b/docs/releases/5.0.4.txt\n@@ -24,3 +24,7 @@ Bugfixes\n \n * Fixed a crash in Django 5.0 when performing queries involving table aliases\n   and lookups on a ``GeneratedField`` of the aliased table (:ticket:`35344`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash when adding a\n+  ``GeneratedField`` relying on the ``__contains`` or ``__icontains``\n+  lookups or using a ``Value`` containing a ``\"%\"`` (:ticket:`35336`).\n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex f8e314d2708a..86ac7382ccae 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -54,7 +54,16 @@\n     Value,\n )\n from django.db.models.fields.json import KT, KeyTextTransform\n-from django.db.models.functions import Abs, Cast, Collate, Lower, Random, Round, Upper\n+from django.db.models.functions import (\n+    Abs,\n+    Cast,\n+    Collate,\n+    Concat,\n+    Lower,\n+    Random,\n+    Round,\n+    Upper,\n+)\n from django.db.models.indexes import IndexExpression\n from django.db.transaction import TransactionManagementError, atomic\n from django.test import TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -886,6 +895,39 @@ class Meta:\n         with connection.schema_editor() as editor:\n             editor.create_model(GeneratedFieldOutputFieldModel)\n \n+    @isolate_apps(\"schema\")\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_add_generated_field_contains(self):\n+        class GeneratedFieldContainsModel(Model):\n+            text = TextField(default=\"foo\")\n+            generated = GeneratedField(\n+                expression=Concat(\"text\", Value(\"%\")),\n+                db_persist=True,\n+                output_field=TextField(),\n+            )\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(GeneratedFieldContainsModel)\n+\n+        field = GeneratedField(\n+            expression=Q(text__icontains=\"FOO\"),\n+            db_persist=True,\n+            output_field=BooleanField(),\n+        )\n+        field.contribute_to_class(GeneratedFieldContainsModel, \"contains_foo\")\n+\n+        with connection.schema_editor() as editor:\n+            editor.add_field(GeneratedFieldContainsModel, field)\n+\n+        obj = GeneratedFieldContainsModel.objects.create()\n+        obj.refresh_from_db()\n+        self.assertEqual(obj.text, \"foo\")\n+        self.assertEqual(obj.generated, \"foo%\")\n+        self.assertIs(obj.contains_foo, True)\n+\n     @isolate_apps(\"schema\")\n     def test_add_auto_field(self):\n         class AddAutoFieldModel(Model):\n", "problem_statement": "Adding GeneratedField fails with ProgrammingError when using When on CharField\nDescription\n\t \nForgive me if I am doing something incorrectly, but I cannot for the life of me add a GeneratedField to one of my models. To replicate this error, I created this test model:\nfrom django.db import models\nclass TestModel(models.Model):\n\tdescription = models.TextField()\nRunning makemigrations/migrate, then modifying the model to add this contains_heck field:\nfrom django.db import models\nclass TestModel(models.Model):\n\tdescription = models.TextField()\n\tcontains_heck = models.GeneratedField(\n\t\texpression=models.Case(\n\t\t\tmodels.When(description__icontains=\"HECK\", then=models.Value(True)),\n\t\t\tdefault=models.Value(False),\n\t\t\toutput_field=models.BooleanField(),\n\t\t),\n\t\toutput_field=models.BooleanField(),\n\t\tdb_persist=True,\n\t)\nWhich generates this migration:\n# Generated by Django 5.0.3 on 2024-03-27 20:34\nfrom django.db import migrations, models\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t(\"core\", \"00001_initial\"),\n\t]\n\toperations = [\n\t\tmigrations.AddField(\n\t\t\tmodel_name=\"testmodel\",\n\t\t\tname=\"contains_heck\",\n\t\t\tfield=models.GeneratedField(\n\t\t\t\tdb_persist=True,\n\t\t\t\texpression=models.Case(\n\t\t\t\t\tmodels.When(description__icontains=\"HECK\", then=models.Value(True)), default=models.Value(False), output_field=models.BooleanField()\n\t\t\t\t),\n\t\t\t\toutput_field=models.BooleanField(),\n\t\t\t),\n\t\t),\n\t]\nAnd after running python manage.py migrate I get the following error:\nOperations to perform:\n Apply all migrations: admin, auth, consumer, contenttypes, core, db, sessions\nRunning migrations:\n Applying core.0002_testmodel_contains_heck...Traceback (most recent call last):\n File \"/opt/project/app/manage.py\", line 24, in <module>\n\tmain()\n File \"/opt/project/app/manage.py\", line 20, in main\n\texecute_from_command_line(sys.argv)\n File \"/usr/local/lib/python3.11/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/usr/local/lib/python3.11/site-packages/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/usr/local/lib/python3.11/site-packages/django/core/management/base.py\", line 413, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/usr/local/lib/python3.11/site-packages/django/core/management/base.py\", line 459, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/core/management/base.py\", line 107, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/core/management/commands/migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 252, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/db/migrations/migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"/usr/local/lib/python3.11/site-packages/django/db/migrations/operations/fields.py\", line 108, in database_forwards\n\tschema_editor.add_field(\n File \"/usr/local/lib/python3.11/site-packages/django/db/backends/base/schema.py\", line 750, in add_field\n\tself.execute(sql, params)\n File \"/usr/local/lib/python3.11/site-packages/django/db/backends/postgresql/schema.py\", line 46, in execute\n\tsql = self.connection.ops.compose_sql(str(sql), params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/db/backends/postgresql/operations.py\", line 195, in compose_sql\n\treturn mogrify(sql, params, self.connection)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/django/db/backends/postgresql/psycopg_any.py\", line 22, in mogrify\n\treturn ClientCursor(cursor.connection).mogrify(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/psycopg/client_cursor.py\", line 40, in mogrify\n\tpgq = self._convert_query(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/psycopg/client_cursor.py\", line 79, in _convert_query\n\tpgq.convert(query, params)\n File \"/usr/local/lib/python3.11/site-packages/psycopg/_queries.py\", line 208, in convert\n\t(self.template, self._order, self._parts) = f(bquery, self._encoding)\n\t\t\t\t\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/psycopg/_queries.py\", line 242, in _query2pg_client_nocache\n\tparts = _split_query(query, encoding, collapse_double_percent=False)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/local/lib/python3.11/site-packages/psycopg/_queries.py\", line 388, in _split_query\n\traise e.ProgrammingError(\npsycopg.ProgrammingError: only '%s', '%b', '%t' are allowed as placeholders, got '%H'\nI took a look with the debugger and I think either Django is incorrectly passing the values to psycopg, or psycopg isn't splitting this SQL statement correctly. I say this because when _split_query tries to split the query, it ends up matching and consuming the first character of each Value:\n[\n\t('ALTER TABLE \"core_testmodel\" ADD COLUMN \"contains_heck\" boolean GENERATED ALWAYS AS (CASE WHEN UPPER(\"description\"::text) LIKE UPPER(\\'', \"<re.Match object; span=(140, 142), match=b'%H'>\"),\n\t(\"ECK\", '<re.Match object; span=(145, 147), match=b\"%\\'\">'),\n\t(\") THEN true ELSE false END) STORED\", \"None\"),\n]\nSwitching to models.When(description__icontains=models.Value(\"HECK\"), ...) yields a similar error except it's complaining about %' instead of %H`. \nIf the contains_heck field is created at the same time as the rest of the model, everything works in either the description__icontains=\"HECK\" or description__icontains=models.Value(\"HECK\") configuration.\nVersions:\nPostgres 14.9\nPython 3.11.2\nDjango 5.0.3\npsycopg[binary] 3.1.18\n", "hints_text": [["This can be reproduced on psycopg2 and psycopg>=3 and is reminiscent of the series of issues we had to fix with Constraint's usage of __contains lookup which require proper % escaping (#30408, #34553, #32369) tests/schema/tests.py diff --git a/tests/schema/tests.py b/tests/schema/tests.py index f8e314d270..3b2d7bf03c 100644 a b class Meta: 886886 with connection.schema_editor() as editor: 887887 editor.create_model(GeneratedFieldOutputFieldModel) 888888 889 @isolate_apps(\"schema\") 890 @skipUnlessDBFeature(\"supports_stored_generated_columns\") 891 def test_add_generated_field_contains(self): 892 class GeneratedFieldContainsModel(Model): 893 text = TextField() 894 895 class Meta: 896 app_label = \"schema\" 897 898 field = GeneratedField( 899 expression=Q(text__icontains=\"FOO\"), 900 db_persist=True, 901 output_field=BooleanField(), 902 ) 903 field.contribute_to_class(GeneratedFieldContainsModel, \"some_field\") 904 905 with connection.schema_editor() as editor: 906 editor.create_model(GeneratedFieldContainsModel) 907 editor.add_field(GeneratedFieldContainsModel, field) 908 909 889910 @isolate_apps(\"schema\") 890911 def test_add_auto_field(self): 891912 class AddAutoFieldModel(Model):", 1711581856.0], ["Thanks for looking into this, I'm glad to know that it's a bug and not me doing something incorrectly. I'll use iregex as a workaround until 5.0.4. Out of curiosity, why does this issue only present itself when adding a field? Does Django handle SQL generation differently for table creation vs field addition?", 1711616362.0], ["Out of curiosity, why does this issue only present itself when adding a field? Does Django handle SQL generation differently for table creation vs field addition? I'm still laying down the details \u200bin this MR but the short answer is yes. The DBAPI Cursor.execute method can be used in two ways when dealing with parameters. Either (sql: str, params: []) which will delegate parametrization to the library or (sql: str, params: None) which won't attempt to parametrize the SQL. This is an important difference and requires special care when dealing with % literals in parameters as it's the symbol use for parametrization placeholders by most libraries. Well some backend simply don't support parametrization in some DDL statements such as GENERATED columns declaration, in other words you can't do cursor.execute( \"ALTER TABLE invoice ADD COLUMN discount_display text GENERATED ALWAYS discount || %s;\", [\"%\"] ) So you must do cursor.execute( \"ALTER TABLE invoice ADD COLUMN discount_display text GENERATED ALWAYS AS discount || '%';\", None ) Well in the case of SchemaEditor.create_model we liberally do one or the other and in your case, because you don't have any other field with a db_default assuming your use Postgres, it does the right thing. In the case of SchemaEditor.add_field however we always do params: list, which forces parametrization, and thus cursor.execute( \"ALTER TABLE testmodel ADD COLUMN contains_heck text GENERATED ALWAYS AS UPPER(description) LIKE '%HECK%';\", [] ) Crashes as there is an attempt to interpolate the two % while params is empty. The schema migration has historically use parametrizable DDL in the past when possible but this has become increasingly complex as more and more features were added (indexes, constraints, db_default, GeneratedField) to a point where I don't think we can continue doing so but the tricky part is that we can't make such a change in a bug fix release without risking to introduce further problems. This is made even worst by the fact that objects as Index and Constraint subclasses return already interpolated SQL (their as_sql methods return \"CHECK UPPER(description) LIKE '%HECK%'\" instead of (\"CHECK UPPER(description) LIKE %s\", \"%HECK%\") so even if we wanted to use it entirely to the backend until the last minute by using quote_value ourselves we can't as by that point we have a mixture of interpolated and non-interpolated SQL.", 1711622756.0]], "created_at": "2024-03-28T05:48:39Z"}
{"repo": "django/django", "pull_number": 18026, "instance_id": "django__django-18026", "issue_numbers": ["35331"], "base_commit": "f359990e4909db8722820849d61a6f5724338723", "patch": "diff --git a/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js b/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\nindex bc3accea371c..74d17bfc3e0a 100644\n--- a/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\n+++ b/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\n@@ -87,7 +87,7 @@\n         }\n     }\n \n-    function updateRelatedSelectsOptions(currentSelect, win, objId, newRepr, newId) {\n+    function updateRelatedSelectsOptions(currentSelect, win, objId, newRepr, newId, skipIds = []) {\n         // After create/edit a model from the options next to the current\n         // select (+ or :pencil:) update ForeignKey PK of the rest of selects\n         // in the page.\n@@ -100,7 +100,7 @@\n         const selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] [data-context=\"available-source\"]`);\n \n         selectsRelated.forEach(function(select) {\n-            if (currentSelect === select) {\n+            if (currentSelect === select || skipIds && skipIds.includes(select.id)) {\n                 return;\n             }\n \n@@ -109,6 +109,11 @@\n             if (!option) {\n                 option = new Option(newRepr, newId);\n                 select.options.add(option);\n+                // Update SelectBox cache for related fields.\n+                if (window.SelectBox !== undefined && !SelectBox.cache[currentSelect.id]) {\n+                    SelectBox.add_to_cache(select.id, option);\n+                    SelectBox.redisplay(select.id);\n+                }\n                 return;\n             }\n \n@@ -136,9 +141,14 @@\n             $(elem).trigger('change');\n         } else {\n             const toId = name + \"_to\";\n+            const toElem = document.getElementById(toId);\n             const o = new Option(newRepr, newId);\n             SelectBox.add_to_cache(toId, o);\n             SelectBox.redisplay(toId);\n+            if (toElem && toElem.nodeName.toUpperCase() === 'SELECT') {\n+                const skipIds = [name + \"_from\"];\n+                updateRelatedSelectsOptions(toElem, win, null, newRepr, newId, skipIds);\n+            }\n         }\n         const index = relatedWindows.indexOf(win);\n         if (index > -1) {\n", "test_patch": "diff --git a/tests/admin_views/test_related_object_lookups.py b/tests/admin_views/test_related_object_lookups.py\nindex 761819a50fe7..4b2171a09f30 100644\n--- a/tests/admin_views/test_related_object_lookups.py\n+++ b/tests/admin_views/test_related_object_lookups.py\n@@ -3,6 +3,8 @@\n from django.test import override_settings\n from django.urls import reverse\n \n+from .models import CamelCaseModel\n+\n \n @override_settings(ROOT_URLCONF=\"admin_views.urls\")\n class SeleniumTests(AdminSeleniumTestCase):\n@@ -100,6 +102,8 @@ def test_related_object_update_with_camel_casing(self):\n         self.wait_until(lambda d: len(d.window_handles) == 1, 1)\n         self.selenium.switch_to.window(self.selenium.window_handles[0])\n \n+        id_value = CamelCaseModel.objects.get(interesting_name=interesting_name).id\n+\n         # Check that both the \"Available\" m2m box and the \"Fk\" dropdown now\n         # include the newly added CamelCaseModel instance.\n         fk_dropdown = self.selenium.find_element(By.ID, \"id_fk\")\n@@ -107,7 +111,7 @@ def test_related_object_update_with_camel_casing(self):\n             fk_dropdown.get_attribute(\"innerHTML\"),\n             f\"\"\"\n             <option value=\"\" selected=\"\">---------</option>\n-            <option value=\"1\" selected>{interesting_name}</option>\n+            <option value=\"{id_value}\" selected>{interesting_name}</option>\n             \"\"\",\n         )\n         # Check the newly added instance is not also added in the \"to\" box.\n@@ -117,6 +121,61 @@ def test_related_object_update_with_camel_casing(self):\n         self.assertHTMLEqual(\n             m2m_box.get_attribute(\"innerHTML\"),\n             f\"\"\"\n-            <option value=\"1\">{interesting_name}</option>\n+            <option title=\"{interesting_name}\" value=\"{id_value}\">\n+            {interesting_name}</option>\n+            \"\"\",\n+        )\n+\n+    def test_related_object_add_js_actions(self):\n+        from selenium.webdriver.common.by import By\n+\n+        add_url = reverse(\"admin:admin_views_camelcaserelatedmodel_add\")\n+        self.selenium.get(self.live_server_url + add_url)\n+        m2m_to = self.selenium.find_element(By.ID, \"id_m2m_to\")\n+        m2m_box = self.selenium.find_element(By.ID, \"id_m2m_from\")\n+        fk_dropdown = self.selenium.find_element(By.ID, \"id_fk\")\n+\n+        # Add new related entry using +.\n+        name = \"Bergeron\"\n+        self.selenium.find_element(By.ID, \"add_id_m2m\").click()\n+        self.wait_for_and_switch_to_popup()\n+        self.selenium.find_element(By.ID, \"id_interesting_name\").send_keys(name)\n+        self.selenium.find_element(By.NAME, \"_save\").click()\n+        self.wait_until(lambda d: len(d.window_handles) == 1, 1)\n+        self.selenium.switch_to.window(self.selenium.window_handles[0])\n+\n+        id_value = CamelCaseModel.objects.get(interesting_name=name).id\n+\n+        # Check the new value correctly appears in the \"to\" box.\n+        self.assertHTMLEqual(\n+            m2m_to.get_attribute(\"innerHTML\"),\n+            f\"\"\"<option title=\"{name}\" value=\"{id_value}\">{name}</option>\"\"\",\n+        )\n+        self.assertHTMLEqual(m2m_box.get_attribute(\"innerHTML\"), \"\")\n+        self.assertHTMLEqual(\n+            fk_dropdown.get_attribute(\"innerHTML\"),\n+            f\"\"\"\n+            <option value=\"\" selected>---------</option>\n+            <option value=\"{id_value}\">{name}</option>\n             \"\"\",\n         )\n+\n+        # Move the new value to the from box.\n+        self.selenium.find_element(By.XPATH, \"//*[@id='id_m2m_to']/option\").click()\n+        self.selenium.find_element(By.XPATH, \"//*[@id='id_m2m_remove_link']\").click()\n+\n+        self.assertHTMLEqual(\n+            m2m_box.get_attribute(\"innerHTML\"),\n+            f\"\"\"<option title=\"{name}\" value=\"{id_value}\">{name}</option>\"\"\",\n+        )\n+        self.assertHTMLEqual(m2m_to.get_attribute(\"innerHTML\"), \"\")\n+\n+        # Move the new value to the to box.\n+        self.selenium.find_element(By.XPATH, \"//*[@id='id_m2m_from']/option\").click()\n+        self.selenium.find_element(By.XPATH, \"//*[@id='id_m2m_add_link']\").click()\n+\n+        self.assertHTMLEqual(m2m_box.get_attribute(\"innerHTML\"), \"\")\n+        self.assertHTMLEqual(\n+            m2m_to.get_attribute(\"innerHTML\"),\n+            f\"\"\"<option title=\"{name}\" value=\"{id_value}\">{name}</option>\"\"\",\n+        )\n", "problem_statement": "Adding a new related entry using the \"+\" sign from M2M field doesn't update lists.\nDescription\n\t\t\n(last modified by Mariusz Felisiak)\t\t\nRelated to Ticket #34789, PR \u200bhttps://github.com/django/django/pull/17897\nModels:\nfrom django.db import models\nclass State(models.Model):\n\tlabel = models.CharField(max_length=255)\n\tdef __str__(self):\n\t\treturn self.label\nclass Transition(models.Model):\n\tsource = models.ManyToManyField(State, related_name=\"transition_source\")\n\ttarget = models.ForeignKey(State, related_name=\"transition_target\", on_delete=models.CASCADE)\nAdmin:\nfrom django.contrib import admin\nfrom .models import State, Transition\nclass TransitionAdmin(admin.ModelAdmin):\n\tfilter_horizontal = ['source']\nadmin.site.register(State)\nadmin.site.register(Transition, TransitionAdmin)\nSteps to Reproduce:\nAdd a State via the \"+\" on the M2M field to add to the Chosen Source column. We would expect the dropdown for the Target to contain the new value, but it does not.\nResolution as suggested by @nessita on the provided PR:\n\"For this, I tracked down the issue to the selector used in dismissAddRelatedObjectPopup to decide whether to call updateRelatedSelectsOptions or not. Basically the id used in the document.getElementById is wrong for the M2M widget (but correct for the single FK field, so we may need to fix the call site to pass the proper name)\"\n--- a/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\n+++ b/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\n@@ -119,7 +119,7 @@\n \n\t function dismissAddRelatedObjectPopup(win, newId, newRepr) {\n\t\t const name = removePopupIndex(win.name);\n-\t\tconst elem = document.getElementById(name);\n+\t\tconst elem = document.getElementById(name + '_from');\n\t\t if (elem) {\n\t\t\t const elemName = elem.nodeName.toUpperCase();\n\t\t\t if (elemName === 'SELECT') {\n", "hints_text": [["\u200bhttps://github.com/django/django/pull/18026", 1711549211.0], ["\u200bPer PR comment", 1711611477.0]], "created_at": "2024-03-27T19:19:53Z"}
{"repo": "django/django", "pull_number": 18025, "instance_id": "django__django-18025", "issue_numbers": ["35330"], "base_commit": "5f180216409d75290478c71ddb0ff8a68c91dc16", "patch": "diff --git a/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html b/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html\nindex 8e4356a95cce..99b20545af93 100644\n--- a/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html\n+++ b/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html\n@@ -1,5 +1,5 @@\n {% load i18n static %}\n-<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model }}\"{% endif %}>\n+<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model_name }}\"{% endif %}>\n     {{ rendered_widget }}\n     {% block links %}\n         {% spaceless %}\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex 216b87671b15..260ff33ca57a 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -329,6 +329,7 @@ def get_context(self, name, value, attrs):\n             \"name\": name,\n             \"url_params\": url_params,\n             \"model\": rel_opts.verbose_name,\n+            \"model_name\": rel_opts.model_name,\n             \"can_add_related\": self.can_add_related,\n             \"can_change_related\": self.can_change_related,\n             \"can_delete_related\": self.can_delete_related,\n", "test_patch": "diff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\nindex c157e7050514..0ea64d594ac5 100644\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -33,6 +33,8 @@\n     Book,\n     Bookmark,\n     Box,\n+    CamelCaseModel,\n+    CamelCaseRelatedModel,\n     Category,\n     Chapter,\n     ChapterXtra1,\n@@ -1181,6 +1183,10 @@ class SquareAdmin(admin.ModelAdmin):\n     readonly_fields = (\"area\",)\n \n \n+class CamelCaseAdmin(admin.ModelAdmin):\n+    filter_horizontal = [\"m2m\"]\n+\n+\n site = admin.AdminSite(name=\"admin\")\n site.site_url = \"/my-site-url/\"\n site.register(Article, ArticleAdmin)\n@@ -1305,6 +1311,8 @@ class SquareAdmin(admin.ModelAdmin):\n site.register(Country, CountryAdmin)\n site.register(Traveler, TravelerAdmin)\n site.register(Square, SquareAdmin)\n+site.register(CamelCaseModel)\n+site.register(CamelCaseRelatedModel, CamelCaseAdmin)\n \n # Register core models we need in our tests\n site.register(User, UserAdmin)\ndiff --git a/tests/admin_views/models.py b/tests/admin_views/models.py\nindex 341e5aaed021..812505de828e 100644\n--- a/tests/admin_views/models.py\n+++ b/tests/admin_views/models.py\n@@ -1155,3 +1155,15 @@ class Square(models.Model):\n \n     class Meta:\n         required_db_features = {\"supports_stored_generated_columns\"}\n+\n+\n+class CamelCaseModel(models.Model):\n+    interesting_name = models.CharField(max_length=100)\n+\n+    def __str__(self):\n+        return self.interesting_name\n+\n+\n+class CamelCaseRelatedModel(models.Model):\n+    m2m = models.ManyToManyField(CamelCaseModel, related_name=\"m2m\")\n+    fk = models.ForeignKey(CamelCaseModel, on_delete=models.CASCADE, related_name=\"fk\")\ndiff --git a/tests/admin_views/test_related_object_lookups.py b/tests/admin_views/test_related_object_lookups.py\nindex 145bf0d6deb6..955bebea9eb6 100644\n--- a/tests/admin_views/test_related_object_lookups.py\n+++ b/tests/admin_views/test_related_object_lookups.py\n@@ -76,3 +76,45 @@ def test_related_object_lookup_link_enabled(self):\n             with self.subTest(link_id):\n                 link = self.selenium.find_element(By.XPATH, f'//*[@id=\"{link_id}\"]')\n                 self.assertIsNone(link.get_attribute(\"aria-disabled\"))\n+\n+    def test_related_object_update_with_camel_casing(self):\n+        from selenium.webdriver.common.by import By\n+\n+        def _get_HTML_inside_element_by_id(id_):\n+            return self.selenium.find_element(By.ID, id_).get_attribute(\"innerHTML\")\n+\n+        add_url = reverse(\"admin:admin_views_camelcaserelatedmodel_add\")\n+        self.selenium.get(self.live_server_url + add_url)\n+        interesting_name = \"A test name\"\n+\n+        # Add a new CamelCaseModel using the \"+\" icon next to the \"fk\" field.\n+        self.selenium.find_element(By.ID, \"add_id_fk\").click()\n+\n+        # Switch to the add popup window.\n+        self.wait_for_and_switch_to_popup()\n+\n+        # Find the \"interesting_name\" field and enter a value, then save it.\n+        self.selenium.find_element(By.ID, \"id_interesting_name\").send_keys(\n+            interesting_name\n+        )\n+        self.selenium.find_element(By.NAME, \"_save\").click()\n+\n+        # Return to the main window.\n+        self.wait_until(lambda d: len(d.window_handles) == 1, 1)\n+        self.selenium.switch_to.window(self.selenium.window_handles[0])\n+\n+        # Check that both the \"Available\" m2m box and the \"Fk\" dropdown now\n+        # include the newly added CamelCaseModel instance.\n+        self.assertHTMLEqual(\n+            self.selenium.find_element(By.ID, \"id_fk\"),\n+            f\"\"\"\n+            <option value=\"\" selected=\"\">---------</option>\n+            <option value=\"1\" selected>{interesting_name}</option>\n+            \"\"\",\n+        )\n+        self.assertHTMLEqual(\n+            self.selenium.find_element(By.ID, \"id_m2m_from\"),\n+            f\"\"\"\n+            <option value=\"1\">{interesting_name}</option>\n+            \"\"\",\n+        )\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex 76a47e486843..4d188496926d 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -937,6 +937,28 @@ def test_widget_is_not_hidden(self):\n         # Related item links are present.\n         self.assertIn(\"<a \", output)\n \n+    def test_data_model_ref_when_model_name_is_camel_case(self):\n+        rel = VideoStream._meta.get_field(\"release_event\").remote_field\n+        widget = forms.Select()\n+        wrapper = widgets.RelatedFieldWidgetWrapper(widget, rel, widget_admin_site)\n+        self.assertIs(wrapper.is_hidden, False)\n+        context = wrapper.get_context(\"release_event\", None, {})\n+        self.assertEqual(context[\"model\"], \"release event\")\n+        self.assertEqual(context[\"model_name\"], \"releaseevent\")\n+        output = wrapper.render(\"stream\", \"value\")\n+        expected = \"\"\"\n+        <div class=\"related-widget-wrapper\" data-model-ref=\"releaseevent\">\n+          <select name=\"stream\">\n+          </select>\n+          <a class=\"related-widget-wrapper-link add-related\" id=\"add_id_stream\"\n+             data-popup=\"yes\" title=\"Add another release event\"\n+             href=\"/admin_widgets/releaseevent/add/?_to_field=album&amp;_popup=1\">\n+            <img src=\"/static/admin/img/icon-addlink.svg\" alt=\"\" width=\"20\" height=\"20\">\n+          </a>\n+        </div>\n+        \"\"\"\n+        self.assertHTMLEqual(output, expected)\n+\n \n @override_settings(ROOT_URLCONF=\"admin_widgets.urls\")\n class AdminWidgetSeleniumTestCase(AdminSeleniumTestCase):\n", "problem_statement": "The update of related objects fails in the admin when the related model is camel case.\nDescription\n\t \nRelated to Ticket #34789\nTo reproduce, take these models:\nclass TransitionState(models.Model):\n\tlabel = models.CharField(max_length=255)\n\tdef __str__(self):\n\t\treturn self.label\nclass Transition(models.Model):\n\tsource = models.ManyToManyField(TransitionState, related_name=\"transition_source\")\n\ttarget = models.ForeignKey(\n\t\tTransitionState, on_delete=models.CASCADE, related_name=\"transition_target\"\n\t)\nand this admin:\nclass TransitionAdmin(admin.ModelAdmin):\n\tfilter_horizontal = [\"source\"]\nsite.register(TransitionState)\nsite.register(Transition, TransitionAdmin)\nWhen we add a \"Target\", we expect the \"available\" source to be populated with the new target. However, due to the camel casing of TransitionState, we cause data-model-ref to check transitionstate against transition state, and therefore does not pick up the match.\nProposed Change by @nessita as discussed in \u200bhttps://github.com/django/django/pull/17897:\ndiff --git a/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html b/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html\nindex 8e4356a95c..99b20545af 100644\n--- a/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html\n+++ b/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html\n@@ -1,5 +1,5 @@\n {% load i18n static %}\n-<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model }}\"{% endif %}>\n+<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model_name }}\"{% endif %}>\n\t {{ rendered_widget }}\n\t {% block links %}\n\t\t {% spaceless %}\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex fc0cd941d1..9633ebb1a1 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -328,6 +328,7 @@ class RelatedFieldWidgetWrapper(forms.Widget):\n\t\t\t \"name\": name,\n\t\t\t \"url_params\": url_params,\n\t\t\t \"model\": rel_opts.verbose_name,\n+\t\t\t\"model_name\": rel_opts.model_name,\n\t\t\t \"can_add_related\": self.can_add_related,\n\t\t\t \"can_change_related\": self.can_change_related,\n\t\t\t \"can_delete_related\": self.can_delete_related,\n", "hints_text": [["Good catch.", 1711412374.0], ["If I want to use the test models from the PR listed in the ticket, should I just wait until that PR gets eventually merged in? Or is it preferred to make any changes here independent of another ticket (and subsequently make alterations to admin to work for this ticket)?", 1711468886.0], ["Replying to devin13cox: If I want to use the test models from the PR listed in the ticket, should I just wait until that PR gets eventually merged in? Or is it preferred to make any changes here independent of another ticket (and subsequently make alterations to admin to work for this ticket)? Or if there is another preferred way to approach this given the close relationship between this ticket, the one mentioned in the description, and #35331, I am open to suggestions!", 1711468998.0], ["Replying to devin13cox: Replying to devin13cox: If I want to use the test models from the PR listed in the ticket, should I just wait until that PR gets eventually merged in? Or is it preferred to make any changes here independent of another ticket (and subsequently make alterations to admin to work for this ticket)? Or if there is another preferred way to approach this given the close relationship between this ticket, the one mentioned in the description, and #35331, I am open to suggestions! Hi! My suggestion would be to progress with this ticket independently of the other tickets. Have you checked if any of the existing models would help building your testcase?", 1711536517.0], ["Replying to Natalia Bidart: Replying to devin13cox: Replying to devin13cox: If I want to use the test models from the PR listed in the ticket, should I just wait until that PR gets eventually merged in? Or is it preferred to make any changes here independent of another ticket (and subsequently make alterations to admin to work for this ticket)? Or if there is another preferred way to approach this given the close relationship between this ticket, the one mentioned in the description, and #35331, I am open to suggestions! Hi! My suggestion would be to progress with this ticket independently of the other tickets. Have you checked if any of the existing models would help building your testcase? I think the models Pizza and Topping are usable for Ticket #35331, but I would need to alter Topping to use camel casing for this one. Or add another filter horizontal admin, but at that point may be easier to make independent additions. Edit: Might actually be reproducible without filter_horizontal if this is just a related update issue. I'll double check.", 1711545050.0], ["\u200bhttps://github.com/django/django/pull/18025", 1711547302.0]], "created_at": "2024-03-27T18:44:07Z"}
{"repo": "django/django", "pull_number": 18022, "instance_id": "django__django-18022", "issue_numbers": ["35329"], "base_commit": "ae10146793dca0e0594c7acdee20ca3810983f39", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex f442d290a005..635793b1e32e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -129,7 +129,7 @@ class BaseDatabaseSchemaEditor:\n     )\n     sql_create_unique_index = (\n         \"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n-        \"(%(columns)s)%(include)s%(condition)s%(nulls_distinct)s\"\n+        \"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n     )\n     sql_rename_index = \"ALTER INDEX %(old_name)s RENAME TO %(new_name)s\"\n     sql_delete_index = \"DROP INDEX %(name)s\"\ndiff --git a/docs/releases/5.0.4.txt b/docs/releases/5.0.4.txt\nindex 9b2fd6b17000..6503f1ada34d 100644\n--- a/docs/releases/5.0.4.txt\n+++ b/docs/releases/5.0.4.txt\n@@ -17,3 +17,7 @@ Bugfixes\n * Fixed a regression in Django 5.0 where the ``AdminFileWidget`` could be\n   rendered with two ``id`` attributes on the \"Clear\" checkbox\n   (:ticket:`35273`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash on PostgreSQL 15+\n+  when adding a partial ``UniqueConstraint`` with ``nulls_distinct``\n+  (:ticket:`35329`).\n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b912d353eb90..f8e314d2708a 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3629,6 +3629,38 @@ def test_unique_constraint_nulls_distinct(self):\n         constraints = self.get_constraints(Author._meta.db_table)\n         self.assertNotIn(constraint.name, constraints)\n \n+    @skipUnlessDBFeature(\n+        \"supports_nulls_distinct_unique_constraints\",\n+        \"supports_partial_indexes\",\n+    )\n+    def test_unique_constraint_nulls_distinct_condition(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(\n+            fields=[\"height\", \"weight\"],\n+            name=\"un_height_weight_start_A\",\n+            condition=Q(name__startswith=\"A\"),\n+            nulls_distinct=False,\n+        )\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+        Author.objects.create(name=\"Adam\", height=None, weight=None)\n+        Author.objects.create(name=\"Avocado\", height=1, weight=None)\n+        Author.objects.create(name=\"Adrian\", height=None, weight=1)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"Alex\", height=None, weight=None)\n+        Author.objects.create(name=\"Bob\", height=None, weight=None)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"Alex\", height=1, weight=None)\n+        Author.objects.create(name=\"Bill\", height=None, weight=None)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"Alex\", height=None, weight=1)\n+        Author.objects.create(name=\"Celine\", height=None, weight=1)\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        constraints = self.get_constraints(Author._meta.db_table)\n+        self.assertNotIn(constraint.name, constraints)\n+\n     @skipIfDBFeature(\"supports_nulls_distinct_unique_constraints\")\n     def test_unique_constraint_nulls_distinct_unsupported(self):\n         # UniqueConstraint is ignored on databases that don't support\n", "problem_statement": "Bug UniqueConstraint with condition and nulls-distinct\nDescription\n\t\t\n(last modified by Simon Charette)\t\t\nHi, I`m Lucas (\u200bhttps://github.com/lsaunitti) \nI found a bug when set a UniqueConstrain using condition using nulls_distinct using like that:\nScreenshot 2024-03-25 at 10.47.59.png\nWhen django generate SQL to create a check constraint the result is ... WHERE <condition> NULLS NOT DISTINCT. \nIt raise an exception on Postgresql. \nTo fix it, I suggest change the file django/db/backends/base/schema.py on line 132:\nToday:\n\tsql_create_unique_index = (\n\t\t\"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n\t\t\"(%(columns)s)%(include)s%(condition)s%(nulls_distinct)s\"\n\t)\nTo:\n\tsql_create_unique_index = (\n\t\t\"CREATE UNIQUE INDEX %(name)s ON %(table)s \"\n\t\t\"(%(columns)s)%(include)s%(nulls_distinct)s%(condition)s\"\n\t)\nRegards,\nLucas Lemke Saunitti\nSoftware Engineer\n", "hints_text": [["Thank you for your report Lucas! Marking as a release blocker since nulls_distinct is a new feature introduced in Django 5.0. \u200bThe Postgres docs clearly point that NULLS DISTINCT should come before WHERE, sorry for missing that. Would you be interested in submitting a PR with the proposed changes? Adding a test should be as simple as taking inspiration from the ones \u200bintroduced when the feature was added.", 1711379311.0], ["Replying to Simon Charette: Adding a test should be as simple as taking inspiration from the ones \u200bintroduced when the feature was added. A regression test: tests/schema/tests.py diff --git a/tests/schema/tests.py b/tests/schema/tests.py index b912d353eb..f8e314d270 100644 a b class SchemaTests(TransactionTestCase): 36293629 constraints = self.get_constraints(Author._meta.db_table) 36303630 self.assertNotIn(constraint.name, constraints) 36313631 3632 @skipUnlessDBFeature( 3633 \"supports_nulls_distinct_unique_constraints\", 3634 \"supports_partial_indexes\", 3635 ) 3636 def test_unique_constraint_nulls_distinct_condition(self): 3637 with connection.schema_editor() as editor: 3638 editor.create_model(Author) 3639 constraint = UniqueConstraint( 3640 fields=[\"height\", \"weight\"], 3641 name=\"un_height_weight_start_A\", 3642 condition=Q(name__startswith=\"A\"), 3643 nulls_distinct=False, 3644 ) 3645 with connection.schema_editor() as editor: 3646 editor.add_constraint(Author, constraint) 3647 Author.objects.create(name=\"Adam\", height=None, weight=None) 3648 Author.objects.create(name=\"Avocado\", height=1, weight=None) 3649 Author.objects.create(name=\"Adrian\", height=None, weight=1) 3650 with self.assertRaises(IntegrityError): 3651 Author.objects.create(name=\"Alex\", height=None, weight=None) 3652 Author.objects.create(name=\"Bob\", height=None, weight=None) 3653 with self.assertRaises(IntegrityError): 3654 Author.objects.create(name=\"Alex\", height=1, weight=None) 3655 Author.objects.create(name=\"Bill\", height=None, weight=None) 3656 with self.assertRaises(IntegrityError): 3657 Author.objects.create(name=\"Alex\", height=None, weight=1) 3658 Author.objects.create(name=\"Celine\", height=None, weight=1) 3659 with connection.schema_editor() as editor: 3660 editor.remove_constraint(Author, constraint) 3661 constraints = self.get_constraints(Author._meta.db_table) 3662 self.assertNotIn(constraint.name, constraints) 3663 36323664 @skipIfDBFeature(\"supports_nulls_distinct_unique_constraints\") 36333665 def test_unique_constraint_nulls_distinct_unsupported(self): 36343666 # UniqueConstraint is ignored on databases that don't support", 1711424808.0], ["\u200bPR", 1711462200.0], ["In b98271a: Fixed #35329 -- Fixed migrations crash when adding partial unique constraints with nulls_distinct. Bug in 595a2abb58e04caa4d55fb2589bb80fb2a8fdfa1. Thanks Lucas Lemke Saunitti for the report.", 1711472332.0], ["In 345e3cf: [5.0.x] Fixed #35329 -- Fixed migrations crash when adding partial unique constraints with nulls_distinct. Bug in 595a2abb58e04caa4d55fb2589bb80fb2a8fdfa1. Thanks Lucas Lemke Saunitti for the report. Backport of b98271a6e42107233311d17f5d7bc74fbb47f22c from main", 1711472414.0]], "created_at": "2024-03-26T19:09:32Z"}
{"repo": "django/django", "pull_number": 18020, "instance_id": "django__django-18020", "issue_numbers": ["35326"], "base_commit": "d4f6e6c0888d2032af17d9216daa15f8e2272840", "patch": "diff --git a/django/core/files/storage/filesystem.py b/django/core/files/storage/filesystem.py\nindex 85fc4eff9f3a..ed752cc06296 100644\n--- a/django/core/files/storage/filesystem.py\n+++ b/django/core/files/storage/filesystem.py\n@@ -1,13 +1,16 @@\n import os\n+import warnings\n from datetime import datetime, timezone\n from urllib.parse import urljoin\n \n from django.conf import settings\n+from django.core.exceptions import SuspiciousFileOperation\n from django.core.files import File, locks\n from django.core.files.move import file_move_safe\n from django.core.signals import setting_changed\n from django.utils._os import safe_join\n from django.utils.deconstruct import deconstructible\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.encoding import filepath_to_uri\n from django.utils.functional import cached_property\n \n@@ -21,8 +24,7 @@ class FileSystemStorage(Storage, StorageSettingsMixin):\n     Standard filesystem storage\n     \"\"\"\n \n-    # The combination of O_CREAT and O_EXCL makes os.open() raise OSError if\n-    # the file already exists before it's opened.\n+    # RemovedInDjango60Warning: remove OS_OPEN_FLAGS.\n     OS_OPEN_FLAGS = os.O_WRONLY | os.O_CREAT | os.O_EXCL | getattr(os, \"O_BINARY\", 0)\n \n     def __init__(\n@@ -31,12 +33,23 @@ def __init__(\n         base_url=None,\n         file_permissions_mode=None,\n         directory_permissions_mode=None,\n+        allow_overwrite=False,\n     ):\n         self._location = location\n         self._base_url = base_url\n         self._file_permissions_mode = file_permissions_mode\n         self._directory_permissions_mode = directory_permissions_mode\n+        self._allow_overwrite = allow_overwrite\n         setting_changed.connect(self._clear_cached_properties)\n+        # RemovedInDjango60Warning: remove this warning.\n+        if self.OS_OPEN_FLAGS != os.O_WRONLY | os.O_CREAT | os.O_EXCL | getattr(\n+            os, \"O_BINARY\", 0\n+        ):\n+            warnings.warn(\n+                \"Overriding OS_OPEN_FLAGS is deprecated. Use \"\n+                \"the allow_overwrite parameter instead.\",\n+                RemovedInDjango60Warning,\n+            )\n \n     @cached_property\n     def base_location(self):\n@@ -98,12 +111,30 @@ def _save(self, name, content):\n             try:\n                 # This file has a file path that we can move.\n                 if hasattr(content, \"temporary_file_path\"):\n-                    file_move_safe(content.temporary_file_path(), full_path)\n+                    file_move_safe(\n+                        content.temporary_file_path(),\n+                        full_path,\n+                        allow_overwrite=self._allow_overwrite,\n+                    )\n \n                 # This is a normal uploadedfile that we can stream.\n                 else:\n-                    # The current umask value is masked out by os.open!\n-                    fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)\n+                    # The combination of O_CREAT and O_EXCL makes os.open() raises an\n+                    # OSError if the file already exists before it's opened.\n+                    open_flags = (\n+                        os.O_WRONLY\n+                        | os.O_CREAT\n+                        | os.O_EXCL\n+                        | getattr(os, \"O_BINARY\", 0)\n+                    )\n+                    # RemovedInDjango60Warning: when the deprecation ends, replace with:\n+                    # if self._allow_overwrite:\n+                    #     open_flags = open_flags & ~os.O_EXCL\n+                    if self.OS_OPEN_FLAGS != open_flags:\n+                        open_flags = self.OS_OPEN_FLAGS\n+                    elif self._allow_overwrite:\n+                        open_flags = open_flags & ~os.O_EXCL\n+                    fd = os.open(full_path, open_flags, 0o666)\n                     _file = None\n                     try:\n                         locks.lock(fd, locks.LOCK_EX)\n@@ -162,7 +193,13 @@ def delete(self, name):\n             pass\n \n     def exists(self, name):\n-        return os.path.lexists(self.path(name))\n+        try:\n+            exists = os.path.lexists(self.path(name))\n+        except SuspiciousFileOperation:\n+            raise\n+        if self._allow_overwrite:\n+            return False\n+        return exists\n \n     def listdir(self, path):\n         path = self.path(path)\ndiff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt\nindex c0965f676b1c..4f89481ac7a9 100644\n--- a/docs/internals/deprecation.txt\n+++ b/docs/internals/deprecation.txt\n@@ -79,6 +79,9 @@ details on these changes.\n \n * The ``check`` keyword argument of ``CheckConstraint`` will be removed.\n \n+* The ``OS_OPEN_FLAGS`` attribute of\n+  :class:`~django.core.files.storage.FileSystemStorage` will be removed.\n+\n .. _deprecation-removed-in-5.1:\n \n 5.1\ndiff --git a/docs/ref/files/storage.txt b/docs/ref/files/storage.txt\nindex 2ebf49b9aadd..e912bcc4129a 100644\n--- a/docs/ref/files/storage.txt\n+++ b/docs/ref/files/storage.txt\n@@ -28,7 +28,7 @@ Django provides convenient ways to access the default storage class:\n The ``FileSystemStorage`` class\n ===============================\n \n-.. class:: FileSystemStorage(location=None, base_url=None, file_permissions_mode=None, directory_permissions_mode=None)\n+.. class:: FileSystemStorage(location=None, base_url=None, file_permissions_mode=None, directory_permissions_mode=None, allow_overwrite=False)\n \n     The :class:`~django.core.files.storage.FileSystemStorage` class implements\n     basic file storage on a local filesystem. It inherits from\n@@ -60,6 +60,13 @@ The ``FileSystemStorage`` class\n         The file system permissions that the directory will receive when it is\n         saved. Defaults to :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`.\n \n+    .. attribute:: allow_overwrite\n+\n+        .. versionadded:: 5.1\n+\n+        Flag to control allowing saving a new file over an existing one.\n+        Defaults to ``False``.\n+\n     .. method:: get_created_time(name)\n \n         Returns a :class:`~datetime.datetime` of the system's ctime, i.e.\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex d60ccb973094..f0a0156d4772 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -207,7 +207,10 @@ Error Reporting\n File Storage\n ~~~~~~~~~~~~\n \n-* ...\n+* The :attr:`~django.core.files.storage.FileSystemStorage.allow_overwrite`\n+  parameter has been added to\n+  :class:`~django.core.files.storage.FileSystemStorage`, to allow saving new\n+  files over existing ones.\n \n File Uploads\n ~~~~~~~~~~~~\n@@ -464,6 +467,12 @@ Miscellaneous\n * The ``check`` keyword argument of ``CheckConstraint`` is deprecated in favor\n   of ``condition``.\n \n+* The undocumented ``OS_OPEN_FLAGS`` property of\n+  :class:`~django.core.files.storage.FileSystemStorage` has been deprecated.\n+  To allow overwriting files in storage, set the new\n+  :attr:`~django.core.files.storage.FileSystemStorage.allow_overwrite` option\n+  to ``True`` instead.\n+\n Features removed in 5.1\n =======================\n \n", "test_patch": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 420314573d47..fc3533ab7da1 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -25,11 +25,18 @@\n )\n from django.db.models import FileField\n from django.db.models.fields.files import FileDescriptor\n-from django.test import LiveServerTestCase, SimpleTestCase, TestCase, override_settings\n+from django.test import (\n+    LiveServerTestCase,\n+    SimpleTestCase,\n+    TestCase,\n+    ignore_warnings,\n+    override_settings,\n+)\n from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n from django.utils._os import symlinks_supported\n+from django.utils.deprecation import RemovedInDjango60Warning\n \n from .models import (\n     Storage,\n@@ -88,18 +95,18 @@ def test_file_access_options(self):\n         \"\"\"\n         Standard file access options are available, and work as expected.\n         \"\"\"\n-        self.assertFalse(self.storage.exists(\"storage_test\"))\n+        self.assertFalse(os.path.exists(os.path.join(self.temp_dir, \"storage_test\")))\n         f = self.storage.open(\"storage_test\", \"w\")\n         f.write(\"storage contents\")\n         f.close()\n-        self.assertTrue(self.storage.exists(\"storage_test\"))\n+        self.assertTrue(os.path.exists(os.path.join(self.temp_dir, \"storage_test\")))\n \n         f = self.storage.open(\"storage_test\", \"r\")\n         self.assertEqual(f.read(), \"storage contents\")\n         f.close()\n \n         self.storage.delete(\"storage_test\")\n-        self.assertFalse(self.storage.exists(\"storage_test\"))\n+        self.assertFalse(os.path.exists(os.path.join(self.temp_dir, \"storage_test\")))\n \n     def _test_file_time_getter(self, getter):\n         # Check for correct behavior under both USE_TZ=True and USE_TZ=False.\n@@ -268,10 +275,10 @@ def test_file_save_with_path(self):\n         \"\"\"\n         Saving a pathname should create intermediate directories as necessary.\n         \"\"\"\n-        self.assertFalse(self.storage.exists(\"path/to\"))\n+        self.assertFalse(os.path.exists(os.path.join(self.temp_dir, \"path/to\")))\n         self.storage.save(\"path/to/test.file\", ContentFile(\"file saved with path\"))\n \n-        self.assertTrue(self.storage.exists(\"path/to\"))\n+        self.assertTrue(os.path.exists(os.path.join(self.temp_dir, \"path/to\")))\n         with self.storage.open(\"path/to/test.file\") as f:\n             self.assertEqual(f.read(), b\"file saved with path\")\n \n@@ -607,6 +614,7 @@ def test_custom_get_available_name(self):\n         self.storage.delete(second)\n \n \n+# RemovedInDjango60Warning: Remove this class.\n class OverwritingStorage(FileSystemStorage):\n     \"\"\"\n     Overwrite existing files instead of appending a suffix to generate an\n@@ -621,7 +629,26 @@ def get_available_name(self, name, max_length=None):\n         return name\n \n \n-class OverwritingStorageTests(FileStorageTests):\n+# RemovedInDjango60Warning: Remove this test class.\n+class OverwritingStorageOSOpenFlagsWarningTests(SimpleTestCase):\n+    storage_class = OverwritingStorage\n+\n+    def setUp(self):\n+        self.temp_dir = tempfile.mkdtemp()\n+        self.addCleanup(shutil.rmtree, self.temp_dir)\n+\n+    def test_os_open_flags_deprecation_warning(self):\n+        msg = \"Overriding OS_OPEN_FLAGS is deprecated. Use the allow_overwrite \"\n+        msg += \"parameter instead.\"\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            self.storage = self.storage_class(\n+                location=self.temp_dir, base_url=\"/test_media_url/\"\n+            )\n+\n+\n+# RemovedInDjango60Warning: Remove this test class.\n+@ignore_warnings(category=RemovedInDjango60Warning)\n+class OverwritingStorageOSOpenFlagsTests(FileStorageTests):\n     storage_class = OverwritingStorage\n \n     def test_save_overwrite_behavior(self):\n@@ -649,6 +676,65 @@ def test_save_overwrite_behavior(self):\n             self.storage.delete(name)\n \n \n+class OverwritingStorageTests(FileStorageTests):\n+    storage_class = FileSystemStorage\n+\n+    def setUp(self):\n+        self.temp_dir = tempfile.mkdtemp()\n+        self.addCleanup(shutil.rmtree, self.temp_dir)\n+        self.storage = self.storage_class(\n+            location=self.temp_dir, base_url=\"/test_media_url/\", allow_overwrite=True\n+        )\n+\n+    def test_save_overwrite_behavior(self):\n+        \"\"\"Saving to same file name twice overwrites the first file.\"\"\"\n+        name = \"test.file\"\n+        self.assertFalse(self.storage.exists(name))\n+        content_1 = b\"content one\"\n+        content_2 = b\"second content\"\n+        f_1 = ContentFile(content_1)\n+        f_2 = ContentFile(content_2)\n+        stored_name_1 = self.storage.save(name, f_1)\n+        try:\n+            self.assertEqual(stored_name_1, name)\n+            self.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+            with self.storage.open(name) as fp:\n+                self.assertEqual(fp.read(), content_1)\n+            stored_name_2 = self.storage.save(name, f_2)\n+            self.assertEqual(stored_name_2, name)\n+            self.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+            with self.storage.open(name) as fp:\n+                self.assertEqual(fp.read(), content_2)\n+        finally:\n+            self.storage.delete(name)\n+\n+    def test_save_overwrite_behavior_temp_file(self):\n+        \"\"\"Saving to same file name twice overwrites the first file.\"\"\"\n+        name = \"test.file\"\n+        self.assertFalse(self.storage.exists(name))\n+        content_1 = b\"content one\"\n+        content_2 = b\"second content\"\n+        f_1 = TemporaryUploadedFile(\"tmp1\", \"text/plain\", 11, \"utf8\")\n+        f_1.write(content_1)\n+        f_1.seek(0)\n+        f_2 = TemporaryUploadedFile(\"tmp2\", \"text/plain\", 14, \"utf8\")\n+        f_2.write(content_2)\n+        f_2.seek(0)\n+        stored_name_1 = self.storage.save(name, f_1)\n+        try:\n+            self.assertEqual(stored_name_1, name)\n+            self.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+            with self.storage.open(name) as fp:\n+                self.assertEqual(fp.read(), content_1)\n+            stored_name_2 = self.storage.save(name, f_2)\n+            self.assertEqual(stored_name_2, name)\n+            self.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+            with self.storage.open(name) as fp:\n+                self.assertEqual(fp.read(), content_2)\n+        finally:\n+            self.storage.delete(name)\n+\n+\n class DiscardingFalseContentStorage(FileSystemStorage):\n     def _save(self, name, content):\n         if content:\n", "problem_statement": "OverwritingStorageTests fail if a TemporaryUploadedFile is used\nDescription\n\t \nTicket #28144 added the option of using custom flags on a storage object to allow overwriting files in storage. However, this doesn't seem to work for temporary uploaded files, since the \u200balternate path is taken in the _save method.\nHere is an example test that fails for me - it loops forever:\ndiff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 420314573d..d404300708 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -648,6 +648,34 @@ class OverwritingStorageTests(FileStorageTests):\n\t\t finally:\n\t\t\t self.storage.delete(name)\n \n+\tdef test_save_overwrite_behavior_temp_file(self):\n+\t\t\"\"\"Saving to same file name twice overwrites the first file.\"\"\"\n+\t\tname = \"test.file\"\n+\t\tself.assertFalse(self.storage.exists(name))\n+\t\tcontent_1 = b\"content one\"\n+\t\tcontent_2 = b\"second content\"\n+\t\tf_1 = TemporaryUploadedFile('tmp1', 'text/plain', 11, 'utf8')\n+\t\tf_1.write(content_1)\n+\t\tf_1.seek(0)\n+\t\tf_2 = TemporaryUploadedFile('tmp2', 'text/plain', 14, 'utf8')\n+\t\tf_2.write(content_2)\n+\t\tf_2.seek(0)\n+\t\tstored_name_1 = self.storage.save(name, f_1)\n+\t\ttry:\n+\t\t\tself.assertEqual(stored_name_1, name)\n+\t\t\tself.assertTrue(self.storage.exists(name))\n+\t\t\tself.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+\t\t\twith self.storage.open(name) as fp:\n+\t\t\t\tself.assertEqual(fp.read(), content_1)\n+\t\t\tstored_name_2 = self.storage.save(name, f_2)\n+\t\t\tself.assertEqual(stored_name_2, name)\n+\t\t\tself.assertTrue(self.storage.exists(name))\n+\t\t\tself.assertTrue(os.path.exists(os.path.join(self.temp_dir, name)))\n+\t\t\twith self.storage.open(name) as fp:\n+\t\t\t\tself.assertEqual(fp.read(), content_2)\n+\t\tfinally:\n+\t\t\tself.storage.delete(name)\n", "hints_text": [["can i be assigned on this issue?", 1711284182.0], ["@alexialg05, yes, you can assign yourself to this issue, but we should probably see if others confirm this as an issue. If it is confirmed as an issue, there may be design questions to figure out.", 1711351560.0], ["Hello bcail, thank you for your report! This definitely seems like a valid issue, file_move_safe (from django.core.files.move) requires the allow_overwrite flag to be passed to perform overwrites. I don't have clarity on the possible fix, I agree that it requires a design decision. A forum post seeking advice would be the best next step, I think.", 1711358418.0], ["Thanks, @Natalia. I opened a new \u200bforum post.", 1711359102.0], ["I opened a \u200bdraft PR with a possible direction we could go.", 1711449439.0]], "created_at": "2024-03-26T15:29:32Z"}
{"repo": "django/django", "pull_number": 18001, "instance_id": "django__django-18001", "issue_numbers": ["35323"], "base_commit": "b6e2b83901d841cf4d2179f650d1e7dca7e90c16", "patch": "diff --git a/django/core/files/move.py b/django/core/files/move.py\nindex b25a1c8b2d69..d7a9c7026eac 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -32,13 +32,12 @@ def file_move_safe(\n     except OSError:\n         pass\n \n-    try:\n-        if not allow_overwrite and os.access(new_file_name, os.F_OK):\n-            raise FileExistsError(\n-                \"Destination file %s exists and allow_overwrite is False.\"\n-                % new_file_name\n-            )\n+    if not allow_overwrite and os.access(new_file_name, os.F_OK):\n+        raise FileExistsError(\n+            f\"Destination file {new_file_name} exists and allow_overwrite is False.\"\n+        )\n \n+    try:\n         os.rename(old_file_name, new_file_name)\n         return\n     except OSError:\n", "test_patch": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 9d3a471cb31b..4f6d1fa74bb2 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -426,9 +426,10 @@ def test_file_move_overwrite(self):\n         handle_a, self.file_a = tempfile.mkstemp()\n         handle_b, self.file_b = tempfile.mkstemp()\n \n-        # file_move_safe() raises OSError if the destination file exists and\n-        # allow_overwrite is False.\n-        with self.assertRaises(FileExistsError):\n+        # file_move_safe() raises FileExistsError if the destination file\n+        # exists and allow_overwrite is False.\n+        msg = r\"Destination file .* exists and allow_overwrite is False\\.\"\n+        with self.assertRaisesRegex(FileExistsError, msg):\n             file_move_safe(self.file_a, self.file_b, allow_overwrite=False)\n \n         # should allow it and continue on if allow_overwrite is True\n", "problem_statement": "Fix FileExistsError in django/core/files/move.py.\nDescription\n\t \nIn file_move_safe(), if the destination exists and allow_overwrite is False, \u200bFileExistsError is raised - but it's immediately swallowed because it's inside a try block. The code goes on to try the manual copy process, and a new FileExistsError is raised in that code.\n", "hints_text": [["I opened \u200ba PR.", 1711027562.0], ["Makes sense, good catch! I wonder if we could add a test that ensures that the first FileExistsError is not swallowed. Do you want to give that a try?", 1711030485.0], ["Thanks, Natalia. I updated the PR with a test for that specific FileExistsError.", 1711033470.0]], "created_at": "2024-03-21T18:19:18Z"}
{"repo": "django/django", "pull_number": 18000, "instance_id": "django__django-18000", "issue_numbers": ["35320"], "base_commit": "6a37e9bfae42eb180a8c978a3ade5b41c97c26b1", "patch": "diff --git a/django/core/files/move.py b/django/core/files/move.py\nindex 95d69f9d944c..b25a1c8b2d69 100644\n--- a/django/core/files/move.py\n+++ b/django/core/files/move.py\n@@ -13,20 +13,6 @@\n __all__ = [\"file_move_safe\"]\n \n \n-def _samefile(src, dst):\n-    # Macintosh, Unix.\n-    if hasattr(os.path, \"samefile\"):\n-        try:\n-            return os.path.samefile(src, dst)\n-        except OSError:\n-            return False\n-\n-    # All other platforms: check for same pathname.\n-    return os.path.normcase(os.path.abspath(src)) == os.path.normcase(\n-        os.path.abspath(dst)\n-    )\n-\n-\n def file_move_safe(\n     old_file_name, new_file_name, chunk_size=1024 * 64, allow_overwrite=False\n ):\n@@ -40,8 +26,11 @@ def file_move_safe(\n     ``FileExistsError``.\n     \"\"\"\n     # There's no reason to move if we don't have to.\n-    if _samefile(old_file_name, new_file_name):\n-        return\n+    try:\n+        if os.path.samefile(old_file_name, new_file_name):\n+            return\n+    except OSError:\n+        pass\n \n     try:\n         if not allow_overwrite and os.access(new_file_name, os.F_OK):\n", "test_patch": "", "problem_statement": "Remove unnecessary django.core.files.move._samefile() hook.\nDescription\n\t \nCurrently, there's a custom \u200b_samefile() function in core/files/move.py. It checks for whether os.path has a samefile function, and falls back to another implementation if it doesn't.\nIn 2012, Python \u200bwas updated to put samefile in genericpath, so it's always available in os.path.\nCould we remove the custom _samefile() function and always use the Python version?\n", "hints_text": [], "created_at": "2024-03-20T20:48:22Z"}
{"repo": "django/django", "pull_number": 17995, "instance_id": "django__django-17995", "issue_numbers": ["24076"], "base_commit": "7e39ae5c8cf4c6601a4f47b72914349481c5331b", "patch": "diff --git a/docs/ref/models/fields.txt b/docs/ref/models/fields.txt\nindex ba46726ab8c3..f76ee26a70ac 100644\n--- a/docs/ref/models/fields.txt\n+++ b/docs/ref/models/fields.txt\n@@ -808,6 +808,15 @@ Any combination of these options will result in an error.\n     instead of a ``DateField`` and deciding how to handle the conversion from\n     datetime to date at display time.\n \n+.. warning:: Always use :class:`DateField` with a ``datetime.date`` instance.\n+\n+    If you have a ``datetime.datetime`` instance, it's recommended to convert\n+    it to a ``datetime.date`` first. If you don't, :class:`DateField` will\n+    localize the ``datetime.datetime`` to the :ref:`default timezone\n+    <default-current-time-zone>` and convert it to a ``datetime.date``\n+    instance, removing its time component. This is true for both storage and\n+    comparison.\n+\n ``DateTimeField``\n -----------------\n \n@@ -820,6 +829,16 @@ The default form widget for this field is a single\n :class:`~django.forms.DateTimeInput`. The admin uses two separate\n :class:`~django.forms.TextInput` widgets with JavaScript shortcuts.\n \n+.. warning:: Always use :class:`DateTimeField` with a ``datetime.datetime``\n+    instance.\n+\n+    If you have a ``datetime.date`` instance, it's recommended to convert it to\n+    a ``datetime.datetime`` first. If you don't, :class:`DateTimeField` will\n+    use midnight in the :ref:`default timezone <default-current-time-zone>` for\n+    the time component. This is true for both storage and comparison. To\n+    compare the date portion of a :class:`DateTimeField` with a\n+    ``datetime.date`` instance, use the :lookup:`date` lookup.\n+\n ``DecimalField``\n ----------------\n \n", "test_patch": "", "problem_statement": "Query may fail with pytz exception\nDescription\n\t \nIf I give date object as input to a filter on a DateTimeField field, like this:\nclass Ticket(models.Model):\n\tregister_time = models.DateTimeField(auto_now_add=True)\nday = datetime.strptime('2014-10-19', '%Y-%m-%d').date()\nTicket.objects.filter(register_time__gte=day)\nI may get a pytz.exceptions.NonExistentTimeError exception. The exact exception was:\npytz.exceptions.NonExistentTimeError: 2014-10-19 00:00:00\nThis date is the start of DST in my timezone:\nTIME_ZONE = 'America/Sao_Paulo'\nI believe this is a bug because Django tries to convert my input to a datetime object before building the query, and in this case, this conversion yields an invalid datetime.\nThis bug seems very related to issue #9596, because in these cases, datetime should be converted to date, not the opposite.\nA minimal showcase is attached. Unzip and run ./manage.py test\n", "hints_text": [["Minimal showcase.", 1420309497.0], ["That's the intended behavior -- Django won't guess what you mean if you pass invalid inputs. However, if #9596 gets fixed with the idea of comment 24, you will be able to run Ticket.objects.filter(register_time__date__gte=day). Until then, you're stuck with comparing with an aware datetime object. See \u200bhttps://www.python.org/dev/peps/pep-0431/#ambiguous-times for why this is awfully complicated.", 1420337683.0], ["Replying to aaugustin: That's the intended behavior -- Django won't guess what you mean if you pass invalid inputs. But if using date to compare with datetime works 99% of the time, and there is no big warning in the documentation, saying that it must not be done, it clearly violates the principle of least astonishment. In such cases, either it should always work, or should always fail with an error. And it is not that hard to make it work, for instead of trying to add time information to the date before passing it to the database, the database type should be converted to date, dropping the time information in the process. Actually, my workaround in the case was to force Django to deliver my input in SQL as date, not as datetime: q = Ticket.objects.filter(register_time__gte=day + (F('id') - F('id'))) print(q.query) yields: SELECT \"reproduce_ticket\".\"id\", \"reproduce_ticket\".\"register_time\" FROM \"reproduce_ticket\" WHERE \"reproduce_ticket\".\"register_time\" >= 2014-10-19 + (\"reproduce_ticket\".\"id\" - \"reproduce_ticket\".\"id\") and it worked! Compare with the original query (with another date so it won't raise the exception): q = Ticket.objects.filter(register_time__gte=day) print(q.query) SELECT \"reproduce_ticket\".\"id\", \"reproduce_ticket\".\"register_time\" FROM \"reproduce_ticket\" WHERE \"reproduce_ticket\".\"register_time\" >= 2014-11-19 02:00:00", 1420369039.0], ["Thanks for the proposal. Unfortunately it won't work on databases other than PostgreSQL because they store datetimes in UTC. As a consequence they're vulnerable to the effect I described in question 3 in the \u200btimezone troubleshooting FAQ. I considered this issue carefully when I implemented support for time zones in Django 1.4. I was aware of the points you're making. I decided that forbidding mixing dates and datetimes outright was too extreme. It would require many changes in projects that work just fine because they never see datetimes during the DST switch. It's the left-hand-side of a lookup that determines the type, not the right-hand-side. Therefore the correct solution is to implement an explicit __date lookup i.e. #9596. That's the opposite of what you requested when you filed the ticket but that also what you recommended in your last comment: the database type should be converted to date, dropping the time information in the process This solution requires timezone conversion of datetimes in the database but it shouldn't be an issue as it already exists to support the dates() and datetimes() queryset methods. I'm going to requalify this as a documentation issue because comparing dates with datetimes is probably a common error and I don't think the docs warn against it. I don't know where the warning should be added, though.", 1420379162.0], ["I wonder if this issue can be closed with no documentation changes for the following reasons: The __date__gte lookup (mentioned in comment 1) and others for DateTimeField have been implemented for a long time. pytz has been removed as of Django 5.0. Support for time zones has now been core to Django for almost 12 years. The documentation for the lookup mentioned above seems sufficient to me to help future users wondering how to compare a DateTimeField with a datetime.date: \u200bhttps://docs.djangoproject.com/en/dev/ref/models/querysets/#date. However, I'd be happy to work on a documentation patch if someone can provide an idea of what is needed to close this ticket.", 1710495806.0], ["The following comment by Aymeric is crucial, and, as far as I'm aware, it's not fixed: I'm going to requalify this as a documentation issue because comparing dates with datetimes is probably a common error and I don't think the docs warn against it. I don't know where the warning should be added, though.", 1710813877.0], ["Thanks! I opened a PR with an attempt at documenting this. Please let me know if the content or location needs to be improved.", 1710885886.0]], "created_at": "2024-03-20T03:04:05Z"}
{"repo": "django/django", "pull_number": 17985, "instance_id": "django__django-17985", "issue_numbers": ["35301"], "base_commit": "b07e2d57a000d98c73492e5242fed91d502a780a", "patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex f842faf0dab7..ed7be7dd7a84 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -969,12 +969,14 @@ def total_unique_constraints(self):\n     def _property_names(self):\n         \"\"\"Return a set of the names of the properties defined on the model.\"\"\"\n         names = set()\n+        seen = set()\n         for klass in self.model.__mro__:\n             names |= {\n                 name\n                 for name, value in klass.__dict__.items()\n-                if isinstance(value, property)\n+                if isinstance(value, property) and name not in seen\n             }\n+            seen |= set(klass.__dict__)\n         return frozenset(names)\n \n     @cached_property\n", "test_patch": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex a589fec80721..8b6d705acb69 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1343,6 +1343,17 @@ class Model(models.Model):\n             ],\n         )\n \n+    def test_inherited_overriden_property_no_clash(self):\n+        class Cheese:\n+            @property\n+            def filling_id(self):\n+                pass\n+\n+        class Sandwich(Cheese, models.Model):\n+            filling = models.ForeignKey(\"self\", models.CASCADE)\n+\n+        self.assertEqual(Sandwich.check(), [])\n+\n     def test_single_primary_key(self):\n         class Model(models.Model):\n             foo = models.IntegerField(primary_key=True)\n", "problem_statement": "Overriding a @property of an abstract model with a GenericRelation causes a models.E025 error.\nDescription\n\t \nAs of faeb92ea13f0c1b2cc83f45b512f2c41cfb4f02d, Django traverses the model's MRO to find the names of properties, to later be used in different places, such as \u200bthe check for models.E025. However, this does not take into account any properties that may have been overridden by the final concrete model into something else (that's not a @property).\nThe previous logic only checks for attributes in dir(self.model), so if the @property has been overridden, it will not trigger the error.\nAs an example use case, in Wagtail we have a Revision model that uses a GenericForeignKey to allow saving revisions of any model. For its companion, we have an abstract model called RevisionMixin that gives you methods like save_revision, as well as a revisions property to query the revisions. The default revisions property is implemented as a @property instead of a proper GenericRelation, because we need to handle the case where the model may use multi-table inheritance (#31269).\nIn Wagtail, we handle it by having two content types in the Revision model: the base_content_type (the first non-abstract model) and the content_type (of the most specific model). In the base RevisionMixin abstract class, we define a revisions @property that queries the Revision model directly using the most basic content type, e.g. Revision.objects.filter(base_content_type=self.get_base_content_type(), object_id=str(self.pk)). This ensures that the revisions property always returns the correct items, regardless which model (parent vs. child) is used for querying.\nFor models that don't use multi-table inheritance, we've been suggesting developers to override the revisions @property with a GenericRelation directly (e.g. revisions = GenericRelation(...)). This allows them to define the related_query_name, without having to use a different name for the GenericRelation itself (e.g. _revisions) and without having to override the revisions @property to return that GenericRelation.\nNow that I'm aware of the system check, I'm also not sure if it's safe to override a @property with a GenericRelation in a subclass. There might be quirks of @property that would interfere with how GenericRelation works, that I didn't know of. But if it's safe, then the error shouldn't have been raised.\nIt looks like the new Django behaviour might not be intended, as the PR and ticket for that commit seem to suggest it was only meant as an optimisation.\nIf Django would like to keep its new behaviour, I could see a few options for us to proceed:\na) Use cached_property instead to bypass the system check (not sure if this is a good idea)\nb) Communicate to developers that they should not override the @property directly with a GenericRelation, and should instead define the GenericRelation with a different name e.g. _revisions and override the default @property to return that GenericRelation.\nI have created a simpler reproduction here: \u200bhttps://github.com/laymonage/django-e025-repro, with models that use tags instead of revisions. It also simulates how we worked around #31269.\nThanks!\n", "hints_text": [["Thanks for the detailed report and early testing!", 1710397380.0], ["Yeah thanks. I have an idea to fix this by keeping track of seen names whilst iterating. Will give it a try tonight.", 1710402764.0], ["Thanks both! Here's a much more minimal reproduction that still somewhat makes sense. from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation from django.contrib.contenttypes.models import ContentType from django.db import models class Generic(models.Model): content_type = models.ForeignKey( ContentType, related_name=\"+\", on_delete=models.CASCADE, ) object_id = models.CharField(max_length=255) content_object = GenericForeignKey() class Abstract(models.Model): @property def generics(self): return Generic.objects.filter( content_type=ContentType.objects.get_for_model(self), object_id=str(self.pk), ) class Meta: abstract = True class Concrete(Abstract): generics = GenericRelation(Generic, related_query_name=\"concrete\")", 1710406882.0]], "created_at": "2024-03-16T12:14:13Z"}
{"repo": "django/django", "pull_number": 17984, "instance_id": "django__django-17984", "issue_numbers": ["35309"], "base_commit": "921670c6943e9c532137b7d164885f2d3ab436b8", "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex a2f00eb172c4..c7848ee63a3e 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -195,6 +195,9 @@ def get_prefetch_querysets(self, instances, querysets=None):\n         else:\n             query = {\"%s__in\" % self.field.related_query_name(): instances}\n         queryset = queryset.filter(**query)\n+        # There can be only one object prefetched for each instance so clear\n+        # ordering if the query allows it without side effects.\n+        queryset.query.clear_ordering()\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n@@ -469,6 +472,9 @@ def get_prefetch_querysets(self, instances, querysets=None):\n         instances_dict = {instance_attr(inst): inst for inst in instances}\n         query = {\"%s__in\" % self.related.field.name: instances}\n         queryset = queryset.filter(**query)\n+        # There can be only one object prefetched for each instance so clear\n+        # ordering if the query allows it without side effects.\n+        queryset.query.clear_ordering()\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n", "test_patch": "diff --git a/tests/prefetch_related/test_prefetch_related_objects.py b/tests/prefetch_related/test_prefetch_related_objects.py\nindex ca1f904c5205..eea9a7fff78c 100644\n--- a/tests/prefetch_related/test_prefetch_related_objects.py\n+++ b/tests/prefetch_related/test_prefetch_related_objects.py\n@@ -1,7 +1,7 @@\n from django.db.models import Prefetch, prefetch_related_objects\n from django.test import TestCase\n \n-from .models import Author, Book, Reader\n+from .models import Author, Book, House, Reader, Room\n \n \n class PrefetchRelatedObjectsTests(TestCase):\n@@ -33,6 +33,17 @@ def setUpTestData(cls):\n         cls.reader1.books_read.add(cls.book1, cls.book4)\n         cls.reader2.books_read.add(cls.book2, cls.book4)\n \n+        cls.house1 = House.objects.create(name=\"b1\", address=\"1\")\n+        cls.house2 = House.objects.create(name=\"b2\", address=\"2\")\n+\n+        cls.room1 = Room.objects.create(name=\"a1\", house=cls.house1)\n+        cls.room2 = Room.objects.create(name=\"a2\", house=cls.house2)\n+\n+        cls.house1.main_room = cls.room1\n+        cls.house1.save()\n+        cls.house2.main_room = cls.room2\n+        cls.house2.save()\n+\n     def test_unknown(self):\n         book1 = Book.objects.get(id=self.book1.id)\n         with self.assertRaises(AttributeError):\n@@ -58,20 +69,75 @@ def test_m2m_reverse(self):\n \n     def test_foreignkey_forward(self):\n         authors = list(Author.objects.all())\n-        with self.assertNumQueries(1):\n+        with self.assertNumQueries(1) as ctx:\n             prefetch_related_objects(authors, \"first_book\")\n+        self.assertNotIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n \n         with self.assertNumQueries(0):\n             [author.first_book for author in authors]\n \n+        authors = list(Author.objects.all())\n+        with self.assertNumQueries(1) as ctx:\n+            prefetch_related_objects(\n+                authors,\n+                Prefetch(\"first_book\", queryset=Book.objects.order_by(\"-title\")),\n+            )\n+        self.assertNotIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n+\n     def test_foreignkey_reverse(self):\n         books = list(Book.objects.all())\n-        with self.assertNumQueries(1):\n+        with self.assertNumQueries(1) as ctx:\n             prefetch_related_objects(books, \"first_time_authors\")\n+        self.assertIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n \n         with self.assertNumQueries(0):\n             [list(book.first_time_authors.all()) for book in books]\n \n+        books = list(Book.objects.all())\n+        with self.assertNumQueries(1) as ctx:\n+            prefetch_related_objects(\n+                books,\n+                Prefetch(\n+                    \"first_time_authors\",\n+                    queryset=Author.objects.order_by(\"-name\"),\n+                ),\n+            )\n+        self.assertIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n+\n+    def test_one_to_one_forward(self):\n+        houses = list(House.objects.all())\n+        with self.assertNumQueries(1) as ctx:\n+            prefetch_related_objects(houses, \"main_room\")\n+        self.assertNotIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n+\n+        with self.assertNumQueries(0):\n+            [house.main_room for house in houses]\n+\n+        houses = list(House.objects.all())\n+        with self.assertNumQueries(1) as ctx:\n+            prefetch_related_objects(\n+                houses,\n+                Prefetch(\"main_room\", queryset=Room.objects.order_by(\"-name\")),\n+            )\n+        self.assertNotIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n+\n+    def test_one_to_one_reverse(self):\n+        rooms = list(Room.objects.all())\n+        with self.assertNumQueries(1) as ctx:\n+            prefetch_related_objects(rooms, \"main_room_of\")\n+        self.assertNotIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n+\n+        with self.assertNumQueries(0):\n+            [room.main_room_of for room in rooms]\n+\n+        rooms = list(Room.objects.all())\n+        with self.assertNumQueries(1) as ctx:\n+            prefetch_related_objects(\n+                rooms,\n+                Prefetch(\"main_room_of\", queryset=House.objects.order_by(\"-name\")),\n+            )\n+        self.assertNotIn(\"ORDER BY\", ctx.captured_queries[0][\"sql\"])\n+\n     def test_m2m_then_m2m(self):\n         \"\"\"A m2m can be followed through another m2m.\"\"\"\n         authors = list(Author.objects.all())\n", "problem_statement": "Elide ordering of prefetch querysets for single valued relationships\nDescription\n\t\t\n(last modified by Laurent Lyaudet)\t\t\nWhile the ordering of multi-valued relationships must be preserved when prefetching relationships is it unnecessary when using prefetch_related against single valued relationships.\nFor example, given the following models\nclass Author(models.Model):\n\tname = models.CharField(max_length=200)\n\tclass Meta:\n\t\tordering = [\"name\"]\nclass Book(models.Model):\n\ttitle = models.CharField(max_length=200)\n\tauthor = models.ForeignKey(Author, related_name=\"books\", on_delete=models.CASCADE)\n\tclass Meta:\n\t\tordering = [\"title\"]\nThe ordering of an author's books in Author.objects.prefetch_related(\"books\") has a significance as multiple books might be associated with each authors.\nIt's not the case for a book's author in Book.objects.prefetch_related(\"author\") through as the relationship can only contain a single author and there is a single way to order the members of a singleton.\nIn other words sorted([element], key=sort_func) will result in [element] for any sort_func.\nThis property holds true for all the single valued relationships that the ORM supports (backward and forward 1:1 and forward 1:M) which allows the prefetching to elide any predefined ordering safely to avoid an unnecessary and possibly expensive ordering defined for the related model queryset.\nCurrently the prefetch of authors will use the order by and add useless load on the DB server.\nIt would be useful to remove this order by.\n#ClimateChangeBrake\n", "hints_text": [["Meta.ordering is working as expected, please \u200brefer to its documentation and associated warning Ordering is not a free operation. Each field you add to the ordering incurs a cost to your database. Each foreign key you add will implicitly include all of its default orderings as well. If you don't want this implicit behaviour then don't use Meta.ordering. If you want to keep using it but not for particular prefetches than use Prefetch objects with a queryset that explicitly calls order_by() to disable ordering. B.objects.prefetch_related(Prefetch(\"a\", A.objects.order_by()))", 1710530134.0], ["Again a fast and without thought answer. I already know for this solution with Prefetch. Continue bashing good ideas because you don't like people giving them. I'll applaude at the end. There is no way it is useful to keep an order by when you do a query SELECT * FROM a WHERE a.id IN (.....100 or more ids here) ORDER BY name; then add the result in the cache of B objects. What you reject without thought yields a speed-up of 10 to 15 % on very big prefetches...", 1710531280.0], ["Please refrain from assuming bad faith from triagers regarding the resolution of this ticket. The provided resolution was a reflected based on your report details and in no way based on your persona. What do you suggest should happen for the thousands of projects out there that rely on prefetch_related to return results in a way that respects Meta.ordering? We can't simply make the behaviour of prefetch_related inconsistent with the normal behaviour or related manager access because it performs poorly when defined against an non-indexed field. I think the documentation warning I referred to is unfortunately all we can do to warn about this behaviour. Either use Meta.ordering and be prepared to deal with its implicit footguns or don't use it and use order_by where appropriate. Whether Meta.ordering should exist in the first place is debatable as it's at the origin of many unexpected behaviour with other features of the ORM (aggregation comes to mind) but making prefetch_related special case it would not only be backward incompatible but inconsistent with how the rest of the framework treats it.", 1710538813.0], ["I spent my night on it but I was able to make a patch, and I don't think there will be any regression. Consider the following models in some project TestNoOrderByForForeignKeyPrefetches and some app test_no_order_by models.py file: from django.db import models class A(models.Model): name = models.CharField(max_length=200) class Meta: ordering = [\"name\"] class B(models.Model): name = models.CharField(max_length=200) a = models.ForeignKey(A, related_name=\"bs\", on_delete=models.CASCADE) class Meta: ordering = [\"name\"] Then consider the following command TestNoOrderByForForeignKeyPrefetches/test_no_order_by/management/commands/test_no_order_by_command.py : from django.core.management.base import BaseCommand from django.db import connection from django.db.models import Prefetch, QuerySet, RawQuerySet from django.db.models.fields.related_descriptors import ( ForwardManyToOneDescriptor, ReverseOneToOneDescriptor, ) from TestNoOrderByForForeignKeyPrefetches.test_no_order_by.models import A, B old_prefetch_init = Prefetch.__init__ def new_prefetch_init(self, *args, **kwargs): result = old_prefetch_init(self, *args, **kwargs) if self.queryset is not None: self.queryset._do_not_modify_order_by = True return result Prefetch.__init__ = new_prefetch_init old_get_prefetch_querysets_forward_many_to_one = ForwardManyToOneDescriptor.get_prefetch_querysets old_get_prefetch_querysets_reverse_one_to_one = ReverseOneToOneDescriptor.get_prefetch_querysets def get_prefetch_querysets_forward_many_to_one(self, *args, **kwargs): result = old_get_prefetch_querysets_forward_many_to_one(self, *args, **kwargs) if not hasattr(result[0], '_do_not_modify_order_by'): result = (result[0].order_by(), *result[1:]) return result def get_prefetch_querysets_reverse_one_to_one(self, *args, **kwargs): result = old_get_prefetch_querysets_reverse_one_to_one(self, *args, **kwargs) if not hasattr(result[0], '_do_not_modify_order_by'): result = (result[0].order_by(), *result[1:]) return result ForwardManyToOneDescriptor.get_prefetch_querysets = get_prefetch_querysets_forward_many_to_one ReverseOneToOneDescriptor.get_prefetch_querysets = get_prefetch_querysets_reverse_one_to_one old_clone_queryset = QuerySet._clone def new_clone_queryset(self): result = old_clone_queryset(self) if hasattr(self, '_do_not_modify_order_by'): result._do_not_modify_order_by = True return result QuerySet._clone = new_clone_queryset old_clone_raw_queryset = RawQuerySet._clone def new_clone_raw_queryset(self): result = old_clone_raw_queryset(self) if hasattr(self, '_do_not_modify_order_by'): result._do_not_modify_order_by = True return result RawQuerySet._clone = new_clone_raw_queryset class Command(BaseCommand): help = \"Test\" def handle(self, *args, **options): B.objects.all().delete() A.objects.all().delete() a1 = A.objects.create(name=\"a1\") a2 = A.objects.create(name=\"a2\") a3 = A.objects.create(name=\"a3\") a4 = A.objects.create(name=\"a4\") a5 = A.objects.create(name=\"a5\") a6 = A.objects.create(name=\"a6\") a7 = A.objects.create(name=\"a7\") b1 = B.objects.create(a=a1, name=\"b1\") b2 = B.objects.create(a=a2, name=\"b2\") b3 = B.objects.create(a=a3, name=\"b3\") b4 = B.objects.create(a=a4, name=\"b4\") b5 = B.objects.create(a=a5, name=\"b5\") b6 = B.objects.create(a=a6, name=\"b6\") b7 = B.objects.create(a=a7, name=\"b7\") bs = list(B.objects.all().prefetch_related(\"a\")) a_s = list(A.objects.all().prefetch_related(\"bs\")) bs = list(B.objects.all().prefetch_related( Prefetch( \"a\", queryset=A.objects.order_by(\"-name\") ), )) a_s = list(A.objects.all().prefetch_related( Prefetch( \"bs\", queryset=B.objects.order_by(\"-name\") ), )) print(connection.queries) If you launch the command with python3 manage.py test_no_order_by_command, you will see that there are 8 SELECT after the 14 INSERT and that there is only 7 ORDER BY on them as requested. I will prepare a PR.", 1710549223.0], ["\u200bPR", 1710551387.0], ["Here is the PR, I will improve it when requested : \u200bhttps://github.com/django/django/pull/17984 :) I still have doubts about keeping the order by even with manual Prefetch. I need to verify if it is possible to bypass the filter by id.", 1710555004.0], ["Laurent, thanks for this patch, however I agree with Simon. I appreciate you'd like to reopen the ticket, but please \u200bfollow the triaging guidelines with regards to wontfix tickets and take this to DevelopersMailingList.", 1710567356.0]], "created_at": "2024-03-16T07:06:54Z"}
{"repo": "django/django", "pull_number": 17981, "instance_id": "django__django-17981", "issue_numbers": ["35233"], "base_commit": "b98271a6e42107233311d17f5d7bc74fbb47f22c", "patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 681aa1f31722..72a3212e560b 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -1,75 +1,12 @@\n-import copy\n-from collections import defaultdict\n-\n-from django.conf import settings\n-from django.template.backends.django import get_template_tag_modules\n-\n-from . import Error, Tags, Warning, register\n-\n-E001 = Error(\n-    \"You have 'APP_DIRS': True in your TEMPLATES but also specify 'loaders' \"\n-    \"in OPTIONS. Either remove APP_DIRS or remove the 'loaders' option.\",\n-    id=\"templates.E001\",\n-)\n-E002 = Error(\n-    \"'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: {} ({}).\",\n-    id=\"templates.E002\",\n-)\n-W003 = Warning(\n-    \"{} is used for multiple template tag modules: {}\",\n-    id=\"templates.E003\",\n-)\n+from . import Tags, register\n \n \n @register(Tags.templates)\n-def check_setting_app_dirs_loaders(app_configs, **kwargs):\n-    return (\n-        [E001]\n-        if any(\n-            conf.get(\"APP_DIRS\") and \"loaders\" in conf.get(\"OPTIONS\", {})\n-            for conf in settings.TEMPLATES\n-        )\n-        else []\n-    )\n-\n-\n-@register(Tags.templates)\n-def check_string_if_invalid_is_string(app_configs, **kwargs):\n-    errors = []\n-    for conf in settings.TEMPLATES:\n-        string_if_invalid = conf.get(\"OPTIONS\", {}).get(\"string_if_invalid\", \"\")\n-        if not isinstance(string_if_invalid, str):\n-            error = copy.copy(E002)\n-            error.msg = error.msg.format(\n-                string_if_invalid, type(string_if_invalid).__name__\n-            )\n-            errors.append(error)\n-    return errors\n-\n+def check_templates(app_configs, **kwargs):\n+    \"\"\"Check all registered template engines.\"\"\"\n+    from django.template import engines\n \n-@register(Tags.templates)\n-def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(set)\n-\n-    for conf in settings.TEMPLATES:\n-        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n-        for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].add(module_path)\n-\n-    for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].add(module_path)\n-\n-    for library_name, items in libraries.items():\n-        if len(items) > 1:\n-            errors.append(\n-                Warning(\n-                    W003.msg.format(\n-                        repr(library_name),\n-                        \", \".join(repr(item) for item in sorted(items)),\n-                    ),\n-                    id=W003.id,\n-                )\n-            )\n-\n+    for engine in engines.all():\n+        errors.extend(engine.check())\n     return errors\ndiff --git a/django/template/backends/base.py b/django/template/backends/base.py\nindex 991ce64cb75e..f08eb2464be0 100644\n--- a/django/template/backends/base.py\n+++ b/django/template/backends/base.py\n@@ -23,6 +23,9 @@ def __init__(self, params):\n                 \"Unknown parameters: {}\".format(\", \".join(params))\n             )\n \n+    def check(self, **kwargs):\n+        return []\n+\n     @property\n     def app_dirname(self):\n         raise ImproperlyConfigured(\ndiff --git a/django/template/backends/django.py b/django/template/backends/django.py\nindex ba561bba9f61..cf6874c408ef 100644\n--- a/django/template/backends/django.py\n+++ b/django/template/backends/django.py\n@@ -1,8 +1,10 @@\n+from collections import defaultdict\n from importlib import import_module\n from pkgutil import walk_packages\n \n from django.apps import apps\n from django.conf import settings\n+from django.core.checks import Error, Warning\n from django.template import TemplateDoesNotExist\n from django.template.context import make_context\n from django.template.engine import Engine\n@@ -25,6 +27,50 @@ def __init__(self, params):\n         super().__init__(params)\n         self.engine = Engine(self.dirs, self.app_dirs, **options)\n \n+    def check(self, **kwargs):\n+        return [\n+            *self._check_string_if_invalid_is_string(),\n+            *self._check_for_template_tags_with_the_same_name(),\n+        ]\n+\n+    def _check_string_if_invalid_is_string(self):\n+        value = self.engine.string_if_invalid\n+        if not isinstance(value, str):\n+            return [\n+                Error(\n+                    \"'string_if_invalid' in TEMPLATES OPTIONS must be a string but \"\n+                    \"got: %r (%s).\" % (value, type(value)),\n+                    obj=self,\n+                    id=\"templates.E002\",\n+                )\n+            ]\n+        return []\n+\n+    def _check_for_template_tags_with_the_same_name(self):\n+        libraries = defaultdict(set)\n+\n+        for module_name, module_path in get_template_tag_modules():\n+            libraries[module_name].add(module_path)\n+\n+        for module_name, module_path in self.engine.libraries.items():\n+            libraries[module_name].add(module_path)\n+\n+        errors = []\n+\n+        for library_name, items in libraries.items():\n+            if len(items) > 1:\n+                items = \", \".join(repr(item) for item in sorted(items))\n+                errors.append(\n+                    Warning(\n+                        f\"{library_name!r} is used for multiple template tag modules: \"\n+                        f\"{items}\",\n+                        obj=self,\n+                        id=\"templates.W003\",\n+                    )\n+                )\n+\n+        return errors\n+\n     def from_string(self, template_code):\n         return Template(self.engine.from_string(template_code), self)\n \ndiff --git a/docs/ref/checks.txt b/docs/ref/checks.txt\nindex cf0ab32efa74..efc8cf666a23 100644\n--- a/docs/ref/checks.txt\n+++ b/docs/ref/checks.txt\n@@ -575,7 +575,9 @@ configured:\n \n * **templates.E001**: You have ``'APP_DIRS': True`` in your\n   :setting:`TEMPLATES` but also specify ``'loaders'`` in ``OPTIONS``. Either\n-  remove ``APP_DIRS`` or remove the ``'loaders'`` option.\n+  remove ``APP_DIRS`` or remove the ``'loaders'`` option. *This check is\n+  removed in Django 5.1 as system checks may now raise*\n+  ``ImproperlyConfigured`` *instead.*\n * **templates.E002**: ``string_if_invalid`` in :setting:`TEMPLATES`\n   :setting:`OPTIONS <TEMPLATES-OPTIONS>` must be a string but got: ``{value}``\n   (``{type}``).\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 2dbacf08f746..fbb05d754873 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -307,6 +307,9 @@ Templates\n   example, to generate a link to the next page while keeping any filtering\n   options in place.\n \n+* :ref:`Template engines <field-checking>` now implement a ``check()`` method\n+  that is already registered with the check framework.\n+\n Tests\n ~~~~~\n \ndiff --git a/docs/topics/checks.txt b/docs/topics/checks.txt\nindex 3e3bbe19d658..94ba66f0db9a 100644\n--- a/docs/topics/checks.txt\n+++ b/docs/topics/checks.txt\n@@ -130,18 +130,18 @@ The code below is equivalent to the code above::\n \n .. _field-checking:\n \n-Field, model, manager, and database checks\n-------------------------------------------\n+Field, model, manager, template engine, and database checks\n+-----------------------------------------------------------\n \n In some cases, you won't need to register your check function -- you can\n piggyback on an existing registration.\n \n-Fields, models, model managers, and database backends all implement a\n-``check()`` method that is already registered with the check framework. If you\n-want to add extra checks, you can extend the implementation on the base class,\n-perform any extra checks you need, and append any messages to those generated\n-by the base class. It's recommended that you delegate each check to separate\n-methods.\n+Fields, models, model managers, template engines, and database backends all\n+implement a ``check()`` method that is already registered with the check\n+framework. If you want to add extra checks, you can extend the implementation\n+on the base class, perform any extra checks you need, and append any messages\n+to those generated by the base class. It's recommended that you delegate each\n+check to separate methods.\n \n Consider an example where you are implementing a custom field named\n ``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the\n@@ -195,6 +195,10 @@ the only difference is that the check is a classmethod, not an instance method::\n             # ... your own checks ...\n             return errors\n \n+.. versionchanged:: 5.1\n+\n+    In older versions, template engines didn't implement a ``check()`` method.\n+\n Writing tests\n -------------\n \n", "test_patch": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex c8a2f83b8a34..18f705ddb8e4 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -1,128 +1,105 @@\n-from copy import copy, deepcopy\n-\n-from django.core.checks import Warning\n-from django.core.checks.templates import (\n-    E001,\n-    E002,\n-    W003,\n-    check_for_template_tags_with_the_same_name,\n-    check_setting_app_dirs_loaders,\n-    check_string_if_invalid_is_string,\n-)\n+from copy import deepcopy\n+from itertools import chain\n+\n+from django.core.checks import Error, Warning\n+from django.core.checks.templates import check_templates\n+from django.template import engines\n+from django.template.backends.base import BaseEngine\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n \n \n-class CheckTemplateSettingsAppDirsTest(SimpleTestCase):\n-    TEMPLATES_APP_DIRS_AND_LOADERS = [\n-        {\n-            \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n-            \"APP_DIRS\": True,\n-            \"OPTIONS\": {\n-                \"loaders\": [\"django.template.loaders.filesystem.Loader\"],\n-            },\n-        },\n-    ]\n+class ErrorEngine(BaseEngine):\n+    def __init__(self, params):\n+        params.pop(\"OPTIONS\")\n+        super().__init__(params)\n \n-    @override_settings(TEMPLATES=TEMPLATES_APP_DIRS_AND_LOADERS)\n-    def test_app_dirs_and_loaders(self):\n-        \"\"\"\n-        Error if template loaders are specified and APP_DIRS is True.\n-        \"\"\"\n-        self.assertEqual(check_setting_app_dirs_loaders(None), [E001])\n+    def check(self, **kwargs):\n+        return [Error(\"Example\")]\n \n-    def test_app_dirs_removed(self):\n-        TEMPLATES = deepcopy(self.TEMPLATES_APP_DIRS_AND_LOADERS)\n-        del TEMPLATES[0][\"APP_DIRS\"]\n-        with self.settings(TEMPLATES=TEMPLATES):\n-            self.assertEqual(check_setting_app_dirs_loaders(None), [])\n \n-    def test_loaders_removed(self):\n-        TEMPLATES = deepcopy(self.TEMPLATES_APP_DIRS_AND_LOADERS)\n-        del TEMPLATES[0][\"OPTIONS\"][\"loaders\"]\n-        with self.settings(TEMPLATES=TEMPLATES):\n-            self.assertEqual(check_setting_app_dirs_loaders(None), [])\n+class CheckTemplatesTests(SimpleTestCase):\n+    @override_settings(\n+        TEMPLATES=[\n+            {\"BACKEND\": f\"{__name__}.{ErrorEngine.__qualname__}\", \"NAME\": \"backend_1\"},\n+            {\"BACKEND\": f\"{__name__}.{ErrorEngine.__qualname__}\", \"NAME\": \"backend_2\"},\n+        ]\n+    )\n+    def test_errors_aggregated(self):\n+        errors = check_templates(None)\n+        self.assertEqual(errors, [Error(\"Example\")] * 2)\n \n \n class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n     TEMPLATES_STRING_IF_INVALID = [\n         {\n             \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"NAME\": \"backend_1\",\n             \"OPTIONS\": {\n                 \"string_if_invalid\": False,\n             },\n         },\n         {\n             \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"NAME\": \"backend_2\",\n             \"OPTIONS\": {\n                 \"string_if_invalid\": 42,\n             },\n         },\n     ]\n \n-    @classmethod\n-    def setUpClass(cls):\n-        super().setUpClass()\n-        cls.error1 = copy(E002)\n-        cls.error2 = copy(E002)\n-        string_if_invalid1 = cls.TEMPLATES_STRING_IF_INVALID[0][\"OPTIONS\"][\n-            \"string_if_invalid\"\n-        ]\n-        string_if_invalid2 = cls.TEMPLATES_STRING_IF_INVALID[1][\"OPTIONS\"][\n-            \"string_if_invalid\"\n-        ]\n-        cls.error1.msg = cls.error1.msg.format(\n-            string_if_invalid1, type(string_if_invalid1).__name__\n+    def _get_error_for_engine(self, engine):\n+        value = engine.engine.string_if_invalid\n+        return Error(\n+            \"'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: %r \"\n+            \"(%s).\" % (value, type(value)),\n+            obj=engine,\n+            id=\"templates.E002\",\n         )\n-        cls.error2.msg = cls.error2.msg.format(\n-            string_if_invalid2, type(string_if_invalid2).__name__\n+\n+    def _check_engines(self, engines):\n+        return list(\n+            chain.from_iterable(e._check_string_if_invalid_is_string() for e in engines)\n         )\n \n     @override_settings(TEMPLATES=TEMPLATES_STRING_IF_INVALID)\n     def test_string_if_invalid_not_string(self):\n-        self.assertEqual(\n-            check_string_if_invalid_is_string(None), [self.error1, self.error2]\n-        )\n+        _engines = engines.all()\n+        errors = [\n+            self._get_error_for_engine(_engines[0]),\n+            self._get_error_for_engine(_engines[1]),\n+        ]\n+        self.assertEqual(self._check_engines(_engines), errors)\n \n     def test_string_if_invalid_first_is_string(self):\n         TEMPLATES = deepcopy(self.TEMPLATES_STRING_IF_INVALID)\n         TEMPLATES[0][\"OPTIONS\"][\"string_if_invalid\"] = \"test\"\n         with self.settings(TEMPLATES=TEMPLATES):\n-            self.assertEqual(check_string_if_invalid_is_string(None), [self.error2])\n+            _engines = engines.all()\n+            errors = [self._get_error_for_engine(_engines[1])]\n+            self.assertEqual(self._check_engines(_engines), errors)\n \n     def test_string_if_invalid_both_are_strings(self):\n         TEMPLATES = deepcopy(self.TEMPLATES_STRING_IF_INVALID)\n         TEMPLATES[0][\"OPTIONS\"][\"string_if_invalid\"] = \"test\"\n         TEMPLATES[1][\"OPTIONS\"][\"string_if_invalid\"] = \"test\"\n         with self.settings(TEMPLATES=TEMPLATES):\n-            self.assertEqual(check_string_if_invalid_is_string(None), [])\n+            self.assertEqual(self._check_engines(engines.all()), [])\n \n     def test_string_if_invalid_not_specified(self):\n         TEMPLATES = deepcopy(self.TEMPLATES_STRING_IF_INVALID)\n         del TEMPLATES[1][\"OPTIONS\"][\"string_if_invalid\"]\n         with self.settings(TEMPLATES=TEMPLATES):\n-            self.assertEqual(check_string_if_invalid_is_string(None), [self.error1])\n+            _engines = engines.all()\n+            errors = [self._get_error_for_engine(_engines[0])]\n+            self.assertEqual(self._check_engines(_engines), errors)\n \n \n class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n-    @classmethod\n-    def setUpClass(cls):\n-        super().setUpClass()\n-        cls.warning_same_tags = Warning(\n-            W003.msg.format(\n-                \"'same_tags'\",\n-                \"'check_framework.template_test_apps.same_tags_app_1.\"\n-                \"templatetags.same_tags', \"\n-                \"'check_framework.template_test_apps.same_tags_app_2.\"\n-                \"templatetags.same_tags'\",\n-            ),\n-            id=W003.id,\n-        )\n-\n-    @staticmethod\n-    def get_settings(module_name, module_path):\n+    def get_settings(self, module_name, module_path, name=\"django\"):\n         return {\n             \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            \"NAME\": name,\n             \"OPTIONS\": {\n                 \"libraries\": {\n                     module_name: f\"check_framework.template_test_apps.{module_path}\",\n@@ -130,6 +107,20 @@ def get_settings(module_name, module_path):\n             },\n         }\n \n+    def _get_error_for_engine(self, engine, modules):\n+        return Warning(\n+            f\"'same_tags' is used for multiple template tag modules: {modules}\",\n+            obj=engine,\n+            id=\"templates.W003\",\n+        )\n+\n+    def _check_engines(self, engines):\n+        return list(\n+            chain.from_iterable(\n+                e._check_for_template_tags_with_the_same_name() for e in engines\n+            )\n+        )\n+\n     @override_settings(\n         INSTALLED_APPS=[\n             \"check_framework.template_test_apps.same_tags_app_1\",\n@@ -137,26 +128,32 @@ def get_settings(module_name, module_path):\n         ]\n     )\n     def test_template_tags_with_same_name(self):\n-        self.assertEqual(\n-            check_for_template_tags_with_the_same_name(None),\n-            [self.warning_same_tags],\n+        _engines = engines.all()\n+        modules = (\n+            \"'check_framework.template_test_apps.same_tags_app_1.templatetags\"\n+            \".same_tags', 'check_framework.template_test_apps.same_tags_app_2\"\n+            \".templatetags.same_tags'\"\n         )\n+        errors = [self._get_error_for_engine(_engines[0], modules)]\n+        self.assertEqual(self._check_engines(_engines), errors)\n \n-    def test_template_tags_with_same_library_name(self):\n+    def test_template_tags_for_separate_backends(self):\n+        # The \"libraries\" names are the same, but the backends are different.\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n-                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                    \"same_tags\",\n+                    \"same_tags_app_1.templatetags.same_tags\",\n+                    name=\"backend_1\",\n                 ),\n                 self.get_settings(\n-                    \"same_tags\", \"same_tags_app_2.templatetags.same_tags\"\n+                    \"same_tags\",\n+                    \"same_tags_app_2.templatetags.same_tags\",\n+                    name=\"backend_2\",\n                 ),\n             ]\n         ):\n-            self.assertEqual(\n-                check_for_template_tags_with_the_same_name(None),\n-                [self.warning_same_tags],\n-            )\n+            self.assertEqual(self._check_engines(engines.all()), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n@@ -169,48 +166,44 @@ def test_template_tags_same_library_in_installed_apps_libraries(self):\n                 ),\n             ]\n         ):\n-            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+            self.assertEqual(self._check_engines(engines.all()), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n     def test_template_tags_with_same_library_name_and_module_name(self):\n+        modules = (\n+            \"'check_framework.template_test_apps.different_tags_app.templatetags\"\n+            \".different_tags', 'check_framework.template_test_apps.same_tags_app_1\"\n+            \".templatetags.same_tags'\"\n+        )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n-                    \"same_tags\",\n-                    \"different_tags_app.templatetags.different_tags\",\n+                    \"same_tags\", \"different_tags_app.templatetags.different_tags\"\n                 ),\n             ]\n         ):\n-            self.assertEqual(\n-                check_for_template_tags_with_the_same_name(None),\n-                [\n-                    Warning(\n-                        W003.msg.format(\n-                            \"'same_tags'\",\n-                            \"'check_framework.template_test_apps.different_tags_app.\"\n-                            \"templatetags.different_tags', \"\n-                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n-                            \"templatetags.same_tags'\",\n-                        ),\n-                        id=W003.id,\n-                    )\n-                ],\n-            )\n+            _engines = engines.all()\n+            errors = [self._get_error_for_engine(_engines[0], modules)]\n+            self.assertEqual(self._check_engines(_engines), errors)\n \n     def test_template_tags_with_different_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n-                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                    \"same_tags\",\n+                    \"same_tags_app_1.templatetags.same_tags\",\n+                    name=\"backend_1\",\n                 ),\n                 self.get_settings(\n-                    \"not_same_tags\", \"same_tags_app_2.templatetags.same_tags\"\n+                    \"not_same_tags\",\n+                    \"same_tags_app_2.templatetags.same_tags\",\n+                    name=\"backend_2\",\n                 ),\n             ]\n         ):\n-            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+            self.assertEqual(self._check_engines(engines.all()), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -219,4 +212,4 @@ def test_template_tags_with_different_library_name(self):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(self._check_engines(engines.all()), [])\n", "problem_statement": "Push templates checks down to backend engine classes\nDescription\n\t \nCurrently, the three system checks for template settings are individual functions in \u200bdjango.core.checks.templates. This structure leads to some issues:\nThe checks are specific to DTL (Django Template Language), but get run for all backends. DTL-specific code gets loaded and run even when not using it, notably the fairly slow get_template_tag_modules().\ncheck_for_template_tags_with_the_same_name is inaccurate because it combines libraries from all template backends, so might report an issue when none exists.\nThe checks are still run when no template backend is configured (settings.TEMPLATES = []).\nI propose the checks be restructured to live within the engine classes in django.template.backends, adopting the same pattern used for model and field checks, admin checks, etc.\nIn practice, this would mean adding a dummy BaseEngine.check() method, then moving the existing checks into methods called by an overridden DjangoTemplates.check(). A single function left in django.core.checks.templates would loop over django.template.engines.all() to combine results from backends\u2019 check() methods.\n", "hints_text": [["The staticfiles finders checks are actually the perfect template: \u200bhttps://github.com/django/django/blob/35e63b7f2896959d3f1939346fd467af92f0d80f/django/contrib/staticfiles/checks.py#L11-L21 \u200bhttps://github.com/django/django/blob/35e63b7f2896959d3f1939346fd467af92f0d80f/django/contrib/staticfiles/finders.py#L23-L27 \u200bhttps://github.com/django/django/blob/35e63b7f2896959d3f1939346fd467af92f0d80f/django/contrib/staticfiles/finders.py#L74", 1708785146.0], ["Thank you for the pointers Adam! I finally found the time to look into this and I have some questions. check_for_template_tags_with_the_same_name is inaccurate because it combines libraries from all template backends, so might report an issue when none exists. Regarding this, am I right in assuming that we want to allow same names for tags across different engines; Should this test pass? def test_different_backends_may_have_same_tags(self): with self.settings( TEMPLATES=[ {\"BACKEND\": \"django.template.backends.django.DjangoTemplates\", \"OPTIONS\": {\"libraries\": { \"same_tags\": \"check_framework.template_test_apps.same_tags_app_1\" \".templatetags.same_tags\"}}}, {\"BACKEND\": \"django.template.backends.OtherBackend\", \"OPTIONS\": {\"libraries\": { \"same_tags\": \"check_framework.template_test_apps.same_tags_app_2\" \".templatetags.same_tags\"}}} ] ): self.assertListEqual(check_for_template_tags_with_the_same_name(None), []) And one more thing, I am noticing that the E001 logic is duplicated: in Engine.__init__ - raises ImproperlyConfigured (template_backends.test_utils.TemplateUtilsTests.test_backend_improperly_configured) and in check_setting_app_dirs_loaders (tests under check_framework.test_templates.CheckTemplateSettingsAppDirsTest) and I am wondering if there are reasons to keep both, or we could remove one of the two? \ud83e\udd14", 1710087959.0], ["Regarding this, am I right in assuming that we want to allow same names for tags across different engines; Should this test pass? Yes, I think so. You can use two DjangoTemplates backends and it would still be valid. And one more thing, I am noticing that the E001 logic is duplicated: Indeed, that is true. The system check was added in #24922 because the exception would only appear at runtime, because the backend would only be created lazily. But by actioning this ticket, we\u2019ll force backends to all be instantiated during checks, which will make the exception appear then. So we should be able to remove E001 as part of this work.", 1710090813.0], ["Thank you for the explanation. I opened a PR for this \u200bPR", 1710477999.0]], "created_at": "2024-03-15T09:44:49Z"}
{"repo": "django/django", "pull_number": 17973, "instance_id": "django__django-17973", "issue_numbers": ["35294"], "base_commit": "593067a8ee43e2167c5ffc92e3cc3c5e40ec4aa4", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b36125c762a7..676625df6fe7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1621,11 +1621,12 @@ def explain_query(self):\n         # tuples with integers and strings. Flatten them out into strings.\n         format_ = self.query.explain_info.format\n         output_formatter = json.dumps if format_ and format_.lower() == \"json\" else str\n-        for row in result[0]:\n-            if not isinstance(row, str):\n-                yield \" \".join(output_formatter(c) for c in row)\n-            else:\n-                yield row\n+        for row in result:\n+            for value in row:\n+                if not isinstance(value, str):\n+                    yield \" \".join([output_formatter(c) for c in value])\n+                else:\n+                    yield value\n \n \n class SQLInsertCompiler(SQLCompiler):\n", "test_patch": "diff --git a/tests/queries/test_explain.py b/tests/queries/test_explain.py\nindex 980e8e9621e5..44689aedf8a8 100644\n--- a/tests/queries/test_explain.py\n+++ b/tests/queries/test_explain.py\n@@ -96,6 +96,15 @@ def test_postgres_options(self):\n                     option = \"{} {}\".format(name.upper(), \"true\" if value else \"false\")\n                     self.assertIn(option, captured_queries[0][\"sql\"])\n \n+    def test_multi_page_text_explain(self):\n+        if \"TEXT\" not in connection.features.supported_explain_formats:\n+            self.skipTest(\"This backend does not support TEXT format.\")\n+\n+        base_qs = Tag.objects.order_by()\n+        qs = base_qs.filter(name=\"test\").union(*[base_qs for _ in range(100)])\n+        result = qs.explain(format=\"text\")\n+        self.assertGreaterEqual(result.count(\"\\n\"), 100)\n+\n     def test_option_sql_injection(self):\n         qs = Tag.objects.filter(name=\"test\")\n         options = {\"SUMMARY true) SELECT 1; --\": True}\n", "problem_statement": "Queryset explain can be truncated.\nDescription\n\t \nDjango 4.2.10\nPython 3.10.13\nPostgres 15.6\nPsycopg2 2.9.9\nI have some very complex querysets I'm trying to optimize and what I've run into is explain output is being truncated at 100 lines. As far as I can tell this is because of this function on django.db.models.sql.compiler.SQLCompiler.\n\tdef explain_query(self):\n\t\tresult = list(self.execute_sql())\n\t\t# Some backends return 1 item tuples with strings, and others return\n\t\t# tuples with integers and strings. Flatten them out into strings.\n\t\tformat_ = self.query.explain_info.format\n\t\toutput_formatter = json.dumps if format_ and format_.lower() == \"json\" else str\n\t\tfor row in result[0]:\n\t\t\tif not isinstance(row, str):\n\t\t\t\tyield \" \".join(output_formatter(c) for c in row)\n\t\t\telse:\n\t\t\t\tyield row\nWhere result[0] is ignoring additional results. Monkey patching it to \n\tdef explain_query(self):\n\t\tresults = list(self.execute_sql())\n\t\t# Some backends return 1 item tuples with strings, and others return\n\t\t# tuples with integers and strings. Flatten them out into strings.\n\t\tformat_ = self.query.explain_info.format\n\t\toutput_formatter = json.dumps if format_ and format_.lower() == \"json\" else str\n\t\tfor result in results:\n\t\t\tfor row in result:\n\t\t\t\tif not isinstance(row, str):\n\t\t\t\t\tyield \" \".join(output_formatter(c) for c in row)\n\t\t\t\telse:\n\t\t\t\t\tyield row\nGets me the full explain output.\n", "hints_text": [["Interesting, do you observe the same with psycopg 3+?", 1710247183.0], ["Yes, although I don't know if I did it right. I'm not clear where the system is getting psycopg2 from. I installed 3 and nothing changed. But I don't know if at that point it was using 2 or 3.", 1710248590.0], ["Seems valid. Would like like to prepare a patch? (a regression test can be tricky.)", 1710288153.0], ["I made a PR but the test is ugly and a bit hacky to force a 100+ line explain plan by joining 100 1-row generate_series(). Happy to hear any alternatives.", 1710351478.0]], "created_at": "2024-03-13T18:12:44Z"}
{"repo": "django/django", "pull_number": 17969, "instance_id": "django__django-17969", "issue_numbers": ["35295"], "base_commit": "f5c340684be3f27a145ec86ba55b24eb88d2780c", "patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 9f40ec5e4fc5..889e4d87b444 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -276,6 +276,11 @@ def limit_offset_sql(self, low_mark, high_mark):\n             if sql\n         )\n \n+    def bulk_insert_sql(self, fields, placeholder_rows):\n+        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n+        values_sql = \", \".join([f\"({sql})\" for sql in placeholder_rows_sql])\n+        return f\"VALUES {values_sql}\"\n+\n     def last_executed_query(self, cursor, sql, params):\n         \"\"\"\n         Return a string of the query last executed by the given cursor, with\ndiff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 7fabb0e05ecb..9741e6a985fc 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -290,11 +290,6 @@ def max_name_length(self):\n     def pk_default_value(self):\n         return \"NULL\"\n \n-    def bulk_insert_sql(self, fields, placeholder_rows):\n-        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n-        values_sql = \", \".join(\"(%s)\" % sql for sql in placeholder_rows_sql)\n-        return \"VALUES \" + values_sql\n-\n     def combine_expression(self, connector, sub_expressions):\n         if connector == \"^\":\n             return \"POW(%s)\" % \",\".join(sub_expressions)\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\nindex 47bdf37efaae..4d7ca7dd1fcc 100644\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -178,6 +178,10 @@ def supports_boolean_expr_in_select_clause(self):\n     def supports_aggregation_over_interval_types(self):\n         return self.connection.oracle_version >= (23,)\n \n+    @cached_property\n+    def supports_bulk_insert_with_multiple_rows(self):\n+        return self.connection.oracle_version >= (23,)\n+\n     @cached_property\n     def bare_select_suffix(self):\n         return \"\" if self.connection.oracle_version >= (23,) else \" FROM DUAL\"\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex 15a1b3335bbb..15edb292b82c 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -676,6 +676,24 @@ def bulk_insert_sql(self, fields, placeholder_rows):\n             for field in fields\n             if field\n         ]\n+        if (\n+            self.connection.features.supports_bulk_insert_with_multiple_rows\n+            # A workaround with UNION of SELECTs is required for models without\n+            # any fields.\n+            and field_placeholders\n+        ):\n+            placeholder_rows_sql = []\n+            for row in placeholder_rows:\n+                placeholders_row = (\n+                    field_placeholder % placeholder\n+                    for field_placeholder, placeholder in zip(\n+                        field_placeholders, row, strict=True\n+                    )\n+                )\n+                placeholder_rows_sql.append(placeholders_row)\n+            return super().bulk_insert_sql(fields, placeholder_rows_sql)\n+        # Oracle < 23c doesn't support inserting multiple rows in a single\n+        # statement, use UNION of SELECTs as a workaround.\n         query = []\n         for row in placeholder_rows:\n             select = []\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 4e444d5f2b16..4b179ca83f3e 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -328,11 +328,6 @@ def return_insert_columns(self, fields):\n         ]\n         return \"RETURNING %s\" % \", \".join(columns), ()\n \n-    def bulk_insert_sql(self, fields, placeholder_rows):\n-        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n-        values_sql = \", \".join(\"(%s)\" % sql for sql in placeholder_rows_sql)\n-        return \"VALUES \" + values_sql\n-\n     if is_psycopg3:\n \n         def adapt_integerfield_value(self, value, internal_type):\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 29a5c0391e40..0078cc077a97 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -353,11 +353,6 @@ def convert_uuidfield_value(self, value, expression, connection):\n     def convert_booleanfield_value(self, value, expression, connection):\n         return bool(value) if value in (1, 0) else value\n \n-    def bulk_insert_sql(self, fields, placeholder_rows):\n-        placeholder_rows_sql = (\", \".join(row) for row in placeholder_rows)\n-        values_sql = \", \".join(f\"({sql})\" for sql in placeholder_rows_sql)\n-        return f\"VALUES {values_sql}\"\n-\n     def combine_expression(self, connector, sub_expressions):\n         # SQLite doesn't have a ^ operator, so use the user-defined POWER\n         # function that's registered in connect().\n", "test_patch": "", "problem_statement": "Use INSERT with multiple rows on Oracle 23c+\nDescription\n\t \nOracle 23c finally allows to INSERT multiple rows into a table in a single step without a UNION-SELECT workaround \ud83c\udf89 \n\u200bhttps://oracle-base.com/articles/23c/table-values-constructor-23c#insert\n", "hints_text": [["\u200bPR", 1710248364.0], ["The current patch fails on field_defaults.tests.DefaultTests.test_bulk_create_mixed_db_defaults_function: django.db.utils.DatabaseError: ORA-01797: this operator must be followed by ANY or ALL", 1710255558.0], ["In 33c06ca0: Refs #32673, Refs #35295 -- Avoided wrapping rhs direct values in lookups.", 1710330403.0]], "created_at": "2024-03-12T17:58:19Z"}
{"repo": "django/django", "pull_number": 17961, "instance_id": "django__django-17961", "issue_numbers": ["35286"], "base_commit": "0a560eab550696dbc163d57258ef6f3cdb9511a3", "patch": "diff --git a/django/template/smartif.py b/django/template/smartif.py\nindex 0a917c2aaa4b..6a6a03dd84c6 100644\n--- a/django/template/smartif.py\n+++ b/django/template/smartif.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n # Using a simple top down parser, as described here:\n-#    http://effbot.org/zone/simple-top-down-parsing.htm.\n+#    https://11l-lang.org/archive/simple-top-down-parsing/\n # 'led' = left denotation\n # 'nud' = null denotation\n # 'bp' = binding power (left = lbp, right = rbp)\n", "test_patch": "", "problem_statement": "dead top-down parsing reference URL is dead\nDescription\n\t \nin django/templates/smartif.py this url [effbot-simple-top-down-parer](\u200bhttp://effbot.org/zone/simple-top-down-parsing.htm.) is dead. we can replace it with \u200bhttps://pdfcoffee.com/simple-top-down-parsing-in-python-pt-pdf-free.html found this only similar link\n", "hints_text": [["\u200bThis archived link referred to by \u200bwhat appears to be the author seems to be a better alternative.", 1710065681.0], ["Replying to Simon Charette: \u200bThis archived link referred to by \u200bwhat appears to be the author seems to be a better alternative. Thanks for sharing this, I have update the URL. Link to the \u200bPR", 1710071139.0], ["In 4114179c: Fixed #35286 -- Updated broken link in django/template/smartif.py docstring.", 1710079521.0]], "created_at": "2024-03-10T16:41:17Z"}
{"repo": "django/django", "pull_number": 17959, "instance_id": "django__django-17959", "issue_numbers": ["35280"], "base_commit": "0a560eab550696dbc163d57258ef6f3cdb9511a3", "patch": "diff --git a/docs/ref/templates/builtins.txt b/docs/ref/templates/builtins.txt\nindex a10af9310f7a..8ad73b835f09 100644\n--- a/docs/ref/templates/builtins.txt\n+++ b/docs/ref/templates/builtins.txt\n@@ -2141,7 +2141,8 @@ For example:\n \n     {{ value|iriencode }}\n \n-If ``value`` is ``\"?test=1&me=2\"``, the output will be ``\"?test=1&amp;me=2\"``.\n+If ``value`` is ``\"?test=I \u2665 Django\"``, the output will be\n+``\"?test=I%20%E2%99%A5%20Django\"``.\n \n .. templatefilter:: join\n \n", "test_patch": "", "problem_statement": "iriencode example incorrect\nDescription\n\t \n\u200bhttps://docs.djangoproject.com/en/5.0/ref/templates/builtins/#iriencode\nIf value is \"?test=1&me=2\", the output will be \"?test=1&amp;me=2\".\nThis is not the case as by default \"&\" is a safe character for iriencode: \u200bhttps://github.com/django/django/blob/main/django/utils/encoding.py#L135.\nIt is urlencode that does that conversion. iriencode is more for non-ascii characters in my understanding, and using both at the same time is supported:\nvalue|urlencode|iriencode\n", "hints_text": [["Good catch, we could use an example from the docstring, '/I \u2665 Django/. Would you like to prepare a patch?", 1709793566.0], ["I would love to help if @minusf couldn't allocate the time. Lmk!", 1709857193.0], ["there is no monopoly on pull requests, go ahead Can :D", 1709866639.0], ["Thank you! Preparing the patch now. Replying to minusf: there is no monopoly on pull requests, go ahead Can :D", 1709941013.0]], "created_at": "2024-03-09T07:15:38Z"}
{"repo": "django/django", "pull_number": 17958, "instance_id": "django__django-17958", "issue_numbers": ["25595"], "base_commit": "e5ec11a84d6f3725220360e893050cb00403a22e", "patch": "diff --git a/docs/ref/validators.txt b/docs/ref/validators.txt\nindex 789d47d93504..fb69ec8d3348 100644\n--- a/docs/ref/validators.txt\n+++ b/docs/ref/validators.txt\n@@ -183,6 +183,12 @@ to, or in lieu of custom ``field.clean()`` methods.\n \n         .. _valid URI schemes: https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n \n+        .. warning::\n+\n+            Values starting with ``file:///`` will not pass validation even\n+            when the ``file`` scheme is provided. Valid values must contain a\n+            host.\n+\n     .. attribute:: max_length\n \n         The maximum length of values that could be considered valid. Defaults\n", "test_patch": "", "problem_statement": "Invalid regexp in URLValidator can't handle file:// schemes\nDescription\n\t \nRegexp does not allow to use file scheme in URLValidator.\nSteps to reproduce\nfrom django.core.validators import URLValidator\nURLValidator(schemes=['file'])('file:///tmp/somefile')\nExpected result\nNo exception should be raised.\nCurrent result\nValidationError: [u'Enter a valid URL.']\n", "hints_text": [["Can this be fixed without special casing the file scheme in the validation?", 1445514840.0], ["It's URLValidator not URIValidator, I think you might need your own custom validator for this. The current regex is already bloated, I'm not sure we should continue to complexify it...", 1445530805.0], ["I had a similar skepticism. If we don't make a change, then let's clarify the documentation to prevent further tickets about this.", 1445536044.0], ["I thinks this is both a documentation and code problem. The URLValidator should raise a value error, if a unsupported schema is set. In the documentation it should be explained which schemas are supported. Currently one gets the impression that all are.", 1447249812.0], ["Interestingly enough, if you include the optional host parameter in RFC1738 it works: file://localhost/tmp/file/name", 1447249999.0], ["I opened a PR adding a warning about this to the documentation. I'm happy to handle it in a different way if that'd be better. For what it's worth, if someone out there wants to validate local file URIs in addition to URLs, here is an idea to start with: @deconstructible class CustomURLValidator(URLValidator): def __init__(self, **kwargs): super().__init__(**kwargs) self.schemes.append('file') def __call__(self, value): if value.startswith('file:///'): value = value.replace('file:///', 'file://localhost/', 1) return super().__call__(value)", 1709940017.0]], "created_at": "2024-03-09T05:19:53Z"}
{"repo": "django/django", "pull_number": 17957, "instance_id": "django__django-17957", "issue_numbers": ["35285"], "base_commit": "894fa55da1ff05229391da6a2b3dfc2bb2876eb0", "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f903dc2f2251..3e4bfe34c1b1 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -615,60 +615,56 @@ def _check_unique_target(self):\n         if not self.foreign_related_fields:\n             return []\n \n-        unique_foreign_fields = {\n-            frozenset([f.name])\n-            for f in self.remote_field.model._meta.get_fields()\n-            if getattr(f, \"unique\", False)\n-        }\n-        unique_foreign_fields.update(\n-            {frozenset(ut) for ut in self.remote_field.model._meta.unique_together}\n-        )\n-        unique_foreign_fields.update(\n-            {\n-                frozenset(uc.fields)\n-                for uc in self.remote_field.model._meta.total_unique_constraints\n-            }\n+        has_unique_constraint = any(\n+            rel_field.unique for rel_field in self.foreign_related_fields\n         )\n-        foreign_fields = {f.name for f in self.foreign_related_fields}\n-        has_unique_constraint = any(u <= foreign_fields for u in unique_foreign_fields)\n-\n-        if not has_unique_constraint and len(self.foreign_related_fields) > 1:\n-            field_combination = \", \".join(\n-                \"'%s'\" % rel_field.name for rel_field in self.foreign_related_fields\n+        if not has_unique_constraint:\n+            foreign_fields = {f.name for f in self.foreign_related_fields}\n+            remote_opts = self.remote_field.model._meta\n+            has_unique_constraint = any(\n+                frozenset(ut) <= foreign_fields for ut in remote_opts.unique_together\n+            ) or any(\n+                frozenset(uc.fields) <= foreign_fields\n+                for uc in remote_opts.total_unique_constraints\n             )\n-            model_name = self.remote_field.model.__name__\n-            return [\n-                checks.Error(\n-                    \"No subset of the fields %s on model '%s' is unique.\"\n-                    % (field_combination, model_name),\n-                    hint=(\n-                        \"Mark a single field as unique=True or add a set of \"\n-                        \"fields to a unique constraint (via unique_together \"\n-                        \"or a UniqueConstraint (without condition) in the \"\n-                        \"model Meta.constraints).\"\n-                    ),\n-                    obj=self,\n-                    id=\"fields.E310\",\n-                )\n-            ]\n-        elif not has_unique_constraint:\n-            field_name = self.foreign_related_fields[0].name\n-            model_name = self.remote_field.model.__name__\n-            return [\n-                checks.Error(\n-                    \"'%s.%s' must be unique because it is referenced by \"\n-                    \"a foreign key.\" % (model_name, field_name),\n-                    hint=(\n-                        \"Add unique=True to this field or add a \"\n-                        \"UniqueConstraint (without condition) in the model \"\n-                        \"Meta.constraints.\"\n-                    ),\n-                    obj=self,\n-                    id=\"fields.E311\",\n+\n+        if not has_unique_constraint:\n+            if len(self.foreign_related_fields) > 1:\n+                field_combination = \", \".join(\n+                    f\"'{rel_field.name}'\" for rel_field in self.foreign_related_fields\n                 )\n-            ]\n-        else:\n-            return []\n+                model_name = self.remote_field.model.__name__\n+                return [\n+                    checks.Error(\n+                        f\"No subset of the fields {field_combination} on model \"\n+                        f\"'{model_name}' is unique.\",\n+                        hint=(\n+                            \"Mark a single field as unique=True or add a set of \"\n+                            \"fields to a unique constraint (via unique_together \"\n+                            \"or a UniqueConstraint (without condition) in the \"\n+                            \"model Meta.constraints).\"\n+                        ),\n+                        obj=self,\n+                        id=\"fields.E310\",\n+                    )\n+                ]\n+            else:\n+                field_name = self.foreign_related_fields[0].name\n+                model_name = self.remote_field.model.__name__\n+                return [\n+                    checks.Error(\n+                        f\"'{model_name}.{field_name}' must be unique because it is \"\n+                        \"referenced by a foreign key.\",\n+                        hint=(\n+                            \"Add unique=True to this field or add a \"\n+                            \"UniqueConstraint (without condition) in the model \"\n+                            \"Meta.constraints.\"\n+                        ),\n+                        obj=self,\n+                        id=\"fields.E311\",\n+                    )\n+                ]\n+        return []\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n", "test_patch": "", "problem_statement": "Optimize ForeignObject._check_unique_target\nDescription\n\t \nContinuing my project to optimize the system checks, I found some optimizations for ForeignObject._check_unique_target, which I found to take ~6% of the total runtime for checks.\nMost of this function\u2019s runtime was spent creating the set-of-frozensets describing all unique constraints on the target model. But this set is not needed to determine success in the most typical cases, where a primary key or other single unique field is targeted.\nTo optimize, we can check for a single unique field first. This essentially means restoring the \u201cfast path\u201d replaced in #25535 / 80dac8c33e7f6f22577e4346f44e4c5ee89b648c with a broad general algorithm to cover unique constraints.\nBefore optimization stats:\nProfiling running checks 100 times, 20,800 calls took 180ms, or ~6% of the total runtime.\nAfter optimization:\n29ms or ~1% of the total runtime.\n", "hints_text": [["Accepting though I'd like confirmation that, without altering the current logic, commenting out specific parts of the checks (via 'mutation testing') results in failed tests. Adam, did you ensure we had sufficient meaningful coverage before modifying the logic?", 1709926216.0]], "created_at": "2024-03-08T22:01:44Z"}
{"repo": "django/django", "pull_number": 17950, "instance_id": "django__django-17950", "issue_numbers": ["28541"], "base_commit": "3d7235c67b5b0569890411eeba8db2b1e02c89c4", "patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d27a8bbd65d7..495714a894ea 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -229,6 +229,14 @@ def is_self_referential(f):\n         body_copy[\"__module__\"] = model.__module__\n         new_model = type(\"New%s\" % model._meta.object_name, model.__bases__, body_copy)\n \n+        # Remove the automatically recreated default primary key, if it has\n+        # been deleted.\n+        if delete_field and delete_field.attname == new_model._meta.pk.attname:\n+            auto_pk = new_model._meta.pk\n+            delattr(new_model, auto_pk.attname)\n+            new_model._meta.local_fields.remove(auto_pk)\n+            new_model.pk = None\n+\n         # Create a new table with the updated schema.\n         self.create_model(new_model)\n \n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3845381454df..b058543801f7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2802,6 +2802,42 @@ def assertIdTypeEqualsMTIFkType():\n                 (f\"{app_label}_pony\", \"id\"),\n             )\n \n+    def test_alter_id_pk_to_uuid_pk(self):\n+        app_label = \"test_alidpktuuidpk\"\n+        project_state = self.set_up_test_model(app_label)\n+        new_state = project_state.clone()\n+        # Add UUID field.\n+        operation = migrations.AddField(\"Pony\", \"uuid\", models.UUIDField())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        # Remove ID.\n+        project_state = new_state\n+        new_state = new_state.clone()\n+        operation = migrations.RemoveField(\"Pony\", \"id\")\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertColumnNotExists(f\"{app_label}_pony\", \"id\")\n+        # Rename to ID.\n+        project_state = new_state\n+        new_state = new_state.clone()\n+        operation = migrations.RenameField(\"Pony\", \"uuid\", \"id\")\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertColumnNotExists(f\"{app_label}_pony\", \"uuid\")\n+        self.assertColumnExists(f\"{app_label}_pony\", \"id\")\n+        # Change to a primary key.\n+        project_state = new_state\n+        new_state = new_state.clone()\n+        operation = migrations.AlterField(\n+            \"Pony\", \"id\", models.UUIDField(primary_key=True)\n+        )\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n     @skipUnlessDBFeature(\"supports_foreign_keys\")\n     def test_alter_field_reloads_state_on_fk_with_to_field_target_type_change(self):\n         app_label = \"test_alflrsfkwtflttc\"\n", "problem_statement": "migration introducing a UUID primary key fails on sqlite3\nDescription\n\t \nthe migration here (from \u200bhttps://github.com/fsr-itse/EvaP/pull/1002/files)\n# -*- coding: utf-8 -*-\n# Generated by Django 1.11.3 on 2017-07-03 18:31\nfrom __future__ import unicode_literals\nfrom django.db import migrations, models\nimport uuid\ndef fill_textanswer_uuid(apps, schema_editor):\n\tdb_alias = schema_editor.connection.alias\n\tTextAnswer = apps.get_model('evaluation', 'TextAnswer')\n\tfor obj in TextAnswer.objects.using(db_alias).all():\n\t\tobj.uuid = uuid.uuid4()\n\t\tobj.save()\nclass Migration(migrations.Migration):\n\t\"\"\" this migration changes a model from a auto-generated id field to a uuid-primary key. \"\"\"\n\toperations = [\n\t\tmigrations.AddField(\n\t\t\tmodel_name='textanswer',\n\t\t\tname='uuid',\n\t\t\tfield=models.UUIDField(null=True),\n\t\t),\n\t\tmigrations.RunPython(fill_textanswer_uuid, migrations.RunPython.noop),\n\t\tmigrations.AlterField(\n\t\t\tmodel_name='textanswer',\n\t\t\tname='uuid',\n\t\t\tfield=models.UUIDField(primary_key=False, default=uuid.uuid4, serialize=False, editable=False),\n\t\t),\n\t\tmigrations.RemoveField('TextAnswer', 'id'),\n\t\tmigrations.RenameField(\n\t\t\tmodel_name='textanswer',\n\t\t\told_name='uuid',\n\t\t\tnew_name='id'\n\t\t),\n\t\tmigrations.AlterField(\n\t\t\tmodel_name='textanswer',\n\t\t\tname='id',\n\t\t\tfield=models.UUIDField(primary_key=True, default=uuid.uuid4, serialize=False, editable=False),\n\t\t),\n\t]\nfails when running with sqlite3. postgres works fine. when commenting out the last two operations in the migration, it works.\nTraceback :\nTraceback (most recent call last):\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/utils.py\", line 63, in execute\n\treturn self.cursor.execute(sql)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/sqlite3/base.py\", line 326, in execute\n\treturn Database.Cursor.execute(self, query)\nsqlite3.OperationalError: duplicate column name: id\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"./manage.py\", line 10, in <module>\n\texecute_from_command_line(sys.argv)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/core/management/__init__.py\", line 363, in execute_from_command_line\n\tutility.execute()\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/core/management/__init__.py\", line 355, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/core/management/base.py\", line 283, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/core/management/base.py\", line 330, in execute\n\toutput = self.handle(*args, **options)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/core/management/commands/migrate.py\", line 204, in handle\n\tfake_initial=fake_initial,\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/migrations/executor.py\", line 115, in migrate\n\tstate = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/migrations/executor.py\", line 145, in _migrate_all_forwards\n\tstate = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/migrations/executor.py\", line 244, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/migrations/migration.py\", line 129, in apply\n\toperation.database_forwards(self.app_label, schema_editor, old_state, project_state)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/migrations/operations/fields.py\", line 299, in database_forwards\n\tto_model._meta.get_field(self.new_name),\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/base/schema.py\", line 514, in alter_field\n\told_db_params, new_db_params, strict)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/sqlite3/schema.py\", line 262, in _alter_field\n\tself._remake_table(model, alter_field=(old_field, new_field))\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/sqlite3/schema.py\", line 198, in _remake_table\n\tself.create_model(temp_model)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/base/schema.py\", line 303, in create_model\n\tself.execute(sql, params or None)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/base/schema.py\", line 120, in execute\n\tcursor.execute(sql, params)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/utils.py\", line 80, in execute\n\treturn super(CursorDebugWrapper, self).execute(sql, params)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/utils.py\", line 65, in execute\n\treturn self.cursor.execute(sql, params)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/utils.py\", line 94, in __exit__\n\tsix.reraise(dj_exc_type, dj_exc_value, traceback)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/utils/six.py\", line 685, in reraise\n\traise value.with_traceback(tb)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/utils.py\", line 63, in execute\n\treturn self.cursor.execute(sql)\n File \"/home/vagrant/.local/lib/python3.4/site-packages/django/db/backends/sqlite3/base.py\", line 326, in execute\n\treturn Database.Cursor.execute(self, query)\ndjango.db.utils.OperationalError: duplicate column name: id\nsql query in question:\nCREATE TABLE \"evaluation_textanswer\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"reviewed_answer\" text NULL, \"original_answer\" text NOT NULL, \"contribution_id\" integer NOT NULL REFERENCES \"evaluation_contribution\" (\"id\"), \"question_id\" integer NOT NULL REFERENCES \"evaluation_question\" (\"id\"), \"state\" varchar(2) NOT NULL, \"id\" char(32) NOT NULL); args=None\nso yeah, it obviously tries to create two \"id\" columns.\nfull console output with (sqlite)-sql statements: \u200bhttps://pastebin.com/r6CF22GJ\n", "hints_text": [["I haven't reproduced but the report seems legit given how SQLite's schema editor generates dynamic model to perform table rebuild on ALTERs and how Django automatically generate an id field when one is missing. Could try reproducing against master as well?", 1503929563.0], ["looks the same to me: \u200bhttps://pastebin.com/gYgm2ra5", 1503934331.0], ["In case anyone else is affected: We found a workaround, that is instead of removing the old id column straight away, first rename it and then delete it at the end of the migration. See \u200bhttps://github.com/fsr-itse/EvaP/pull/1216/files", 1530076939.0], ["I opened \u200ba PR.", 1709822643.0]], "created_at": "2024-03-07T20:38:06Z"}
{"repo": "django/django", "pull_number": 17946, "instance_id": "django__django-17946", "issue_numbers": ["35273"], "base_commit": "175b04942afaff978013db61495f3b39ea12989b", "patch": "diff --git a/django/contrib/admin/templates/admin/widgets/clearable_file_input.html b/django/contrib/admin/templates/admin/widgets/clearable_file_input.html\nindex ab35253a0d58..8b42f192f1a2 100644\n--- a/django/contrib/admin/templates/admin/widgets/clearable_file_input.html\n+++ b/django/contrib/admin/templates/admin/widgets/clearable_file_input.html\n@@ -1,6 +1,6 @@\n {% if widget.is_initial %}<p class=\"file-upload\">{{ widget.initial_text }}: <a href=\"{{ widget.value.url }}\">{{ widget.value }}</a>{% if not widget.required %}\n <span class=\"clearable-file-input\">\n-<input type=\"checkbox\" name=\"{{ widget.checkbox_name }}\" id=\"{{ widget.checkbox_id }}\"{% include \"django/forms/widgets/attrs.html\" %}>\n+<input type=\"checkbox\" name=\"{{ widget.checkbox_name }}\" id=\"{{ widget.checkbox_id }}\"{% if widget.attrs.disabled %} disabled{% endif %}{% if widget.attrs.checked %} checked{% endif %}>\n <label for=\"{{ widget.checkbox_id }}\">{{ widget.clear_checkbox_label }}</label></span>{% endif %}<br>\n {{ widget.input_text }}:{% endif %}\n <input type=\"{{ widget.type }}\" name=\"{{ widget.name }}\"{% include \"django/forms/widgets/attrs.html\" %}>{% if widget.is_initial %}</p>{% endif %}\ndiff --git a/django/forms/jinja2/django/forms/widgets/clearable_file_input.html b/django/forms/jinja2/django/forms/widgets/clearable_file_input.html\nindex 93812837f010..4f3a93627f50 100644\n--- a/django/forms/jinja2/django/forms/widgets/clearable_file_input.html\n+++ b/django/forms/jinja2/django/forms/widgets/clearable_file_input.html\n@@ -1,5 +1,5 @@\n {% if widget.is_initial %}{{ widget.initial_text }}: <a href=\"{{ widget.value.url }}\">{{ widget.value }}</a>{% if not widget.required %}\n-<input type=\"checkbox\" name=\"{{ widget.checkbox_name }}\" id=\"{{ widget.checkbox_id }}\"{% if widget.attrs.disabled %} disabled{% endif %}>\n+<input type=\"checkbox\" name=\"{{ widget.checkbox_name }}\" id=\"{{ widget.checkbox_id }}\"{% if widget.attrs.disabled %} disabled{% endif %}{% if widget.attrs.checked %} checked{% endif %}>\n <label for=\"{{ widget.checkbox_id }}\">{{ widget.clear_checkbox_label }}</label>{% endif %}<br>\n {{ widget.input_text }}:{% endif %}\n <input type=\"{{ widget.type }}\" name=\"{{ widget.name }}\"{% include \"django/forms/widgets/attrs.html\" %}>\ndiff --git a/django/forms/templates/django/forms/widgets/clearable_file_input.html b/django/forms/templates/django/forms/widgets/clearable_file_input.html\nindex 93812837f010..4f3a93627f50 100644\n--- a/django/forms/templates/django/forms/widgets/clearable_file_input.html\n+++ b/django/forms/templates/django/forms/widgets/clearable_file_input.html\n@@ -1,5 +1,5 @@\n {% if widget.is_initial %}{{ widget.initial_text }}: <a href=\"{{ widget.value.url }}\">{{ widget.value }}</a>{% if not widget.required %}\n-<input type=\"checkbox\" name=\"{{ widget.checkbox_name }}\" id=\"{{ widget.checkbox_id }}\"{% if widget.attrs.disabled %} disabled{% endif %}>\n+<input type=\"checkbox\" name=\"{{ widget.checkbox_name }}\" id=\"{{ widget.checkbox_id }}\"{% if widget.attrs.disabled %} disabled{% endif %}{% if widget.attrs.checked %} checked{% endif %}>\n <label for=\"{{ widget.checkbox_id }}\">{{ widget.clear_checkbox_label }}</label>{% endif %}<br>\n {{ widget.input_text }}:{% endif %}\n <input type=\"{{ widget.type }}\" name=\"{{ widget.name }}\"{% include \"django/forms/widgets/attrs.html\" %}>\ndiff --git a/docs/releases/5.0.4.txt b/docs/releases/5.0.4.txt\nindex d15c28d83df9..9b2fd6b17000 100644\n--- a/docs/releases/5.0.4.txt\n+++ b/docs/releases/5.0.4.txt\n@@ -13,3 +13,7 @@ Bugfixes\n   fields with expressions in ``db_default``. As a consequence,\n   ``Model.full_clean()`` no longer validates for empty values in fields with\n   ``db_default`` (:ticket:`35223`).\n+\n+* Fixed a regression in Django 5.0 where the ``AdminFileWidget`` could be\n+  rendered with two ``id`` attributes on the \"Clear\" checkbox\n+  (:ticket:`35273`).\n", "test_patch": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex 50c26095ff21..76a47e486843 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -590,6 +590,19 @@ def test_render(self):\n             '<input type=\"file\" name=\"test\">',\n         )\n \n+    def test_render_with_attrs_id(self):\n+        storage_url = default_storage.url(\"\")\n+        w = widgets.AdminFileWidget()\n+        self.assertHTMLEqual(\n+            w.render(\"test\", self.album.cover_art, attrs={\"id\": \"test_id\"}),\n+            f'<p class=\"file-upload\">Currently: <a href=\"{storage_url}albums/'\n+            r'hybrid_theory.jpg\">albums\\hybrid_theory.jpg</a> '\n+            '<span class=\"clearable-file-input\">'\n+            '<input type=\"checkbox\" name=\"test-clear\" id=\"test-clear_id\"> '\n+            '<label for=\"test-clear_id\">Clear</label></span><br>'\n+            'Change: <input type=\"file\" name=\"test\" id=\"test_id\"></p>',\n+        )\n+\n     def test_render_required(self):\n         widget = widgets.AdminFileWidget()\n         widget.is_required = True\n@@ -618,6 +631,20 @@ def test_render_disabled(self):\n             },\n         )\n \n+    def test_render_checked(self):\n+        storage_url = default_storage.url(\"\")\n+        widget = widgets.AdminFileWidget()\n+        widget.checked = True\n+        self.assertHTMLEqual(\n+            widget.render(\"test\", self.album.cover_art),\n+            f'<p class=\"file-upload\">Currently: <a href=\"{storage_url}albums/'\n+            r'hybrid_theory.jpg\">albums\\hybrid_theory.jpg</a> '\n+            '<span class=\"clearable-file-input\">'\n+            '<input type=\"checkbox\" name=\"test-clear\" id=\"test-clear_id\" checked>'\n+            '<label for=\"test-clear_id\">Clear</label></span><br>'\n+            'Change: <input type=\"file\" name=\"test\" checked></p>',\n+        )\n+\n     def test_readonly_fields(self):\n         \"\"\"\n         File widgets should render as a link when they're marked \"read only.\"\ndiff --git a/tests/forms_tests/widget_tests/test_clearablefileinput.py b/tests/forms_tests/widget_tests/test_clearablefileinput.py\nindex 53b84cc0ecfd..ae54cc4b5da9 100644\n--- a/tests/forms_tests/widget_tests/test_clearablefileinput.py\n+++ b/tests/forms_tests/widget_tests/test_clearablefileinput.py\n@@ -111,6 +111,21 @@ def test_render_disabled(self):\n             ),\n         )\n \n+    def test_render_checked(self):\n+        self.widget.checked = True\n+        self.check_html(\n+            self.widget,\n+            \"myfile\",\n+            FakeFieldFile(),\n+            html=(\n+                'Currently: <a href=\"something\">something</a>'\n+                '<input type=\"checkbox\" name=\"myfile-clear\" id=\"myfile-clear_id\" '\n+                \"checked>\"\n+                '<label for=\"myfile-clear_id\">Clear</label><br>Change: '\n+                '<input type=\"file\" name=\"myfile\" checked>'\n+            ),\n+        )\n+\n     def test_render_no_disabled(self):\n         class TestForm(Form):\n             clearable_file = FileField(\n", "problem_statement": "AdminFileWidget renders two elements with the same ID\nDescription\n\t \nThe AdminFileWidget renders both the checkbox and file input with the same attributes, including the ID.\nThe template actually renders the ID attribute twice.\nBoth, two identical attributes on an element or two elements with the same ID are in violation with version of HTML.\nSee \u200bhttps://github.com/django/django/blob/eff21d8e7a1cb297aedf1c702668b590a1b618f3/django/contrib/admin/templates/admin/widgets/clearable_file_input.html#L3\nThis first appeared in Django 5.0.\nMy suggestion would be to avoid rendering attrs into the checkbox.\n", "hints_text": [["Hello Johanes, thank you for your interest in making Django better. Could you please include a small example (or test case!) showcasing the described issue? Looking at the code and \u200brelevant test I do not see the duplicated id attribute, so I'm assuming there is some specifics on the code you are using that is triggering this behavior. Thank you! Feel free to re-open when you can provide more details.", 1709641698.0], ["Hi Natalia, Thanks, I appreciate you taking the time looking into this and welcoming me. Hehe, but I am not really new ;) I happened to contribute, among other things, the template-based form rendering and autocomplete fields. Thus, I would consider myself somewhat familiar with this part of Django. The test you are pointing to is insufficient, since it doesn't include all arguments what would be passed to a widget by a form. You can see that the output HTML doesn't include an ID for the input[type=file]. Which it would obviously have in an actual form. Funnily enough, the test actually outputs invalid HTML too. A label.for attribute must point to an existing ID, which it doesn't. I am happy to provide a test that will fail. The regression was introduced in Django 5 and only applies to the admin file input template. Cheers, Joe", 1709705494.0], ["I can second the report and will put the triage to accepted.", 1709706162.0], ["Thank you Johanness and J\u00f6rg! Before accepting, we'd still need a sample project or test case showcasing the issue, as I can't reproduce the duplicated ID symptom (I'm using latest main though). I created a project of my own and defined a model with a FileField, then configured its admin so the AdminFileWidget is used. This is the resulting HTML which looks correct to me (at least it does not have duplicated ids): <p class=\"file-upload\">Currently: <a href=\"/images/test_X66RiS7.py\">images/test_X66RiS7.py</a> <span class=\"clearable-file-input\"> <input type=\"checkbox\" name=\"avatar-clear\" id=\"avatar-clear_id\"> <label for=\"avatar-clear_id\">Clear</label></span><br> Change: <input type=\"file\" name=\"avatar\" id=\"id_avatar\"></p>", 1709712213.0], ["Absolutely, here is a draft with a commit that exploits the error: \u200bhttps://github.com/django/django/pull/17946 And that's the error: \u200bhttps://github.com/django/django/actions/runs/8178301006/job/22361926712#step:6:25331 - <input id=\"test-clear_id\" id=\"test_id\" name=\"test-clear\" type=\"checkbox\"><label for=\"test-clear_id\"> ? ------------- + <input id=\"test-clear_id\" name=\"test-clear\" type=\"checkbox\"><label for=\"test-clear_id\"> And yes, a bound field will pass the ID as an attribute to a widget here: \u200bhttps://github.com/django/django/blob/c4df2a77761a1ae392eb5c4803b5712803d5239f/django/forms/boundfield.py#L96-L99 Hehe, and yes, good to be cautious. My last ticket was a dumpster fire. I read the docs this time, promise :P I sincerely appreciate the swift support here <3", 1709735561.0], ["Bisected to 8a6c0203c4e92908c2b26ba54feba4ce7e76d081.", 1709744311.0]], "created_at": "2024-03-06T20:22:48Z"}
{"repo": "django/django", "pull_number": 17939, "instance_id": "django__django-17939", "issue_numbers": ["35223"], "base_commit": "1669e54965e22d9bfd0cc8f8fb969704ac608163", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex ce1c7d1046d5..9c8ab7bfa654 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -29,6 +29,7 @@\n from django.db.models import NOT_PROVIDED, ExpressionWrapper, IntegerField, Max, Value\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.deletion import CASCADE, Collector\n+from django.db.models.expressions import DatabaseDefault\n from django.db.models.fields.related import (\n     ForeignObjectRel,\n     OneToOneField,\n@@ -1633,6 +1634,9 @@ def clean_fields(self, exclude=None):\n             raw_value = getattr(self, f.attname)\n             if f.blank and raw_value in f.empty_values:\n                 continue\n+            # Skip validation for empty fields when db_default is used.\n+            if isinstance(raw_value, DatabaseDefault):\n+                continue\n             try:\n                 setattr(self, f.attname, f.clean(raw_value, self))\n             except ValidationError as e:\ndiff --git a/docs/releases/5.0.4.txt b/docs/releases/5.0.4.txt\nindex 52d3bdfb0e0a..d15c28d83df9 100644\n--- a/docs/releases/5.0.4.txt\n+++ b/docs/releases/5.0.4.txt\n@@ -9,4 +9,7 @@ Django 5.0.4 fixes several bugs in 5.0.3.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on\n+  fields with expressions in ``db_default``. As a consequence,\n+  ``Model.full_clean()`` no longer validates for empty values in fields with\n+  ``db_default`` (:ticket:`35223`).\n", "test_patch": "diff --git a/tests/field_defaults/tests.py b/tests/field_defaults/tests.py\nindex c05d966bdbf8..6a5c75c36aff 100644\n--- a/tests/field_defaults/tests.py\n+++ b/tests/field_defaults/tests.py\n@@ -2,6 +2,7 @@\n from decimal import Decimal\n from math import pi\n \n+from django.core.exceptions import ValidationError\n from django.db import connection\n from django.db.models import Case, F, FloatField, Value, When\n from django.db.models.expressions import (\n@@ -169,6 +170,23 @@ def test_bulk_create_mixed_db_defaults_function(self):\n         years = DBDefaultsFunction.objects.values_list(\"year\", flat=True)\n         self.assertCountEqual(years, [2000, datetime.now().year])\n \n+    def test_full_clean(self):\n+        obj = DBArticle()\n+        obj.full_clean()\n+        obj.save()\n+        obj.refresh_from_db()\n+        self.assertEqual(obj.headline, \"Default headline\")\n+\n+        obj = DBArticle(headline=\"Other title\")\n+        obj.full_clean()\n+        obj.save()\n+        obj.refresh_from_db()\n+        self.assertEqual(obj.headline, \"Other title\")\n+\n+        obj = DBArticle(headline=\"\")\n+        with self.assertRaises(ValidationError):\n+            obj.full_clean()\n+\n \n class AllowedDefaultTests(SimpleTestCase):\n     def test_allowed(self):\n", "problem_statement": "Fields with db_default raise ValidationErrors when full_clean() called\nDescription\n\t\t\n(last modified by Brian Ibbotson)\t\t\nStarting to migrate models in my (large) project to use Django 5\u2019s new db_default attribute for fields (using Django 5.0.2), encountering behavior contrary to my expectations.\nA field with db_default raises a ValidationError when full_clean() called, if that field has been omitted from the create() call.\nThis is (to me) unexpected behavior. Would expect that no error would be raised, the instance would be saved successfully, with the specified db_default value set at the database level.\nHas been explained to me in the Django forums that the ValidationError is correct, that I should instead either \n(1) explicitly choose to exclude the missing fields from full_clean() call, \n(2) write a custom clean method for each field, or\n(3) simply save the instance rather than calling full_clean()\nHad always been impressed on me that it is best practice to always call full_clean() on instance creation and/or update.\nIn either case, having to determine the missing fields and annotate the full_clean() call or write a custom clean method per field seem to work against the usual conception of a default value, which should propagate... well, by default and allow for simpler operation where possible.\nI would suggest having fields with db_default be excluded by default from full_clean()\nIf the current behavior is re-affirmed, would suggest incorporating the suggested 3 workaround steps into the Django documentation, as I suspect most users would have similar expectations as myself when implementing this in future code.\n", "hints_text": [["I would suggest having fields with db_default be excluded by default from full_clean() db_default is just a default value, we cannot always exclude it from full_clean(). What about not valid values provided explicitly in create()? What about None when field is non-nullable? etc.", 1708096830.0], ["I believe that we should find a way to have db_default behave the same way as generated fields when no value has been assigned to the instance when full_clean is called (#35127). Requiring users to explicitly pass it to exclude is simply bad ergonomics IMO. One thing that the solution should take into account is that the value should only be skipped when the value is not assigned. In other words class Article(models.Model): upvotes = models.PositiveIntegerField(db_default=0) a1 = Article(upvotes=-1) a1.full_clean() # should raise a ValidationError a2 = Article(upvotes=42) a2.full_clean() # should *not* raise a ValidationError a1 = Article() a1.full_clean() # should not raise a ValidationError In other words, when a value is present it should be validated otherwise if db_default is provided it should be assumed to be valid just like it's the case with generated fields. A workaround in the mean time is to have both default and db_default assigned but obviously that kind of defeats the purpose of using db_default in the first place.", 1708097005.0], ["Replying to Simon Charette: I believe that we should find a way to have db_default behave the same way as generated fields when no value has been assigned to the instance when full_clean is called (#35127). Requiring users to explicitly pass it to exclude is simply bad ergonomics IMO. Agreed, I think we should treat this as a cleanup not bug.", 1708172756.0], ["@Damir Nafikov, are you still working on this ticket?", 1709549514.0], ["I opened \u200ba PR.", 1709653586.0]], "created_at": "2024-03-05T21:45:03Z"}
{"repo": "django/django", "pull_number": 17938, "instance_id": "django__django-17938", "issue_numbers": ["35267"], "base_commit": "ab22b7c65fa3dc60b097362939ccf49c1c47bc56", "patch": "diff --git a/docs/topics/i18n/timezones.txt b/docs/topics/i18n/timezones.txt\nindex 30ec916ce86f..594c1688a566 100644\n--- a/docs/topics/i18n/timezones.txt\n+++ b/docs/topics/i18n/timezones.txt\n@@ -393,9 +393,15 @@ UTC on storage, and from UTC to the connection's time zone on retrieval.\n \n As a consequence, if you're using PostgreSQL, you can switch between ``USE_TZ\n = False`` and ``USE_TZ = True`` freely. The database connection's time zone\n-will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so that Django\n-obtains correct datetimes in all cases. You don't need to perform any data\n-conversions.\n+will be set to :setting:`DATABASE-TIME_ZONE` or ``UTC`` respectively, so that\n+Django obtains correct datetimes in all cases. You don't need to perform any\n+data conversions.\n+\n+.. admonition:: Time zone settings\n+\n+    The :setting:`time zone <DATABASE-TIME_ZONE>` configured for the connection\n+    in the :setting:`DATABASES` setting is distinct from the general\n+    :setting:`TIME_ZONE` setting.\n \n Other databases\n ~~~~~~~~~~~~~~~\n", "test_patch": "", "problem_statement": "Correct TIME_ZONE setting reference in time zone topic.\nDescription\n\t \n\u200bhttps://docs.djangoproject.com/en/4.2/topics/i18n/timezones/#postgresql\nThe PostgreSQL backend stores datetimes as timestamp with time zone. In practice, this means it converts datetimes from the connection\u2019s time zone to UTC on storage, and from UTC to the connection\u2019s time zone on retrieval.\nThis wording seems to suggest that Django DateTimeField will return datetimes with the tzinfo set to settings.TIME_ZONE, but that's not what I observe. All data returned is in utc.\nAm I mistaking the blurb on the timezone support docs?\n\u200bhttps://github.com/django/django/blob/f5ed4306bbfd2e5543dd02cf5a22326a29253cdf/django/db/models/fields/__init__.py#L1594 defines a to_python which will make a datetime aware, but that's only used by the serialization framework.\nI would expect a from_db_value to convert the returned value from utc to the timezone defined by settings.TIME_ZONE.\n", "hints_text": [["This is not a strict duplicate of #21214, but the discussion there should shed some light on the current behavior.", 1709519818.0], ["Thank you! I think the docs are ambiguous. It sounds like the configured time zone will be used for the connection from the docs I linked, but in practice the connection uses UTC unless a query is executed on the session? Or is there another connection parameter that controls the session timezone? Might be worth a docs update to clarify the current behaviour?", 1709533164.0], ["Replying to Josh Smeaton: Thank you! I think the docs are ambiguous. It sounds like the configured time zone will be used for the connection from the docs I linked, but in practice the connection uses UTC unless a query is executed on the session? Or is there another connection parameter that controls the session timezone? Might be worth a docs update to clarify the current behaviour? Doc clarifications are always welcome. I hope that Aymeric will chime in ;)", 1709534500.0], ["The database connection settings have their own TIME_ZONE setting: \u200bhttps://docs.djangoproject.com/en/5.0/ref/settings/#time-zone, which is what the previous docs I was referring to must have been referencing: \u200bhttps://docs.djangoproject.com/en/4.2/topics/i18n/timezones/#postgresql It makes sense to me now.", 1709568257.0], ["Replying to Josh Smeaton: The database connection settings have their own TIME_ZONE setting: \u200bhttps://docs.djangoproject.com/en/5.0/ref/settings/#time-zone, which is what the previous docs I was referring to must have been referencing: \u200bhttps://docs.djangoproject.com/en/4.2/topics/i18n/timezones/#postgresql It makes sense to me now. Amazing, thank you for letting us know. Do you think the first docs you read still need adjustment? I'm thinking that the TIME_ZONE setting link in the paragraph would be better pointed to this instead: \u200bhttps://docs.djangoproject.com/en/dev/ref/settings/#time-zone", 1709579293.0], ["Replying to Josh Smeaton: The database connection settings have their own TIME_ZONE setting: \u200bhttps://docs.djangoproject.com/en/5.0/ref/settings/#time-zone, which is what the previous docs I was referring to must have been referencing: \u200bhttps://docs.djangoproject.com/en/4.2/topics/i18n/timezones/#postgresql It makes sense to me now. Thanks Josh. Assigned to you, I hope you don't mind fixing it ;)", 1709590872.0], ["\u200bhttps://github.com/django/django/pull/17938", 1709610525.0], ["In 6e195b8: Fixed #35267 -- Clarified time zone topic for PostgreSQL in docs. The timezone documentation for Postgres mentions the behavior of time zone conversion, but links to the wrong setting that controls the behavior. Postgres will not return datetimes in the time zone set by the TIME_ZONE setting, but rather the time zone of the database connection, which is defined by DATABASES.TIME_ZONE setting falling back to UTC. This corrects the link in the documentation and adds note that there are two distinct TIME_ZONE settings and the one most are familiar with is not considered for PostgreSQL time zone conversion.", 1709618098.0], ["In e45ee72: [5.0.x] Fixed #35267 -- Clarified time zone topic for PostgreSQL in docs. The timezone documentation for Postgres mentions the behavior of time zone conversion, but links to the wrong setting that controls the behavior. Postgres will not return datetimes in the time zone set by the TIME_ZONE setting, but rather the time zone of the database connection, which is defined by DATABASES.TIME_ZONE setting falling back to UTC. This corrects the link in the documentation and adds note that there are two distinct TIME_ZONE settings and the one most are familiar with is not considered for PostgreSQL time zone conversion. Backport of 6e195b800aed7d6a0d2a4c073d8f3507f6beb126 from main", 1709618135.0]], "created_at": "2024-03-05T09:47:44Z"}
{"repo": "django/django", "pull_number": 17936, "instance_id": "django__django-17936", "issue_numbers": ["35270"], "base_commit": "73df8b54a2fab53bec4c7573cda5ad8c869c2fd8", "patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 6f08feec257e..f842faf0dab7 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -1,6 +1,5 @@\n import bisect\n import copy\n-import inspect\n from collections import defaultdict\n \n from django.apps import apps\n@@ -969,11 +968,13 @@ def total_unique_constraints(self):\n     @cached_property\n     def _property_names(self):\n         \"\"\"Return a set of the names of the properties defined on the model.\"\"\"\n-        names = []\n-        for name in dir(self.model):\n-            attr = inspect.getattr_static(self.model, name)\n-            if isinstance(attr, property):\n-                names.append(name)\n+        names = set()\n+        for klass in self.model.__mro__:\n+            names |= {\n+                name\n+                for name, value in klass.__dict__.items()\n+                if isinstance(value, property)\n+            }\n         return frozenset(names)\n \n     @cached_property\n", "test_patch": "", "problem_statement": "Optimize Model._meta._property_names\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nContinuing my project to optimize the system checks, I found some optimizations for Options._meta._property_names, which I found to take ~4% of the total runtime for checks.\nMost of this function\u2019s runtime was being spent running inspect.getattr_static(). This is not surprising as it \u200bjumps through many hoops in order to avoid triggering attribute access.\nI added use of getattr_static() back in #28269 / ed244199c72f5bbf33ab4547e06e69873d7271d0 to fix a bug with instance descriptors. But I think it\u2019s overly cautious, and we can assume that accessing the __dict__ of the model class will work fine.\nTwo optimizations make the function run in negligible time:\nChanging the function to use __dict__ directly\nCaching on a per-class basis. This requires using a weak-reference to classes, as we shouldn\u2019t mutate base classes in the MRO, some of which can be non-model subclasses, like Model itself for the pk property, object, or any mixins.\nBefore optimization stats:\n106 calls to _property_names took 26ms, or ~4% of the total runtime of system checks.\nAfter optimization:\nThe same calls take 1ms, or ~0.2% of the total runtime. (The real runtime may be <1ms, but shows as 1 due to rounding up by cProfile.)\n", "hints_text": [["I'm not so sure about this one, particularly after having read the history in the relevant PRs (\u200bthe original optimization in this code and \u200bits regression fix). I wonder, would using \u200bthe solution proposed for \"1.11.x\" be an option for getting rid of inspect.getattr_static? I'm not a fan of the custom weak key cache, it feels like an unnecessary adding to the framework only for optimization purposes.", 1709580376.0], ["\ud83d\udc4b Adam, do you happen to know the overall percentage of the \"win\" each of the 2 optimisations does? i.e. is 80% of it the change to use the klass.__dict__ or is 95% of it the weak_key_cache, etc? Is there a world where we get enough of a benefit from just Changing the function to use __dict__ directly that we don't need the weak_key_cache? I ask because the weak_key_cache is the kind of deep magic that I don't fully understand immediately, and because you mentioned caching on a per-class basis but I'd have assumed (from my naive understanding of these innards) that was already approaching done, by virtue of the cached_property existing on the Options per model? (i.e. Options is a singleton per class)", 1709705375.0], ["I didn\u2019t fully explain the caching. What I meant by \u201cper-class\u201d is per-*any*-class, not per *model class* - that means caching values for all the property names in object (none), in models.Model (just pk, at current), any mixing classes, and so on. Yes, the caching on Options means it\u2019s cached per *model class*, but just relying on that caching means we don\u2019t get to reuse the work done checking everything defined on mixins, Model, or object. weak_key_cache implements a pattern I\u2019ve played with before to associate extra data with an object without attaching arbitrary attributes, since they might clash or affect operations like serialization or repr. django-upgrade uses \u200ba bunch of WeakKeyDictionary instances to keep fixers modular to their own files. It doesn\u2019t make sense to use @weak_key_cache without the __dict__ optimization, because it requires one call per class, whilst the old dir() approach checks attributes defined in the class *and* all superclasses. I profiled __dict__ without @weak_key_cache though, using this implementation: @cached_property def _property_names(self): \"\"\"Return a set of the names of the properties defined on the model.\"\"\" names = set() for klass in self.model.__mro__: names.update( { name for name, value in klass.__dict__.items() if isinstance(value, property) } ) return frozenset(names) The result was that the calls took 2ms, keeping most of the savings. That said, the project I\u2019m using doesn\u2019t have deep model inheritance or many mixins, so we wouldn\u2019t expect the caching to do so much. If you\u2019d both prefer this version, sure, we can go for it. Best to keep things maintainable for all, and we can always add @weak_key_cache or similar in the future.", 1709736334.0], ["Replying to Adam Johnson: [...] The result was that the calls took 2ms, keeping most of the savings. That said, the project I\u2019m using doesn\u2019t have deep model inheritance or many mixins, so we wouldn\u2019t expect the caching to do so much. If you\u2019d both prefer this version, sure, we can go for it. Best to keep things maintainable for all, and we can always add @weak_key_cache or similar in the future. I'm very much in favor of a simpler optimization. I agree with Keryn that @weak_key_cache is the kind of deep magic is not fully understood immediately. Accepting following this simplification proposal.", 1709813028.0], ["Alright, updated.", 1709830062.0]], "created_at": "2024-03-04T18:32:19Z"}
{"repo": "django/django", "pull_number": 17932, "instance_id": "django__django-17932", "issue_numbers": ["35266"], "base_commit": "3d4fe39bac082b835a2d82b717b6ae88ea70ea15", "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 9386567e718b..f903dc2f2251 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -264,9 +264,8 @@ def _check_clashes(self):\n         # model_set and it clashes with Target.model_set.\n         potential_clashes = rel_opts.fields + rel_opts.many_to_many\n         for clash_field in potential_clashes:\n-            # i.e. \"app_label.Target.model_set\".\n-            clash_name = \"%s.%s\" % (rel_opts.label, clash_field.name)\n             if not rel_is_hidden and clash_field.name == rel_name:\n+                clash_name = f\"{rel_opts.label}.{clash_field.name}\"\n                 errors.append(\n                     checks.Error(\n                         f\"Reverse accessor '{rel_opts.object_name}.{rel_name}' \"\n@@ -283,6 +282,7 @@ def _check_clashes(self):\n                 )\n \n             if clash_field.name == rel_query_name:\n+                clash_name = f\"{rel_opts.label}.{clash_field.name}\"\n                 errors.append(\n                     checks.Error(\n                         \"Reverse query name for '%s' clashes with field name '%s'.\"\n@@ -302,12 +302,10 @@ def _check_clashes(self):\n         # Model.m2m accessor.\n         potential_clashes = (r for r in rel_opts.related_objects if r.field is not self)\n         for clash_field in potential_clashes:\n-            # i.e. \"app_label.Model.m2m\".\n-            clash_name = \"%s.%s\" % (\n-                clash_field.related_model._meta.label,\n-                clash_field.field.name,\n-            )\n             if not rel_is_hidden and clash_field.accessor_name == rel_name:\n+                clash_name = (\n+                    f\"{clash_field.related_model._meta.label}.{clash_field.field.name}\"\n+                )\n                 errors.append(\n                     checks.Error(\n                         f\"Reverse accessor '{rel_opts.object_name}.{rel_name}' \"\n@@ -324,6 +322,9 @@ def _check_clashes(self):\n                 )\n \n             if clash_field.accessor_name == rel_query_name:\n+                clash_name = (\n+                    f\"{clash_field.related_model._meta.label}.{clash_field.field.name}\"\n+                )\n                 errors.append(\n                     checks.Error(\n                         \"Reverse query name for '%s' clashes with reverse query name \"\n", "test_patch": "", "problem_statement": "Optimize RelatedField._check_clashes()\nDescription\n\t \nContinuing my project to optimize the system checks, I found some easy optimizations in RelatedField._check_clashes(), which I found to take 6% of the total runtime for checks.\nThe function was formatting strings for error messages for each potential clash. This formatting is wasted when there is no error, which is the typical case. Moreover, the cost is exacerbated due to using the Model._meta.label property, invoking a function call.\nPushing the formatting to error cases speeds up the function significantly. I found this method was called 228 times during system checks for a project with 118 models, taking 4ms or 6% of the total total runtime. After optimizing, the cost is reduced to 1ms, or ~1.5%.\n", "hints_text": [], "created_at": "2024-03-03T22:57:39Z"}
{"repo": "django/django", "pull_number": 17930, "instance_id": "django__django-17930", "issue_numbers": ["35265"], "base_commit": "71d5eafb05a19287d954847beb33e4eeca65b4c4", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 1041e2a63188..a9cddfd4b121 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -564,6 +564,7 @@ answer newbie questions, and generally made Django that much better:\n     Karderio <karderio@gmail.com>\n     Karen Tracey <kmtracey@gmail.com>\n     Karol Sikora <elektrrrus@gmail.com>\n+    Kasun Herath <kasunh01@gmail.com>\n     Katherine \u201cKati\u201d Michel <kthrnmichel@gmail.com>\n     Kathryn Killebrew <kathryn.killebrew@gmail.com>\n     Katie Miller <katie@sub50.com>\n", "test_patch": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 68a32567d877..7c4841f91646 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -11,8 +11,19 @@\n site.register(User)\n site.register(Article)\n \n+\n+class CustomAdminSite(admin.AdminSite):\n+    site_title = \"Custom title\"\n+    site_header = \"Custom site\"\n+\n+\n+custom_site = CustomAdminSite(name=\"test_custom_adminsite\")\n+custom_site.register(User)\n+\n+\n urlpatterns = [\n     path(\"test_admin/admin/\", site.urls),\n+    path(\"test_custom_admin/admin/\", custom_site.urls),\n ]\n \n \n@@ -43,6 +54,13 @@ def test_each_context(self):\n         self.assertEqual(ctx[\"site_url\"], \"/\")\n         self.assertIs(ctx[\"has_permission\"], True)\n \n+    def test_custom_admin_titles(self):\n+        request = self.request_factory.get(reverse(\"test_custom_adminsite:index\"))\n+        request.user = self.u1\n+        ctx = custom_site.each_context(request)\n+        self.assertEqual(ctx[\"site_title\"], \"Custom title\")\n+        self.assertEqual(ctx[\"site_header\"], \"Custom site\")\n+\n     def test_each_context_site_url_with_script_name(self):\n         request = self.request_factory.get(\n             reverse(\"test_adminsite:index\"), SCRIPT_NAME=\"/my-script-name/\"\n", "problem_statement": "Add test for AdminSite with custom headers.\nDescription\n\t \nCommit \u200bcommit introduced attributes to AdminSite class that can control site header, site title and index title. \u200bAdminSite\nBut the corresponding unit test still checks for the default site titles not for the attributes on the site instance. \u200bhttps://github.com/django/django/blob/main/tests/admin_views/test_adminsite.py#L41\n", "hints_text": [["Thanks for the ticket, there is no need to adjust existing tests, I'd rather add a new one, e.g. tests/admin_views/test_adminsite.py diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py index 68a32567d8..cb1da92003 100644 a b 11from django.contrib import admin 22from django.contrib.admin.actions import delete_selected 3 from django.contrib.auth.models import User 3from django.contrib.auth.models import Group, User 44from django.test import SimpleTestCase, TestCase, override_settings 55from django.test.client import RequestFactory 66from django.urls import path, reverse \u2026 \u2026 site = admin.AdminSite(name=\"test_adminsite\") 1111site.register(User) 1212site.register(Article) 1313 14 15class CustomAdminSite(admin.AdminSite): 16 site_title = \"My title\" 17 site_header = \"My admin site\" 18 19 20custom_site = CustomAdminSite(name=\"test_custom_adminsite\") 21custom_site.register(Group) 22 1423urlpatterns = [ 1524 path(\"test_admin/admin/\", site.urls), 25 path(\"test_custom_admin/admin/\", custom_site.urls), 1626] 1727 1828 \u2026 \u2026 class SiteEachContextTest(TestCase): 4353 self.assertEqual(ctx[\"site_url\"], \"/\") 4454 self.assertIs(ctx[\"has_permission\"], True) 4555 56 def test_admin_custom_headers(self): 57 request = self.request_factory.get(reverse(\"test_custom_adminsite:index\")) 58 request.user = self.u1 59 ctx = custom_site.each_context(request) 60 self.assertEqual(ctx[\"site_title\"], \"My title\") 61 self.assertEqual(ctx[\"site_header\"], \"My admin site\") 62 4663 def test_each_context_site_url_with_script_name(self): 4764 request = self.request_factory.get( 4865 reverse(\"test_adminsite:index\"), SCRIPT_NAME=\"/my-script-name/\" For the future, extra test coverage doesn't require a ticket.", 1709448435.0], ["Thanks for the quick feedback! Here is a \u200bPR with the suggested changes.", 1709469069.0]], "created_at": "2024-03-03T18:23:01Z"}
{"repo": "django/django", "pull_number": 17928, "instance_id": "django__django-17928", "issue_numbers": ["14831"], "base_commit": "7326513a8f5d4d4e0aeec28540f9451b939b1dda", "patch": "diff --git a/docs/internals/contributing/writing-code/coding-style.txt b/docs/internals/contributing/writing-code/coding-style.txt\nindex ef5685bea979..7f825da90abd 100644\n--- a/docs/internals/contributing/writing-code/coding-style.txt\n+++ b/docs/internals/contributing/writing-code/coding-style.txt\n@@ -214,20 +214,149 @@ Imports\n Template style\n ==============\n \n-* In Django template code, put one (and only one) space between the curly\n-  brackets and the tag contents.\n+Follow the below rules in Django template code.\n+\n+* ``{% extends %}`` should be the first non-comment line.\n+\n+  Do this:\n+\n+  .. code-block:: html+django\n+\n+      {% extends \"base.html\" %}\n+\n+      {% block content %}\n+        <h1 class=\"font-semibold text-xl\">\n+          {{ pages.title }}\n+        </h1>\n+      {% endblock content %}\n+\n+  Or this:\n+\n+  .. code-block:: html+django\n+\n+      {# This is a comment #}\n+      {% extends \"base.html\" %}\n+\n+      {% block content %}\n+        <h1 class=\"font-semibold text-xl\">\n+          {{ pages.title }}\n+        </h1>\n+      {% endblock content %}\n+\n+  Don't do this:\n+\n+  .. code-block:: html+django\n+\n+      {% load i18n %}\n+      {% extends \"base.html\" %}\n+\n+      {% block content %}\n+        <h1 class=\"font-semibold text-xl\">\n+          {{ pages.title }}\n+        </h1>\n+      {% endblock content %}\n+\n+* Put exactly one space between ``{{``, variable contents, and ``}}``.\n+\n+  Do this:\n+\n+  .. code-block:: html+django\n+\n+      {{ user }}\n+\n+  Don't do this:\n+\n+  .. code-block:: html+django\n+\n+      {{user}}\n+\n+* In ``{% load ... %}``, list libraries in alphabetical order.\n+\n+  Do this:\n+\n+  .. code-block:: html+django\n+\n+      {% load i18n l10 tz %}\n+\n+  Don't do this:\n+\n+  .. code-block:: html+django\n+\n+      {% load l10 i18n tz %}\n+\n+* Put exactly one space between ``{%``, tag contents, and ``%}``.\n \n   Do this:\n \n   .. code-block:: html+django\n \n-      {{ foo }}\n+      {% load humanize %}\n \n   Don't do this:\n \n   .. code-block:: html+django\n \n-      {{foo}}\n+      {%load humanize%}\n+\n+* Put the ``{% block %}`` tag name in the ``{% endblock %}`` tag if it is not\n+  on the same line.\n+\n+  Do this:\n+\n+  .. code-block:: html+django\n+\n+      {% block header %}\n+\n+        Code goes here\n+\n+      {% endblock header %}\n+\n+  Don't do this:\n+\n+  .. code-block:: html+django\n+\n+      {% block header %}\n+\n+        Code goes here\n+\n+      {% endblock %}\n+\n+* Inside curly braces, separate tokens by single spaces, except for around the\n+  ``.`` for attribute access and the ``|`` for a filter.\n+\n+  Do this:\n+\n+  .. code-block:: html+django\n+\n+    {% if user.name|lower == \"admin\" %}\n+\n+  Don't do this:\n+\n+  .. code-block:: html+django\n+\n+    {% if user . name | lower  ==  \"admin\" %}\n+\n+    {{ user.name | upper }}\n+\n+* Within a template using ``{% extends %}``, avoid indenting top-level\n+  ``{% block %}`` tags.\n+\n+  Do this:\n+\n+  .. code-block:: html+django\n+\n+      {% extends \"base.html\" %}\n+\n+      {% block content %}\n+\n+  Don't do this:\n+\n+  .. code-block:: html+django\n+\n+      {% extends \"base.html\" %}\n+\n+        {% block content %}\n+        ...\n \n View style\n ==========\n", "test_patch": "", "problem_statement": "Django Template Style Guide\nDescription\n\t\t\n(last modified by Baptiste Mispelon)\t\t\nIt would be nice to have a standard template style that should be followed. For example, I like to indent my Django templates by two additional spaces every time I enter a new HTML or template block. The Django core templates vary greatly in regards to style and indentation. Much of the time template readability is sacrificed in favour of attempting to preserve the \"appearance\" of the generated HTML code.\nRegardless of what is decided, it would be great to have at least some guidelines for templates added to \u200bhttps://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/#template-style\n", "hints_text": [["I'm in favor of standards in general. What will probably bring this issue to a consensus most quickly would be the following: An overview of the various styles found in the current templates, A draft patch based on whatever the most common/best practice seems to be, A thread on Django Developers to let folks debate the options. A few points that should be specified in a style guide for templates: Indentation: how many spaces? Placement of extends and load tags (at the top seems pretty standard). Whether HTML inside a block should always be on its own line or if short blocks should be kept on one line. See \u200bthe admin base_site template for examples of both. Whether all code inside a block should be indented. (commonly the answer seems to be \"no\") There are probably others, but this is what springs to mind so far. Just to toss my two cents into the ring (how's that for a mixed metaphor?), here's what I think: Even though there's no guiding document like PEP 8 for HTML, I think applying as much of PEP 8 as makes sense is going to be the simplest answer. It's an established and understood document that Python developers are accustomed to. A couple of items that would tend to apply: Where whitespace will not affect rendered output, break up nested tags onto their own lines to keep from running over 80 characters. Separate blocks (or other discrete groups of tags or logical sections) by blank lines. Imports (i.e. load and extends) should be at the top of the file, on separate lines. Proper whitespace within HTML tags. (<span class=\"timestamp hidden\"> not <span class = \" timestamp hidden\" >) I think overall readability and proper indentation of each individual template file is more important than what the HTML output looks like. I wrap my base templates with the spaceless tag though, so it matters less to me. Use 4 spaces for indentation. (I know 2 spaces is popular for HTML among many developers, but PEP 8 recommends 4 and changing to 2 for templates doesn't offer any substantive improvement while it decreases the visual separation).", 1291432452.0], ["I would like to see such a standards guide as well, especially regarding indentation. In addition to whether all code inside a block should be indented, there seems to be a variety of approaches to indentation around other template tags such as conditionals and loops. My preference would be to indent inside of all template tags that span multiple lines.", 1293380013.0], ["I think much of Gabriel's suggestions here make good sense. Though: I think {% load A B C %} is OK; loading in templates is simpler than importing in python since there are no relative imports, from x import y, etc. I think 4-spaces is too much; in python, nesting can (and should) be avoided; in HTML, deep nesting is unavoidable. I'd therefore advocate 2-space indentation or tabs (the width of which can be configured by your editor) I personally also indent template tags and HTML tags alike; e.g. <ul> {% for x in y %} <li>{{ x }}</li> {% endfor %} </ul> (though this obviously doesn't produce terribly pretty HTML, if anyone cares. I prefer pretty templates.) This is dangerous bikeshedding territory, but it seems sensible to have a standard within core code, and would also allow the production of django-template emacs modes, TextMate bundles, etc.", 1316576796.0], ["Actually you can use \"from\" syntax in the load tag, can't you; in those cases it certainly makes sense to keep them on separate lines. Though perhaps that isn't what Gabriel was advocating in the first place; on re-reading he may have been simply saying it shouldn't be on the same line as {% extends %} (which of course must be at the top).", 1316580069.0], ["By now, there is a \u200bplace to add further template style guides (currently it only says to add one space between {{ and the variable name. So we'd need a consensus on what a good template style would mean: Indented for template readability or for meaningful HTML indentation? Indented by two spaces or four? I'd be all for two spaces and indentation as proposed by Simon.", 1555333352.0], ["It looks like there hasn't been much movement on this ticket for a while, and the docs located \u200bhere haven't made any changes to the Template Section. I'm wondering if this is actually something that is still needed or not? If it is, I'm happy to try and gather consensus on what the docs should recommend. If not, perhaps we just mark the ticket as closed?", 1704020828.0], ["Hello Ryan, thanks for going thru these old tickets to try to make a decision about them. Given that the ticket is already accepted, I would suggest to push this ticket forward by pursuing the 3 tasks detailed in the first comment (with the only caveat that the Django Forum would be preferred instead of the Django Developers list), which I agree are the first steps before making any docs changes: An overview of the various styles found in the current templates, A draft patch based on whatever the most common/best practice seems to be, A thread on the Django Forum to let folks debate the options. Looking forward to your forum post!", 1704206229.0], ["I ran the following bash command (which is returning some false positives, for example {al is finding an inline javascrpt alert) to get a sense of what is current in the django/django directory find django/django -type f -name \"*.html\" -exec grep -E \"(\\{\\{[^}]*\\}\\})|(\\{%[^%]*%\\})\" {} + | grep -o -E \"\\{..\" | sort | uniq -c This gives the following usages {{ Count Symbol 724 {{ 2 {\"| 2 {al 1 {if 1 {re 1 {vi 1 {x= 1 {{s {% Count Symbol 2121 {% 1 {%- For the items that don't conform to {{ or {% I'll look more deeply at the occurrences and provide more context for them, but on initial review it seems that the preference / standard seems to be {{ or {% followed by a space", 1704540011.0], ["After reviewing the html files this is what I've found: False positives from the script above ./contrib/admindocs/templates/admin_doc/bookmarklets.html has inline javascript on line 22 which is the source of: Count Symbol 2 {al 1 {if 1 {re 1 {vi 1 {x= ./contrib/admindocs/templates/admin_doc/template_filter_index.html line 23 which is triggering the {\"|. This seems to fall outside of the requirements for this ticket ./contrib/admindocs/templates/admin_doc/template_tag_index.html line 23 which is triggering the {\"|. This seems to fall outside of the requirements for this ticket ./forms/jinja2/django/forms/widgets/multiwidget.html line has {%-`. Per the \u200bjinja2 docs this is in place for whitespace control Files where the standard isn't being followed ./views/templates/technical_500.html on line 157 has <td>{{server_time|date:\"r\"}}</td> Based on these findings it seems that the docs that are currently written are being enforced. Next steps: [X] review extends and load tag placement [ ] placement of HTML in block [ ]indentation practices for code inside of block", 1704547673.0], ["Checking the {% extends} using this bash command find . -name \"*.html\" ! -path \"./venv/*\" -exec grep -n \"% extends\" {} + | awk -F: '$2 > 1 {print \"Filename: \" $1 \", Line number: \" $2 \", Matched string: \" $3}' returns no results. It looks like the {{% extends}} is always at the top line of the html files", 1705145261.0], ["Checking the {% loads using this bash command find . -name \"*.html\" ! -path \"./venv/*\" -exec grep -En \"\\{% load\" {} + | awk -F: '$2 > 2 {print \"Filename: \" $1 \", Line number: \" $2 \", Matched string: \" $3}' returns the following results: Filename: ./django/contrib/admin/templates/admin/auth/user/change_password.html, Line number: 3, Matched string: {% load admin_urls %} Filename: ./django/contrib/admin/templates/admin/index.html, Line number: 25, Matched string: {% load log %} The first item is actually OK upon inspection as there are 2 {% load ... } statements in the file The second item ./django/contrib/admin/templates/admin/index.html has {% load log %} on line 25. This was first added in commit \u200b52f5c9 so it's always been lower in the file. Next step is to determine if moving the line up will break anything", 1705146715.0], ["I moved the {% load log %} from line 25 to line 3 and there weren't any NEW test failures. Once a standard is decided on this could potentially be moved to the top and it doesn't look like any negative impact would be introduced (from a testing perspective anyway). Next step is to create a Django app locally and see what happens", 1705147413.0], ["Replying to Ryan Cheley: I moved the {% load log %} from line 25 to line 3 and there weren't any NEW test failures. Once a standard is decided on this could potentially be moved to the top and it doesn't look like any negative impact would be introduced (from a testing perspective anyway). Next step is to create a Django app locally and see what happens App locally seems to be behaving as expected. Also, in reading the docs I was reminded that a {% load ... %} can have more than one template tag added, so the two outliers here can be moved up into a single {% load ... } command instead of multiple lines This means that /django/contrib/admin/templates/admin/auth/user/change_password.html can have line 2 updated to {% load i18n static admin_urls %} ./django/contrib/admin/templates/admin/index.html can have line 2 updated to be {% load i18n static log %}", 1705148360.0], ["Looking at the {% block ... %} I have this to locate the occurences find . -name \"*.html\" ! -path \"./venv/*\" -exec grep -En \"\\{%\\s*block\\s+\\w+\\s*%\\}\" {} + | awk -F: '$2 > 2 {print \"Filename: \" $1 \", Line number: \" $2 \", Matched string: \" $3}' This returns 365 files in 37 directories. Further investigation will have to wait until next time though", 1705149544.0], ["I made a slight tweak to the script above find . -name \"*.html\" ! -path \"./venv/*\" ! -path \"*/build/*\" -exec grep -En \"\\{%\\s*block\\s+\\w+\\s*%\\}\" {} + | awk -F: 'length($3) > 80 && $2 > 2 {print \"\\n# Filename: \" $1 \"\\nLine number: \" $2 \"\\nMatched string: \\\"\" $3,\"\\\"\"}' > results.md There were 23 matches. This will only get lines that are longer than 80 characters and then writes it to a file called results.md. Initial visual inspection of that file finds the following: the <link ...> tends to be on a single line, see for example /django/contrib/admin/templates/admin/base.html \u200bLine 6 Simple logic for html element classes tends to be on a single line, see for example ./docs/_theme/djangodocs/layout.html \u200bLine 80 Single elements can are on a single line, see for example ./django/contrib/admin/templates/admin/base.html \u200bLine 102 There are two files which may fall outside of the standard: ./django/contrib/admin/templates/admin/auth/user/change_password.html \u200bLine 19 ./django/contrib/admin/templates/admin/change_form.html \u200bLine 36 In each of those cases there are block elements at the end of the line so these seem more like false positives from my script that actual issues The next step is going to be to post to the Forum and the Discord server for next steps", 1706354169.0], ["Post to forum made \u200bhere", 1708161309.0]], "created_at": "2024-03-02T15:07:34Z"}
{"repo": "django/django", "pull_number": 17926, "instance_id": "django__django-17926", "issue_numbers": ["35261"], "base_commit": "bcccea3ef31c777b73cba41a6255cd866bf87237", "patch": "diff --git a/docs/topics/forms/media.txt b/docs/topics/forms/media.txt\nindex 6e7bfdcbd416..3fddf2d4bba6 100644\n--- a/docs/topics/forms/media.txt\n+++ b/docs/topics/forms/media.txt\n@@ -287,7 +287,7 @@ outputting the complete HTML ``<script>`` or ``<link>`` tag content:\n     >>> @html_safe\n     ... class JSPath:\n     ...     def __str__(self):\n-    ...         return '<script src=\"https://example.org/asset.js\" rel=\"stylesheet\">'\n+    ...         return '<script src=\"https://example.org/asset.js\" defer>'\n     ...\n \n     >>> class SomeWidget(forms.TextInput):\n", "test_patch": "", "problem_statement": "Media Path as Objects - Documentation fix and usage example\nDescription\n\t\t\n(last modified by Leandro de Souza)\t\t\nRelated conversation on forum: \u200bhttps://forum.djangoproject.com/t/media-path-as-objects/28470\nIssue: The documentation for Media Path as Objects \u200bhttps://docs.djangoproject.com/en/4.1/topics/forms/media/#paths-as-objects uses an incorrect attribute (rel) on a script tag, source: HTML attribute: rel - HTML: HyperText Markup Language | MDN \u200bhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel. Quoted from the source:\nThe rel attribute defines the relationship between a linked resource and the current document. Valid on <link>, <a>, <area>, and <form>, the supported values depend on the element on which the attribute is found.\nAnother thing is that the example given for the usage of this new feature added on 4.1 is not really that useful. The JSPath class in the example is just a hardcoded script tag that illustrates how to use the __str__ method to render the tag.\nI believe that adding a more useful example would add more \"bright\" to the value that this feature has providen: adding flexibility. Some usage examples of this new feature has been added to the conversation on the forum.\nI would be happy to work on this patch/fix.\n", "hints_text": [["As per the discussion, I\u2019ll accept to fix the error with the rel tag. I\u2019d suggest doing that in an initial commit. Then, I think there\u2019s some review to be done to judge the \u201cbetter example\u201d right. (Enough but not too much)", 1709189109.0], ["After reading the docs on how to submit a patch, i haven't figured it out from which branch should my patch be based. Should it be from the django's \"main\" branch?", 1709193175.0], ["Opened the pull request \u200bhttps://github.com/django/django/pull/17926 for the initial patch. Waiting for new directives about the more \"detailed\" examples mentioned. Cheers and thanks!", 1709284761.0]], "created_at": "2024-03-01T15:17:47Z"}
{"repo": "django/django", "pull_number": 17921, "instance_id": "django__django-17921", "issue_numbers": ["35234"], "base_commit": "0fb104dda287431f5ab74532e45e8471e22b58c8", "patch": "diff --git a/django/contrib/postgres/constraints.py b/django/contrib/postgres/constraints.py\nindex c61072b5a54c..ff702c53b0ea 100644\n--- a/django/contrib/postgres/constraints.py\n+++ b/django/contrib/postgres/constraints.py\n@@ -77,6 +77,14 @@ def _get_expressions(self, schema_editor, query):\n             expressions.append(expression)\n         return ExpressionList(*expressions).resolve_expression(query)\n \n+    def _check(self, model, connection):\n+        references = set()\n+        for expr, _ in self.expressions:\n+            if isinstance(expr, str):\n+                expr = F(expr)\n+            references.update(model._get_expr_references(expr))\n+        return self._check_references(model, references)\n+\n     def _get_condition_sql(self, compiler, schema_editor, query):\n         if self.condition is None:\n             return None\n", "test_patch": "diff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py\nindex e5a8e9dbe9ea..ee0be3cbb390 100644\n--- a/tests/postgres_tests/test_constraints.py\n+++ b/tests/postgres_tests/test_constraints.py\n@@ -2,12 +2,17 @@\n from unittest import mock\n \n from django.contrib.postgres.indexes import OpClass\n+from django.core.checks import Error\n from django.core.exceptions import ValidationError\n from django.db import IntegrityError, NotSupportedError, connection, transaction\n from django.db.models import (\n+    CASCADE,\n+    CharField,\n     CheckConstraint,\n+    DateField,\n     Deferrable,\n     F,\n+    ForeignKey,\n     Func,\n     IntegerField,\n     Model,\n@@ -328,6 +333,57 @@ def test_invalid_include_type(self):\n                 include=\"invalid\",\n             )\n \n+    @isolate_apps(\"postgres_tests\")\n+    def test_check(self):\n+        class Author(Model):\n+            name = CharField(max_length=255)\n+            alias = CharField(max_length=255)\n+\n+            class Meta:\n+                app_label = \"postgres_tests\"\n+\n+        class Book(Model):\n+            title = CharField(max_length=255)\n+            published_date = DateField()\n+            author = ForeignKey(Author, CASCADE)\n+\n+            class Meta:\n+                app_label = \"postgres_tests\"\n+                constraints = [\n+                    ExclusionConstraint(\n+                        name=\"exclude_check\",\n+                        expressions=[\n+                            (F(\"title\"), RangeOperators.EQUAL),\n+                            (F(\"published_date__year\"), RangeOperators.EQUAL),\n+                            (\"published_date__month\", RangeOperators.EQUAL),\n+                            (F(\"author__name\"), RangeOperators.EQUAL),\n+                            (\"author__alias\", RangeOperators.EQUAL),\n+                            (\"nonexistent\", RangeOperators.EQUAL),\n+                        ],\n+                    )\n+                ]\n+\n+        self.assertCountEqual(\n+            Book.check(databases=self.databases),\n+            [\n+                Error(\n+                    \"'constraints' refers to the nonexistent field 'nonexistent'.\",\n+                    obj=Book,\n+                    id=\"models.E012\",\n+                ),\n+                Error(\n+                    \"'constraints' refers to the joined field 'author__alias'.\",\n+                    obj=Book,\n+                    id=\"models.E041\",\n+                ),\n+                Error(\n+                    \"'constraints' refers to the joined field 'author__name'.\",\n+                    obj=Book,\n+                    id=\"models.E041\",\n+                ),\n+            ],\n+        )\n+\n     def test_repr(self):\n         constraint = ExclusionConstraint(\n             name=\"exclude_overlapping\",\n", "problem_statement": "ExclusionConstraint.expressions should be checked for foreign relationship references\nDescription\n\t \nUnlike CheckConstraint.condition, UniqueConstraint.fields, .expressions, and .include the ExclusionConstraint.expressions members are not checked for references to foreign tables to emit models.E041 on violation which \u200bhas been a source of confusion.\nIn order to avoid coupling the model constraint checks with third-party application and allow any third-party application to provide their own checks Model._check_constraint should delegate validation to BaseConstraint.check like _check_fields delegates to Field.check.\nUnfortunately CheckConstraint already defines a .check attribute which I suggest we rename to ._check internally (better name welcome) to avoid collision with the proposed BaseConstraint.check() method and expose a coherent interface.\n", "hints_text": [["\u200bPR", 1708305223.0]], "created_at": "2024-02-29T10:49:58Z"}
{"repo": "django/django", "pull_number": 17916, "instance_id": "django__django-17916", "issue_numbers": ["35257"], "base_commit": "fd2514d17daaa561963e14297fb35cddf483728c", "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 198e0943856b..6032b4d1f49b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -5,6 +5,7 @@\n from collections import defaultdict\n from decimal import Decimal\n from enum import Enum\n+from itertools import chain\n from types import NoneType\n from uuid import UUID\n \n@@ -597,10 +598,16 @@ def __hash__(self):\n     },\n     # Numeric with NULL.\n     {\n-        connector: [\n-            (field_type, NoneType, field_type),\n-            (NoneType, field_type, field_type),\n-        ]\n+        connector: list(\n+            chain.from_iterable(\n+                [(field_type, NoneType, field_type), (NoneType, field_type, field_type)]\n+                for field_type in (\n+                    fields.IntegerField,\n+                    fields.DecimalField,\n+                    fields.FloatField,\n+                )\n+            )\n+        )\n         for connector in (\n             Combinable.ADD,\n             Combinable.SUB,\n@@ -609,7 +616,6 @@ def __hash__(self):\n             Combinable.MOD,\n             Combinable.POW,\n         )\n-        for field_type in (fields.IntegerField, fields.DecimalField, fields.FloatField)\n     },\n     # Date/DateTimeField/DurationField/TimeField.\n     {\n", "test_patch": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 909e317dca11..f7233305a7a4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2654,6 +2654,29 @@ def null():\n                 with self.assertRaisesMessage(FieldError, msg):\n                     expr.output_field\n \n+    def test_resolve_output_field_numbers_with_null(self):\n+        test_values = [\n+            (3.14159, None, FloatField),\n+            (None, 3.14159, FloatField),\n+            (None, 42, IntegerField),\n+            (42, None, IntegerField),\n+            (None, Decimal(\"3.14\"), DecimalField),\n+            (Decimal(\"3.14\"), None, DecimalField),\n+        ]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,\n+            Combinable.POW,\n+        ]\n+        for lhs, rhs, expected_output_field in test_values:\n+            for connector in connectors:\n+                with self.subTest(lhs=lhs, connector=connector, rhs=rhs):\n+                    expr = CombinedExpression(Value(lhs), connector, Value(rhs))\n+                    self.assertIsInstance(expr.output_field, expected_output_field)\n+\n     def test_resolve_output_field_dates(self):\n         tests = [\n             # Add - same type.\n", "problem_statement": "db.models.expressions _connector_combinations for Numeric with NULL returns only FloatField instead of (IntegerField, DecimalField, FloatField)\nDescription\n\t \nDiscovered via writing tests for this related ticket with a LOT of help from David Sanders -- https://code.djangoproject.com/ticket/35235.\nIn \u200bhttps://github.com/django/django/blob/ef2434f8508551fee183079ab471b1dc325c7acb/django/db/models/expressions.py#L599-L613 via \u200bhttps://github.com/django/django/pull/15271,\nthe dictionary comprehension below\n {\n\t\tconnector: [\n\t\t\t(field_type, NoneType, field_type),\n\t\t\t(NoneType, field_type, field_type),\n\t\t]\n\t\tfor connector in (\n\t\t\tCombinable.ADD,\n\t\t\tCombinable.SUB,\n\t\t\tCombinable.MUL,\n\t\t\tCombinable.DIV,\n\t\t\tCombinable.MOD,\n\t\t\tCombinable.POW,\n\t\t)\n\t\tfor field_type in (fields.IntegerField, fields.DecimalField, fields.FloatField)\n\t},\nreturns \nCombinable.ADD: [(fields.FloatField, NoneType, fields.FloatField),\n\t\t\t\t\t (NoneType, fields.FloatField, fields.FloatField),],\nCombinable.SUB: [(fields.FloatField, NoneType, fields.FloatField),\n\t\t\t\t\t (NoneType, fields.FloatField, fields.FloatField),],\n...\ninstead of the expected \nCombinable.ADD: [(fields.IntegerField, NoneType, fields.IntegerField),\n\t\t\t\t\t (NoneType, fields.IntegerField, fields.IntegerField),\n\t\t\t\t\t (fields.DecimalField, NoneType, fields.DecimalField),\n\t\t\t\t\t (NoneType, fields.DecimalField, fields.DecimalField),\n\t\t\t\t\t (fields.FloatField, NoneType, fields.FloatField),\n\t\t\t\t\t (NoneType, fields.FloatField, fields.FloatField),\n\t\t\t\t\t ],\n...\nThis leads to only FloatField throwing FieldError with _output_field_or_none when fields are combined with NULL.\nExamples you can run right now: \noriginal_dict_comp = {\n\t\tconnector: (\n\t\t\t(field_type, None, field_type),\n\t\t\t(None, field_type, field_type),\n\t\t)\n\t\tfor connector in (\n\t\t'ADD', 'SUB', 'MUL', 'DIV', 'MOD', 'POW',\n\t\t)\n\t\tfor field_type in ('IntegerField', 'DecimalField', 'FloatField')\n\t}\n# there are a few ways to write this one\nfixed_dict_comp = {\n\tkey: [\n\t\t(field_type, None, field_type)\n\t\tfor field_type in ['IntegerField', 'DecimalField', 'FloatField']\n\t] + [\n\t\t(None, field_type, field_type)\n\t\tfor field_type in ['IntegerField', 'DecimalField', 'FloatField']\n\t]\n\tfor key in ['ADD', 'SUB', 'MUL', 'DIV', 'MOD', 'POW']\n}\n", "hints_text": [["\u200bPR in progress, comments very welcome.", 1709120385.0], ["In 6a37e9b: Fixed #35257 -- Corrected resolving output_field for IntegerField/DecimalField with NULL.", 1710996606.0]], "created_at": "2024-02-28T15:19:15Z"}
{"repo": "django/django", "pull_number": 17910, "instance_id": "django__django-17910", "issue_numbers": ["35189"], "base_commit": "9c5fe93349bd4339c41d057b87046e5d28be6f77", "patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex c4613fa24ea8..a4aa8e40e327 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -18,6 +18,7 @@\n from django.forms.utils import flatatt\n from django.template.defaultfilters import capfirst, linebreaksbr\n from django.urls import NoReverseMatch, reverse\n+from django.utils.functional import cached_property\n from django.utils.html import conditional_escape, format_html\n from django.utils.safestring import mark_safe\n from django.utils.translation import gettext\n@@ -116,10 +117,14 @@ def __init__(\n \n     @property\n     def media(self):\n-        if \"collapse\" in self.classes:\n-            return forms.Media(js=[\"admin/js/collapse.js\"])\n         return forms.Media()\n \n+    @cached_property\n+    def is_collapsible(self):\n+        if any([field in self.fields for field in self.form.errors]):\n+            return False\n+        return \"collapse\" in self.classes\n+\n     def __iter__(self):\n         for field in self.fields:\n             yield Fieldline(\n@@ -438,6 +443,12 @@ def inline_formset_data(self):\n     def forms(self):\n         return self.formset.forms\n \n+    @cached_property\n+    def is_collapsible(self):\n+        if any(self.formset.errors):\n+            return False\n+        return \"collapse\" in self.classes\n+\n     def non_form_errors(self):\n         return self.formset.non_form_errors()\n \ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 47b4821fcc56..12467de74da4 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2398,8 +2398,6 @@ def media(self):\n         js = [\"vendor/jquery/jquery%s.js\" % extra, \"jquery.init.js\", \"inlines.js\"]\n         if self.filter_vertical or self.filter_horizontal:\n             js.extend([\"SelectBox.js\", \"SelectFilter2.js\"])\n-        if self.classes and \"collapse\" in self.classes:\n-            js.append(\"collapse.js\")\n         return forms.Media(js=[\"admin/js/%s\" % url for url in js])\n \n     def get_extra(self, request, obj=None, **kwargs):\ndiff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex fe60536d62ae..539a11ae6121 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -76,6 +76,20 @@ form ul.inline li {\n     padding-right: 7px;\n }\n \n+/* FIELDSETS */\n+\n+fieldset .fieldset-heading,\n+fieldset .inline-heading,\n+:not(.inline-related) .collapse summary {\n+    border: 1px solid var(--header-bg);\n+    margin: 0;\n+    padding: 8px;\n+    font-weight: 400;\n+    font-size: 0.8125rem;\n+    background: var(--header-bg);\n+    color: var(--header-link-color);\n+}\n+\n /* ALIGNED FIELDSETS */\n \n .aligned label {\n@@ -207,35 +221,16 @@ form div.help ul {\n     width: 450px;\n }\n \n-/* COLLAPSED FIELDSETS */\n+/* COLLAPSIBLE FIELDSETS */\n \n-fieldset.collapsed * {\n-    display: none;\n-}\n-\n-fieldset.collapsed h2, fieldset.collapsed {\n-    display: block;\n-}\n-\n-fieldset.collapsed {\n-    border: 1px solid var(--hairline-color);\n-    border-radius: 4px;\n-    overflow: hidden;\n-}\n-\n-fieldset.collapsed h2 {\n-    background: var(--darkened-bg);\n-    color: var(--body-quiet-color);\n-}\n-\n-fieldset .collapse-toggle {\n-    color: var(--header-link-color);\n-}\n-\n-fieldset.collapsed .collapse-toggle {\n+.collapse summary .fieldset-heading,\n+.collapse summary .inline-heading {\n     background: transparent;\n+    border: none;\n+    color: currentColor;\n     display: inline;\n-    color: var(--link-fg);\n+    margin: 0;\n+    padding: 0;\n }\n \n /* MONOSPACE TEXTAREAS */\n@@ -387,14 +382,16 @@ body.popup .submit-row {\n     position: relative;\n }\n \n-.inline-related h3 {\n+.inline-related h4,\n+.inline-related:not(.tabular) .collapse summary {\n     margin: 0;\n     color: var(--body-quiet-color);\n     padding: 5px;\n     font-size: 0.8125rem;\n     background: var(--darkened-bg);\n-    border-top: 1px solid var(--hairline-color);\n-    border-bottom: 1px solid var(--hairline-color);\n+    border: 1px solid var(--hairline-color);\n+    border-left-color: var(--darkened-bg);\n+    border-right-color: var(--darkened-bg);\n }\n \n .inline-related h3 span.delete {\ndiff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex b58cbd964e6e..932e824c1c98 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -565,10 +565,6 @@ input[type=\"submit\"], button {\n         padding-top: 15px;\n     }\n \n-    fieldset.collapsed .form-row {\n-        display: none;\n-    }\n-\n     .aligned label {\n         width: 100%;\n         min-width: auto;\ndiff --git a/django/contrib/admin/static/admin/js/collapse.js b/django/contrib/admin/static/admin/js/collapse.js\ndeleted file mode 100644\nindex c6c7b0f68a2d..000000000000\n--- a/django/contrib/admin/static/admin/js/collapse.js\n+++ /dev/null\n@@ -1,43 +0,0 @@\n-/*global gettext*/\n-'use strict';\n-{\n-    window.addEventListener('load', function() {\n-        // Add anchor tag for Show/Hide link\n-        const fieldsets = document.querySelectorAll('fieldset.collapse');\n-        for (const [i, elem] of fieldsets.entries()) {\n-            // Don't hide if fields in this fieldset have errors\n-            if (elem.querySelectorAll('div.errors, ul.errorlist').length === 0) {\n-                elem.classList.add('collapsed');\n-                const h2 = elem.querySelector('h2');\n-                const link = document.createElement('a');\n-                link.id = 'fieldsetcollapser' + i;\n-                link.className = 'collapse-toggle';\n-                link.href = '#';\n-                link.textContent = gettext('Show');\n-                h2.appendChild(document.createTextNode(' ('));\n-                h2.appendChild(link);\n-                h2.appendChild(document.createTextNode(')'));\n-            }\n-        }\n-        // Add toggle to hide/show anchor tag\n-        const toggleFunc = function(ev) {\n-            if (ev.target.matches('.collapse-toggle')) {\n-                ev.preventDefault();\n-                ev.stopPropagation();\n-                const fieldset = ev.target.closest('fieldset');\n-                if (fieldset.classList.contains('collapsed')) {\n-                    // Show\n-                    ev.target.textContent = gettext('Hide');\n-                    fieldset.classList.remove('collapsed');\n-                } else {\n-                    // Hide\n-                    ev.target.textContent = gettext('Show');\n-                    fieldset.classList.add('collapsed');\n-                }\n-            }\n-        };\n-        document.querySelectorAll('fieldset.module').forEach(function(el) {\n-            el.addEventListener('click', toggleFunc);\n-        });\n-    });\n-}\ndiff --git a/django/contrib/admin/templates/admin/change_form.html b/django/contrib/admin/templates/admin/change_form.html\nindex 20cc4a392c68..31ff5d6c1029 100644\n--- a/django/contrib/admin/templates/admin/change_form.html\n+++ b/django/contrib/admin/templates/admin/change_form.html\n@@ -47,7 +47,7 @@\n \n {% block field_sets %}\n {% for fieldset in adminform %}\n-  {% include \"admin/includes/fieldset.html\" %}\n+  {% include \"admin/includes/fieldset.html\" with heading_level=2 id_suffix=forloop.counter0 %}\n {% endfor %}\n {% endblock %}\n \ndiff --git a/django/contrib/admin/templates/admin/edit_inline/stacked.html b/django/contrib/admin/templates/admin/edit_inline/stacked.html\nindex 31d917bff08c..73f459ee478b 100644\n--- a/django/contrib/admin/templates/admin/edit_inline/stacked.html\n+++ b/django/contrib/admin/templates/admin/edit_inline/stacked.html\n@@ -3,12 +3,16 @@\n      id=\"{{ inline_admin_formset.formset.prefix }}-group\"\n      data-inline-type=\"stacked\"\n      data-inline-formset=\"{{ inline_admin_formset.inline_formset_data }}\">\n-<fieldset class=\"module {{ inline_admin_formset.classes }}\">\n+<fieldset class=\"module {{ inline_admin_formset.classes }}\" aria-labelledby=\"{{ inline_admin_formset.formset.prefix }}-heading\">\n+  {% if inline_admin_formset.is_collapsible %}<details><summary>{% endif %}\n+  <h2 id=\"{{ inline_admin_formset.formset.prefix }}-heading\" class=\"inline-heading\">\n   {% if inline_admin_formset.formset.max_num == 1 %}\n-    <h2>{{ inline_admin_formset.opts.verbose_name|capfirst }}</h2>\n+    {{ inline_admin_formset.opts.verbose_name|capfirst }}\n   {% else %}\n-    <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}</h2>\n+    {{ inline_admin_formset.opts.verbose_name_plural|capfirst }}\n   {% endif %}\n+  </h2>\n+  {% if inline_admin_formset.is_collapsible %}</summary>{% endif %}\n {{ inline_admin_formset.formset.management_form }}\n {{ inline_admin_formset.formset.non_form_errors }}\n \n@@ -19,11 +23,16 @@ <h3><b>{{ inline_admin_formset.opts.verbose_name|capfirst }}:</b> <span class=\"i\n     {% if inline_admin_formset.formset.can_delete and inline_admin_formset.has_delete_permission and inline_admin_form.original %}<span class=\"delete\">{{ inline_admin_form.deletion_field.field }} {{ inline_admin_form.deletion_field.label_tag }}</span>{% endif %}\n   </h3>\n   {% if inline_admin_form.form.non_field_errors %}{{ inline_admin_form.form.non_field_errors }}{% endif %}\n-  {% for fieldset in inline_admin_form %}\n-    {% include \"admin/includes/fieldset.html\" %}\n-  {% endfor %}\n+\n+  {% with parent_counter=forloop.counter0 %}\n+    {% for fieldset in inline_admin_form %}\n+      {% include \"admin/includes/fieldset.html\" with heading_level=4 id_prefix=parent_counter id_suffix=forloop.counter0 %}\n+    {% endfor %}\n+  {% endwith %}\n+\n   {% if inline_admin_form.needs_explicit_pk_field %}{{ inline_admin_form.pk_field.field }}{% endif %}\n   {% if inline_admin_form.fk_field %}{{ inline_admin_form.fk_field.field }}{% endif %}\n </div>{% endfor %}\n+  {% if inline_admin_formset.is_collapsible %}</details>{% endif %}\n </fieldset>\n </div>\ndiff --git a/django/contrib/admin/templates/admin/edit_inline/tabular.html b/django/contrib/admin/templates/admin/edit_inline/tabular.html\nindex 84c9fe3696ff..7acfda7bd147 100644\n--- a/django/contrib/admin/templates/admin/edit_inline/tabular.html\n+++ b/django/contrib/admin/templates/admin/edit_inline/tabular.html\n@@ -4,12 +4,16 @@\n      data-inline-formset=\"{{ inline_admin_formset.inline_formset_data }}\">\n   <div class=\"tabular inline-related {% if forloop.last %}last-related{% endif %}\">\n {{ inline_admin_formset.formset.management_form }}\n-<fieldset class=\"module {{ inline_admin_formset.classes }}\">\n-   {% if inline_admin_formset.formset.max_num == 1 %}\n-     <h2>{{ inline_admin_formset.opts.verbose_name|capfirst }}</h2>\n-   {% else %}\n-     <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}</h2>\n-   {% endif %}\n+<fieldset class=\"module {{ inline_admin_formset.classes }}\" aria-labelledby=\"{{ inline_admin_formset.formset.prefix }}-heading\">\n+  {% if inline_admin_formset.is_collapsible %}<details><summary>{% endif %}\n+  <h2 id=\"{{ inline_admin_formset.formset.prefix }}-heading\" class=\"inline-heading\">\n+  {% if inline_admin_formset.formset.max_num == 1 %}\n+    {{ inline_admin_formset.opts.verbose_name|capfirst }}\n+  {% else %}\n+    {{ inline_admin_formset.opts.verbose_name_plural|capfirst }}\n+  {% endif %}\n+  </h2>\n+  {% if inline_admin_formset.is_collapsible %}</summary>{% endif %}\n    {{ inline_admin_formset.formset.non_form_errors }}\n    <table>\n      <thead><tr>\n@@ -61,6 +65,7 @@ <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}</h2>\n      {% endfor %}\n      </tbody>\n    </table>\n+  {% if inline_admin_formset.is_collapsible %}</details>{% endif %}\n </fieldset>\n   </div>\n </div>\ndiff --git a/django/contrib/admin/templates/admin/includes/fieldset.html b/django/contrib/admin/templates/admin/includes/fieldset.html\nindex 04e76055ce73..b4eef4754715 100644\n--- a/django/contrib/admin/templates/admin/includes/fieldset.html\n+++ b/django/contrib/admin/templates/admin/includes/fieldset.html\n@@ -1,5 +1,10 @@\n-<fieldset class=\"module aligned {{ fieldset.classes }}\">\n-    {% if fieldset.name %}<h2>{{ fieldset.name }}</h2>{% endif %}\n+{% with prefix=fieldset.formset.prefix|default:\"fieldset\" id_prefix=id_prefix|default:\"0\" id_suffix=id_suffix|default:\"0\" name=fieldset.name|default:\"\"|slugify %}\n+<fieldset class=\"module aligned {{ fieldset.classes }}\"{% if name %} aria-labelledby=\"{{ prefix }}-{{ id_prefix}}-{{ name }}-{{ id_suffix }}-heading\"{% endif %}>\n+    {% if name %}\n+        {% if fieldset.is_collapsible %}<details><summary>{% endif %}\n+        <h{{ heading_level|default:2 }} id=\"{{ prefix }}-{{ id_prefix}}-{{ name }}-{{ id_suffix }}-heading\" class=\"fieldset-heading\">{{ fieldset.name }}</h{{ heading_level|default:2 }}>\n+        {% if fieldset.is_collapsible %}</summary>{% endif %}\n+    {% endif %}\n     {% if fieldset.description %}\n         <div class=\"description\">{{ fieldset.description|safe }}</div>\n     {% endif %}\n@@ -31,4 +36,6 @@\n             {% if not line.fields|length == 1 %}</div>{% endif %}\n         </div>\n     {% endfor %}\n+    {% if name and fieldset.is_collapsible %}</details>{% endif %}\n </fieldset>\n+{% endwith %}\ndiff --git a/docs/ref/contrib/admin/_images/fieldsets.png b/docs/ref/contrib/admin/_images/fieldsets.png\nindex 2e00302b59bd..ae1a415e73e7 100644\nBinary files a/docs/ref/contrib/admin/_images/fieldsets.png and b/docs/ref/contrib/admin/_images/fieldsets.png differ\ndiff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt\nindex 2a5652c24b83..b7e94c7387d7 100644\n--- a/docs/ref/contrib/admin/index.txt\n+++ b/docs/ref/contrib/admin/index.txt\n@@ -424,9 +424,16 @@ subclass::\n                 \"classes\": [\"wide\", \"collapse\"],\n             }\n \n-        Fieldsets with the ``collapse`` style will be initially collapsed in\n-        the admin and replaced with a small \"click to expand\" link. Fieldsets\n-        with the ``wide`` style will be given extra horizontal space.\n+        Fieldsets with the ``wide`` style will be given extra horizontal\n+        space in the admin interface.\n+        Fieldsets with a name and the ``collapse`` style will be initially\n+        collapsed, using an expandable widget with a toggle for switching\n+        their visibility.\n+\n+        .. versionchanged:: 5.1\n+\n+            ``fieldsets`` using the ``collapse`` class now use ``<details>``\n+            and ``<summary>`` elements, provided they define a ``name``.\n \n     * ``description``\n         A string of optional extra text to be displayed at the top of each\n@@ -2308,8 +2315,12 @@ The ``InlineModelAdmin`` class adds or customizes:\n     A list or tuple containing extra CSS classes to apply to the fieldset that\n     is rendered for the inlines. Defaults to ``None``. As with classes\n     configured in :attr:`~ModelAdmin.fieldsets`, inlines with a ``collapse``\n-    class will be initially collapsed and their header will have a small \"show\"\n-    link.\n+    class will be initially collapsed using an expandable widget.\n+\n+    .. versionchanged:: 5.1\n+\n+        ``fieldsets`` using the ``collapse`` class now use ``<details>`` and\n+        ``<summary>`` elements, provided they define a ``name``.\n \n .. attribute:: InlineModelAdmin.extra\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 68315205dfe2..faaa5c983388 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -419,6 +419,15 @@ Miscellaneous\n   a ``<footer>`` tag instead of a ``<div>``, and also moved below the\n   ``<div id=\"main\">`` element.\n \n+* In order to improve accessibility, the expandable widget used for\n+  :attr:`ModelAdmin.fieldsets <django.contrib.admin.ModelAdmin.fieldsets>` and\n+  :attr:`InlineModelAdmin.fieldsets <django.contrib.admin.InlineModelAdmin>`,\n+  when the fieldset has a name and use the ``collapse`` class, now includes\n+  ``<details>`` and ``<summary>`` elements.\n+\n+* The JavaScript file ``collapse.js`` is removed since it is no longer needed\n+  in the Django admin site.\n+\n * :meth:`.SimpleTestCase.assertURLEqual` and\n   :meth:`~django.test.SimpleTestCase.assertInHTML` now add ``\": \"`` to the\n   ``msg_prefix``. This is consistent with the behavior of other assertions.\n", "test_patch": "diff --git a/js_tests/tests.html b/js_tests/tests.html\nindex adeac6612536..011998e5a750 100644\n--- a/js_tests/tests.html\n+++ b/js_tests/tests.html\n@@ -143,7 +143,6 @@\n     <script src='./admin/inlines.test.js'></script>\n \n     <script src='../django/contrib/admin/static/admin/js/actions.js' data-cover></script>\n-    <script src='../django/contrib/admin/static/admin/js/collapse.js' data-cover></script>\n     <script src='../django/contrib/admin/static/admin/js/prepopulate.js' data-cover></script>\n     <script src='../django/contrib/admin/static/admin/js/urlify.js' data-cover></script>\n     <script src='./admin/URLify.test.js'></script>\ndiff --git a/tests/admin_inlines/admin.py b/tests/admin_inlines/admin.py\nindex 0ec56d71b36e..3cdaee22df26 100644\n--- a/tests/admin_inlines/admin.py\n+++ b/tests/admin_inlines/admin.py\n@@ -40,6 +40,8 @@\n     OutfitItem,\n     ParentModelWithCustomPk,\n     Person,\n+    Photo,\n+    Photographer,\n     Poll,\n     Profile,\n     ProfileCollection,\n@@ -98,6 +100,57 @@ class AuthorAdmin(admin.ModelAdmin):\n     ]\n \n \n+class PhotoInlineMixin:\n+    model = Photo\n+    extra = 2\n+    fieldsets = [\n+        (None, {\"fields\": [\"image\", \"title\"]}),\n+        (\n+            \"Details\",\n+            {\"fields\": [\"description\", \"creation_date\"], \"classes\": [\"collapse\"]},\n+        ),\n+        (\n+            \"Details\",  # Fieldset name intentionally duplicated\n+            {\"fields\": [\"update_date\", \"updated_by\"]},\n+        ),\n+    ]\n+\n+\n+class PhotoTabularInline(PhotoInlineMixin, admin.TabularInline):\n+    pass\n+\n+\n+class PhotoStackedExtra2Inline(PhotoInlineMixin, admin.StackedInline):\n+    pass\n+\n+\n+class PhotoStackedExtra3Inline(PhotoInlineMixin, admin.StackedInline):\n+    extra = 3\n+\n+\n+class PhotoStackedCollapsibleInline(PhotoInlineMixin, admin.StackedInline):\n+    fieldsets = []\n+    classes = [\"collapse\"]\n+\n+\n+class PhotographerAdmin(admin.ModelAdmin):\n+    fieldsets = [\n+        (None, {\"fields\": [\"firstname\", \"fullname\"]}),\n+        (\"Advanced options\", {\"fields\": [\"nationality\", \"residency\"]}),\n+        (\n+            \"Advanced options\",  # Fieldset name intentionally duplicated\n+            {\"fields\": [\"siblings\", \"children\"], \"classes\": [\"collapse\"]},\n+        ),\n+    ]\n+    inlines = [\n+        PhotoTabularInline,\n+        PhotoTabularInline,\n+        PhotoStackedExtra2Inline,\n+        PhotoStackedExtra3Inline,\n+        PhotoStackedCollapsibleInline,\n+    ]\n+\n+\n class InnerInline(admin.StackedInline):\n     model = Inner\n     can_delete = False\n@@ -454,6 +507,7 @@ def get_inlines(self, request, obj):\n site.register(Chapter, inlines=[FootNoteNonEditableInlineCustomForm])\n site.register(OutfitItem, inlines=[WeaknessInlineCustomForm])\n site.register(Person, inlines=[AuthorTabularInline, FashonistaStackedInline])\n+site.register(Photographer, PhotographerAdmin)\n site.register(Course, ClassAdminStackedHorizontal)\n site.register(CourseProxy, ClassAdminStackedVertical)\n site.register(CourseProxy1, ClassAdminTabularVertical)\ndiff --git a/tests/admin_inlines/models.py b/tests/admin_inlines/models.py\nindex eca5bae422c1..5a85556a55c7 100644\n--- a/tests/admin_inlines/models.py\n+++ b/tests/admin_inlines/models.py\n@@ -180,6 +180,27 @@ class ShoppingWeakness(models.Model):\n     item = models.ForeignKey(OutfitItem, models.CASCADE)\n \n \n+# Models for #35189\n+\n+\n+class Photographer(Person):\n+    fullname = models.CharField(max_length=100)\n+    nationality = models.CharField(max_length=100)\n+    residency = models.CharField(max_length=100)\n+    siblings = models.IntegerField()\n+    children = models.IntegerField()\n+\n+\n+class Photo(models.Model):\n+    photographer = models.ForeignKey(Photographer, on_delete=models.CASCADE)\n+    image = models.CharField(max_length=100)\n+    title = models.CharField(max_length=100)\n+    description = models.TextField()\n+    creation_date = models.DateField()\n+    update_date = models.DateField()\n+    updated_by = models.CharField(max_length=100)\n+\n+\n # Models for #13510\n \n \ndiff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 9533cc9af3c6..dee703825d1e 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -4,7 +4,9 @@\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import RequestFactory, TestCase, override_settings\n+from django.test.selenium import screenshot_cases\n from django.urls import reverse\n+from django.utils.translation import gettext\n \n from .admin import InnerInline\n from .admin import site as admin_site\n@@ -117,7 +119,14 @@ def test_many_to_many_inlines(self):\n         \"Autogenerated many-to-many inlines are displayed correctly (#13407)\"\n         response = self.client.get(reverse(\"admin:admin_inlines_author_add\"))\n         # The heading for the m2m inline block uses the right text\n-        self.assertContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         # The \"add another\" label is correct\n         self.assertContains(response, \"Add another Author-book relationship\")\n         # The '+' is dropped from the autogenerated form prefix (Author_books+)\n@@ -737,13 +746,35 @@ def test_noneditable_inline_has_field_inputs(self):\n \n     def test_inlines_plural_heading_foreign_key(self):\n         response = self.client.get(reverse(\"admin:admin_inlines_holder4_add\"))\n-        self.assertContains(response, \"<h2>Inner4 stackeds</h2>\", html=True)\n-        self.assertContains(response, \"<h2>Inner4 tabulars</h2>\", html=True)\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"inner4stacked_set-heading\" class=\"inline-heading\">'\n+                \"Inner4 stackeds</h2>\"\n+            ),\n+            html=True,\n+        )\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"inner4tabular_set-heading\" class=\"inline-heading\">'\n+                \"Inner4 tabulars</h2>\"\n+            ),\n+            html=True,\n+        )\n \n     def test_inlines_singular_heading_one_to_one(self):\n         response = self.client.get(reverse(\"admin:admin_inlines_person_add\"))\n-        self.assertContains(response, \"<h2>Author</h2>\", html=True)  # Tabular.\n-        self.assertContains(response, \"<h2>Fashionista</h2>\", html=True)  # Stacked.\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"author-heading\" class=\"inline-heading\">Author</h2>',\n+            html=True,\n+        )  # Tabular.\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"fashionista-heading\" class=\"inline-heading\">Fashionista</h2>',\n+            html=True,\n+        )  # Stacked.\n \n     def test_inlines_based_on_model_state(self):\n         parent = ShowInlineParent.objects.create(show_inlines=False)\n@@ -914,28 +945,50 @@ def setUp(self):\n     def test_inline_add_m2m_noperm(self):\n         response = self.client.get(reverse(\"admin:admin_inlines_author_add\"))\n         # No change permission on books, so no inline\n-        self.assertNotContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertNotContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Author-Book Relationship\")\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n \n     def test_inline_add_fk_noperm(self):\n         response = self.client.get(reverse(\"admin:admin_inlines_holder2_add\"))\n         # No permissions on Inner2s, so no inline\n-        self.assertNotContains(response, \"<h2>Inner2s</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Inner2\")\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n \n     def test_inline_change_m2m_noperm(self):\n         response = self.client.get(self.author_change_url)\n         # No change permission on books, so no inline\n-        self.assertNotContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertNotContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Author-Book Relationship\")\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n \n     def test_inline_change_fk_noperm(self):\n         response = self.client.get(self.holder_change_url)\n         # No permissions on Inner2s, so no inline\n-        self.assertNotContains(response, \"<h2>Inner2s</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Inner2\")\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n \n@@ -959,7 +1012,14 @@ def test_inline_add_m2m_view_only_perm(self):\n         self.assertIs(\n             response.context[\"inline_admin_formset\"].has_delete_permission, False\n         )\n-        self.assertContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(\n             response,\n             '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n@@ -975,7 +1035,14 @@ def test_inline_add_m2m_add_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse(\"admin:admin_inlines_author_add\"))\n         # No change permission on Books, so no inline\n-        self.assertNotContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertNotContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Author-Book Relationship\")\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n \n@@ -986,7 +1053,11 @@ def test_inline_add_fk_add_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse(\"admin:admin_inlines_holder2_add\"))\n         # Add permission on inner2s, so we get the inline\n-        self.assertContains(response, \"<h2>Inner2s</h2>\")\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Inner2\")\n         self.assertContains(\n             response,\n@@ -1002,7 +1073,14 @@ def test_inline_change_m2m_add_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n         # No change permission on books, so no inline\n-        self.assertNotContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertNotContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Author-Book Relationship\")\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n@@ -1026,7 +1104,14 @@ def test_inline_change_m2m_view_only_perm(self):\n         self.assertIs(\n             response.context[\"inline_admin_formset\"].has_delete_permission, False\n         )\n-        self.assertContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(\n             response,\n             '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n@@ -1059,7 +1144,14 @@ def test_inline_change_m2m_change_perm(self):\n         self.assertIs(\n             response.context[\"inline_admin_formset\"].has_delete_permission, True\n         )\n-        self.assertContains(response, \"<h2>Author-book relationships</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"Author_books-heading\" class=\"inline-heading\">'\n+                \"Author-book relationships</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Author-book relationship\")\n         self.assertContains(\n             response,\n@@ -1082,7 +1174,11 @@ def test_inline_change_fk_add_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n         # Add permission on inner2s, so we can add but not modify existing\n-        self.assertContains(response, \"<h2>Inner2s</h2>\")\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Inner2\")\n         # 3 extra forms only, not the existing instance form\n         self.assertContains(\n@@ -1105,7 +1201,16 @@ def test_inline_change_fk_change_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n         # Change permission on inner2s, so we can change existing but not add new\n-        self.assertContains(response, \"<h2>Inner2s</h2>\", count=2)\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         # Just the one form for existing instances\n         self.assertContains(\n             response,\n@@ -1148,7 +1253,11 @@ def test_inline_change_fk_add_change_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n         # Add/change perm, so we can add new and change existing\n-        self.assertContains(response, \"<h2>Inner2s</h2>\")\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         # One form for existing instance and three extra for new\n         self.assertContains(\n             response,\n@@ -1174,7 +1283,11 @@ def test_inline_change_fk_change_del_perm(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n         # Change/delete perm on inner2s, so we can change/delete existing\n-        self.assertContains(response, \"<h2>Inner2s</h2>\")\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         # One form for existing instance only, no new\n         self.assertContains(\n             response,\n@@ -1205,7 +1318,16 @@ def test_inline_change_fk_all_perms(self):\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n         # All perms on inner2s, so we can add/change/delete\n-        self.assertContains(response, \"<h2>Inner2s</h2>\", count=2)\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"inner2_set-2-heading\" class=\"inline-heading\">Inner2s</h2>',\n+            html=True,\n+        )\n         # One form for existing instance only, three for new\n         self.assertContains(\n             response,\n@@ -1367,22 +1489,69 @@ class BothVerboseNameProfileInline(TabularInline):\n         response = modeladmin.changeform_view(request)\n         self.assertNotContains(response, \"Add another Profile\")\n         # Non-verbose model.\n-        self.assertContains(response, \"<h2>Non-verbose childss</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"profile_set-heading\" class=\"inline-heading\">'\n+                \"Non-verbose childss</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Non-verbose child\")\n-        self.assertNotContains(response, \"<h2>Profiles</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"profile_set-heading\" class=\"inline-heading\">Profiles</h2>',\n+            html=True,\n+        )\n         # Model with verbose name.\n-        self.assertContains(response, \"<h2>Childs with verbose names</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"verbosenameprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with verbose names</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Childs with verbose name\")\n-        self.assertNotContains(response, \"<h2>Model with verbose name onlys</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"verbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with verbose name onlys</h2>\",\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Model with verbose name only\")\n         # Model with verbose name plural.\n-        self.assertContains(response, \"<h2>Childs with verbose name plurals</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"verbosenamepluralprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with verbose name plurals</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Childs with verbose name plural\")\n-        self.assertNotContains(response, \"<h2>Model with verbose name plural only</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"verbosenamepluralprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with verbose name plural only</h2>\",\n+            html=True,\n+        )\n         # Model with both verbose names.\n-        self.assertContains(response, \"<h2>Childs with both verbose namess</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"bothverbosenameprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with both verbose namess</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Childs with both verbose names\")\n-        self.assertNotContains(response, \"<h2>Model with both - plural name</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"bothverbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with both - plural name</h2>\",\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Model with both - name\")\n \n     def test_verbose_name_plural_inline(self):\n@@ -1415,21 +1584,68 @@ class BothVerboseNameProfileInline(TabularInline):\n         request.user = self.superuser\n         response = modeladmin.changeform_view(request)\n         # Non-verbose model.\n-        self.assertContains(response, \"<h2>Non-verbose childs</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"profile_set-heading\" class=\"inline-heading\">'\n+                \"Non-verbose childs</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Profile\")\n-        self.assertNotContains(response, \"<h2>Profiles</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"profile_set-heading\" class=\"inline-heading\">Profiles</h2>',\n+            html=True,\n+        )\n         # Model with verbose name.\n-        self.assertContains(response, \"<h2>Childs with verbose name</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"verbosenameprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with verbose name</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Model with verbose name only\")\n-        self.assertNotContains(response, \"<h2>Model with verbose name onlys</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"verbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with verbose name onlys</h2>\",\n+            html=True,\n+        )\n         # Model with verbose name plural.\n-        self.assertContains(response, \"<h2>Childs with verbose name plural</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"verbosenamepluralprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with verbose name plural</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Profile\")\n-        self.assertNotContains(response, \"<h2>Model with verbose name plural only</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"verbosenamepluralprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with verbose name plural only</h2>\",\n+            html=True,\n+        )\n         # Model with both verbose names.\n-        self.assertContains(response, \"<h2>Childs with both verbose names</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"bothverbosenameprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with both verbose names</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Model with both - name\")\n-        self.assertNotContains(response, \"<h2>Model with both - plural name</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"bothverbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with both - plural name</h2>\",\n+            html=True,\n+        )\n \n     def test_both_verbose_names_inline(self):\n         class NonVerboseProfileInline(TabularInline):\n@@ -1466,30 +1682,158 @@ class BothVerboseNameProfileInline(TabularInline):\n         response = modeladmin.changeform_view(request)\n         self.assertNotContains(response, \"Add another Profile\")\n         # Non-verbose model.\n-        self.assertContains(response, \"<h2>Non-verbose childs - plural name</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"profile_set-heading\" class=\"inline-heading\">'\n+                \"Non-verbose childs - plural name</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Non-verbose childs - name\")\n-        self.assertNotContains(response, \"<h2>Profiles</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"profile_set-heading\" class=\"inline-heading\">Profiles</h2>',\n+            html=True,\n+        )\n         # Model with verbose name.\n-        self.assertContains(response, \"<h2>Childs with verbose name - plural name</h2>\")\n+        self.assertContains(\n+            response,\n+            (\n+                '<h2 id=\"verbosenameprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with verbose name - plural name</h2>\"\n+            ),\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Childs with verbose name - name\")\n-        self.assertNotContains(response, \"<h2>Model with verbose name onlys</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"verbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with verbose name onlys</h2>\",\n+            html=True,\n+        )\n         # Model with verbose name plural.\n         self.assertContains(\n             response,\n-            \"<h2>Childs with verbose name plural - plural name</h2>\",\n+            (\n+                '<h2 id=\"verbosenamepluralprofile_set-heading\" class=\"inline-heading\">'\n+                \"Childs with verbose name plural - plural name</h2>\"\n+            ),\n+            html=True,\n         )\n         self.assertContains(\n             response,\n             \"Add another Childs with verbose name plural - name\",\n         )\n-        self.assertNotContains(response, \"<h2>Model with verbose name plural only</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"verbosenamepluralprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with verbose name plural only</h2>\",\n+            html=True,\n+        )\n         # Model with both verbose names.\n-        self.assertContains(response, \"<h2>Childs with both - plural name</h2>\")\n+        self.assertContains(\n+            response,\n+            '<h2 id=\"bothverbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Childs with both - plural name</h2>\",\n+            html=True,\n+        )\n         self.assertContains(response, \"Add another Childs with both - name\")\n-        self.assertNotContains(response, \"<h2>Model with both - plural name</h2>\")\n+        self.assertNotContains(\n+            response,\n+            '<h2 id=\"bothverbosenameprofile_set-heading\" class=\"inline-heading\">'\n+            \"Model with both - plural name</h2>\",\n+            html=True,\n+        )\n         self.assertNotContains(response, \"Add another Model with both - name\")\n \n \n+@override_settings(ROOT_URLCONF=\"admin_inlines.urls\")\n+class TestInlineWithFieldsets(TestDataMixin, TestCase):\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_inline_headings(self):\n+        response = self.client.get(reverse(\"admin:admin_inlines_photographer_add\"))\n+        # Page main title.\n+        self.assertContains(response, \"<h1>Add photographer</h1>\", html=True)\n+\n+        # Headings for the toplevel fieldsets. The first one has no name.\n+        self.assertContains(response, '<fieldset class=\"module aligned \">')\n+        # The second and third have the same \"Advanced options\" name, but the\n+        # second one has the \"collapse\" class.\n+        for x, classes in ((1, \"\"), (2, \"collapse\")):\n+            heading_id = f\"fieldset-0-advanced-options-{x}-heading\"\n+            with self.subTest(heading_id=heading_id):\n+                self.assertContains(\n+                    response,\n+                    f'<fieldset class=\"module aligned {classes}\" '\n+                    f'aria-labelledby=\"{heading_id}\">',\n+                )\n+                self.assertContains(\n+                    response,\n+                    f'<h2 id=\"{heading_id}\" class=\"fieldset-heading\">'\n+                    \"Advanced options</h2>\",\n+                )\n+                self.assertContains(response, f'id=\"{heading_id}\"', count=1)\n+\n+        # Headings and subheadings for all the inlines.\n+        for inline_admin_formset in response.context[\"inline_admin_formsets\"]:\n+            prefix = inline_admin_formset.formset.prefix\n+            heading_id = f\"{prefix}-heading\"\n+            formset_heading = (\n+                f'<h2 id=\"{heading_id}\" class=\"inline-heading\">Photos</h2>'\n+            )\n+            self.assertContains(response, formset_heading, html=True)\n+            self.assertContains(response, f'id=\"{heading_id}\"', count=1)\n+\n+            # If this is a TabularInline, do not make further asserts since\n+            # fieldsets are not shown as such in this table layout.\n+            if \"tabular\" in inline_admin_formset.opts.template:\n+                continue\n+\n+            if \"collapse\" in inline_admin_formset.classes:\n+                formset_heading = f\"<summary>{formset_heading}</summary>\"\n+                self.assertContains(response, formset_heading, html=True, count=1)\n+\n+            # Headings for every formset (the amount depends on `extra`).\n+            for y, inline_admin_form in enumerate(inline_admin_formset):\n+                y_plus_one = y + 1\n+                form_heading = (\n+                    f'<h3><b>Photo:</b> <span class=\"inline_label\">#{y_plus_one}</span>'\n+                    \"</h3>\"\n+                )\n+                self.assertContains(response, form_heading, html=True)\n+\n+                # Every fieldset defined for an inline's form.\n+                for z, fieldset in enumerate(inline_admin_form):\n+                    if fieldset.name:\n+                        heading_id = f\"{prefix}-{y}-details-{z}-heading\"\n+                        self.assertContains(\n+                            response,\n+                            f'<fieldset class=\"module aligned {fieldset.classes}\" '\n+                            f'aria-labelledby=\"{heading_id}\">',\n+                        )\n+                        fieldset_heading = (\n+                            f'<h4 id=\"{heading_id}\" class=\"fieldset-heading\">'\n+                            f\"Details</h4>\"\n+                        )\n+                        self.assertContains(response, fieldset_heading)\n+                        if \"collapse\" in fieldset.classes:\n+                            self.assertContains(\n+                                response,\n+                                f\"<summary>{fieldset_heading}</summary>\",\n+                                html=True,\n+                            )\n+                        self.assertContains(response, f'id=\"{heading_id}\"', count=1)\n+\n+                    else:\n+                        fieldset_html = (\n+                            f'<fieldset class=\"module aligned {fieldset.classes}\">'\n+                        )\n+                        self.assertContains(response, fieldset_html)\n+\n+\n @override_settings(ROOT_URLCONF=\"admin_inlines.urls\")\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = [\"admin_inlines\"] + AdminSeleniumTestCase.available_apps\n@@ -1850,10 +2194,11 @@ def test_delete_inlines(self):\n             \"form#profilecollection_form tr.dynamic-profile_set#profile_set-2\", 1\n         )\n \n+    @screenshot_cases([\"desktop_size\", \"mobile_size\", \"rtl\", \"dark\", \"high_contrast\"])\n     def test_collapsed_inlines(self):\n         from selenium.webdriver.common.by import By\n \n-        # Collapsed inlines have SHOW/HIDE links.\n+        # Collapsed inlines use details and summary elements.\n         self.admin_login(username=\"super\", password=\"secret\")\n         self.selenium.get(\n             self.live_server_url + reverse(\"admin:admin_inlines_author_add\")\n@@ -1863,19 +2208,21 @@ def test_collapsed_inlines(self):\n             \"#id_nonautopkbook_set-0-title\",\n             \"#id_nonautopkbook_set-2-0-title\",\n         ]\n-        show_links = self.selenium.find_elements(By.LINK_TEXT, \"SHOW\")\n-        self.assertEqual(len(show_links), 3)\n+        summaries = self.selenium.find_elements(By.TAG_NAME, \"summary\")\n+        self.assertEqual(len(summaries), 3)\n+        self.take_screenshot(\"loaded\")\n         for show_index, field_name in enumerate(test_fields, 0):\n             self.wait_until_invisible(field_name)\n-            show_links[show_index].click()\n+            summaries[show_index].click()\n             self.wait_until_visible(field_name)\n-        hide_links = self.selenium.find_elements(By.LINK_TEXT, \"HIDE\")\n-        self.assertEqual(len(hide_links), 2)\n+        self.take_screenshot(\"expanded\")\n         for hide_index, field_name in enumerate(test_fields, 0):\n             self.wait_until_visible(field_name)\n-            hide_links[hide_index].click()\n+            summaries[hide_index].click()\n             self.wait_until_invisible(field_name)\n+        self.take_screenshot(\"collapsed\")\n \n+    @screenshot_cases([\"desktop_size\", \"mobile_size\", \"rtl\", \"dark\", \"high_contrast\"])\n     def test_added_stacked_inline_with_collapsed_fields(self):\n         from selenium.webdriver.common.by import By\n \n@@ -1883,20 +2230,22 @@ def test_added_stacked_inline_with_collapsed_fields(self):\n         self.selenium.get(\n             self.live_server_url + reverse(\"admin:admin_inlines_teacher_add\")\n         )\n-        self.selenium.find_element(By.LINK_TEXT, \"Add another Child\").click()\n+        add_text = gettext(\"Add another %(verbose_name)s\") % {\"verbose_name\": \"Child\"}\n+        self.selenium.find_element(By.LINK_TEXT, add_text).click()\n         test_fields = [\"#id_child_set-0-name\", \"#id_child_set-1-name\"]\n-        show_links = self.selenium.find_elements(By.LINK_TEXT, \"SHOW\")\n-        self.assertEqual(len(show_links), 2)\n+        summaries = self.selenium.find_elements(By.TAG_NAME, \"summary\")\n+        self.assertEqual(len(summaries), 3)\n+        self.take_screenshot(\"loaded\")\n         for show_index, field_name in enumerate(test_fields, 0):\n             self.wait_until_invisible(field_name)\n-            show_links[show_index].click()\n+            summaries[show_index].click()\n             self.wait_until_visible(field_name)\n-        hide_links = self.selenium.find_elements(By.LINK_TEXT, \"HIDE\")\n-        self.assertEqual(len(hide_links), 2)\n+        self.take_screenshot(\"expanded\")\n         for hide_index, field_name in enumerate(test_fields, 0):\n             self.wait_until_visible(field_name)\n-            hide_links[hide_index].click()\n+            summaries[hide_index].click()\n             self.wait_until_invisible(field_name)\n+        self.take_screenshot(\"collapsed\")\n \n     def assertBorder(self, element, border):\n         width, style, color = border.split(\" \")\n@@ -1932,9 +2281,9 @@ def test_inline_formset_error_input_border(self):\n         self.wait_until_visible(\"#id_dummy\")\n         self.selenium.find_element(By.ID, \"id_dummy\").send_keys(1)\n         fields = [\"id_inner5stacked_set-0-dummy\", \"id_inner5tabular_set-0-dummy\"]\n-        show_links = self.selenium.find_elements(By.LINK_TEXT, \"SHOW\")\n+        summaries = self.selenium.find_elements(By.TAG_NAME, \"summary\")\n         for show_index, field_name in enumerate(fields):\n-            show_links[show_index].click()\n+            summaries[show_index].click()\n             self.wait_until_visible(\"#\" + field_name)\n             self.selenium.find_element(By.ID, field_name).send_keys(1)\n \n@@ -1972,49 +2321,40 @@ def test_inline_formset_error(self):\n         self.selenium.get(\n             self.live_server_url + reverse(\"admin:admin_inlines_holder5_add\")\n         )\n-        stacked_inline_formset_selector = (\n-            \"div#inner5stacked_set-group fieldset.module.collapse\"\n+        stacked_inline_details_selector = (\n+            \"div#inner5stacked_set-group fieldset.module.collapse details\"\n         )\n-        tabular_inline_formset_selector = (\n-            \"div#inner5tabular_set-group fieldset.module.collapse\"\n+        tabular_inline_details_selector = (\n+            \"div#inner5tabular_set-group fieldset.module.collapse details\"\n         )\n         # Inlines without errors, both inlines collapsed\n         self.selenium.find_element(By.XPATH, '//input[@value=\"Save\"]').click()\n         self.assertCountSeleniumElements(\n-            stacked_inline_formset_selector + \".collapsed\", 1\n+            stacked_inline_details_selector + \":not([open])\", 1\n         )\n         self.assertCountSeleniumElements(\n-            tabular_inline_formset_selector + \".collapsed\", 1\n+            tabular_inline_details_selector + \":not([open])\", 1\n         )\n-        show_links = self.selenium.find_elements(By.LINK_TEXT, \"SHOW\")\n-        self.assertEqual(len(show_links), 2)\n+        summaries = self.selenium.find_elements(By.TAG_NAME, \"summary\")\n+        self.assertEqual(len(summaries), 2)\n \n         # Inlines with errors, both inlines expanded\n         test_fields = [\"#id_inner5stacked_set-0-dummy\", \"#id_inner5tabular_set-0-dummy\"]\n         for show_index, field_name in enumerate(test_fields):\n-            show_links[show_index].click()\n+            summaries[show_index].click()\n             self.wait_until_visible(field_name)\n             self.selenium.find_element(By.ID, field_name[1:]).send_keys(1)\n-        hide_links = self.selenium.find_elements(By.LINK_TEXT, \"HIDE\")\n-        self.assertEqual(len(hide_links), 2)\n         for hide_index, field_name in enumerate(test_fields):\n-            hide_link = hide_links[hide_index]\n+            summary = summaries[hide_index]\n             self.selenium.execute_script(\n-                \"window.scrollTo(0, %s);\" % hide_link.location[\"y\"]\n+                \"window.scrollTo(0, %s);\" % summary.location[\"y\"]\n             )\n-            hide_link.click()\n+            summary.click()\n             self.wait_until_invisible(field_name)\n         with self.wait_page_loaded():\n             self.selenium.find_element(By.XPATH, '//input[@value=\"Save\"]').click()\n-        with self.disable_implicit_wait():\n-            self.assertCountSeleniumElements(\n-                stacked_inline_formset_selector + \".collapsed\", 0\n-            )\n-            self.assertCountSeleniumElements(\n-                tabular_inline_formset_selector + \".collapsed\", 0\n-            )\n-        self.assertCountSeleniumElements(stacked_inline_formset_selector, 1)\n-        self.assertCountSeleniumElements(tabular_inline_formset_selector, 1)\n+        self.assertCountSeleniumElements(stacked_inline_details_selector, 0)\n+        self.assertCountSeleniumElements(tabular_inline_details_selector, 0)\n \n     def test_inlines_verbose_name(self):\n         \"\"\"\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 5fab253f8096..d49e7d028b7b 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -1939,7 +1939,6 @@ def test_js_minified_only_if_debug_is_false(self):\n             self.assertContains(response, \"vendor/jquery/jquery.min.js\")\n             self.assertContains(response, \"prepopulate.js\")\n             self.assertContains(response, \"actions.js\")\n-            self.assertContains(response, \"collapse.js\")\n             self.assertContains(response, \"inlines.js\")\n         with override_settings(DEBUG=True):\n             response = self.client.get(reverse(\"admin:admin_views_section_add\"))\n@@ -1947,7 +1946,6 @@ def test_js_minified_only_if_debug_is_false(self):\n             self.assertNotContains(response, \"vendor/jquery/jquery.min.js\")\n             self.assertContains(response, \"prepopulate.js\")\n             self.assertContains(response, \"actions.js\")\n-            self.assertContains(response, \"collapse.js\")\n             self.assertContains(response, \"inlines.js\")\n \n \n@@ -6086,11 +6084,8 @@ def test_collapsible_fieldset(self):\n         )\n         self.assertFalse(self.selenium.find_element(By.ID, \"id_title\").is_displayed())\n         self.take_screenshot(\"collapsed\")\n-        self.selenium.find_elements(By.LINK_TEXT, \"Show\")[0].click()\n+        self.selenium.find_elements(By.TAG_NAME, \"summary\")[0].click()\n         self.assertTrue(self.selenium.find_element(By.ID, \"id_title\").is_displayed())\n-        self.assertEqual(\n-            self.selenium.find_element(By.ID, \"fieldsetcollapser0\").text, \"Hide\"\n-        )\n         self.take_screenshot(\"expanded\")\n \n     @screenshot_cases([\"desktop_size\", \"mobile_size\", \"rtl\", \"dark\", \"high_contrast\"])\n@@ -6104,7 +6099,7 @@ def test_selectbox_height_collapsible_fieldset(self):\n         )\n         url = self.live_server_url + reverse(\"admin7:admin_views_pizza_add\")\n         self.selenium.get(url)\n-        self.selenium.find_elements(By.ID, \"fieldsetcollapser0\")[0].click()\n+        self.selenium.find_elements(By.TAG_NAME, \"summary\")[0].click()\n         from_filter_box = self.selenium.find_element(By.ID, \"id_toppings_filter\")\n         from_box = self.selenium.find_element(By.ID, \"id_toppings_from\")\n         to_filter_box = self.selenium.find_element(By.ID, \"id_toppings_filter_selected\")\n", "problem_statement": "Accessibility issues with collapsed fieldsets in admin forms\nDescription\n\t\t\n(last modified by Thibaud Colas)\t\t\nThere are a number of issues with the \"collapsible fieldset\" in admin forms. This can be most easily tested on flatpages, with the \"Advanced options\" fields. Here\u2019s a \u200bChange flat page demo page. And a screen recording of the widget:\nI think there are enough problems that it makes sense to fix it all in one go, though the issues are technically separate.\nAccessibility bugs\nThe toggle should be a <button>, not a link, so screen reader and WHCM users understand what the element is for more easily.\nThe toggle needs an aria-expanded attribute set to true or false based on its current state, so screen reader users know what the state of the element is. See the \u200bAPG disclosure pattern for further information.\nThe <fieldset> element should have a <legend>, so the fields are understood to be grouped for screen reader users.\nThe toggle must have a minimum size of 24x24, so it\u2019s easier for users with low-precision pointing devices or low mobility to hit it.\nThe toggle shouldn\u2019t change size based on the length of text within (in English show/hide is very close, in other languages not necessarily).\nThe toggle\u2019s appearance must be distinguished from other heading text via other means than color, so colorblind users can spot it.\nIn the active state, it\u2019s impossible to tell the toggle apart from the other header text.\nThe collapsible heading is a <h2>, even though the whole form itself is titled with an <h2>. It should be an <h3> instead so screen reader users have a more accurate representation of the page\u2019s hierarchy.\nIn forced colors mode, it\u2019s much harder to spot the location of the collapsible section header/heading, as background colors aren\u2019t shown.\nStyling issues\nWhile we\u2019re at it there are also styling issues which I think could be fixed at the same time:\nThe collapsible section heading\u2019s left edge isn\u2019t aligned with the left edge of other form fields\u2019 labels (8px left padding vs. 10px elsewhere)\nThe collapsible section heading should have a font size at least as large as the field labels within, so the visual hierarchy is clearer.\nIn the active state, the collapsible section header\u2019s styles change too drastically. It doesn\u2019t need to call for attention so much, when the user\u2019s focus should be on what was revealed. Ideally the toggle\u2019s styles would be different, as that\u2019s the key UI element that\u2019s in a different state.\nIt seems odd the collapsible section header looses its rounded corners when in the active state.\nIn forced colors mode, it\u2019s distracting that the position of the heading / toggle shifts due to the collapsible header area border disappearing.\nSolution\nI think this is a good candidate for a full rebuild, which could keep some of the visual cues of the existing component but there are enough accessibility issues to address that it could also be more different. The new version should:\nEither use a <details> and <summary> element for the collapsing, or implement the \u200bAPG disclosure pattern to spec.\nPreserve any bespoke logic of the current component to show/hide based on form state (don\u2019t collapse if there are form errors within?)\nUse a <h3> for the heading and <legend> for the heading (probably summary > h3 > legend or button > h3 > legend but TBC)\nUse a fixed-size toggle \u2013\u00a0possibly with a visual device such as a caret to convey the state without use of color. Ideally the whole section header area would be clickable.\nLook and work great for all of the admin\u2019s \u200bsupported assistive technologies.\nThere could be some value in using <details> so this all works without JS, though we\u2019d need to make sure to still support any JS-dependent behavior of the collapsible section.\n", "hints_text": [["Screen recording of the \"Advanced options\" collapsible fieldset in flatpages change forms", 1707796488.0], ["I want to pick this one up! Edit: Tomorrow, not today*", 1707799550.0], ["Hello Thibaud, thanks for this report and its detailed content. Accepting following the provided rationale. A few notes: Regarding the (loosing of the) rounded corners, I think we need to consider consistency with the \"regular\" fieldsets headings which are non rounded. Up to verification, I think we should remove the rounding altogether for this fieldset title. It seems the rounding comes from reusing the style of the action row, and then when active, the style comes from the usual fieldset legend. It's likely that we can get rid of the Javascript performing the toggle by using newest CSS selectors.", 1707808942.0], ["Regarding the (loosing of the) rounded corners, I think we need to consider consistency with the \"regular\" fieldsets headings which are non rounded. Up to verification, I think we should remove the rounding altogether for this fieldset title. It seems the rounding comes from reusing the style of the action row, and then when active, the style comes from the usual fieldset legend. Agreed. When toggling the fieldset, the element also seems to move a pixel, which is visually unpleasing I will switch to straight edges for these items. It's likely that we can get rid of the Javascript performing the toggle by using newest CSS selectors. My original idea for a fix does use a little JavaScript (no jQuery). I will check with the accessibility team if they know of a better method, e.g., using a checkbox in HTML and the :checked CSS pseudo-class selector.", 1707909554.0], ["I have a draft PR out (without tests and release notes): \u200bhttps://github.com/django/django/pull/17910 I'm curious what you all think of this solution. It's based on one of my proofs of concept, which is mentioned in the first message of the PR.", 1708936318.0], ["I can see the accessibility team also has this in their review queue: \u200bhttps://github.com/orgs/django/projects/7, so hopefully you will receive another review soon.", 1712916604.0], ["In 6c48eed2: Refs #35189 -- Moved CSS details' cursor declaration to base.css.", 1716204915.0], ["I'm setting this ticket as ready for checkin but I will review potential new feedback tomorrow, and after that I'll merge before the feature freeze happening in two days.", 1716212511.0], ["In 01ed59f7: Refs #35189 -- Improved admin fieldset's accessibility by setting aria-labelledby. Before this change, HTML <fieldset> elements in the admin site did not have an associated label to describe them. This commit defines a unique HTML id for the heading labeling a fieldset, and sets its aria-labelledby property to link the heading with the fieldset.", 1716329639.0], ["In e4a693f5: Fixed #35189 -- Improved admin collapsible fieldsets by using <details> elements. This work improves the accessibility of the add and change pages in the admin site by adding <details> and <summary> elements to the collapsible fieldsets. This has the nice side effect of no longer requiring custom JavaScript helpers to implement the fieldsets' show/hide capabilities. Thanks to James Scholes for the accessibility advice, and to Sarah Boyce and Tom Carrick for reviews. Co-authored-by: Natalia <124304+nessita@\u2026> Co-authored-by: Sarah Boyce <42296566+sarahboyce@\u2026>", 1716329639.0], ["In 676060d6: Refs #35189 -- Updated ModelAdmin.fieldsets screenshot in admin docs.", 1716329639.0], ["In 7857507: Refs #35189 -- Removed no longer necessary JavaScript file collapse.js.", 1716329639.0]], "created_at": "2024-02-26T14:22:05Z"}
{"repo": "django/django", "pull_number": 17908, "instance_id": "django__django-17908", "issue_numbers": ["35252"], "base_commit": "241adf678f8d6f0d6ec62d0bed5e32611a3fb75c", "patch": "diff --git a/django/urls/converters.py b/django/urls/converters.py\nindex 9b4443058047..b36cde1497b0 100644\n--- a/django/urls/converters.py\n+++ b/django/urls/converters.py\n@@ -68,11 +68,11 @@ def register_converter(converter, type_name):\n     REGISTERED_CONVERTERS[type_name] = converter()\n     get_converters.cache_clear()\n \n+    from django.urls.resolvers import _route_to_regex\n+\n+    _route_to_regex.cache_clear()\n+\n \n @functools.cache\n def get_converters():\n     return {**DEFAULT_CONVERTERS, **REGISTERED_CONVERTERS}\n-\n-\n-def get_converter(raw_converter):\n-    return get_converters()[raw_converter]\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 1b26aed8c112..c667d7f26871 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -26,7 +26,7 @@\n from django.utils.regex_helper import _lazy_re_compile, normalize\n from django.utils.translation import get_language\n \n-from .converters import get_converter\n+from .converters import get_converters\n from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n \n@@ -243,7 +243,10 @@ def __str__(self):\n     r\"<(?:(?P<converter>[^>:]+):)?(?P<parameter>[^>]+)>\"\n )\n \n+whitespace_set = frozenset(string.whitespace)\n \n+\n+@functools.lru_cache\n def _route_to_regex(route, is_endpoint):\n     \"\"\"\n     Convert a path pattern into a regular expression. Return the regular\n@@ -251,40 +254,37 @@ def _route_to_regex(route, is_endpoint):\n     For example, 'foo/<int:pk>' returns '^foo\\\\/(?P<pk>[0-9]+)'\n     and {'pk': <django.urls.converters.IntConverter>}.\n     \"\"\"\n-    original_route = route\n     parts = [\"^\"]\n+    all_converters = get_converters()\n     converters = {}\n-    while True:\n-        match = _PATH_PARAMETER_COMPONENT_RE.search(route)\n-        if not match:\n-            parts.append(re.escape(route))\n-            break\n-        elif not set(match.group()).isdisjoint(string.whitespace):\n+    previous_end = 0\n+    for match_ in _PATH_PARAMETER_COMPONENT_RE.finditer(route):\n+        if not whitespace_set.isdisjoint(match_[0]):\n             raise ImproperlyConfigured(\n-                \"URL route '%s' cannot contain whitespace in angle brackets \"\n-                \"<\u2026>.\" % original_route\n+                f\"URL route {route!r} cannot contain whitespace in angle brackets <\u2026>.\"\n             )\n-        parts.append(re.escape(route[: match.start()]))\n-        route = route[match.end() :]\n-        parameter = match[\"parameter\"]\n+        # Default to make converter \"str\" if unspecified (parameter always\n+        # matches something).\n+        raw_converter, parameter = match_.groups(default=\"str\")\n         if not parameter.isidentifier():\n             raise ImproperlyConfigured(\n-                \"URL route '%s' uses parameter name %r which isn't a valid \"\n-                \"Python identifier.\" % (original_route, parameter)\n+                f\"URL route {route!r} uses parameter name {parameter!r} which \"\n+                \"isn't a valid Python identifier.\"\n             )\n-        raw_converter = match[\"converter\"]\n-        if raw_converter is None:\n-            # If a converter isn't specified, the default is `str`.\n-            raw_converter = \"str\"\n         try:\n-            converter = get_converter(raw_converter)\n+            converter = all_converters[raw_converter]\n         except KeyError as e:\n             raise ImproperlyConfigured(\n-                \"URL route %r uses invalid converter %r.\"\n-                % (original_route, raw_converter)\n+                f\"URL route {route!r} uses invalid converter {raw_converter!r}.\"\n             ) from e\n         converters[parameter] = converter\n-        parts.append(\"(?P<\" + parameter + \">\" + converter.regex + \")\")\n+\n+        start, end = match_.span()\n+        parts.append(re.escape(route[previous_end:start]))\n+        previous_end = end\n+        parts.append(f\"(?P<{parameter}>{converter.regex})\")\n+\n+    parts.append(re.escape(route[previous_end:]))\n     if is_endpoint:\n         parts.append(r\"\\Z\")\n     return \"\".join(parts), converters\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 7fc794cd1d5b..4eab41394605 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -393,6 +393,9 @@ Miscellaneous\n   :py:class:`html.parser.HTMLParser` subclasses. This results in a more robust\n   and faster operation, but there may be small differences in the output.\n \n+* The undocumented ``django.urls.converters.get_converter()`` function is\n+  removed.\n+\n .. _deprecated-features-5.1:\n \n Features deprecated in 5.1\n", "test_patch": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 370e8695606c..78b71fe32577 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -246,14 +246,12 @@ class EmptyCBV(View):\n             path(\"foo\", EmptyCBV())\n \n     def test_whitespace_in_route(self):\n-        msg = (\n-            \"URL route 'space/<int:num>/extra/<str:%stest>' cannot contain \"\n-            \"whitespace in angle brackets <\u2026>\"\n-        )\n+        msg = \"URL route %r cannot contain whitespace in angle brackets <\u2026>\"\n         for whitespace in string.whitespace:\n             with self.subTest(repr(whitespace)):\n-                with self.assertRaisesMessage(ImproperlyConfigured, msg % whitespace):\n-                    path(\"space/<int:num>/extra/<str:%stest>\" % whitespace, empty_view)\n+                route = \"space/<int:num>/extra/<str:%stest>\" % whitespace\n+                with self.assertRaisesMessage(ImproperlyConfigured, msg % route):\n+                    path(route, empty_view)\n         # Whitespaces are valid in paths.\n         p = path(\"space%s/<int:num>/\" % string.whitespace, empty_view)\n         match = p.resolve(\"space%s/1/\" % string.whitespace)\n", "problem_statement": "Optimize django.urls.resolvers._route_to_regex()\nDescription\n\t \n_route_to_regex() converts Django\u2019s parameterized route syntax into a regular expression. Whilst working on #35250, I noticed several opportunities for optimizing this function:\nIt has O(n2) runtime from slicing the route string per parameter, repeatedly copying the remainder. A single search for all parameters would have O(n) runtime instead.\nWithin my 950 URL project, there are many repeat calls with the same route, such as the empty string or ModelAdmin URL suffixes like '<path:object_id>/history/'. I think this would be typical of many projects, so it makes sense to add caching.\nmatch.start() and match.end() are called separately, when match.span() gives both values in one function call.\nget_converter() is unnecessary, the function can fetch all converters once with get_converters() and use the dictionary directly.\nCasting each parameter string to a set for the whitespace check is a bit costly, it\u2019s faster to use a whitespace set scanning the string.\nAn f-string can be used for concatenation, which is a little bit faster.\nApplying these optimizations makes the function significantly faster, especially for more parameters. Below are some benchmarks.\nBefore optimization stats (Python 3.12, macOS, M1 mac, Django main branch):\nConverting a seven parameter route:\nIn [2]: %timeit _route_to_regex(\"<a>/<b>/<c>/<d>/<e>/<f>/<g>\", True)\n12.3 \u00b5s \u00b1 68 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\nProfiling a project\u2019s system checks: 950 calls take 9ms, ~1.5% of the total runtime.\nAfter optimization:\nConverting that seven parameter route is ~2x faster (with caching removed):\nIn [2]: %timeit _route_to_regex(\"<a>/<b>/<c>/<d>/<e>/<f>/<g>\", True)\n5.49 \u00b5s \u00b1 18.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\nAdding caching makes repeat calls ~100x faster, from 5\u00b5s to 50ns.\nThe profile shows those 950 calls now take 5ms, ~50% faster, ~0.8% of total runtime.\n", "hints_text": [], "created_at": "2024-02-26T10:41:42Z"}
{"repo": "django/django", "pull_number": 17904, "instance_id": "django__django-17904", "issue_numbers": ["35250"], "base_commit": "fad334e1a9b54ea1acb8cce02a25934c5acfe99f", "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 5f9941dd65e8..1b26aed8c112 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -128,9 +128,6 @@ def get_ns_resolver(ns_pattern, resolver, converters):\n \n \n class LocaleRegexDescriptor:\n-    def __init__(self, attr):\n-        self.attr = attr\n-\n     def __get__(self, instance, cls=None):\n         \"\"\"\n         Return a compiled regular expression based on the active language.\n@@ -140,15 +137,23 @@ def __get__(self, instance, cls=None):\n         # As a performance optimization, if the given regex string is a regular\n         # string (not a lazily-translated string proxy), compile it once and\n         # avoid per-language compilation.\n-        pattern = getattr(instance, self.attr)\n+        pattern = instance._regex\n         if isinstance(pattern, str):\n-            instance.__dict__[\"regex\"] = instance._compile(pattern)\n+            instance.__dict__[\"regex\"] = self._compile(pattern)\n             return instance.__dict__[\"regex\"]\n         language_code = get_language()\n         if language_code not in instance._regex_dict:\n-            instance._regex_dict[language_code] = instance._compile(str(pattern))\n+            instance._regex_dict[language_code] = self._compile(str(pattern))\n         return instance._regex_dict[language_code]\n \n+    def _compile(self, regex):\n+        try:\n+            return re.compile(regex)\n+        except re.error as e:\n+            raise ImproperlyConfigured(\n+                f'\"{regex}\" is not a valid regular expression: {e}'\n+            ) from e\n+\n \n class CheckURLMixin:\n     def describe(self):\n@@ -164,12 +169,11 @@ def _check_pattern_startswith_slash(self):\n         \"\"\"\n         Check that the pattern does not begin with a forward slash.\n         \"\"\"\n-        regex_pattern = self.regex.pattern\n         if not settings.APPEND_SLASH:\n             # Skip check as it can be useful to start a URL pattern with a slash\n             # when APPEND_SLASH=False.\n             return []\n-        if regex_pattern.startswith((\"/\", \"^/\", \"^\\\\/\")) and not regex_pattern.endswith(\n+        if self._regex.startswith((\"/\", \"^/\", \"^\\\\/\")) and not self._regex.endswith(\n             \"/\"\n         ):\n             warning = Warning(\n@@ -186,7 +190,7 @@ def _check_pattern_startswith_slash(self):\n \n \n class RegexPattern(CheckURLMixin):\n-    regex = LocaleRegexDescriptor(\"_regex\")\n+    regex = LocaleRegexDescriptor()\n \n     def __init__(self, regex, name=None, is_endpoint=False):\n         self._regex = regex\n@@ -219,8 +223,7 @@ def check(self):\n         return warnings\n \n     def _check_include_trailing_dollar(self):\n-        regex_pattern = self.regex.pattern\n-        if regex_pattern.endswith(\"$\") and not regex_pattern.endswith(r\"\\$\"):\n+        if self._regex.endswith(\"$\") and not self._regex.endswith(r\"\\$\"):\n             return [\n                 Warning(\n                     \"Your URL pattern {} uses include with a route ending with a '$'. \"\n@@ -232,15 +235,6 @@ def _check_include_trailing_dollar(self):\n         else:\n             return []\n \n-    def _compile(self, regex):\n-        \"\"\"Compile and return the given regular expression.\"\"\"\n-        try:\n-            return re.compile(regex)\n-        except re.error as e:\n-            raise ImproperlyConfigured(\n-                '\"%s\" is not a valid regular expression: %s' % (regex, e)\n-            ) from e\n-\n     def __str__(self):\n         return str(self._regex)\n \n@@ -250,7 +244,7 @@ def __str__(self):\n )\n \n \n-def _route_to_regex(route, is_endpoint=False):\n+def _route_to_regex(route, is_endpoint):\n     \"\"\"\n     Convert a path pattern into a regular expression. Return the regular\n     expression and a dictionary mapping the capture names to the converters.\n@@ -296,15 +290,36 @@ def _route_to_regex(route, is_endpoint=False):\n     return \"\".join(parts), converters\n \n \n+class LocaleRegexRouteDescriptor:\n+    def __get__(self, instance, cls=None):\n+        \"\"\"\n+        Return a compiled regular expression based on the active language.\n+        \"\"\"\n+        if instance is None:\n+            return self\n+        # As a performance optimization, if the given route is a regular string\n+        # (not a lazily-translated string proxy), compile it once and avoid\n+        # per-language compilation.\n+        if isinstance(instance._route, str):\n+            instance.__dict__[\"regex\"] = re.compile(instance._regex)\n+            return instance.__dict__[\"regex\"]\n+        language_code = get_language()\n+        if language_code not in instance._regex_dict:\n+            instance._regex_dict[language_code] = re.compile(\n+                _route_to_regex(str(instance._route), instance._is_endpoint)[0]\n+            )\n+        return instance._regex_dict[language_code]\n+\n+\n class RoutePattern(CheckURLMixin):\n-    regex = LocaleRegexDescriptor(\"_route\")\n+    regex = LocaleRegexRouteDescriptor()\n \n     def __init__(self, route, name=None, is_endpoint=False):\n         self._route = route\n+        self._regex, self.converters = _route_to_regex(str(route), is_endpoint)\n         self._regex_dict = {}\n         self._is_endpoint = is_endpoint\n         self.name = name\n-        self.converters = _route_to_regex(str(route), is_endpoint)[1]\n \n     def match(self, path):\n         match = self.regex.search(path)\n@@ -356,9 +371,6 @@ def _check_pattern_unmatched_angle_brackets(self):\n             warnings.append(Warning(msg % (self.describe(), \"<\"), id=\"urls.W010\"))\n         return warnings\n \n-    def _compile(self, route):\n-        return re.compile(_route_to_regex(route, self._is_endpoint)[0])\n-\n     def __str__(self):\n         return str(self._route)\n \n", "test_patch": "diff --git a/tests/i18n/patterns/locale/en/LC_MESSAGES/django.mo b/tests/i18n/patterns/locale/en/LC_MESSAGES/django.mo\nindex ec7644b504c3..b1f63b103106 100644\nBinary files a/tests/i18n/patterns/locale/en/LC_MESSAGES/django.mo and b/tests/i18n/patterns/locale/en/LC_MESSAGES/django.mo differ\ndiff --git a/tests/i18n/patterns/locale/en/LC_MESSAGES/django.po b/tests/i18n/patterns/locale/en/LC_MESSAGES/django.po\nindex 9a14a80ceb8f..ac98eb5f08aa 100644\n--- a/tests/i18n/patterns/locale/en/LC_MESSAGES/django.po\n+++ b/tests/i18n/patterns/locale/en/LC_MESSAGES/django.po\n@@ -7,31 +7,53 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2011-06-15 11:33+0200\\n\"\n+\"POT-Creation-Date: 2024-03-01 21:18+0000\\n\"\n \"PO-Revision-Date: 2011-06-14 16:16+0100\\n\"\n \"Last-Translator: Jannis Leidel <jannis@leidel.info>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"Language: \\n\"\n \"MIME-Version: 1.0\\n\"\n \"Content-Type: text/plain; charset=UTF-8\\n\"\n \"Content-Transfer-Encoding: 8bit\\n\"\n-\"Language: \\n\"\n \n #: urls/default.py:11\n-msgid \"^translated/$\"\n+#, fuzzy\n+#| msgid \"^translated/$\"\n+msgid \"translated/\"\n msgstr \"^translated/$\"\n \n #: urls/default.py:12\n+#, fuzzy\n+#| msgid \"^translated/$\"\n+msgid \"^translated-regex/$\"\n+msgstr \"^translated/$\"\n+\n+#: urls/default.py:14\n msgid \"^translated/(?P<slug>[\\\\w-]+)/$\"\n msgstr \"^translated/(?P<slug>[\\\\w-]+)/$\"\n \n-#: urls/default.py:17\n+#: urls/default.py:25\n+msgid \"^with-arguments/(?P<argument>[\\\\w-]+)/(?:(?P<optional>[\\\\w-]+).html)?$\"\n+msgstr \"\"\n+\n+#: urls/default.py:29\n msgid \"^users/$\"\n msgstr \"^users/$\"\n \n-#: urls/default.py:18 urls/wrong.py:7\n+#: urls/default.py:31 urls/wrong.py:7\n msgid \"^account/\"\n msgstr \"^account/\"\n \n #: urls/namespace.py:9 urls/wrong_namespace.py:10\n msgid \"^register/$\"\n msgstr \"^register/$\"\n+\n+#: urls/namespace.py:10\n+msgid \"^register-without-slash$\"\n+msgstr \"\"\n+\n+#: urls/namespace.py:11\n+#, fuzzy\n+#| msgid \"^register/$\"\n+msgid \"register-as-path/\"\n+msgstr \"^register/$\"\ndiff --git a/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.mo b/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.mo\nindex 5eac50466cb7..544bfdbfc664 100644\nBinary files a/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.mo and b/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.mo differ\ndiff --git a/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.po b/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.po\nindex a938e3371dea..aa58c506d562 100644\n--- a/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.po\n+++ b/tests/i18n/patterns/locale/nl/LC_MESSAGES/django.po\n@@ -7,29 +7,37 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2011-06-15 11:33+0200\\n\"\n+\"POT-Creation-Date: 2024-03-01 21:18+0000\\n\"\n \"PO-Revision-Date: 2011-06-14 16:16+0100\\n\"\n \"Last-Translator: Jannis Leidel <jannis@leidel.info>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"Language: \\n\"\n \"MIME-Version: 1.0\\n\"\n \"Content-Type: text/plain; charset=UTF-8\\n\"\n \"Content-Transfer-Encoding: 8bit\\n\"\n-\"Language: \\n\"\n \"Plural-Forms: nplurals=2; plural=(n != 1)\\n\"\n \n #: urls/default.py:11\n-msgid \"^translated/$\"\n-msgstr \"^vertaald/$\"\n+msgid \"translated/\"\n+msgstr \"vertaald/\"\n \n #: urls/default.py:12\n+msgid \"^translated-regex/$\"\n+msgstr \"^vertaald-regex/$\"\n+\n+#: urls/default.py:14\n msgid \"^translated/(?P<slug>[\\\\w-]+)/$\"\n msgstr \"^vertaald/(?P<slug>[\\\\w-]+)/$\"\n \n-#: urls/default.py:17\n+#: urls/default.py:25\n+msgid \"^with-arguments/(?P<argument>[\\\\w-]+)/(?:(?P<optional>[\\\\w-]+).html)?$\"\n+msgstr \"\"\n+\n+#: urls/default.py:29\n msgid \"^users/$\"\n msgstr \"^gebruikers/$\"\n \n-#: urls/default.py:18 urls/wrong.py:7\n+#: urls/default.py:31 urls/wrong.py:7\n msgid \"^account/\"\n msgstr \"^profiel/\"\n \n@@ -37,6 +45,10 @@ msgstr \"^profiel/\"\n msgid \"^register/$\"\n msgstr \"^registreren/$\"\n \n-#: urls/namespace.py:12\n+#: urls/namespace.py:10\n+msgid \"^register-without-slash$\"\n+msgstr \"\"\n+\n+#: urls/namespace.py:11\n msgid \"register-as-path/\"\n msgstr \"registreren-als-pad/\"\ndiff --git a/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.mo b/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.mo\nindex 1d7b346c278c..8e36cb206409 100644\nBinary files a/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.mo and b/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.mo differ\ndiff --git a/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.po b/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.po\nindex fd3388e4b013..464d14bc1f75 100644\n--- a/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.po\n+++ b/tests/i18n/patterns/locale/pt_BR/LC_MESSAGES/django.po\n@@ -7,32 +7,50 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2011-06-15 11:34+0200\\n\"\n+\"POT-Creation-Date: 2024-03-01 21:18+0000\\n\"\n \"PO-Revision-Date: 2011-06-14 16:17+0100\\n\"\n \"Last-Translator: Jannis Leidel <jannis@leidel.info>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n+\"Language: \\n\"\n \"MIME-Version: 1.0\\n\"\n \"Content-Type: text/plain; charset=UTF-8\\n\"\n \"Content-Transfer-Encoding: 8bit\\n\"\n-\"Language: \\n\"\n \"Plural-Forms: nplurals=2; plural=(n > 1)\\n\"\n \n #: urls/default.py:11\n-msgid \"^translated/$\"\n-msgstr \"^traduzidos/$\"\n+msgid \"translated/\"\n+msgstr \"traduzidos/\"\n \n #: urls/default.py:12\n+msgid \"^translated-regex/$\"\n+msgstr \"^traduzidos-regex/$\"\n+\n+#: urls/default.py:14\n msgid \"^translated/(?P<slug>[\\\\w-]+)/$\"\n msgstr \"^traduzidos/(?P<slug>[\\\\w-]+)/$\"\n \n-#: urls/default.py:17\n+#: urls/default.py:25\n+msgid \"^with-arguments/(?P<argument>[\\\\w-]+)/(?:(?P<optional>[\\\\w-]+).html)?$\"\n+msgstr \"\"\n+\n+#: urls/default.py:29\n msgid \"^users/$\"\n msgstr \"^usuarios/$\"\n \n-#: urls/default.py:18 urls/wrong.py:7\n+#: urls/default.py:31 urls/wrong.py:7\n msgid \"^account/\"\n msgstr \"^conta/\"\n \n #: urls/namespace.py:9 urls/wrong_namespace.py:10\n msgid \"^register/$\"\n msgstr \"^registre-se/$\"\n+\n+#: urls/namespace.py:10\n+msgid \"^register-without-slash$\"\n+msgstr \"\"\n+\n+#: urls/namespace.py:11\n+#, fuzzy\n+#| msgid \"^register/$\"\n+msgid \"register-as-path/\"\n+msgstr \"^registre-se/$\"\ndiff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e2fee904b149..bd329e69f8e7 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -134,6 +134,9 @@ class URLTranslationTests(URLTestCaseBase):\n     def test_no_prefix_translated(self):\n         with translation.override(\"en\"):\n             self.assertEqual(reverse(\"no-prefix-translated\"), \"/translated/\")\n+            self.assertEqual(\n+                reverse(\"no-prefix-translated-regex\"), \"/translated-regex/\"\n+            )\n             self.assertEqual(\n                 reverse(\"no-prefix-translated-slug\", kwargs={\"slug\": \"yeah\"}),\n                 \"/translated/yeah/\",\n@@ -141,6 +144,7 @@ def test_no_prefix_translated(self):\n \n         with translation.override(\"nl\"):\n             self.assertEqual(reverse(\"no-prefix-translated\"), \"/vertaald/\")\n+            self.assertEqual(reverse(\"no-prefix-translated-regex\"), \"/vertaald-regex/\")\n             self.assertEqual(\n                 reverse(\"no-prefix-translated-slug\", kwargs={\"slug\": \"yeah\"}),\n                 \"/vertaald/yeah/\",\n@@ -148,6 +152,9 @@ def test_no_prefix_translated(self):\n \n         with translation.override(\"pt-br\"):\n             self.assertEqual(reverse(\"no-prefix-translated\"), \"/traduzidos/\")\n+            self.assertEqual(\n+                reverse(\"no-prefix-translated-regex\"), \"/traduzidos-regex/\"\n+            )\n             self.assertEqual(\n                 reverse(\"no-prefix-translated-slug\", kwargs={\"slug\": \"yeah\"}),\n                 \"/traduzidos/yeah/\",\n@@ -180,7 +187,7 @@ def test_translate_url_utility(self):\n                 \"/nl/profiel/registreren-als-pad/\",\n             )\n             self.assertEqual(translation.get_language(), \"en\")\n-            # URL with parameters.\n+            # re_path() URL with parameters.\n             self.assertEqual(\n                 translate_url(\"/en/with-arguments/regular-argument/\", \"nl\"),\n                 \"/nl/with-arguments/regular-argument/\",\n@@ -191,6 +198,11 @@ def test_translate_url_utility(self):\n                 ),\n                 \"/nl/with-arguments/regular-argument/optional.html\",\n             )\n+            # path() URL with parameter.\n+            self.assertEqual(\n+                translate_url(\"/en/path-with-arguments/regular-argument/\", \"nl\"),\n+                \"/nl/path-with-arguments/regular-argument/\",\n+            )\n \n         with translation.override(\"nl\"):\n             self.assertEqual(translate_url(\"/nl/gebruikers/\", \"en\"), \"/en/users/\")\ndiff --git a/tests/i18n/patterns/urls/default.py b/tests/i18n/patterns/urls/default.py\nindex 418e9f568568..090b92eeca66 100644\n--- a/tests/i18n/patterns/urls/default.py\n+++ b/tests/i18n/patterns/urls/default.py\n@@ -8,7 +8,8 @@\n urlpatterns = [\n     path(\"not-prefixed/\", view, name=\"not-prefixed\"),\n     path(\"not-prefixed-include/\", include(\"i18n.patterns.urls.included\")),\n-    re_path(_(r\"^translated/$\"), view, name=\"no-prefix-translated\"),\n+    path(_(\"translated/\"), view, name=\"no-prefix-translated\"),\n+    re_path(_(r\"^translated-regex/$\"), view, name=\"no-prefix-translated-regex\"),\n     re_path(\n         _(r\"^translated/(?P<slug>[\\w-]+)/$\"),\n         view,\n@@ -25,6 +26,11 @@\n         view,\n         name=\"with-arguments\",\n     ),\n+    path(\n+        _(\"path-with-arguments/<str:argument>/\"),\n+        view,\n+        name=\"path-with-arguments\",\n+    ),\n     re_path(_(r\"^users/$\"), view, name=\"users\"),\n     re_path(\n         _(r\"^account/\"), include(\"i18n.patterns.urls.namespace\", namespace=\"account\")\n", "problem_statement": "Stop URL system checks from compiling regular expressions\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nContinuing my project to optimize the system checks, I found some good optimizations under django.core.checks.urls.check_url_config(), which showed up as quite expensive in profiling.\nLooking down the call tree, it seems the most expensive part of this process is compiling the each URL pattern\u2019s regular expression. This is unnecessary work though, as the checks only need *uncompiled* regular expression patterns. Using the compiled versions \u201cundoes\u201d the lazy-compile optimization that LocaleRegexDescriptor was created for in #27453 / 6e222dae5636f875c19ec66f730a4241abe33faa, at least for any process that runs checks.\nThe checks were fetching the uncompiled pattern with self.regex.pattern, which makse LocaleRegexDescriptor compile the pattern only to then read the uncompiled pattern from \u200bits pattern attribute.\nAdditionally, RoutePattern was calling _route_to_regex() twice to fetch its two result variables in different places: once in __init__() and again in _compile() (in the non-translated case). This function has non-trivial cost so avoiding double execution is worth it.\nBefore optimization stats:\ncheck_url_config took 67ms, or ~10% of the time for checks.\nLocaleRegexDescriptor.__get__() showed 965 calls taking ~60ms, ~9% of the total runtime of checks.\nre.compile() showed 741 calls for 94ms.\n_route_to_regex() had 1900 calls taking 18ms (~2.6% of the total runtime).\nAfter optimization:\ncheck_url_config() took 5ms, ~0.9% of the new total runtime.\nThe calls to LocaleRegexDescriptor.__get__ are gone.\nre.compile() drops to 212 calls from other sites, for a total of 51ms.\n_route_to_regex() drops to the expected 950 calls, taking half the time at 9ms.\n(I also tried benchmarking with django-asv but got inconclusive results where change was within the error margins.)\n", "hints_text": [["Tentatively accepted.", 1709000987.0]], "created_at": "2024-02-24T19:17:42Z"}
{"repo": "django/django", "pull_number": 17903, "instance_id": "django__django-17903", "issue_numbers": ["29022"], "base_commit": "ef2434f8508551fee183079ab471b1dc325c7acb", "patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 85172ea42d1e..191fe3cbb513 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -221,7 +221,7 @@ def converter(matchobj):\n             url = matches[\"url\"]\n \n             # Ignore absolute/protocol-relative and data-uri URLs.\n-            if re.match(r\"^[a-z]+:\", url):\n+            if re.match(r\"^[a-z]+:\", url) or url.startswith(\"//\"):\n                 return matched\n \n             # Ignore absolute URLs that don't point to a static file (dynamic\n", "test_patch": "diff --git a/tests/staticfiles_tests/project/static_url_slash/ignored.css b/tests/staticfiles_tests/project/static_url_slash/ignored.css\nnew file mode 100644\nindex 000000000000..369ff046327f\n--- /dev/null\n+++ b/tests/staticfiles_tests/project/static_url_slash/ignored.css\n@@ -0,0 +1,3 @@\n+body {\n+    background: url(\"//foobar\");\n+}\ndiff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 1e537dfe549a..469d5ec690e2 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -22,7 +22,7 @@\n \n def hashed_file_path(test, path):\n     fullpath = test.render_template(test.static_template_snippet(path))\n-    return fullpath.replace(settings.STATIC_URL, \"\")\n+    return fullpath.removeprefix(settings.STATIC_URL)\n \n \n class TestHashedFiles:\n@@ -560,6 +560,32 @@ def test_manifest_hash_v1(self):\n         self.assertEqual(manifest_content, {\"dummy.txt\": \"dummy.txt\"})\n \n \n+@override_settings(\n+    STATIC_URL=\"/\",\n+    STORAGES={\n+        **settings.STORAGES,\n+        STATICFILES_STORAGE_ALIAS: {\n+            \"BACKEND\": \"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\",\n+        },\n+    },\n+)\n+class TestCollectionManifestStorageStaticUrlSlash(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+    hashed_file_path = hashed_file_path\n+\n+    def test_protocol_relative_url_ignored(self):\n+        with override_settings(\n+            STATICFILES_DIRS=[os.path.join(TEST_ROOT, \"project\", \"static_url_slash\")],\n+            STATICFILES_FINDERS=[\"django.contrib.staticfiles.finders.FileSystemFinder\"],\n+        ):\n+            self.run_collectstatic()\n+        relpath = self.hashed_file_path(\"ignored.css\")\n+        self.assertEqual(relpath, \"ignored.61707f5f4942.css\")\n+        with storage.staticfiles_storage.open(relpath) as relfile:\n+            content = relfile.read()\n+            self.assertIn(b\"//foobar\", content)\n+\n+\n @override_settings(\n     STORAGES={\n         **settings.STORAGES,\n", "problem_statement": "HashedFilesMixin does not properly skip protocol-relative urls when STATIC_URL='/'\nDescription\n\t \nWhile protocol-relative urls have been deprecated it would be nice for Django staticfiles to support it since a lot of code still uses it or explicitly not support it. Right now the relevant snippet implies that the code does filter out protocol-relative urls but it currently does not:\n# django/contrib/staticfiles/storage.py\n# Ignore absolute/protocol-relative and data-uri URLs.\nif re.match(r'^[a-z]+:', url):\n\treturn matched\nI've included an example snippet that uses a protocol-relative url but is not filtered:\n @import url(\"//fonts.googleapis.com/css?family=Source+Sans+Pro:400,700|Raleway:400,800,900\");\n", "hints_text": [["The code changed in 08ed3cc6d160d0d864ff687db9a62959a86e7372 so the comment is outdated but as far as I see, a URL starting with // would likely be filtered out in the next block: if url.startswith('/') and not url.startswith(settings.STATIC_URL):. Anyway, there's still a test assertion for //foobar remaining unchanged and I don't see a change to the URL you provided if I add that to the test. Can you find the difference between that test and your situation that reproduces the problem?", 1516012724.0], ["Replying to Tim Graham: The code changed in 08ed3cc6d160d0d864ff687db9a62959a86e7372 so the comment is outdated but as far as I see, a URL starting with // would likely be filtered out in the next block: if url.startswith('/') and not url.startswith(settings.STATIC_URL):. Anyway, there's still a test assertion for //foobar remaining unchanged and I don't see a change to the URL you provided if I add that to the test. Can you find the difference between that test and your situation that reproduces the problem? Sorry I should have looked at that function more closely. It's not being caught in my case because my STATIC_URL is / so the line that should exit doesn't because the protocol-relative url actually starts with my STATIC_URL.", 1516100107.0], ["It looks like adding back a simple check for protocol-relative URLs before the STATIC_URL check will fix this. That seems reasonable to me if Django is going to support setting STATIC_URL to /. I opened a PR with this change and a regression test for discussion.", 1708728312.0]], "created_at": "2024-02-24T04:44:48Z"}
{"repo": "django/django", "pull_number": 17901, "instance_id": "django__django-17901", "issue_numbers": ["35246"], "base_commit": "6e1ece7ed522c904a674966fa985159b7bbf1545", "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex cc5025af84bc..796c4d23c458 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -916,7 +916,7 @@ def get_db_converters(self, connection):\n             return [self.from_db_value]\n         return []\n \n-    @property\n+    @cached_property\n     def unique(self):\n         return self._unique or self.primary_key\n \n", "test_patch": "", "problem_statement": "Make Field.unique a plain attribute\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nAnother candidate for caching, like #35230, #35232 and #35241, following the same system check profiling.\nField.unique is a simple property that computes whether a field is unique from two inputs:\n@property\ndef unique(self):\n\treturn self._unique or self.primary_key\nThe result is immutable because the two input attributes shouldn\u2019t change.\nI found this method was called 3543 times during system checks, taking ~0.7% (~0.3ms) of the total runtime on a Python 3.12 project with 118 models. After moving it to a plain attribute, this cost is eliminated. (cProfile\u2019s overhead biases the cost of function calls upwards, so the actual saving may be smaller, but it still seems worth the minimal change.)\nunique is accessed in many other code paths so this change will help those paths too.\n", "hints_text": [["Adam, I greatly appreciate the time you are spending investigating these but could we please \u200bcreate a benchmark so we can measure the impact of them sooner than later. I understand that we can't create a benchmark for every performance improvement we make like we do when fixing bug with regression tests but I think the volume of these warrant creating a prior baseline so we can make sure all the work you are investing today doesn't disappear over time as we add more checks and features to Django.", 1708685372.0], ["I agree with Simon on both items, that this optimization can be helpful and that we could use some metrics to do some follow up in the medium/long term. I just checked the branch and wonder if converting the property into a cached one, instead of deleting it in favor of an attribute, might be a better idea. I'm thinking of potential usages out there in the wild overriding the property for <reasons> and the proposed change would break those scenarios.", 1708692360.0], ["See \u200bhttps://github.com/django/django-asv/pull/80 for a benchmark, plus the other general maintenance PRs I opened on django-asv :)", 1708706680.0], ["Sure, we can use cached_property; it has the same performance after the first call. Edit: tried it, re-profiled and saw it had 570 calls (one for each field) running in neglible time, and have updated the PR.", 1708707537.0]], "created_at": "2024-02-23T12:05:42Z"}
{"repo": "django/django", "pull_number": 17897, "instance_id": "django__django-17897", "issue_numbers": ["34789"], "base_commit": "f812b927a541fecc8ee445e1fd4dbe9d0540d523", "patch": "diff --git a/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js b/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\nindex 32e3f5b84094..bc3accea371c 100644\n--- a/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\n+++ b/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js\n@@ -96,8 +96,8 @@\n         // Extract the model from the popup url '.../<model>/add/' or\n         // '.../<model>/<id>/change/' depending the action (add or change).\n         const modelName = path.split('/')[path.split('/').length - (objId ? 4 : 3)];\n-        // Exclude autocomplete selects.\n-        const selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] select:not(.admin-autocomplete)`);\n+        // Select elements with a specific model reference and context of \"available-source\".\n+        const selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] [data-context=\"available-source\"]`);\n \n         selectsRelated.forEach(function(select) {\n             if (currentSelect === select) {\ndiff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py\nindex 260ff33ca57a..00e92bf42dd6 100644\n--- a/django/contrib/admin/widgets.py\n+++ b/django/contrib/admin/widgets.py\n@@ -272,6 +272,8 @@ def __init__(\n         self.can_add_related = can_add_related\n         # XXX: The UX does not support multiple selected values.\n         multiple = getattr(widget, \"allow_multiple_selected\", False)\n+        if not isinstance(widget, AutocompleteMixin):\n+            self.attrs[\"data-context\"] = \"available-source\"\n         self.can_change_related = not multiple and can_change_related\n         # XXX: The deletion UX can be confusing when dealing with cascading deletion.\n         cascade = getattr(rel, \"on_delete\", None) is CASCADE\n", "test_patch": "diff --git a/tests/admin_views/test_related_object_lookups.py b/tests/admin_views/test_related_object_lookups.py\nindex c10a5568d52f..761819a50fe7 100644\n--- a/tests/admin_views/test_related_object_lookups.py\n+++ b/tests/admin_views/test_related_object_lookups.py\n@@ -110,6 +110,9 @@ def test_related_object_update_with_camel_casing(self):\n             <option value=\"1\" selected>{interesting_name}</option>\n             \"\"\",\n         )\n+        # Check the newly added instance is not also added in the \"to\" box.\n+        m2m_to = self.selenium.find_element(By.ID, \"id_m2m_to\")\n+        self.assertHTMLEqual(m2m_to.get_attribute(\"innerHTML\"), \"\")\n         m2m_box = self.selenium.find_element(By.ID, \"id_m2m_from\")\n         self.assertHTMLEqual(\n             m2m_box.get_attribute(\"innerHTML\"),\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex 4d188496926d..6f009a6f3faf 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -948,7 +948,7 @@ def test_data_model_ref_when_model_name_is_camel_case(self):\n         output = wrapper.render(\"stream\", \"value\")\n         expected = \"\"\"\n         <div class=\"related-widget-wrapper\" data-model-ref=\"releaseevent\">\n-          <select name=\"stream\">\n+          <select name=\"stream\" data-context=\"available-source\">\n           </select>\n           <a class=\"related-widget-wrapper-link add-related\" id=\"add_id_stream\"\n              data-popup=\"yes\" title=\"Add another release event\"\ndiff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex de8d26ae4657..e8b59ed0bf1e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -662,7 +662,8 @@ def test_queryset_override(self):\n         self.assertHTMLEqual(\n             str(form[\"main_band\"]),\n             '<div class=\"related-widget-wrapper\" data-model-ref=\"band\">'\n-            '<select name=\"main_band\" id=\"id_main_band\" required>'\n+            '<select data-context=\"available-source\" '\n+            'name=\"main_band\" id=\"id_main_band\" required>'\n             '<option value=\"\" selected>---------</option>'\n             '<option value=\"%d\">The Beatles</option>'\n             '<option value=\"%d\">The Doors</option>'\n@@ -685,7 +686,8 @@ class ConcertAdminWithForm(ModelAdmin):\n         self.assertHTMLEqual(\n             str(form[\"main_band\"]),\n             '<div class=\"related-widget-wrapper\" data-model-ref=\"band\">'\n-            '<select name=\"main_band\" id=\"id_main_band\" required>'\n+            '<select data-context=\"available-source\" '\n+            'name=\"main_band\" id=\"id_main_band\" required>'\n             '<option value=\"\" selected>---------</option>'\n             '<option value=\"%d\">The Doors</option>'\n             \"</select></div>\" % self.band.id,\n@@ -779,7 +781,8 @@ class ConcertAdmin(ModelAdmin):\n             type(cmafa.base_fields[\"main_band\"].widget.widget), AdminRadioSelect\n         )\n         self.assertEqual(\n-            cmafa.base_fields[\"main_band\"].widget.attrs, {\"class\": \"radiolist inline\"}\n+            cmafa.base_fields[\"main_band\"].widget.attrs,\n+            {\"class\": \"radiolist inline\", \"data-context\": \"available-source\"},\n         )\n         self.assertEqual(\n             list(cmafa.base_fields[\"main_band\"].widget.choices),\n@@ -790,7 +793,8 @@ class ConcertAdmin(ModelAdmin):\n             type(cmafa.base_fields[\"opening_band\"].widget.widget), AdminRadioSelect\n         )\n         self.assertEqual(\n-            cmafa.base_fields[\"opening_band\"].widget.attrs, {\"class\": \"radiolist\"}\n+            cmafa.base_fields[\"opening_band\"].widget.attrs,\n+            {\"class\": \"radiolist\", \"data-context\": \"available-source\"},\n         )\n         self.assertEqual(\n             list(cmafa.base_fields[\"opening_band\"].widget.choices),\n", "problem_statement": "`filter_horizontal` duplicates entries in \"Chosen\" column after instance is added via in another field using the \"plus\" JS action\nDescription\n\t\t\n(last modified by Devin Cox)\t\t\nHi there, I noticed a minor frontend bug related to the filter_horizontal tables in the admin console. Here is what I have:\nThere is a model called Transition with two fields, source and target:\nsource = models.ManyToManyField(State, related_name=\"transition_source\")\ntarget = models.ForeignKey(State, related_name=\"transition_target\", on_delete=models.CASCADE)\nFor the admin console, we set filter_horizontal to include 'source'. See \"First Screenshot\" for an example of a given state of a Transition, with \"test\" selected as Source and \"test2\" selected as Target. \nNow, if I add a new State by clicking the \"+\" Icon next to the Target field (let's call it test3), it will add it to both the Target AND the \"Chosen Source\" (see \"Second Screenshot\" for an example).\nI will note that upon saving the Transition, it will not actually save \"test3\" to the Chosen Source, meaning that this is an issue only from a UI perspective. After any refresh or save, it will also no longer show in the Chosen Source column. Additionally, there is no issue going the other direction (if I add directly using the \"+\" next to Chosen Source, it will not appear to set the \"Target\" field as well, and it will save properly). Finally, if I were to select another available source (ex. \"test2\") and add it to the Chosen Source, it will successfully add \"test2\" and remove \"test3\" without needing a save or refresh.\nI believe this is due to the admin conveniently updating all related fields to include the added object, and therefore displaying it as if it was selected temporarily until refreshed\nDiving into this, I believe the issue is in this file: django/django/admin/static/admin/js/admin/RelatedObjectLookups.js\nIn this function: UpdateRelatedSelectOptions, on this query: \nconst selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] select:not(.admin-autocomplete)`);\nMy initial guess is that updating the query to not include the \"Chosen\" column in filter_horizontal fields would solve this issue (something like \nconst selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] div:not(.selector-chosen) > select:not(.admin-autocomplete)`);\nLet me know if more context is needed to help reproduce what is going on here. Thanks!\n", "hints_text": [["First Screenshot", 1692636340.0], ["Second Screenshot", 1692636357.0], ["Hello! Thank you for your report. Could you please post your admin.py definition as well as your models.py (reduced to this example)? So we can try to reproduce and triage accordingly. Thanks!", 1692637471.0], ["Replying to Natalia Bidart: Hello! Thank you for your report. Could you please post your admin.py definition as well as your models.py (reduced to this example)? So we can try to reproduce and triage accordingly. Thanks! Of course, here is the model (reduced to the example): class Workflow(models.Model): initial = models.ForeignKey('workflow.State', blank=True, null=True, related_name=\"workflow_initial\", on_delete=models.SET_NULL) class Transition(models.Model): source = models.ManyToManyField(State, related_name=\"transition_source\") target = models.ForeignKey(State, related_name=\"transition_target\", on_delete=models.CASCADE) class State(models.Model): label = models.CharField(max_length=255) And the admin (also reduced): class WorkflowAdmin(SortableAdminBase, admin.ModelAdmin): inlines = [TransitionInline, ] fieldsets = ( (None, { 'fields': [\"initial\"], }), ) class TransitionInline(SortableStackedInline, admin.StackedInline): model = Transition extra = 0 filter_horizontal = ['source'] fieldsets = ( (' ', { 'classes': ('collapse',), 'fields': ('source', 'target') }), ) class StateAdmin(admin.ModelAdmin): fieldsets = ( (None, { 'fields': (\"label\",), }), ) As you can see, the model of interest is Transition and in the admin console it is represented through as an inline for another model called Workflow. I tried to remove any extra information to avoid confusion (part of this removal was my_order fields in case there is confusion as to why Sortable is being used). While I don't think that the \"Workflow\" component (and Inline stacking) are relevant to this bug -- I kept them there to keep it as close to my current flow as possible. This should be able to be reproduced without the workflow element.", 1692639833.0], ["Replying to devin13cox: Of course, here is the model (reduced to the example): Great! Thank you. While I don't think that the \"Workflow\" component (and Inline stacking) are relevant to this bug -- I kept them there to keep it as close to my current flow as possible. This should be able to be reproduced without the workflow element. Confirmed I was able to reproduce with a reduced example like this: from django.db import models class State(models.Model): label = models.CharField(max_length=255) def __str__(self): return self.label class Transition(models.Model): source = models.ManyToManyField(State, related_name=\"transition_source\") target = models.ForeignKey(State, related_name=\"transition_target\", on_delete=models.CASCADE) from django.contrib import admin from .models import State, Transition class TransitionAdmin(admin.ModelAdmin): filter_horizontal = ['source'] admin.site.register(State) admin.site.register(Transition, TransitionAdmin) Would you like to prepare a patch?", 1692647634.0], ["Check out related tickets #34025 and #11803.", 1692657592.0], ["Replying to devin13cox: My initial guess is that updating the query to not include the \"Chosen\" column in filter_horizontal fields would solve this issue (something like const selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] div:not(.selector-chosen) > select:not(.admin-autocomplete)`); That could work \ud83d\udc4d I'm just wondering though whether there's a better approach than to continuously blacklist ancestors as we come across these \ud83e\udd14", 1692843201.0], ["Hi David, Im new to this repo, so I appreciate any guidance or feedback u can offer. Regardin issue with filter_horizontal \"Chosen\" column. From the discussion, I think about a solution which will not continuously blacklisting ancestors Adding a data attribute like data-context to select elements during its render phase in the Django admin templates. So each select will have a more specific context about its purpose (eg. source, target, chosen etc.). Then modifying the query in RelatedObjectLookups.js to use this new data-context attribute, so our selector will become: const selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"][data-context=\"source\"] select:not(.admin-autocomplete)`); This approach will provide clear context for each select element which makes JavaScript logic more intentional. would this be a feasible, acceptable solution in ur opinion? I'm eager to hear ur thoughts & make any necessary adjustments. Once approach is approved, I'm interested in working on this ticket. Please let me know if that's possible. Replying to David Sanders: Replying to devin13cox: My initial guess is that updating the query to not include the \"Chosen\" column in filter_horizontal fields would solve this issue (something like const selectsRelated = document.querySelectorAll(`[data-model-ref=\"${modelName}\"] div:not(.selector-chosen) > select:not(.admin-autocomplete)`); That could work \ud83d\udc4d I'm just wondering though whether there's a better approach than to continuously blacklist ancestors as we come across these \ud83e\udd14", 1693144893.0], ["Replying to yokeshwaran1: I think about a solution which will not continuously blacklisting ancestors Yep that's along the lines of what I was getting at \ud83d\ude0a\ud83d\udc4d The question is though which approach is clearer/easier to maintain. The benefit of whitelisting is we can remove not(.admin-autocomplete) too I think \ud83e\udd14 Edit: Felix & Nesita will decide which is better; if you like submit a PR with a fix + some tests.", 1693171410.0], ["Thanks, David. I\u2019ll make the necessary changes and submit a PR with tests soon.", 1693191982.0], ["Hi David, I have opened a PR to address this issue: \u200bhttps://github.com/django/django/pull/17219 Replying to yokeshwaran1: Thanks, David. I\u2019ll make the necessary changes and submit a PR with tests soon.", 1694172077.0], ["Setting the has patch flag.", 1694177803.0], ["Opened new PR on this \u200bhttps://github.com/django/django/pull/17897. Ran into small issue that still needs work, as described in the old PR. Will get it patched soon, but if anyone has direction on it I would appreciate feedback. Thanks!", 1708543078.0], ["Hello, just wanted to check in and see if there is anything else I need to do pending a review for this ticket. No rush on getting this in, I just wanted to make sure you guys aren't waiting on something from me. Thanks!", 1710346340.0], ["No, the ticket flags are set correctly to put the ticket in the patch review queue. You can confirm this by looking at the yellow box below the ticket description (\"According to the ticket's flags...\").", 1710350608.0], ["In 719a42b5: Fixed #34789 -- Prevented updateRelatedSelectsOptions from adding entries to filter_horizontal chosen box. Co-authored-by: yokeshwaran1 <yokesh440@\u2026>", 1718172556.0]], "created_at": "2024-02-22T01:13:06Z"}
{"repo": "django/django", "pull_number": 17894, "instance_id": "django__django-17894", "issue_numbers": ["35140"], "base_commit": "1fd57f2a2175bddabac01716716b2069ef8c8acd", "patch": "diff --git a/django/views/templates/csrf_403.html b/django/views/templates/csrf_403.html\nindex 85df032b1236..42fea9911b11 100644\n--- a/django/views/templates/csrf_403.html\n+++ b/django/views/templates/csrf_403.html\n@@ -8,7 +8,7 @@\n     html * { padding:0; margin:0; }\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\n-    body { font:small sans-serif; background:#eee; color:#000; }\n+    body { font-family: sans-serif; background:#eee; color:#000; }\n     body>div { border-bottom:1px solid #ddd; }\n     h1 { font-weight:normal; margin-bottom:.4em; }\n     h1 span { font-size:60%; color:#666; font-weight:normal; }\ndiff --git a/django/views/templates/technical_404.html b/django/views/templates/technical_404.html\nindex 5c844b927954..f8d4e92c0843 100644\n--- a/django/views/templates/technical_404.html\n+++ b/django/views/templates/technical_404.html\n@@ -8,7 +8,7 @@\n     html * { padding:0; margin:0; }\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\n-    body { font:small sans-serif; background:#eee; color:#000; }\n+    body { font-family: sans-serif; background:#eee; color:#000; }\n     body > :where(header, main, footer) { border-bottom:1px solid #ddd; }\n     h1 { font-weight:normal; margin-bottom:.4em; }\n     h1 small { font-size:60%; color:#666; font-weight:normal; }\ndiff --git a/django/views/templates/technical_500.html b/django/views/templates/technical_500.html\nindex 940beeeb85f0..31f0dfe1b905 100644\n--- a/django/views/templates/technical_500.html\n+++ b/django/views/templates/technical_500.html\n@@ -9,7 +9,7 @@\n     html * { padding:0; margin:0; }\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\n-    body { font:small sans-serif; background-color:#fff; color:#000; }\n+    body { font-family: sans-serif; background-color:#fff; color:#000; }\n     body > :where(header, main, footer) { border-bottom:1px solid #ddd; }\n     h1 { font-weight:normal; }\n     h2 { margin-bottom:.8em; }\n@@ -21,7 +21,7 @@\n     tbody td, tbody th { vertical-align:top; padding:2px 3px; }\n     thead th {\n       padding:1px 6px 1px 3px; background:#fefefe; text-align:left;\n-      font-weight:normal; font-size:11px; border:1px solid #ddd;\n+      font-weight:normal; font-size: 0.6875rem; border:1px solid #ddd;\n     }\n     tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n     table.vars { margin:5px 10px 2px 40px; width: auto; }\n@@ -61,9 +61,9 @@\n     #requestinfo h3 { margin-bottom:-1em; }\n     .error { background: #ffc; }\n     .specific { color:#cc3300; font-weight:bold; }\n-    h2 span.commands { font-size:.7em; font-weight:normal; }\n+    h2 span.commands { font-size: 0.7rem; font-weight:normal; }\n     span.commands a:link {color:#5E5694;}\n-    pre.exception_value { font-family: sans-serif; color: #575757; font-size: 1.5em; margin: 10px 0 10px 0; }\n+    pre.exception_value { font-family: sans-serif; color: #575757; font-size: 1.5rem; margin: 10px 0 10px 0; }\n     .append-bottom { margin-bottom: 10px; }\n     .fname { user-select: all; }\n   </style>\n", "test_patch": "", "problem_statement": "Increase font size in Django debug views (404, 500, etc)\nDescription\n\t \nThe font size in Django's debug views (404 page, 500 page, etc) is quite small (13px for the main body text). Ideally we would want this to be 16px to improve readability (this font size was checked with Thibaud from the Accessibility Team). \nThe issue can be seen in \u200bthis example page.\n", "hints_text": [["Thank you Eli! Yes I believe a good minimum font size for Django would be 14px. For the main page copy on pages like these there\u2019s no reason to go below 16px. I\u2019ll assign you now, please make sure when working on this to review where exactly the changes need to happen so this reflects across all desired views. It\u2019d be great if we also got the font sizes consistent even if each view has its own separate styles.", 1706114792.0], ["Hello Eliana, Thibaud! I'm on the fence with this ticket, could you please explain a bit more the issue with the font size? I see the debug page with font 14px but I also see Google and other web sites to be 14px. I wouldn't want the 404 (or 500) pages to have bigger size because then users will have to scroll more, and also increasing the font size is a shortcut away (ctrl +) or a setting away (\"minimum font size\" in Firefox for example). I'm not opposed but I'm not a fan either, so I'd like to know more before proceeding. Thank you!", 1706162198.0], ["hi Natalia, sure! We reviewed the error pages and noticed the font size used there was smaller than recommended minimums on the web. There isn\u2019t a hard and fast rule with what\u2019s considered the bare minimum font size or how to set a type scale, but general best practice is that the main \"body\" copy of a page should be 16px. As you\u2019ve noted some organizations are also using 14px, which I think would make for a good minimum for Django \u2013 but if we used that for the main copy, then it wouldn\u2019t leave much room for any other text to be smaller. So this is possible but would somewhat limit design options. I don\u2019t know which debug page you\u2019re referring to, the 404 page shared by Eli uses 13px for the main text in my browser. For the \u200b500 page, my browser\u2019s CSS overview says: 368 occurrences of 13px 14 occurrences of 15.21px 8 occurrences of 11px 7 occurrences of 19.5px 3 occurrences of 13.65px 2 occurrences of 26px I don\u2019t see any use of a 14px font size but it could be our browsers are configured differently. I wouldn't want the 404 (or 500) pages to have bigger size because then users will have to scroll more, and also increasing the font size is a shortcut away (ctrl +) or a setting away (\"minimum font size\" in Firefox for example). Generally with web accessibility the idea is that the default experience should be accessible to the widest audience. So it\u2019d be better to provide a legible font size by default, and as you mention if some people find it too big or on the contrary not big enough they can still adjust. Scrolling is certainly a consideration but it doesn\u2019t seem like font size would change things much on those pages? On the 404 and CSRF failure pages, the content has a small height as-is and I don\u2019t see how an increase in font size would cause scrolling On the 500 and 400 pages, collapsing the Settings or Request information \"META\" sections would help a lot more than keeping font size small", 1706178665.0], ["Hello Thibaud, Eliana, Thanks for the extra details. Now I feel silly because I can't find where I saw the 14px. In fact, I don't see any font-size defined, does this match your view? Now, assuming that no font-size is set (but then some relative units are used, such as 1.5rem), I think that's a good thing? In that whatever browser setting gets in play? Would a potential fix for this issue set a fixed font-size or how does it work? (Sorry for all the questions, I'd like to understand more!)", 1706778874.0], ["Font sizes are defined, for example see \u200btechnical_404.html line 11. A fix for this would either involve removing those definitions, or replacing them with more explicit ones, Eli and I haven\u2019t investigated yet. As far as browser settings, it will be equally good as long as we appropriately use font size units that are relative. So in the case of 1.5rem \u2013 the value is fixed relative to the root (html element) font size, which is where the browser settings would apply (as far as I know, it\u2019s not always explicit enough to check easily).", 1707296005.0], ["Replying to Thibaud Colas: Font sizes are defined, for example see \u200btechnical_404.html line 11. A fix for this would either involve removing those definitions, or replacing them with more explicit ones, Eli and I haven\u2019t investigated yet. As far as browser settings, it will be equally good as long as we appropriately use font size units that are relative. So in the case of 1.5rem \u2013 the value is fixed relative to the root (html element) font size, which is where the browser settings would apply (as far as I know, it\u2019s not always explicit enough to check easily). Thank you! This sound good. I would suggest we first try with the removal of the small font definition, and see how that looks, but I trust your guidance on this. Looking forward to review the patch!", 1707470066.0]], "created_at": "2024-02-20T22:44:54Z"}
{"repo": "django/django", "pull_number": 17893, "instance_id": "django__django-17893", "issue_numbers": ["35241"], "base_commit": "6e1ece7ed522c904a674966fa985159b7bbf1545", "patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex 90ca7affc8c8..c4613fa24ea8 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -504,7 +504,7 @@ def needs_explicit_pk_field(self):\n             # in parents.)\n             any(\n                 parent._meta.auto_field or not parent._meta.model._meta.pk.editable\n-                for parent in self.form._meta.model._meta.get_parent_list()\n+                for parent in self.form._meta.model._meta.all_parents\n             )\n         )\n \ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 75328e0749bb..9dda7cbff9b2 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1368,7 +1368,7 @@ def _get_unique_checks(self, exclude=None, include_meta_constraints=False):\n         constraints = []\n         if include_meta_constraints:\n             constraints = [(self.__class__, self._meta.total_unique_constraints)]\n-        for parent_class in self._meta.get_parent_list():\n+        for parent_class in self._meta.all_parents:\n             if parent_class._meta.unique_together:\n                 unique_togethers.append(\n                     (parent_class, parent_class._meta.unique_together)\n@@ -1397,7 +1397,7 @@ def _get_unique_checks(self, exclude=None, include_meta_constraints=False):\n         # the list of checks.\n \n         fields_with_class = [(self.__class__, self._meta.local_fields)]\n-        for parent_class in self._meta.get_parent_list():\n+        for parent_class in self._meta.all_parents:\n             fields_with_class.append((parent_class, parent_class._meta.local_fields))\n \n         for model_class, fields in fields_with_class:\n@@ -1546,7 +1546,7 @@ def unique_error_message(self, model_class, unique_check):\n \n     def get_constraints(self):\n         constraints = [(self.__class__, self._meta.constraints)]\n-        for parent_class in self._meta.get_parent_list():\n+        for parent_class in self._meta.all_parents:\n             if parent_class._meta.constraints:\n                 constraints.append((parent_class, parent_class._meta.constraints))\n         return constraints\n@@ -1855,7 +1855,7 @@ def _check_field_name_clashes(cls):\n         used_fields = {}  # name or attname -> field\n \n         # Check that multi-inheritance doesn't cause field name shadowing.\n-        for parent in cls._meta.get_parent_list():\n+        for parent in cls._meta.all_parents:\n             for f in parent._meta.local_fields:\n                 clash = used_fields.get(f.name) or used_fields.get(f.attname) or None\n                 if clash:\n@@ -1875,7 +1875,7 @@ def _check_field_name_clashes(cls):\n         # Check that fields defined in the model don't clash with fields from\n         # parents, including auto-generated fields like multi-table inheritance\n         # child accessors.\n-        for parent in cls._meta.get_parent_list():\n+        for parent in cls._meta.all_parents:\n             for f in parent._meta.get_fields():\n                 if f not in used_fields:\n                     used_fields[f.name] = f\ndiff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 022dec940b60..fd3d290a9632 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -305,13 +305,11 @@ def collect(\n         if not collect_related:\n             return\n \n-        if keep_parents:\n-            parents = set(model._meta.get_parent_list())\n         model_fast_deletes = defaultdict(list)\n         protected_objects = defaultdict(list)\n         for related in get_candidate_relations_to_delete(model._meta):\n             # Preserve parent reverse relationships if keep_parents=True.\n-            if keep_parents and related.model in parents:\n+            if keep_parents and related.model in model._meta.all_parents:\n                 continue\n             field = related.field\n             on_delete = field.remote_field.on_delete\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex e59dfbe2492f..c7fe3b638ad5 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1202,7 +1202,7 @@ def resolve_expression(\n     ):\n         # Resolve parents fields used in raw SQL.\n         if query.model:\n-            for parent in query.model._meta.get_parent_list():\n+            for parent in query.model._meta.all_parents:\n                 for parent_field in parent._meta.local_fields:\n                     if parent_field.column.lower() in self.sql.lower():\n                         query.resolve_ref(\ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex e63a81c2d8e7..7e2896a6a251 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -692,16 +692,24 @@ def get_base_chain(self, model):\n                 return res\n         return []\n \n-    def get_parent_list(self):\n+    @cached_property\n+    def all_parents(self):\n         \"\"\"\n-        Return all the ancestors of this model as a list ordered by MRO.\n+        Return all the ancestors of this model as a tuple ordered by MRO.\n         Useful for determining if something is an ancestor, regardless of lineage.\n         \"\"\"\n         result = OrderedSet(self.parents)\n         for parent in self.parents:\n-            for ancestor in parent._meta.get_parent_list():\n+            for ancestor in parent._meta.all_parents:\n                 result.add(ancestor)\n-        return list(result)\n+        return tuple(result)\n+\n+    def get_parent_list(self):\n+        \"\"\"\n+        Return all the ancestors of this model as a list ordered by MRO.\n+        Backward compatibility method.\n+        \"\"\"\n+        return list(self.all_parents)\n \n     def get_ancestor_link(self, ancestor):\n         \"\"\"\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 94819758dd65..cb5c63c0d17c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -788,7 +788,7 @@ def bulk_create(\n         # model to detect the inheritance pattern ConcreteGrandParent ->\n         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n         # would not identify that case as involving multiple tables.\n-        for parent in self.model._meta.get_parent_list():\n+        for parent in self.model._meta.all_parents:\n             if parent._meta.concrete_model is not self.model._meta.concrete_model:\n                 raise ValueError(\"Can't bulk create a multi-table inherited model\")\n         if not objs:\ndiff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e1041b965370..7162c4fea9d1 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -403,8 +403,8 @@ def check_rel_lookup_compatibility(model, target_opts, field):\n     def check(opts):\n         return (\n             model._meta.concrete_model == opts.concrete_model\n-            or opts.concrete_model in model._meta.get_parent_list()\n-            or model in opts.get_parent_list()\n+            or opts.concrete_model in model._meta.all_parents\n+            or model in opts.all_parents\n         )\n \n     # If the field is a primary key, then doing a query against the field's\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 9a0d2eb4e720..b36125c762a7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1391,7 +1391,7 @@ def get_select_for_update_of_arguments(self):\n         def _get_parent_klass_info(klass_info):\n             concrete_model = klass_info[\"model\"]._meta.concrete_model\n             for parent_model, parent_link in concrete_model._meta.parents.items():\n-                parent_list = parent_model._meta.get_parent_list()\n+                all_parents = parent_model._meta.all_parents\n                 yield {\n                     \"model\": parent_model,\n                     \"field\": parent_link,\n@@ -1402,7 +1402,7 @@ def _get_parent_klass_info(klass_info):\n                         # Selected columns from a model or its parents.\n                         if (\n                             self.select[select_index][0].target.model == parent_model\n-                            or self.select[select_index][0].target.model in parent_list\n+                            or self.select[select_index][0].target.model in all_parents\n                         )\n                     ],\n                 }\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 4b11d5af8c16..4cda4e534e42 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1214,20 +1214,19 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\n         fks_to_parent = [f for f in opts.fields if f.name == fk_name]\n         if len(fks_to_parent) == 1:\n             fk = fks_to_parent[0]\n-            parent_list = parent_model._meta.get_parent_list()\n-            parent_list.append(parent_model)\n+            all_parents = (*parent_model._meta.all_parents, parent_model)\n             if (\n                 not isinstance(fk, ForeignKey)\n                 or (\n                     # ForeignKey to proxy models.\n                     fk.remote_field.model._meta.proxy\n-                    and fk.remote_field.model._meta.proxy_for_model not in parent_list\n+                    and fk.remote_field.model._meta.proxy_for_model not in all_parents\n                 )\n                 or (\n                     # ForeignKey to concrete models.\n                     not fk.remote_field.model._meta.proxy\n                     and fk.remote_field.model != parent_model\n-                    and fk.remote_field.model not in parent_list\n+                    and fk.remote_field.model not in all_parents\n                 )\n             ):\n                 raise ValueError(\n@@ -1240,18 +1239,17 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\n             )\n     else:\n         # Try to discover what the ForeignKey from model to parent_model is\n-        parent_list = parent_model._meta.get_parent_list()\n-        parent_list.append(parent_model)\n+        all_parents = (*parent_model._meta.all_parents, parent_model)\n         fks_to_parent = [\n             f\n             for f in opts.fields\n             if isinstance(f, ForeignKey)\n             and (\n                 f.remote_field.model == parent_model\n-                or f.remote_field.model in parent_list\n+                or f.remote_field.model in all_parents\n                 or (\n                     f.remote_field.model._meta.proxy\n-                    and f.remote_field.model._meta.proxy_for_model in parent_list\n+                    and f.remote_field.model._meta.proxy_for_model in all_parents\n                 )\n             )\n         ]\n", "test_patch": "diff --git a/tests/model_meta/tests.py b/tests/model_meta/tests.py\nindex fef82661cdd9..0aa04d760d19 100644\n--- a/tests/model_meta/tests.py\n+++ b/tests/model_meta/tests.py\n@@ -325,15 +325,19 @@ def test_relations_related_objects(self):\n         )\n \n \n-class ParentListTests(SimpleTestCase):\n-    def test_get_parent_list(self):\n-        self.assertEqual(CommonAncestor._meta.get_parent_list(), [])\n-        self.assertEqual(FirstParent._meta.get_parent_list(), [CommonAncestor])\n-        self.assertEqual(SecondParent._meta.get_parent_list(), [CommonAncestor])\n+class AllParentsTests(SimpleTestCase):\n+    def test_all_parents(self):\n+        self.assertEqual(CommonAncestor._meta.all_parents, ())\n+        self.assertEqual(FirstParent._meta.all_parents, (CommonAncestor,))\n+        self.assertEqual(SecondParent._meta.all_parents, (CommonAncestor,))\n         self.assertEqual(\n-            Child._meta.get_parent_list(), [FirstParent, SecondParent, CommonAncestor]\n+            Child._meta.all_parents,\n+            (FirstParent, SecondParent, CommonAncestor),\n         )\n \n+    def test_get_parent_list(self):\n+        self.assertEqual(Child._meta.get_parent_list(), list(Child._meta.all_parents))\n+\n \n class PropertyNamesTests(SimpleTestCase):\n     def test_person(self):\n", "problem_statement": "Cache Model._meta.get_parent_list()\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nAnother candidate for caching, like #35230 and #35232, following the same system check profiling.\nModel._meta.get_parent_list() computes the flattened list of ancestor models by MRO. This list is immutable, deterministic, and recursively constructed through the inheritance hierarchy. These properties make it a prime candidate for caching.\nI found this method was taking ~1% (0.39ms) of the total runtime for system checks on a project with 118 models. After adding caching, it\u2019s reduced to a negligible amount (<0.01ms).\nget_parent_list() is called in many other code paths, so caching will help all of those too.\n", "hints_text": [["Thank you Adam! Do you have concrete benchmark numbers to share?", 1708582398.0], ["I added concrete numbers to the description.", 1708614918.0]], "created_at": "2024-02-20T22:41:30Z"}
{"repo": "django/django", "pull_number": 17889, "instance_id": "django__django-17889", "issue_numbers": ["35238"], "base_commit": "eb2d49b73408f1e60b8e1fa7fee822816945e1cd", "patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex cbac8a7f7672..6856fdb59676 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -135,7 +135,10 @@ def get_objects():\n                             queryset = model._base_manager.using(\n                                 self.connection.alias,\n                             ).order_by(model._meta.pk.name)\n-                            yield from queryset.iterator()\n+                            chunk_size = (\n+                                2000 if queryset._prefetch_related_lookups else None\n+                            )\n+                            yield from queryset.iterator(chunk_size=chunk_size)\n \n         # Serialize to a string\n         out = StringIO()\ndiff --git a/docs/releases/5.0.3.txt b/docs/releases/5.0.3.txt\nindex e17fdd531f13..297e17d02359 100644\n--- a/docs/releases/5.0.3.txt\n+++ b/docs/releases/5.0.3.txt\n@@ -24,3 +24,7 @@ Bugfixes\n * Fixed a regression in Django 5.0 that caused a crash of\n   ``@sensitive_variables`` and ``@sensitive_post_parameters`` decorators on\n   functions loaded from ``.pyc`` files (:ticket:`35187`).\n+\n+* Fixed a regression in Django 5.0 that caused a crash when reloading a test\n+  database and a base queryset for a base manager used ``prefetch_related()``\n+  (:ticket:`35238`).\n", "test_patch": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 9593e13462a0..7e760e88845a 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -14,6 +14,7 @@\n     Object,\n     ObjectReference,\n     ObjectSelfReference,\n+    SchoolBus,\n     SchoolClass,\n )\n \n@@ -250,6 +251,22 @@ def test_serialize_db_to_string_base_manager(self):\n         self.assertIn('\"model\": \"backends.schoolclass\"', data)\n         self.assertIn('\"year\": 1000', data)\n \n+    def test_serialize_db_to_string_base_manager_with_prefetch_related(self):\n+        sclass = SchoolClass.objects.create(\n+            year=2000, last_updated=datetime.datetime.now()\n+        )\n+        bus = SchoolBus.objects.create(number=1)\n+        bus.schoolclasses.add(sclass)\n+        with mock.patch(\"django.db.migrations.loader.MigrationLoader\") as loader:\n+            # serialize_db_to_string() serializes only migrated apps, so mark\n+            # the backends app as migrated.\n+            loader_instance = loader.return_value\n+            loader_instance.migrated_apps = {\"backends\"}\n+            data = connection.creation.serialize_db_to_string()\n+        self.assertIn('\"model\": \"backends.schoolbus\"', data)\n+        self.assertIn('\"model\": \"backends.schoolclass\"', data)\n+        self.assertIn(f'\"schoolclasses\": [{sclass.pk}]', data)\n+\n \n class SkipTestClass:\n     def skip_function(self):\ndiff --git a/tests/backends/models.py b/tests/backends/models.py\nindex 99e9e86f44d2..1ed108c2b8c7 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -32,6 +32,20 @@ class SchoolClass(models.Model):\n     objects = SchoolClassManager()\n \n \n+class SchoolBusManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().prefetch_related(\"schoolclasses\")\n+\n+\n+class SchoolBus(models.Model):\n+    number = models.IntegerField()\n+    schoolclasses = models.ManyToManyField(\"SchoolClass\")\n+    objects = SchoolBusManager()\n+\n+    class Meta:\n+        base_manager_name = \"objects\"\n+\n+\n class VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ(models.Model):\n     primary_key_is_quite_long_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = models.AutoField(\n         primary_key=True\n", "problem_statement": "Missing chunk_size kwarg throws exception when creating test DB if model has base-manager with prefetches\nDescription\n\t \nI am trying to upgrade from 4.x to 5.0 and am running into this issue when creating my test database. \nI'm using pytest, but I'd be very surprised if this wasn't also an issue with unit-test. That said, I do find it a little surprising no one has noticed this. Surely there would have been other projects out with models whose base-managers have prefetches? So I'm not entirely confident this is a bug in django. Maybe pytest should be initializing test DBs differently, I haven't done that research. \nSee django/db/backends/base/creation.py for the offending code:\nclass BaseDatabaseCreation:\n # ...\n\tdef serialize_db_to_string(self):\n\t\t# ... \n\t\t# Iteratively return every object for all models to serialize.\n\t\tdef get_objects():\n\t\t\tfor app_config in apps.get_app_configs():\n\t\t\t\tif (...):\n\t\t\t\t\tfor model in app_config.get_models():\n\t\t\t\t\t\tif (...):\n\t\t\t\t\t\t\tqueryset = model._base_manager.using(\n\t\t\t\t\t\t\t\tself.connection.alias,\n\t\t\t\t\t\t\t).order_by(model._meta.pk.name)\n\t\t\t\t\t\t\tyield from queryset.iterator() # HERE THROWS EXCEPTION\nHere is the call-stack in my project, you'll see that although it starts with pytest, there's a chain of 6 first-party django calls that lead to the exception:\n ...\n \n File \"/.../site-packages/pytest_django/fixtures.py\", line 139, in django_db_setup\n\tdb_cfg = setup_databases(\n File \".../site-packages/django/test/utils.py\", line 203, in setup_databases\n\tconnection.creation.create_test_db(\n File \".../site-packages/django/db/backends/base/creation.py\", line 94, in create_test_db\n\tself.connection._test_serialized_contents = self.serialize_db_to_string()\n File \".../site-packages/django/db/backends/base/creation.py\", line 142, in serialize_db_to_string\n\tserializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n File \".../site-packages/django/core/serializers/__init__.py\", line 134, in serialize\n\ts.serialize(queryset, **options)\n File \".../site-packages/django/core/serializers/base.py\", line 108, in serialize\n\tfor count, obj in enumerate(queryset, start=1):\n File \".../site-packages/django/db/backends/base/creation.py\", line 138, in get_objects\n\tyield from queryset.iterator()\nProposed solution\nI am putting up a PR that will conditionally use the chunk_size kwarg when calling queryset.iterator() in django/db/backends/base/creation.py. An alternative is to set a fallback chunk_size in iterator() itself, if prefetches are found, but I am guessing there's a good reason that wasn't done in the first place. I am defaulting to the same as aiterator, which is 2000\nI am not confident in this solution, there seem to be quite a bit of first-party calls to queryset.iterator that don't include a chunk-size kwarg, however this fix makes my project's relatively large test-suite pass, and I have prefetches on many models' base-managers including the user model.\n", "hints_text": [], "created_at": "2024-02-19T23:06:08Z"}
{"repo": "django/django", "pull_number": 17888, "instance_id": "django__django-17888", "issue_numbers": ["35237"], "base_commit": "a084c5d35a6d00abd261338a374a4424764b4aee", "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex c1a17af076da..94e700cf68c5 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -816,8 +816,7 @@ def check(self, admin_obj, **kwargs):\n             *self._check_list_editable(admin_obj),\n             *self._check_search_fields(admin_obj),\n             *self._check_date_hierarchy(admin_obj),\n-            *self._check_action_permission_methods(admin_obj),\n-            *self._check_actions_uniqueness(admin_obj),\n+            *self._check_actions(admin_obj),\n         ]\n \n     def _check_save_as(self, obj):\n@@ -1195,13 +1194,12 @@ def _check_date_hierarchy(self, obj):\n                 else:\n                     return []\n \n-    def _check_action_permission_methods(self, obj):\n-        \"\"\"\n-        Actions with an allowed_permission attribute require the ModelAdmin to\n-        implement a has_<perm>_permission() method for each permission.\n-        \"\"\"\n-        actions = obj._get_base_actions()\n+    def _check_actions(self, obj):\n         errors = []\n+        actions = obj._get_base_actions()\n+\n+        # Actions with an allowed_permission attribute require the ModelAdmin\n+        # to implement a has_<perm>_permission() method for each permission.\n         for func, name, _ in actions:\n             if not hasattr(func, \"allowed_permissions\"):\n                 continue\n@@ -1220,12 +1218,8 @@ def _check_action_permission_methods(self, obj):\n                             id=\"admin.E129\",\n                         )\n                     )\n-        return errors\n-\n-    def _check_actions_uniqueness(self, obj):\n-        \"\"\"Check that every action has a unique __name__.\"\"\"\n-        errors = []\n-        names = collections.Counter(name for _, name, _ in obj._get_base_actions())\n+        # Names need to be unique.\n+        names = collections.Counter(name for _, name, _ in actions)\n         for name, count in names.items():\n             if count > 1:\n                 errors.append(\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex e93fdf40475d..47b4821fcc56 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1033,7 +1033,10 @@ def action_checkbox(self, obj):\n \n     @staticmethod\n     def _get_action_description(func, name):\n-        return getattr(func, \"short_description\", capfirst(name.replace(\"_\", \" \")))\n+        try:\n+            return func.short_description\n+        except AttributeError:\n+            return capfirst(name.replace(\"_\", \" \"))\n \n     def _get_base_actions(self):\n         \"\"\"Return the list of actions, prior to any request-based filtering.\"\"\"\n", "test_patch": "", "problem_statement": "Optimize system checks for admin actions\nDescription\n\t \nIn ModelAdminChecks, the _check_action_permission_methods and _check_actions_uniqueness both fetch the actions. By combining them, this duplicate work can be eliminated.\nAdditionally, the lower method ModelAdmin._get_action_description() is wasteful as it computes a default name even when one is defined. This can be deferred and cached.\nIn a project I\u2019ve profiled, these changes take the admin action checks from 0.86ms (2.1%) to 0.36ms (0.9%).\n", "hints_text": [], "created_at": "2024-02-19T23:03:32Z"}
{"repo": "django/django", "pull_number": 17887, "instance_id": "django__django-17887", "issue_numbers": ["35236"], "base_commit": "e0496b2e9adb8f546e4b9895bc68955d2097ee88", "patch": "diff --git a/django/contrib/admin/views/main.py b/django/contrib/admin/views/main.py\nindex d8fff50d180e..70b6590811f1 100644\n--- a/django/contrib/admin/views/main.py\n+++ b/django/contrib/admin/views/main.py\n@@ -618,7 +618,7 @@ def has_related_field_in_list_display(self):\n             else:\n                 if isinstance(field.remote_field, ManyToOneRel):\n                     # <FK>_id field names don't require a join.\n-                    if field_name != field.get_attname():\n+                    if field_name != field.attname:\n                         return True\n         return False\n \ndiff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3b21c742b691..770f88265c6f 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -187,7 +187,7 @@ def get_prefetch_querysets(self, instances, querysets=None):\n         fk_dict = defaultdict(set)\n         # We need one instance for each group in order to get the right db:\n         instance_dict = {}\n-        ct_attname = self.model._meta.get_field(self.ct_field).get_attname()\n+        ct_attname = self.model._meta.get_field(self.ct_field).attname\n         for instance in instances:\n             # We avoid looking for values if either ct_id or fkey value is None\n             ct_id = getattr(instance, ct_attname)\n@@ -240,7 +240,7 @@ def __get__(self, instance, cls=None):\n         # content type ID here, and later when the actual instance is needed,\n         # use ContentType.objects.get_for_id(), which has a global cache.\n         f = self.model._meta.get_field(self.ct_field)\n-        ct_id = getattr(instance, f.get_attname(), None)\n+        ct_id = getattr(instance, f.attname, None)\n         pk_val = getattr(instance, self.fk_field)\n \n         rel_obj = self.get_cached_value(instance, default=None)\ndiff --git a/django/contrib/contenttypes/forms.py b/django/contrib/contenttypes/forms.py\nindex c0ff4f725749..741824e2fc67 100644\n--- a/django/contrib/contenttypes/forms.py\n+++ b/django/contrib/contenttypes/forms.py\n@@ -67,10 +67,10 @@ def get_default_prefix(cls):\n     def save_new(self, form, commit=True):\n         setattr(\n             form.instance,\n-            self.ct_field.get_attname(),\n+            self.ct_field.attname,\n             ContentType.objects.get_for_model(self.instance).pk,\n         )\n-        setattr(form.instance, self.ct_fk_field.get_attname(), self.instance.pk)\n+        setattr(form.instance, self.ct_fk_field.attname, self.instance.pk)\n         return form.save(commit=commit)\n \n \ndiff --git a/django/core/serializers/xml_serializer.py b/django/core/serializers/xml_serializer.py\nindex 16b69770f6c3..5818bfaa84a2 100644\n--- a/django/core/serializers/xml_serializer.py\n+++ b/django/core/serializers/xml_serializer.py\n@@ -106,7 +106,7 @@ def handle_fk_field(self, obj, field):\n         differently from regular fields).\n         \"\"\"\n         self._start_relational_field(field)\n-        related_att = getattr(obj, field.get_attname())\n+        related_att = getattr(obj, field.attname)\n         if related_att is not None:\n             if self.use_natural_foreign_keys and hasattr(\n                 field.remote_field.model, \"natural_key\"\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex c1f78d0632b5..75328e0749bb 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1925,7 +1925,7 @@ def _check_column_name_clashes(cls):\n         errors = []\n \n         for f in cls._meta.local_fields:\n-            _, column_name = f.get_attname_column()\n+            column_name = f.column\n \n             # Ensure the column name is not already in use.\n             if column_name and column_name in used_column_names:\n@@ -1972,7 +1972,7 @@ def _check_property_name_related_field_accessor_clashes(cls):\n         errors = []\n         property_names = cls._meta._property_names\n         related_field_accessors = (\n-            f.get_attname()\n+            f.attname\n             for f in cls._meta._get_fields(reverse=False)\n             if f.is_relation and f.related_model is not None\n         )\n@@ -2320,13 +2320,11 @@ def _check_long_column_names(cls, databases):\n             return errors\n \n         for f in cls._meta.local_fields:\n-            _, column_name = f.get_attname_column()\n-\n             # Check if auto-generated name for the field is too long\n             # for the database.\n             if (\n                 f.db_column is None\n-                and column_name is not None\n+                and (column_name := f.column) is not None\n                 and len(column_name) > allowed_len\n             ):\n                 errors.append(\n@@ -2348,10 +2346,9 @@ def _check_long_column_names(cls, databases):\n             # Check if auto-generated name for the M2M field is too long\n             # for the database.\n             for m2m in f.remote_field.through._meta.local_fields:\n-                _, rel_name = m2m.get_attname_column()\n                 if (\n                     m2m.db_column is None\n-                    and rel_name is not None\n+                    and (rel_name := m2m.column) is not None\n                     and len(rel_name) > allowed_len\n                 ):\n                     errors.append(\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 6d329ae85d38..e59dfbe2492f 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1204,8 +1204,7 @@ def resolve_expression(\n         if query.model:\n             for parent in query.model._meta.get_parent_list():\n                 for parent_field in parent._meta.local_fields:\n-                    _, column_name = parent_field.get_attname_column()\n-                    if column_name.lower() in self.sql.lower():\n+                    if parent_field.column.lower() in self.sql.lower():\n                         query.resolve_ref(\n                             parent_field.name, allow_joins, reuse, summarize\n                         )\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b9e2d1f7e510..94819758dd65 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2186,8 +2186,7 @@ def model_fields(self):\n         converter = connections[self.db].introspection.identifier_converter\n         model_fields = {}\n         for field in self.model._meta.fields:\n-            name, column = field.get_attname_column()\n-            model_fields[converter(column)] = field\n+            model_fields[converter(field.column)] = field\n         return model_fields\n \n \ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex cd6986d72a79..4b11d5af8c16 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1140,7 +1140,7 @@ def _construct_form(self, i, **kwargs):\n         if self.fk.remote_field.field_name != self.fk.remote_field.model._meta.pk.name:\n             fk_value = getattr(self.instance, self.fk.remote_field.field_name)\n             fk_value = getattr(fk_value, \"pk\", fk_value)\n-        setattr(form.instance, self.fk.get_attname(), fk_value)\n+        setattr(form.instance, self.fk.attname, fk_value)\n         return form\n \n     @classmethod\n", "test_patch": "", "problem_statement": "Access Field.attname and Field.column directly\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nMany field references call Field.get_attname_column() or Field.get_attname(), despite the attname and column attributes containing the computed results (after contribute_to_class()). Updating those call sites to plain attribute access eliminates some function calls, a worthy small speedup.\nFrom a profile of system checks on a smaller project, there were ~2k calls between the versions of each method:\n630 for Field.get_attname_column()\n208 for ForeignKey.get_attname_column()\n666 for Field.get_attname()\n431 for ForeignKey.get_attname()\nAll of these are eliminated by moving to attribute access.\n", "hints_text": [], "created_at": "2024-02-19T22:33:09Z"}
{"repo": "django/django", "pull_number": 17884, "instance_id": "django__django-17884", "issue_numbers": ["35153"], "base_commit": "5f637a8a8d847ba02493c5ce6da55e378c3f588f", "patch": "diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex 98434c883304..242cf31e9f94 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -1710,6 +1710,10 @@ for project locales. If not ``None``, Django will check for a ``formats.py``\n file, under the directory named as the current locale, and will use the\n formats defined in this file.\n \n+The name of the directory containing the format definitions is expected to be\n+named using :term:`locale name` notation, for example ``de``, ``pt_BR``,\n+``en_US``, etc.\n+\n For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``,\n and current language is ``en`` (English), Django will expect a directory tree\n like:\n", "test_patch": "", "problem_statement": "FORMAT_MODULE_PATH not acting as I expected.\nDescription\n\t \nI am not certain this is a bug, but may be more of a confusion of a new user (me). Here is what I found:\nIn my settings:\nLANGUAGE_CODE='en-us'\nTIME_ZONE = 'America/New_York'\nFORMAT_MODULE_PATH = [\n\t\"student_track.formats\",\n]\nUSE_L10N=True\nUSE_I18N = True\nUSE_TZ = True\nUSE_THOUSAND_SEPARATOR = True\nthen in my student_track app:\nI had this file:\n/formats/en_us/formats.py\nbut this failed to load (no error message). Eventually I figured out to change the file path to this (Note the Upper Case for the country):\n/formats/en_US/formats.py\nIn my formats.py i still have:\nDATE_FORMAT = \"M. d, Y\"\nTIME_FORMAT = \"h:i a\"\nDATETIME_FORMAT = \"M. d Y h:i a\"\n# DATETIME_FORMAT = f\"{DATE_FORMAT} {TIME_FORMAT}\"\nDATE_INPUT_FORMATS = [\n\t'%m/%d/%Y', '%m/%d/%y', '%Y-%m-%d', # '2006-10-25', '10/25/2006', '10/25/06'\n\t'%b %d %Y', '%b %d, %Y', # 'Oct 25 2006', 'Oct 25, 2006'\n\t'%d %b %Y', '%d %b, %Y', # '25 Oct 2006', '25 Oct, 2006'\n\t'%B %d %Y', '%B %d, %Y', # 'October 25 2006', 'October 25, 2006'\n\t'%d %B %Y', '%d %B, %Y', # '25 October 2006', '25 October, 2006'\n]\nTemplate I now have:\n<td class=\"text-start\" >{{ record.actual_date }} </td>\nand all is working well.\nWhere I think the issue is that the folder name did not match the language I specified in the settings file and I didn't understand that from the documentation.\nWhen I stepped through the code, it seems that this change occurs in the django.utils.formats.py file when iter_format_modules() is called:\ndef iter_format_modules(lang, format_module_path=None):\n\t\"\"\"Find format modules.\"\"\"\n\tif not check_for_language(lang):\n\t\treturn\n\tif format_module_path is None:\n\t\tformat_module_path = settings.FORMAT_MODULE_PATH\n\tformat_locations = []\n\tif format_module_path:\n\t\tif isinstance(format_module_path, str):\n\t\t\tformat_module_path = [format_module_path]\n\t\tfor path in format_module_path:\n\t\t\tformat_locations.append(path + \".%s\")\n\tformat_locations.append(\"django.conf.locale.%s\")\n\tlocale = to_locale(lang)\n\tlocales = [locale]\n\tif \"_\" in locale:\n\t\tlocales.append(locale.split(\"_\")[0])\n\tfor location in format_locations:\n\t\tfor loc in locales:\n\t\t\ttry:\n\t\t\t\tyield import_module(\"%s.formats\" % (location % loc))\n\t\t\texcept ImportError:\n\t\t\t\tpass\nIn my case, this failed with an ImportError, and when I looked into its details, it seems that this line:\n\tlocale = to_locale(lang)\nconverted had my language specified in settings (en-us) to \"en_US\". \nI don't exactly know why, but it seems intentional. Assuming this is behaving as expected, then it seems that the documentation should be updated to indicate how this works. \nI am so new to Django that I am hesitant to propose the actual text that should change, but would be happy to try/help if this seems like the reasonable solution.\n", "hints_text": [["Thanks for the ticket, however this is already \u200bdocumented: \"In all cases the name of the directory containing the translation is expected to be named using \u200blocale name notation. E.g. de, pt_BR, es_AR, etc. \"", 1706568033.0], ["Thanks for the reply, and agree that in the locations you mentioned it is stated. I think that my opinion that the docs are not helpful in this regard is because of a few things 1) I am very new to Django so I have not fought with this issue before. 2) I was under the impression (wrongly) that specifying the format of the date/time had nothing to do with Translation - not because it doesn't make sense, but simply because i wasn't actually trying to translate anything, just control the format(s) of date/times. You are correct that it is mentioned in the docs where you pointed, but as an inexperienced user it would have been hugely helpful if the section on creating custom formats which suggests using FORMAT_MODULE_PATH in the first place at least made a mention of the importance of the name of that folder, and that it adheres to standard formats for Locale names as specified in the places you already pointed to. Not a major thing, but it might save people who are not yet experts a lot of grief trying to simply format a date/time. I appreciate your feedback either way.", 1706595358.0], ["Paul, What do you think about adding the following sentence to the \u200bFORMAT_MODULE_PATH docs? The name of the directory containing the format definitions is expected to be named using \u200blocale name notation, for example `de`, `pt_BR`, `en_US`, etc. \" Would you like to prepare a patch?", 1706606281.0], ["I think that is perfect....maybe a link to the definitions you pointed out to me. I haven't ever done a patch before so have to figure out what that takes. Happy to do it, but it might take a little time.", 1706719226.0], ["Take your time.", 1706740396.0]], "created_at": "2024-02-19T20:58:33Z"}
{"repo": "django/django", "pull_number": 17881, "instance_id": "django__django-17881", "issue_numbers": ["23759"], "base_commit": "3426a5c33c36266af42128ee9eca4921e68ea876", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 0b571ea9ce3f..1041e2a63188 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -21,6 +21,7 @@ answer newbie questions, and generally made Django that much better:\n     Adam Johnson <https://github.com/adamchainz>\n     Adam Malinowski <https://adammalinowski.co.uk/>\n     Adam Vandenberg\n+    Adam Zapletal <https://adamzap.com/>\n     Ade Lee <alee@redhat.com>\n     Adiyat Mubarak <adiyatmubarak@gmail.com>\n     Adnan Umer <u.adnan@outlook.com>\ndiff --git a/django/core/files/storage/base.py b/django/core/files/storage/base.py\nindex 16ac22f70a8d..6ce4ab25359e 100644\n--- a/django/core/files/storage/base.py\n+++ b/django/core/files/storage/base.py\n@@ -69,7 +69,8 @@ def get_available_name(self, name, max_length=None):\n                 \"Detected path traversal attempt in '%s'\" % dir_name\n             )\n         validate_file_name(file_name)\n-        file_root, file_ext = os.path.splitext(file_name)\n+        file_ext = \"\".join(pathlib.PurePath(file_name).suffixes)\n+        file_root = file_name.removesuffix(file_ext)\n         # If the filename already exists, generate an alternative filename\n         # until it doesn't exist.\n         # Truncate original name if required, so the new filename does not\n", "test_patch": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 637de0a3c9fd..420314573d47 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -769,18 +769,24 @@ def test_filefield_reopen(self):\n \n     def test_duplicate_filename(self):\n         # Multiple files with the same name get _(7 random chars) appended to them.\n-        objs = [Storage() for i in range(2)]\n-        for o in objs:\n-            o.normal.save(\"multiple_files.txt\", ContentFile(\"Same Content\"))\n-        try:\n-            names = [o.normal.name for o in objs]\n-            self.assertEqual(names[0], \"tests/multiple_files.txt\")\n-            self.assertRegex(\n-                names[1], \"tests/multiple_files_%s.txt\" % FILE_SUFFIX_REGEX\n-            )\n-        finally:\n-            for o in objs:\n-                o.delete()\n+        tests = [\n+            (\"multiple_files\", \"txt\"),\n+            (\"multiple_files_many_extensions\", \"tar.gz\"),\n+        ]\n+        for filename, extension in tests:\n+            with self.subTest(filename=filename):\n+                objs = [Storage() for i in range(2)]\n+                for o in objs:\n+                    o.normal.save(f\"{filename}.{extension}\", ContentFile(\"Content\"))\n+                try:\n+                    names = [o.normal.name for o in objs]\n+                    self.assertEqual(names[0], f\"tests/{filename}.{extension}\")\n+                    self.assertRegex(\n+                        names[1], f\"tests/{filename}_{FILE_SUFFIX_REGEX}.{extension}\"\n+                    )\n+                finally:\n+                    for o in objs:\n+                        o.delete()\n \n     def test_file_truncation(self):\n         # Given the max_length is limited, when multiple files get uploaded\n", "problem_statement": "Storage.get_available_name should preserve all file extensions, not just the first one\nDescription\n\t \nget_available_name only preserves the first file extension. If the file is foo.tar.gz then get_available_name will return foo.tar_RANDOM.gz instead of foo_RANDOM.tar.gz\n\u200bhttps://github.com/django/django/blob/master/django/core/files/storage.py#L71\n\tdef get_available_name(self, name):\n\t\t\"\"\"\n\t\tReturns a filename that's free on the target storage system, and\n\t\tavailable for new content to be written to.\n\t\t\"\"\"\n\t\tdir_name, file_name = os.path.split(name)\n\t\tfile_root, file_ext = os.path.splitext(file_name)\n\t\t# If the filename already exists, add an underscore and a random 7\n\t\t# character alphanumeric string (before the file extension, if one\n\t\t# exists) to the filename until the generated filename doesn't exist.\n\t\twhile self.exists(name):\n\t\t\t# file_ext includes the dot.\n\t\t\tname = os.path.join(dir_name, \"%s_%s%s\" % (file_root, get_random_string(7), file_ext))\n\t\treturn name\n", "hints_text": [["In general, I think a period is a valid character in a filename, so we cannot simply assume everything to the right of the first period is the file extension. Some different strategies for the issue are detailed on \u200bstackoverflow. I am not sure its up to Django to pick one, but we could at least document the caveat and link how to write your own storage subclass so someone can implement the behavior they desire. Thoughts?", 1415095967.0], ["Sorry for the delay. I just found out status updates on tickets I am watching have been going to spam. I guess that is why I never get updates. In this case, I do not think it is an issue if a valid part of the filename is assumed to be an extension because get_available_name does not promise to return the same filename, and it doesn't matter where the random string is in the name to be \"available\". However, the mimetypes module could be used to determine if an extension was actually an extension. If mimetypes returns a type or an encoding, add the extension to the extensions list, otherwise break and assume there are no more extensions. Also, this only happens if the submitted filename already exists. I think it would be very nice to be able to maintain reliable file extensions out of the box. This is important for many cases, including when a user downloads the file. Here is a sample mixin I've used in the past (keep in mind it does not query mimetypes, but that is trivial) class GetUUIDAvailableNameStorageMixin(object): def get_available_name(self, name): \"\"\" Returns a hex encoded uuid filename, using the extensions provided by the input filename, that's suitable for use in the target storage system. \"\"\" exts = [] root = ext = name while ext: root, ext = splitext(root) exts.insert(0, ext) name = \"%s%s\" % (uuid4().hex, \"\".join(exts)) return super(GetUUIDAvailableNameStorageMixin, self).get_available_name(name)", 1415354084.0], ["I think that if we can do it without introducing too much complexity, we should do it. Could you provide a patch with tests?", 1415365193.0], ["Assigned and marked accepted per previous comment.", 1415371525.0]], "created_at": "2024-02-19T16:25:45Z"}
{"repo": "django/django", "pull_number": 17880, "instance_id": "django__django-17880", "issue_numbers": ["35198"], "base_commit": "3cb1ba50ccde5b33d6bc5b7cc1ea22c8af3c2aa3", "patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex 675c4a5d4993..10a039af2a49 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -140,7 +140,7 @@ def get_facet_counts(self, pk_attname, filtered_qs):\n             if lookup_qs is not None:\n                 counts[f\"{i}__c\"] = models.Count(\n                     pk_attname,\n-                    filter=lookup_qs.query.where,\n+                    filter=models.Q(pk__in=lookup_qs),\n                 )\n         self.used_parameters[self.parameter_name] = original_value\n         return counts\ndiff --git a/docs/releases/5.0.3.txt b/docs/releases/5.0.3.txt\nindex b6e32b4590fb..9db83d013558 100644\n--- a/docs/releases/5.0.3.txt\n+++ b/docs/releases/5.0.3.txt\n@@ -29,3 +29,6 @@ Bugfixes\n * Fixed a regression in Django 5.0 that caused a crash when reloading a test\n   database and a base queryset for a base manager used ``prefetch_related()``\n   (:ticket:`35238`).\n+\n+* Fixed a bug in Django 5.0 where facet filters in the admin would crash on a\n+  ``SimpleListFilter`` using a queryset without primary keys (:ticket:`35198`).\n", "test_patch": "diff --git a/tests/admin_filters/tests.py b/tests/admin_filters/tests.py\nindex a3af966005bd..558164f75c82 100644\n--- a/tests/admin_filters/tests.py\n+++ b/tests/admin_filters/tests.py\n@@ -17,7 +17,7 @@\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.exceptions import ImproperlyConfigured\n-from django.db import connection\n+from django.db import connection, models\n from django.test import RequestFactory, SimpleTestCase, TestCase, override_settings\n \n from .models import Book, Bookmark, Department, Employee, ImprovedBook, TaggedItem\n@@ -154,6 +154,30 @@ def expected_parameters(self):\n         return [self.lookup_kwarg]\n \n \n+class DepartmentOwnershipListFilter(SimpleListFilter):\n+    title = \"Department Ownership\"\n+    parameter_name = \"department_ownership\"\n+\n+    def lookups(self, request, model_admin):\n+        return [\n+            (\"DEV_OWNED\", \"Owned by Dev Department\"),\n+            (\"OTHER\", \"Other\"),\n+        ]\n+\n+    def queryset(self, request, queryset):\n+        queryset = queryset.annotate(\n+            owned_book_count=models.Count(\n+                \"employee__department\",\n+                filter=models.Q(employee__department__code=\"DEV\"),\n+            ),\n+        )\n+\n+        if self.value() == \"DEV_OWNED\":\n+            return queryset.filter(owned_book_count__gt=0)\n+        elif self.value() == \"OTHER\":\n+            return queryset.filter(owned_book_count=0)\n+\n+\n class CustomUserAdmin(UserAdmin):\n     list_filter = (\"books_authored\", \"books_contributed\")\n \n@@ -229,6 +253,7 @@ class DecadeFilterBookAdmin(ModelAdmin):\n         (\"author__email\", AllValuesFieldListFilter),\n         (\"contributors\", RelatedOnlyFieldListFilter),\n         (\"category\", EmptyFieldListFilter),\n+        DepartmentOwnershipListFilter,\n     )\n     ordering = (\"-id\",)\n \n@@ -336,6 +361,14 @@ def setUpTestData(cls):\n         cls.bob = User.objects.create_user(\"bob\", \"bob@example.com\")\n         cls.lisa = User.objects.create_user(\"lisa\", \"lisa@example.com\")\n \n+        # Departments\n+        cls.dev = Department.objects.create(code=\"DEV\", description=\"Development\")\n+        cls.design = Department.objects.create(code=\"DSN\", description=\"Design\")\n+\n+        # Employees\n+        cls.john = Employee.objects.create(name=\"John Blue\", department=cls.dev)\n+        cls.jack = Employee.objects.create(name=\"Jack Red\", department=cls.design)\n+\n         # Books\n         cls.djangonaut_book = Book.objects.create(\n             title=\"Djangonaut: an art of living\",\n@@ -345,6 +378,7 @@ def setUpTestData(cls):\n             date_registered=cls.today,\n             availability=True,\n             category=\"non-fiction\",\n+            employee=cls.john,\n         )\n         cls.bio_book = Book.objects.create(\n             title=\"Django: a biography\",\n@@ -354,6 +388,7 @@ def setUpTestData(cls):\n             no=207,\n             availability=False,\n             category=\"fiction\",\n+            employee=cls.john,\n         )\n         cls.django_book = Book.objects.create(\n             title=\"The Django Book\",\n@@ -363,6 +398,7 @@ def setUpTestData(cls):\n             date_registered=cls.today,\n             no=103,\n             availability=True,\n+            employee=cls.jack,\n         )\n         cls.guitar_book = Book.objects.create(\n             title=\"Guitar for dummies\",\n@@ -374,14 +410,6 @@ def setUpTestData(cls):\n         )\n         cls.guitar_book.contributors.set([cls.bob, cls.lisa])\n \n-        # Departments\n-        cls.dev = Department.objects.create(code=\"DEV\", description=\"Development\")\n-        cls.design = Department.objects.create(code=\"DSN\", description=\"Design\")\n-\n-        # Employees\n-        cls.john = Employee.objects.create(name=\"John Blue\", department=cls.dev)\n-        cls.jack = Employee.objects.create(name=\"Jack Red\", department=cls.design)\n-\n     def assertChoicesDisplay(self, choices, expected_displays):\n         for choice, expected_display in zip(choices, expected_displays, strict=True):\n             self.assertEqual(choice[\"display\"], expected_display)\n@@ -905,6 +933,7 @@ class EmployeeAdminReverseRelationship(ModelAdmin):\n             filterspec.lookup_choices,\n             [\n                 (self.djangonaut_book.pk, \"Djangonaut: an art of living\"),\n+                (self.bio_book.pk, \"Django: a biography\"),\n                 (self.django_book.pk, \"The Django Book\"),\n             ],\n         )\n@@ -1407,6 +1436,8 @@ def _test_facets(self, modeladmin, request, query_string=None):\n             [\"All\", \"bob (1)\", \"lisa (1)\", \"??? (3)\"],\n             # EmptyFieldListFilter.\n             [\"All\", \"Empty (2)\", \"Not empty (2)\"],\n+            # SimpleListFilter with join relations.\n+            [\"All\", \"Owned by Dev Department (2)\", \"Other (2)\"],\n         ]\n         for filterspec, expected_displays in zip(filters, tests, strict=True):\n             with self.subTest(filterspec.__class__.__name__):\n@@ -1482,6 +1513,8 @@ def test_facets_filter(self):\n             [\"All\", \"bob (0)\", \"lisa (0)\", \"??? (2)\"],\n             # EmptyFieldListFilter.\n             [\"All\", \"Empty (0)\", \"Not empty (2)\"],\n+            # SimpleListFilter with join relations.\n+            [\"All\", \"Owned by Dev Department (2)\", \"Other (0)\"],\n         ]\n         for filterspec, expected_displays in zip(filters, tests, strict=True):\n             with self.subTest(filterspec.__class__.__name__):\n@@ -1525,6 +1558,8 @@ def test_facets_disallowed(self):\n             [\"All\", \"bob\", \"lisa\", \"???\"],\n             # EmptyFieldListFilter.\n             [\"All\", \"Empty\", \"Not empty\"],\n+            # SimpleListFilter with join relations.\n+            [\"All\", \"Owned by Dev Department\", \"Other\"],\n         ]\n         for filterspec, expected_displays in zip(filters, tests, strict=True):\n             with self.subTest(filterspec.__class__.__name__):\n", "problem_statement": "Facet filters crash for queryset with no ID.\nDescription\n\t \nDescription:\nOur Django application defines a relational model where Customer entities have a one-to-many relationship with Contracts, and Contract entities have a one-to-many relationship with Rental Items. A custom admin filter (RentalItemsFilter) was implemented on the Customer model to enable filtering based on the presence of active Rental Items.\nIssue:\nUsing the \"show counts\" feature within the RentalItemsFilter on the Customer admin page to display counts of devices (Rental Items) associated with each customer through contracts triggers an exception.\nSteps to Reproduce:\nLoad fixtures from fixture.json\nGo to the Django admin dashboard and navigate to the Customer model section.\nClick on \"Show counts\".\nTraceback:\nRequest Method: GET\nRequest URL: http://127.0.0.1:8000/admin/demo/customer/?_facets=True\nDjango Version: 5.0.2\nPython Version: 3.11.7\nInstalled Applications:\n['django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles',\n 'demo']\nInstalled Middleware:\n['django.middleware.security.SecurityMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\nTemplate error:\nIn template /django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/templates/admin/change_list.html, error at line 87\n no such column: demo_rentalitem.id\n 77 :\t\t\t <h2>{% translate 'Filter' %}</h2>\n 78 :\t\t\t {% if cl.is_facets_optional or cl.has_active_filters %}<div id=\"changelist-filter-extra-actions\">\n 79 :\t\t\t {% if cl.is_facets_optional %}<h3>\n 80 :\t\t\t\t {% if cl.add_facets %}<a href=\"{{ cl.remove_facet_link }}\" class=\"hidelink\">{% translate \"Hide counts\" %}</a>\n 81 :\t\t\t\t {% else %}<a href=\"{{ cl.add_facet_link }}\" class=\"viewlink\">{% translate \"Show counts\" %}</a>{% endif %}\n 82 :\t\t\t </h3>{% endif %}\n 83 :\t\t\t {% if cl.has_active_filters %}<h3>\n 84 :\t\t\t\t <a href=\"{{ cl.clear_all_filters_qs }}\">&#10006; {% translate \"Clear all filters\" %}</a>\n 85 :\t\t\t </h3>{% endif %}\n 86 :\t\t\t </div>{% endif %}\n 87 :\t\t\t {% for spec in cl.filter_specs %} {% admin_list_filter cl spec %} {% endfor %}\n 88 :\t\t </div>\n 89 :\t\t {% endif %}\n 90 :\t {% endblock %}\n 91 :\t </div>\n 92 : </div>\n 93 : {% endblock %}\n 94 : \nTraceback (most recent call last):\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 105, in _execute\n\treturn self.cursor.execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py\", line 329, in execute\n\treturn super().execute(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nThe above exception (no such column: demo_rentalitem.id) was the direct cause of the following exception:\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/core/handlers/base.py\", line 220, in _get_response\n\tresponse = response.render()\n\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/response.py\", line 114, in render\n\tself.content = self.rendered_content\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/response.py\", line 92, in rendered_content\n\treturn template.render(context, self._request)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/backends/django.py\", line 61, in render\n\treturn self.template.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 171, in render\n\treturn self._render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 163, in _render\n\treturn self.nodelist.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 159, in render\n\treturn compiled_parent._render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 163, in _render\n\treturn self.nodelist.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 159, in render\n\treturn compiled_parent._render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 163, in _render\n\treturn self.nodelist.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 65, in render\n\tresult = block.nodelist.render(context)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 65, in render\n\tresult = block.nodelist.render(context)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/defaulttags.py\", line 326, in render\n\treturn nodelist.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp>\n\treturn SafeString(\"\".join([node.render_annotated(context) for node in self]))\n\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/defaulttags.py\", line 242, in render\n\tnodelist.append(node.render_annotated(context))\n\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated\n\treturn self.render(context)\n\t\t ^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/library.py\", line 237, in render\n\toutput = self.func(*resolved_args, **resolved_kwargs)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/templatetags/admin_list.py\", line 505, in admin_list_filter\n\t\"choices\": list(spec.choices(cl)),\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/filters.py\", line 150, in choices\n\tfacet_counts = self.get_facet_queryset(changelist) if add_facets else None\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/filters.py\", line 87, in get_facet_queryset\n\treturn filtered_qs.aggregate(\n\t\t \n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/models/query.py\", line 604, in aggregate\n\treturn self.query.chain().get_aggregation(self.db, kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/models/sql/query.py\", line 615, in get_aggregation\n\tresult = compiler.execute_sql(SINGLE)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py\", line 1562, in execute_sql\n\tcursor.execute(sql, params)\n\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 122, in execute\n\treturn super().execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 79, in execute\n\treturn self._execute_with_wrappers(\n\t\t \n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 92, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 100, in _execute\n\twith self.db.wrap_database_errors:\n\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/utils.py\", line 91, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 105, in _execute\n\treturn self.cursor.execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py\", line 329, in execute\n\treturn super().execute(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nException Type: OperationalError at /admin/demo/customer/\nException Value: no such column: demo_rentalitem.id\n", "hints_text": [["Small reproducer", 1707976153.0], ["Thanks for the report. Regression in 868e2fcddae6720d5713924a785339d1665f1bb9.", 1708064840.0], ["Will try to look up and fix this.", 1708084345.0], ["Screenshot of Related List Filter on reported apps", 1708128098.0], ["Replying to Simon Alef: Description: Our Django application defines a relational model where Customer entities have a one-to-many relationship with Contracts, and Contract entities have a one-to-many relationship with Rental Items. A custom admin filter (RentalItemsFilter) was implemented on the Customer model to enable filtering based on the presence of active Rental Items. Issue: Using the \"show counts\" feature within the RentalItemsFilter on the Customer admin page to display counts of devices (Rental Items) associated with each customer through contracts triggers an exception. Steps to Reproduce: Load fixtures from fixture.json Go to the Django admin dashboard and navigate to the Customer model section. Click on \"Show counts\". Traceback: Request Method: GET Request URL: http://127.0.0.1:8000/admin/demo/customer/?_facets=True Django Version: 5.0.2 Python Version: 3.11.7 Installed Applications: ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'demo'] Installed Middleware: ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware'] Template error: In template /django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/templates/admin/change_list.html, error at line 87 no such column: demo_rentalitem.id 77 : <h2>{% translate 'Filter' %}</h2> 78 : {% if cl.is_facets_optional or cl.has_active_filters %}<div id=\"changelist-filter-extra-actions\"> 79 : {% if cl.is_facets_optional %}<h3> 80 : {% if cl.add_facets %}<a href=\"{{ cl.remove_facet_link }}\" class=\"hidelink\">{% translate \"Hide counts\" %}</a> 81 : {% else %}<a href=\"{{ cl.add_facet_link }}\" class=\"viewlink\">{% translate \"Show counts\" %}</a>{% endif %} 82 : </h3>{% endif %} 83 : {% if cl.has_active_filters %}<h3> 84 : <a href=\"{{ cl.clear_all_filters_qs }}\">&#10006; {% translate \"Clear all filters\" %}</a> 85 : </h3>{% endif %} 86 : </div>{% endif %} 87 : {% for spec in cl.filter_specs %} {% admin_list_filter cl spec %} {% endfor %} 88 : </div> 89 : {% endif %} 90 : {% endblock %} 91 : </div> 92 : </div> 93 : {% endblock %} 94 : Traceback (most recent call last): File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 105, in _execute return self.cursor.execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py\", line 329, in execute return super().execute(query, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The above exception (no such column: demo_rentalitem.id) was the direct cause of the following exception: File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/core/handlers/exception.py\", line 55, in inner response = get_response(request) ^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/core/handlers/base.py\", line 220, in _get_response response = response.render() ^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/response.py\", line 114, in render self.content = self.rendered_content ^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/response.py\", line 92, in rendered_content return template.render(context, self._request) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/backends/django.py\", line 61, in render return self.template.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 171, in render return self._render(context) ^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 163, in _render return self.nodelist.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp> return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 159, in render return compiled_parent._render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 163, in _render return self.nodelist.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp> return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 159, in render return compiled_parent._render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 163, in _render return self.nodelist.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp> return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 65, in render result = block.nodelist.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp> return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/loader_tags.py\", line 65, in render result = block.nodelist.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp> return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/defaulttags.py\", line 326, in render return nodelist.render(context) ^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in render return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 1000, in <listcomp> return SafeString(\"\".join([node.render_annotated(context) for node in self])) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/defaulttags.py\", line 242, in render nodelist.append(node.render_annotated(context)) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/base.py\", line 961, in render_annotated return self.render(context) ^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/template/library.py\", line 237, in render output = self.func(*resolved_args, **resolved_kwargs) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/templatetags/admin_list.py\", line 505, in admin_list_filter \"choices\": list(spec.choices(cl)), ^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/filters.py\", line 150, in choices facet_counts = self.get_facet_queryset(changelist) if add_facets else None ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/contrib/admin/filters.py\", line 87, in get_facet_queryset return filtered_qs.aggregate( File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/models/query.py\", line 604, in aggregate return self.query.chain().get_aggregation(self.db, kwargs) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/models/sql/query.py\", line 615, in get_aggregation result = compiler.execute_sql(SINGLE) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py\", line 1562, in execute_sql cursor.execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 122, in execute return super().execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 79, in execute return self._execute_with_wrappers( File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 92, in _execute_with_wrappers return executor(sql, params, many, context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 100, in _execute with self.db.wrap_database_errors: ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/utils.py\", line 91, in __exit__ raise dj_exc_value.with_traceback(traceback) from exc_value ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 105, in _execute return self.cursor.execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/django_bug_report/.venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py\", line 329, in execute return super().execute(query, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Exception Type: OperationalError at /admin/demo/customer/ Exception Value: no such column: demo_rentalitem.id Based on the image I attached above, I'm wondering if this behavior is as expected? If so, instead of using SimpleListFilter, it used RelatedFieldListFilter.", 1708128309.0], ["Hey, thanks a lot for tackling this! You're right, for this reproducer a RelatedFieldListFilter would be the way to go. For the reproducer we stripped some business logic where we are annotating and filtering on the queryset, so I think we have to go with subclassing a SimpleListFilter here.", 1708148075.0], ["Replying to Thomas Feldmann: Hey, thanks a lot for tackling this! You're right, for this reproducer a RelatedFieldListFilter would be the way to go. For the reproducer we stripped some business logic where we are annotating and filtering on the queryset, so I think we have to go with subclassing a SimpleListFilter here. ah, I understand. After I look at the reproducer, this reproducer intended to make filter categories like \"ACTIVE\" and \"-\" (not defined, data that are not in \"ACTIVE\"), right?", 1708155677.0], ["Yes, kind of. The full filter is something like this: class RentalItemsFilter(admin.SimpleListFilter): title = \"State\" parameter_name = \"rental_items_state\" def lookups(self, request, model_admin): return [ (\"ACTIVE\", \"Active\"), (\"CANCELLED\", \"Cancelled\"), ] def queryset(self, request, queryset): if not self.value(): return queryset queryset = queryset.annotate( active_rental_item_count=Count( \"contracts__rental_items\", filter=Q(contracts__rental_items__cancel_date__isnull=True), distinct=True, ), cancelled_rental_item_count=Count( \"contracts__rental_items\", filter=Q(contracts__rental_items__cancel_date__isnull=False), distinct=True, ), ) match self.value(): case \"ACTIVE\": return queryset.filter( active_rental_item_count__gt=0, cancelled_rental_item_count=0 ) case \"CANCELLED\": return queryset.filter( active_rental_item_count=0, cancelled_rental_item_count__gt=0 ) case _: raise ValueError(f\"Unknown value {self.value()}\")", 1708231320.0], ["Here is the PR: \u200bhttps://github.com/django/django/pull/17880", 1708338481.0]], "created_at": "2024-02-19T16:25:26Z"}
{"repo": "django/django", "pull_number": 17874, "instance_id": "django__django-17874", "issue_numbers": ["35232"], "base_commit": "28a3fbe0048883fdd5cefd6ffecb88e351121891", "patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 9b3106f67ef6..e63a81c2d8e7 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -395,9 +395,11 @@ def can_migrate(self, connection):\n             )\n         return True\n \n-    @property\n+    @cached_property\n     def verbose_name_raw(self):\n         \"\"\"Return the untranslated verbose name.\"\"\"\n+        if isinstance(self.verbose_name, str):\n+            return self.verbose_name\n         with override(None):\n             return str(self.verbose_name)\n \n", "test_patch": "diff --git a/tests/model_meta/models.py b/tests/model_meta/models.py\nindex 6da62be2ac26..bc69d61a59cd 100644\n--- a/tests/model_meta/models.py\n+++ b/tests/model_meta/models.py\n@@ -1,6 +1,7 @@\n from django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation\n from django.contrib.contenttypes.models import ContentType\n from django.db import models\n+from django.utils.translation import gettext_lazy as _\n \n \n class Relation(models.Model):\n@@ -124,6 +125,9 @@ class Person(BasePerson):\n     # GR fields\n     generic_relation_concrete = GenericRelation(Relation)\n \n+    class Meta:\n+        verbose_name = _(\"Person\")\n+\n \n class ProxyPerson(Person):\n     class Meta:\ndiff --git a/tests/model_meta/tests.py b/tests/model_meta/tests.py\nindex fe2f6e63da8d..7204a5e93a14 100644\n--- a/tests/model_meta/tests.py\n+++ b/tests/model_meta/tests.py\n@@ -222,6 +222,17 @@ def test_get_fields_only_searches_forward_on_apps_not_ready(self):\n             opts.apps.models_ready = True\n \n \n+class VerboseNameRawTests(SimpleTestCase):\n+    def test_string(self):\n+        # Clear cached property.\n+        Relation._meta.__dict__.pop(\"verbose_name_raw\", None)\n+        self.assertEqual(Relation._meta.verbose_name_raw, \"relation\")\n+\n+    def test_gettext(self):\n+        Person._meta.__dict__.pop(\"verbose_name_raw\", None)\n+        self.assertEqual(Person._meta.verbose_name_raw, \"Person\")\n+\n+\n class RelationTreeTests(SimpleTestCase):\n     all_models = (Relation, AbstractPerson, BasePerson, Person, ProxyPerson, Relating)\n \n", "problem_statement": "Cache Options.verbose_name_raw\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nAnother candidate for caching, like #35230, following the same system check profiling.\nThe Model._meta.verbose_name_raw property returns the stringified version of the verbose_name attribute whilst temporarily disabling translations. It is only used in django.contrib.auth for creating permission names.\nI found this property was taking ~15% of the total runtime for system checks on a project with 118 models. calls. Turning it into a cached_property and adding a no-translation fast path saves nearly all this cost, with the below results.\nBefore: 520 calls taking 10ms\nAfter: 105 calls taking ~0ms\n", "hints_text": [], "created_at": "2024-02-18T21:49:48Z"}
{"repo": "django/django", "pull_number": 17873, "instance_id": "django__django-17873", "issue_numbers": ["35230"], "base_commit": "7ba6c9edc50dc989fc5c306b541636249b952f93", "patch": "diff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\nindex 5c18d676f2b7..38a2bb9286ff 100644\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -359,7 +359,7 @@ def get_context_data(self, **kwargs):\n                 \"app_label\": rel.related_model._meta.app_label,\n                 \"object_name\": rel.related_model._meta.object_name,\n             }\n-            accessor = rel.get_accessor_name()\n+            accessor = rel.accessor_name\n             fields.append(\n                 {\n                     \"name\": \"%s.all\" % accessor,\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 8564e6366b17..1628e46d2c2c 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -254,7 +254,7 @@ def _check_clashes(self):\n         # (so `is_hidden` returns True), then there are no clashes to check\n         # and we can skip these fields.\n         rel_is_hidden = self.remote_field.is_hidden()\n-        rel_name = self.remote_field.get_accessor_name()  # i. e. \"model_set\"\n+        rel_name = self.remote_field.accessor_name  # i. e. \"model_set\"\n         rel_query_name = self.related_query_name()  # i. e. \"model\"\n         # i.e. \"app_label.Model.field\".\n         field_name = \"%s.%s\" % (opts.label, self.name)\n@@ -307,7 +307,7 @@ def _check_clashes(self):\n                 clash_field.related_model._meta.label,\n                 clash_field.field.name,\n             )\n-            if not rel_is_hidden and clash_field.get_accessor_name() == rel_name:\n+            if not rel_is_hidden and clash_field.accessor_name == rel_name:\n                 errors.append(\n                     checks.Error(\n                         f\"Reverse accessor '{rel_opts.object_name}.{rel_name}' \"\n@@ -323,7 +323,7 @@ def _check_clashes(self):\n                     )\n                 )\n \n-            if clash_field.get_accessor_name() == rel_query_name:\n+            if clash_field.accessor_name == rel_query_name:\n                 errors.append(\n                     checks.Error(\n                         \"Reverse query name for '%s' clashes with reverse query name \"\n@@ -893,7 +893,7 @@ def contribute_to_related_class(self, cls, related):\n         ):\n             setattr(\n                 cls._meta.concrete_model,\n-                related.get_accessor_name(),\n+                related.accessor_name,\n                 self.related_accessor_class(related),\n             )\n             # While 'limit_choices_to' might be a callable, simply pass\n@@ -1947,7 +1947,7 @@ def contribute_to_related_class(self, cls, related):\n         ):\n             setattr(\n                 cls,\n-                related.get_accessor_name(),\n+                related.accessor_name,\n                 ManyToManyDescriptor(self.remote_field, reverse=True),\n             )\n \ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex a8f298230ab2..9269cdb10082 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -524,7 +524,7 @@ def __get__(self, instance, cls=None):\n         if rel_obj is None:\n             raise self.RelatedObjectDoesNotExist(\n                 \"%s has no %s.\"\n-                % (instance.__class__.__name__, self.related.get_accessor_name())\n+                % (instance.__class__.__name__, self.related.accessor_name)\n             )\n         else:\n             return rel_obj\n@@ -564,7 +564,7 @@ def __set__(self, instance, value):\n                 % (\n                     value,\n                     instance._meta.object_name,\n-                    self.related.get_accessor_name(),\n+                    self.related.accessor_name,\n                     self.related.related_model._meta.object_name,\n                 )\n             )\n@@ -652,7 +652,7 @@ def __get__(self, instance, cls=None):\n     def _get_set_deprecation_msg_params(self):\n         return (\n             \"reverse side of a related set\",\n-            self.rel.get_accessor_name(),\n+            self.rel.accessor_name,\n         )\n \n     def __set__(self, instance, value):\n@@ -1019,7 +1019,7 @@ def _get_set_deprecation_msg_params(self):\n         return (\n             \"%s side of a many-to-many set\"\n             % (\"reverse\" if self.reverse else \"forward\"),\n-            self.rel.get_accessor_name() if self.reverse else self.field.name,\n+            self.rel.accessor_name if self.reverse else self.field.name,\n         )\n \n \ndiff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 144cce6142c7..9d357a3948d2 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -219,6 +219,10 @@ def set_field_name(self):\n         # example custom multicolumn joins currently have no remote field).\n         self.field_name = None\n \n+    @cached_property\n+    def accessor_name(self):\n+        return self.get_accessor_name()\n+\n     def get_accessor_name(self, model=None):\n         # This method encapsulates the logic that decides what name to give an\n         # accessor descriptor that retrieves related many-to-one or\n@@ -252,7 +256,7 @@ def get_cache_name(self):\n         Return the name of the cache key to use for storing an instance of the\n         forward model on the reverse model.\n         \"\"\"\n-        return self.get_accessor_name()\n+        return self.accessor_name\n \n \n class ManyToOneRel(ForeignObjectRel):\n", "test_patch": "diff --git a/tests/one_to_one/tests.py b/tests/one_to_one/tests.py\nindex 83644871feb4..280a8273fb18 100644\n--- a/tests/one_to_one/tests.py\n+++ b/tests/one_to_one/tests.py\n@@ -473,9 +473,7 @@ def test_hidden_accessor(self):\n         self.assertFalse(\n             hasattr(\n                 Target,\n-                HiddenPointer._meta.get_field(\n-                    \"target\"\n-                ).remote_field.get_accessor_name(),\n+                HiddenPointer._meta.get_field(\"target\").remote_field.accessor_name,\n             )\n         )\n \n", "problem_statement": "Cache ForeignObjectRel.get_accessor_name()\nDescription\n\t \nThis method computes the name for the accessor descriptor, used in many places. Its results are stable, unless the optional model parameter is provided, used only in forms.\nAdding a cached property accessor_name for the default value can speed up many code paths. In particular, I profiled the system checks for a project and found it was taking ~2% of the runtime, which can be basically eliminated with caching. Results:\nBefore: 6625 calls taking 2ms\nAfter: 9 calls taking ~0ms\n", "hints_text": [["This is worth doing but if anyone runs into issues with this change future when running data migrations the root cause is likely tickets such as #27737 until #29898 is completed. It is well known that operating from rendered models can cause all of sorts of issues with regard to caching of relationship attributes, it should be a reason to avoid using rendered models though and not to avoid caching relationship attributes. It will be interesting to see if this has a noticeable effect on \u200bthe benchmarks.", 1708258398.0]], "created_at": "2024-02-18T12:27:29Z"}
{"repo": "django/django", "pull_number": 17872, "instance_id": "django__django-17872", "issue_numbers": ["35229"], "base_commit": "7ba6c9edc50dc989fc5c306b541636249b952f93", "patch": "diff --git a/django/core/checks/urls.py b/django/core/checks/urls.py\nindex 34eff9671de9..aef2bfebb012 100644\n--- a/django/core/checks/urls.py\n+++ b/django/core/checks/urls.py\n@@ -1,6 +1,8 @@\n+import inspect\n from collections import Counter\n \n from django.conf import settings\n+from django.core.exceptions import ViewDoesNotExist\n \n from . import Error, Tags, Warning, register\n \n@@ -115,3 +117,43 @@ def E006(name):\n         \"The {} setting must end with a slash.\".format(name),\n         id=\"urls.E006\",\n     )\n+\n+\n+@register(Tags.urls)\n+def check_custom_error_handlers(app_configs, **kwargs):\n+    if not getattr(settings, \"ROOT_URLCONF\", None):\n+        return []\n+\n+    from django.urls import get_resolver\n+\n+    resolver = get_resolver()\n+\n+    errors = []\n+    # All handlers take (request, exception) arguments except handler500\n+    # which takes (request).\n+    for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:\n+        try:\n+            handler = resolver.resolve_error_handler(status_code)\n+        except (ImportError, ViewDoesNotExist) as e:\n+            path = getattr(resolver.urlconf_module, \"handler%s\" % status_code)\n+            msg = (\n+                \"The custom handler{status_code} view '{path}' could not be \"\n+                \"imported.\"\n+            ).format(status_code=status_code, path=path)\n+            errors.append(Error(msg, hint=str(e), id=\"urls.E008\"))\n+            continue\n+        signature = inspect.signature(handler)\n+        args = [None] * num_parameters\n+        try:\n+            signature.bind(*args)\n+        except TypeError:\n+            msg = (\n+                \"The custom handler{status_code} view '{path}' does not \"\n+                \"take the correct number of arguments ({args}).\"\n+            ).format(\n+                status_code=status_code,\n+                path=handler.__module__ + \".\" + handler.__qualname__,\n+                args=\"request, exception\" if num_parameters == 2 else \"request\",\n+            )\n+            errors.append(Error(msg, id=\"urls.E007\"))\n+    return errors\ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 3607c84228a6..5f9941dd65e8 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,7 +19,7 @@\n from django.conf import settings\n from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n-from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n+from django.core.exceptions import ImproperlyConfigured\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n@@ -518,40 +518,8 @@ def check(self):\n         messages = []\n         for pattern in self.url_patterns:\n             messages.extend(check_resolver(pattern))\n-        messages.extend(self._check_custom_error_handlers())\n         return messages or self.pattern.check()\n \n-    def _check_custom_error_handlers(self):\n-        messages = []\n-        # All handlers take (request, exception) arguments except handler500\n-        # which takes (request).\n-        for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:\n-            try:\n-                handler = self.resolve_error_handler(status_code)\n-            except (ImportError, ViewDoesNotExist) as e:\n-                path = getattr(self.urlconf_module, \"handler%s\" % status_code)\n-                msg = (\n-                    \"The custom handler{status_code} view '{path}' could not be \"\n-                    \"imported.\"\n-                ).format(status_code=status_code, path=path)\n-                messages.append(Error(msg, hint=str(e), id=\"urls.E008\"))\n-                continue\n-            signature = inspect.signature(handler)\n-            args = [None] * num_parameters\n-            try:\n-                signature.bind(*args)\n-            except TypeError:\n-                msg = (\n-                    \"The custom handler{status_code} view '{path}' does not \"\n-                    \"take the correct number of arguments ({args}).\"\n-                ).format(\n-                    status_code=status_code,\n-                    path=handler.__module__ + \".\" + handler.__qualname__,\n-                    args=\"request, exception\" if num_parameters == 2 else \"request\",\n-                )\n-                messages.append(Error(msg, id=\"urls.E007\"))\n-        return messages\n-\n     def _populate(self):\n         # Short-circuit if called recursively in this thread to prevent\n         # infinite recursion. Concurrent threads may call this at the same\n", "test_patch": "diff --git a/tests/check_framework/test_urls.py b/tests/check_framework/test_urls.py\nindex 4b6a4a6f3eb3..a31c5fd8568e 100644\n--- a/tests/check_framework/test_urls.py\n+++ b/tests/check_framework/test_urls.py\n@@ -2,6 +2,7 @@\n from django.core.checks.messages import Error, Warning\n from django.core.checks.urls import (\n     E006,\n+    check_custom_error_handlers,\n     check_url_config,\n     check_url_namespaces_unique,\n     check_url_settings,\n@@ -243,7 +244,7 @@ class CheckCustomErrorHandlersTests(SimpleTestCase):\n         ROOT_URLCONF=\"check_framework.urls.bad_function_based_error_handlers\",\n     )\n     def test_bad_function_based_handlers(self):\n-        result = check_url_config(None)\n+        result = check_custom_error_handlers(None)\n         self.assertEqual(len(result), 4)\n         for code, num_params, error in zip([400, 403, 404, 500], [2, 2, 2, 1], result):\n             with self.subTest(\"handler{}\".format(code)):\n@@ -264,7 +265,7 @@ def test_bad_function_based_handlers(self):\n         ROOT_URLCONF=\"check_framework.urls.bad_class_based_error_handlers\",\n     )\n     def test_bad_class_based_handlers(self):\n-        result = check_url_config(None)\n+        result = check_custom_error_handlers(None)\n         self.assertEqual(len(result), 4)\n         for code, num_params, error in zip([400, 403, 404, 500], [2, 2, 2, 1], result):\n             with self.subTest(\"handler%s\" % code):\n@@ -287,7 +288,7 @@ def test_bad_class_based_handlers(self):\n         ROOT_URLCONF=\"check_framework.urls.bad_error_handlers_invalid_path\"\n     )\n     def test_bad_handlers_invalid_path(self):\n-        result = check_url_config(None)\n+        result = check_custom_error_handlers(None)\n         paths = [\n             \"django.views.bad_handler\",\n             \"django.invalid_module.bad_handler\",\n@@ -318,14 +319,14 @@ def test_bad_handlers_invalid_path(self):\n         ROOT_URLCONF=\"check_framework.urls.good_function_based_error_handlers\",\n     )\n     def test_good_function_based_handlers(self):\n-        result = check_url_config(None)\n+        result = check_custom_error_handlers(None)\n         self.assertEqual(result, [])\n \n     @override_settings(\n         ROOT_URLCONF=\"check_framework.urls.good_class_based_error_handlers\",\n     )\n     def test_good_class_based_handlers(self):\n-        result = check_url_config(None)\n+        result = check_custom_error_handlers(None)\n         self.assertEqual(result, [])\n \n \n", "problem_statement": "Prevent repeated checks of custom error handler URLs\nDescription\n\t \nIn #29642 I added a system check for custom error handler URLs.\nI looked at a profile for running the system checks on a project and found this check function ran hundreds of times rather than once, totalling 1/4 of the time to run checks. The multiple runs occur because the check is defined on URLResolver, of which exist in a tree structure. Moving the check from URLResolver to a function in django.core.checks.urls ensures it runs only once.\nIn the profiled project with 279 URLs, this takes the checks from ~24ms to ~21ms, a ~13% saving.\n", "hints_text": [], "created_at": "2024-02-18T11:59:27Z"}
{"repo": "django/django", "pull_number": 17863, "instance_id": "django__django-17863", "issue_numbers": ["35224"], "base_commit": "57e6336f52ce8b1a27ada943b57aee58fba52b95", "patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ce731bf2ddd4..3b21c742b691 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -11,6 +11,7 @@\n from django.db import DEFAULT_DB_ALIAS, models, router, transaction\n from django.db.models import DO_NOTHING, ForeignObject, ForeignObjectRel\n from django.db.models.base import ModelBase, make_foreign_order_accessors\n+from django.db.models.fields import Field\n from django.db.models.fields.mixins import FieldCacheMixin\n from django.db.models.fields.related import (\n     ReverseManyToOneDescriptor,\n@@ -24,7 +25,7 @@\n from django.utils.functional import cached_property\n \n \n-class GenericForeignKey(FieldCacheMixin):\n+class GenericForeignKey(FieldCacheMixin, Field):\n     \"\"\"\n     Provide a generic many-to-one relation through the ``content_type`` and\n     ``object_id`` fields.\n@@ -33,35 +34,28 @@ class GenericForeignKey(FieldCacheMixin):\n     ForwardManyToOneDescriptor) by adding itself as a model attribute.\n     \"\"\"\n \n-    # Field flags\n-    auto_created = False\n-    concrete = False\n-    editable = False\n-    hidden = False\n-\n-    is_relation = True\n     many_to_many = False\n     many_to_one = True\n     one_to_many = False\n     one_to_one = False\n-    related_model = None\n-    remote_field = None\n \n     def __init__(\n         self, ct_field=\"content_type\", fk_field=\"object_id\", for_concrete_model=True\n     ):\n+        super().__init__(editable=False)\n         self.ct_field = ct_field\n         self.fk_field = fk_field\n         self.for_concrete_model = for_concrete_model\n-        self.editable = False\n-        self.rel = None\n-        self.column = None\n+        self.is_relation = True\n \n     def contribute_to_class(self, cls, name, **kwargs):\n-        self.name = name\n-        self.model = cls\n-        cls._meta.add_field(self, private=True)\n-        setattr(cls, name, self)\n+        super().contribute_to_class(cls, name, private_only=True, **kwargs)\n+        # GenericForeignKey is its own descriptor.\n+        setattr(cls, self.attname, self)\n+\n+    def get_attname_column(self):\n+        attname, column = super().get_attname_column()\n+        return attname, None\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"See corresponding method on Field\"\"\"\n@@ -77,10 +71,6 @@ def get_forward_related_filter(self, obj):\n             self.ct_field: ContentType.objects.get_for_model(obj).pk,\n         }\n \n-    def __str__(self):\n-        model = self.model\n-        return \"%s.%s\" % (model._meta.label, self.name)\n-\n     def check(self, **kwargs):\n         return [\n             *self._check_field_name(),\n@@ -88,18 +78,6 @@ def check(self, **kwargs):\n             *self._check_content_type_field(),\n         ]\n \n-    def _check_field_name(self):\n-        if self.name.endswith(\"_\"):\n-            return [\n-                checks.Error(\n-                    \"Field names must not end with an underscore.\",\n-                    obj=self,\n-                    id=\"fields.E001\",\n-                )\n-            ]\n-        else:\n-            return []\n-\n     def _check_object_id_field(self):\n         try:\n             self.model._meta.get_field(self.fk_field)\n", "test_patch": "", "problem_statement": "Make GenericForeignKey a subclass of Field\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nWhen introduced in bca5327b21eb2e3ee18292cbe532d6d0071201d8, GenericForeignKey was created as its own class. Since then, it has grown to resemble a field, particularly in fb48eb05816b1ac87d58696cdfe48be18c901f16.\nGenericForeignKey *not* being a Field leads to several issues:\nIt is added as a \u201cfield\u201d and returned by Model._meta.get_fields(), a type confusion \u200breflected in django-stubs.\nIt duplicates code, such as _check_field_name().\nIt misses methods like __repr__().\nI think we should make it a subclass of Field.\n(GenericRelation has always been a subclass of Field.)\n", "hints_text": [["I'm eager to see what the test suite says but it seems like a worth cleanup!", 1708104467.0]], "created_at": "2024-02-16T22:55:26Z"}
{"repo": "django/django", "pull_number": 17861, "instance_id": "django__django-17861", "issue_numbers": ["28011"], "base_commit": "d1be05b3e9209fd0787841c71a95819d81061187", "patch": "diff --git a/docs/ref/models/fields.txt b/docs/ref/models/fields.txt\nindex a29d06c00a8a..c6052123fc82 100644\n--- a/docs/ref/models/fields.txt\n+++ b/docs/ref/models/fields.txt\n@@ -2489,18 +2489,11 @@ Attributes for fields\n \n .. attribute:: Field.hidden\n \n-    Boolean flag that indicates if a field is used to back another non-hidden\n-    field's functionality (e.g. the ``content_type`` and ``object_id`` fields\n-    that make up a ``GenericForeignKey``). The ``hidden`` flag is used to\n-    distinguish what constitutes the public subset of fields on the model from\n-    all the fields on the model.\n-\n-    .. note::\n-\n-        :meth:`Options.get_fields()\n-        <django.db.models.options.Options.get_fields()>`\n-        excludes hidden fields by default. Pass in ``include_hidden=True`` to\n-        return hidden fields in the results.\n+    Boolean flag that indicates if a field is hidden and should not be returned\n+    by :meth:`Options.get_fields()\n+    <django.db.models.options.Options.get_fields>` by default. An example is\n+    the reverse field for a :class:`~django.db.models.ForeignKey` with a\n+    ``related_name`` that starts with ``'+'``.\n \n .. attribute:: Field.is_relation\n \ndiff --git a/docs/ref/models/meta.txt b/docs/ref/models/meta.txt\nindex a96c563d49ca..b3ec23f218e7 100644\n--- a/docs/ref/models/meta.txt\n+++ b/docs/ref/models/meta.txt\n@@ -79,10 +79,7 @@ Retrieving all field instances of a model\n \n     ``include_hidden``\n         ``False`` by default. If set to ``True``, ``get_fields()`` will include\n-        fields that are used to back other field's functionality. This will\n-        also include any fields that have a ``related_name`` (such\n-        as :class:`~django.db.models.ManyToManyField`, or\n-        :class:`~django.db.models.ForeignKey`) that start with a \"+\".\n+        :attr:`hidden fields <django.db.models.Field.hidden>`.\n \n     .. code-block:: pycon\n \n", "test_patch": "", "problem_statement": "Correct Field.hidden docs regarding what fields are hidden\nDescription\n\t \nThe \u200bField.hidden docs say, \"Boolean flag that indicates if a field is used to back another non-hidden field\u2019s functionality (e.g. the content_type and object_id fields that make up a GenericForeignKey).\" This seems inaccurate:\nfrom django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nclass TaggedItem(models.Model):\n\ttag = models.SlugField()\n\tcontent_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, related_name='tagged_items')\n\tobject_id = models.PositiveIntegerField()\n\tcontent_object = GenericForeignKey('content_type', 'object_id')\n>>> TaggedItem._meta.get_field('object_id')\n<django.db.models.fields.PositiveIntegerField: object_id>\n>>> TaggedItem._meta.get_field('content_type')\n<django.db.models.fields.related.ForeignKey: content_type>\n(object_id and content_type aren't hidden).\nThere's a related discussion in the \u200bOptions.get_fields() docs that also needs some correction.\nAnother thing I noticed is that Field.hidden is \u200bonly consulted for relational fields. Removing Field.hidden and GenericForeignKey.hidden doesn't result in any crash of get_fields() because those attributes are never consulted.\n", "hints_text": [], "created_at": "2024-02-16T22:04:12Z"}
{"repo": "django/django", "pull_number": 17860, "instance_id": "django__django-17860", "issue_numbers": ["35187"], "base_commit": "66e47ac69a7e71cf32eee312d05668d8f1ba24bb", "patch": "diff --git a/django/views/decorators/debug.py b/django/views/decorators/debug.py\nindex 7ea8a540de82..3b868bcf291a 100644\n--- a/django/views/decorators/debug.py\n+++ b/django/views/decorators/debug.py\n@@ -47,7 +47,6 @@ def decorator(func):\n \n             try:\n                 file_path = inspect.getfile(wrapped_func)\n-                _, first_file_line = inspect.getsourcelines(wrapped_func)\n             except TypeError:  # Raises for builtins or native functions.\n                 raise ValueError(\n                     f\"{func.__name__} cannot safely be wrapped by \"\n@@ -55,7 +54,10 @@ def decorator(func):\n                     \"Python file (not a builtin or from a native extension).\"\n                 )\n             else:\n-                key = hash(f\"{file_path}:{first_file_line}\")\n+                # A source file may not be available (e.g. in .pyc-only builds),\n+                # use the first line number instead.\n+                first_line_number = wrapped_func.__code__.co_firstlineno\n+                key = hash(f\"{file_path}:{first_line_number}\")\n \n             if variables:\n                 coroutine_functions_to_sensitive_variables[key] = variables\ndiff --git a/docs/releases/5.0.3.txt b/docs/releases/5.0.3.txt\nindex b433bf6f2fe7..e17fdd531f13 100644\n--- a/docs/releases/5.0.3.txt\n+++ b/docs/releases/5.0.3.txt\n@@ -20,3 +20,7 @@ Bugfixes\n   would prevent filtering against foreign keys using lookups like ``__isnull``\n   when the field was not included in :attr:`.ModelAdmin.list_filter`\n   (:ticket:`35173`).\n+\n+* Fixed a regression in Django 5.0 that caused a crash of\n+  ``@sensitive_variables`` and ``@sensitive_post_parameters`` decorators on\n+  functions loaded from ``.pyc`` files (:ticket:`35187`).\n", "test_patch": "", "problem_statement": "@sensitive_variables/sensitive_post_parameters decorators crash with .pyc-only builds.\nDescription\n\t \nSince upgrading django to version 5.0.1 (5.0 untested currently) in \u200bbuildroot (an embedded rootfs build toolkit) django stopped working correctly in the buildroot default configuration. By default buildroot compiles all installed python modules to .pyc files and removes the .py files.\nThere's been some discussion around this but the conclusion seems to be, that this is an officially supported way of running cpython: \u200bhttps://github.com/python/cpython/issues/95827\nHere's a test run output of creating a new django project and invoking manage.py from it inside a minmal buildroot created image: \u200bhttps://gitlab.com/buildroot.org/buildroot/-/jobs/6148209453#L181\nCreating the project works but manage.py fails with:\nTraceback (most recent call last):\n File \"/opt/testsite/./manage.py\", line 22, in <module>\n\tmain()\n File \"/opt/testsite/./manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"/usr/lib/python3.12/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n File \"/usr/lib/python3.12/site-packages/django/core/management/__init__.py\", line 416, in execute\n File \"/usr/lib/python3.12/site-packages/django/__init__.py\", line 24, in setup\n File \"/usr/lib/python3.12/site-packages/django/apps/registry.py\", line 91, in populate\n File \"/usr/lib/python3.12/site-packages/django/apps/config.py\", line 193, in create\n File \"/usr/lib/python3.12/importlib/__init__.py\", line 90, in import_module\n File \"<frozen importlib._bootstrap>\", line 1387, in _gcd_import\n File \"<frozen importlib._bootstrap>\", line 1360, in _find_and_load\n File \"<frozen importlib._bootstrap>\", line 1331, in _find_and_load_unlocked\n File \"<frozen importlib._bootstrap>\", line 935, in _load_unlocked\n File \"<frozen importlib._bootstrap_external>\", line 994, in exec_module\n File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n File \"/usr/lib/python3.12/site-packages/django/contrib/admin/__init__.py\", line 2, in <module>\n File \"/usr/lib/python3.12/site-packages/django/contrib/admin/filters.py\", line 12, in <module>\n File \"/usr/lib/python3.12/site-packages/django/contrib/admin/options.py\", line 33, in <module>\n File \"/usr/lib/python3.12/site-packages/django/contrib/auth/__init__.py\", line 96, in <module>\n File \"/usr/lib/python3.12/site-packages/django/views/decorators/debug.py\", line 50, in decorator\n File \"/usr/lib/python3.12/inspect.py\", line 1264, in getsourcelines\n File \"/usr/lib/python3.12/inspect.py\", line 1093, in findsource\nOSError: could not get source code\nThis seems to specifically fail somewhere in loading contrib.auth, if I remove (in a local test) both the 'django.contrib.admin' and 'django.contrib.auth' apps from the list of installed apps then manage.py starts to work correctly.\n", "hints_text": [["This was very likely introduced by \u200bhttps://github.com/django/django/pull/16831 I don't exactly understand what this is doing but inspect.getsourcelines(wrapped_func) will throw in case there's no corresponding source file (which we don't in a pyc only distribution). The question now is, can this be solved another way?", 1707748065.0], ["Hello Marcus, thank you for your report and for helping making Django better. I'm trying to triage this bug properly but I would like to understand a few things before making any further decision: In the CPython thread, while they say that source-les imports are supported, there seems to be a general pushback around it (\"we historically discourage them unless you have a pressing use-case\", \".pyc-only imports are CPython-specific\", \"that doesn't mean any 3rd party packages or other tools support a source-less mode of operation\"). You affirmed that \"this is an officially supported way of running cpython\", where do you read that exactly? While I can see a value and valid use cases for running Python in embedded systems, I'm not sure there are use cases for running a Django web server in an embedded system. Would you have examples for wanting to run Django in a \"minified\" rootfs? I'm trying to determine whether this report pertains to a specific need arising from a niche use case or if it applies to the broader ecosystem. Django is a framework designed to offer robust and accurate solutions for common scenarios.", 1707811075.0], ["This may be related to #32316, #30950 &co. If so William Schwartz was actively using _frozen apps_ so may be able to advise. (FWIW, if that's correct, and it is related, it's not clear Django really supports running frozen, although that would be a good to have)", 1707819643.0], ["I agree that what's happening here is the use (where the traceback shows) of \u200binspect.getsourcelines, the documentation of which says, \"An OSError is raised if the source code cannot be retrieved.\" I also agree that the problem started with \u200bhttps://github.com/django/django/pull/16831, which says, To persist the sensitive variables list for async functions, we can use a global dict with the hash of the filename and line number of the function as the key (more formally: hash(f\"{file_path}:{line_number}\") and the value is the tuple or sensitive variables (or __ALL__). Then, during traceback cleanup we can read this dict by reconstructing the same key with f_code.co_filename and f_code.co_firstlineno to lookup the relevant value in the dict. I don't have the bandwidth these days to offer an alternative solution. All I can say is that the implementation assumes the existence of a file path that Python does not guarantee exists. To be clear on this: Python does not guarantee that there is a source file or cache file associated with any object. (See discussion at #30950 and other linked tickets.) Modules without source files exist in *all* CPython instances because of the sys module, and in most CPython instances because of the frozen importlib submodules. They occur frequently in embedded instance of Python, e.g., when running code directly from pyc cache files (which I have always [back to 2010] understood was a fully supported solution) or using a compiler such as PyOxidizer, which I use. So a correct solution to whatever \u200bhttps://github.com/django/django/pull/16831 was trying to fix for async functions cannot rely on source files. I think what went wrong was essentially what comment:10:ticket:30950 warned of: I could be wrong but I believe that whatever we do to tackle this ticket, it's important ensure that file isn't added back by new contributions in the future. Ideally this shouldn't be a burden on reviewers, there should be a linting rule, or a test or something that ensures that any contributions following the resolution of this ticket isn't adding this back. Ideally there'd be a test run of Django in CI that runs in embedded form on an embedded project/app (whether cache-only, frozen, or PyOxidered or whatever). That would have caught this issue since __file__ isn't being directly used, just indirectly via inspect.getsourcelines. Unfortunately I don't have the time to do this myself. PS, I'm excited that someone else is using Django embedded! FWIW I've been successfully using Django 3.2.13 with PyOxidizer Python applications for awhile. However, I haven't embedded Django itself, which continues to exist in source form next to my applications, i.e., only my own application code is embedded in the PyOxidizer-generated binary, not Django itself. Moreover, we do not use the admin or auth contrib apps. That said, I would certainly prefer to embed Django one day. If I recall correctly, at the time I ran out of budget to work on this, the barrier to embedding Django for us was the loaddata command.", 1707833098.0], ["As far as I'm aware, the only way to fix this is to revert 38e391e95fe5258bc6d2467332dc9cd44ce6ba52.", 1707902010.0], ["As far as I'm aware, the only way to fix this is to revert I think there are alternatives, I don't really have time to explore them right now but: Use a different cache key, like swap the line number for the function name perhaps I think the code object stores the line numbers right? So perhaps there's a way to fetch the code object and get the line number that way. If the above commit is reverted I think we'd have to think about reverting other things that depend on it like \u200bhttps://github.com/django/django/pull/16636", 1707937718.0], ["Replying to Jon Janzen: I think there are alternatives, I don't really have time to explore them right now but: Use a different cache key, like swap the line number for the function name perhaps Great idea! Marcus, does it work for you? django/views/decorators/debug.py diff --git a/django/views/decorators/debug.py b/django/views/decorators/debug.py index 7ea8a540de..6540fc0651 100644 a b def sensitive_variables(*variables): 4747 4848 try: 4949 file_path = inspect.getfile(wrapped_func) 50 _, first_file_line = inspect.getsourcelines(wrapped_func) 5150 except TypeError: # Raises for builtins or native functions. 5251 raise ValueError( 5352 f\"{func.__name__} cannot safely be wrapped by \" \u2026 \u2026 def sensitive_variables(*variables): 5554 \"Python file (not a builtin or from a native extension).\" 5655 ) 5756 else: 58 key = hash(f\"{file_path}:{first_file_line}\") 57 first_line_number = wrapped_func.__code__.co_firstlineno 58 key = hash(f\"{file_path}:{first_line_number}\") 5959 6060 if variables: 6161 coroutine_functions_to_sensitive_variables[key] = variables", 1707952344.0], ["Replying to Mariusz Felisiak: Great idea! Marcus, does it work for you? django/views/decorators/debug.py diff --git a/django/views/decorators/debug.py b/django/views/decorators/debug.py index 7ea8a540de..6540fc0651 100644 a b def sensitive_variables(*variables): 4747 4848 try: 4949 file_path = inspect.getfile(wrapped_func) 50 _, first_file_line = inspect.getsourcelines(wrapped_func) 5150 except TypeError: # Raises for builtins or native functions. 5251 raise ValueError( 5352 f\"{func.__name__} cannot safely be wrapped by \" \u2026 \u2026 def sensitive_variables(*variables): 5554 \"Python file (not a builtin or from a native extension).\" 5655 ) 5756 else: 58 key = hash(f\"{file_path}:{first_file_line}\") 57 first_line_number = wrapped_func.__code__.co_firstlineno 58 key = hash(f\"{file_path}:{first_line_number}\") 5959 6060 if variables: 6161 coroutine_functions_to_sensitive_variables[key] = variables Thanks for the patch, I'll try and test this tomorrow!", 1708005705.0], ["Replying to Mariusz Felisiak: Great idea! Marcus, does it work for you? I can confirm, this fixes the Problem for us. :-)", 1708065350.0], ["I can confirm, this fixes the Problem for us. :-) Thanks for checking!", 1708065400.0], ["\u200bPR", 1708090938.0]], "created_at": "2024-02-16T19:32:30Z"}
{"repo": "django/django", "pull_number": 17855, "instance_id": "django__django-17855", "issue_numbers": ["34060"], "base_commit": "22285d366c9061a668003638613685f5a135a4c3", "patch": "diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex 541128ec5004..4f4658299d7e 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -347,9 +347,10 @@ def last_insert_id(self, cursor, table_name, pk_name):\n     def lookup_cast(self, lookup_type, internal_type=None):\n         if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"):\n             return \"UPPER(%s)\"\n-        if (\n-            lookup_type != \"isnull\" and internal_type in (\"BinaryField\", \"TextField\")\n-        ) or (lookup_type == \"exact\" and internal_type == \"JSONField\"):\n+        if lookup_type != \"isnull\" and internal_type in (\n+            \"BinaryField\",\n+            \"TextField\",\n+        ):\n             return \"DBMS_LOB.SUBSTR(%s)\"\n         return \"%s\"\n \ndiff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex 7bcc3564079a..5880390827ff 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -106,6 +106,13 @@ def django_test_expected_failures(self):\n                     \"test_group_by_nested_expression_with_params\",\n                 }\n             )\n+        if not is_psycopg3:\n+            expected_failures.update(\n+                {\n+                    \"constraints.tests.CheckConstraintTests.\"\n+                    \"test_validate_jsonfield_exact\",\n+                }\n+            )\n         return expected_failures\n \n     @cached_property\ndiff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 571e6e79f345..5a9c02e032a2 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -310,6 +310,11 @@ def process_rhs(self, compiler, connection):\n             rhs %= tuple(func)\n         return rhs, rhs_params\n \n+    def as_oracle(self, compiler, connection):\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs, rhs_params = self.process_rhs(compiler, connection)\n+        return f\"JSON_EQUAL({lhs}, {rhs})\", (*lhs_params, *rhs_params)\n+\n \n class JSONIContains(CaseInsensitiveMixin, lookups.IContains):\n     pass\n", "test_patch": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 55df5975de5c..40fdec6c406b 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -365,6 +365,20 @@ def test_validate_pk_field(self):\n             constraint_with_pk.validate(ChildModel, ChildModel(id=1, age=1))\n         constraint_with_pk.validate(ChildModel, ChildModel(pk=1, age=1), exclude={\"pk\"})\n \n+    @skipUnlessDBFeature(\"supports_json_field\")\n+    def test_validate_jsonfield_exact(self):\n+        data = {\"release\": \"5.0.2\", \"version\": \"stable\"}\n+        json_exact_constraint = models.CheckConstraint(\n+            check=models.Q(data__version=\"stable\"),\n+            name=\"only_stable_version\",\n+        )\n+        json_exact_constraint.validate(JSONFieldModel, JSONFieldModel(data=data))\n+\n+        data = {\"release\": \"5.0.2\", \"version\": \"not stable\"}\n+        msg = f\"Constraint \u201c{json_exact_constraint.name}\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            json_exact_constraint.validate(JSONFieldModel, JSONFieldModel(data=data))\n+\n \n class UniqueConstraintTests(TestCase):\n     @classmethod\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex ced3367f0020..52f5f289a12b 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2803,6 +2803,40 @@ class Meta:\n             DurationModel.objects.create(duration=datetime.timedelta(minutes=4))\n         DurationModel.objects.create(duration=datetime.timedelta(minutes=10))\n \n+    @skipUnlessDBFeature(\n+        \"supports_column_check_constraints\",\n+        \"can_introspect_check_constraints\",\n+        \"supports_json_field\",\n+    )\n+    @isolate_apps(\"schema\")\n+    def test_check_constraint_exact_jsonfield(self):\n+        class JSONConstraintModel(Model):\n+            data = JSONField()\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(JSONConstraintModel)\n+        self.isolated_local_models = [JSONConstraintModel]\n+        constraint_name = \"check_only_stable_version\"\n+        constraint = CheckConstraint(\n+            check=Q(data__version=\"stable\"),\n+            name=constraint_name,\n+        )\n+        JSONConstraintModel._meta.constraints = [constraint]\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(JSONConstraintModel, constraint)\n+        constraints = self.get_constraints(JSONConstraintModel._meta.db_table)\n+        self.assertIn(constraint_name, constraints)\n+        with self.assertRaises(IntegrityError), atomic():\n+            JSONConstraintModel.objects.create(\n+                data={\"release\": \"5.0.2dev\", \"version\": \"dev\"}\n+            )\n+        JSONConstraintModel.objects.create(\n+            data={\"release\": \"5.0.3\", \"version\": \"stable\"}\n+        )\n+\n     @skipUnlessDBFeature(\n         \"supports_column_check_constraints\", \"can_introspect_check_constraints\"\n     )\n", "problem_statement": "Creating CheckConstraint on JSONField with __exact lookup on key transforms crashes on Oracle.\nDescription\n\t \nCreating CheckConstraint on JSONField with __exact lookup on key transforms crashes on Oracle:\nclass Version(models.Model):\n\tmetadata = models.JSONField(null=True)\n\tclass Meta:\n\t\tconstraints = [\n\t\t\tmodels.CheckConstraint(\n\t\t\t\tcheck=models.Q(metadata__stage=\"stable\"),\n\t\t\t\tname=\"only_stable_version\",\n\t\t\t),\n\t\t]\nCrashes with:\n File \"/django/django/db/backends/oracle/base.py\", line 557, in execute\n\treturn self.cursor.execute(query, self._param_generator(params))\ncx_Oracle.DatabaseError: ORA-00904: \"DBMS_LOB\".\"SUBSTR\": invalid identifier\nDBMS_LOB.SUBSTR is unnecessary in this case.\nIt's not a regression.\n", "hints_text": [["Hi, I may be wrong as I am just new to this. The issue seems to be here \"/backends/oracle/operations.py\" def lookup_cast(self, lookup_type, internal_type=None): if lookup_type in (\"iexact\", \"icontains\", \"istartswith\", \"iendswith\"): return \"UPPER(%s)\" if internal_type == \"JSONField\" and lookup_type == \"exact\": return \"DBMS_LOB.SUBSTR(%s)\" return \"%s\" The condition might be if internal_type != \"JSONField\" and lookup_type == \"exact\": # if the type is not JSONField Can I pick this up?", 1680478664.0], ["Replying to r4ge: The condition might be if internal_type != \"JSONField\" and lookup_type == \"exact\": # if the type is not JSONField Can I pick this up? This is not a correct solution, as generally DBMS_LOB.SUBSTR() is necessary for JSONField. Do you have an Oracle setup? Unfortunately, you will not be able to work on this ticket without it.", 1680478999.0], ["No, Trying to setup the oracle once done will update if I found the solution.", 1680521092.0], ["Replying to r4ge: No, Trying to setup the oracle once done will update if I found the solution. How's it going with this issue? Have you got it done?", 1689322492.0], ["This error is because JSON is stored in NCLOB database type but according to Oracle documentation: Oracle Database does not support constraints on columns or attributes whose type is a LOB, with the following exception: NOT NULL constraints are supported for a LOB column or attribute. The exact check should be implemented other way to work with JSON in LOB. I am working on it.", 1705470347.0]], "created_at": "2024-02-14T17:53:27Z"}
{"repo": "django/django", "pull_number": 17854, "instance_id": "django__django-17854", "issue_numbers": ["35195"], "base_commit": "e6fa74f02068b2c112de41e9c785f31041668a64", "patch": "diff --git a/django/contrib/admindocs/templates/admin_doc/model_detail.html b/django/contrib/admindocs/templates/admin_doc/model_detail.html\nindex d4a380aa3898..1cbde0e44a2f 100644\n--- a/django/contrib/admindocs/templates/admin_doc/model_detail.html\n+++ b/django/contrib/admindocs/templates/admin_doc/model_detail.html\n@@ -3,7 +3,7 @@\n \n {% block extrahead %}\n {{ block.super }}\n-<style type=\"text/css\">\n+<style>\n .module table { width:100%; }\n .module table p { padding: 0; margin: 0; }\n </style>\ndiff --git a/django/views/templates/csrf_403.html b/django/views/templates/csrf_403.html\nindex 402a2c6cdd4e..85df032b1236 100644\n--- a/django/views/templates/csrf_403.html\n+++ b/django/views/templates/csrf_403.html\n@@ -4,7 +4,7 @@\n   <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n   <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n   <title>403 Forbidden</title>\n-  <style type=\"text/css\">\n+  <style>\n     html * { padding:0; margin:0; }\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\ndiff --git a/django/views/templates/technical_404.html b/django/views/templates/technical_404.html\nindex f2bfe49372bb..5c844b927954 100644\n--- a/django/views/templates/technical_404.html\n+++ b/django/views/templates/technical_404.html\n@@ -4,7 +4,7 @@\n   <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n   <title>Page not found at {{ request.path_info }}</title>\n   <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n-  <style type=\"text/css\">\n+  <style>\n     html * { padding:0; margin:0; }\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\ndiff --git a/django/views/templates/technical_500.html b/django/views/templates/technical_500.html\nindex 305c4655ada3..940beeeb85f0 100644\n--- a/django/views/templates/technical_500.html\n+++ b/django/views/templates/technical_500.html\n@@ -5,7 +5,7 @@\n   <meta name=\"robots\" content=\"NONE,NOARCHIVE\">\n   <title>{% if exception_type %}{{ exception_type }}{% else %}Report{% endif %}\n          {% if request %} at {{ request.path_info }}{% endif %}</title>\n-  <style type=\"text/css\">\n+  <style>\n     html * { padding:0; margin:0; }\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\n", "test_patch": "", "problem_statement": "Remove type=\"text/css\" from <style>.\nDescription\n\t \nThe attribute type=\"text/css\" is unnecessary for <style> and <link> tags in modern HTML. While the commit \u200bhttps://github.com/django/django/commit/7c4f3965098baad2396e24501e09237425a7bd6f removed many type=\"text/css\" attributes, there are still some of them.\n$ git grep 'type=\"text/css\"'\ndjango/contrib/admindocs/templates/admin_doc/model_detail.html:<style type=\"text/css\">\ndjango/views/templates/csrf_403.html: <style type=\"text/css\">\ndjango/views/templates/technical_404.html: <style type=\"text/css\">\ndjango/views/templates/technical_500.html: <style type=\"text/css\">\ndocs/releases/4.1.txt:* The ``type=\"text/css\"`` attribute is no longer included in ``<link>`` tags\ntests/utils_tests/files/strip_tags1.html:\t<link href=\"https://a248.e.akamai.net/assets.github.com/assets/github-f70e4783e00fd4884a9e5e651a43933c9881caa8.css\" media=\"all\" rel=\"stylesheet\" type=\"text/css\" />\ntests/utils_tests/files/strip_tags1.html:\t<link href=\"https://a248.e.akamai.net/assets.github.com/assets/github2-0d31290d073dea4d8671e2b8c747629aeb074034.css\" media=\"all\" rel=\"stylesheet\" type=\"text/css\" />\n", "hints_text": [["Replying to cosmicproc: The attribute type=\"text/css\" is unnecessary for <style> and <link> tags in modern HTML. While the commit \u200bhttps://github.com/django/django/commit/7c4f3965098baad2396e24501e09237425a7bd6f removed many type=\"text/css\" attributes, there are still some of them. $ git grep 'type=\"text/css\"' django/contrib/admindocs/templates/admin_doc/model_detail.html:<style type=\"text/css\"> django/views/templates/csrf_403.html: <style type=\"text/css\"> django/views/templates/technical_404.html: <style type=\"text/css\"> django/views/templates/technical_500.html: <style type=\"text/css\"> docs/releases/4.1.txt:* The ``type=\"text/css\"`` attribute is no longer included in ``<link>`` tags tests/utils_tests/files/strip_tags1.html: <link href=\"https://a248.e.akamai.net/assets.github.com/assets/github-f70e4783e00fd4884a9e5e651a43933c9881caa8.css\" media=\"all\" rel=\"stylesheet\" type=\"text/css\" /> tests/utils_tests/files/strip_tags1.html: <link href=\"https://a248.e.akamai.net/assets.github.com/assets/github2-0d31290d073dea4d8671e2b8c747629aeb074034.css\" media=\"all\" rel=\"stylesheet\" type=\"text/css\" /> Removing text/css from release notes and tests would be incorrect, so only these 4 cases are valid: django/contrib/admindocs/templates/admin_doc/model_detail.html:<style type=\"text/css\"> django/views/templates/csrf_403.html: <style type=\"text/css\"> django/views/templates/technical_404.html: <style type=\"text/css\"> django/views/templates/technical_500.html: <style type=\"text/css\"> Would you like to prepare a patch?", 1707898766.0], ["Sure. I didn't mean all of them anyway. I wanted to keep the output of the command intact.", 1707899649.0], ["\u200bPR", 1707900684.0], ["In c783e7a: Fixed #35195 -- Removed unnecessary type=\"text/css\" attributes from <style> tags.", 1707902930.0]], "created_at": "2024-02-14T14:50:05Z"}
{"repo": "django/django", "pull_number": 17848, "instance_id": "django__django-17848", "issue_numbers": ["35179"], "base_commit": "bf692b2fdcb5e55fafa5d3d38e286407eeef2ef4", "patch": "diff --git a/django/utils/inspect.py b/django/utils/inspect.py\nindex 81a15ed2db66..4e065f0347c1 100644\n--- a/django/utils/inspect.py\n+++ b/django/utils/inspect.py\n@@ -68,9 +68,7 @@ def func_accepts_var_args(func):\n \n def method_has_no_args(meth):\n     \"\"\"Return True if a method only accepts 'self'.\"\"\"\n-    count = len(\n-        [p for p in _get_callable_parameters(meth) if p.kind == p.POSITIONAL_OR_KEYWORD]\n-    )\n+    count = len([p for p in _get_callable_parameters(meth) if p.kind in ARG_KINDS])\n     return count == 0 if inspect.ismethod(meth) else count == 1\n \n \n", "test_patch": "diff --git a/tests/admin_docs/models.py b/tests/admin_docs/models.py\nindex a403259c6d49..b4ef84cabae4 100644\n--- a/tests/admin_docs/models.py\n+++ b/tests/admin_docs/models.py\n@@ -54,6 +54,12 @@ def rename_company(self, new_name):\n     def dummy_function(self, baz, rox, *some_args, **some_kwargs):\n         return some_kwargs\n \n+    def dummy_function_keyword_only_arg(self, *, keyword_only_arg):\n+        return keyword_only_arg\n+\n+    def all_kinds_arg_function(self, position_only_arg, /, arg, *, kwarg):\n+        return position_only_arg, arg, kwarg\n+\n     @property\n     def a_property(self):\n         return \"a_property\"\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex ef7fde1bf943..064ce27fb0b1 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -280,6 +280,8 @@ def test_methods_with_arguments(self):\n         self.assertContains(self.response, \"<h3>Methods with arguments</h3>\")\n         self.assertContains(self.response, \"<td>rename_company</td>\")\n         self.assertContains(self.response, \"<td>dummy_function</td>\")\n+        self.assertContains(self.response, \"<td>dummy_function_keyword_only_arg</td>\")\n+        self.assertContains(self.response, \"<td>all_kinds_arg_function</td>\")\n         self.assertContains(self.response, \"<td>suffix_company_name</td>\")\n \n     def test_methods_with_arguments_display_arguments(self):\n@@ -287,6 +289,7 @@ def test_methods_with_arguments_display_arguments(self):\n         Methods with arguments should have their arguments displayed.\n         \"\"\"\n         self.assertContains(self.response, \"<td>new_name</td>\")\n+        self.assertContains(self.response, \"<td>keyword_only_arg</td>\")\n \n     def test_methods_with_arguments_display_arguments_default_value(self):\n         \"\"\"\n@@ -302,6 +305,7 @@ def test_methods_with_multiple_arguments_display_arguments(self):\n         self.assertContains(\n             self.response, \"<td>baz, rox, *some_args, **some_kwargs</td>\"\n         )\n+        self.assertContains(self.response, \"<td>position_only_arg, arg, kwarg</td>\")\n \n     def test_instance_of_property_methods_are_displayed(self):\n         \"\"\"Model properties are displayed as fields.\"\"\"\n", "problem_statement": "Admindocs does not recognize methods containing positional-only arguments or keyword-only arguments as such\nDescription\n\t\t\n(last modified by David Sanders)\t\t\nGiven the model:\nclass Foo(Model):\n\tdef arg_kwarg_method(self, arg, kwarg=None): ...\n\tdef posarg_only_method(self, posarg, /): ...\n\tdef kwarg_only_method(self, *, kwarg): ...\n\tdef posarg_only_and_kwarg_only_method(self, posarg, /, *, kwarg): ...\n\tdef posarg_only_and_arg_and_kwarg_only_method(self, posarg, /, arg, *, kwarg): ...\nThe following are documented as methods:\narg_kwarg_method()\nposarg_only_method()\nposarg_only_and_kwarg_only_method()\nThe following are documented as attributes:\nkwarg_only_method()\nposarg_only_and_arg_and_kwarg_only_method()\n", "hints_text": [["Screenshot of admindocs treating some methods as attributes", 1707473158.0], ["After some investigation, this definitely seems like a valid issue. I did some initial debugging, and both methods are being detected as fields because the guard (in django/contrib/admindocs/views.py:ModelDetailView): elif ( method_has_no_args(func) and not func_accepts_kwargs(func) and not func_accepts_var_args(func) ): fields.append( { \"name\": func_name, \"data_type\": get_return_data_type(func_name), \"verbose\": verbose or \"\", } ) is being evaluated with these values: method_has_no_args(func)=True func_accepts_kwargs(func)=False func_accepts_var_args(func)=False The methods func_accepts_kwargs and func_accepts_var_args need to be updated to understand the * and / syntax (new since Python 3.8). David, would you like to prepare a patch? :-)", 1707480793.0], ["PR: \u200bhttps://github.com/django/django/pull/17848", 1707566757.0]], "created_at": "2024-02-10T16:54:17Z"}
{"repo": "django/django", "pull_number": 17844, "instance_id": "django__django-17844", "issue_numbers": ["35173"], "base_commit": "c783e7a3a0e411811aba83158d55e4f2f3091ac7", "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex d97597fe66dd..e93fdf40475d 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -475,24 +475,25 @@ def lookup_allowed(self, lookup, value, request=None):\n                 # Lookups on nonexistent fields are ok, since they're ignored\n                 # later.\n                 break\n+            if not prev_field or (\n+                prev_field.is_relation\n+                and field not in model._meta.parents.values()\n+                and field is not model._meta.auto_field\n+                and (\n+                    model._meta.auto_field is None\n+                    or part not in getattr(prev_field, \"to_fields\", [])\n+                )\n+                and (field.is_relation or not field.primary_key)\n+            ):\n+                relation_parts.append(part)\n             if not getattr(field, \"path_infos\", None):\n                 # This is not a relational field, so further parts\n                 # must be transforms.\n                 break\n-            if (\n-                not prev_field\n-                or (field.is_relation and field not in model._meta.parents.values())\n-                or (\n-                    prev_field.is_relation\n-                    and model._meta.auto_field is None\n-                    and part not in getattr(prev_field, \"to_fields\", [])\n-                )\n-            ):\n-                relation_parts.append(part)\n             prev_field = field\n             model = field.path_infos[-1].to_opts.model\n \n-        if not relation_parts or len(parts) == 1:\n+        if len(relation_parts) <= 1:\n             # Either a local field filter, or no fields at all.\n             return True\n         valid_lookups = {self.date_hierarchy}\ndiff --git a/docs/releases/5.0.3.txt b/docs/releases/5.0.3.txt\nindex 30e87127b0b7..b433bf6f2fe7 100644\n--- a/docs/releases/5.0.3.txt\n+++ b/docs/releases/5.0.3.txt\n@@ -15,3 +15,8 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a crash of ``Signal.asend()`` and\n   ``asend_robust()`` when all receivers were asynchronous functions\n   (:ticket:`35174`).\n+\n+* Fixed a regression in Django 5.0.1 where :meth:`.ModelAdmin.lookup_allowed`\n+  would prevent filtering against foreign keys using lookups like ``__isnull``\n+  when the field was not included in :attr:`.ModelAdmin.list_filter`\n+  (:ticket:`35173`).\n", "test_patch": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex fad2dfaa1cde..de8d26ae4657 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -174,7 +174,19 @@ class PlaceAdmin(ModelAdmin):\n             pass\n \n         ma = PlaceAdmin(Place, self.site)\n-        self.assertIs(ma.lookup_allowed(\"country\", \"1\", request), True)\n+\n+        cases = [\n+            (\"country\", \"1\"),\n+            (\"country__exact\", \"1\"),\n+            (\"country__id\", \"1\"),\n+            (\"country__id__exact\", \"1\"),\n+            (\"country__isnull\", True),\n+            (\"country__isnull\", False),\n+            (\"country__id__isnull\", False),\n+        ]\n+        for lookup, lookup_value in cases:\n+            with self.subTest(lookup=lookup):\n+                self.assertIs(ma.lookup_allowed(lookup, lookup_value, request), True)\n \n     @isolate_apps(\"modeladmin\")\n     def test_lookup_allowed_non_autofield_primary_key(self):\n", "problem_statement": "DisallowedModelAdminLookup raised when filtering with __isnull on a ForeignKey not listed in list_filters\nDescription\n\t \nA regression in Django 5.0 was previously reported and fixed, relating to filtering foreign keys in django-admin in the URL, when not manually declared in list_filters:\nhttps://code.djangoproject.com/ticket/35087\nThere is at least one more issue I'm still having, that is still problematic in Django 5.0.2:\nFiltering by whether or not a foreign key value is set also used to work for any foreign key on the model.\n/admin/core/invoice/?client__isnull=True\nIn Django 5.0.2 this provides an error similar to the error reported in 35087.\n", "hints_text": [["Thanks for the report. Regression in f80669d2f5a5f1db9e9b73ca893fefba34f955e7 (Django 5.0.1)", 1707347541.0], ["\u200bPR", 1707459930.0]], "created_at": "2024-02-09T12:24:55Z"}
{"repo": "django/django", "pull_number": 17839, "instance_id": "django__django-17839", "issue_numbers": ["35171"], "base_commit": "bc8471f0aac8f0c215b9471b594d159783bac19b", "patch": "diff --git a/django/views/templates/default_urlconf.html b/django/views/templates/default_urlconf.html\nindex f9e278006dc8..8a8a2b1e17ca 100644\n--- a/django/views/templates/default_urlconf.html\n+++ b/django/views/templates/default_urlconf.html\n@@ -2,251 +2,240 @@\n <!doctype html>\n {% get_current_language as LANGUAGE_CODE %}{% get_current_language_bidi as LANGUAGE_BIDI %}\n <html lang=\"{{ LANGUAGE_CODE|default:'en-us' }}\" dir=\"{{ LANGUAGE_BIDI|yesno:'rtl,ltr,auto' }}\">\n-    <head>\n-        <meta charset=\"utf-8\">\n-        <title>{% translate \"The install worked successfully! Congratulations!\" %}</title>\n-        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n-        <style>\n-          html {\n-            line-height: 1.15;\n-          }\n-          a {\n-            color: #19865C;\n-          }\n-          header {\n-            border-bottom: 1px solid #efefef;\n-          }\n-          body {\n-            max-width: 960px;\n-            color: #525252;\n-            font-family: \"Segoe UI\", system-ui, sans-serif;\n-            margin: 0 auto;\n-          }\n-          main {\n-            text-align: center;\n-          }\n-          h1, h2, h3, h4, h5, p, ul {\n-            padding: 0;\n-            margin: 0;\n-            font-weight: 400;\n-          }\n-          header {\n-            display: grid;\n-            grid-template-columns: auto auto;\n-            align-items: self-end;\n-            justify-content: space-between;\n-            gap: 7px;\n-            padding-top: 20px;\n-            padding-bottom: 10px;\n-          }\n-          .logo {\n-            font-weight: 700;\n-            font-size: 1.375rem;\n-            text-decoration: none;\n-          }\n-          .figure {\n-            margin-top: 19vh;\n-            max-width: 265px;\n-            position: relative;\n-            z-index: -9;\n-            overflow: visible;\n-          }\n-          .exhaust__line {\n-            animation: thrust 70ms 100 ease-in-out alternate;\n-          }\n-          .smoke {\n-            animation: smoke .1s 70 ease-in-out alternate;\n-          }\n-          @keyframes smoke {\n-            0% {\n-              transform: translate3d(-5px, 0, 0);\n-            }\n-            100% {\n-              transform: translate3d(5px, 0, 0);\n-            }\n-          }\n-          .flame {\n-            animation: burnInner2 .1s 70 ease-in-out alternate;\n-          }\n-          @keyframes burnInner2 {\n-            0% {\n-              transform: translate3d(0, 0, 0);\n-            }\n-            100% {\n-              transform: translate3d(0, 3px, 0);\n-            }\n-          }\n-          @keyframes thrust {\n-            0% {\n-              opacity: 1;\n-            }\n-            100% {\n-              opacity: .5;\n-            }\n-          }\n-          @media (prefers-reduced-motion: reduce) {\n-            .exhaust__line,\n-            .smoke,\n-            .flame {\n-              animation: none;\n-            }\n-          }\n-          h1 {\n-            font-size: 1.375rem;\n-            max-width: 32rem;\n-            margin: 5px auto 0;\n-          }\n-          main p {\n-            line-height: 1.25;\n-            max-width: 26rem;\n-            margin: 15px auto 0;\n-          }\n-          footer {\n-            display: grid;\n-            grid-template-columns: 1fr 1fr 1fr;\n-            gap: 5px;\n-            padding: 25px 0;\n-            position: fixed;\n-            box-sizing: border-box;\n-            left: 50%;\n-            bottom: 0;\n-            width: 960px;\n-            transform: translateX(-50%);\n-            transform-style: preserve-3d;\n-            border-top: 1px solid #efefef;\n-          }\n-          .option {\n-            display: grid;\n-            grid-template-columns: min-content 1fr;\n-            gap: 10px;\n-            box-sizing: border-box;\n-            text-decoration: none;\n-          }\n-          .option svg {\n-            width: 1.5rem;\n-            height: 1.5rem;\n-            fill: gray;\n-            border: 1px solid #d6d6d6;\n-            padding: 5px;\n-            border-radius: 100%;\n-          }\n-          .option p {\n-            font-weight: 300;\n-            line-height: 1.25;\n-            color: #525252;\n-            display: table;\n-          }\n-          .option .option__heading {\n-            color: #19865C;\n-            font-size: 1.25rem;\n-            font-weight: 400;\n-          }\n-          @media (max-width: 996px) {\n-            body, footer {\n-              max-width: 780px;\n-            }\n-          }\n-          @media (max-width: 800px) {\n-            footer {\n-              height: 100%;\n-              grid-template-columns: 1fr;\n-              gap: 60px;\n-              position: relative;\n-              padding: 25px;\n-            }\n-            .figure {\n-              margin-top: 10px;\n-            }\n-            main {\n-              padding: 0 25px;\n-            }\n-            main h1 {\n-              font-size: 1.25rem;\n-            }\n-            header {\n-              grid-template-columns: 1fr;\n-              padding-left: 20px;\n-              padding-right: 20px;\n-            }\n-            footer {\n-              width: 100%;\n-              margin-top: 50px;\n-            }\n-          }\n-          @media (min-width: 801px) and (max-height: 730px) {\n-            .figure {\n-              margin-top: 80px;\n-            }\n-          }\n-          @media (min-width: 801px) and (max-height: 600px) {\n-            footer {\n-              position: relative;\n-              margin: 135px auto 0;\n-            }\n-            .figure {\n-              margin-top: 50px;\n-            }\n-          }\n-          .sr-only {\n-            clip: rect(1px, 1px, 1px, 1px);\n-            clip-path: inset(50%);\n-            height: 1px;\n-            overflow: hidden;\n-            position: absolute;\n-            white-space: nowrap;\n-            width: 1px;\n-          }\n-        </style>\n-    </head>\n-    <body>\n-      <header>\n-          <a class=\"logo\" href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">\n-            django\n-          </a>\n-          <p>{% blocktranslate %}View <a href=\"https://docs.djangoproject.com/en/{{ version }}/releases/\" target=\"_blank\" rel=\"noopener\">release notes</a> for Django {{ version }}{% endblocktranslate %}</p>\n-      </header>\n-      <main>\n-        <svg class=\"figure\" viewBox=\"0 0 508 268\" aria-hidden=\"true\">\n-          <path d=\"M305.2 156.6c0 4.6-.5 9-1.6 13.2-2.5-4.4-5.6-8.4-9.2-12-4.6-4.6-10-8.4-16-11.2 2.8-11.2 4.5-22.9 5-34.6 1.8 1.4 3.5 2.9 5 4.5 10.5 10.3 16.8 24.5 16.8 40.1zm-75-10c-6 2.8-11.4 6.6-16 11.2-3.5 3.6-6.6 7.6-9.1 12-1-4.3-1.6-8.7-1.6-13.2 0-15.7 6.3-29.9 16.6-40.1 1.6-1.6 3.3-3.1 5.1-4.5.6 11.8 2.2 23.4 5 34.6z\" fill=\"#2E3B39\" fill-rule=\"nonzero\"/>\n-          <path d=\"M282.981 152.6c16.125-48.1 6.375-104-29.25-142.6-35.625 38.5-45.25 94.5-29.25 142.6h58.5z\" stroke=\"#FFF\" stroke-width=\"3.396\" fill=\"#6DDCBD\"/>\n-          <path d=\"M271 29.7c-4.4-10.6-9.9-20.6-16.6-29.7-6.7 9-12.2 19-16.6 29.7H271z\" stroke=\"#FFF\" stroke-width=\"3\" fill=\"#2E3B39\"/>\n-          <circle stroke=\"#FFF\" stroke-width=\"7\" fill=\"none\" cx=\"254.3\" cy=\"76.8\" r=\"12.2\"/>\n-          <path class=\"smoke\" d=\"M507.812 234.24c0-2.16-.632-4.32-1.58-6.24-3.318-6.72-11.85-11.52-21.804-11.52-1.106 0-2.212.12-3.318.24-.474-11.52-12.956-20.76-28.282-20.76-3.318 0-6.636.48-9.638 1.32-4.74-6.72-14.062-11.28-24.806-11.28-.79 0-1.58 0-2.37.12-.79 0-1.58-.12-2.37-.12-10.744 0-20.066 4.56-24.806 11.28a35.326 35.326 0 00-9.638-1.32c-15.642 0-28.282 9.6-28.282 21.48 0 1.32.158 2.76.474 3.96a26.09 26.09 0 00-4.424-.36c-8.058 0-15.01 3.12-19.118 7.8-3.476-1.68-7.742-2.76-12.324-2.76-12.008 0-21.804 7.08-22.752 15.96h-.158c-9.322 0-17.38 4.32-20.856 10.44-4.108-3.6-10.27-6-17.222-6h-1.264c-6.794 0-12.956 2.28-17.222 6-3.476-6.12-11.534-10.44-20.856-10.44h-.158c-.948-9-10.744-15.96-22.752-15.96-4.582 0-8.69.96-12.324 2.76-4.108-4.68-11.06-7.8-19.118-7.8-1.422 0-3.002.12-4.424.36.316-1.32.474-2.64.474-3.96 0-11.88-12.64-21.48-28.282-21.48-3.318 0-6.636.48-9.638 1.32-4.74-6.72-14.062-11.28-24.806-11.28-.79 0-1.58 0-2.37.12-.79 0-1.58-.12-2.37-.12-10.744 0-20.066 4.56-24.806 11.28a35.326 35.326 0 00-9.638-1.32c-15.326 0-27.808 9.24-28.282 20.76-1.106-.12-2.212-.24-3.318-.24-9.954 0-18.486 4.8-21.804 11.52-.948 1.92-1.58 4.08-1.58 6.24 0 4.8 2.528 9.12 6.636 12.36-.79 1.44-1.264 3.12-1.264 4.8 0 7.2 7.742 13.08 17.222 13.08h462.15c9.48 0 17.222-5.88 17.222-13.08 0-1.68-.474-3.36-1.264-4.8 4.582-3.24 7.11-7.56 7.11-12.36z\" fill=\"#E6E9EE\"/>\n-          <path fill=\"#6DDCBD\" d=\"M239 152h30v8h-30z\"/>\n-          <path class=\"exhaust__line\" fill=\"#E6E9EE\" d=\"M250 172h7v90h-7z\"/>\n-          <path class=\"flame\" d=\"M250.27 178.834l-5.32-8.93s-2.47-5.7 3.458-6.118h10.26s6.232.266 3.306 6.194l-5.244 8.93s-3.23 4.37-6.46 0v-.076z\" fill=\"#AA2247\"/>\n+  <head>\n+    <meta charset=\"utf-8\">\n+    <title>{% translate \"The install worked successfully! Congratulations!\" %}</title>\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+    <style>\n+      html {\n+        line-height: 1.15;\n+      }\n+      a {\n+        color: #092e20;\n+      }\n+      body {\n+        max-width: 960px;\n+        color: #525252;\n+        font-family: \"Segoe UI\", system-ui, sans-serif;\n+        margin: 0 auto;\n+      }\n+      main {\n+        text-align: center;\n+      }\n+      h1, h2, h3, h4, h5, p, ul {\n+        padding: 0;\n+        margin: 0;\n+        font-weight: 400;\n+      }\n+      .logo {\n+        background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 19.16 6.696'%3E%3Cg fill='rgb(9 46 32)'%3E%3Cpath d='m2.259 3.55e-8h1.048v4.851c-0.5377 0.1021-0.9324 0.1429-1.361 0.1429-1.279 0-1.946-0.5784-1.946-1.688 0-1.068 0.7078-1.763 1.804-1.763 0.1701 0 0.2994 0.01365 0.456 0.0544v-1.598zm0 2.442c-0.1225-0.04079-0.2246-0.0544-0.3539-0.0544-0.5308 0-0.8371 0.3267-0.8371 0.8983 0 0.5582 0.2927 0.8644 0.8303 0.8644 0.1156 0 0.211-0.00681 0.3607-0.02713z'/%3E%3Cpath d='m4.975 1.618v2.43c0 0.837-0.06125 1.239-0.245 1.586-0.1702 0.3335-0.3948 0.5444-0.8575 0.7758l-0.9732-0.4628c0.4628-0.2178 0.6874-0.4082 0.8303-0.701 0.1498-0.2994 0.1974-0.6466 0.1974-1.559v-2.069zm-1.048-1.613h1.048v1.075h-1.048z'/%3E%3Cpath d='m5.608 1.857c0.4628-0.2178 0.9052-0.313 1.388-0.313 0.5377 0 0.8915 0.1429 1.048 0.422 0.08842 0.1565 0.1156 0.3606 0.1156 0.7963v2.13c-0.4696 0.06814-1.062 0.1157-1.497 0.1157-0.8779 0-1.273-0.3063-1.273-0.9868 0-0.7351 0.524-1.075 1.81-1.184v-0.2314c0-0.1905-0.09527-0.2585-0.3607-0.2585-0.3879 0-0.8235 0.1088-1.232 0.3198v-0.8099zm1.64 1.667c-0.6942 0.06814-0.9188 0.177-0.9188 0.4492 0 0.2042 0.1293 0.2995 0.4152 0.2995 0.1566 0 0.2994-0.01365 0.5036-0.04759z'/%3E%3Cpath d='m8.671 1.782c0.6193-0.1634 1.13-0.2382 1.647-0.2382 0.5377 0 0.9256 0.1224 1.157 0.3607 0.2178 0.2245 0.2858 0.4695 0.2858 0.9936v2.055h-1.048v-2.015c0-0.4015-0.1361-0.5513-0.5104-0.5513-0.1429 0-0.2722 0.01365-0.4833 0.0749v2.491h-1.048v-3.171z'/%3E%3Cpath d='m12.17 5.525c0.3676 0.1905 0.735 0.279 1.123 0.279 0.6873 0 0.98-0.279 0.98-0.946v-0.0205c-0.2042 0.1021-0.4084 0.143-0.6805 0.143-0.9188 0-1.504-0.6058-1.504-1.565 0-1.191 0.8644-1.865 2.396-1.865 0.4492 0 0.8644 0.04759 1.368 0.1496l-0.3589 0.7561c-0.2791-0.05449-0.02235-0.00733-0.2332-0.02775v0.1089l0.01357 0.4423 0.0068 0.5717c0.0068 0.1428 0.0068 0.2858 0.01365 0.4287v0.2859c0 0.8984-0.07486 1.32-0.2994 1.667-0.3267 0.5105-0.8916 0.7623-1.695 0.7623-0.4084 0-0.7622-0.06129-1.13-0.2042v-0.9663zm2.083-3.131h-0.03398-0.0749c-0.2041-0.00681-0.4423 0.04759-0.6057 0.1497-0.2517 0.143-0.3811 0.4016-0.3811 0.7691 0 0.5241 0.2587 0.8235 0.7214 0.8235 0.1429 0 0.2586-0.02722 0.3947-0.06805v-0.3607c0-0.1225-0.0068-0.2587-0.0068-0.4016l-0.0068-0.4832-0.0068-0.3471v-0.08171z'/%3E%3Cpath d='m17.48 1.53c1.048 0 1.688 0.6602 1.688 1.729 0 1.096-0.6669 1.783-1.729 1.783-1.048 0-1.695-0.6601-1.695-1.722 4.4e-5 -1.103 0.667-1.79 1.736-1.79zm-0.0205 2.668c0.4016 0 0.6398-0.3335 0.6398-0.912 0-0.5716-0.2314-0.9119-0.6329-0.9119-0.4152 0-0.6535 0.3336-0.6535 0.9119 4.4e-5 0.5786 0.2383 0.912 0.6465 0.912z'/%3E%3C/g%3E%3C/svg%3E\");\n+        color: #092e20;\n+        background-position-x: center;\n+        background-repeat: no-repeat;\n+        font-size: 2rem;\n+        font-weight: 700;\n+        margin-top: 16px;\n+        overflow: hidden;\n+        text-decoration: none;\n+        text-indent: 100%;\n+        display: inline-block;\n+      }\n+      .figure {\n+        margin-top: 22vh;\n+        max-width: 265px;\n+        position: relative;\n+        z-index: -9;\n+        overflow: visible;\n+      }\n+      .exhaust__line {\n+        animation: thrust 70ms 100 ease-in-out alternate;\n+      }\n+      .smoke {\n+        animation: smoke .1s 70 ease-in-out alternate;\n+      }\n+      @keyframes smoke {\n+        0% {\n+          transform: translate3d(-5px, 0, 0);\n+        }\n+        100% {\n+          transform: translate3d(5px, 0, 0);\n+        }\n+      }\n+      .flame {\n+        animation: burnInner2 .1s 70 ease-in-out alternate;\n+      }\n+      @keyframes burnInner2 {\n+        0% {\n+          transform: translate3d(0, 0, 0);\n+        }\n+        100% {\n+          transform: translate3d(0, 3px, 0);\n+        }\n+      }\n+      @keyframes thrust {\n+        0% {\n+          opacity: 1;\n+        }\n+        100% {\n+          opacity: .5;\n+        }\n+      }\n+      @media (prefers-reduced-motion: reduce) {\n+        .exhaust__line,\n+        .smoke,\n+        .flame {\n+          animation: none;\n+        }\n+      }\n+      h1 {\n+        font-size: 1.375rem;\n+        max-width: 32rem;\n+        margin: 5px auto 0;\n+      }\n+      main p {\n+        line-height: 1.25;\n+        max-width: 26rem;\n+        margin: 15px auto 0;\n+      }\n+      footer {\n+        display: grid;\n+        grid-template-columns: 1fr 1fr 1fr;\n+        gap: 5px;\n+        padding: 25px 0;\n+        position: fixed;\n+        box-sizing: border-box;\n+        left: 50%;\n+        bottom: 0;\n+        width: 960px;\n+        transform: translateX(-50%);\n+        transform-style: preserve-3d;\n+        border-top: 1px solid #efefef;\n+      }\n+      .option {\n+        display: grid;\n+        grid-template-columns: min-content 1fr;\n+        gap: 10px;\n+        box-sizing: border-box;\n+        text-decoration: none;\n+      }\n+      .option svg {\n+        width: 1.5rem;\n+        height: 1.5rem;\n+        fill: gray;\n+        border: 1px solid #d6d6d6;\n+        padding: 5px;\n+        border-radius: 100%;\n+      }\n+      .option p {\n+        font-weight: 300;\n+        line-height: 1.25;\n+        color: #525252;\n+        display: table;\n+      }\n+      .option .option__heading {\n+        color: #092e20;\n+        font-size: 1.25rem;\n+        font-weight: 400;\n+      }\n+      @media (max-width: 996px) {\n+        body, footer {\n+          max-width: 780px;\n+        }\n+      }\n+      @media (max-width: 800px) {\n+        footer {\n+          height: 100%;\n+          grid-template-columns: 1fr;\n+          gap: 60px;\n+          position: relative;\n+          padding: 25px;\n+        }\n+        .figure {\n+          margin-top: 10px;\n+        }\n+        main {\n+          padding: 0 25px;\n+        }\n+        main h1 {\n+          font-size: 1.25rem;\n+        }\n+        footer {\n+          width: 100%;\n+          margin-top: 50px;\n+        }\n+      }\n+      @media (min-width: 801px) and (max-height: 730px) {\n+        .figure {\n+          margin-top: 80px;\n+        }\n+      }\n+      @media (min-width: 801px) and (max-height: 600px) {\n+        footer {\n+          position: relative;\n+          margin: 135px auto 0;\n+        }\n+        .figure {\n+          margin-top: 50px;\n+        }\n+      }\n+      .sr-only {\n+        clip: rect(1px, 1px, 1px, 1px);\n+        clip-path: inset(50%);\n+        height: 1px;\n+        overflow: hidden;\n+        position: absolute;\n+        white-space: nowrap;\n+        width: 1px;\n+      }\n+    </style>\n+  </head>\n+  <body>\n+    <main>\n+      <svg class=\"figure\" viewBox=\"0 0 508 268\" aria-hidden=\"true\">\n+        <path d=\"M305.2 156.6c0 4.6-.5 9-1.6 13.2-2.5-4.4-5.6-8.4-9.2-12-4.6-4.6-10-8.4-16-11.2 2.8-11.2 4.5-22.9 5-34.6 1.8 1.4 3.5 2.9 5 4.5 10.5 10.3 16.8 24.5 16.8 40.1zm-75-10c-6 2.8-11.4 6.6-16 11.2-3.5 3.6-6.6 7.6-9.1 12-1-4.3-1.6-8.7-1.6-13.2 0-15.7 6.3-29.9 16.6-40.1 1.6-1.6 3.3-3.1 5.1-4.5.6 11.8 2.2 23.4 5 34.6z\" fill=\"#2E3B39\" fill-rule=\"nonzero\"/>\n+        <path d=\"M282.981 152.6c16.125-48.1 6.375-104-29.25-142.6-35.625 38.5-45.25 94.5-29.25 142.6h58.5z\" stroke=\"#FFF\" stroke-width=\"3.396\" fill=\"#6DDCBD\"/>\n+        <path d=\"M271 29.7c-4.4-10.6-9.9-20.6-16.6-29.7-6.7 9-12.2 19-16.6 29.7H271z\" stroke=\"#FFF\" stroke-width=\"3\" fill=\"#2E3B39\"/>\n+        <circle stroke=\"#FFF\" stroke-width=\"7\" fill=\"none\" cx=\"254.3\" cy=\"76.8\" r=\"12.2\"/>\n+        <path class=\"smoke\" d=\"M507.812 234.24c0-2.16-.632-4.32-1.58-6.24-3.318-6.72-11.85-11.52-21.804-11.52-1.106 0-2.212.12-3.318.24-.474-11.52-12.956-20.76-28.282-20.76-3.318 0-6.636.48-9.638 1.32-4.74-6.72-14.062-11.28-24.806-11.28-.79 0-1.58 0-2.37.12-.79 0-1.58-.12-2.37-.12-10.744 0-20.066 4.56-24.806 11.28a35.326 35.326 0 00-9.638-1.32c-15.642 0-28.282 9.6-28.282 21.48 0 1.32.158 2.76.474 3.96a26.09 26.09 0 00-4.424-.36c-8.058 0-15.01 3.12-19.118 7.8-3.476-1.68-7.742-2.76-12.324-2.76-12.008 0-21.804 7.08-22.752 15.96h-.158c-9.322 0-17.38 4.32-20.856 10.44-4.108-3.6-10.27-6-17.222-6h-1.264c-6.794 0-12.956 2.28-17.222 6-3.476-6.12-11.534-10.44-20.856-10.44h-.158c-.948-9-10.744-15.96-22.752-15.96-4.582 0-8.69.96-12.324 2.76-4.108-4.68-11.06-7.8-19.118-7.8-1.422 0-3.002.12-4.424.36.316-1.32.474-2.64.474-3.96 0-11.88-12.64-21.48-28.282-21.48-3.318 0-6.636.48-9.638 1.32-4.74-6.72-14.062-11.28-24.806-11.28-.79 0-1.58 0-2.37.12-.79 0-1.58-.12-2.37-.12-10.744 0-20.066 4.56-24.806 11.28a35.326 35.326 0 00-9.638-1.32c-15.326 0-27.808 9.24-28.282 20.76-1.106-.12-2.212-.24-3.318-.24-9.954 0-18.486 4.8-21.804 11.52-.948 1.92-1.58 4.08-1.58 6.24 0 4.8 2.528 9.12 6.636 12.36-.79 1.44-1.264 3.12-1.264 4.8 0 7.2 7.742 13.08 17.222 13.08h462.15c9.48 0 17.222-5.88 17.222-13.08 0-1.68-.474-3.36-1.264-4.8 4.582-3.24 7.11-7.56 7.11-12.36z\" fill=\"#E6E9EE\"/>\n+        <path fill=\"#6DDCBD\" d=\"M239 152h30v8h-30z\"/>\n+        <path class=\"exhaust__line\" fill=\"#E6E9EE\" d=\"M250 172h7v90h-7z\"/>\n+        <path class=\"flame\" d=\"M250.27 178.834l-5.32-8.93s-2.47-5.7 3.458-6.118h10.26s6.232.266 3.306 6.194l-5.244 8.93s-3.23 4.37-6.46 0v-.076z\" fill=\"#AA2247\"/>\n+      </svg>\n+      <h1>{% translate \"The install worked successfully! Congratulations!\" %}</h1>\n+      <p>\n+        {% blocktranslate %}View <a href=\"https://docs.djangoproject.com/en/{{ version }}/releases/\" target=\"_blank\" rel=\"noopener\">release notes</a> for Django {{ version }}{% endblocktranslate %}\n+      </p>\n+      <p>{% blocktranslate %}You are seeing this page because <a href=\"https://docs.djangoproject.com/en/{{ version }}/ref/settings/#debug\" target=\"_blank\" rel=\"noopener\">DEBUG=True</a> is in your settings file and you have not configured any URLs.{% endblocktranslate %}</p>\n+      <a class=\"logo\" href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"noopener\">Django</a>\n+    </main>\n+    <footer>\n+      <a class=\"option\" href=\"https://docs.djangoproject.com/en/{{ version }}/\" target=\"_blank\" rel=\"noopener\">\n+        <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n+          <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6A4.997 4.997 0 017 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\"></path>\n         </svg>\n-        <h1>{% translate \"The install worked successfully! Congratulations!\" %}</h1>\n-        <p>{% blocktranslate %}You are seeing this page because <a href=\"https://docs.djangoproject.com/en/{{ version }}/ref/settings/#debug\" target=\"_blank\" rel=\"noopener\">DEBUG=True</a> is in your settings file and you have not configured any URLs.{% endblocktranslate %}</p>\n-      </main>\n-      <footer>\n-        <a class=\"option\" href=\"https://docs.djangoproject.com/en/{{ version }}/\" target=\"_blank\" rel=\"noopener\">\n-          <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n-            <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6A4.997 4.997 0 017 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\"></path>\n-          </svg>\n-          <p>\n-            <span class=\"option__heading\">{% translate \"Django Documentation\" %}</span><span class=\"sr-only\">.</span><br>\n-            {% translate 'Topics, references, &amp; how-to\u2019s' %}\n-          </p>\n-        </a>\n-        <a class=\"option\" href=\"https://docs.djangoproject.com/en/{{ version }}/intro/tutorial01/\" target=\"_blank\" rel=\"noopener\">\n-          <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n-            <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path>\n-          </svg>\n-          <p>\n-            <span class=\"option__heading\">{% translate \"Tutorial: A Polling App\" %}</span><span class=\"sr-only\">.</span><br>\n-            {% translate \"Get started with Django\" %}\n-          </p>\n-        </a>\n-        <a class=\"option\" href=\"https://www.djangoproject.com/community/\" target=\"_blank\" rel=\"noopener\">\n-          <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n-            <path d=\"M16.5 13c-1.2 0-3.07.34-4.5 1-1.43-.67-3.3-1-4.5-1C5.33 13 1 14.08 1 16.25V19h22v-2.75c0-2.17-4.33-3.25-6.5-3.25zm-4 4.5h-10v-1.25c0-.54 2.56-1.75 5-1.75s5 1.21 5 1.75v1.25zm9 0H14v-1.25c0-.46-.2-.86-.52-1.22.88-.3 1.96-.53 3.02-.53 2.44 0 5 1.21 5 1.75v1.25zM7.5 12c1.93 0 3.5-1.57 3.5-3.5S9.43 5 7.5 5 4 6.57 4 8.5 5.57 12 7.5 12zm0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 5.5c1.93 0 3.5-1.57 3.5-3.5S18.43 5 16.5 5 13 6.57 13 8.5s1.57 3.5 3.5 3.5zm0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z\"></path>\n-          </svg>\n-          <p>\n-            <span class=\"option__heading\">{% translate \"Django Community\" %}</span><span class=\"sr-only\">.</span><br>\n-            {% translate \"Connect, get help, or contribute\" %}\n-          </p>\n-        </a>\n-      </footer>\n-    </body>\n+        <p>\n+          <span class=\"option__heading\">{% translate \"Django Documentation\" %}</span><span class=\"sr-only\">.</span><br>\n+          {% translate 'Topics, references, &amp; how-to\u2019s' %}\n+        </p>\n+      </a>\n+      <a class=\"option\" href=\"https://docs.djangoproject.com/en/{{ version }}/intro/tutorial01/\" target=\"_blank\" rel=\"noopener\">\n+        <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n+          <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path>\n+        </svg>\n+        <p>\n+          <span class=\"option__heading\">{% translate \"Tutorial: A Polling App\" %}</span><span class=\"sr-only\">.</span><br>\n+          {% translate \"Get started with Django\" %}\n+        </p>\n+      </a>\n+      <a class=\"option\" href=\"https://www.djangoproject.com/community/\" target=\"_blank\" rel=\"noopener\">\n+        <svg viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n+          <path d=\"M16.5 13c-1.2 0-3.07.34-4.5 1-1.43-.67-3.3-1-4.5-1C5.33 13 1 14.08 1 16.25V19h22v-2.75c0-2.17-4.33-3.25-6.5-3.25zm-4 4.5h-10v-1.25c0-.54 2.56-1.75 5-1.75s5 1.21 5 1.75v1.25zm9 0H14v-1.25c0-.46-.2-.86-.52-1.22.88-.3 1.96-.53 3.02-.53 2.44 0 5 1.21 5 1.75v1.25zM7.5 12c1.93 0 3.5-1.57 3.5-3.5S9.43 5 7.5 5 4 6.57 4 8.5 5.57 12 7.5 12zm0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 5.5c1.93 0 3.5-1.57 3.5-3.5S18.43 5 16.5 5 13 6.57 13 8.5s1.57 3.5 3.5 3.5zm0-5.5c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z\"></path>\n+        </svg>\n+        <p>\n+          <span class=\"option__heading\">{% translate \"Django Community\" %}</span><span class=\"sr-only\">.</span><br>\n+          {% translate \"Connect, get help, or contribute\" %}\n+        </p>\n+      </a>\n+    </footer>\n+  </body>\n </html>\n", "test_patch": "", "problem_statement": "Update the django 'congrats' page that is shown after a fresh install of django\nDescription\n\t\t\n(last modified by Alexander Lazarevi\u0107)\t\t\nMost of this has been discussed in \u200bhttps://forum.djangoproject.com/t/changing-the-congrats-page/27557\nA demo of the page can be seen here: \u200bhttps://congrats.e11bits.com\nMainly this moves the header to the center of the page and adds a django logo in the center as well.\n", "hints_text": [["Sounds good, thanks.", 1707268207.0], ["PR \u200bhttps://github.com/django/django/pull/17839", 1707436600.0]], "created_at": "2024-02-09T05:34:47Z"}
{"repo": "django/django", "pull_number": 17837, "instance_id": "django__django-17837", "issue_numbers": ["35174"], "base_commit": "2f14c2cedc9c92373471c1f98a80c81ba299584a", "patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex 26ef09ce49ae..fe0e1fa59933 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -244,7 +244,9 @@ def sync_send():\n                 return responses\n \n         else:\n-            sync_send = list\n+\n+            async def sync_send():\n+                return []\n \n         responses, async_responses = await asyncio.gather(\n             sync_send(),\n@@ -380,7 +382,9 @@ def sync_send():\n                 return responses\n \n         else:\n-            sync_send = list\n+\n+            async def sync_send():\n+                return []\n \n         async def asend_and_wrap_exception(receiver):\n             try:\ndiff --git a/docs/releases/5.0.3.txt b/docs/releases/5.0.3.txt\nindex 384ce27fb737..30e87127b0b7 100644\n--- a/docs/releases/5.0.3.txt\n+++ b/docs/releases/5.0.3.txt\n@@ -11,3 +11,7 @@ Bugfixes\n \n * Fixed a regression in Django 5.0.2 where ``intcomma`` template filter could\n   return a leading comma for string representation of floats (:ticket:`35172`).\n+\n+* Fixed a bug in Django 5.0 that caused a crash of ``Signal.asend()`` and\n+  ``asend_robust()`` when all receivers were asynchronous functions\n+  (:ticket:`35174`).\n", "test_patch": "diff --git a/tests/signals/tests.py b/tests/signals/tests.py\nindex 5558778bbe90..6c90c6aa5216 100644\n--- a/tests/signals/tests.py\n+++ b/tests/signals/tests.py\n@@ -626,3 +626,19 @@ async def failing_async_handler(**kwargs):\n                 (async_handler, 1),\n             ],\n         )\n+\n+    async def test_asend_only_async_receivers(self):\n+        async_handler = AsyncHandler()\n+        signal = dispatch.Signal()\n+        signal.connect(async_handler)\n+\n+        result = await signal.asend(self.__class__)\n+        self.assertEqual(result, [(async_handler, 1)])\n+\n+    async def test_asend_robust_only_async_receivers(self):\n+        async_handler = AsyncHandler()\n+        signal = dispatch.Signal()\n+        signal.connect(async_handler)\n+\n+        result = await signal.asend_robust(self.__class__)\n+        self.assertEqual(result, [(async_handler, 1)])\n", "problem_statement": "asend() crashes when all receivers are asynchronous functions.\nDescription\n\t \nAbout this issue\nDjango 5 added support for asynchronous signals using the asend and asend_robust methods (\u200bhttps://docs.djangoproject.com/en/5.0/releases/5.0/#signals). If a signal is created with only asynchronous receivers, the asend (or asend_robust) function call will crash on this error:\nTraceback (most recent call last):\n File \"C:\\Users\\***-py3.11\\Lib\\site-packages\\asgiref\\sync.py\", line 534, in thread_handler\n\traise exc_info[1]\n File \"C:\\Users\\***-py3.11\\Lib\\site-packages\\django\\core\\handlers\\exception.py\", line 42, in inner\n\tresponse = await get_response(request)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\Users\\***-py3.11\\Lib\\site-packages\\asgiref\\sync.py\", line 534, in thread_handler\n\traise exc_info[1]\n File \"C:\\Users\\***-py3.11\\Lib\\site-packages\\django\\core\\handlers\\base.py\", line 253, in _get_response_async\n\tresponse = await wrapped_callback(\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^\n File \"C:\\work\\contrib\\django-asgi-lifespan\\signals.py\", line 47, in root\n\tawait my_signal.asend_robust(sender=None)\n File \"C:\\Users\\***-py3.11\\Lib\\site-packages\\django\\dispatch\\dispatcher.py\", line 393, in asend_robust\n\tresponses, async_responses = await asyncio.gather(\n\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^\n File \"C:\\Users\\***\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\asyncio\\tasks.py\", line 826, in gather\n\tif arg not in arg_to_fut:\n\t ^^^^^^^^^^^^^^^^^^^^^\nTypeError: unhashable type: 'list'\nSample project demonstrating the error\nCreate file signals.py with this content:\nimport asyncio\nimport logging\nfrom django import conf, http, urls\nfrom django.core.handlers.asgi import ASGIHandler\nfrom django.dispatch import Signal, receiver\nlogging.basicConfig(level=logging.DEBUG)\nconf.settings.configure(\n\tALLOWED_HOSTS=\"*\",\n\tROOT_URLCONF=__name__,\n\tLOGGING=None,\n)\napp = ASGIHandler()\nmy_signal = Signal()\n@receiver(my_signal)\nasync def my_async_receiver(sender, **kwargs):\n\tlogging.info(\"my_async_receiver::started\")\n\tawait asyncio.sleep(1)\n\tlogging.info(\"my_async_receiver::finished\")\nasync def root(request):\n\tlogging.info(\"root::started\")\n\tawait my_signal.asend_robust(sender=None)\n\tlogging.info(\"root::ended\")\n\treturn http.JsonResponse({\"message\": \"Hello World\"})\nurlpatterns = [urls.path(\"\", root)]\nRun this file:\nuvicorn signals:app --log-level=DEBUG --reload\nExecute the view:\ncurl -v http://127.0.0.1:8000\nSee the error.\nIf we modify the above code and add at least one synchronous receiver, everything will work fine.\nimport asyncio\nimport logging\nimport time\nfrom django import conf, http, urls\nfrom django.core.handlers.asgi import ASGIHandler\nfrom django.dispatch import Signal, receiver\nlogging.basicConfig(level=logging.DEBUG)\nconf.settings.configure(\n\tALLOWED_HOSTS=\"*\",\n\tROOT_URLCONF=__name__,\n\tLOGGING=None,\n)\napp = ASGIHandler()\nmy_signal = Signal()\n@receiver(my_signal)\nasync def my_async_receiver(sender, **kwargs):\n\tlogging.info(\"my_async_receiver::started\")\n\tawait asyncio.sleep(1)\n\tlogging.info(\"my_async_receiver::finished\")\n@receiver(my_signal)\ndef my_standard_receiver(sender, **kwargs):\n\tlogging.info(\"my_standard_receiver::started\")\n\ttime.sleep(1)\n\tlogging.info(\"my_standard_receiver::finished\")\nasync def root(request):\n\tlogging.info(\"root::started\")\n\tawait my_signal.asend_robust(sender=None)\n\tlogging.info(\"root::ended\")\n\treturn http.JsonResponse({\"message\": \"Hello World\"})\nurlpatterns = [urls.path(\"\", root)]\nOutput of uvicorn in this case:\nINFO:\t Started server process [80144]\nINFO:\t Waiting for application startup.\nINFO:\t ASGI 'lifespan' protocol appears unsupported.\nINFO:\t Application startup complete.\nINFO:root:root::started\nINFO:root:my_async_receiver::started\nINFO:root:my_standard_receiver::started\nINFO:root:my_standard_receiver::finished\nINFO:root:my_async_receiver::finished\nINFO:root:root::ended\nINFO:\t 127.0.0.1:60295 - \"GET / HTTP/1.1\" 200 OK\nProposed solution\nIn my opinion, the error is located here: \u200bhttps://github.com/django/django/blob/main/django/dispatch/dispatcher.py#L205-L259. The method groups receivers into synchronous and asynchronous (which is documented behavior). If there are no synchronous receivers, the type is assigned to the variable: sync_send = list, and I think this is where the problem lies. \nHere is my proposed fix to the method mentioned. If there are no synchronous receivers, an empty asynchronous function is used as placeholder. With this change, everything works as it should.\n\tasync def asend(self, sender, **named):\n\t\t\"\"\"\n\t\tSend signal from sender to all connected receivers in async mode.\n\t\tAll sync receivers will be wrapped by sync_to_async()\n\t\tIf any receiver raises an error, the error propagates back through\n\t\tsend, terminating the dispatch loop. So it's possible that all\n\t\treceivers won't be called if an error is raised.\n\t\tIf any receivers are synchronous, they are grouped and called behind a\n\t\tsync_to_async() adaption before executing any asynchronous receivers.\n\t\tIf any receivers are asynchronous, they are grouped and executed\n\t\tconcurrently with asyncio.gather().\n\t\tArguments:\n\t\t\tsender\n\t\t\t\tThe sender of the signal. Either a specific object or None.\n\t\t\tnamed\n\t\t\t\tNamed arguments which will be passed to receivers.\n\t\tReturn a list of tuple pairs [(receiver, response), ...].\n\t\t\"\"\"\n\t\tif (\n\t\t\tnot self.receivers\n\t\t\tor self.sender_receivers_cache.get(sender) is NO_RECEIVERS\n\t\t):\n\t\t\treturn []\n\t\tsync_receivers, async_receivers = self._live_receivers(sender)\n\t\tif sync_receivers:\n\t\t\t@sync_to_async\n\t\t\tdef sync_send():\n\t\t\t\tresponses = []\n\t\t\t\tfor receiver in sync_receivers:\n\t\t\t\t\tresponse = receiver(signal=self, sender=sender, **named)\n\t\t\t\t\tresponses.append((receiver, response))\n\t\t\t\treturn responses\n\t\telse:\n\t\t\tasync def sync_send():\n\t\t\t\treturn []\n\t\tresponses, async_responses = await asyncio.gather(\n\t\t\tsync_send(),\n\t\t\tasyncio.gather(\n\t\t\t\t*(\n\t\t\t\t\treceiver(signal=self, sender=sender, **named)\n\t\t\t\t\tfor receiver in async_receivers\n\t\t\t\t)\n\t\t\t),\n\t\t)\n\t\tresponses.extend(zip(async_receivers, async_responses))\n\t\treturn responses\n", "hints_text": [["Great catch! Thanks for the report. Would you like to prepare a patch and submit it via GitHub PR? (a regression test is required) Regression in e83a88566a71a2353cebc35992c110be0f8628af.", 1707346074.0], ["I'll do my best and prepare a PR. \ud83d\udcaa", 1707357233.0], ["Great, thanks!", 1707357397.0], ["\u200bPR", 1707366957.0], ["In 1b5338d: Fixed #35174 -- Fixed Signal.asend()/asend_robust() crash when all receivers are asynchronous. Regression in e83a88566a71a2353cebc35992c110be0f8628af.", 1707371783.0], ["In 761e913: [5.0.x] Fixed #35174 -- Fixed Signal.asend()/asend_robust() crash when all receivers are asynchronous. Regression in e83a88566a71a2353cebc35992c110be0f8628af. Backport of 1b5338d03ecc962af8ab4678426bc60b0672b8dd from main", 1707371821.0]], "created_at": "2024-02-08T09:17:50Z"}
{"repo": "django/django", "pull_number": 17836, "instance_id": "django__django-17836", "issue_numbers": ["35175"], "base_commit": "8b7ddd1b621e1396cf87c08faf11937732f09dcd", "patch": "diff --git a/django/utils/inspect.py b/django/utils/inspect.py\nindex 28418f73121e..81a15ed2db66 100644\n--- a/django/utils/inspect.py\n+++ b/django/utils/inspect.py\n@@ -16,13 +16,18 @@ def _get_callable_parameters(meth_or_func):\n     return _get_func_parameters(func, remove_first=is_method)\n \n \n+ARG_KINDS = frozenset(\n+    {\n+        inspect.Parameter.POSITIONAL_ONLY,\n+        inspect.Parameter.KEYWORD_ONLY,\n+        inspect.Parameter.POSITIONAL_OR_KEYWORD,\n+    }\n+)\n+\n+\n def get_func_args(func):\n     params = _get_callable_parameters(func)\n-    return [\n-        param.name\n-        for param in params\n-        if param.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD\n-    ]\n+    return [param.name for param in params if param.kind in ARG_KINDS]\n \n \n def get_func_full_args(func):\n", "test_patch": "diff --git a/tests/custom_migration_operations/operations.py b/tests/custom_migration_operations/operations.py\nindex f63f0b2a3ade..6bed8559d149 100644\n--- a/tests/custom_migration_operations/operations.py\n+++ b/tests/custom_migration_operations/operations.py\n@@ -68,6 +68,11 @@ def deconstruct(self):\n         )\n \n \n+class ArgsAndKeywordOnlyArgsOperation(ArgsKwargsOperation):\n+    def __init__(self, arg1, arg2, *, kwarg1, kwarg2):\n+        super().__init__(arg1, arg2, kwarg1=kwarg1, kwarg2=kwarg2)\n+\n+\n class ExpandArgsOperation(TestOperation):\n     serialization_expand_args = [\"arg\"]\n \ndiff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a2ac6738042a..891efd8ac748 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -152,6 +152,24 @@ def test_args_kwargs_signature(self):\n             \"),\",\n         )\n \n+    def test_keyword_only_args_signature(self):\n+        operation = (\n+            custom_migration_operations.operations.ArgsAndKeywordOnlyArgsOperation(\n+                1, 2, kwarg1=3, kwarg2=4\n+            )\n+        )\n+        buff, imports = OperationWriter(operation, indentation=0).serialize()\n+        self.assertEqual(imports, {\"import custom_migration_operations.operations\"})\n+        self.assertEqual(\n+            buff,\n+            \"custom_migration_operations.operations.ArgsAndKeywordOnlyArgsOperation(\\n\"\n+            \"    arg1=1,\\n\"\n+            \"    arg2=2,\\n\"\n+            \"    kwarg1=3,\\n\"\n+            \"    kwarg2=4,\\n\"\n+            \"),\",\n+        )\n+\n     def test_nested_args_signature(self):\n         operation = custom_migration_operations.operations.ArgsOperation(\n             custom_migration_operations.operations.ArgsOperation(1, 2),\ndiff --git a/tests/postgres_tests/test_operations.py b/tests/postgres_tests/test_operations.py\nindex ff344e3cb0c4..bc2ae4209690 100644\n--- a/tests/postgres_tests/test_operations.py\n+++ b/tests/postgres_tests/test_operations.py\n@@ -4,6 +4,7 @@\n \n from django.db import IntegrityError, NotSupportedError, connection, transaction\n from django.db.migrations.state import ProjectState\n+from django.db.migrations.writer import OperationWriter\n from django.db.models import CheckConstraint, Index, Q, UniqueConstraint\n from django.db.utils import ProgrammingError\n from django.test import modify_settings, override_settings\n@@ -393,6 +394,25 @@ def test_create_collation_alternate_provider(self):\n         self.assertEqual(len(captured_queries), 1)\n         self.assertIn(\"DROP COLLATION\", captured_queries[0][\"sql\"])\n \n+    def test_writer(self):\n+        operation = CreateCollation(\n+            \"sample_collation\",\n+            \"und-u-ks-level2\",\n+            provider=\"icu\",\n+            deterministic=False,\n+        )\n+        buff, imports = OperationWriter(operation, indentation=0).serialize()\n+        self.assertEqual(imports, {\"import django.contrib.postgres.operations\"})\n+        self.assertEqual(\n+            buff,\n+            \"django.contrib.postgres.operations.CreateCollation(\\n\"\n+            \"    name='sample_collation',\\n\"\n+            \"    locale='und-u-ks-level2',\\n\"\n+            \"    provider='icu',\\n\"\n+            \"    deterministic=False,\\n\"\n+            \"),\",\n+        )\n+\n \n @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific tests.\")\n class RemoveCollationTests(PostgreSQLTestCase):\n", "problem_statement": "Migration Operation CreateCollation kwargs are truncated when used with makemigrations --update\nDescription\n\t \nFor this case I have created an initial migration where a collation is the only operation\nI wish to merge my initial user model creation with the collation creation so this is done at the same time.\nInput (from 0001_collation.py)\n\t\tdjango.contrib.postgres.operations.CreateCollation(\n\t\t\tname='case_insensitive',\n\t\t\tprovider='icu',\n\t\t\tlocale='und-u-ks-level2',\n\t\t\tdeterministic=False,\n\t\t),\nExpected Output (0001_initial.py)\n\t\tdjango.contrib.postgres.operations.CreateCollation(\n\t\t\tname='case_insensitive',\n\t\t\tprovider='icu',\n\t\t\tlocale='und-u-ks-level2',\n\t\t\tdeterministic=False,\n\t\t),\nActual Output (0001_initial.py)\n\t\tdjango.contrib.postgres.operations.CreateCollation(\n\t\t\tname='case_insensitive',\n\t\t\tlocale='und-u-ks-level2',\n\t\t),\nPossibly caused by \ndjango/contrib/postgres/operations.py:169\n\tdef __init__(self, name, locale, *, provider=\"libc\", deterministic=True):\nWith \"provider\" and \"deterministic\" being keyword arguments only.\n", "hints_text": [["Thanks for the report \ud83c\udfc6 Confirmed that these kwargs disappear with an update.", 1707360025.0]], "created_at": "2024-02-08T08:58:36Z"}
{"repo": "django/django", "pull_number": 17833, "instance_id": "django__django-17833", "issue_numbers": ["35172"], "base_commit": "d79fba7d8e7bbcdf53535a14d57ead5a6863cd8d", "patch": "diff --git a/django/contrib/humanize/templatetags/humanize.py b/django/contrib/humanize/templatetags/humanize.py\nindex 2c26f8944a78..19000c185cb7 100644\n--- a/django/contrib/humanize/templatetags/humanize.py\n+++ b/django/contrib/humanize/templatetags/humanize.py\n@@ -80,6 +80,8 @@ def intcomma(value, use_l10n=True):\n     if match:\n         prefix = match[0]\n         prefix_with_commas = re.sub(r\"\\d{3}\", r\"\\g<0>,\", prefix[::-1])[::-1]\n+        # Remove a leading comma, if needed.\n+        prefix_with_commas = re.sub(r\"^(-?),\", r\"\\1\", prefix_with_commas)\n         result = prefix_with_commas + result[len(prefix) :]\n     return result\n \ndiff --git a/docs/releases/3.2.25.txt b/docs/releases/3.2.25.txt\nnew file mode 100644\nindex 000000000000..c84483f7832d\n--- /dev/null\n+++ b/docs/releases/3.2.25.txt\n@@ -0,0 +1,13 @@\n+===========================\n+Django 3.2.25 release notes\n+===========================\n+\n+*Expected March 4, 2024*\n+\n+Django 3.2.25 fixes a regression in 3.2.24.\n+\n+Bugfixes\n+========\n+\n+* Fixed a regression in Django 3.2.24 where ``intcomma`` template filter could\n+  return a leading comma for string representation of floats (:ticket:`35172`).\ndiff --git a/docs/releases/4.2.11.txt b/docs/releases/4.2.11.txt\nnew file mode 100644\nindex 000000000000..c59f131b1a77\n--- /dev/null\n+++ b/docs/releases/4.2.11.txt\n@@ -0,0 +1,13 @@\n+===========================\n+Django 4.2.11 release notes\n+===========================\n+\n+*Expected March 4, 2024*\n+\n+Django 4.2.11 fixes a regression in 4.2.10.\n+\n+Bugfixes\n+========\n+\n+* Fixed a regression in Django 4.2.10 where ``intcomma`` template filter could\n+  return a leading comma for string representation of floats (:ticket:`35172`).\ndiff --git a/docs/releases/5.0.3.txt b/docs/releases/5.0.3.txt\nindex 8fe37c9d9033..384ce27fb737 100644\n--- a/docs/releases/5.0.3.txt\n+++ b/docs/releases/5.0.3.txt\n@@ -9,4 +9,5 @@ Django 5.0.3 fixes several bugs in 5.0.2.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 5.0.2 where ``intcomma`` template filter could\n+  return a leading comma for string representation of floats (:ticket:`35172`).\ndiff --git a/docs/releases/index.txt b/docs/releases/index.txt\nindex 3f669748219b..01c2ac949d96 100644\n--- a/docs/releases/index.txt\n+++ b/docs/releases/index.txt\n@@ -43,6 +43,7 @@ versions of the documentation contain the release notes for any later releases.\n .. toctree::\n    :maxdepth: 1\n \n+   4.2.11\n    4.2.10\n    4.2.9\n    4.2.8\n@@ -97,6 +98,7 @@ versions of the documentation contain the release notes for any later releases.\n .. toctree::\n    :maxdepth: 1\n \n+   3.2.25\n    3.2.24\n    3.2.23\n    3.2.22\n", "test_patch": "diff --git a/tests/humanize_tests/tests.py b/tests/humanize_tests/tests.py\nindex a78bbadafd89..5e4f7f0ef7f1 100644\n--- a/tests/humanize_tests/tests.py\n+++ b/tests/humanize_tests/tests.py\n@@ -129,12 +129,18 @@ def test_intcomma(self):\n             -1234567.25,\n             \"100\",\n             \"-100\",\n+            \"100.1\",\n+            \"-100.1\",\n+            \"100.13\",\n+            \"-100.13\",\n             \"1000\",\n             \"-1000\",\n             \"10123\",\n             \"-10123\",\n             \"10311\",\n             \"-10311\",\n+            \"100000.13\",\n+            \"-100000.13\",\n             \"1000000\",\n             \"-1000000\",\n             \"1234567.1234567\",\n@@ -163,12 +169,18 @@ def test_intcomma(self):\n             \"-1,234,567.25\",\n             \"100\",\n             \"-100\",\n+            \"100.1\",\n+            \"-100.1\",\n+            \"100.13\",\n+            \"-100.13\",\n             \"1,000\",\n             \"-1,000\",\n             \"10,123\",\n             \"-10,123\",\n             \"10,311\",\n             \"-10,311\",\n+            \"100,000.13\",\n+            \"-100,000.13\",\n             \"1,000,000\",\n             \"-1,000,000\",\n             \"1,234,567.1234567\",\n", "problem_statement": "intcomma adds leading comma for string-based 3-digit number with at least 1 decimal place.\nDescription\n\t \nI'm running (4, 2, 10, 'final', 0)\nJust discovered that the patch to intcomma made in CVE-2024-24680 is causing numbers to appear with a leading comma when they're 3 digits (ie between 100 and 999) with at least 1 decimal place\nIn [34]: intcomma('111')\nOut[34]: '111'\nIn [35]: intcomma('111.1')\nOut[35]: ',111.1'\nIn [36]: intcomma('99.1')\nOut[36]: '99.1'\nIn [37]: intcomma('999.1')\nOut[37]: ',999.1'\nI note there doesn't appear to be a test in tests/humanize_tests/tests.py for the case of a string \"111.1\"\nI encountered this because I use {{ price|floatformat:2|intcomma }} in templates, thus floatformat is providing a string to intcomma.\n", "hints_text": [["Great catch! Thanks for the report. Regression in 55519d6cf8998fe4c8f5c8abffc2b10a7c3d14e9.", 1707259118.0], ["\u200bPR", 1707261585.0]], "created_at": "2024-02-07T05:19:20Z"}
{"repo": "django/django", "pull_number": 17831, "instance_id": "django__django-17831", "issue_numbers": ["35044"], "base_commit": "2d3531af234c4bc2b78f8b3d8e916ec3ac33fb24", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 9c8ab7bfa654..3d40bc42869a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -691,8 +691,8 @@ def refresh_from_db(self, using=None, fields=None, from_queryset=None):\n             self._prefetched_objects_cache = {}\n         else:\n             prefetched_objects_cache = getattr(self, \"_prefetched_objects_cache\", ())\n-            fields = list(fields)\n-            for field in list(fields):\n+            fields = set(fields)\n+            for field in fields.copy():\n                 if field in prefetched_objects_cache:\n                     del prefetched_objects_cache[field]\n                     fields.remove(field)\n@@ -717,11 +717,11 @@ def refresh_from_db(self, using=None, fields=None, from_queryset=None):\n         if fields is not None:\n             db_instance_qs = db_instance_qs.only(*fields)\n         elif deferred_fields:\n-            fields = [\n+            fields = {\n                 f.attname\n                 for f in self._meta.concrete_fields\n                 if f.attname not in deferred_fields\n-            ]\n+            }\n             db_instance_qs = db_instance_qs.only(*fields)\n \n         db_instance = db_instance_qs.get()\n@@ -740,12 +740,16 @@ def refresh_from_db(self, using=None, fields=None, from_queryset=None):\n \n         # Clear cached relations.\n         for field in self._meta.related_objects:\n-            if field.is_cached(self):\n+            if (fields is None or field.name in fields) and field.is_cached(self):\n                 field.delete_cached_value(self)\n \n         # Clear cached private relations.\n         for field in self._meta.private_fields:\n-            if field.is_relation and field.is_cached(self):\n+            if (\n+                (fields is None or field.name in fields)\n+                and field.is_relation\n+                and field.is_cached(self)\n+            ):\n                 field.delete_cached_value(self)\n \n         self._state.db = db_instance._state.db\n", "test_patch": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 8a304e9ace04..bda59d82fa85 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -966,6 +966,13 @@ def test_refresh_clears_reverse_related(self):\n         article.refresh_from_db()\n         self.assertTrue(hasattr(article, \"featured\"))\n \n+    def test_refresh_clears_reverse_related_explicit_fields(self):\n+        article = Article.objects.create(headline=\"Test\", pub_date=datetime(2024, 2, 4))\n+        self.assertFalse(hasattr(article, \"featured\"))\n+        FeaturedArticle.objects.create(article_id=article.pk)\n+        article.refresh_from_db(fields=[\"featured\"])\n+        self.assertTrue(hasattr(article, \"featured\"))\n+\n     def test_refresh_clears_one_to_one_field(self):\n         article = Article.objects.create(\n             headline=\"Parrot programs in Python\",\ndiff --git a/tests/contenttypes_tests/test_fields.py b/tests/contenttypes_tests/test_fields.py\nindex 5510f34cd09f..15f1dafd6318 100644\n--- a/tests/contenttypes_tests/test_fields.py\n+++ b/tests/contenttypes_tests/test_fields.py\n@@ -45,6 +45,18 @@ def test_clear_cached_generic_relation(self):\n         new_entity = answer.question\n         self.assertIsNot(old_entity, new_entity)\n \n+    def test_clear_cached_generic_relation_explicit_fields(self):\n+        question = Question.objects.create(text=\"question\")\n+        answer = Answer.objects.create(text=\"answer\", question=question)\n+        old_question_obj = answer.question\n+        # The reverse relation is not refreshed if not passed explicitly in\n+        # `fields`.\n+        answer.refresh_from_db(fields=[\"text\"])\n+        self.assertIs(answer.question, old_question_obj)\n+        answer.refresh_from_db(fields=[\"question\"])\n+        self.assertIsNot(answer.question, old_question_obj)\n+        self.assertEqual(answer.question, old_question_obj)\n+\n \n class GenericRelationTests(TestCase):\n     def test_value_to_string(self):\n@@ -55,6 +67,29 @@ def test_value_to_string(self):\n         self.assertCountEqual(result, [answer1.pk, answer2.pk])\n \n \n+class DeferredGenericRelationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.question = Question.objects.create(text=\"question\")\n+        cls.answer = Answer.objects.create(text=\"answer\", question=cls.question)\n+\n+    def test_defer_not_clear_cached_private_relations(self):\n+        obj = Answer.objects.defer(\"text\").get(pk=self.answer.pk)\n+        with self.assertNumQueries(1):\n+            obj.question\n+        obj.text  # Accessing a deferred field.\n+        with self.assertNumQueries(0):\n+            obj.question\n+\n+    def test_only_not_clear_cached_private_relations(self):\n+        obj = Answer.objects.only(\"content_type\", \"object_id\").get(pk=self.answer.pk)\n+        with self.assertNumQueries(1):\n+            obj.question\n+        obj.text  # Accessing a deferred field.\n+        with self.assertNumQueries(0):\n+            obj.question\n+\n+\n class GetPrefetchQuerySetDeprecation(TestCase):\n     def test_generic_relation_warning(self):\n         Question.objects.create(text=\"test\")\ndiff --git a/tests/defer/models.py b/tests/defer/models.py\nindex 6de2e2af9751..560e54c8c079 100644\n--- a/tests/defer/models.py\n+++ b/tests/defer/models.py\n@@ -19,6 +19,14 @@ def __str__(self):\n         return self.name\n \n \n+class PrimaryOneToOne(models.Model):\n+    name = models.CharField(max_length=50)\n+    value = models.CharField(max_length=50)\n+    related = models.OneToOneField(\n+        Secondary, models.CASCADE, related_name=\"primary_o2o\"\n+    )\n+\n+\n class Child(Primary):\n     pass\n \ndiff --git a/tests/defer/tests.py b/tests/defer/tests.py\nindex c7eb03dc8afd..3945b667bad5 100644\n--- a/tests/defer/tests.py\n+++ b/tests/defer/tests.py\n@@ -6,6 +6,7 @@\n     Child,\n     ChildProxy,\n     Primary,\n+    PrimaryOneToOne,\n     RefreshPrimaryProxy,\n     Secondary,\n     ShadowChild,\n@@ -326,3 +327,28 @@ def test_only_select_related_raises_invalid_query(self):\n         )\n         with self.assertRaisesMessage(FieldError, msg):\n             Primary.objects.only(\"name\").select_related(\"related\")[0]\n+\n+\n+class DeferredRelationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.secondary = Secondary.objects.create(first=\"a\", second=\"b\")\n+        cls.primary = PrimaryOneToOne.objects.create(\n+            name=\"Bella\", value=\"Baxter\", related=cls.secondary\n+        )\n+\n+    def test_defer_not_clear_cached_relations(self):\n+        obj = Secondary.objects.defer(\"first\").get(pk=self.secondary.pk)\n+        with self.assertNumQueries(1):\n+            obj.primary_o2o\n+        obj.first  # Accessing a deferred field.\n+        with self.assertNumQueries(0):\n+            obj.primary_o2o\n+\n+    def test_only_not_clear_cached_relations(self):\n+        obj = Secondary.objects.only(\"first\").get(pk=self.secondary.pk)\n+        with self.assertNumQueries(1):\n+            obj.primary_o2o\n+        obj.second  # Accessing a deferred field.\n+        with self.assertNumQueries(0):\n+            obj.primary_o2o\n", "problem_statement": "Accessing a deferred field clears reverse relations\nDescription\n\t \nDeferredAttribute.__get__ calls Model.refresh_from_db() to load the deferred field. Whilst refresh_from_db() does load the intended field, it also clears a lot of cached data, including reverse relations. This can causes extra queries when those relations are accessed before and after a deferred field. \nFor example, take these models:\nclass Book(models.Model):\n\ttitle = models.TextField()\n\t...\nclass BookText(models.Model):\n\tbook = models.OneToOneField(Book, on_delete=models.CASCADE)\n\ttext = models.TextField()\nWith query debug logging on, we can see that a second access to booktext after accessing the deferred title causes an unnecessary extra query:\nIn [1]: from example.models import *\nIn [2]: b=Book.objects.defer('title').earliest('id')\n(0.000) SELECT \"example_book\".\"id\", \"example_book\".\"author_id\" FROM \"example_book\" ORDER BY \"example_book\".\"id\" ASC LIMIT 1; args=(); alias=default\nIn [3]: b.booktext\n(0.000) SELECT \"example_booktext\".\"id\", \"example_booktext\".\"book_id\", \"example_booktext\".\"text\" FROM \"example_booktext\" WHERE \"example_booktext\".\"book_id\" = 1 LIMIT 21; args=(1,); alias=default\nOut[3]: <BookText: BookText object (1)>\nIn [4]: b.title\n(0.000) SELECT \"example_book\".\"id\", \"example_book\".\"title\" FROM \"example_book\" WHERE \"example_book\".\"id\" = 1 LIMIT 21; args=(1,); alias=default\nOut[4]: 'A 1'\nIn [5]: b.booktext\n(0.000) SELECT \"example_booktext\".\"id\", \"example_booktext\".\"book_id\", \"example_booktext\".\"text\" FROM \"example_booktext\" WHERE \"example_booktext\".\"book_id\" = 1 LIMIT 21; args=(1,); alias=default\nOut[5]: <BookText: BookText object (1)>\nThis is due to refresh_from_db() clearing the reverse-related object cache.\nSpotted whilst working on #28586. My implementation for that will probably fix this issue, but I thought it best to report this separately.\n", "hints_text": [["Feels like a bug to me. When refresh_from_db(fields) is specified it should likely not clear reverse relationships and I think the same can be said about private fields. Regression in a7b5ad8b19a08d7d57302ece74f6e26d2887fd9f #27846 for reverse relations and possibly 123b1d3fcf79f091573c40be6da7113a6ef35b62 #34137 for private fields. The private field situation is more complex though as they might be composed of other fields (e.g. GenericForeignKey) but the field APIs doesn't expose a generic way of introspecting that so I would assume we'd still want to clear even if fields is specified. An alternative here would be to accept another kwarg to denote field cache clearing that would default to True and that DeferredAttribute.__get__ would pass False to.", 1702726968.0], ["Hey, I'm interested in taking this over unless @Adam, you might want to fix this as part of #28586? Spotted whilst working on #28586. My implementation for that will probably fix this issue What I'm thinking to do is follow Simon's plan above and not clear cached relations when refresh_from_db(fields) is specified, unless a relation is part of fields explicitly. Not sure how I would deal with the private fields though to be honest, or if we actually need to handle that.", 1707054420.0], ["Not sure how I would deal with the private fields though to be honest, or if we actually need to handle that. yeah not sure either, I suggest trying the same approach that avoids clearing if fields is specified and the private field name is not part of them. My only concern is that I'm not sure how .only will behave when passed private field names. In all cases the only regression test existing for #34137 \u200bdoesn't make use of fields so it's in a grey area.", 1707061065.0], ["Giannis, feel free to take this ticket. It\u2019s now looking like my approach to #28586 will go in a different direction.", 1707148987.0], ["Thank you both! I opened a PR for this \u200bPR I've added tests for defer() and only() for relations/private fields and updated the refresh_from_db() accordingly. I also added a couple of tests with the fields kwarg specified.", 1707227368.0], ["In 0c690c6: Refs #35044 -- Added Model.refresh_from_db(fields=...) test for clearing reverse relations.", 1709875788.0], ["In 73df8b54: Fixed #35044 -- Avoided clearing reverse relations and private fields when accessing deferred fields. Regression in a7b5ad8b19a08d7d57302ece74f6e26d2887fd9f for reverse relations and possibly in 123b1d3fcf79f091573c40be6da7113a6ef35b62 for private fields.", 1709875788.0]], "created_at": "2024-02-06T19:47:31Z"}
{"repo": "django/django", "pull_number": 17829, "instance_id": "django__django-17829", "issue_numbers": ["35099"], "base_commit": "6ee37ada3241ed263d8d1c2901b030d964cbd161", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5100869b3429..b3f130c0b44e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -696,6 +696,7 @@ def combine(self, rhs, connector):\n         # except if the alias is the base table since it must be present in the\n         # query on both sides.\n         initial_alias = self.get_initial_alias()\n+        rhs = rhs.clone()\n         rhs.bump_prefix(self, exclude={initial_alias})\n \n         # Work out how to relabel the rhs aliases, if necessary.\n", "test_patch": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 48d610bb2bc8..7ac8a65d420c 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1357,6 +1357,24 @@ def test_negate_field(self):\n         )\n         self.assertSequenceEqual(Note.objects.exclude(negate=True), [self.n3])\n \n+    def test_combining_does_not_mutate(self):\n+        all_authors = Author.objects.all()\n+        authors_with_report = Author.objects.filter(\n+            Exists(Report.objects.filter(creator__pk=OuterRef(\"id\")))\n+        )\n+        authors_without_report = all_authors.exclude(pk__in=authors_with_report)\n+        items_before = Item.objects.filter(creator__in=authors_without_report)\n+        self.assertCountEqual(items_before, [self.i2, self.i3, self.i4])\n+        # Combining querysets doesn't mutate them.\n+        all_authors | authors_with_report\n+        all_authors & authors_with_report\n+\n+        authors_without_report = all_authors.exclude(pk__in=authors_with_report)\n+        items_after = Item.objects.filter(creator__in=authors_without_report)\n+\n+        self.assertCountEqual(items_after, [self.i2, self.i3, self.i4])\n+        self.assertCountEqual(items_before, items_after)\n+\n \n class Queries2Tests(TestCase):\n     @classmethod\n", "problem_statement": "Combining QuerySets with \"|\" or \"&\" mutates right-hand side.\nDescription\n\t\t\n(last modified by Alan)\t\t\nHello everyone.\nCombining some queries with \"|\" or \"&\" somehow affects queries involved in the operation, leading to malformed SQL and unexpected results.\nHere are details and steps to reproduce. Apologise, for maybe a bit confusing model names, I copied them from production.\nclass SiteUser(models.Model):\n\tpass\nclass Notification(models.Model):\n\tuser = models.ForeignKey(to=SiteUser, on_delete=models.CASCADE)\nclass PayoutRequest(models.Model):\n\trequester = models.ForeignKey(to=SiteUser, on_delete=models.CASCADE)\nTest:\nfrom django.test import TestCase\nfrom django.db.models import OuterRef, Exists\nfrom reproduce.models import Notification, SiteUser, PayoutRequest\nclass Reproduce(TestCase):\n\tdef test(self):\n\t\tu01 = SiteUser.objects.create()\n\t\tu02 = SiteUser.objects.create()\n\t\tu03 = SiteUser.objects.create()\n\t\tNotification.objects.create(user=u01)\n\t\tPayoutRequest.objects.create(requester=u01)\n\t\tNotification.objects.create(user=u02)\n\t\tPayoutRequest.objects.create(requester=u03)\n\t\tare_active = SiteUser.objects.all().distinct()\n\t\tgot_money = SiteUser.objects.filter(\n\t\t\tExists(PayoutRequest.objects.filter(requester=OuterRef('pk')))\n\t\t).distinct()\n\t\twhatever_query = SiteUser.objects.all().distinct()\n\t\t# Execute queries first time\n\t\tneed_help = are_active.exclude(pk__in=got_money)\n\t\tnotified = Notification.objects.filter(user__in=need_help).values_list('user_id', flat=True)\n\t\tquery_before = str(notified.query)\n\t\tself.assertEqual(len(notified), 1) # correct\n\t\twhatever_query | got_money # Touch \"got_money\" with any other query\n\t\t# Execute same queries second time\n\t\tneed_help = are_active.exclude(pk__in=got_money)\n\t\tnotified = Notification.objects.filter(user__in=need_help).values_list('user_id', flat=True)\n\t\tquery_after = str(notified.query)\n\t\tprint(query_before)\n\t\tprint(query_after)\n\t\tself.assertEqual(len(notified), 1) # expected 1, got 0\n\t\tself.assertEqual(query_before, query_after) # false\nAs you can see, merely touching the got_money query with any other query leads to modifying the results of the same queries executed after that.\nThis test case probably may be simplified even further, but unfortunately, I have no more time resources to dig much deeper.\nI had another queries built using simple .filter() and .exclude(). Those were not affected by combining.\nI found only this query got_money using Exists() and OuterRef() to be affected. There might be more of which I am not aware of.\nThe reason for this I don't know, but query_before and query_after differs.\nquery_before correctly separates subqueries using W0, U0, V0 aliases, while the query_after uses a single U0 alias for all subqueries, leading to incorrect results.\nBefore\nSELECT \n \"reproduce_notification\".\"user_id\" \nFROM \n \"reproduce_notification\" \nWHERE \n \"reproduce_notification\".\"user_id\" IN (\n\tSELECT \n\t DISTINCT W0.\"id\" \n\tFROM \n\t \"reproduce_siteuser\" W0 \n\tWHERE \n\t NOT (\n\t\tW0.\"id\" IN (\n\t\t SELECT \n\t\t\tDISTINCT V0.\"id\" \n\t\t FROM \n\t\t\t\"reproduce_siteuser\" V0 \n\t\t WHERE \n\t\t\tEXISTS(\n\t\t\t SELECT \n\t\t\t\t1 AS \"a\" \n\t\t\t FROM \n\t\t\t\t\"reproduce_payoutrequest\" U0 \n\t\t\t WHERE \n\t\t\t\tU0.\"requester_id\" = (V0.\"id\") \n\t\t\t LIMIT \n\t\t\t\t1\n\t\t\t)\n\t\t)\n\t )\n ) \nAfter\nSELECT \n \"reproduce_notification\".\"user_id\" \nFROM \n \"reproduce_notification\" \nWHERE \n \"reproduce_notification\".\"user_id\" IN (\n\tSELECT \n\t DISTINCT U0.\"id\" \n\tFROM \n\t \"reproduce_siteuser\" U0 \n\tWHERE \n\t NOT (\n\t\tU0.\"id\" IN (\n\t\t SELECT \n\t\t\tDISTINCT U0.\"id\" \n\t\t FROM \n\t\t\t\"reproduce_siteuser\" U0 \n\t\t WHERE \n\t\t\tEXISTS(\n\t\t\t SELECT \n\t\t\t\t1 AS \"a\" \n\t\t\t FROM \n\t\t\t\t\"reproduce_payoutrequest\" U0 \n\t\t\t WHERE \n\t\t\t\tU0.\"requester_id\" = (U0.\"id\") \n\t\t\t LIMIT \n\t\t\t\t1\n\t\t\t)\n\t\t)\n\t )\n )\nFound bug in version 4.2.7, but reproduced it in 5.0.1 the same way.\nFeel free to request any additional information you might need for this.\n", "hints_text": [["Thanks for the report.This is caused by \u200bbumping prefixes, we should probably clone rhs before doing this, e.g. django/db/models/sql/query.py diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index a79d66eb21..5539f35b1c 100644 a b class Query(BaseExpression): 685685 # except if the alias is the base table since it must be present in the 686686 # query on both sides. 687687 initial_alias = self.get_initial_alias() 688 rhs = rhs.clone() 688689 rhs.bump_prefix(self, exclude={initial_alias}) 689690 690691 # Work out how to relabel the rhs aliases, if necessary. Does it work for you? Would you like to prepare a patch? (a regression test is required).", 1704854409.0], ["Replying to Mariusz Felisiak: Does it work for you? Would you like to prepare a patch? (a regression test is required). It does work for me, the test now passes correctly after applying cloning the rhs. Regarding the patch, I've never contributed to Django, so it may take quite a while for me to get familiar with what's required. If you could point me to the key resources on how to do that, I may take a shot on a weekend. I found a \"Submitting a patches\" in Django doc. I need more guidance on how to cover this case with regression tests. I would highly appreciate some references to take a look at.", 1704857837.0], ["Regarding the patch, I've never contributed to Django, so it may take quite a while for me to get familiar with what's required. If you could point me to the key resources on how to do that, I may take a shot on a weekend. Great, thanks! I'd recommend joining our \u200bDiscord server and asking on the #contributing-getting-started channel, folks are very helpful there.", 1704858249.0]], "created_at": "2024-02-06T14:46:00Z"}
{"repo": "django/django", "pull_number": 17821, "instance_id": "django__django-17821", "issue_numbers": ["16281"], "base_commit": "a47de0d6cd440d4515ede48df8335d91d7ac7793", "patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 1b6abb98181c..ce731bf2ddd4 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -280,7 +280,9 @@ def __get__(self, instance, cls=None):\n         if ct_id is not None:\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n             try:\n-                rel_obj = ct.get_object_for_this_type(pk=pk_val)\n+                rel_obj = ct.get_object_for_this_type(\n+                    using=instance._state.db, pk=pk_val\n+                )\n             except ObjectDoesNotExist:\n                 pass\n         self.set_cached_value(instance, rel_obj)\ndiff --git a/django/contrib/contenttypes/models.py b/django/contrib/contenttypes/models.py\nindex 0d98ed3a4de1..4f16e6eb6954 100644\n--- a/django/contrib/contenttypes/models.py\n+++ b/django/contrib/contenttypes/models.py\n@@ -174,20 +174,20 @@ def model_class(self):\n         except LookupError:\n             return None\n \n-    def get_object_for_this_type(self, **kwargs):\n+    def get_object_for_this_type(self, using=None, **kwargs):\n         \"\"\"\n         Return an object of this type for the keyword arguments given.\n         Basically, this is a proxy around this object_type's get_object() model\n         method. The ObjectNotExist exception, if thrown, will not be caught,\n         so code that calls this method should catch it.\n         \"\"\"\n-        return self.model_class()._base_manager.using(self._state.db).get(**kwargs)\n+        return self.model_class()._base_manager.using(using).get(**kwargs)\n \n     def get_all_objects_for_this_type(self, **kwargs):\n         \"\"\"\n         Return all objects of this type for the keyword arguments given.\n         \"\"\"\n-        return self.model_class()._base_manager.using(self._state.db).filter(**kwargs)\n+        return self.model_class()._base_manager.filter(**kwargs)\n \n     def natural_key(self):\n         return (self.app_label, self.model)\ndiff --git a/docs/ref/contrib/contenttypes.txt b/docs/ref/contrib/contenttypes.txt\nindex 71feee63e05d..fa446796594e 100644\n--- a/docs/ref/contrib/contenttypes.txt\n+++ b/docs/ref/contrib/contenttypes.txt\n@@ -106,13 +106,18 @@ methods that allow you to get from a\n :class:`~django.contrib.contenttypes.models.ContentType` instance to the\n model it represents, or to retrieve objects from that model:\n \n-.. method:: ContentType.get_object_for_this_type(**kwargs)\n+.. method:: ContentType.get_object_for_this_type(using=None, **kwargs)\n \n     Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the\n     model the :class:`~django.contrib.contenttypes.models.ContentType`\n     represents, and does\n     :meth:`a get() lookup <django.db.models.query.QuerySet.get>`\n-    on that model, returning the corresponding object.\n+    on that model, returning the corresponding object. The ``using`` argument\n+    can be used to specify a different database than the default one.\n+\n+    .. versionchanged:: 5.1\n+\n+        The ``using`` argument was added.\n \n .. method:: ContentType.model_class()\n \n", "test_patch": "diff --git a/tests/admin_views/models.py b/tests/admin_views/models.py\nindex bd2dc65d2e17..341e5aaed021 100644\n--- a/tests/admin_views/models.py\n+++ b/tests/admin_views/models.py\n@@ -83,6 +83,9 @@ class Book(models.Model):\n     def __str__(self):\n         return self.name\n \n+    def get_absolute_url(self):\n+        return f\"/books/{self.id}/\"\n+\n \n class Promo(models.Model):\n     name = models.CharField(max_length=100, verbose_name=\"\u00bfName?\")\ndiff --git a/tests/admin_views/test_multidb.py b/tests/admin_views/test_multidb.py\nindex d868321a4bd0..654161e11d80 100644\n--- a/tests/admin_views/test_multidb.py\n+++ b/tests/admin_views/test_multidb.py\n@@ -2,6 +2,8 @@\n \n from django.contrib import admin\n from django.contrib.auth.models import User\n+from django.contrib.contenttypes.models import ContentType\n+from django.http import HttpResponse\n from django.test import TestCase, override_settings\n from django.urls import path, reverse\n \n@@ -23,8 +25,15 @@ def allow_relation(self, obj1, obj2, **hints):\n site = admin.AdminSite(name=\"test_adminsite\")\n site.register(Book)\n \n+\n+def book(request, book_id):\n+    b = Book.objects.get(id=book_id)\n+    return HttpResponse(b.title)\n+\n+\n urlpatterns = [\n     path(\"admin/\", site.urls),\n+    path(\"books/<book_id>/\", book),\n ]\n \n \n@@ -88,3 +97,47 @@ def test_delete_view(self, mock):\n                     {\"post\": \"yes\"},\n                 )\n                 mock.atomic.assert_called_with(using=db)\n+\n+\n+class ViewOnSiteRouter:\n+    def db_for_read(self, model, instance=None, **hints):\n+        if model._meta.app_label in {\"auth\", \"sessions\", \"contenttypes\"}:\n+            return \"default\"\n+        return \"other\"\n+\n+    def db_for_write(self, model, **hints):\n+        if model._meta.app_label in {\"auth\", \"sessions\", \"contenttypes\"}:\n+            return \"default\"\n+        return \"other\"\n+\n+    def allow_relation(self, obj1, obj2, **hints):\n+        return obj1._state.db in {\"default\", \"other\"} and obj2._state.db in {\n+            \"default\",\n+            \"other\",\n+        }\n+\n+    def allow_migrate(self, db, app_label, **hints):\n+        return True\n+\n+\n+@override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=[ViewOnSiteRouter()])\n+class ViewOnSiteTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_contenttype_in_separate_db(self):\n+        ContentType.objects.using(\"other\").all().delete()\n+        book = Book.objects.using(\"other\").create(name=\"other book\")\n+        user = User.objects.create_superuser(\n+            username=\"super\", password=\"secret\", email=\"super@example.com\"\n+        )\n+\n+        book_type = ContentType.objects.get(app_label=\"admin_views\", model=\"book\")\n+\n+        self.client.force_login(user)\n+\n+        shortcut_url = reverse(\"admin:view_on_site\", args=(book_type.pk, book.id))\n+        response = self.client.get(shortcut_url, follow=False)\n+        self.assertEqual(response.status_code, 302)\n+        self.assertRegex(\n+            response.url, f\"http://(testserver|example.com)/books/{book.id}/\"\n+        )\ndiff --git a/tests/multiple_database/tests.py b/tests/multiple_database/tests.py\nindex 337ebae75e66..9587030a4674 100644\n--- a/tests/multiple_database/tests.py\n+++ b/tests/multiple_database/tests.py\n@@ -1302,6 +1302,34 @@ def test_related_manager(self):\n             title=\"Dive into Water\", published=datetime.date(2009, 5, 4), extra_arg=True\n         )\n \n+    @override_settings(DATABASE_ROUTERS=[\"multiple_database.tests.TestRouter\"])\n+    def test_contenttype_in_separate_db(self):\n+        ContentType.objects.using(\"other\").all().delete()\n+        book_other = Book.objects.using(\"other\").create(\n+            title=\"Test title other\", published=datetime.date(2009, 5, 4)\n+        )\n+        book_default = Book.objects.using(\"default\").create(\n+            title=\"Test title default\", published=datetime.date(2009, 5, 4)\n+        )\n+        book_type = ContentType.objects.using(\"default\").get(\n+            app_label=\"multiple_database\", model=\"book\"\n+        )\n+\n+        book = book_type.get_object_for_this_type(title=book_other.title)\n+        self.assertEqual(book, book_other)\n+        book = book_type.get_object_for_this_type(using=\"other\", title=book_other.title)\n+        self.assertEqual(book, book_other)\n+\n+        with self.assertRaises(Book.DoesNotExist):\n+            book_type.get_object_for_this_type(title=book_default.title)\n+        book = book_type.get_object_for_this_type(\n+            using=\"default\", title=book_default.title\n+        )\n+        self.assertEqual(book, book_default)\n+\n+        all_books = book_type.get_all_objects_for_this_type()\n+        self.assertCountEqual(all_books, [book_other])\n+\n \n class ConnectionRouterTestCase(SimpleTestCase):\n     @override_settings(\n", "problem_statement": "ContentType.get_object_for_this_type using wrong database for creating object\nDescription\n\t \nThere is a subtle error in \u200bContentType.get_object_for_this_type method.\ndef get_object_for_this_type(self, **kwargs):\n\treturn self.model_class()._default_manager.using(self._state.db).get(**kwargs)\nDatabase used to get model_class object is taken from self._state.db, which provides an error when contenttype model is hold in one database and model, of which object we're going to create, in another one.\nDatabase should be provided using self.model_class().objects.db not self._state.db.\n", "hints_text": [["Patch", 1308198634.0], ["See also #16088.", 1309245237.0], ["After studying this, I'm not sure the current code is wrong. I'd want to see a use case in which Django clearly does the wrong thing to be convinced otherwise. Please re-open the ticket if there is one. The proposed fix: - return self.model_class()._base_manager.using(self._state.db).get(**kwargs) + return self.model_class()._base_manager.using(self.model_class().objects.db).get(**kwargs) seems to assume that there is exactly one database in which it is correct to look for instances of a given model, but in Django, it's not required that all instances of a model be stored in one database. Applying the fix causes one of the multiple database tests, test_generic_key_separation(), to fail. This test puts pairs of related instances in each of the two test databases and ensures that querying for the related instances works, but after this change, is unable to find the related instance in the 2nd database correctly, probably because now get_object_for_this_type() is only looking in the default database. The test does assume that ContentType objects exist in every database in which a model has instances, but that seems reasonable, given the requirement in Django that related objects be stored in the same database. ContentType objects don't actually have ForeignKeys, but logically they're still related to the models they represent. The current code looks for the instance of the requested model in the same database in which the ContentType instance being used was found, which fits in with the \"related instances in same database\" requirement. However, in working through all this, I found nothing in the Django documentation discussing how the content type framework and multiple databases interact, and perhaps this ticket demonstrates the need for more documentation on how to correctly use content types when multiple databases are involved.", 1321099354.0], ["I don't understand the patch or it's implications enough to comment on it. However, I can confirm this is a valid bug in Django 1.4. I have an application where some tables reside in a mysql database; these are pre-existing tables, not managed by Django, for which I created models using inspectdb. Everything else (auth, contenttypes, ...) resides in a sqlite database. A database router manages which model is mapped to which database. This works fine everywhere. Recently, I decided to add a get_absolute_url method to one of the models residing in the mysql database. I now have a \"show on site\" link in the admin for that model. Without the patch above, clicking this link causes a DatabaseError exception, because Django attempts to access the model's table in the sqlite database. It seems to me that this should just work. Django knows the model's table resides in the mysql database, because it is editing an instance of it. The proposed fix above does indeed fix this problem for me: the link now properly links to my site. (I haven't tried trunk, but the relevant code appears to be unchanged from 1.4, so I expect it to behave the same.)", 1353764915.0], ["Based on poirier's earlier comment, would it not work to simply remove the .using(self._state.db) clause from the original code altogether? Then the DB router could do its usual job of deciding where to point the query.", 1366126384.0], ["Replying to anonymous: would it not work to simply remove the .using(self._state.db) clause from the original code altogether? I can confirm that works in my situation (described above in [comment 6 comment:6]).", 1366178561.0], ["Replying to Gertjan Klein <gklein@\u2026>: Replying to anonymous: would it not work to simply remove the .using(self._state.db) clause from the original code altogether? I can confirm that works in my situation (described above in [comment 6 comment:6]). This also fixes the problem in for me. However, it also causes test_generic_key_separation (regressiontests.multiple_database.tests.QueryTestCase) to fail (just like the proposed fix by poirier above). This isn't a problem in my application, but it clearly is a regression elsewhere. This change allows get_object_for_this_type to continue using the instance._state.db for the regression test case, but the router-provided database for cases that don't specify a database. I don't think this change is complete, as there are almost certainly more locations that need to pass using= in order to not regress. diff --git a/django/contrib/contenttypes/generic.py b/django/contrib/contenttypes/generic.py index e83c83a..ee04262 100644 --- a/django/contrib/contenttypes/generic.py +++ b/django/contrib/contenttypes/generic.py @@ -123,7 +123,7 @@ class GenericForeignKey(object): if ct_id: ct = self.get_content_type(id=ct_id, using=instance._state.db) try: - rel_obj = ct.get_object_for_this_type(pk=getattr(instance, self.fk_field)) + rel_obj = ct.get_object_for_this_type(using=instance._state.db, pk=getattr(instance, self.fk_field)) except ObjectDoesNotExist: pass setattr(instance, self.cache_attr, rel_obj) diff --git a/django/contrib/contenttypes/models.py b/django/contrib/contenttypes/models.py index b658655..4c4d92b 100644 --- a/django/contrib/contenttypes/models.py +++ b/django/contrib/contenttypes/models.py @@ -157,20 +157,23 @@ class ContentType(models.Model): return models.get_model(self.app_label, self.model, only_installed=False) - def get_object_for_this_type(self, **kwargs): + def get_object_for_this_type(self, using=None, **kwargs): \"\"\" Returns an object of this type for the keyword arguments given. Basically, this is a proxy around this object_type's get_object() model method. The ObjectNotExist exception, if thrown, will not be caught, so code that calls this method should catch it. \"\"\" - return self.model_class()._base_manager.using(self._state.db).get(**kwargs) + if using: + return self.model_class()._base_manager.using(using).get(**kwargs) + else: + return self.model_class()._base_manager.get(**kwargs) def get_all_objects_for_this_type(self, **kwargs): \"\"\" Returns all objects of this type for the keyword arguments given. \"\"\" - return self.model_class()._base_manager.using(self._state.db).filter(**kwargs) + return self.model_class()._base_manager.filter(**kwargs) def natural_key(self): return (self.app_label, self.model)", 1374688736.0], ["I've just been bitten by this bug (django 1.7) - I have a particular app in a separate database, and now the admin's \"view on site\" link doesn't work because it's looking for the object in the default database. What are the chances of it being addressed? I don't really think this is an edge case; as it stands the \"view on site\" link will fail for *any* object kept in a separate database, and before 1.7 the only way to remove said link is to remove the get_absolute_url method from the model.", 1424105632.0], ["It looks to me like writing a patch with tests is the next step to address this.", 1424106933.0], ["Might be a duplicate of #15610 as the patch proposed there also modifies these methods.", 1443797609.0], ["#25564 is a duplicate.", 1445435999.0], ["#30760 is another duplicate.", 1604767431.0], ["Here's a similar patch that does the current query, and if it fails, falls back to the using the default router. This passes the tests if I fix the number of expected queries in one test. If we go this direction, we'd probably want to update the get_all_objects_for_this_type method as well. diff --git a/django/contrib/contenttypes/models.py b/django/contrib/contenttypes/models.py index 0d98ed3a4d..2cf08bc85e 100644 --- a/django/contrib/contenttypes/models.py +++ b/django/contrib/contenttypes/models.py @@ -2,7 +2,7 @@ from collections import defaultdict from django.apps import apps from django.db import models -from django.db.models import Q +from django.db.models import ObjectDoesNotExist, Q from django.utils.translation import gettext_lazy as _ @@ -181,7 +181,10 @@ class ContentType(models.Model): method. The ObjectNotExist exception, if thrown, will not be caught, so code that calls this method should catch it. \"\"\" - return self.model_class()._base_manager.using(self._state.db).get(**kwargs) + try: + return self.model_class()._base_manager.using(self._state.db).get(**kwargs) + except ObjectDoesNotExist: + return self.model_class()._base_manager.get(**kwargs) def get_all_objects_for_this_type(self, **kwargs): \"\"\" diff --git a/tests/contenttypes_tests/test_fields.py b/tests/contenttypes_tests/test_fields.py index 5510f34cd0..dd1edae834 100644 --- a/tests/contenttypes_tests/test_fields.py +++ b/tests/contenttypes_tests/test_fields.py @@ -32,7 +32,7 @@ class GenericForeignKeyTests(TestCase): Question.objects.all().delete() post = Post.objects.get(pk=post.pk) - with self.assertNumQueries(1): + with self.assertNumQueries(2): self.assertEqual(post.object_id, question_pk) self.assertIsNone(post.parent) self.assertIsNone(post.parent)", 1700044848.0], ["Actually, the patch in comment number 12, by anonymous, seems to work quite well. I added a test and \u200bopened a PR with that change.", 1700058223.0]], "created_at": "2024-02-05T07:26:55Z"}
{"repo": "django/django", "pull_number": 17817, "instance_id": "django__django-17817", "issue_numbers": ["35162"], "base_commit": "0630ca5725ba5b17c61cd1f6a05dce2660c4724e", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 242083b85073..dad3f8d916a1 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -412,7 +412,11 @@ def db_default_sql(self, field):\n         \"\"\"Return the sql and params for the field's database default.\"\"\"\n         from django.db.models.expressions import Value\n \n-        sql = \"%s\" if isinstance(field.db_default, Value) else \"(%s)\"\n+        sql = (\n+            self._column_default_sql(field)\n+            if isinstance(field.db_default, Value)\n+            else \"(%s)\"\n+        )\n         query = Query(model=field.model)\n         compiler = query.get_compiler(connection=self.connection)\n         default_sql, params = compiler.compile(field.db_default)\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex 64ffcb88bdae..a385fbd13eff 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -32,3 +32,7 @@ Bugfixes\n * Fixed a regression in Django 5.0 that caused the ``request_finished`` signal to\n   sometimes not be fired when running Django through an ASGI server, resulting\n   in potential resource leaks (:ticket:`35059`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash on MySQL when adding\n+  a ``BinaryField``, ``TextField``, ``JSONField``, or ``GeometryField`` with a\n+  ``db_default`` (:ticket:`35162`).\n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 3a026281bdec..cde3d7f99146 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2303,6 +2303,19 @@ class Meta:\n         columns = self.column_classes(Author)\n         self.assertEqual(columns[\"birth_year\"][1].default, \"1988\")\n \n+    @isolate_apps(\"schema\")\n+    def test_add_text_field_with_db_default(self):\n+        class Author(Model):\n+            description = TextField(db_default=\"(missing)\")\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        columns = self.column_classes(Author)\n+        self.assertIn(\"(missing)\", columns[\"description\"][1].default)\n+\n     @skipUnlessDBFeature(\n         \"supports_column_check_constraints\", \"can_introspect_check_constraints\"\n     )\n", "problem_statement": "Adding a BinaryField, TextField, JSONField, or GeometryField with a db_default crashes on MySQL\nDescription\n\t \nMySQL do not support literal value DEFAULT for these fields and requires them to be wrapped in parenthesis so they are considered expressions.\nThis is already something we must handle when using DEFAULT to add fields with a default so all the backend specific logic lives in in _column_default_sql so it's only a matter of using it in db_default_sql.\n", "hints_text": [], "created_at": "2024-02-03T18:30:49Z"}
{"repo": "django/django", "pull_number": 17814, "instance_id": "django__django-17814", "issue_numbers": ["33037"], "base_commit": "3cadeea077a98367a4ed344d645df0aff243de91", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 26cfe71138ac..6fef75cf4342 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -919,6 +919,7 @@ answer newbie questions, and generally made Django that much better:\n     Sergey Fedoseev <fedoseev.sergey@gmail.com>\n     Sergey Kolosov <m17.admin@gmail.com>\n     Seth Hill <sethrh@gmail.com>\n+    Shafiya Adzhani <adz.arsym@gmail.com>\n     Shai Berger <shai@platonix.com>\n     Shannon -jj Behrens <https://www.jjinux.com/>\n     Shawn Milochik <shawn@milochik.com>\ndiff --git a/django/db/backends/sqlite3/_functions.py b/django/db/backends/sqlite3/_functions.py\nindex 0171b60f3872..6d07d3d78b3c 100644\n--- a/django/db/backends/sqlite3/_functions.py\n+++ b/django/db/backends/sqlite3/_functions.py\n@@ -118,7 +118,10 @@ def _sqlite_datetime_parse(dt, tzname=None, conn_tzname=None):\n             hours, minutes = offset.split(\":\")\n             offset_delta = timedelta(hours=int(hours), minutes=int(minutes))\n             dt += offset_delta if sign == \"+\" else -offset_delta\n-        dt = timezone.localtime(dt, zoneinfo.ZoneInfo(tzname))\n+        # The tzname may originally be just the offset e.g. \"+3:00\",\n+        # which becomes an empty string after splitting the sign and offset.\n+        # In this case, use the conn_tzname as fallback.\n+        dt = timezone.localtime(dt, zoneinfo.ZoneInfo(tzname or conn_tzname))\n     return dt\n \n \ndiff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex f363253ca339..ab0ea8258b51 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -200,6 +200,8 @@ def split_tzname_delta(tzname):\n         if sign in tzname:\n             name, offset = tzname.rsplit(sign, 1)\n             if offset and parse_time(offset):\n+                if \":\" not in offset:\n+                    offset = f\"{offset}:00\"\n                 return name, sign, offset\n     return tzname, None, None\n \n", "test_patch": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex e576e6e46415..3f13ca7989ad 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -939,73 +939,74 @@ def test_trunc_func(self):\n         self.create_model(start_datetime, end_datetime)\n         self.create_model(end_datetime, start_datetime)\n \n-        def test_datetime_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\n-                        \"start_datetime\", kind, output_field=DateTimeField()\n-                    )\n-                ).order_by(\"start_datetime\"),\n+        def assertDatetimeKind(kind):\n+            truncated_start = truncate_to(start_datetime, kind)\n+            truncated_end = truncate_to(end_datetime, kind)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\"start_datetime\", kind, output_field=DateTimeField())\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (start_datetime, truncate_to(start_datetime, kind)),\n-                    (end_datetime, truncate_to(end_datetime, kind)),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        def test_date_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\"start_date\", kind, output_field=DateField())\n-                ).order_by(\"start_datetime\"),\n+        def assertDateKind(kind):\n+            truncated_start = truncate_to(start_datetime.date(), kind)\n+            truncated_end = truncate_to(end_datetime.date(), kind)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\"start_date\", kind, output_field=DateField())\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (start_datetime, truncate_to(start_datetime.date(), kind)),\n-                    (end_datetime, truncate_to(end_datetime.date(), kind)),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        def test_time_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\"start_time\", kind, output_field=TimeField())\n-                ).order_by(\"start_datetime\"),\n+        def assertTimeKind(kind):\n+            truncated_start = truncate_to(start_datetime.time(), kind)\n+            truncated_end = truncate_to(end_datetime.time(), kind)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\"start_time\", kind, output_field=TimeField())\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (start_datetime, truncate_to(start_datetime.time(), kind)),\n-                    (end_datetime, truncate_to(end_datetime.time(), kind)),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        def test_datetime_to_time_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\"start_datetime\", kind, output_field=TimeField()),\n-                ).order_by(\"start_datetime\"),\n+        def assertDatetimeToTimeKind(kind):\n+            truncated_start = truncate_to(start_datetime.time(), kind)\n+            truncated_end = truncate_to(end_datetime.time(), kind)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\"start_datetime\", kind, output_field=TimeField()),\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (start_datetime, truncate_to(start_datetime.time(), kind)),\n-                    (end_datetime, truncate_to(end_datetime.time(), kind)),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        test_date_kind(\"year\")\n-        test_date_kind(\"quarter\")\n-        test_date_kind(\"month\")\n-        test_date_kind(\"day\")\n-        test_time_kind(\"hour\")\n-        test_time_kind(\"minute\")\n-        test_time_kind(\"second\")\n-        test_datetime_kind(\"year\")\n-        test_datetime_kind(\"quarter\")\n-        test_datetime_kind(\"month\")\n-        test_datetime_kind(\"day\")\n-        test_datetime_kind(\"hour\")\n-        test_datetime_kind(\"minute\")\n-        test_datetime_kind(\"second\")\n-        test_datetime_to_time_kind(\"hour\")\n-        test_datetime_to_time_kind(\"minute\")\n-        test_datetime_to_time_kind(\"second\")\n+        date_truncations = [\"year\", \"quarter\", \"month\", \"day\"]\n+        time_truncations = [\"hour\", \"minute\", \"second\"]\n+        tests = [\n+            (assertDateKind, date_truncations),\n+            (assertTimeKind, time_truncations),\n+            (assertDatetimeKind, [*date_truncations, *time_truncations]),\n+            (assertDatetimeToTimeKind, time_truncations),\n+        ]\n+        for assertion, truncations in tests:\n+            for truncation in truncations:\n+                with self.subTest(assertion=assertion.__name__, truncation=truncation):\n+                    assertion(truncation)\n \n         qs = DTModel.objects.filter(\n             start_datetime__date=Trunc(\n@@ -1831,93 +1832,90 @@ def test_trunc_func_with_timezone(self):\n         end_datetime = timezone.make_aware(end_datetime)\n         self.create_model(start_datetime, end_datetime)\n         self.create_model(end_datetime, start_datetime)\n-        melb = zoneinfo.ZoneInfo(\"Australia/Melbourne\")\n \n-        def test_datetime_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\n-                        \"start_datetime\",\n-                        kind,\n-                        output_field=DateTimeField(),\n-                        tzinfo=melb,\n-                    )\n-                ).order_by(\"start_datetime\"),\n+        def assertDatetimeKind(kind, tzinfo):\n+            truncated_start = truncate_to(\n+                start_datetime.astimezone(tzinfo), kind, tzinfo\n+            )\n+            truncated_end = truncate_to(end_datetime.astimezone(tzinfo), kind, tzinfo)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\n+                    \"start_datetime\",\n+                    kind,\n+                    output_field=DateTimeField(),\n+                    tzinfo=tzinfo,\n+                )\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (\n-                        start_datetime,\n-                        truncate_to(start_datetime.astimezone(melb), kind, melb),\n-                    ),\n-                    (\n-                        end_datetime,\n-                        truncate_to(end_datetime.astimezone(melb), kind, melb),\n-                    ),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        def test_datetime_to_date_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\n-                        \"start_datetime\",\n-                        kind,\n-                        output_field=DateField(),\n-                        tzinfo=melb,\n-                    ),\n-                ).order_by(\"start_datetime\"),\n+        def assertDatetimeToDateKind(kind, tzinfo):\n+            truncated_start = truncate_to(\n+                start_datetime.astimezone(tzinfo).date(), kind\n+            )\n+            truncated_end = truncate_to(end_datetime.astimezone(tzinfo).date(), kind)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\n+                    \"start_datetime\",\n+                    kind,\n+                    output_field=DateField(),\n+                    tzinfo=tzinfo,\n+                ),\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (\n-                        start_datetime,\n-                        truncate_to(start_datetime.astimezone(melb).date(), kind),\n-                    ),\n-                    (\n-                        end_datetime,\n-                        truncate_to(end_datetime.astimezone(melb).date(), kind),\n-                    ),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        def test_datetime_to_time_kind(kind):\n-            self.assertQuerySetEqual(\n-                DTModel.objects.annotate(\n-                    truncated=Trunc(\n-                        \"start_datetime\",\n-                        kind,\n-                        output_field=TimeField(),\n-                        tzinfo=melb,\n-                    )\n-                ).order_by(\"start_datetime\"),\n+        def assertDatetimeToTimeKind(kind, tzinfo):\n+            truncated_start = truncate_to(\n+                start_datetime.astimezone(tzinfo).time(), kind\n+            )\n+            truncated_end = truncate_to(end_datetime.astimezone(tzinfo).time(), kind)\n+            queryset = DTModel.objects.annotate(\n+                truncated=Trunc(\n+                    \"start_datetime\",\n+                    kind,\n+                    output_field=TimeField(),\n+                    tzinfo=tzinfo,\n+                )\n+            ).order_by(\"start_datetime\")\n+            self.assertSequenceEqual(\n+                queryset.values_list(\"start_datetime\", \"truncated\"),\n                 [\n-                    (\n-                        start_datetime,\n-                        truncate_to(start_datetime.astimezone(melb).time(), kind),\n-                    ),\n-                    (\n-                        end_datetime,\n-                        truncate_to(end_datetime.astimezone(melb).time(), kind),\n-                    ),\n+                    (start_datetime, truncated_start),\n+                    (end_datetime, truncated_end),\n                 ],\n-                lambda m: (m.start_datetime, m.truncated),\n             )\n \n-        test_datetime_to_date_kind(\"year\")\n-        test_datetime_to_date_kind(\"quarter\")\n-        test_datetime_to_date_kind(\"month\")\n-        test_datetime_to_date_kind(\"week\")\n-        test_datetime_to_date_kind(\"day\")\n-        test_datetime_to_time_kind(\"hour\")\n-        test_datetime_to_time_kind(\"minute\")\n-        test_datetime_to_time_kind(\"second\")\n-        test_datetime_kind(\"year\")\n-        test_datetime_kind(\"quarter\")\n-        test_datetime_kind(\"month\")\n-        test_datetime_kind(\"week\")\n-        test_datetime_kind(\"day\")\n-        test_datetime_kind(\"hour\")\n-        test_datetime_kind(\"minute\")\n-        test_datetime_kind(\"second\")\n+        timezones = [\n+            zoneinfo.ZoneInfo(\"Australia/Melbourne\"),\n+            zoneinfo.ZoneInfo(\"Etc/GMT+10\"),\n+        ]\n+        date_truncations = [\"year\", \"quarter\", \"month\", \"week\", \"day\"]\n+        time_truncations = [\"hour\", \"minute\", \"second\"]\n+        tests = [\n+            (assertDatetimeToDateKind, date_truncations),\n+            (assertDatetimeToTimeKind, time_truncations),\n+            (assertDatetimeKind, [*date_truncations, *time_truncations]),\n+        ]\n+        for assertion, truncations in tests:\n+            for truncation in truncations:\n+                for tzinfo in timezones:\n+                    with self.subTest(\n+                        assertion=assertion.__name__,\n+                        truncation=truncation,\n+                        tzinfo=tzinfo.key,\n+                    ):\n+                        assertion(truncation, tzinfo)\n \n         qs = DTModel.objects.filter(\n             start_datetime__date=Trunc(\n", "problem_statement": "TruncDay error when using offset timezones on MySQL, SQLite, and Oracle.\nDescription\n\t \nI believe there's a problem using TruncDay with a timezone off-set like 'Etc/GMT+3'. The queryset returns Null values on MySQL.\nWhen using:\nTruncDay('time', tzinfo=timezone('Etc/GMT+03:00'))\nThe queryset is translated into:\nCONVERT_TZ(`model`.`time`, 'UTC', '+3')\nWhich causes the problem, as this timezone '+3' is not valid.\nThe timezone is formatted on though _prepare_tzname_delta method on django/db/backends/mysql/operations.py .\n", "hints_text": [["Duplicate of #32992.", 1629333758.0], ["Sorry for marking as a duplicate, this is a separate issue. As far as I'm aware this never worked. A naive solution may be fixing the offset format, e.g. diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py index 89730cee29..ffa6981b7c 100644 --- a/django/db/backends/mysql/operations.py +++ b/django/db/backends/mysql/operations.py @@ -75,11 +75,16 @@ class DatabaseOperations(BaseDatabaseOperations): else: return \"DATE(%s)\" % (field_name) + def _format_tzname_offset(self, tzname): + if len(tzname) == 3: + return tzname + ':00' + return tzname + def _prepare_tzname_delta(self, tzname): if '+' in tzname: - return tzname[tzname.find('+'):] + return self._format_tzname_offset(tzname[tzname.find('+'):]) elif '-' in tzname: - return tzname[tzname.find('-'):] + return self._format_tzname_offset(tzname[tzname.find('-'):]) return tzname def _convert_field_to_tz(self, field_name, tzname):", 1629854447.0], ["This fix the issue. Maybe the same problem is also happening with Oracle, at least the code in _prepare_tzname_delta is the same as the MySQL.", 1629884704.0], ["This fix the issue. Maybe the same problem is also happening with Oracle, at least the code in _prepare_tzname_delta is the same as the MySQL. Slice in _prepare_tzname_delta() is not important because tzname will be -03 after fixing #32992. I reproduced the same issue on Oracle and SQLite.", 1629897513.0], ["Strictly speaking, would this be better handled by modifying the name handling instead? Here we'll convert directly from etc/GMT+9 -> \"-9:00\", rather than passing \"etc/GMT+9\" directly over to mysql", 1673315920.0], ["This ticket is still open, right? I will try to understand it and create the patch.", 1706225193.0], ["Added patch here: \u200bhttps://github.com/django/django/pull/17814", 1706945176.0], ["In 22285d3: Fixed #33037 -- Fixed Trunc() with offset timezones on MySQL, SQLite, Oracle.", 1707970329.0]], "created_at": "2024-02-03T13:25:15Z"}
{"repo": "django/django", "pull_number": 17813, "instance_id": "django__django-17813", "issue_numbers": ["35149"], "base_commit": "dfc77637ea5c1aa81caa72b1cf900e6931d61b54", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex dad3f8d916a1..f442d290a005 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -412,14 +412,13 @@ def db_default_sql(self, field):\n         \"\"\"Return the sql and params for the field's database default.\"\"\"\n         from django.db.models.expressions import Value\n \n+        db_default = field._db_default_expression\n         sql = (\n-            self._column_default_sql(field)\n-            if isinstance(field.db_default, Value)\n-            else \"(%s)\"\n+            self._column_default_sql(field) if isinstance(db_default, Value) else \"(%s)\"\n         )\n         query = Query(model=field.model)\n         compiler = query.get_compiler(connection=self.connection)\n-        default_sql, params = compiler.compile(field.db_default)\n+        default_sql, params = compiler.compile(db_default)\n         if self.connection.features.requires_literal_defaults:\n             # Some databases doesn't support parameterized defaults (Oracle,\n             # SQLite). If this is the case, the individual schema backend\n@@ -1640,6 +1639,14 @@ def _field_should_be_altered(self, old_field, new_field, ignore=None):\n         ):\n             old_kwargs.pop(\"to\", None)\n             new_kwargs.pop(\"to\", None)\n+        # db_default can take many form but result in the same SQL.\n+        if (\n+            old_kwargs.get(\"db_default\")\n+            and new_kwargs.get(\"db_default\")\n+            and self.db_default_sql(old_field) == self.db_default_sql(new_field)\n+        ):\n+            old_kwargs.pop(\"db_default\")\n+            new_kwargs.pop(\"db_default\")\n         return self.quote_name(old_field.column) != self.quote_name(\n             new_field.column\n         ) or (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 5186f0c414dd..cc5025af84bc 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -219,12 +219,6 @@ def __init__(\n         self.remote_field = rel\n         self.is_relation = self.remote_field is not None\n         self.default = default\n-        if db_default is not NOT_PROVIDED and not hasattr(\n-            db_default, \"resolve_expression\"\n-        ):\n-            from django.db.models.expressions import Value\n-\n-            db_default = Value(db_default)\n         self.db_default = db_default\n         self.editable = editable\n         self.serialize = serialize\n@@ -408,7 +402,7 @@ def _check_db_default(self, databases=None, **kwargs):\n                 continue\n             connection = connections[db]\n \n-            if not getattr(self.db_default, \"allowed_default\", False) and (\n+            if not getattr(self._db_default_expression, \"allowed_default\", False) and (\n                 connection.features.supports_expression_defaults\n             ):\n                 msg = f\"{self.db_default} cannot be used in db_default.\"\n@@ -994,7 +988,7 @@ def pre_save(self, model_instance, add):\n             from django.db.models.expressions import DatabaseDefault\n \n             if isinstance(value, DatabaseDefault):\n-                return self.db_default\n+                return self._db_default_expression\n         return value\n \n     def get_prep_value(self, value):\n@@ -1047,6 +1041,17 @@ def _get_default(self):\n             return return_None\n         return str  # return empty string\n \n+    @cached_property\n+    def _db_default_expression(self):\n+        db_default = self.db_default\n+        if db_default is not NOT_PROVIDED and not hasattr(\n+            db_default, \"resolve_expression\"\n+        ):\n+            from django.db.models.expressions import Value\n+\n+            db_default = Value(db_default, self)\n+        return db_default\n+\n     def get_choices(\n         self,\n         include_blank=True,\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex a385fbd13eff..6312dee31270 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -36,3 +36,8 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a migration crash on MySQL when adding\n   a ``BinaryField``, ``TextField``, ``JSONField``, or ``GeometryField`` with a\n   ``db_default`` (:ticket:`35162`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash on models with a\n+  literal ``db_default`` of a complex type such as ``dict`` instance of a\n+  ``JSONField``. Running ``makemigrations`` might generate no-op ``AlterField``\n+  operations for fields using ``db_default`` (:ticket:`35149`).\n", "test_patch": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex c54349313e71..340805b2598e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1309,7 +1309,7 @@ def test_add_not_null_field_with_db_default(self, mocked_ask_method):\n             changes, \"testapp\", 0, 0, name=\"name\", preserve_default=True\n         )\n         self.assertOperationFieldAttributes(\n-            changes, \"testapp\", 0, 0, db_default=models.Value(\"Ada Lovelace\")\n+            changes, \"testapp\", 0, 0, db_default=\"Ada Lovelace\"\n         )\n \n     @mock.patch(\n@@ -1515,7 +1515,7 @@ def test_alter_field_to_not_null_with_db_default(self, mocked_ask_method):\n             changes, \"testapp\", 0, 0, name=\"name\", preserve_default=True\n         )\n         self.assertOperationFieldAttributes(\n-            changes, \"testapp\", 0, 0, db_default=models.Value(\"Ada Lovelace\")\n+            changes, \"testapp\", 0, 0, db_default=\"Ada Lovelace\"\n         )\n \n     @mock.patch(\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 5733ba761869..f25bb290a58a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1581,7 +1581,7 @@ def test_add_field_database_default(self):\n         self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n         field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n         self.assertEqual(field.default, models.NOT_PROVIDED)\n-        self.assertEqual(field.db_default, Value(4))\n+        self.assertEqual(field.db_default, 4)\n         project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4)\n         self.assertColumnNotExists(table_name, \"height\")\n         # Add field.\n@@ -1632,7 +1632,7 @@ def test_add_field_database_default_special_char_escaping(self):\n                 self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n                 field = new_state.models[app_label, \"pony\"].fields[\"special_char\"]\n                 self.assertEqual(field.default, models.NOT_PROVIDED)\n-                self.assertEqual(field.db_default, Value(db_default))\n+                self.assertEqual(field.db_default, db_default)\n                 self.assertColumnNotExists(table_name, \"special_char\")\n                 with connection.schema_editor() as editor:\n                     operation.database_forwards(\n@@ -1700,7 +1700,7 @@ def test_add_field_both_defaults(self):\n         self.assertEqual(len(new_state.models[app_label, \"pony\"].fields), 6)\n         field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n         self.assertEqual(field.default, 3)\n-        self.assertEqual(field.db_default, Value(4))\n+        self.assertEqual(field.db_default, 4)\n         pre_pony_pk = (\n             project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4).pk\n         )\n@@ -2145,7 +2145,7 @@ def test_alter_field_add_database_default(self):\n         old_weight = project_state.models[app_label, \"pony\"].fields[\"weight\"]\n         self.assertIs(old_weight.db_default, models.NOT_PROVIDED)\n         new_weight = new_state.models[app_label, \"pony\"].fields[\"weight\"]\n-        self.assertEqual(new_weight.db_default, Value(4.5))\n+        self.assertEqual(new_weight.db_default, 4.5)\n         with self.assertRaises(IntegrityError), transaction.atomic():\n             project_state.apps.get_model(app_label, \"pony\").objects.create()\n         # Alter field.\n@@ -2187,7 +2187,7 @@ def test_alter_field_change_default_to_database_default(self):\n         self.assertIs(old_pink.db_default, models.NOT_PROVIDED)\n         new_pink = new_state.models[app_label, \"pony\"].fields[\"pink\"]\n         self.assertIs(new_pink.default, models.NOT_PROVIDED)\n-        self.assertEqual(new_pink.db_default, Value(4))\n+        self.assertEqual(new_pink.db_default, 4)\n         pony = project_state.apps.get_model(app_label, \"pony\").objects.create(weight=1)\n         self.assertEqual(pony.pink, 3)\n         # Alter field.\n@@ -2217,7 +2217,7 @@ def test_alter_field_change_nullable_to_database_default_not_null(self):\n         old_green = project_state.models[app_label, \"pony\"].fields[\"green\"]\n         self.assertIs(old_green.db_default, models.NOT_PROVIDED)\n         new_green = new_state.models[app_label, \"pony\"].fields[\"green\"]\n-        self.assertEqual(new_green.db_default, Value(4))\n+        self.assertEqual(new_green.db_default, 4)\n         old_pony = project_state.apps.get_model(app_label, \"pony\").objects.create(\n             weight=1\n         )\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex cde3d7f99146..ced3367f0020 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -7,6 +7,7 @@\n \n from django.core.exceptions import FieldError\n from django.core.management.color import no_style\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.db import (\n     DatabaseError,\n     DataError,\n@@ -2316,6 +2317,43 @@ class Meta:\n         columns = self.column_classes(Author)\n         self.assertIn(\"(missing)\", columns[\"description\"][1].default)\n \n+    @isolate_apps(\"schema\")\n+    def test_db_default_equivalent_sql_noop(self):\n+        class Author(Model):\n+            name = TextField(db_default=Value(\"foo\"))\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        new_field = TextField(db_default=\"foo\")\n+        new_field.set_attributes_from_name(\"name\")\n+        new_field.model = Author\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, Author._meta.get_field(\"name\"), new_field)\n+\n+    @isolate_apps(\"schema\")\n+    def test_db_default_output_field_resolving(self):\n+        class Author(Model):\n+            data = JSONField(\n+                encoder=DjangoJSONEncoder,\n+                db_default={\n+                    \"epoch\": datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc)\n+                },\n+            )\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        author = Author.objects.create()\n+        author.refresh_from_db()\n+        self.assertEqual(author.data, {\"epoch\": \"1970-01-01T00:00:00Z\"})\n+\n     @skipUnlessDBFeature(\n         \"supports_column_check_constraints\", \"can_introspect_check_constraints\"\n     )\n", "problem_statement": "JSONField db_default requires wrapping values in json.dumps()\nDescription\n\t \nThis caught me out as I was expecting db_default to accept the same types as what would be set on model instance fields.\ntl;dr\nThis will cause psycopg to raise ProgrammingError: cannot adapt type 'dict'\nclass Foo(models.Model):\n\tjson = models.JSONField(db_default={\"foo\": \"bar\"})\nhowever this works:\nclass Foo(models.Model):\n\tjson = models.JSONField(db_default=json.dumps({\"foo\": \"bar\"}))\nAt the very least this may be a doc update but I feel like it violates principle of least astonishment to not use the same type that JSONField attrs use. If we do decide to make this consistent it seems like BaseSchemaEditor.db_default_sql() [1] just needs to be aware of the field's type and adapt it correctly \u2013\u00a0something like calling get_db_prep_value()?\n[1] \u200bhttps://github.com/django/django/blob/2005530920e7c290bb1cf7d9ada155250faa81ad/django/db/backends/base/schema.py#L411\nFurther details\nMigration generated without json.dumps:\nclass Migration(migrations.Migration):\n\tinitial = True\n\tdependencies = []\n\toperations = [\n\t\tmigrations.CreateModel(\n\t\t\tname=\"Foo\",\n\t\t\tfields=[\n\t\t\t\t(\n\t\t\t\t\t\"id\",\n\t\t\t\t\tmodels.BigAutoField(\n\t\t\t\t\t\tauto_created=True,\n\t\t\t\t\t\tprimary_key=True,\n\t\t\t\t\t\tserialize=False,\n\t\t\t\t\t\tverbose_name=\"ID\",\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t(\"json\", models.JSONField(db_default=models.Value({\"foo\": \"bar\"}))),\n\t\t\t],\n\t\t),\n\t]\nTraceback when applying above migration:\ndjango-sample % dj migrate jsonfield_dbdefault\nOperations to perform:\n Apply all migrations: jsonfield_dbdefault\nRunning migrations:\n Applying jsonfield_dbdefault.0001_initial...Traceback (most recent call last):\n File \"/path/to/projects/django-sample/./manage.py\", line 22, in <module>\n\tmain()\n File \"/path/to/projects/django-sample/./manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"/path/to/projects/django/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/path/to/projects/django/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/path/to/projects/django/django/core/management/base.py\", line 413, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/path/to/projects/django/django/core/management/base.py\", line 459, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/core/management/base.py\", line 107, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/core/management/commands/migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/db/migrations/executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/db/migrations/executor.py\", line 252, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/db/migrations/migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"/path/to/projects/django/django/db/migrations/operations/models.py\", line 97, in database_forwards\n\tschema_editor.create_model(model)\n File \"/path/to/projects/django/django/db/backends/base/schema.py\", line 485, in create_model\n\tself.execute(sql, params or None)\n File \"/path/to/projects/django/django/db/backends/postgresql/schema.py\", line 46, in execute\n\tsql = self.connection.ops.compose_sql(str(sql), params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/db/backends/postgresql/operations.py\", line 193, in compose_sql\n\treturn mogrify(sql, params, self.connection)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django/django/db/backends/postgresql/psycopg_any.py\", line 22, in mogrify\n\treturn ClientCursor(cursor.connection).mogrify(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/client_cursor.py\", line 40, in mogrify\n\tpgq = self._convert_query(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/client_cursor.py\", line 79, in _convert_query\n\tpgq.convert(query, params)\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_queries.py\", line 213, in convert\n\tself.dump(vars)\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_queries.py\", line 223, in dump\n\tself.params = tuple(\n\t\t\t\t ^^^^^^\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_queries.py\", line 224, in <genexpr>\n\tself._tx.as_literal(p) if p is not None else b\"NULL\" for p in params\n\t^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_transform.py\", line 198, in as_literal\n\tdumper = self.get_dumper(obj, PY_TEXT)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_transform.py\", line 245, in get_dumper\n\traise ex from None\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_transform.py\", line 243, in get_dumper\n\tdcls = self.adapters.get_dumper(key, format)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/path/to/projects/django-sample/.direnv/python-3.11/lib/python3.11/site-packages/psycopg/_adapters_map.py\", line 223, in get_dumper\n\traise e.ProgrammingError(\npsycopg.ProgrammingError: cannot adapt type 'dict' using placeholder '%t' (format: TEXT)\n", "hints_text": [["This is definitely a bug. The JSONField could have an explicit encoder assigned that is required to be used for the db_default and it should be considered as well. Two questions for you David If you edit the migration to assign an output_field to the Value does it address the issue? e.g. models.JSONField(db_default=models.Value({\"foo\": \"bar\"}, JSONField())) Can you also reproduce on psycopg2?", 1706436524.0], ["Nice, yes editing the migration to define output_field=JSONField() works \ud83d\udc4d Yes reproducible on psycopg2", 1706437086.0], ["Ok then the solution is likely related IMO. We could either have the current field being assigned as output_field of the Value at deconstruction time (without db_default to prevent recursions \ud83d\ude05) or, likely more nicely, when db_default associated is generated if we're dealing with a Value and it doesn't have an explicit _output_field then use the current field. I'm not sure why we wrap db_default in Value at initialization time in the first place. The fact that a provided value doesn't adhere to the expression protocol seems like it could have been a nice way to provide the Value wrapper only when necessary at run time instead. Some ideas \u200bin this branch. Ultimately we'll need to find a way to bind Value._output_field is None to the current field, not wrapping db_default in Value in the first place seems like it makes it easier to achieve but it does cause all migrations generated since 5.0 release that make use of db_default with a literal require a new noop migration.", 1706440201.0], ["I like it \ud83d\udc4d The low impact change I was thinking was to assign field as the output field in db_default_sql() however I feel that centralising this is better. 2 questions: If someone provided supplied an expression without an output_field, and it's not resolvable, should your cached property try to set it? Also should there be a check to warn if someone supplied an expression with a resolved type not matching the field? eg currently setting something like foo = models.IntegerField(db_default=\"asdf\") will happily generate a migration but will error when it comes time to migrate.", 1706485163.0], ["Simon, David, thanks for the details so far! Would any of you be available to provide a fix for this?", 1706532401.0], ["If someone provided supplied an expression without an output_field, and it's not resolvable, should your cached property try to set it? I feel like implicit output_field assignment only makes sense in a context where we offer no way for the user to set it such as when they provide a non-expression themselves. In all other cases the user can provide an explicit output_field so it feels like we'd be guessing for them. Also should there be a check to warn if someone supplied an expression with a resolved type not matching the field? That's a good one. I'd say we might want to consider a check in future versions but not necessarily backport such check to 5.0 and have this work included as part of this ticket? Simon, David, thanks for the details so far! Would any of you be available to provide a fix for this? I'm happy to provide a fix myself or let someone familiar with the db_default work do it as well and provide a review. Were you interested in taking the work when you reported the issue David?", 1706560887.0], ["I feel like implicit output_field assignment only makes sense in a context where we offer no way for the user to set it such as when they provide a non-expression themselves. In all other cases the user can provide an explicit output_field so it feels like we'd be guessing for them. Yep agreed, so thinking more about this: when they provide a non-expression themselves. This is handled when you wrap it with Value so all good \u2713 in all other cases What made me wonder was this case foo = JSONField(db_default=Value({'foo': 'bar'})) however if we setup the warning one option may be to include warning about expressions that don't resolve like this. For complex expressions that don't resolve ideally an output_field should be supplied. Implicit setting output_field isn't helpful here \ud83d\udc4d That's a good one. I'd say we might want to consider a check in future versions but not necessarily backport such check to 5.0 and have this work included as part of this ticket? Yup not as a backport \ud83d\udc4d As per process will ask on forum before creating a ticket. Were you interested in taking the work when you reported the issue David? Not especially \ud83e\udd37\u200d\u2642\ufe0f I feel like you've already authored a solution \u263a\ufe0f", 1706566739.0], ["Thank you Simon for grabbing this ticket. Is there anything that we/I can do to help?", 1706878426.0], ["I should be able to work on it this weekend, this have been a bit hectic at work this week. If someone wants to pick it up to work begins sooner feel free to do so, I'm happy to review the changes.", 1706885676.0]], "created_at": "2024-02-03T06:21:46Z"}
{"repo": "django/django", "pull_number": 17812, "instance_id": "django__django-17812", "issue_numbers": ["35073"], "base_commit": "1b5338d03ecc962af8ab4678426bc60b0672b8dd", "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex bc26d82e934c..022dec940b60 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -60,8 +60,9 @@ def set_on_delete(collector, field, sub_objs, using):\n         def set_on_delete(collector, field, sub_objs, using):\n             collector.add_field_update(field, value, sub_objs)\n \n+        set_on_delete.lazy_sub_objs = True\n+\n     set_on_delete.deconstruct = lambda: (\"django.db.models.SET\", (value,), {})\n-    set_on_delete.lazy_sub_objs = True\n     return set_on_delete\n \n \n@@ -76,9 +77,6 @@ def SET_DEFAULT(collector, field, sub_objs, using):\n     collector.add_field_update(field, field.get_default(), sub_objs)\n \n \n-SET_DEFAULT.lazy_sub_objs = True\n-\n-\n def DO_NOTHING(collector, field, sub_objs, using):\n     pass\n \n", "test_patch": "diff --git a/tests/delete_regress/models.py b/tests/delete_regress/models.py\nindex cbe6fef33434..4bc035e1c7df 100644\n--- a/tests/delete_regress/models.py\n+++ b/tests/delete_regress/models.py\n@@ -93,9 +93,6 @@ class Item(models.Model):\n     location_value = models.ForeignKey(\n         Location, models.SET(42), default=1, db_constraint=False, related_name=\"+\"\n     )\n-    location_default = models.ForeignKey(\n-        Location, models.SET_DEFAULT, default=1, db_constraint=False, related_name=\"+\"\n-    )\n \n \n # Models for #16128\n@@ -151,3 +148,22 @@ class OrderedPerson(models.Model):\n \n     class Meta:\n         ordering = [\"name\"]\n+\n+\n+def get_best_toy():\n+    toy, _ = Toy.objects.get_or_create(name=\"best\")\n+    return toy\n+\n+\n+def get_worst_toy():\n+    toy, _ = Toy.objects.get_or_create(name=\"worst\")\n+    return toy\n+\n+\n+class Collector(models.Model):\n+    best_toy = models.ForeignKey(\n+        Toy, default=get_best_toy, on_delete=models.SET_DEFAULT, related_name=\"toys\"\n+    )\n+    worst_toy = models.ForeignKey(\n+        Toy, models.SET(get_worst_toy), related_name=\"bad_toys\"\n+    )\ndiff --git a/tests/delete_regress/tests.py b/tests/delete_regress/tests.py\nindex 89f4d5ddd89a..ce5a0db8ab86 100644\n--- a/tests/delete_regress/tests.py\n+++ b/tests/delete_regress/tests.py\n@@ -408,9 +408,17 @@ def test_set_querycount(self):\n         Item.objects.create(\n             version=version,\n             location=location,\n-            location_default=location,\n             location_value=location,\n         )\n-        # 3 UPDATEs for SET of item values and one for DELETE locations.\n-        with self.assertNumQueries(4):\n+        # 2 UPDATEs for SET of item values and one for DELETE locations.\n+        with self.assertNumQueries(3):\n             location.delete()\n+\n+\n+class SetCallableCollectorDefaultTests(TestCase):\n+    def test_set(self):\n+        # Collector doesn't call callables used by models.SET and\n+        # models.SET_DEFAULT if not necessary.\n+        Toy.objects.create(name=\"test\")\n+        Toy.objects.all().delete()\n+        self.assertSequenceEqual(Toy.objects.all(), [])\n", "problem_statement": "models.SET's callable is called when there are no objects to update.\nDescription\n\t \nHello everybody.\nWith an upgrade from Django 4.1 to 4.2 (but also verified in Django 5.0), I've noticed a change in behavior with how on_delete=models.SET is handled.\nGiven the following models:\nfrom django.db import models\nclass Person(models.Model):\n\tname = models.CharField(max_length=32)\n\tdef __str__(self):\n\t\treturn self.name\ndef get_default_person():\n\treturn Person.objects.get_or_create(name=\"ghost\")[0]\nclass Pet(models.Model):\n\tname = models.CharField(max_length=32)\n\tperson = models.ForeignKey(Person, related_name=\"pets\", on_delete=models.SET(get_default_person))\n\tdef __str__(self):\n\t\treturn self.name\nI can see what follows in Django 4.2+ (in ./manage.py shell):\n>>> from pets.models import Person, Pet\n>>> Person.objects.all()\n<QuerySet []>\n>>> Pet.objects.all()\n<QuerySet []>\n>>> Person.objects.create(name=\"johndoe\")\n<Person: johndoe>\n>>> Person.objects.all()\n<QuerySet [<Person: johndoe>]>\n>>> Person.objects.all().delete()\n(1, {'pets.Person': 1})\n>>> Person.objects.all()\n<QuerySet [<Person: ghost>]>\nWhat is strange to me is that the \"ghost\" Person instance is created upon deletion of the \"johndoe\" instance, even if there are no Pets with a ForeignKey to \"johndoe\".\nDjango 4.1 behaves differently (no \"ghost\" Person is created on deletion of other Person objects).\nIs this an intended change? I couldn't find any documentation of this in the release notes.\nThanks so much for your help.\nFabio\n", "hints_text": [["Thanks for the report. Regression in 0701bb8e1f1771b36cdde45602ad377007e372b3.", 1704092501.0], ["We should fix that. I think the most straightforward solution is to only set lazy_sub_objs = True on the function returned by SET if the value is not a callable. The same problem exists for SET_DEFAULT when the default is callable.", 1704106156.0], ["@O'ktamjon are you still working on this? If not, I can work on it.", 1706267751.0]], "created_at": "2024-02-02T16:31:53Z"}
{"repo": "django/django", "pull_number": 17811, "instance_id": "django__django-17811", "issue_numbers": ["29725"], "base_commit": "0d8fbe2ade29f1b7bd9e6ba7a0281f5478603a43", "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 62ddfc60b3d3..a8f298230ab2 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -75,7 +75,7 @@ class Child(Model):\n     router,\n     transaction,\n )\n-from django.db.models import Q, Window, signals\n+from django.db.models import Manager, Q, Window, signals\n from django.db.models.functions import RowNumber\n from django.db.models.lookups import GreaterThan, LessThanOrEqual\n from django.db.models.query import QuerySet\n@@ -1121,6 +1121,12 @@ def _apply_rel_filters(self, queryset):\n             queryset._defer_next_filter = True\n             return queryset._next_is_sticky().filter(**self.core_filters)\n \n+        def get_prefetch_cache(self):\n+            try:\n+                return self.instance._prefetched_objects_cache[self.prefetch_cache_name]\n+            except (AttributeError, KeyError):\n+                return None\n+\n         def _remove_prefetched_objects(self):\n             try:\n                 self.instance._prefetched_objects_cache.pop(self.prefetch_cache_name)\n@@ -1128,9 +1134,9 @@ def _remove_prefetched_objects(self):\n                 pass  # nothing to clear from cache\n \n         def get_queryset(self):\n-            try:\n-                return self.instance._prefetched_objects_cache[self.prefetch_cache_name]\n-            except (AttributeError, KeyError):\n+            if (cache := self.get_prefetch_cache()) is not None:\n+                return cache\n+            else:\n                 queryset = super().get_queryset()\n                 return self._apply_rel_filters(queryset)\n \n@@ -1195,6 +1201,45 @@ def get_prefetch_querysets(self, instances, querysets=None):\n                 False,\n             )\n \n+        @property\n+        def constrained_target(self):\n+            # If the through relation's target field's foreign integrity is\n+            # enforced, the query can be performed solely against the through\n+            # table as the INNER JOIN'ing against target table is unnecessary.\n+            if not self.target_field.db_constraint:\n+                return None\n+            db = router.db_for_read(self.through, instance=self.instance)\n+            if not connections[db].features.supports_foreign_keys:\n+                return None\n+            hints = {\"instance\": self.instance}\n+            manager = self.through._base_manager.db_manager(db, hints=hints)\n+            filters = {self.source_field_name: self.instance.pk}\n+            # Nullable target rows must be excluded as well as they would have\n+            # been filtered out from an INNER JOIN.\n+            if self.target_field.null:\n+                filters[\"%s__isnull\" % self.target_field_name] = False\n+            return manager.filter(**filters)\n+\n+        def exists(self):\n+            if (\n+                superclass is Manager\n+                and self.get_prefetch_cache() is None\n+                and (constrained_target := self.constrained_target) is not None\n+            ):\n+                return constrained_target.exists()\n+            else:\n+                return super().exists()\n+\n+        def count(self):\n+            if (\n+                superclass is Manager\n+                and self.get_prefetch_cache() is None\n+                and (constrained_target := self.constrained_target) is not None\n+            ):\n+                return constrained_target.count()\n+            else:\n+                return super().count()\n+\n         def add(self, *objs, through_defaults=None):\n             self._remove_prefetched_objects()\n             db = router.db_for_write(self.through, instance=self.instance)\n", "test_patch": "diff --git a/tests/many_to_many/models.py b/tests/many_to_many/models.py\nindex 42fc42699045..df7222e08db7 100644\n--- a/tests/many_to_many/models.py\n+++ b/tests/many_to_many/models.py\n@@ -78,3 +78,15 @@ class InheritedArticleA(AbstractArticle):\n \n class InheritedArticleB(AbstractArticle):\n     pass\n+\n+\n+class NullableTargetArticle(models.Model):\n+    headline = models.CharField(max_length=100)\n+    publications = models.ManyToManyField(\n+        Publication, through=\"NullablePublicationThrough\"\n+    )\n+\n+\n+class NullablePublicationThrough(models.Model):\n+    article = models.ForeignKey(NullableTargetArticle, models.CASCADE)\n+    publication = models.ForeignKey(Publication, models.CASCADE, null=True)\ndiff --git a/tests/many_to_many/tests.py b/tests/many_to_many/tests.py\nindex 7ed3b80abc33..351e4eb8cc53 100644\n--- a/tests/many_to_many/tests.py\n+++ b/tests/many_to_many/tests.py\n@@ -1,10 +1,18 @@\n from unittest import mock\n \n-from django.db import transaction\n+from django.db import connection, transaction\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango60Warning\n \n-from .models import Article, InheritedArticleA, InheritedArticleB, Publication, User\n+from .models import (\n+    Article,\n+    InheritedArticleA,\n+    InheritedArticleB,\n+    NullablePublicationThrough,\n+    NullableTargetArticle,\n+    Publication,\n+    User,\n+)\n \n \n class ManyToManyTests(TestCase):\n@@ -558,10 +566,16 @@ def test_inherited_models_selects(self):\n     def test_custom_default_manager_exists_count(self):\n         a5 = Article.objects.create(headline=\"deleted\")\n         a5.publications.add(self.p2)\n-        self.assertEqual(self.p2.article_set.count(), self.p2.article_set.all().count())\n-        self.assertEqual(\n-            self.p3.article_set.exists(), self.p3.article_set.all().exists()\n-        )\n+        with self.assertNumQueries(2) as ctx:\n+            self.assertEqual(\n+                self.p2.article_set.count(), self.p2.article_set.all().count()\n+            )\n+        self.assertIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+        with self.assertNumQueries(2) as ctx:\n+            self.assertEqual(\n+                self.p3.article_set.exists(), self.p3.article_set.all().exists()\n+            )\n+        self.assertIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n \n     def test_get_prefetch_queryset_warning(self):\n         articles = Article.objects.all()\n@@ -582,3 +596,73 @@ def test_get_prefetch_querysets_invalid_querysets_length(self):\n                 instances=articles,\n                 querysets=[Publication.objects.all(), Publication.objects.all()],\n             )\n+\n+\n+class ManyToManyQueryTests(TestCase):\n+    \"\"\"\n+    SQL is optimized to reference the through table without joining against the\n+    related table when using count() and exists() functions on a queryset for\n+    many to many relations. The optimization applies to the case where there\n+    are no filters.\n+    \"\"\"\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.article = Article.objects.create(\n+            headline=\"Django lets you build Web apps easily\"\n+        )\n+        cls.nullable_target_article = NullableTargetArticle.objects.create(\n+            headline=\"The python is good\"\n+        )\n+        NullablePublicationThrough.objects.create(\n+            article=cls.nullable_target_article, publication=None\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_foreign_keys\")\n+    def test_count_join_optimization(self):\n+        with self.assertNumQueries(1) as ctx:\n+            self.article.publications.count()\n+        self.assertNotIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+\n+        with self.assertNumQueries(1) as ctx:\n+            self.article.publications.count()\n+        self.assertNotIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+        self.assertEqual(self.nullable_target_article.publications.count(), 0)\n+\n+    def test_count_join_optimization_disabled(self):\n+        with (\n+            mock.patch.object(connection.features, \"supports_foreign_keys\", False),\n+            self.assertNumQueries(1) as ctx,\n+        ):\n+            self.article.publications.count()\n+\n+        self.assertIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+\n+    @skipUnlessDBFeature(\"supports_foreign_keys\")\n+    def test_exists_join_optimization(self):\n+        with self.assertNumQueries(1) as ctx:\n+            self.article.publications.exists()\n+        self.assertNotIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+\n+        self.article.publications.prefetch_related()\n+        with self.assertNumQueries(1) as ctx:\n+            self.article.publications.exists()\n+        self.assertNotIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+        self.assertIs(self.nullable_target_article.publications.exists(), False)\n+\n+    def test_exists_join_optimization_disabled(self):\n+        with (\n+            mock.patch.object(connection.features, \"supports_foreign_keys\", False),\n+            self.assertNumQueries(1) as ctx,\n+        ):\n+            self.article.publications.exists()\n+\n+        self.assertIn(\"JOIN\", ctx.captured_queries[0][\"sql\"])\n+\n+    def test_prefetch_related_no_queries_optimization_disabled(self):\n+        qs = Article.objects.prefetch_related(\"publications\")\n+        article = qs.get()\n+        with self.assertNumQueries(0):\n+            article.publications.count()\n+        with self.assertNumQueries(0):\n+            article.publications.exists()\n", "problem_statement": "Inefficient SQL generated when counting a ManyToMany\nDescription\n\t \nWhen calling count() on an unfiltered many to many relation, a useless join is included in the SQL that makes it much slower than it should be. On my dataset, the difference is 1000ms to 100ms, because an index-only scan can be used.\nThis is the SQL that is currently generated:\nSELECT COUNT(*) AS \"__count\"\nFROM \"app_foo\"\nINNER JOIN \"app_foo_bar\" ON (\"app_foo\".\"id\" = \"app_foo_bar\".\"foo_id\")\nWHERE \"app_foo_bar\".\"foo_id\" = ?;\nThis is the SQL that should be generated:\nSELECT COUNT(*) AS \"__count\"\nFROM \"app_foo_bar\"\nWHERE \"app_foo_bar\".\"foo_id\" = ?;\nThis optimization can only be applied when there are no filters applied, because then the join is used to satisfy the filters. In the no-filters case, only the through table needs to be consulted.\n", "hints_text": [["Hello Olivier, I think you should be able to achieve this by defining a count() method on the dynamic class created by create_forward_many_to_many_manager by filtering self.through._default_manager based on self.instance and return its count().", 1535801454.0], ["Thanks for your advice. I will try to correct it according to your advice Replying to Simon Charette: Hello Olivier, I think you should be able to achieve this by defining a count() method on the dynamic class created by create_forward_many_to_many_manager by filtering self.through._default_manager based on self.instance and return its count().", 1535944724.0], ["\u200bhttps://github.com/django/django/pull/10366", 1536029303.0], ["Have we considered making this change for exists() as well? I'm sure this will generate the join in the same way that count() does. Also somewhat related: #28477", 1536120919.0], ["Doing it for exists() as well makes sense.", 1536135073.0], ["In 1299421: Fixed #29725 -- Removed unnecessary join in QuerySet.count() and exists() on a many-to-many relation.", 1539597750.0], ["In 5f7991c4: Fixed #30325 -- Reverted \"Fixed #29725 -- Removed unnecessary join in QuerySet.count() and exists() on a many-to-many relation.\" This reverts commit 1299421cadc4fcf63585f2f88337078e43e660e0 due to a regression with custom managers.", 1555306790.0], ["In e8de1cc9: [2.2.x] Fixed #30325 -- Reverted \"Fixed #29725 -- Removed unnecessary join in QuerySet.count() and exists() on a many-to-many relation.\" This reverts commit 1299421cadc4fcf63585f2f88337078e43e660e0 due to a regression with custom managers. Backport of 5f7991c42cff73b6278106d499d719b726f85ead from master", 1555306852.0], ["Solution has been reverted because it caused the inconsistent behavior of count() and exists() on a reverse many-to-many relationship with a custom manager (see new tests in 9ac8520fcde29840a1345be19d80dbda53aa6d03).", 1555307190.0], ["Switched back to patch needs improvement instead as it can probably be adapted to skip the optimization when a custom manager is defined.", 1555323707.0], ["Ticket #30325 revealed one more issue, i.e. optimization doesn't work when chaining all() after reverse M2M relations.", 1555328849.0], ["Additionally, the optimization causes a query to be done if the related objects have already been prefetched.", 1556037568.0], ["Thanks everyone for your insights. Im going to try to implement this optimization, accounting for all the issues listed here so far. \u200bPR", 1684249671.0], ["Patch needs a few tweaks to properly disable the optimization when dealing with custom manager. It also lacks coverage for the prefetched case as reported in comment:18.", 1684280565.0]], "created_at": "2024-02-02T14:21:45Z"}
{"repo": "django/django", "pull_number": 17810, "instance_id": "django__django-17810", "issue_numbers": ["35021"], "base_commit": "177e6493961dfcdafb44e5b02894bf4201050910", "patch": "diff --git a/django/db/backends/postgresql/features.py b/django/db/backends/postgresql/features.py\nindex 809466fc7fe4..ef697e85b03a 100644\n--- a/django/db/backends/postgresql/features.py\n+++ b/django/db/backends/postgresql/features.py\n@@ -105,6 +105,15 @@ def django_test_skips(self):\n                     },\n                 }\n             )\n+        if self.uses_server_side_binding:\n+            skips.update(\n+                {\n+                    \"The actual query cannot be determined for server side bindings\": {\n+                        \"backends.base.test_base.ExecuteWrapperTests.\"\n+                        \"test_wrapper_debug\",\n+                    }\n+                },\n+            )\n         return skips\n \n     @cached_property\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 06981bc09401..4e444d5f2b16 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -296,9 +296,14 @@ def distinct_sql(self, fields, params):\n     if is_psycopg3:\n \n         def last_executed_query(self, cursor, sql, params):\n-            try:\n-                return self.compose_sql(sql, params)\n-            except errors.DataError:\n+            if self.connection.features.uses_server_side_binding:\n+                try:\n+                    return self.compose_sql(sql, params)\n+                except errors.DataError:\n+                    return None\n+            else:\n+                if cursor._query and cursor._query.query is not None:\n+                    return cursor._query.query.decode()\n                 return None\n \n     else:\ndiff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py\nindex 713d8bd38ff9..d95c6fb2d108 100644\n--- a/django/db/backends/sqlite3/features.py\n+++ b/django/db/backends/sqlite3/features.py\n@@ -89,6 +89,9 @@ def django_test_skips(self):\n                 \"db_functions.math.test_round.RoundTests.\"\n                 \"test_integer_with_negative_precision\",\n             },\n+            \"The actual query cannot be determined on SQLite\": {\n+                \"backends.base.test_base.ExecuteWrapperTests.test_wrapper_debug\",\n+            },\n         }\n         if self.connection.is_in_memory_db():\n             skips.update(\n", "test_patch": "diff --git a/tests/backends/base/test_base.py b/tests/backends/base/test_base.py\nindex 03356fbf1048..4418d010ea88 100644\n--- a/tests/backends/base/test_base.py\n+++ b/tests/backends/base/test_base.py\n@@ -211,6 +211,16 @@ def test_wrapper_connection_specific(self):\n         self.assertEqual(connection.execute_wrappers, [])\n         self.assertEqual(connections[\"other\"].execute_wrappers, [])\n \n+    def test_wrapper_debug(self):\n+        def wrap_with_comment(execute, sql, params, many, context):\n+            return execute(f\"/* My comment */ {sql}\", params, many, context)\n+\n+        with CaptureQueriesContext(connection) as ctx:\n+            with connection.execute_wrapper(wrap_with_comment):\n+                list(Person.objects.all())\n+        last_query = ctx.captured_queries[-1][\"sql\"]\n+        self.assertTrue(last_query.startswith(\"/* My comment */\"))\n+\n \n class ConnectionHealthChecksTests(SimpleTestCase):\n     databases = {\"default\"}\n", "problem_statement": "Debug query capturing on psycopg3 disregards execute wrappers.\nDescription\n\t \nProblem\nI use \u200bconnection.execute_wrapper as a way to add comments to certain queries (see code at the end for reference). And I test the wrapper using assertNumQueries (see code at end for reference). Once I switched from psycopg2 to psycopg3, this test started failing: the unmodified query is captured, instead of the query modified by the execute wrapper. Note however that the modified query is what is actually sent to the DB, so this is only a debug issue.\nI expect it's the same for django.db.backends debug logs but I haven't verified this.\nAnalysis\nI've traced the issue to the following code in postgresql.DatabaseOperations.last_executed_query \u200bhttps://github.com/django/django/blob/66d58e77de3196404e0820a6fef0a6144186015a/django/db/backends/postgresql/operations.py#L296-L311:\n\tif is_psycopg3:\n\t\tdef last_executed_query(self, cursor, sql, params):\n\t\t\ttry:\n\t\t\t\treturn self.compose_sql(sql, params)\n\t\t\texcept errors.DataError:\n\t\t\t\treturn None\n\telse:\n\t\tdef last_executed_query(self, cursor, sql, params):\n\t\t\t# https://www.psycopg.org/docs/cursor.html#cursor.query\n\t\t\t# The query attribute is a Psycopg extension to the DB API 2.0.\n\t\t\tif cursor.query is not None:\n\t\t\t\treturn cursor.query.decode()\n\t\t\treturn None\npsycopg2 uses cursor.query which ends up being the modified query. psycopg3 uses whatever's passed in which ends up being the unmodified query.\nIt seems like psycopg3 has an equivalent in \u200bcursor._query. It is documented in the API reference but with a warning \"You shouldn\u2019t consider it part of the public interface of the object: it might change without warnings. [...] If you would like to build reliable features using this object, please get in touch so we can try and design an useful interface for it.\". So if this is the desired solution, will need to work with psycopg to expose a stable interface.\nReproduction code\nExample execute wrapper:\ndef db_comment_wrapper(comment: str) -> AbstractContextManager[None]:\n\tdef handler(execute, sql, params, many, context):\n\t\tclean_comment = escape(comment)\n\t\treturn execute(f'/* {clean_comment} */ {sql}', params, many, context)\n\treturn db_connection.execute_wrapper(handler)\nTest:\nwith self.assertNumQueries(1) as captured:\n\twith db_comment_wrapper('This is a comment'):\n\t\tlist(ContentType.objects.all())\nsql = captured[0]['sql']\nassert sql.startswith('/* This is a comment */')\n", "hints_text": [["As far as I'm aware, there is no way to support it with psycopg's public API, so I'd not treat this as a bug. Daniele, What do you think about extending psycopg's API?", 1701846174.0], ["Daniele, What do you think about extending psycopg's API? I opened an \u200bissue to continue a discussion with the psycopg maintainers.", 1702273111.0], ["I think the new code was written like this because we cannot ever determine the actual query for server side bindings.", 1702273384.0], ["I understand that Django use ClientCursor only, right? I think that the first iterations of the backend used to use server-side-binding cursors and maybe the current implementation of last_executed_query() was catered to that. I have added a proposal to \u200bthe upstream ticket.", 1702281605.0], ["Replying to Daniele Varrazzo: I understand that Django use ClientCursor only, right? I think that the first iterations of the backend used to use server-side-binding cursors and maybe the current implementation of last_executed_query() was catered to that. Django defaults to ClientCursor but it can be changed to server-side-binding cursors via settings.", 1702288759.0], ["Tentatively accepted. I think it's worth fixing even just for ClientCursor. Server-side binding cursors have a few other minor limitations in Django, so one more should not be a big surprise.", 1702305202.0]], "created_at": "2024-02-02T12:46:51Z"}
{"repo": "django/django", "pull_number": 17804, "instance_id": "django__django-17804", "issue_numbers": ["35156"], "base_commit": "38eaf2f21a2398a8dd8444f6df3723898cb5fe2a", "patch": "diff --git a/docs/topics/db/multi-db.txt b/docs/topics/db/multi-db.txt\nindex 8da71df25009..be7e9953fa8f 100644\n--- a/docs/topics/db/multi-db.txt\n+++ b/docs/topics/db/multi-db.txt\n@@ -740,14 +740,14 @@ primary key of the related object is valid. If the primary key is\n stored on a separate database, it's not possible to easily evaluate\n the validity of a primary key.\n \n-If you're using Postgres, Oracle, or MySQL with InnoDB, this is\n+If you're using Postgres, SQLite, Oracle, or MySQL with InnoDB, this is\n enforced at the database integrity level -- database level key\n constraints prevent the creation of relations that can't be validated.\n \n-However, if you're using SQLite or MySQL with MyISAM tables, there is\n-no enforced referential integrity; as a result, you may be able to\n-'fake' cross database foreign keys. However, this configuration is not\n-officially supported by Django.\n+However, if you're using MySQL with MyISAM tables, there is no enforced\n+referential integrity; as a result, you may be able to 'fake' cross database\n+foreign keys. However, this configuration is not officially supported by\n+Django.\n \n .. _contrib_app_multiple_databases:\n \n", "test_patch": "", "problem_statement": "Update Doc comment about SQLite foreign keys\nDescription\n\t \n\u200bMulti-database docs say the following:\nHowever, if you\u2019re using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to \u2018fake\u2019 cross database foreign keys.\nBut, foreign keys are enforced at the database level in SQLite, because \u200bthe PRAGMA is turned on.\nShould this comment be updated?\n", "hints_text": [["Hi, It seems you might be correct. The paragraph of documentation you linked to was introduced 14 years ago with #13316, whereas FK constraint were turned on in sqlite only 7 years ago with #14204 (I found that using the \"blame\" feature on github). So we should fix this, but that leaves me with two questions: 1) Is the comment about MyISAM tables still correct then? 2) Are there other places in the documentation that could be incorrect with regards to sqlite and FK constraints?", 1706632982.0], ["Replying to Baptiste Mispelon: 1) Is the comment about MyISAM tables still correct then? Yes, it is \u200bhttps://dev.mysql.com/doc/refman/8.3/en/ansi-diff-foreign-keys.html: \"For storage engines that do not support foreign keys (such as MyISAM),...\"", 1706655985.0], ["2) Are there other places in the documentation that could be incorrect with regards to sqlite and FK constraints? I just looked and didn't find any.", 1706690910.0], ["I can open a PR.", 1706692698.0], ["\u200bPR 17803", 1706693945.0], ["In b3dc8068: Fixed #35156 -- Removed outdated note about not supporting foreign keys by SQLite.", 1706700931.0], ["In d28c61b: [5.0.x] Fixed #35156 -- Removed outdated note about not supporting foreign keys by SQLite. Backport of b3dc80682e678b20c89fb2a430c0bc77960a29ac from main", 1706700944.0]], "created_at": "2024-01-31T16:51:39Z"}
{"repo": "django/django", "pull_number": 17801, "instance_id": "django__django-17801", "issue_numbers": ["35159"], "base_commit": "c317e81378a15379cba4abc289d9519ee0335a80", "patch": "diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py\nindex cc183517e302..01ff8974dd14 100644\n--- a/django/core/management/commands/dumpdata.py\n+++ b/django/core/management/commands/dumpdata.py\n@@ -219,7 +219,10 @@ def get_objects(count_only=False):\n                     if count_only:\n                         yield queryset.order_by().count()\n                     else:\n-                        yield from queryset.iterator()\n+                        chunk_size = (\n+                            2000 if queryset._prefetch_related_lookups else None\n+                        )\n+                        yield from queryset.iterator(chunk_size=chunk_size)\n \n         try:\n             self.stdout.ending = None\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex 8e2d648ecce8..83f1af7b4f00 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -24,3 +24,7 @@ Bugfixes\n   ``FilteredRelation()`` with querysets as right-hand sides (:ticket:`35135`).\n   ``FilteredRelation()`` now raises a ``ValueError`` on querysets as right-hand\n   sides.\n+\n+* Fixed a regression in Django 5.0 that caused a crash of the ``dumpdata``\n+  management command when a base queryset used ``prefetch_related()``\n+  (:ticket:`35159`).\n", "test_patch": "diff --git a/tests/fixtures/models.py b/tests/fixtures/models.py\nindex 37b0066d70c3..c87e170afc9d 100644\n--- a/tests/fixtures/models.py\n+++ b/tests/fixtures/models.py\n@@ -101,9 +101,15 @@ class Meta:\n         proxy = True\n \n \n+class VisaManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().prefetch_related(\"permissions\")\n+\n+\n class Visa(models.Model):\n     person = models.ForeignKey(Person, models.CASCADE)\n     permissions = models.ManyToManyField(Permission, blank=True)\n+    objects = VisaManager()\n \n     def __str__(self):\n         return \"%s %s\" % (\ndiff --git a/tests/fixtures/tests.py b/tests/fixtures/tests.py\nindex 78141b25b430..bce55bc3554d 100644\n--- a/tests/fixtures/tests.py\n+++ b/tests/fixtures/tests.py\n@@ -830,6 +830,22 @@ def test_dumpdata_proxy_with_concrete(self):\n             )\n         self.assertEqual(len(warning_list), 0)\n \n+    def test_dumpdata_objects_with_prefetch_related(self):\n+        management.call_command(\n+            \"loaddata\", \"fixture6.json\", \"fixture8.json\", verbosity=0\n+        )\n+        with self.assertNumQueries(5):\n+            self._dumpdata_assert(\n+                [\"fixtures.visa\"],\n+                '[{\"fields\": {\"permissions\": [[\"add_user\", \"auth\", \"user\"]],'\n+                '\"person\": [\"Stephane Grappelli\"]},'\n+                '\"model\": \"fixtures.visa\", \"pk\": 2},'\n+                '{\"fields\": {\"permissions\": [], \"person\": [\"Prince\"]},'\n+                '\"model\": \"fixtures.visa\", \"pk\": 3}]',\n+                natural_foreign_keys=True,\n+                primary_keys=\"2,3\",\n+            )\n+\n     def test_compress_format_loading(self):\n         # Load fixture 4 (compressed), using format specification\n         management.call_command(\"loaddata\", \"fixture4.json\", verbosity=0)\n", "problem_statement": "dumpdata crashes on querysets with prefetch_related().\nDescription\n\t \nThe ./manage.py dumpdata management command calls iterator() on the QuerySets of the models, but it does not pass chunk_size(\u200bhttps://github.com/django/django/blob/main/django/core/management/commands/dumpdata.py#L222). On model QuerySets that include prefetch_related, this now (with 5.0) causes this error while running dumpdata:\nCommandError: Unable to serialize database: chunk_size must be provided when using QuerySet.iterator() after prefetch_related().\nProposed fix is to pass a suitable chunk_size parameter to iterator() within handle() in dumpdata.py.\n", "hints_text": [["Thanks for the report. Does the following patch work for you? django/core/management/commands/dumpdata.py diff --git a/django/core/management/commands/dumpdata.py b/django/core/management/commands/dumpdata.py index cc183517e3..01ff8974dd 100644 a b class Command(BaseCommand): 219219 if count_only: 220220 yield queryset.order_by().count() 221221 else: 222 yield from queryset.iterator() 222 chunk_size = ( 223 2000 if queryset._prefetch_related_lookups else None 224 ) 225 yield from queryset.iterator(chunk_size=chunk_size) 223226 224227 try: 225228 self.stdout.ending = None Regression in 139135627650ed6aaaf4c755b82c3bd43f2b8f51 (#29984).", 1706655322.0], ["\u200bPR", 1706667665.0]], "created_at": "2024-01-31T08:20:53Z"}
{"repo": "django/django", "pull_number": 17797, "instance_id": "django__django-17797", "issue_numbers": ["35145"], "base_commit": "06264258dc7c7cc69b2ba5f70f782988ccb2b06c", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex 3a80e3a3c98e..f9f47c8592eb 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -84,6 +84,8 @@ html[data-theme=\"light\"],\n         \"Segoe UI Emoji\",\n         \"Segoe UI Symbol\",\n         \"Noto Color Emoji\";\n+\n+    color-scheme: light;\n }\n \n html, body {\ndiff --git a/django/contrib/admin/static/admin/css/dark_mode.css b/django/contrib/admin/static/admin/css/dark_mode.css\nindex c49b6bc26f0e..2123be05c49b 100644\n--- a/django/contrib/admin/static/admin/css/dark_mode.css\n+++ b/django/contrib/admin/static/admin/css/dark_mode.css\n@@ -29,6 +29,8 @@\n   \n       --close-button-bg: #333333;\n       --close-button-hover-bg: #666666;\n+\n+      color-scheme: dark;\n     }\n   }\n \n@@ -63,6 +65,8 @@ html[data-theme=\"dark\"] {\n \n     --close-button-bg: #333333;\n     --close-button-hover-bg: #666666;\n+\n+    color-scheme: dark;\n }\n \n /* THEME SWITCH */\n", "test_patch": "", "problem_statement": "Django admin\u2019s dark theme should set color-scheme property for vanilla HTML components\nDescription\n\t\t\n(last modified by Thibaud Colas)\t\t\nThe Django admin uses unstyled vanilla HTML widgets for a few scenarios. Currently in the dark theme those elements are displayed with the browser\u2019s default \"light\" UI \u2013 it would better if we instructed the browser to use their dark variant with the CSS color-scheme property.\nHere\u2019s an example, where \u200bcolor-scheme affects the search field\u2019s clear button color and checkboxes, before/after:\nFor the clear button it\u2019s almost invisible without this so is a clear accessibility issue / WCAG contrast fail\nFor the checkboxes it just looks better.\nThis also affects file inputs, multi-select widgets, scrollbars, and I\u2019m sure other parts of the UI.\n---\nMy suggested solution would be to add color-scheme: dark at the root level when in dark mode, but it might be worth researching a bit to make sure we use the property as well as possible.\n", "hints_text": [["Recording of color-scheme set to dark and unset in Django admin", 1706199050.0], ["cc @erosselli who was interested in working on this (but please wait for it to be approved)", 1706199310.0]], "created_at": "2024-01-30T14:16:59Z"}
{"repo": "django/django", "pull_number": 17795, "instance_id": "django__django-17795", "issue_numbers": ["35147"], "base_commit": "f71bcc001bb3324020cfd756e84d4e9c6bb98cce", "patch": "diff --git a/docs/releases/5.0.txt b/docs/releases/5.0.txt\nindex 6b18bace4f45..a10c9d280a93 100644\n--- a/docs/releases/5.0.txt\n+++ b/docs/releases/5.0.txt\n@@ -588,6 +588,11 @@ Miscellaneous\n \n * The minimum supported version of ``docutils`` is increased to 0.19.\n \n+* Filtering querysets against overflowing integer values now always returns an\n+  empty queryset. As a consequence, you may need to use ``ExpressionWrapper()``\n+  to :ref:`explicitly wrap <using-f-with-annotations>` arithmetic against\n+  integer fields in such cases.\n+\n .. _deprecated-features-5.0:\n \n Features deprecated in 5.0\n", "test_patch": "", "problem_statement": "Document that non-wrapped arithmetic with integer fields might require explicit output_field\nDescription\n\t \nHi team,\nI faced an unexpected behaviour of the bitand method of the F model when used with a BigIntField value.\nThe change is that when I try to annotate and then filter on the promoted field, the query set is always empty, when it shouldn't be.\nCode is as follows:\nrecords_qs = Model.objects.annotate(flag_some_flag=F(\"flags\").bitand(2**34)).filter(flag_some_flag=2**34)\nThe returned queryset is empty, but it shouldn't be.\nSimple test with using only annotate and further filtration using python list comprehension from the queryset using the annotated field, returns the needed records.\nThe filtration works properly for flag values < 2**31 .\nI was looking for some notes in the Django 5 release notes, but I found nothing, and this is the version where the problem is faced. With Django 4.2.8 this problem is not faced.\nRegards,\nPetar Netev\n", "hints_text": [["A clue would be Simon Charette's answer: I'm fairly certain this relates to a commit meant to address a SQLite crash and a DDOS vector on Postgres only present in 5.0 so far[0]. I suspect we'll want to adapt _connector_combinations so when bitwise operators are used between integers fields the output field is the wider of both and not systematically IntegerField. I suspect the problem manifests itself in other cases as well such as IntegerField + IntegerField which can overflow into a BigIntegerField.", 1706362838.0], ["Thank you for your report Petar. The output field resolving logic or the ORM, particularly the combinator part used by bitand and friends, is far from perfect and it is to blame here as any IntegerField subclass \u200bcombined with another for bitwise connectors will result in a CombinedExpression(output_field=IntegerField()). The problem does not only manifests itself in expression combinations though, functions such as django.db.models.functions.Power(\"integer_field\", \"integer_field\") can also overflow. What makes combinator particularly problematic though is that they cannot have the user provide an explicit output_field like it's the case with other expressions such as functions. The only solution I can think of with the current state of things is to use ExpressionWrapper \u200bwhich is documented to be required in this case ExpressionWrapper is necessary when using arithmetic on F() expressions with different types as described in Using F() with annotations. And from \u200bthe annotation documentation about the usage of F If the fields that you\u2019re combining are of different types you\u2019ll need to tell Django what kind of field will be returned. Most expressions support output_field for this case, but since F() does not, you will need to wrap the expression with ExpressionWrapper: You haven't provided your model definition but I suspect wrapping flag_some_flag in ExpressionWrapper(F(\"flags\").bitand(2**34), BigIntegerField()) will address your problem? If that's the case I'm not against adjusting the 5.0 release notes to mention that non-wrapped arithmetic against integer fields might require adjustments, as documented, and possibly accepting a ticket to try to make the logic more generic wrt/ to integer field subclasses. Since this is clearly documented though I'm not convinced this qualifies as a release blocker that would warrant a code backport.", 1706367503.0], ["Hi Simon, Thanks for your notes. Indeed using ExpressionWrapper produces the expected behaviour. In our case we did took another approach usiing the Exact Exact(F(\"flags\").bitand(flag_value), flag_value) . It is not a blocker, as you said.", 1706491903.0], ["Given the information shared so far (thanks Simon and Petar!), I agree this is not a release blocker and that documentation changes could help future users. Accepting on such basis. Petar, would you be able/like to prepare a patch for the docs improvements?", 1706532022.0], ["Hi Natalia and Simon, I would like to prepare the patch, but I would need some clarifications on it. Do we reference the release notes for version 5.0, specifically \u200bhttps://docs.djangoproject.com/en/5.0/releases/5.0/#models ? Do we reference the documentation of the F() \u200bhttps://docs.djangoproject.com/en/5.0/releases/5.0/#models ? Simon, can you share the commit related to \"I'm fairly certain this relates to a commit meant to address a SQLite crash and a DDOS vector on Postgres only present in 5.0\" in order to mention it in the docs improvements? Thank you both!", 1706535397.0], ["Replying to Petar Netev: Hi Natalia and Simon, I would like to prepare the patch, but I would need some clarifications on it. Do we reference the release notes for version 5.0, specifically \u200bhttps://docs.djangoproject.com/en/5.0/releases/5.0/#models ? Do we reference the documentation of the F() \u200bhttps://docs.djangoproject.com/en/5.0/releases/5.0/#models ? Simon, can you share the commit related to \"I'm fairly certain this relates to a commit meant to address a SQLite crash and a DDOS vector on Postgres only present in 5.0\" in order to mention it in the docs improvements? dde2537fbb04ad78a673092a931b449245a2d6ae is the commit I was referring to, we don't refer to commits or ticket numbers in docs though. I think the existing documentation is clear enough that ExpressionWrapper might be necessary in these cases, the only admonition I would add, assuming we believe it might be valuable is a note in \u200bthe miscellaneous section of the 5.0 release notes mentioning that explicit ExpressionWrapper wrapping might be necessary for integer field arithmetic that can overflow while it wasn't the case in previous release by referencing at the documentation mentioned in comment:2.", 1706560489.0]], "created_at": "2024-01-30T08:25:49Z"}
{"repo": "django/django", "pull_number": 17794, "instance_id": "django__django-17794", "issue_numbers": ["35152"], "base_commit": "11393ab1316f973c5fbb534305750740d909b4e4", "patch": "diff --git a/django/conf/locale/en_CA/__init__.py b/django/conf/locale/en_CA/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/django/conf/locale/en_CA/formats.py b/django/conf/locale/en_CA/formats.py\nnew file mode 100644\nindex 000000000000..b34551de90bb\n--- /dev/null\n+++ b/django/conf/locale/en_CA/formats.py\n@@ -0,0 +1,31 @@\n+# This file is distributed under the same license as the Django package.\n+#\n+# The *_FORMAT strings use the Django date format syntax,\n+# see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n+\n+DATE_FORMAT = \"j M Y\"  # 25 Oct 2006\n+TIME_FORMAT = \"P\"  # 2:30 p.m.\n+DATETIME_FORMAT = \"j M Y, P\"  # 25 Oct 2006, 2:30 p.m.\n+YEAR_MONTH_FORMAT = \"F Y\"  # October 2006\n+MONTH_DAY_FORMAT = \"j F\"  # 25 October\n+SHORT_DATE_FORMAT = \"Y-m-d\"\n+SHORT_DATETIME_FORMAT = \"Y-m-d P\"\n+FIRST_DAY_OF_WEEK = 0  # Sunday\n+\n+# The *_INPUT_FORMATS strings use the Python strftime format syntax,\n+# see https://docs.python.org/library/datetime.html#strftime-strptime-behavior\n+DATE_INPUT_FORMATS = [\n+    \"%Y-%m-%d\",  # '2006-05-15'\n+    \"%y-%m-%d\",  # '06-05-15'\n+]\n+DATETIME_INPUT_FORMATS = [\n+    \"%Y-%m-%d %H:%M:%S\",  # '2006-05-15 14:30:57'\n+    \"%y-%m-%d %H:%M:%S\",  # '06-05-15 14:30:57'\n+    \"%Y-%m-%d %H:%M:%S.%f\",  # '2006-05-15 14:30:57.000200'\n+    \"%y-%m-%d %H:%M:%S.%f\",  # '06-05-15 14:30:57.000200'\n+    \"%Y-%m-%d %H:%M\",  # '2006-05-15 14:30'\n+    \"%y-%m-%d %H:%M\",  # '06-05-15 14:30'\n+]\n+DECIMAL_SEPARATOR = \".\"\n+THOUSAND_SEPARATOR = \"\\xa0\"  # non-breaking space\n+NUMBER_GROUPING = 3\ndiff --git a/django/conf/locale/fr_CA/formats.py b/django/conf/locale/fr_CA/formats.py\nindex b03e4ee4c31e..4f1a017f168d 100644\n--- a/django/conf/locale/fr_CA/formats.py\n+++ b/django/conf/locale/fr_CA/formats.py\n@@ -9,7 +9,7 @@\n MONTH_DAY_FORMAT = \"j F\"\n SHORT_DATE_FORMAT = \"Y-m-d\"\n SHORT_DATETIME_FORMAT = \"Y-m-d H\\xa0h\\xa0i\"\n-FIRST_DAY_OF_WEEK = 1  # Lundi\n+FIRST_DAY_OF_WEEK = 0  # Dimanche\n \n # The *_INPUT_FORMATS strings use the Python strftime format syntax,\n # see https://docs.python.org/library/datetime.html#strftime-strptime-behavior\n", "test_patch": "", "problem_statement": "Add Canadian English (en_CA) to locale conf\nDescription\n\t\t\n(last modified by Tim Graham)\t\t\nAdd Canadian English (en_CA) to locale conf, similar to #21237 and 1ac397674b2f64d48e66502a20b9d9ca6bfb579a.\n", "hints_text": [["Github pull request: \u200bhttps://github.com/django/django/pull/17794", 1706557437.0]], "created_at": "2024-01-30T01:43:37Z"}
{"repo": "django/django", "pull_number": 17792, "instance_id": "django__django-17792", "issue_numbers": ["31405"], "base_commit": "7857507c7fc43350701700d4215a37baea7655f0", "patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex bb02cb08ace7..dc67262afc50 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -7,11 +7,12 @@\n from django.contrib.admin.exceptions import AlreadyRegistered, NotRegistered\n from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from django.contrib.auth import REDIRECT_FIELD_NAME\n+from django.contrib.auth.decorators import login_not_required\n from django.core.exceptions import ImproperlyConfigured\n from django.db.models.base import ModelBase\n from django.http import Http404, HttpResponsePermanentRedirect, HttpResponseRedirect\n from django.template.response import TemplateResponse\n-from django.urls import NoReverseMatch, Resolver404, resolve, reverse\n+from django.urls import NoReverseMatch, Resolver404, resolve, reverse, reverse_lazy\n from django.utils.decorators import method_decorator\n from django.utils.functional import LazyObject\n from django.utils.module_loading import import_string\n@@ -259,6 +260,8 @@ def wrapper(*args, **kwargs):\n                 return self.admin_view(view, cacheable)(*args, **kwargs)\n \n             wrapper.admin_site = self\n+            # Used by LoginRequiredMiddleware.\n+            wrapper.login_url = reverse_lazy(\"admin:login\", current_app=self.name)\n             return update_wrapper(wrapper, view)\n \n         # Admin-site-wide views.\n@@ -402,6 +405,7 @@ def logout(self, request, extra_context=None):\n         return LogoutView.as_view(**defaults)(request)\n \n     @method_decorator(never_cache)\n+    @login_not_required\n     def login(self, request, extra_context=None):\n         \"\"\"\n         Display the login form for the given HttpRequest.\ndiff --git a/django/contrib/auth/apps.py b/django/contrib/auth/apps.py\nindex 4882a27c4216..ad6f81680909 100644\n--- a/django/contrib/auth/apps.py\n+++ b/django/contrib/auth/apps.py\n@@ -5,7 +5,7 @@\n from django.utils.translation import gettext_lazy as _\n \n from . import get_user_model\n-from .checks import check_models_permissions, check_user_model\n+from .checks import check_middleware, check_models_permissions, check_user_model\n from .management import create_permissions\n from .signals import user_logged_in\n \n@@ -28,3 +28,4 @@ def ready(self):\n             user_logged_in.connect(update_last_login, dispatch_uid=\"update_last_login\")\n         checks.register(check_user_model, checks.Tags.models)\n         checks.register(check_models_permissions, checks.Tags.models)\n+        checks.register(check_middleware)\ndiff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex ee8082524d52..f2f9a74a6c83 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -4,10 +4,27 @@\n from django.apps import apps\n from django.conf import settings\n from django.core import checks\n+from django.utils.module_loading import import_string\n \n from .management import _get_builtin_permissions\n \n \n+def _subclass_index(class_path, candidate_paths):\n+    \"\"\"\n+    Return the index of dotted class path (or a subclass of that class) in a\n+    list of candidate paths. If it does not exist, return -1.\n+    \"\"\"\n+    cls = import_string(class_path)\n+    for index, path in enumerate(candidate_paths):\n+        try:\n+            candidate_cls = import_string(path)\n+            if issubclass(candidate_cls, cls):\n+                return index\n+        except (ImportError, TypeError):\n+            continue\n+    return -1\n+\n+\n def check_user_model(app_configs=None, **kwargs):\n     if app_configs is None:\n         cls = apps.get_model(settings.AUTH_USER_MODEL)\n@@ -218,3 +235,28 @@ def check_models_permissions(app_configs=None, **kwargs):\n             codenames.add(codename)\n \n     return errors\n+\n+\n+def check_middleware(app_configs, **kwargs):\n+    errors = []\n+\n+    login_required_index = _subclass_index(\n+        \"django.contrib.auth.middleware.LoginRequiredMiddleware\",\n+        settings.MIDDLEWARE,\n+    )\n+\n+    if login_required_index != -1:\n+        auth_index = _subclass_index(\n+            \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n+            settings.MIDDLEWARE,\n+        )\n+        if auth_index == -1 or auth_index > login_required_index:\n+            errors.append(\n+                checks.Error(\n+                    \"In order to use django.contrib.auth.middleware.\"\n+                    \"LoginRequiredMiddleware, django.contrib.auth.middleware.\"\n+                    \"AuthenticationMiddleware must be defined before it in MIDDLEWARE.\",\n+                    id=\"auth.E013\",\n+                )\n+            )\n+    return errors\ndiff --git a/django/contrib/auth/decorators.py b/django/contrib/auth/decorators.py\nindex b220cc2bd39e..ea1cef079514 100644\n--- a/django/contrib/auth/decorators.py\n+++ b/django/contrib/auth/decorators.py\n@@ -60,6 +60,10 @@ def _view_wrapper(request, *args, **kwargs):\n                     return view_func(request, *args, **kwargs)\n                 return _redirect_to_login(request)\n \n+        # Attributes used by LoginRequiredMiddleware.\n+        _view_wrapper.login_url = login_url\n+        _view_wrapper.redirect_field_name = redirect_field_name\n+\n         return wraps(view_func)(_view_wrapper)\n \n     return decorator\n@@ -82,6 +86,14 @@ def login_required(\n     return actual_decorator\n \n \n+def login_not_required(view_func):\n+    \"\"\"\n+    Decorator for views that allows access to unauthenticated requests.\n+    \"\"\"\n+    view_func.login_required = False\n+    return view_func\n+\n+\n def permission_required(perm, login_url=None, raise_exception=False):\n     \"\"\"\n     Decorator for views that checks whether a user has a particular permission\ndiff --git a/django/contrib/auth/middleware.py b/django/contrib/auth/middleware.py\nindex 6b8dd4340e9f..761929d67dcd 100644\n--- a/django/contrib/auth/middleware.py\n+++ b/django/contrib/auth/middleware.py\n@@ -1,9 +1,13 @@\n from functools import partial\n+from urllib.parse import urlparse\n \n+from django.conf import settings\n from django.contrib import auth\n-from django.contrib.auth import load_backend\n+from django.contrib.auth import REDIRECT_FIELD_NAME, load_backend\n from django.contrib.auth.backends import RemoteUserBackend\n+from django.contrib.auth.views import redirect_to_login\n from django.core.exceptions import ImproperlyConfigured\n+from django.shortcuts import resolve_url\n from django.utils.deprecation import MiddlewareMixin\n from django.utils.functional import SimpleLazyObject\n \n@@ -34,6 +38,56 @@ def process_request(self, request):\n         request.auser = partial(auser, request)\n \n \n+class LoginRequiredMiddleware(MiddlewareMixin):\n+    \"\"\"\n+    Middleware that redirects all unauthenticated requests to a login page.\n+\n+    Views using the login_not_required decorator will not be redirected.\n+    \"\"\"\n+\n+    redirect_field_name = REDIRECT_FIELD_NAME\n+\n+    def process_view(self, request, view_func, view_args, view_kwargs):\n+        if request.user.is_authenticated:\n+            return None\n+\n+        if not getattr(view_func, \"login_required\", True):\n+            return None\n+\n+        return self.handle_no_permission(request, view_func)\n+\n+    def get_login_url(self, view_func):\n+        login_url = getattr(view_func, \"login_url\", None) or settings.LOGIN_URL\n+        if not login_url:\n+            raise ImproperlyConfigured(\n+                \"No login URL to redirect to. Define settings.LOGIN_URL or \"\n+                \"provide a login_url via the 'django.contrib.auth.decorators.\"\n+                \"login_required' decorator.\"\n+            )\n+        return str(login_url)\n+\n+    def get_redirect_field_name(self, view_func):\n+        return getattr(view_func, \"redirect_field_name\", self.redirect_field_name)\n+\n+    def handle_no_permission(self, request, view_func):\n+        path = request.build_absolute_uri()\n+        resolved_login_url = resolve_url(self.get_login_url(view_func))\n+        # If the login url is the same scheme and net location then use the\n+        # path as the \"next\" url.\n+        login_scheme, login_netloc = urlparse(resolved_login_url)[:2]\n+        current_scheme, current_netloc = urlparse(path)[:2]\n+        if (not login_scheme or login_scheme == current_scheme) and (\n+            not login_netloc or login_netloc == current_netloc\n+        ):\n+            path = request.get_full_path()\n+\n+        return redirect_to_login(\n+            path,\n+            resolved_login_url,\n+            self.get_redirect_field_name(view_func),\n+        )\n+\n+\n class RemoteUserMiddleware(MiddlewareMixin):\n     \"\"\"\n     Middleware for utilizing web-server-provided authentication.\ndiff --git a/django/contrib/auth/views.py b/django/contrib/auth/views.py\nindex 0d1610465593..9a6d18bcd2f5 100644\n--- a/django/contrib/auth/views.py\n+++ b/django/contrib/auth/views.py\n@@ -7,7 +7,7 @@\n from django.contrib.auth import login as auth_login\n from django.contrib.auth import logout as auth_logout\n from django.contrib.auth import update_session_auth_hash\n-from django.contrib.auth.decorators import login_required\n+from django.contrib.auth.decorators import login_not_required, login_required\n from django.contrib.auth.forms import (\n     AuthenticationForm,\n     PasswordChangeForm,\n@@ -62,6 +62,7 @@ def get_default_redirect_url(self):\n         raise ImproperlyConfigured(\"No URL to redirect to. Provide a next_page.\")\n \n \n+@method_decorator(login_not_required, name=\"dispatch\")\n class LoginView(RedirectURLMixin, FormView):\n     \"\"\"\n     Display the login form and handle the login action.\n@@ -210,6 +211,7 @@ def get_context_data(self, **kwargs):\n         return context\n \n \n+@method_decorator(login_not_required, name=\"dispatch\")\n class PasswordResetView(PasswordContextMixin, FormView):\n     email_template_name = \"registration/password_reset_email.html\"\n     extra_email_context = None\n@@ -244,11 +246,13 @@ def form_valid(self, form):\n INTERNAL_RESET_SESSION_TOKEN = \"_password_reset_token\"\n \n \n+@method_decorator(login_not_required, name=\"dispatch\")\n class PasswordResetDoneView(PasswordContextMixin, TemplateView):\n     template_name = \"registration/password_reset_done.html\"\n     title = _(\"Password reset sent\")\n \n \n+@method_decorator(login_not_required, name=\"dispatch\")\n class PasswordResetConfirmView(PasswordContextMixin, FormView):\n     form_class = SetPasswordForm\n     post_reset_login = False\n@@ -335,6 +339,7 @@ def get_context_data(self, **kwargs):\n         return context\n \n \n+@method_decorator(login_not_required, name=\"dispatch\")\n class PasswordResetCompleteView(PasswordContextMixin, TemplateView):\n     template_name = \"registration/password_reset_complete.html\"\n     title = _(\"Password reset complete\")\ndiff --git a/docs/ref/checks.txt b/docs/ref/checks.txt\nindex efc8cf666a23..d78a6f76b211 100644\n--- a/docs/ref/checks.txt\n+++ b/docs/ref/checks.txt\n@@ -868,6 +868,10 @@ The following checks are performed on the default\n   for its builtin permission names to be at most 100 characters.\n * **auth.E012**: The permission codenamed ``<codename>`` of model ``<model>``\n   is longer than 100 characters.\n+* **auth.E013**: In order to use\n+  :class:`django.contrib.auth.middleware.LoginRequiredMiddleware`,\n+  :class:`django.contrib.auth.middleware.AuthenticationMiddleware` must be\n+  defined before it in MIDDLEWARE.\n \n ``contenttypes``\n ----------------\ndiff --git a/docs/ref/middleware.txt b/docs/ref/middleware.txt\nindex 63b38da0a0c2..ba9bef7e6f81 100644\n--- a/docs/ref/middleware.txt\n+++ b/docs/ref/middleware.txt\n@@ -495,6 +495,58 @@ Adds the ``user`` attribute, representing the currently-logged-in user, to\n every incoming ``HttpRequest`` object. See :ref:`Authentication in web requests\n <auth-web-requests>`.\n \n+.. class:: LoginRequiredMiddleware\n+\n+.. versionadded:: 5.1\n+\n+Redirects all unauthenticated requests to a login page. For admin views, this\n+redirects to the admin login. For all other views, this will redirect to\n+:setting:`settings.LOGIN_URL <LOGIN_URL>`. This can be customized by using the\n+:func:`~.django.contrib.auth.decorators.login_required` decorator and setting\n+``login_url`` or ``redirect_field_name`` for the view. For example::\n+\n+    @method_decorator(\n+        login_required(login_url=\"/login/\", redirect_field_name=\"redirect_to\"),\n+        name=\"dispatch\",\n+    )\n+    class MyView(View):\n+        pass\n+\n+\n+    @login_required(login_url=\"/login/\", redirect_field_name=\"redirect_to\")\n+    def my_view(request): ...\n+\n+Views using the :func:`~django.contrib.auth.decorators.login_not_required`\n+decorator are exempt from this requirement.\n+\n+.. admonition:: Ensure that your login view does not require a login.\n+\n+    To prevent infinite redirects, ensure you have\n+    :ref:`enabled unauthenticated requests\n+    <disable-login-required-middleware-for-views>` to your login view.\n+\n+**Methods and Attributes**\n+\n+.. attribute:: redirect_field_name\n+\n+    Defaults to ``\"next\"``.\n+\n+.. method:: get_login_url()\n+\n+    Returns the URL that unauthenticated requests will be redirected to. If\n+    defined, this returns the ``login_url`` set on the\n+    :func:`~.django.contrib.auth.decorators.login_required` decorator. Defaults\n+    to :setting:`settings.LOGIN_URL <LOGIN_URL>`.\n+\n+.. method:: get_redirect_field_name()\n+\n+    Returns the name of the query parameter that contains the URL the user\n+    should be redirected to after a successful login. If defined, this returns\n+    the ``redirect_field_name`` set on the\n+    :func:`~.django.contrib.auth.decorators.login_required` decorator. Defaults\n+    to :attr:`redirect_field_name`. If ``None`` is returned, a query parameter\n+    won't be added.\n+\n .. class:: RemoteUserMiddleware\n \n Middleware for utilizing web server provided authentication. See\n@@ -597,6 +649,12 @@ Here are some hints about the ordering of various Django middleware classes:\n \n    After ``SessionMiddleware``: uses session storage.\n \n+#. :class:`~django.contrib.auth.middleware.LoginRequiredMiddleware`\n+\n+   .. versionadded:: 5.1\n+\n+   After ``AuthenticationMiddleware``: uses user object.\n+\n #. :class:`~django.contrib.messages.middleware.MessageMiddleware`\n \n    After ``SessionMiddleware``: can use session-based storage.\ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex fdd44a887d0b..ee25eab0dd92 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -3060,8 +3060,9 @@ Default: ``'/accounts/login/'``\n The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are\n redirected for login when using the\n :func:`~django.contrib.auth.decorators.login_required` decorator,\n-:class:`~django.contrib.auth.mixins.LoginRequiredMixin`, or\n-:class:`~django.contrib.auth.mixins.AccessMixin`.\n+:class:`~django.contrib.auth.mixins.LoginRequiredMixin`,\n+:class:`~django.contrib.auth.mixins.AccessMixin`, or when\n+:class:`~django.contrib.auth.middleware.LoginRequiredMiddleware` is installed.\n \n .. setting:: LOGOUT_REDIRECT_URL\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex f2a6bccb0c4d..e2b4a85477fa 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -26,6 +26,20 @@ only officially support the latest release of each series.\n What's new in Django 5.1\n ========================\n \n+Middleware to require authentication by default\n+-----------------------------------------------\n+\n+The new :class:`~django.contrib.auth.middleware.LoginRequiredMiddleware`\n+redirects all unauthenticated requests to a login page. Views can allow\n+unauthenticated requests by using the new\n+:func:`~django.contrib.auth.decorators.login_not_required` decorator.\n+\n+The :class:`~django.contrib.auth.middleware.LoginRequiredMiddleware` respects\n+the ``login_url`` and ``redirect_field_name`` values set via the\n+:func:`~.django.contrib.auth.decorators.login_required` decorator, but does not\n+support setting ``login_url`` or ``redirect_field_name`` via the\n+:class:`~django.contrib.auth.mixins.LoginRequiredMixin`.\n+\n Minor features\n --------------\n \ndiff --git a/docs/topics/auth/default.txt b/docs/topics/auth/default.txt\nindex 795a1bdacc68..1d2ea8132d00 100644\n--- a/docs/topics/auth/default.txt\n+++ b/docs/topics/auth/default.txt\n@@ -656,8 +656,25 @@ inheritance list.\n     ``is_active`` flag on a user, but the default\n     :setting:`AUTHENTICATION_BACKENDS` reject inactive users.\n \n+.. _disable-login-required-middleware-for-views:\n+\n .. currentmodule:: django.contrib.auth.decorators\n \n+The ``login_not_required`` decorator\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. versionadded:: 5.1\n+\n+When :class:`~django.contrib.auth.middleware.LoginRequiredMiddleware` is\n+installed, all views require authentication by default. Some views, such as the\n+login view, may need to disable this behavior.\n+\n+.. function:: login_not_required()\n+\n+    Allows unauthenticated requests without redirecting to the login page when\n+    :class:`~django.contrib.auth.middleware.LoginRequiredMiddleware` is\n+    installed.\n+\n Limiting access to logged-in users that pass a test\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex 5757946f9530..3d70451e9d1c 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,5 +1,14 @@\n-from django.contrib.auth.checks import check_models_permissions, check_user_model\n+from django.contrib.auth.checks import (\n+    check_middleware,\n+    check_models_permissions,\n+    check_user_model,\n+)\n+from django.contrib.auth.middleware import (\n+    AuthenticationMiddleware,\n+    LoginRequiredMiddleware,\n+)\n from django.contrib.auth.models import AbstractBaseUser\n+from django.contrib.sessions.middleware import SessionMiddleware\n from django.core import checks\n from django.db import models\n from django.db.models import Q, UniqueConstraint\n@@ -345,3 +354,102 @@ class Meta:\n                 default_permissions = ()\n \n         self.assertEqual(checks.run_checks(self.apps.get_app_configs()), [])\n+\n+\n+class LoginRequiredMiddlewareSubclass(LoginRequiredMiddleware):\n+    redirect_field_name = \"redirect_to\"\n+\n+\n+class AuthenticationMiddlewareSubclass(AuthenticationMiddleware):\n+    pass\n+\n+\n+class SessionMiddlewareSubclass(SessionMiddleware):\n+    pass\n+\n+\n+@override_system_checks([check_middleware])\n+class MiddlewareChecksTests(SimpleTestCase):\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"auth_tests.test_checks.SessionMiddlewareSubclass\",\n+            \"auth_tests.test_checks.AuthenticationMiddlewareSubclass\",\n+            \"auth_tests.test_checks.LoginRequiredMiddlewareSubclass\",\n+        ]\n+    )\n+    def test_middleware_subclasses(self):\n+        errors = checks.run_checks()\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"auth_tests.test_checks\",\n+            \"auth_tests.test_checks.NotExist\",\n+        ]\n+    )\n+    def test_invalid_middleware_skipped(self):\n+        errors = checks.run_checks()\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"django.contrib.does.not.Exist\",\n+            \"django.contrib.sessions.middleware.SessionMiddleware\",\n+            \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n+            \"django.contrib.auth.middleware.LoginRequiredMiddleware\",\n+        ]\n+    )\n+    def test_check_ignores_import_error_in_middleware(self):\n+        errors = checks.run_checks()\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"django.contrib.sessions.middleware.SessionMiddleware\",\n+            \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n+            \"django.contrib.auth.middleware.LoginRequiredMiddleware\",\n+        ]\n+    )\n+    def test_correct_order_with_login_required_middleware(self):\n+        errors = checks.run_checks()\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"django.contrib.auth.middleware.LoginRequiredMiddleware\",\n+            \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n+            \"django.contrib.sessions.middleware.SessionMiddleware\",\n+        ]\n+    )\n+    def test_incorrect_order_with_login_required_middleware(self):\n+        errors = checks.run_checks()\n+        self.assertEqual(\n+            errors,\n+            [\n+                checks.Error(\n+                    \"In order to use django.contrib.auth.middleware.\"\n+                    \"LoginRequiredMiddleware, django.contrib.auth.middleware.\"\n+                    \"AuthenticationMiddleware must be defined before it in MIDDLEWARE.\",\n+                    id=\"auth.E013\",\n+                )\n+            ],\n+        )\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"django.contrib.auth.middleware.LoginRequiredMiddleware\",\n+        ]\n+    )\n+    def test_missing_authentication_with_login_required_middleware(self):\n+        errors = checks.run_checks()\n+        self.assertEqual(\n+            errors,\n+            [\n+                checks.Error(\n+                    \"In order to use django.contrib.auth.middleware.\"\n+                    \"LoginRequiredMiddleware, django.contrib.auth.middleware.\"\n+                    \"AuthenticationMiddleware must be defined before it in MIDDLEWARE.\",\n+                    id=\"auth.E013\",\n+                )\n+            ],\n+        )\ndiff --git a/tests/auth_tests/test_decorators.py b/tests/auth_tests/test_decorators.py\nindex 48fa915c5cb4..e585b28bd5bd 100644\n--- a/tests/auth_tests/test_decorators.py\n+++ b/tests/auth_tests/test_decorators.py\n@@ -5,6 +5,7 @@\n from django.conf import settings\n from django.contrib.auth import models\n from django.contrib.auth.decorators import (\n+    login_not_required,\n     login_required,\n     permission_required,\n     user_passes_test,\n@@ -113,6 +114,40 @@ async def test_login_required_next_url_async_view(self):\n         await self.test_login_required_async_view(login_url=\"/somewhere/\")\n \n \n+class LoginNotRequiredTestCase(TestCase):\n+    \"\"\"\n+    Tests the login_not_required decorators\n+    \"\"\"\n+\n+    def test_callable(self):\n+        \"\"\"\n+        login_not_required is assignable to callable objects.\n+        \"\"\"\n+\n+        class CallableView:\n+            def __call__(self, *args, **kwargs):\n+                pass\n+\n+        login_not_required(CallableView())\n+\n+    def test_view(self):\n+        \"\"\"\n+        login_not_required is assignable to normal views.\n+        \"\"\"\n+\n+        def normal_view(request):\n+            pass\n+\n+        login_not_required(normal_view)\n+\n+    def test_decorator_marks_view_as_login_not_required(self):\n+        @login_not_required\n+        def view(request):\n+            return HttpResponse()\n+\n+        self.assertFalse(view.login_required)\n+\n+\n class PermissionsRequiredDecoratorTest(TestCase):\n     \"\"\"\n     Tests for the permission_required decorator\ndiff --git a/tests/auth_tests/test_middleware.py b/tests/auth_tests/test_middleware.py\nindex e7c5a525cd3e..a837eb8b965e 100644\n--- a/tests/auth_tests/test_middleware.py\n+++ b/tests/auth_tests/test_middleware.py\n@@ -1,8 +1,14 @@\n-from django.contrib.auth.middleware import AuthenticationMiddleware\n+from django.conf import settings\n+from django.contrib.auth import REDIRECT_FIELD_NAME\n+from django.contrib.auth.middleware import (\n+    AuthenticationMiddleware,\n+    LoginRequiredMiddleware,\n+)\n from django.contrib.auth.models import User\n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpRequest, HttpResponse\n-from django.test import TestCase\n+from django.test import TestCase, modify_settings, override_settings\n+from django.urls import reverse\n \n \n class TestAuthenticationMiddleware(TestCase):\n@@ -50,3 +56,134 @@ async def test_auser(self):\n         self.assertEqual(auser, self.user)\n         auser_second = await self.request.auser()\n         self.assertIs(auser, auser_second)\n+\n+\n+@override_settings(ROOT_URLCONF=\"auth_tests.urls\")\n+@modify_settings(\n+    MIDDLEWARE={\"append\": \"django.contrib.auth.middleware.LoginRequiredMiddleware\"}\n+)\n+class TestLoginRequiredMiddleware(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user(\n+            \"test_user\", \"test@example.com\", \"test_password\"\n+        )\n+\n+    def setUp(self):\n+        self.middleware = LoginRequiredMiddleware(lambda req: HttpResponse())\n+        self.request = HttpRequest()\n+\n+    def test_public_paths(self):\n+        paths = [\"public_view\", \"public_function_view\"]\n+        for path in paths:\n+            response = self.client.get(f\"/{path}/\")\n+            self.assertEqual(response.status_code, 200)\n+\n+    def test_protected_paths(self):\n+        paths = [\"protected_view\", \"protected_function_view\"]\n+        for path in paths:\n+            response = self.client.get(f\"/{path}/\")\n+            self.assertRedirects(\n+                response,\n+                settings.LOGIN_URL + f\"?next=/{path}/\",\n+                fetch_redirect_response=False,\n+            )\n+\n+    def test_login_required_paths(self):\n+        paths = [\"login_required_cbv_view\", \"login_required_decorator_view\"]\n+        for path in paths:\n+            response = self.client.get(f\"/{path}/\")\n+            self.assertRedirects(\n+                response,\n+                \"/custom_login/\" + f\"?step=/{path}/\",\n+                fetch_redirect_response=False,\n+            )\n+\n+    def test_admin_path(self):\n+        admin_url = reverse(\"admin:index\")\n+        response = self.client.get(admin_url)\n+        self.assertRedirects(\n+            response,\n+            reverse(\"admin:login\") + f\"?next={admin_url}\",\n+            target_status_code=200,\n+        )\n+\n+    def test_non_existent_path(self):\n+        response = self.client.get(\"/non_existent/\")\n+        self.assertEqual(response.status_code, 404)\n+\n+    def test_paths_with_logged_in_user(self):\n+        paths = [\n+            \"public_view\",\n+            \"public_function_view\",\n+            \"protected_view\",\n+            \"protected_function_view\",\n+            \"login_required_cbv_view\",\n+            \"login_required_decorator_view\",\n+        ]\n+        self.client.login(username=\"test_user\", password=\"test_password\")\n+        for path in paths:\n+            response = self.client.get(f\"/{path}/\")\n+            self.assertEqual(response.status_code, 200)\n+\n+    def test_get_login_url_from_view_func(self):\n+        def view_func(request):\n+            return HttpResponse()\n+\n+        view_func.login_url = \"/custom_login/\"\n+        login_url = self.middleware.get_login_url(view_func)\n+        self.assertEqual(login_url, \"/custom_login/\")\n+\n+    @override_settings(LOGIN_URL=\"/settings_login/\")\n+    def test_get_login_url_from_settings(self):\n+        login_url = self.middleware.get_login_url(lambda: None)\n+        self.assertEqual(login_url, \"/settings_login/\")\n+\n+    @override_settings(LOGIN_URL=None)\n+    def test_get_login_url_no_login_url(self):\n+        with self.assertRaises(ImproperlyConfigured) as e:\n+            self.middleware.get_login_url(lambda: None)\n+        self.assertEqual(\n+            str(e.exception),\n+            \"No login URL to redirect to. Define settings.LOGIN_URL or provide \"\n+            \"a login_url via the 'django.contrib.auth.decorators.login_required' \"\n+            \"decorator.\",\n+        )\n+\n+    def test_get_redirect_field_name_from_view_func(self):\n+        def view_func(request):\n+            return HttpResponse()\n+\n+        view_func.redirect_field_name = \"next_page\"\n+        redirect_field_name = self.middleware.get_redirect_field_name(view_func)\n+        self.assertEqual(redirect_field_name, \"next_page\")\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"django.contrib.sessions.middleware.SessionMiddleware\",\n+            \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n+            \"auth_tests.test_checks.LoginRequiredMiddlewareSubclass\",\n+        ],\n+        LOGIN_URL=\"/settings_login/\",\n+    )\n+    def test_login_url_resolve_logic(self):\n+        paths = [\"login_required_cbv_view\", \"login_required_decorator_view\"]\n+        for path in paths:\n+            response = self.client.get(f\"/{path}/\")\n+            self.assertRedirects(\n+                response,\n+                \"/custom_login/\" + f\"?step=/{path}/\",\n+                fetch_redirect_response=False,\n+            )\n+        paths = [\"protected_view\", \"protected_function_view\"]\n+        for path in paths:\n+            response = self.client.get(f\"/{path}/\")\n+            self.assertRedirects(\n+                response,\n+                f\"/settings_login/?redirect_to=/{path}/\",\n+                fetch_redirect_response=False,\n+            )\n+\n+    def test_get_redirect_field_name_default(self):\n+        redirect_field_name = self.middleware.get_redirect_field_name(lambda: None)\n+        self.assertEqual(redirect_field_name, REDIRECT_FIELD_NAME)\ndiff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\nindex 53e33785b077..97d0448ab1c7 100644\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -32,7 +32,7 @@\n from django.db import connection\n from django.http import HttpRequest, HttpResponse\n from django.middleware.csrf import CsrfViewMiddleware, get_token\n-from django.test import Client, TestCase, override_settings\n+from django.test import Client, TestCase, modify_settings, override_settings\n from django.test.client import RedirectCycleError\n from django.urls import NoReverseMatch, reverse, reverse_lazy\n from django.utils.http import urlsafe_base64_encode\n@@ -472,6 +472,29 @@ def test_missing_kwargs(self):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             self.client.get(\"/reset/missing_parameters/\")\n \n+    @modify_settings(\n+        MIDDLEWARE={\"append\": \"django.contrib.auth.middleware.LoginRequiredMiddleware\"}\n+    )\n+    def test_access_under_login_required_middleware(self):\n+        reset_urls = [\n+            reverse(\"password_reset\"),\n+            reverse(\"password_reset_done\"),\n+            reverse(\"password_reset_confirm\", kwargs={\"uidb64\": \"abc\", \"token\": \"def\"}),\n+            reverse(\"password_reset_complete\"),\n+        ]\n+\n+        for url in reset_urls:\n+            with self.subTest(url=url):\n+                response = self.client.get(url)\n+                self.assertEqual(response.status_code, 200)\n+\n+        response = self.client.post(\n+            \"/password_reset/\", {\"email\": \"staffmember@example.com\"}\n+        )\n+        self.assertRedirects(\n+            response, \"/password_reset/done/\", fetch_redirect_response=False\n+        )\n+\n \n @override_settings(AUTH_USER_MODEL=\"auth_tests.CustomUser\")\n class CustomUserPasswordResetTest(AuthViewsTestCase):\n@@ -661,6 +684,38 @@ def test_password_change_redirect_custom_named(self):\n             response, \"/password_reset/\", fetch_redirect_response=False\n         )\n \n+    @modify_settings(\n+        MIDDLEWARE={\"append\": \"django.contrib.auth.middleware.LoginRequiredMiddleware\"}\n+    )\n+    def test_access_under_login_required_middleware(self):\n+        response = self.client.post(\n+            \"/password_change/\",\n+            {\n+                \"old_password\": \"password\",\n+                \"new_password1\": \"password1\",\n+                \"new_password2\": \"password1\",\n+            },\n+        )\n+        self.assertRedirects(\n+            response,\n+            settings.LOGIN_URL + \"?next=/password_change/\",\n+            fetch_redirect_response=False,\n+        )\n+\n+        self.login()\n+\n+        response = self.client.post(\n+            \"/password_change/\",\n+            {\n+                \"old_password\": \"password\",\n+                \"new_password1\": \"password1\",\n+                \"new_password2\": \"password1\",\n+            },\n+        )\n+        self.assertRedirects(\n+            response, \"/password_change/done/\", fetch_redirect_response=False\n+        )\n+\n \n class SessionAuthenticationTests(AuthViewsTestCase):\n     def test_user_password_change_updates_session(self):\n@@ -904,6 +959,13 @@ def test_login_redirect_url_overrides_get_default_redirect_url(self):\n         response = self.login(url=\"/login/get_default_redirect_url/?next=/test/\")\n         self.assertRedirects(response, \"/test/\", fetch_redirect_response=False)\n \n+    @modify_settings(\n+        MIDDLEWARE={\"append\": \"django.contrib.auth.middleware.LoginRequiredMiddleware\"}\n+    )\n+    def test_access_under_login_required_middleware(self):\n+        response = self.client.get(reverse(\"login\"))\n+        self.assertEqual(response.status_code, 200)\n+\n \n class LoginURLSettings(AuthViewsTestCase):\n     \"\"\"Tests for settings.LOGIN_URL.\"\"\"\n@@ -1355,6 +1417,22 @@ def test_logout_redirect_url_named_setting(self):\n         self.assertContains(response, \"Logged out\")\n         self.confirm_logged_out()\n \n+    @modify_settings(\n+        MIDDLEWARE={\"append\": \"django.contrib.auth.middleware.LoginRequiredMiddleware\"}\n+    )\n+    def test_access_under_login_required_middleware(self):\n+        response = self.client.post(\"/logout/\")\n+        self.assertRedirects(\n+            response,\n+            settings.LOGIN_URL + \"?next=/logout/\",\n+            fetch_redirect_response=False,\n+        )\n+\n+        self.login()\n+\n+        response = self.client.post(\"/logout/\")\n+        self.assertEqual(response.status_code, 200)\n+\n \n def get_perm(Model, perm):\n     ct = ContentType.objects.get_for_model(Model)\ndiff --git a/tests/auth_tests/urls.py b/tests/auth_tests/urls.py\nindex 99fa22e4f409..cb6a0ed1cfe0 100644\n--- a/tests/auth_tests/urls.py\n+++ b/tests/auth_tests/urls.py\n@@ -1,6 +1,10 @@\n from django.contrib import admin\n from django.contrib.auth import views\n-from django.contrib.auth.decorators import login_required, permission_required\n+from django.contrib.auth.decorators import (\n+    login_not_required,\n+    login_required,\n+    permission_required,\n+)\n from django.contrib.auth.forms import AuthenticationForm\n from django.contrib.auth.urls import urlpatterns as auth_urlpatterns\n from django.contrib.auth.views import LoginView\n@@ -9,6 +13,8 @@\n from django.shortcuts import render\n from django.template import RequestContext, Template\n from django.urls import path, re_path, reverse_lazy\n+from django.utils.decorators import method_decorator\n+from django.views import View\n from django.views.decorators.cache import never_cache\n from django.views.i18n import set_language\n \n@@ -88,6 +94,42 @@ def get_default_redirect_url(self):\n         return \"/custom/\"\n \n \n+class EmptyResponseBaseView(View):\n+    def get(self, request, *args, **kwargs):\n+        return HttpResponse()\n+\n+\n+@method_decorator(login_not_required, name=\"dispatch\")\n+class PublicView(EmptyResponseBaseView):\n+    pass\n+\n+\n+class ProtectedView(EmptyResponseBaseView):\n+    pass\n+\n+\n+@method_decorator(\n+    login_required(login_url=\"/custom_login/\", redirect_field_name=\"step\"),\n+    name=\"dispatch\",\n+)\n+class ProtectedViewWithCustomLoginRequired(EmptyResponseBaseView):\n+    pass\n+\n+\n+@login_not_required\n+def public_view(request):\n+    return HttpResponse()\n+\n+\n+def protected_view(request):\n+    return HttpResponse()\n+\n+\n+@login_required(login_url=\"/custom_login/\", redirect_field_name=\"step\")\n+def protected_view_with_login_required_decorator(request):\n+    return HttpResponse()\n+\n+\n # special urls for auth test cases\n urlpatterns = auth_urlpatterns + [\n     path(\n@@ -198,7 +240,14 @@ def get_default_redirect_url(self):\n         \"login_and_permission_required_exception/\",\n         login_and_permission_required_exception,\n     ),\n+    path(\"public_view/\", PublicView.as_view()),\n+    path(\"public_function_view/\", public_view),\n+    path(\"protected_view/\", ProtectedView.as_view()),\n+    path(\"protected_function_view/\", protected_view),\n+    path(\n+        \"login_required_decorator_view/\", protected_view_with_login_required_decorator\n+    ),\n+    path(\"login_required_cbv_view/\", ProtectedViewWithCustomLoginRequired.as_view()),\n     path(\"setlang/\", set_language, name=\"set_language\"),\n-    # This line is only required to render the password reset with is_admin=True\n     path(\"admin/\", admin.site.urls),\n ]\ndiff --git a/tests/deprecation/test_middleware_mixin.py b/tests/deprecation/test_middleware_mixin.py\nindex 3b6ad6d8ee18..f4eafc14e3d2 100644\n--- a/tests/deprecation/test_middleware_mixin.py\n+++ b/tests/deprecation/test_middleware_mixin.py\n@@ -5,6 +5,7 @@\n from django.contrib.admindocs.middleware import XViewMiddleware\n from django.contrib.auth.middleware import (\n     AuthenticationMiddleware,\n+    LoginRequiredMiddleware,\n     RemoteUserMiddleware,\n )\n from django.contrib.flatpages.middleware import FlatpageFallbackMiddleware\n@@ -34,6 +35,7 @@\n class MiddlewareMixinTests(SimpleTestCase):\n     middlewares = [\n         AuthenticationMiddleware,\n+        LoginRequiredMiddleware,\n         BrokenLinkEmailsMiddleware,\n         CacheMiddleware,\n         CommonMiddleware,\n", "problem_statement": "LoginRequiredAuthenticationMiddleware force all views to require authentication by default.\nDescription\n\t \nThis is discussed in the mailing list \u200bhttps://groups.google.com/forum/#!topic/django-developers/PUQQUHIxEXQ.\n", "hints_text": [["I'll Accept based on the mailing list discussion. Thanks.", 1585640423.0], ["\u200bhttps://github.com/django/django/pull/12632", 1585651152.0], ["Thanks Mehmet. \u200bComments on PR \u2014 Please uncheck flags when address to put it back in the review queue.", 1594186658.0], ["Replying to Carlton Gibson: Thanks Mehmet. \u200bComments on PR \u2014 Please uncheck flags when address to put it back in the review queue. Thansk for the review Carlton. I believe that I solved the issues you pointed. There were nice people from the mailing list who are willing to help out with docs. Once we are finished everything, I'll ping them for the docs :)", 1595211117.0], ["Re-set the has patch flag removed by mistake.", 1601899103.0], ["I am very interested in this new feature. Will it have a way to mark function and class based views as no login requied? Probably too late but heres some code from my solution: A decorator to mark a view/function as no longer required: from functools import wraps def login_not_required(obj): \"\"\"Adds the attrbiute login_not_required = True to the object (func/class). Use it as follows: @login_not_required class FooView(generic.View): ... @login_not_required def bar_view(request): ... \"\"\" @wraps(obj) def decorator(): obj.login_not_required = True # For general pages obj.permission_classes = [] # For REST framework return obj return decorator() Middleware: # settings.py NONE_AUTH_ACCOUNT_PATHS = [ .... '/accounts/password_reset/', '/accounts/reset/', ] # middleware.py class RequireLoginCheck: \"\"\"Middleware to require authentication on all views by default, except when allowed. URLS can be opened by adding them to NONE_AUTH_ACCOUNT_PATHS, or by adding the @login_not_required decorator. Must appear below the sessions middleware because the sessions middleware adds the user to the request, which is used by this middleware. \"\"\" def __init__(self, get_response): self.get_response = get_response def __call__(self, request): return self.get_response(request) def _is_none_auth_path(self, path): for none_auth_path in NONE_AUTH_ACCOUNT_PATHS: if path.startswith(none_auth_path): return True return False def _is_login_not_required(self, view_func): with suppress(AttributeError): # If a class with the @login_not_required decorator, will return True return view_func.view_class.login_not_required with suppress(AttributeError): # If a function with the @login_not_required decorator, will return True return view_func.login_not_required return False def _is_open_rest_view(self, view_func): try: klass = view_func.view_class except AttributeError: return False if not issubclass(view_func.view_class, APIView): return False else: auth_classes = getattr(klass, 'authentication_classes', None) perm_classes = getattr(klass, 'permission_classes', None) # if auth_classes and perm_classes are empty list/tuples, then don't require login checks no_login_required = ( auth_classes is not None and not auth_classes and perm_classes is not None and not perm_classes ) return no_login_required def log_unauthorised_request(self, request, view_func, view_args, view_kwargs): get_response = lambda: HTTP_NO_RESPONSE reason = CsrfViewMiddleware(get_response).process_view(request, None, (), {}) s = [\"base.auth.middleware.RequireLoginCheck\"] s.append(f\"User: {request.user}\") s.append(f\"Method: {request.method}\") s.append(f\"URL: {request.path}\") s.append(f\"IP: {get_ip(request)}\") s.append(f\"Reason: {reason}\") s.append(f\"Open URL (is_login_not_required): {self._is_login_not_required(view_func)}\") s.append(f\"is_none_auth_path: {self._is_none_auth_path(request.path)}\") s.append(f\"HEADERS: {request.headers}\") s.append(f\"GET: {request.GET}\") s.append(f\"POST: {request.POST}\") if LOGGING: log_info(', '.join(s)) if settings.DEBUG and not request.path.startswith('static'): print(', '.join(s)) def process_view(self, request, view_func, view_args, view_kwargs): \"\"\"https://docs.djangoproject.com/en/stable/topics/http/middleware/#other-middleware-hooks\"\"\" if not ( request.user.is_authenticated or self._is_login_not_required(view_func) or self._is_open_rest_view(view_func) or self._is_none_auth_path(request.path) ): self.log_unauthorised_request(request, view_func, view_args, view_kwargs) if settings.LOGIN_URL != request.path: # if next URL after login is the same login URL, then cyclic loop return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path)) else: return redirect('%s?next=%s' % (settings.LOGIN_URL, '/')) return None", 1645263326.0], ["\u200bPR", 1706691128.0]], "created_at": "2024-01-29T14:45:52Z"}
{"repo": "django/django", "pull_number": 17787, "instance_id": "django__django-17787", "issue_numbers": ["35143"], "base_commit": "c317e81378a15379cba4abc289d9519ee0335a80", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 615aa7b7f75d..8c903ff6c521 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -638,6 +638,7 @@ answer newbie questions, and generally made Django that much better:\n     Marc Tamlyn <marc.tamlyn@gmail.com>\n     Marc-Aur\u00e8le Brothier <ma.brothier@gmail.com>\n     Marian Andre <django@andre.sk>\n+    Marijke Luttekes <mail@marijkeluttekes.dev>\n     Marijn Vriens <marijn@metronomo.cl>\n     Mario Gonzalez <gonzalemario@gmail.com>\n     Mariusz Felisiak <felisiak.mariusz@gmail.com>\ndiff --git a/django/views/templates/technical_404.html b/django/views/templates/technical_404.html\nindex c47dae22af20..f2bfe49372bb 100644\n--- a/django/views/templates/technical_404.html\n+++ b/django/views/templates/technical_404.html\n@@ -9,9 +9,9 @@\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\n     body { font:small sans-serif; background:#eee; color:#000; }\n-    body>div { border-bottom:1px solid #ddd; }\n+    body > :where(header, main, footer) { border-bottom:1px solid #ddd; }\n     h1 { font-weight:normal; margin-bottom:.4em; }\n-    h1 span { font-size:60%; color:#666; font-weight:normal; }\n+    h1 small { font-size:60%; color:#666; font-weight:normal; }\n     table { border:none; border-collapse: collapse; width:100%; }\n     td, th { vertical-align:top; padding:2px 3px; }\n     th { width:12em; text-align:right; color:#666; padding-right:.5em; }\n@@ -24,27 +24,28 @@\n   </style>\n </head>\n <body>\n-  <div id=\"summary\">\n-    <h1>Page not found <span>(404)</span></h1>\n+  <header id=\"summary\">\n+    <h1>Page not found <small>(404)</small></h1>\n     {% if reason and resolved %}<pre class=\"exception_value\">{{ reason }}</pre>{% endif %}\n     <table class=\"meta\">\n       <tr>\n-        <th>Request Method:</th>\n+        <th scope=\"row\">Request Method:</th>\n         <td>{{ request.META.REQUEST_METHOD }}</td>\n       </tr>\n       <tr>\n-        <th>Request URL:</th>\n+        <th scope=\"row\">Request URL:</th>\n         <td>{{ request.build_absolute_uri }}</td>\n       </tr>\n       {% if raising_view_name %}\n       <tr>\n-        <th>Raised by:</th>\n+        <th scope=\"row\">Raised by:</th>\n         <td>{{ raising_view_name }}</td>\n       </tr>\n       {% endif %}\n     </table>\n-  </div>\n-  <div id=\"info\">\n+  </header>\n+\n+  <main id=\"info\">\n     {% if urlpatterns %}\n       <p>\n       Using the URLconf defined in <code>{{ urlconf }}</code>,\n@@ -54,8 +55,10 @@ <h1>Page not found <span>(404)</span></h1>\n         {% for pattern in urlpatterns %}\n           <li>\n             {% for pat in pattern %}\n+              <code>\n                 {{ pat.pattern }}\n                 {% if forloop.last and pat.name %}[name='{{ pat.name }}']{% endif %}\n+              </code>\n             {% endfor %}\n           </li>\n         {% endfor %}\n@@ -69,14 +72,14 @@ <h1>Page not found <span>(404)</span></h1>\n         {% if resolved %}matched the last one.{% else %}didn\u2019t match any of these.{% endif %}\n       </p>\n     {% endif %}\n-  </div>\n+  </main>\n \n-  <div id=\"explanation\">\n+  <footer id=\"explanation\">\n     <p>\n       You\u2019re seeing this error because you have <code>DEBUG = True</code> in\n       your Django settings file. Change that to <code>False</code>, and Django\n       will display a standard 404 page.\n     </p>\n-  </div>\n+  </footer>\n </body>\n </html>\ndiff --git a/django/views/templates/technical_500.html b/django/views/templates/technical_500.html\nindex a5c187147bb3..305c4655ada3 100644\n--- a/django/views/templates/technical_500.html\n+++ b/django/views/templates/technical_500.html\n@@ -10,7 +10,7 @@\n     body * { padding:10px 20px; }\n     body * * { padding:0; }\n     body { font:small sans-serif; background-color:#fff; color:#000; }\n-    body>div { border-bottom:1px solid #ddd; }\n+    body > :where(header, main, footer) { border-bottom:1px solid #ddd; }\n     h1 { font-weight:normal; }\n     h2 { margin-bottom:.8em; }\n     h3 { margin:1em 0 .5em 0; }\n@@ -47,6 +47,8 @@\n     .user div.commands a { color: black; }\n     #summary { background: #ffc; }\n     #summary h2 { font-weight: normal; color: #666; }\n+    #info { padding: 0; }\n+    #info > * { padding:10px 20px; }\n     #explanation { background:#eee; }\n     #template, #template-not-exist { background:#f6f6f6; }\n     #template-not-exist ul { margin: 0 0 10px 20px; }\n@@ -97,67 +99,69 @@\n   {% endif %}\n </head>\n <body>\n-<div id=\"summary\">\n+<header id=\"summary\">\n   <h1>{% if exception_type %}{{ exception_type }}{% else %}Report{% endif %}\n       {% if request %} at {{ request.path_info }}{% endif %}</h1>\n   <pre class=\"exception_value\">{% if exception_value %}{{ exception_value|force_escape }}{% if exception_notes %}{{ exception_notes }}{% endif %}{% else %}No exception message supplied{% endif %}</pre>\n   <table class=\"meta\">\n {% if request %}\n     <tr>\n-      <th>Request Method:</th>\n+      <th scope=\"row\">Request Method:</th>\n       <td>{{ request.META.REQUEST_METHOD }}</td>\n     </tr>\n     <tr>\n-      <th>Request URL:</th>\n+      <th scope=\"row\">Request URL:</th>\n       <td>{{ request_insecure_uri }}</td>\n     </tr>\n {% endif %}\n     <tr>\n-      <th>Django Version:</th>\n+      <th scope=\"row\">Django Version:</th>\n       <td>{{ django_version_info }}</td>\n     </tr>\n {% if exception_type %}\n     <tr>\n-      <th>Exception Type:</th>\n+      <th scope=\"row\">Exception Type:</th>\n       <td>{{ exception_type }}</td>\n     </tr>\n {% endif %}\n {% if exception_type and exception_value %}\n     <tr>\n-      <th>Exception Value:</th>\n+      <th scope=\"row\">Exception Value:</th>\n       <td><pre>{{ exception_value|force_escape }}</pre></td>\n     </tr>\n {% endif %}\n {% if lastframe %}\n     <tr>\n-      <th>Exception Location:</th>\n+      <th scope=\"row\">Exception Location:</th>\n       <td><span class=\"fname\">{{ lastframe.filename }}</span>, line {{ lastframe.lineno }}, in {{ lastframe.function }}</td>\n     </tr>\n {% endif %}\n {% if raising_view_name %}\n     <tr>\n-      <th>Raised during:</th>\n+      <th scope=\"row\">Raised during:</th>\n       <td>{{ raising_view_name }}</td>\n     </tr>\n {% endif %}\n     <tr>\n-      <th>Python Executable:</th>\n+      <th scope=\"row\">Python Executable:</th>\n       <td>{{ sys_executable }}</td>\n     </tr>\n     <tr>\n-      <th>Python Version:</th>\n+      <th scope=\"row\">Python Version:</th>\n       <td>{{ sys_version_info }}</td>\n     </tr>\n     <tr>\n-      <th>Python Path:</th>\n-      <td><pre>{{ sys_path|pprint }}</pre></td>\n+      <th scope=\"row\">Python Path:</th>\n+      <td><pre><code>{{ sys_path|pprint }}</code></pre></td>\n     </tr>\n     <tr>\n-      <th>Server time:</th>\n+      <th scope=\"row\">Server time:</th>\n       <td>{{server_time|date:\"r\"}}</td>\n     </tr>\n   </table>\n-</div>\n+</header>\n+\n+<main id=\"info\">\n {% if unicode_hint %}\n <div id=\"unicode-hint\">\n     <h2>Unicode error hint</h2>\n@@ -195,11 +199,11 @@ <h3>{{ template_info.message|force_escape }}</h3>\n       {% if template_info.bottom != template_info.total %} cut-bottom{% endif %}\">\n    {% for source_line in template_info.source_lines %}\n    {% if source_line.0 == template_info.line %}\n-   <tr class=\"error\"><th>{{ source_line.0 }}</th>\n+   <tr class=\"error\"><th scope=\"row\">{{ source_line.0 }}</th>\n      <td>{{ template_info.before }}<span class=\"specific\">{{ template_info.during }}</span>{{ template_info.after }}</td>\n    </tr>\n    {% else %}\n-      <tr><th>{{ source_line.0 }}</th>\n+      <tr><th scope=\"row\">{{ source_line.0 }}</th>\n       <td>{{ source_line.1 }}</td></tr>\n    {% endif %}\n    {% endfor %}\n@@ -266,8 +270,8 @@ <h2>Local Vars</h2>\n             <table class=\"vars\" id=\"v{{ frame.id }}\">\n               <thead>\n                 <tr>\n-                  <th>Variable</th>\n-                  <th>Value</th>\n+                  <th scope=\"col\">Variable</th>\n+                  <th scope=\"col\">Value</th>\n                 </tr>\n               </thead>\n               <tbody>\n@@ -354,8 +358,8 @@ <h3 id=\"get-info\">GET</h3>\n     <table class=\"req\">\n       <thead>\n         <tr>\n-          <th>Variable</th>\n-          <th>Value</th>\n+          <th scope=\"col\">Variable</th>\n+          <th scope=\"col\">Value</th>\n         </tr>\n       </thead>\n       <tbody>\n@@ -376,8 +380,8 @@ <h3 id=\"post-info\">POST</h3>\n     <table class=\"req\">\n       <thead>\n         <tr>\n-          <th>Variable</th>\n-          <th>Value</th>\n+          <th scope=\"col\">Variable</th>\n+          <th scope=\"col\">Value</th>\n         </tr>\n       </thead>\n       <tbody>\n@@ -398,8 +402,8 @@ <h3 id=\"files-info\">FILES</h3>\n     <table class=\"req\">\n       <thead>\n         <tr>\n-          <th>Variable</th>\n-          <th>Value</th>\n+          <th scope=\"col\">Variable</th>\n+          <th scope=\"col\">Value</th>\n         </tr>\n       </thead>\n       <tbody>\n@@ -420,8 +424,8 @@ <h3 id=\"cookie-info\">COOKIES</h3>\n     <table class=\"req\">\n       <thead>\n         <tr>\n-          <th>Variable</th>\n-          <th>Value</th>\n+          <th scope=\"col\">Variable</th>\n+          <th scope=\"col\">Value</th>\n         </tr>\n       </thead>\n       <tbody>\n@@ -441,8 +445,8 @@ <h3 id=\"meta-info\">META</h3>\n   <table class=\"req\">\n     <thead>\n       <tr>\n-        <th>Variable</th>\n-        <th>Value</th>\n+        <th scope=\"col\">Variable</th>\n+        <th scope=\"col\">Value</th>\n       </tr>\n     </thead>\n     <tbody>\n@@ -463,8 +467,8 @@ <h4>Using settings module <code>{{ settings.SETTINGS_MODULE }}</code></h4>\n   <table class=\"req\">\n     <thead>\n       <tr>\n-        <th>Setting</th>\n-        <th>Value</th>\n+        <th scope=\"col\">Setting</th>\n+        <th scope=\"col\">Value</th>\n       </tr>\n     </thead>\n     <tbody>\n@@ -478,14 +482,16 @@ <h4>Using settings module <code>{{ settings.SETTINGS_MODULE }}</code></h4>\n   </table>\n \n </div>\n+</main>\n+\n {% if not is_email %}\n-  <div id=\"explanation\">\n+  <footer id=\"explanation\">\n     <p>\n       You\u2019re seeing this error because you have <code>DEBUG = True</code> in your\n       Django settings file. Change that to <code>False</code>, and Django will\n       display a standard page generated by the handler for this status code.\n     </p>\n-  </div>\n+  </footer>\n {% endif %}\n </body>\n </html>\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 284c1f4f7453..f1664746079c 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -156,7 +156,8 @@ Email\n Error Reporting\n ~~~~~~~~~~~~~~~\n \n-* ...\n+* In order to improve accessibility, the technical 404 and 500 error pages now\n+  use HTML landmark elements for the header, footer, and main content areas.\n \n File Storage\n ~~~~~~~~~~~~\n", "test_patch": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 03db07a61c3c..45a0dc70ee36 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -176,6 +176,12 @@ def test_404_not_in_urls(self):\n         self.assertContains(\n             response, \"Django tried these URL patterns\", status_code=404\n         )\n+        self.assertContains(\n+            response,\n+            \"<code>technical404/ [name='my404']</code>\",\n+            status_code=404,\n+            html=True,\n+        )\n         self.assertContains(\n             response,\n             \"<p>The current path, <code>not-in-urls</code>, didn\u2019t match any \"\n@@ -204,6 +210,9 @@ def test_404_empty_path_not_in_urls(self):\n \n     def test_technical_404(self):\n         response = self.client.get(\"/technical404/\")\n+        self.assertContains(response, '<header id=\"summary\">', status_code=404)\n+        self.assertContains(response, '<main id=\"info\">', status_code=404)\n+        self.assertContains(response, '<footer id=\"explanation\">', status_code=404)\n         self.assertContains(\n             response,\n             '<pre class=\"exception_value\">Testing technical 404.</pre>',\n@@ -228,7 +237,7 @@ def test_classbased_technical_404(self):\n         response = self.client.get(\"/classbased404/\")\n         self.assertContains(\n             response,\n-            \"<th>Raised by:</th><td>view_tests.views.Http404View</td>\",\n+            '<th scope=\"row\">Raised by:</th><td>view_tests.views.Http404View</td>',\n             status_code=404,\n             html=True,\n         )\n@@ -236,9 +245,12 @@ def test_classbased_technical_404(self):\n     def test_technical_500(self):\n         with self.assertLogs(\"django.request\", \"ERROR\"):\n             response = self.client.get(\"/raises500/\")\n+        self.assertContains(response, '<header id=\"summary\">', status_code=500)\n+        self.assertContains(response, '<main id=\"info\">', status_code=500)\n+        self.assertContains(response, '<footer id=\"explanation\">', status_code=500)\n         self.assertContains(\n             response,\n-            \"<th>Raised during:</th><td>view_tests.views.raises500</td>\",\n+            '<th scope=\"row\">Raised during:</th><td>view_tests.views.raises500</td>',\n             status_code=500,\n             html=True,\n         )\n@@ -255,7 +267,8 @@ def test_classbased_technical_500(self):\n             response = self.client.get(\"/classbased500/\")\n         self.assertContains(\n             response,\n-            \"<th>Raised during:</th><td>view_tests.views.Raises500View</td>\",\n+            '<th scope=\"row\">Raised during:</th>'\n+            \"<td>view_tests.views.Raises500View</td>\",\n             status_code=500,\n             html=True,\n         )\n@@ -397,7 +410,7 @@ def test_regression_21530(self):\n         \"\"\"\n         response = self.client.get(\"/\")\n         self.assertContains(\n-            response, \"Page not found <span>(404)</span>\", status_code=404\n+            response, \"Page not found <small>(404)</small>\", status_code=404\n         )\n \n     def test_template_encoding(self):\n@@ -531,12 +544,12 @@ def test_request_and_exception(self):\n         self.assertIn(\n             '<pre class=\"exception_value\">Can&#x27;t find my keys</pre>', html\n         )\n-        self.assertIn(\"<th>Request Method:</th>\", html)\n-        self.assertIn(\"<th>Request URL:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Request Method:</th>', html)\n+        self.assertIn('<th scope=\"row\">Request URL:</th>', html)\n         self.assertIn('<h3 id=\"user-info\">USER</h3>', html)\n         self.assertIn(\"<p>jacob</p>\", html)\n-        self.assertIn(\"<th>Exception Type:</th>\", html)\n-        self.assertIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertNotIn(\"<p>Request data not supplied</p>\", html)\n@@ -554,11 +567,11 @@ def test_no_request(self):\n         self.assertIn(\n             '<pre class=\"exception_value\">Can&#x27;t find my keys</pre>', html\n         )\n-        self.assertNotIn(\"<th>Request Method:</th>\", html)\n-        self.assertNotIn(\"<th>Request URL:</th>\", html)\n+        self.assertNotIn('<th scope=\"row\">Request Method:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Request URL:</th>', html)\n         self.assertNotIn('<h3 id=\"user-info\">USER</h3>', html)\n-        self.assertIn(\"<th>Exception Type:</th>\", html)\n-        self.assertIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertIn(\"<p>Request data not supplied</p>\", html)\n@@ -603,10 +616,10 @@ def test_no_exception(self):\n         self.assertIn(\n             '<pre class=\"exception_value\">No exception message supplied</pre>', html\n         )\n-        self.assertIn(\"<th>Request Method:</th>\", html)\n-        self.assertIn(\"<th>Request URL:</th>\", html)\n-        self.assertNotIn(\"<th>Exception Type:</th>\", html)\n-        self.assertNotIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Request Method:</th>', html)\n+        self.assertIn('<th scope=\"row\">Request URL:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertNotIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertNotIn(\"<p>Request data not supplied</p>\", html)\n@@ -626,8 +639,8 @@ def test_suppressed_context(self):\n         self.assertIn(\n             '<pre class=\"exception_value\">Can&#x27;t find my keys</pre>', html\n         )\n-        self.assertIn(\"<th>Exception Type:</th>\", html)\n-        self.assertIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertIn(\"<p>Request data not supplied</p>\", html)\n@@ -650,8 +663,8 @@ def test_innermost_exception_without_traceback(self):\n         html = reporter.get_traceback_html()\n         self.assertInHTML(\"<h1>RuntimeError</h1>\", html)\n         self.assertIn('<pre class=\"exception_value\">Oops</pre>', html)\n-        self.assertIn(\"<th>Exception Type:</th>\", html)\n-        self.assertIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertIn(\"<p>Request data not supplied</p>\", html)\n@@ -721,8 +734,8 @@ def test_mid_stack_exception_without_traceback(self):\n         html = reporter.get_traceback_html()\n         self.assertInHTML(\"<h1>RuntimeError</h1>\", html)\n         self.assertIn('<pre class=\"exception_value\">Oops</pre>', html)\n-        self.assertIn(\"<th>Exception Type:</th>\", html)\n-        self.assertIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertInHTML('<li class=\"frame user\">Traceback: None</li>', html)\n         self.assertIn(\n@@ -981,10 +994,10 @@ def test_request_and_message(self):\n         self.assertIn(\n             '<pre class=\"exception_value\">I&#x27;m a little teapot</pre>', html\n         )\n-        self.assertIn(\"<th>Request Method:</th>\", html)\n-        self.assertIn(\"<th>Request URL:</th>\", html)\n-        self.assertNotIn(\"<th>Exception Type:</th>\", html)\n-        self.assertNotIn(\"<th>Exception Value:</th>\", html)\n+        self.assertIn('<th scope=\"row\">Request Method:</th>', html)\n+        self.assertIn('<th scope=\"row\">Request URL:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertNotIn(\"<p>Request data not supplied</p>\", html)\n@@ -996,10 +1009,10 @@ def test_message_only(self):\n         self.assertIn(\n             '<pre class=\"exception_value\">I&#x27;m a little teapot</pre>', html\n         )\n-        self.assertNotIn(\"<th>Request Method:</th>\", html)\n-        self.assertNotIn(\"<th>Request URL:</th>\", html)\n-        self.assertNotIn(\"<th>Exception Type:</th>\", html)\n-        self.assertNotIn(\"<th>Exception Value:</th>\", html)\n+        self.assertNotIn('<th scope=\"row\">Request Method:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Request URL:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Exception Type:</th>', html)\n+        self.assertNotIn('<th scope=\"row\">Exception Value:</th>', html)\n         self.assertIn(\"<h2>Traceback \", html)\n         self.assertIn(\"<h2>Request information</h2>\", html)\n         self.assertIn(\"<p>Request data not supplied</p>\", html)\n", "problem_statement": "Improve accessibility of error page(s) with semantic HTML\nDescription\n\t \nThe HTTP error pages available in Django debug mode could benefit from improved semantics.\nThe following changes should be simple, without altering the look and feel of the page:\nThe page should have a header, main, and footer.\nEach table should have scope attributes on th elements.\nMonospaced text in the patterns list should use a code element.\nThe small text within the h1 should use a small element instead of a span.\nDiscussed with accessibility team member Thibaud Colas, who made this example page for the HTTP 404 error:\n\u200bhttps://static-django-demo.netlify.app/django_admin_tests/v5.1/english/defaults/404/\n", "hints_text": [["Agreed. Accessibility improvements are always welcome.", 1706156143.0], ["I will pick this up, as discussed with Thibaud earlier!", 1706172326.0]], "created_at": "2024-01-28T19:29:52Z"}
{"repo": "django/django", "pull_number": 17776, "instance_id": "django__django-17776", "issue_numbers": ["35141"], "base_commit": "06d0a1bd56a9899c351ca047a05813e8dd6a4e17", "patch": "diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\nindex 9db029cc60c6..98434c883304 100644\n--- a/docs/ref/settings.txt\n+++ b/docs/ref/settings.txt\n@@ -273,8 +273,8 @@ See :doc:`/topics/cache`.\n \n Default: ``600``\n \n-The default number of seconds to cache a page for the :ref:`cache middleware\n-<the-per-site-cache>`.\n+The default integer number of seconds to cache a page for the\n+:ref:`cache middleware <the-per-site-cache>`.\n \n See :doc:`/topics/cache`.\n \ndiff --git a/docs/topics/cache.txt b/docs/topics/cache.txt\nindex 6625b6946cfe..3d67f9b03a38 100644\n--- a/docs/topics/cache.txt\n+++ b/docs/topics/cache.txt\n@@ -608,8 +608,9 @@ entire site. You'll need to add\n Then, add the following required settings to your Django settings file:\n \n * :setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage.\n-* :setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page should\n-  be cached.\n+* :setting:`CACHE_MIDDLEWARE_SECONDS` -- The integer number of seconds each\n+  page should be cached.\n+\n * :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across\n   multiple sites using the same Django installation, set this to the name of\n   the site, or some other string that is unique to this Django instance, to\n", "test_patch": "diff --git a/tests/template_tests/test_response.py b/tests/template_tests/test_response.py\nindex 89361be284c5..d7f5a7eab75c 100644\n--- a/tests/template_tests/test_response.py\n+++ b/tests/template_tests/test_response.py\n@@ -392,7 +392,7 @@ def test_custom_urlconf(self):\n     },\n )\n @override_settings(\n-    CACHE_MIDDLEWARE_SECONDS=2.0, ROOT_URLCONF=\"template_tests.alternate_urls\"\n+    CACHE_MIDDLEWARE_SECONDS=2, ROOT_URLCONF=\"template_tests.alternate_urls\"\n )\n class CacheMiddlewareTest(SimpleTestCase):\n     def test_middleware_caching(self):\n", "problem_statement": "Clarify that CACHE_MIDDLEWARE_SECONDS should be an integer.\nDescription\n\t \nCACHE_MIDDLEWARE_SECONDS can be a float like 2.0 instead of 2 and will also be set in the response header Cache-Control to max-age: 2.0\nThis showed up in a template testcase, where it is set to a float\n@override_settings(\n\tCACHE_MIDDLEWARE_SECONDS=2.0, ROOT_URLCONF=\"template_tests.alternate_urls\"\n)\nclass CacheMiddlewareTest(SimpleTestCase):\nIt would be sufficient to change the override_settings to 2 to make the test correct, but I propose to cast the settings.CACHE_MIDDLEWARE_SECONDS value to int at the places it is used, for the same reasons as in https://code.djangoproject.com/ticket/31982\n", "hints_text": [["This is related to https://code.djangoproject.com/ticket/27225", 1706132463.0], ["The testcase in question produces a TemplateResponse like this: <TemplateResponse status_code=200, \"text/html; charset=utf-8\"> {'Content-Type': 'text/html; charset=utf-8', 'Expires': 'Thu, 25 Jan 2024 03:19:03 GMT', 'Cache-Control': 'max-age=2.0'} And from \u200bhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control \"The max-age=N response directive indicates that the response remains fresh until N seconds after the response is generated.\" Where N is an int", 1706133238.0], ["Created a PR \u200bhttps://github.com/django/django/pull/17776", 1706133571.0], ["I'm not sure we want to go down the path of casting every integer setting? (e.g. #35041 for DATA_UPLOAD_MAX_MEMORY_SIZE was recently a wontfix.)", 1706166363.0], ["But a float for max-age is definitely wrong. 'Cache-Control': 'max-age=3.1415927'", 1706169957.0], ["Certainly, but I wonder if it's Django's responsibility (and any third-party code that uses the setting) to silently correct such a mistake. I see some precedent in #31982 although there isn't much elaboration on the rationale. If we are going down this route, should reopen #35041 and do the same (as well as do a more extensive audit throughout Django and handle this pattern proactively)? I wonder if the Python standard library has a policy abou handling floats when integers are accepted.", 1706175101.0], ["Ok in #35041 it's been said that ... however we cannot add type checks for all settings. It's documented as integer and Django crashes when you use it incorrectly, so it's hard to miss. Well currently a float for CACHE_MIDDLEWARE_SECONDS will just work, but produce the wrong value for max_age, which is easy to miss. But looking forward I have a draft PR for #27225 that will make Django crash, when CACHE_MIDDLEWARE_SECONDS is a float. So this would be a harsh indicator that the setting for CACHE_MIDDLEWARE_SECONDS is wrong. With that I'm suggesting I change the PR for this ticket to \"just\" fix the comment and the setting in the testcase? What do you think? Regardless of that, maybe two more thoughts: Certainly, but I wonder if it's Django's responsibility (and any third-party code that uses the setting) to silently correct such a mistake. In this case I would rather want Django sillently do the right thing than silently do the wrong thing. I'm not sure we want to go down the path of casting every integer setting? I think we shouldn't make the perfect (type checking every setting) the enemy of the good (fixing one particular problem with one setting). In general.", 1706215071.0], ["I changed the PR accordingly", 1706216618.0], ["I'm not sure we want to go down the path of casting every integer setting? Maybe this could be part of the system checks? Here as an example only for one setting, but could be extended to more settings as well. @register(Tags.files) def check_settings_types(app_configs, **kwargs): setting = getattr(settings, \"CACHE_MIDDLEWARE_SECONDS\", None) if setting and not isinstance(setting, int): return [ Error( \"The CACHE_MIDDLEWARE_SECONDS setting should be an integer.\", id=\"files.E002\", ) ] return []", 1706221431.0], ["Replying to Alexander Lazarevi\u0107: I'm not sure we want to go down the path of casting every integer setting? Maybe this could be part of the system checks? Here as an example only for one setting, but could be extended to more settings as well. @register(Tags.files) def check_settings_types(app_configs, **kwargs): setting = getattr(settings, \"CACHE_MIDDLEWARE_SECONDS\", None) if setting and not isinstance(setting, int): return [ Error( \"The CACHE_MIDDLEWARE_SECONDS setting should be an integer.\", id=\"files.E002\", ) ] return [] All such checks have brought more bad than good effects in the past. We almost always run into issues when folks make some tricky things, where something behave like something else but does not pass isinstance() check. Let's focus in clarifying this in docs.", 1706502009.0], ["Replying to Mariusz Felisiak: Let's focus in clarifying this in docs. ok", 1706525960.0]], "created_at": "2024-01-25T03:59:01Z"}
{"repo": "django/django", "pull_number": 17774, "instance_id": "django__django-17774", "issue_numbers": ["35115"], "base_commit": "d9b91e38361696014bdc98434d6d018eae809519", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex daf4699cac17..3a80e3a3c98e 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -893,11 +893,6 @@ a.deletelink:focus, a.deletelink:hover {\n   }\n }\n \n-#footer {\n-    clear: both;\n-    padding: 10px;\n-}\n-\n /* COLUMN TYPES */\n \n .colMS {\ndiff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex b9553415d71a..df426ed991b9 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -451,14 +451,10 @@ input[type=\"submit\"], button {\n @media (max-width: 767px) {\n     /* Layout */\n \n-    #header, #content, #footer {\n+    #header, #content {\n         padding: 15px;\n     }\n \n-    #footer:empty {\n-        padding: 0;\n-    }\n-\n     div.breadcrumbs {\n         padding: 10px 15px;\n     }\ndiff --git a/django/contrib/admin/templates/admin/base.html b/django/contrib/admin/templates/admin/base.html\nindex 1ca50e508d1d..f01a7ab61ce2 100644\n--- a/django/contrib/admin/templates/admin/base.html\n+++ b/django/contrib/admin/templates/admin/base.html\n@@ -108,9 +108,9 @@\n           <br class=\"clear\">\n         </div>\n         <!-- END Content -->\n-        {% block footer %}<div id=\"footer\"></div>{% endblock %}\n       </main>\n     </div>\n+    <footer id=\"footer\">{% block footer %}{% endblock %}</footer>\n </div>\n <!-- END Container -->\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 0cf249f3cf2a..9e8ff8c04999 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -348,6 +348,10 @@ Miscellaneous\n * In order to improve accessibility, the admin's changelist filter is now\n   rendered in a ``<nav>`` tag instead of a ``<div>``.\n \n+* In order to improve accessibility, the admin's footer is now rendered in\n+  a ``<footer>`` tag instead of a ``<div>``, and also moved below the\n+  ``<div id=\"main\">`` element.\n+\n * :meth:`.SimpleTestCase.assertURLEqual` and\n   :meth:`~django.test.SimpleTestCase.assertInHTML` now add ``\": \"`` to the\n   ``msg_prefix``. This is consistent with the behavior of other assertions.\n", "test_patch": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex cb61c889414b..5877abf7819e 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -1605,6 +1605,13 @@ def test_main_content(self):\n             '<main id=\"content-start\" class=\"content\" tabindex=\"-1\">',\n         )\n \n+    def test_footer(self):\n+        response = self.client.get(reverse(\"admin:index\"))\n+        self.assertContains(response, '<footer id=\"footer\">')\n+        self.client.logout()\n+        response = self.client.get(reverse(\"admin:login\"))\n+        self.assertContains(response, '<footer id=\"footer\">')\n+\n     def test_aria_describedby_for_add_and_change_links(self):\n         response = self.client.get(reverse(\"admin:index\"))\n         tests = [\n", "problem_statement": "Empty footer element in main section of admin layout\nDescription\n\t \nThe Django admin layout has an empty div#footer in the main element.\nLocation\nFind the code in django/contrib/admin/templates/admin/base.html:\n{% block footer %}<div id=\"footer\"></div>{% endblock %}\nThe code was last touched about four years ago when someone fixed the indentation on this template.\nProposed solutions\nThere are two ways to go about this:\nRemove it, as there appears to be no immediate use for this element.\nKeep it, but in the spirit of semantic HTML, replace it with a <footer> element outside the <main> element.\n", "hints_text": [["Hello! Thank you for your report. I do see the empty section as you describe, but I also see some specific CSS that was defined for this: \u200bhttps://github.com/django/django/blob/main/django/contrib/admin/static/admin/css/base.css#L896 I'm going to add Tom to this ticket to see if they have any further feedback/insight.", 1705317684.0], ["Using git log -S footer -- django/contrib/admin I found what I think is the commit that added the line: 2673aa366a3def5ba7afc26badf6c194b515b3bf The commit message seems to indicate it was added an an extension point. In my opinion that means we could instead leave the {% block footer %} empty, and delete any css associated with #footer.", 1705329377.0], ["Yeah I think this is intended to be overridden. I agree with removing the CSS, and also with moving it out of the main element and to use a semantic footer element by default. This is backwards incompatible however, as it may affect a user's overridden template. Since this isn't explicitly documented I would find it acceptable. It would be nice to see if this is used much in the wild but searching for {% block footer %} will yield more false positives than anything else. I think it would at least need something in the release notes explaining it.", 1705332888.0], ["Replying to Tom Carrick: Yeah I think this is intended to be overridden. I agree with removing the CSS, and also with moving it out of the main element and to use a semantic footer element by default. Sounds like a plan. django/contrib/admin/templates/admin/base.html diff --git a/django/contrib/admin/templates/admin/base.html b/django/contrib/admin/templates/admin/base.html index 1ca50e508d..46d75c6090 100644 a b 108108 <br class=\"clear\"> 109109 </div> 110110 <!-- END Content --> 111 {% block footer %}<div id=\"footer\"></div>{% endblock %} 112111 </main> 112 {% block footer %}<footer></footer>{% endblock %} 113113 </div> 114114</div> 115115<!-- END Container -->", 1705358381.0], ["I have two concerns with this that I\u2019d recommend investigating further: Do screen readers announce landmark regions like footer that are empty? If so that would be problematic. You should be able to test this with VoiceOver on mac, and in particular the rotor: \u200bhttps://support.apple.com/en-gb/guide/voiceover/mchlp2719/mac. If that feels like too much, please say so and we\u2019ll have the Django accessibility team picking this up Is it clear enough to people who would override this, that with it outside main, they\u2019d definitely need to use a <footer> tag? Otherwise their content would be outside a landmark (\u200bhttps://dequeuniversity.com/rules/axe/4.3/region).", 1705379757.0], ["Replying to Thibaud Colas: I have two concerns with this that I\u2019d recommend investigating further: Do screen readers announce landmark regions like footer that are empty? If so that would be problematic. You should be able to test this with VoiceOver on mac, and in particular the rotor: \u200bhttps://support.apple.com/en-gb/guide/voiceover/mchlp2719/mac. If that feels like too much, please say so and we\u2019ll have the Django accessibility team picking this up Is it clear enough to people who would override this, that with it outside main, they\u2019d definitely need to use a <footer> tag? Otherwise their content would be outside a landmark (\u200bhttps://dequeuniversity.com/rules/axe/4.3/region). I wanted do keep <footer> as a guide for others. We can also force them to use it by: <footer>{% block footer %}{% endblock %}</footer> This, of course, does not answer your first question.", 1705380628.0], ["Thanks Mariusz, yep, I think that\u2019s a good way to achieve this. I believe Marijke intends to work on this so will assign her. Am happy to do the screen reader testing if it helps.", 1705418987.0], ["Thank you, I will pick it up!", 1705461553.0], ["I've added a patch. I have used macOS VoiceOver (VO) to test spoken text of this landmark, and Firefox's built-in accessiblity inspector. The accessiblity inspector describes this element with having role contentinfo. VO ignores the element when it is empty. When putting a link in the footer, VO reads it. When selecting the parent using Rotor (VO modifier + shift + up arrow), it only spoke \"content\".", 1706016084.0]], "created_at": "2024-01-23T19:17:07Z"}
{"repo": "django/django", "pull_number": 17771, "instance_id": "django__django-17771", "issue_numbers": ["35135"], "base_commit": "a5365339eaee043895a79dbbdd7462f1399136e5", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 6e8813b5e747..5100869b3429 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -91,6 +91,8 @@ def get_children_from_q(q):\n \n \n def get_child_with_renamed_prefix(prefix, replacement, child):\n+    from django.db.models.query import QuerySet\n+\n     if isinstance(child, Node):\n         return rename_prefix_from_q(prefix, replacement, child)\n     if isinstance(child, tuple):\n@@ -105,6 +107,14 @@ def get_child_with_renamed_prefix(prefix, replacement, child):\n         child = child.copy()\n         if child.name.startswith(prefix + LOOKUP_SEP):\n             child.name = child.name.replace(prefix, replacement, 1)\n+    elif isinstance(child, QuerySet):\n+        # QuerySet may contain OuterRef() references which cannot work properly\n+        # without repointing to the filtered annotation and will spawn a\n+        # different JOIN. Always raise ValueError instead of providing partial\n+        # support in other cases.\n+        raise ValueError(\n+            \"Passing a QuerySet within a FilteredRelation is not supported.\"\n+        )\n     elif hasattr(child, \"resolve_expression\"):\n         child = child.copy()\n         child.set_source_expressions(\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex c795049c737a..8e2d648ecce8 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -19,3 +19,8 @@ Bugfixes\n \n * Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on\n   models with a ``GeneratedField`` (:ticket:`35127`).\n+\n+* Fixed a regression in Django 5.0 that caused a crash of\n+  ``FilteredRelation()`` with querysets as right-hand sides (:ticket:`35135`).\n+  ``FilteredRelation()`` now raises a ``ValueError`` on querysets as right-hand\n+  sides.\n", "test_patch": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex 19714e844331..82caba866217 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -828,6 +828,16 @@ def test_conditional_expression_lhs_contains_relation_name(self):\n         ).filter(rel__isnull=True)\n         self.assertSequenceEqual(qs, [])\n \n+    def test_conditional_expression_does_not_support_queryset(self):\n+        msg = \"Passing a QuerySet within a FilteredRelation is not supported.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            Author.objects.annotate(\n+                poem_book=FilteredRelation(\n+                    \"book\",\n+                    condition=Q(book__in=Book.objects.filter(title__istartswith=\"a\")),\n+                ),\n+            ).filter(poem_book__isnull=False)\n+\n \n class FilteredRelationAggregationTests(TestCase):\n     @classmethod\n", "problem_statement": "FilteredRelation fails when rhs of the condition is a queryset\nDescription\n\t \nThere is a regression test on the following pr \u200bhttps://github.com/django/django/pull/17771\n", "hints_text": [["Thanks for the report.", 1705991293.0], ["Regression in 59f475470494ce5b8cbff816b1e5dafcbd10a3a3.", 1705993456.0], ["Sorry, I set the \"patch needs improvement\" flag in the wrong tab, reverting :-)", 1706000360.0]], "created_at": "2024-01-23T10:57:26Z"}
{"repo": "django/django", "pull_number": 17766, "instance_id": "django__django-17766", "issue_numbers": ["35130"], "base_commit": "a5622f84ab0ba0ebb30c2b85f2b85d8aef75f337", "patch": "diff --git a/django/db/__init__.py b/django/db/__init__.py\nindex f3cf4574a961..eb8118adb5c9 100644\n--- a/django/db/__init__.py\n+++ b/django/db/__init__.py\n@@ -17,6 +17,7 @@\n from django.utils.connection import ConnectionProxy\n \n __all__ = [\n+    \"close_old_connections\",\n     \"connection\",\n     \"connections\",\n     \"router\",\ndiff --git a/docs/ref/databases.txt b/docs/ref/databases.txt\nindex 5a31ceeaaead..d98d523db581 100644\n--- a/docs/ref/databases.txt\n+++ b/docs/ref/databases.txt\n@@ -99,7 +99,8 @@ connections.\n \n If a connection is created in a long-running process, outside of Django\u2019s\n request-response cycle, the connection will remain open until explicitly\n-closed, or timeout occurs.\n+closed, or timeout occurs. You can use ``django.db.close_old_connections()`` to\n+close all old or unusable connections.\n \n Encoding\n --------\n", "test_patch": "", "problem_statement": "Document how to manually close database connections\nDescription\n\t \nI was reading about manual database connection management today and came upon this section (emphasis mine) [1]:\nIf a connection is created in a long-running process, outside of Django\u2019s request-response cycle, the connection will remain open until explicitly closed, or timeout occurs.\nFrom what I understand, manually closing open db connections is done by calling django.db.close_old_connections(), but that function does not seem to be documented officially.\nI'm not sure if the function is undocumented by design (it is after all a pretty unusual use-case and most users should never have to call it themselves), or if that was just an omission.\n[1] \u200bhttps://docs.djangoproject.com/en/dev/ref/databases/#caveats\n", "hints_text": [["I think it's fine to at least mention it in the \"Caveats\" section.", 1705878819.0], ["\u200bPR", 1705900560.0], ["In 184d82d: Fixed #35130 -- Doc'd django.db.close_old_connections(). This also adds close_db_connections() to the django.db.all.", 1705905131.0]], "created_at": "2024-01-22T09:59:08Z"}
{"repo": "django/django", "pull_number": 17760, "instance_id": "django__django-17760", "issue_numbers": ["29280"], "base_commit": "ae8baaee9d717cb48d59514b7130e35ae921d265", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 82aab46439b5..615aa7b7f75d 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -103,6 +103,7 @@ answer newbie questions, and generally made Django that much better:\n     Antti Kaihola <http://djangopeople.net/akaihola/>\n     Anubhav Joshi <anubhav9042@gmail.com>\n     Anvesh Mishra <anveshgreat11@gmail.com>\n+    An\u017ee Pe\u010dar <anze@pecar.me>\n     Aram Dulyan\n     arien <regexbot@gmail.com>\n     Armin Ronacher\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 10a296c992ce..8e17ea3d4447 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -135,6 +135,8 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         \"iendswith\": r\"LIKE '%%' || UPPER({}) ESCAPE '\\'\",\n     }\n \n+    transaction_modes = frozenset([\"DEFERRED\", \"EXCLUSIVE\", \"IMMEDIATE\"])\n+\n     Database = Database\n     SchemaEditorClass = DatabaseSchemaEditor\n     # Classes instantiated in __init__().\n@@ -171,6 +173,20 @@ def get_connection_params(self):\n                 RuntimeWarning,\n             )\n         kwargs.update({\"check_same_thread\": False, \"uri\": True})\n+        transaction_mode = kwargs.pop(\"transaction_mode\", None)\n+        if (\n+            transaction_mode is not None\n+            and transaction_mode.upper() not in self.transaction_modes\n+        ):\n+            allowed_transaction_modes = \", \".join(\n+                [f\"{mode!r}\" for mode in sorted(self.transaction_modes)]\n+            )\n+            raise ImproperlyConfigured(\n+                f\"settings.DATABASES[{self.alias!r}]['OPTIONS']['transaction_mode'] \"\n+                f\"is improperly configured to '{transaction_mode}'. Use one of \"\n+                f\"{allowed_transaction_modes}, or None.\"\n+            )\n+        self.transaction_mode = transaction_mode.upper() if transaction_mode else None\n         return kwargs\n \n     def get_database_version(self):\n@@ -298,7 +314,10 @@ def _start_transaction_under_autocommit(self):\n         Staying in autocommit mode works around a bug of sqlite3 that breaks\n         savepoints when autocommit is disabled.\n         \"\"\"\n-        self.cursor().execute(\"BEGIN\")\n+        if self.transaction_mode is None:\n+            self.cursor().execute(\"BEGIN\")\n+        else:\n+            self.cursor().execute(f\"BEGIN {self.transaction_mode}\")\n \n     def is_in_memory_db(self):\n         return self.creation.is_in_memory_db(self.settings_dict[\"NAME\"])\ndiff --git a/docs/ref/databases.txt b/docs/ref/databases.txt\nindex d98d523db581..d853647730bc 100644\n--- a/docs/ref/databases.txt\n+++ b/docs/ref/databases.txt\n@@ -870,6 +870,38 @@ If you're getting this error, you can solve it by:\n   This will make SQLite wait a bit longer before throwing \"database is locked\"\n   errors; it won't really do anything to solve them.\n \n+.. _sqlite-transaction-behavior:\n+\n+Transactions behavior\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+.. versionadded:: 5.1\n+\n+SQLite supports three transaction modes: ``DEFERRED``, ``IMMEDIATE``, and\n+``EXCLUSIVE``.\n+\n+The default is ``DEFERRED``. If you need to use a different mode, set it in the\n+:setting:`OPTIONS` part of your database configuration in\n+:setting:`DATABASES`, for example::\n+\n+    \"OPTIONS\": {\n+        # ...\n+        \"transaction_mode\": \"IMMEDIATE\",\n+        # ...\n+    }\n+\n+To make sure your transactions wait until ``timeout`` before raising \"Database\n+is Locked\", change the transaction mode to ``IMMEDIATE``.\n+\n+For the best performance with ``IMMEDIATE`` and ``EXCLUSIVE``, transactions\n+should be as short as possible. This might be hard to guarantee for all of your\n+views so the usage of :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is\n+discouraged  in this case.\n+\n+For more information see `Transactions in SQLite`_.\n+\n+.. _`Transactions in SQLite`:  https://www.sqlite.org/lang_transaction.html#deferred_immediate_and_exclusive_transactions\n+\n ``QuerySet.select_for_update()`` not supported\n ----------------------------------------------\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 5d57edde46b9..284c1f4f7453 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -235,6 +235,9 @@ Models\n   reload a model's value. This can be used to lock the row before reloading or\n   to select related objects.\n \n+* The new ``\"transaction_mode\"`` option is now supported in :setting:`OPTIONS`\n+  on SQLite to allow specifying the :ref:`sqlite-transaction-behavior`.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex 330ed5048885..42fee432f965 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -3,9 +3,11 @@\n import tempfile\n import threading\n import unittest\n+from contextlib import contextmanager\n from pathlib import Path\n from unittest import mock\n \n+from django.core.exceptions import ImproperlyConfigured\n from django.db import (\n     DEFAULT_DB_ALIAS,\n     NotSupportedError,\n@@ -15,8 +17,8 @@\n )\n from django.db.models import Aggregate, Avg, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n-from django.test import TestCase, TransactionTestCase, override_settings\n-from django.test.utils import isolate_apps\n+from django.test import SimpleTestCase, TestCase, TransactionTestCase, override_settings\n+from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from ..models import Item, Object, Square\n \n@@ -245,3 +247,55 @@ def create_object():\n             for conn in thread_connections:\n                 if conn is not main_connection:\n                     conn.close()\n+\n+\n+@unittest.skipUnless(connection.vendor == \"sqlite\", \"SQLite tests\")\n+class TestTransactionMode(SimpleTestCase):\n+    databases = {\"default\"}\n+\n+    def test_default_transaction_mode(self):\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            with transaction.atomic():\n+                pass\n+\n+        begin_query, commit_query = captured_queries\n+        self.assertEqual(begin_query[\"sql\"], \"BEGIN\")\n+        self.assertEqual(commit_query[\"sql\"], \"COMMIT\")\n+\n+    def test_invalid_transaction_mode(self):\n+        msg = (\n+            \"settings.DATABASES['default']['OPTIONS']['transaction_mode'] is \"\n+            \"improperly configured to 'invalid'. Use one of 'DEFERRED', 'EXCLUSIVE', \"\n+            \"'IMMEDIATE', or None.\"\n+        )\n+        with self.change_transaction_mode(\"invalid\") as new_connection:\n+            with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+                new_connection.ensure_connection()\n+\n+    def test_valid_transaction_modes(self):\n+        valid_transaction_modes = (\"deferred\", \"immediate\", \"exclusive\")\n+        for transaction_mode in valid_transaction_modes:\n+            with (\n+                self.subTest(transaction_mode=transaction_mode),\n+                self.change_transaction_mode(transaction_mode) as new_connection,\n+                CaptureQueriesContext(new_connection) as captured_queries,\n+            ):\n+                new_connection.set_autocommit(\n+                    False, force_begin_transaction_with_broken_autocommit=True\n+                )\n+                new_connection.commit()\n+                expected_transaction_mode = transaction_mode.upper()\n+                begin_sql = captured_queries[0][\"sql\"]\n+                self.assertEqual(begin_sql, f\"BEGIN {expected_transaction_mode}\")\n+\n+    @contextmanager\n+    def change_transaction_mode(self, transaction_mode):\n+        new_connection = connection.copy()\n+        new_connection.settings_dict[\"OPTIONS\"] = {\n+            **new_connection.settings_dict[\"OPTIONS\"],\n+            \"transaction_mode\": transaction_mode,\n+        }\n+        try:\n+            yield new_connection\n+        finally:\n+            new_connection.close()\n", "problem_statement": "Add a database OPTIONS to specify the transaction mode one SQLite.\nDescription\n\t\t\n(last modified by Ove K\u00e5ven)\t\t\nI'd like to propose a change like this, which I think would fix a class of SQLite \"database is locked\" problems. But it's possible you want to add a config option, or an argument to transaction.atomic(), or something of the kind.\ndiff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 3989028930..391a50789e 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -272,7 +272,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n\t\t Staying in autocommit mode works around a bug of sqlite3 that breaks\n\t\t savepoints when autocommit is disabled.\n\t\t \"\"\"\n-\t\tself.cursor().execute(\"BEGIN\")\n+\t\tself.cursor().execute(\"BEGIN IMMEDIATE\")\n \n\t def is_in_memory_db(self):\n\t\t return self.creation.is_in_memory_db(self.settings_dict['NAME'])\nExplanation: Consider a type of transaction consisting of, for example, an update_or_create() call, which you run in a \"with transaction.atomic()\" context. Suppose two threads or processes run such a transaction at exactly the same time (but with different keys, doesn't matter, SQLite locks the whole database anyway).\nThe current transaction.atomic() implementation results in a \"BEGIN\", which tells SQLite to start deferred transactions, i.e., to *not* acquire any locks before it has to.\nNormally, update_or_create would first do a \"SELECT FOR UPDATE\", but SQLite doesn't support that, so a plain \"SELECT\" is done. Both threads acquire a shared read lock, and so the SELECTs succeed for both threads.\nNext, update_or_create needs to do an INSERT or UPDATE (not important which), so the threads needs to upgrade the read locks to write locks. Unfortunately, only one thread can have the write lock.\nNow, the designers of SQLite apparently realized that if you already have the read lock, then it's not a good idea to start a blocking wait on the write lock. If you wait while holding the read lock, then nobody will ever be able to acquire exclusive access to the database, and everything will just hang. On the other hand, if you drop the read lock and then wait, then you lose the 'serializable' isolation guarantee that SQLite tries to give. Hence, SQLite has only one choice.\nThe thread that didn't get the write lock immediately gets a \"database is locked\" error. Its transaction is aborted.\nThe timeout mentioned in the Django documentation will have absolutely no effect on this, and it doesn't matter how short-lived your transactions are. It only matters that they do a read before they do a write.\nI can see three possible solutions to this problem:\n\"Don't do that\". Don't use SQLite, or don't do concurrency. (Many answers on StackOverflow.com and such are essentially this.)\nTreat the \"database is locked\" as if it were a \"serialization error\", which it kind of is. That is, the app must retry the transaction until it commits. That works, but is somewhat unsatisfactory.\nGrab the write lock immediately (like \"SELECT FOR UPDATE\" would have, if SQLite had supported it). That's what \"BEGIN IMMEDIATE\", in the above patch, does. After all, if you're not holding the read lock when you try to grab the write lock, then this particular problem won't happen. (Of course, the lock timeout thing that's mentioned in the Django documentation can still happen if your transactions are too long-lived, but that's different.)\nAnd I think that if you're using \"with transaction.atomic()\" in the first place, then you most likely want to write to the database, in which case there's not much reason not to always grab the write lock right away. But even if it's decided that some config option would be good, it probably shouldn't be too hard to add? Or?\n", "hints_text": [["Aymeric, do you have expertise to offer on this proposal?", 1522670525.0], ["So the proposal here is to always use immediate rather than deferred transactions. Per \u200bhttps://www.sqlite.org/lang_transaction.html: After a BEGIN IMMEDIATE, no other database connection will be able to write to the database or do a BEGIN IMMEDIATE or BEGIN EXCLUSIVE. This means all atomic blocks will be serialized. Combined with ATOMIC_REQUESTS = True, HTTP requests will be serialized. I don't think that's an acceptable behavior. In general the performance hit of removing the possibility of concurrent database reads \u2014 and web workflows tend to be read-heavy \u2014 seems too high to implement this in Django. Also I'm not sure it fits well with the premise of allowing concurrency. It brings us back to \"Don't use SQLite, or don't do concurrency.\" FWIW you can trivially subclass (or monkey-patch) the SQLite database adapter to make this change in your project.", 1522765426.0], ["Just a not for anyone who has this same problem and is looking for a solution... I agree with the assessment that transforming all atomic blocks into immediate transactions would have a huge negative impact. However, SOME atomic blocks (those containing select_for_update or update_or_create) when on sqlite and using threads / processes _could_ be immediate transactions without too great of an impact. This can be accomplished by monkey patching the atomic decorator / context manager to support an immediate argument. If you add the following to your project's __init__.py: from django.db import connection, DEFAULT_DB_ALIAS from django.db import transaction def _monkey_patch_atomic(): def atomic(using=None, savepoint=True, immediate=False): # Bare decorator: @atomic -- although the first argument is called # `using`, it's actually the function being decorated. if callable(using): a = transaction.Atomic(DEFAULT_DB_ALIAS, savepoint)(using) # Decorator: @atomic(...) or context manager: with atomic(...): ... else: a = transaction.Atomic(using, savepoint) a.immediate = immediate return a def __enter__(self): connection = transaction.get_connection(self.using) if not connection.in_atomic_block: # Reset state when entering an outermost atomic block. connection.commit_on_exit = True connection.needs_rollback = False if not connection.get_autocommit(): # Pretend we're already in an atomic block to bypass the code # that disables autocommit to enter a transaction, and make a # note to deal with this case in __exit__. connection.in_atomic_block = True connection.commit_on_exit = False if connection.in_atomic_block: # We're already in a transaction; create a savepoint, unless we # were told not to or we're already waiting for a rollback. The # second condition avoids creating useless savepoints and prevents # overwriting needs_rollback until the rollback is performed. if self.savepoint and not connection.needs_rollback: sid = connection.savepoint() connection.savepoint_ids.append(sid) else: connection.savepoint_ids.append(None) else: if self.immediate: connection.set_autocommit(False) connection.cursor().execute('BEGIN IMMEDIATE') else: connection.set_autocommit(False, force_begin_transaction_with_broken_autocommit=True) connection.in_atomic_block = True transaction.atomic = atomic transaction.Atomic.immediate = False transaction.Atomic.__enter__ = __enter__ _monkey_patch_atomic() You can then do: with atomic(immediate=True): ModelName.objects.update_or_create(foo=foo) And the transaction will be started with BEGIN IMMEDIATE avoiding the deadlock described here. With this change in place the erstwhile deadlock victim will wait for the victor.", 1550047797.0], ["Re-opening as a new feature to target adding a SQLite specific OPTIONS[\"transaction_mode\"] option per \u200bthe forum and \u200bDiscord discussions.", 1705583604.0]], "created_at": "2024-01-19T14:56:17Z"}
{"repo": "django/django", "pull_number": 17758, "instance_id": "django__django-17758", "issue_numbers": ["35127"], "base_commit": "8a1727dc7f66db7f0131d545812f77544f35aa57", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex b15bdd032ab0..61925f63ea30 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1628,7 +1628,7 @@ def clean_fields(self, exclude=None):\n \n         errors = {}\n         for f in self._meta.fields:\n-            if f.name in exclude:\n+            if f.name in exclude or f.generated:\n                 continue\n             # Skip validation for empty fields with blank=True. The developer\n             # is responsible for making sure they have a valid value.\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex a5e2b6eee407..05f80bb00f92 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -15,3 +15,6 @@ Bugfixes\n \n * Fixed a regression in Django 5.0 where links in the admin had an incorrect\n   color (:ticket:`35121`).\n+\n+* Fixed a bug in Django 5.0 that caused a crash of ``Model.full_clean()`` on\n+  models with a ``GeneratedField`` (:ticket:`35127`).\n", "test_patch": "diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\nindex 69b4e26145ce..e34f3c8947aa 100644\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -502,7 +502,7 @@ class GeneratedModel(models.Model):\n         output_field=models.IntegerField(),\n         db_persist=True,\n     )\n-    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=True)\n+    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=True, blank=True)\n \n     class Meta:\n         required_db_features = {\"supports_stored_generated_columns\"}\n@@ -516,7 +516,7 @@ class GeneratedModelVirtual(models.Model):\n         output_field=models.IntegerField(),\n         db_persist=False,\n     )\n-    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=True)\n+    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=True, blank=True)\n \n     class Meta:\n         required_db_features = {\"supports_virtual_generated_columns\"}\ndiff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex 589f78cbb042..a636e984fdbe 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -168,6 +168,14 @@ def test_unsaved_error(self):\n         with self.assertRaisesMessage(AttributeError, msg):\n             m.field\n \n+    def test_full_clean(self):\n+        m = self.base_model(a=1, b=2)\n+        # full_clean() ignores GeneratedFields.\n+        m.full_clean()\n+        m.save()\n+        m = self._refresh_if_needed(m)\n+        self.assertEqual(m.field, 3)\n+\n     def test_create(self):\n         m = self.base_model.objects.create(a=1, b=2)\n         m = self._refresh_if_needed(m)\n", "problem_statement": "Model.full_clean() errors with GeneratedField\nDescription\n\t \nWhen running full_clean() on an unsaved model instance, the folllowing error is generated:\nAttributeError: Cannot read a generated field from an unsaved model.\nReproducible with following test:\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -177,6 +177,10 @@ class GeneratedFieldTestMixin:\n\t\t with self.assertRaises(IntegrityError):\n\t\t\t self.base_model.objects.create()\n \n+\tdef test_full_clean(self):\n+\t\tm = self.base_model(a=2, b=4)\n+\t\tm.full_clean()\n+\n\t def test_save(self):\n\t\t # Insert.\n\t\t m = self.base_model(a=2, b=4)\n", "hints_text": [["Hello, thank you for your report! And thank you for providing a failing test. I'm accepting given the failing test and that there is nothing in the docs stating that full_clean would not be supported for models including a GeneratedFields, so while more expert input is needed (adding them as CC), this seems like a valid issue. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95", 1705580667.0], ["\u200bPR", 1705619686.0], ["In 4879907: Fixed #35127 -- Made Model.full_clean() ignore GeneratedFields. Thanks Claude Paroz for the report. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.", 1705629356.0], ["In ee78fe3: [5.0.x] Fixed #35127 -- Made Model.full_clean() ignore GeneratedFields. Thanks Claude Paroz for the report. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95. Backport of 4879907223d70ee1a82474d9286ccfa5dae96971 from main", 1705629393.0]], "created_at": "2024-01-19T05:09:07Z"}
{"repo": "django/django", "pull_number": 17751, "instance_id": "django__django-17751", "issue_numbers": ["35121"], "base_commit": "51967b56c404358c4fb1a47731fefb4171aea5ee", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex aaa9c3441a55..daf4699cac17 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -102,7 +102,7 @@ body {\n /* LINKS */\n \n a:link, a:visited {\n-    color: var(--body-fg);\n+    color: var(--link-fg);\n     text-decoration: none;\n     transition: color 0.15s, background 0.15s;\n }\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex facfed26f509..a5e2b6eee407 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -12,3 +12,6 @@ Bugfixes\n * Reallowed, following a regression in Django 5.0.1, filtering against local\n   foreign keys not included in :attr:`.ModelAdmin.list_filter`\n   (:ticket:`35087`).\n+\n+* Fixed a regression in Django 5.0 where links in the admin had an incorrect\n+  color (:ticket:`35121`).\n", "test_patch": "", "problem_statement": "Links in the admin should use the --link-fg color.\nDescription\n\t \nLinks in the admin should use the --link-fg color. There is #34038 to improve links in the admin, however, this is a separate regression that should be fixed and backported to Django 5.0:\ndjango/contrib/admin/static/admin/css/base.css\ndiff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex aaa9c3441a..daf4699cac 100644\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n body {\n\t\t\t \u00a0\n\t\t\t\n102102/* LINKS */\n103103\n104104a:link, a:visited {\n105\u00a0\u00a0 \u00a0 color: var(--body-fg);\n\u00a0105\u00a0 \u00a0 color: var(--link-fg);\n106106\u00a0 \u00a0 text-decoration: none;\n107107\u00a0 \u00a0 transition: color 0.15s, background 0.15s;\n108108}\nReported by Collin.\nRegression in 6ad2738a8f32b94cbae742f212080fadf2dee421.\n", "hints_text": [["In 10c7c73: Fixed #35121 -- Corrected color for links in the admin. Thanks Collin Anderson for the report. Regression in 6ad2738a8f32b94cbae742f212080fadf2dee421.", 1705561635.0], ["In 4ed1423d: [5.0.x] Fixed #35121 -- Corrected color for links in the admin. Thanks Collin Anderson for the report. Regression in 6ad2738a8f32b94cbae742f212080fadf2dee421. Backport of 10c7c7320baf1c655fcb91202169d77725c9c4bd from main", 1705561666.0]], "created_at": "2024-01-18T09:23:09Z"}
{"repo": "django/django", "pull_number": 17749, "instance_id": "django__django-17749", "issue_numbers": ["35122"], "base_commit": "222bf2932b55ebc964ffc5f9a6f47bad083e5ac2", "patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex 1541843066cc..3a0e9e87ff84 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -195,8 +195,11 @@ def handle(self, *args, **options):\n                 )\n             if self.verbosity > 0:\n                 self.stdout.write(\"Pruning migrations:\", self.style.MIGRATE_HEADING)\n-            to_prune = set(executor.loader.applied_migrations) - set(\n-                executor.loader.disk_migrations\n+            to_prune = sorted(\n+                migration\n+                for migration in set(executor.loader.applied_migrations)\n+                - set(executor.loader.disk_migrations)\n+                if migration[0] == app_label\n             )\n             squashed_migrations_with_deleted_replaced_migrations = [\n                 migration_key\n@@ -222,9 +225,6 @@ def handle(self, *args, **options):\n                     )\n                 )\n             else:\n-                to_prune = sorted(\n-                    migration for migration in to_prune if migration[0] == app_label\n-                )\n                 if to_prune:\n                     for migration in to_prune:\n                         app, name = migration\n", "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 1f8b3fb01149..6ef172ee6fa8 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -1427,6 +1427,53 @@ def test_prune_no_app_label(self):\n         with self.assertRaisesMessage(CommandError, msg):\n             call_command(\"migrate\", prune=True)\n \n+    @override_settings(\n+        MIGRATION_MODULES={\n+            \"migrations\": \"migrations.test_migrations_squashed_no_replaces\",\n+            \"migrations2\": \"migrations2.test_migrations_2_squashed_with_replaces\",\n+        },\n+        INSTALLED_APPS=[\"migrations\", \"migrations2\"],\n+    )\n+    def test_prune_respect_app_label(self):\n+        recorder = MigrationRecorder(connection)\n+        recorder.record_applied(\"migrations\", \"0001_initial\")\n+        recorder.record_applied(\"migrations\", \"0002_second\")\n+        recorder.record_applied(\"migrations\", \"0001_squashed_0002\")\n+        # Second app has squashed migrations with replaces.\n+        recorder.record_applied(\"migrations2\", \"0001_initial\")\n+        recorder.record_applied(\"migrations2\", \"0002_second\")\n+        recorder.record_applied(\"migrations2\", \"0001_squashed_0002\")\n+        out = io.StringIO()\n+        try:\n+            call_command(\"migrate\", \"migrations\", prune=True, stdout=out, no_color=True)\n+            self.assertEqual(\n+                out.getvalue(),\n+                \"Pruning migrations:\\n\"\n+                \"  Pruning migrations.0001_initial OK\\n\"\n+                \"  Pruning migrations.0002_second OK\\n\",\n+            )\n+            applied_migrations = [\n+                migration\n+                for migration in recorder.applied_migrations()\n+                if migration[0] in [\"migrations\", \"migrations2\"]\n+            ]\n+            self.assertEqual(\n+                applied_migrations,\n+                [\n+                    (\"migrations\", \"0001_squashed_0002\"),\n+                    (\"migrations2\", \"0001_initial\"),\n+                    (\"migrations2\", \"0002_second\"),\n+                    (\"migrations2\", \"0001_squashed_0002\"),\n+                ],\n+            )\n+        finally:\n+            recorder.record_unapplied(\"migrations\", \"0001_initial\")\n+            recorder.record_unapplied(\"migrations\", \"0001_second\")\n+            recorder.record_unapplied(\"migrations\", \"0001_squashed_0002\")\n+            recorder.record_unapplied(\"migrations2\", \"0001_initial\")\n+            recorder.record_unapplied(\"migrations2\", \"0002_second\")\n+            recorder.record_unapplied(\"migrations2\", \"0001_squashed_0002\")\n+\n \n class MakeMigrationsTests(MigrationTestBase):\n     \"\"\"\ndiff --git a/tests/migrations2/test_migrations_2_squashed_with_replaces/0001_squashed_0002.py b/tests/migrations2/test_migrations_2_squashed_with_replaces/0001_squashed_0002.py\nnew file mode 100644\nindex 000000000000..30700e5eb6e9\n--- /dev/null\n+++ b/tests/migrations2/test_migrations_2_squashed_with_replaces/0001_squashed_0002.py\n@@ -0,0 +1,30 @@\n+from django.db import migrations, models\n+\n+\n+class Migration(migrations.Migration):\n+    replaces = [\n+        (\"migrations2\", \"0001_initial\"),\n+        (\"migrations2\", \"0002_second\"),\n+    ]\n+\n+    operations = [\n+        migrations.CreateModel(\n+            \"OtherAuthor\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=255)),\n+            ],\n+        ),\n+        migrations.CreateModel(\n+            \"OtherBook\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\n+                    \"author\",\n+                    models.ForeignKey(\n+                        \"migrations2.OtherAuthor\", models.SET_NULL, null=True\n+                    ),\n+                ),\n+            ],\n+        ),\n+    ]\ndiff --git a/tests/migrations2/test_migrations_2_squashed_with_replaces/__init__.py b/tests/migrations2/test_migrations_2_squashed_with_replaces/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\n", "problem_statement": "--prune should take app_label into account then checking squashed migrations.\nDescription\n\t \nConsidering that entering the app label is mandatory when running migrate command with --prune, it is ignored during command execution and some pre-conditions are checked globally.\nthere are some apps that are actually third-party and we don't have any control on them. if I want to prune migration only for my specific app, I get this error:\nCannot use --prune because the following squashed migrations have their 'replaces' attributes and may not be recorded as applied:\nsocial_django.0001_initial\nsocial_django.0004_auto_20160423_0400\nsocial_django.0003_alter_email_max_length\nsocial_django.0002_add_related_name\nsocial_django.0005_auto_20160727_2333\nsocial_django is a third party app that I don't have any control on that. But in prune command I used orders app this my app. So it seems some preconditions are checking globally instead of checking based on app.\n", "hints_text": [], "created_at": "2024-01-17T20:19:15Z"}
{"repo": "django/django", "pull_number": 17747, "instance_id": "django__django-17747", "issue_numbers": ["32923"], "base_commit": "c7e986fc9f4848bd757d4b9b70a40586d2cee9fb", "patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 62d68985c073..4ec7b7aee74f 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -261,6 +261,10 @@ def __deepcopy__(self, memo):\n         result.validators = self.validators[:]\n         return result\n \n+    def _clean_bound_field(self, bf):\n+        value = bf.initial if self.disabled else bf.data\n+        return self.clean(value)\n+\n \n class CharField(Field):\n     def __init__(\n@@ -694,6 +698,10 @@ def bound_data(self, _, initial):\n     def has_changed(self, initial, data):\n         return not self.disabled and data is not None\n \n+    def _clean_bound_field(self, bf):\n+        value = bf.initial if self.disabled else bf.data\n+        return self.clean(value, bf.initial)\n+\n \n class ImageField(FileField):\n     default_validators = [validators.validate_image_file_extension]\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 5de14d598af3..452f554e1eca 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -6,7 +6,7 @@\n import datetime\n \n from django.core.exceptions import NON_FIELD_ERRORS, ValidationError\n-from django.forms.fields import Field, FileField\n+from django.forms.fields import Field\n from django.forms.utils import ErrorDict, ErrorList, RenderableFormMixin\n from django.forms.widgets import Media, MediaDefiningClass\n from django.utils.datastructures import MultiValueDict\n@@ -329,13 +329,8 @@ def full_clean(self):\n     def _clean_fields(self):\n         for name, bf in self._bound_items():\n             field = bf.field\n-            value = bf.initial if field.disabled else bf.data\n             try:\n-                if isinstance(field, FileField):\n-                    value = field.clean(value, bf.initial)\n-                else:\n-                    value = field.clean(value)\n-                self.cleaned_data[name] = value\n+                self.cleaned_data[name] = field._clean_bound_field(bf)\n                 if hasattr(self, \"clean_%s\" % name):\n                     value = getattr(self, \"clean_%s\" % name)()\n                     self.cleaned_data[name] = value\n", "test_patch": "", "problem_statement": "Add Field._clean_bound_field() to remove isinstance check in BaseForm._clean_fields()\nDescription\n\t \nThis is a follow-up to ticket #32920.\nCurrently, BaseForm._clean_fields() does an instance check for each field to special-case FileField:\n\u200bhttps://github.com/django/django/blob/f5669fd7b568cf8a3eda1e65c1c6fb583c7b177d/django/forms/forms.py#L396-L400\nI noticed that if Field grows a _clean_bound_field(bf) method, then the special-casing could be handled by overriding _clean_bound_field() in FileField, and _clean_fields() would become simpler.\n", "hints_text": [["Accepting in principle. The overhead of the extra method call is probably offset by the removal of the isinstance() check. (I'm basing the following on top of your changes in your \u200bPR for #32920.) If I understand this correctly, then the idea is that we end up with changing this: # django/forms/forms.py class BaseForm: ... def _clean_fields(self): ... value = bf.initial if field.disabled else bf.data ... if isinstance(field, FileField): value = field.clean(value, bf.initial) else: value = field.clean(value) self.cleaned_data[name] = value ... To this: # django/forms/fields.py class Field: ... def _clean_bound_field(self, bf): value = bf.initial if self.disabled else bf.data return self.clean(value) ... class FileField(Field): ... def _clean_bound_field(self, bf): value = bf.initial if self.disabled else bf.data return self.clean(value, bf.initial) ... # django/forms/forms.py class BaseForm: ... def _clean_fields(self): ... self.cleaned_data[name] = field._clean_bound_field(bf) ... I have a few thoughts: Would we want to use value = field.bound_data(bf.data, bf.initial) in _clean_bound_field()?Field.bound_data() implements the same logic, but is specialized in FileField.bound_data() and JSONField.bound_data().(I'm not sure whether not using the specialized logic is something we want for the value passed to .clean() or not...) What about adding initial=None to the signature of Field.clean()?The advantage is that it takes away an extra layer of function calls, the signature of Field.clean() becomes unified for all fields, and we achieve the same simplification.The disadvantage is that we'd need to have a deprecation period using inspect.signature() as we'd be changing public API. Is there a way we can do this without having to pass initial into FileField.clean() instead? It feels like this was hacked in for a niche edge case.", 1626187536.0]], "created_at": "2024-01-17T13:43:12Z"}
{"repo": "django/django", "pull_number": 17744, "instance_id": "django__django-17744", "issue_numbers": ["34910"], "base_commit": "6debeac9e7538e0e32883dc36abe6fc40a35c874", "patch": "diff --git a/django/contrib/admin/static/admin/img/icon-addlink.svg b/django/contrib/admin/static/admin/img/icon-addlink.svg\nindex e004fb162633..8d5c6a3a9f6c 100644\n--- a/django/contrib/admin/static/admin/img/icon-addlink.svg\n+++ b/django/contrib/admin/static/admin/img/icon-addlink.svg\n@@ -1,3 +1,3 @@\n <svg width=\"13\" height=\"13\" viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n-  <path fill=\"#70bf2b\" d=\"M1600 796v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"/>\n+  <path fill=\"#5fa225\" d=\"M1600 796v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"/>\n </svg>\ndiff --git a/django/contrib/admin/static/admin/img/icon-changelink.svg b/django/contrib/admin/static/admin/img/icon-changelink.svg\nindex bbb137aa0866..592b093bc3c3 100644\n--- a/django/contrib/admin/static/admin/img/icon-changelink.svg\n+++ b/django/contrib/admin/static/admin/img/icon-changelink.svg\n@@ -1,3 +1,3 @@\n <svg width=\"13\" height=\"13\" viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n-  <path fill=\"#efb80b\" d=\"M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z\"/>\n+  <path fill=\"#b48c08\" d=\"M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z\"/>\n </svg>\n", "test_patch": "", "problem_statement": "Color Contrast Admin Plus Icon\nDescription\n\t \nIdentified using automated checks with Axe. When in Light Mode/Theme, Axe reports a contrast ratio of 2.2:1 for the Django Admin's plus icon. For icons, this should be at least 3:1, as seen in the W3C documentation for Technique G207.\nTo reproduce, visit the Django Admin and locate one of the green plus symbols. Potential new value for the green is represented by # 5fa225.\nPlease note the new green should result in acceptable color contrast for both Light and Dark mode.\n", "hints_text": [["Thank you @laserhyena! Link to technique: \u200bhttps://www.w3.org/WAI/WCAG21/Techniques/general/G207.html Comparison of before/after color, confirming the proposed shade: \u200bcontrast-grid.", 1697714567.0], ["Admin change icon needs better contrast too. Comparison of before/after color, confirming the proposed shade: \u200b\u200bcontrast-grid.", 1705428404.0], ["Pull request: \u200bhttps://github.com/django/django/pull/17744", 1705428656.0]], "created_at": "2024-01-17T00:08:28Z"}
{"repo": "django/django", "pull_number": 17739, "instance_id": "django__django-17739", "issue_numbers": ["35117"], "base_commit": "6debeac9e7538e0e32883dc36abe6fc40a35c874", "patch": "diff --git a/django/contrib/gis/measure.py b/django/contrib/gis/measure.py\nindex 590a80293ab0..707c061a29a5 100644\n--- a/django/contrib/gis/measure.py\n+++ b/django/contrib/gis/measure.py\n@@ -347,8 +347,13 @@ def __mul__(self, other):\n class Area(MeasureBase):\n     STANDARD_UNIT = AREA_PREFIX + Distance.STANDARD_UNIT\n     # Getting the square units values and the alias dictionary.\n-    UNITS = {\"%s%s\" % (AREA_PREFIX, k): v**2 for k, v in Distance.UNITS.items()}\n-    ALIAS = {k: \"%s%s\" % (AREA_PREFIX, v) for k, v in Distance.ALIAS.items()}\n+    UNITS = {\"%s%s\" % (AREA_PREFIX, k): v**2 for k, v in Distance.UNITS.items()} | {\n+        \"ha\": 10000,\n+    }\n+    ALIAS = {k: \"%s%s\" % (AREA_PREFIX, v) for k, v in Distance.ALIAS.items()} | {\n+        \"hectare\": \"ha\",\n+    }\n+\n     LALIAS = {k.lower(): v for k, v in ALIAS.items()}\n \n     def __truediv__(self, other):\ndiff --git a/docs/ref/contrib/gis/measure.txt b/docs/ref/contrib/gis/measure.txt\nindex ad02db87facc..cee421122064 100644\n--- a/docs/ref/contrib/gis/measure.txt\n+++ b/docs/ref/contrib/gis/measure.txt\n@@ -116,6 +116,19 @@ Unit Attribute                     Full name or alias(es)\n     For example, ``Area(sq_m=2)`` creates an :class:`Area` object\n     representing two square meters.\n \n+In addition to unit with the ``sq_`` prefix, the following units are also\n+supported on :class:`Area`:\n+\n+=================================  ========================================\n+Unit Attribute                     Full name or alias(es)\n+=================================  ========================================\n+``ha``                             Hectare\n+=================================  ========================================\n+\n+.. versionchanged:: 5.1\n+\n+    Support for the ``ha`` unit was added.\n+\n Measurement API\n ===============\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 30317eaa1916..1f7d26d7b829 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -70,6 +70,8 @@ Minor features\n   ``metro_code`` and ``region_code``, but the previous keys are also retained\n   for backward compatibility.\n \n+* :class:`~django.contrib.gis.measure.Area` now supports the ``ha`` unit.\n+\n :mod:`django.contrib.messages`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/gis_tests/test_measure.py b/tests/gis_tests/test_measure.py\nindex 2a922abf9b0f..19644c1f98de 100644\n--- a/tests/gis_tests/test_measure.py\n+++ b/tests/gis_tests/test_measure.py\n@@ -38,6 +38,10 @@ def test_init_invalid(self):\n         with self.assertRaises(AttributeError):\n             D(banana=100)\n \n+    def test_init_invalid_area_only_units(self):\n+        with self.assertRaises(AttributeError):\n+            D(ha=100)\n+\n     def test_access(self):\n         \"Testing access in different units\"\n         d = D(m=100)\n@@ -294,6 +298,13 @@ def test_units_str(self):\n         self.assertEqual(repr(a1), \"Area(sq_m=100.0)\")\n         self.assertEqual(repr(a2), \"Area(sq_km=3.5)\")\n \n+    def test_hectare(self):\n+        a = A(sq_m=10000)\n+        self.assertEqual(a.ha, 1)\n+\n+    def test_hectare_unit_att_name(self):\n+        self.assertEqual(A.unit_attname(\"Hectare\"), \"ha\")\n+\n     def test_hash(self):\n         a1 = A(sq_m=100)\n         a2 = A(sq_m=1000000)\n", "problem_statement": "Add support for Hectare unit to Area\nDescription\n\t \nForum post: \u200bhttps://forum.djangoproject.com/t/geodjango-new-measure-unit-suggestion-hectare/26923\nAssociated PR: \u200bhttps://github.com/django/django/pull/17739\nI needed support for Hectares (10,000 m) in the /gis/measure.py Area() object.\nI added this conversion to the object's units list and its documentation.\n", "hints_text": [], "created_at": "2024-01-15T22:20:07Z"}
{"repo": "django/django", "pull_number": 17737, "instance_id": "django__django-17737", "issue_numbers": ["35112"], "base_commit": "4fec1d2ce37241fb8fa001971c441d360ed2a196", "patch": "diff --git a/django/contrib/admin/static/admin/css/rtl.css b/django/contrib/admin/static/admin/css/rtl.css\nindex bf636720fdda..1ab09fd10f5d 100644\n--- a/django/contrib/admin/static/admin/css/rtl.css\n+++ b/django/contrib/admin/static/admin/css/rtl.css\n@@ -197,12 +197,7 @@ fieldset .fieldBox {\n     top: 0;\n     left: auto;\n     right: 10px;\n-    background: url(../img/calendar-icons.svg) 0 -30px no-repeat;\n-}\n-\n-.calendarbox .calendarnav-previous:focus,\n-.calendarbox .calendarnav-previous:hover {\n-    background-position: 0 -45px;\n+    background: url(../img/calendar-icons.svg) 0 -15px no-repeat;\n }\n \n .calendarnav-next {\n@@ -212,11 +207,6 @@ fieldset .fieldBox {\n     background: url(../img/calendar-icons.svg) 0 0 no-repeat;\n }\n \n-.calendarbox .calendarnav-next:focus,\n-.calendarbox .calendarnav-next:hover {\n-    background-position: 0 -15px;\n-}\n-\n .calendar caption, .calendarbox h2 {\n     text-align: center;\n }\ndiff --git a/django/contrib/admin/static/admin/css/widgets.css b/django/contrib/admin/static/admin/css/widgets.css\nindex d3d4732cb355..cc64811a2b4c 100644\n--- a/django/contrib/admin/static/admin/css/widgets.css\n+++ b/django/contrib/admin/static/admin/css/widgets.css\n@@ -519,19 +519,9 @@ span.clearable-file-input label {\n     background: url(../img/calendar-icons.svg) 0 0 no-repeat;\n }\n \n-.calendarbox .calendarnav-previous:focus,\n-.calendarbox .calendarnav-previous:hover {\n-    background-position: 0 -15px;\n-}\n-\n .calendarnav-next {\n     right: 10px;\n-    background: url(../img/calendar-icons.svg) 0 -30px no-repeat;\n-}\n-\n-.calendarbox .calendarnav-next:focus,\n-.calendarbox .calendarnav-next:hover {\n-    background-position: 0 -45px;\n+    background: url(../img/calendar-icons.svg) 0 -15px no-repeat;\n }\n \n .calendar-cancel {\ndiff --git a/django/contrib/admin/static/admin/img/calendar-icons.svg b/django/contrib/admin/static/admin/img/calendar-icons.svg\nindex dbf21c39d238..04c02741ad30 100644\n--- a/django/contrib/admin/static/admin/img/calendar-icons.svg\n+++ b/django/contrib/admin/static/admin/img/calendar-icons.svg\n@@ -1,14 +1,63 @@\n-<svg width=\"15\" height=\"60\" viewBox=\"0 0 1792 7168\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n-  <defs>\n-    <g id=\"previous\">\n-      <path d=\"M1037 1395l102-102q19-19 19-45t-19-45l-307-307 307-307q19-19 19-45t-19-45l-102-102q-19-19-45-19t-45 19l-454 454q-19 19-19 45t19 45l454 454q19 19 45 19t45-19zm627-499q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z\"/>\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   width=\"15\"\n+   height=\"30\"\n+   viewBox=\"0 0 1792 3584\"\n+   version=\"1.1\"\n+   id=\"svg5\"\n+   sodipodi:docname=\"calendar-icons.svg\"\n+   inkscape:version=\"1.3.2 (091e20ef0f, 2023-11-25, custom)\"\n+   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n+   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n+   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\">\n+  <sodipodi:namedview\n+     id=\"namedview5\"\n+     pagecolor=\"#ffffff\"\n+     bordercolor=\"#666666\"\n+     borderopacity=\"1.0\"\n+     inkscape:showpageshadow=\"2\"\n+     inkscape:pageopacity=\"0.0\"\n+     inkscape:pagecheckerboard=\"0\"\n+     inkscape:deskcolor=\"#d1d1d1\"\n+     showgrid=\"false\"\n+     inkscape:zoom=\"13.3\"\n+     inkscape:cx=\"15.526316\"\n+     inkscape:cy=\"20.977444\"\n+     inkscape:window-width=\"1920\"\n+     inkscape:window-height=\"1011\"\n+     inkscape:window-x=\"0\"\n+     inkscape:window-y=\"0\"\n+     inkscape:window-maximized=\"1\"\n+     inkscape:current-layer=\"svg5\" />\n+  <defs\n+     id=\"defs2\">\n+    <g\n+       id=\"previous\">\n+      <path\n+         d=\"m 1037,1395 102,-102 q 19,-19 19,-45 0,-26 -19,-45 L 832,896 1139,589 q 19,-19 19,-45 0,-26 -19,-45 L 1037,397 q -19,-19 -45,-19 -26,0 -45,19 L 493,851 q -19,19 -19,45 0,26 19,45 l 454,454 q 19,19 45,19 26,0 45,-19 z m 627,-499 q 0,209 -103,385.5 Q 1458,1458 1281.5,1561 1105,1664 896,1664 687,1664 510.5,1561 334,1458 231,1281.5 128,1105 128,896 128,687 231,510.5 334,334 510.5,231 687,128 896,128 1105,128 1281.5,231 1458,334 1561,510.5 1664,687 1664,896 Z\"\n+         id=\"path1\" />\n     </g>\n-    <g id=\"next\">\n-      <path d=\"M845 1395l454-454q19-19 19-45t-19-45l-454-454q-19-19-45-19t-45 19l-102 102q-19 19-19 45t19 45l307 307-307 307q-19 19-19 45t19 45l102 102q19 19 45 19t45-19zm819-499q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z\"/>\n+    <g\n+       id=\"next\">\n+      <path\n+         d=\"m 845,1395 454,-454 q 19,-19 19,-45 0,-26 -19,-45 L 845,397 q -19,-19 -45,-19 -26,0 -45,19 L 653,499 q -19,19 -19,45 0,26 19,45 l 307,307 -307,307 q -19,19 -19,45 0,26 19,45 l 102,102 q 19,19 45,19 26,0 45,-19 z m 819,-499 q 0,209 -103,385.5 Q 1458,1458 1281.5,1561 1105,1664 896,1664 687,1664 510.5,1561 334,1458 231,1281.5 128,1105 128,896 128,687 231,510.5 334,334 510.5,231 687,128 896,128 1105,128 1281.5,231 1458,334 1561,510.5 1664,687 1664,896 Z\"\n+         id=\"path2\" />\n     </g>\n   </defs>\n-  <use xlink:href=\"#previous\" x=\"0\" y=\"0\" fill=\"#333333\" />\n-  <use xlink:href=\"#previous\" x=\"0\" y=\"1792\" fill=\"#000000\" />\n-  <use xlink:href=\"#next\" x=\"0\" y=\"3584\" fill=\"#333333\" />\n-  <use xlink:href=\"#next\" x=\"0\" y=\"5376\" fill=\"#000000\" />\n+  <use\n+     xlink:href=\"#next\"\n+     x=\"0\"\n+     y=\"5376\"\n+     fill=\"#000000\"\n+     id=\"use5\"\n+     transform=\"translate(0,-3584)\" />\n+  <use\n+     xlink:href=\"#previous\"\n+     x=\"0\"\n+     y=\"0\"\n+     fill=\"#333333\"\n+     id=\"use2\"\n+     style=\"fill:#000000;fill-opacity:1\" />\n </svg>\n", "test_patch": "", "problem_statement": "Confusing animation of admin date picker buttons\nDescription\n\t\t\n(last modified by Alexander Lazarevi\u0107)\t\t\nIn the admin date picker widget there are two buttons to go to the previous month (<) and to the next month (>). While hovering the mouse over it they do some \"scroll up\" animation.\nI don't think the animation is any helpful to indicate that you are hovering with the mouse over the button. A colour highlight of some sort would be more helpful.\nThe animation is for some reason not consistent. When you pressed the previous month button once, leave the button and hover over it again, the animation is not shown. If you hover over the next month button, the animation is shown. This is confusing and not helpful at all.\nI've attached a short video that hopefully better shows the issue.\nThis was performed with Firefox 121.0.1\nThe admin date picker overall looks dated (no pun intended) and lacks functions that are now commonly expected, like a way to select the month or the year directly. There is already a ticket for that #9388\n", "hints_text": [["Screencast of the previous month (<) and next month (>) buttons", 1705274266.0], ["I agree that this animation is unnecessary.", 1705283842.0], ["I agree, it looks more glitchy than helpful. I also agree that the datepicker is dated, but it also has a lot of other problems.The accessibility team has discussed the date picker multiple times but so far there's no clear alternative we can get people to agree on. I'm loosely in favour of removing our widgets and using the native browser controls, but there are problems with these at the moment as well.", 1705286447.0], ["I guess it is just a matter of removing this two entries in the CSS: .calendarbox .calendarnav-previous:focus, .calendarbox .calendarnav-previous:hover { background-position: 0 -15px; } ... .calendarbox .calendarnav-next:focus, .calendarbox .calendarnav-next:hover { background-position: 0 -45px; The calendar-icons.svg could be changed as well to only contain the two used icons.", 1705291054.0], ["Alexander, feel free to make a PR, otherwise I will get to it in the coming days.", 1705293028.0], ["I created a PR \u200bhttps://github.com/django/django/pull/17737", 1705294114.0]], "created_at": "2024-01-15T10:48:04Z"}
{"repo": "django/django", "pull_number": 17732, "instance_id": "django__django-17732", "issue_numbers": ["35111"], "base_commit": "5a46f3fad7a1a0955d68e76a9b48daf7c4f7c1e0", "patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex d5a40eb46eed..9f40ec5e4fc5 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -562,10 +562,6 @@ def adapt_datetimefield_value(self, value):\n         \"\"\"\n         if value is None:\n             return None\n-        # Expression values are adapted by the database.\n-        if hasattr(value, \"resolve_expression\"):\n-            return value\n-\n         return str(value)\n \n     def adapt_timefield_value(self, value):\n@@ -575,10 +571,6 @@ def adapt_timefield_value(self, value):\n         \"\"\"\n         if value is None:\n             return None\n-        # Expression values are adapted by the database.\n-        if hasattr(value, \"resolve_expression\"):\n-            return value\n-\n         if timezone.is_aware(value):\n             raise ValueError(\"Django does not support timezone-aware times.\")\n         return str(value)\ndiff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py\nindex 9e8172b80a10..aedfeea2367d 100644\n--- a/django/db/backends/oracle/operations.py\n+++ b/django/db/backends/oracle/operations.py\n@@ -590,10 +590,6 @@ def adapt_datetimefield_value(self, value):\n         if value is None:\n             return None\n \n-        # Expression values are adapted by the database.\n-        if hasattr(value, \"resolve_expression\"):\n-            return value\n-\n         # oracledb doesn't support tz-aware datetimes\n         if timezone.is_aware(value):\n             if settings.USE_TZ:\n@@ -610,10 +606,6 @@ def adapt_timefield_value(self, value):\n         if value is None:\n             return None\n \n-        # Expression values are adapted by the database.\n-        if hasattr(value, \"resolve_expression\"):\n-            return value\n-\n         if isinstance(value, str):\n             return datetime.datetime.strptime(value, \"%H:%M:%S\")\n \ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex dfc9857b84c3..29a5c0391e40 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -263,10 +263,6 @@ def adapt_datetimefield_value(self, value):\n         if value is None:\n             return None\n \n-        # Expression values are adapted by the database.\n-        if hasattr(value, \"resolve_expression\"):\n-            return value\n-\n         # SQLite doesn't support tz-aware datetimes\n         if timezone.is_aware(value):\n             if settings.USE_TZ:\n@@ -283,10 +279,6 @@ def adapt_timefield_value(self, value):\n         if value is None:\n             return None\n \n-        # Expression values are adapted by the database.\n-        if hasattr(value, \"resolve_expression\"):\n-            return value\n-\n         # SQLite doesn't support tz-aware datetimes\n         if timezone.is_aware(value):\n             raise ValueError(\"SQLite backend does not support timezone-aware times.\")\ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex c0bcc1b3bf13..4a6e2b324147 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -268,11 +268,16 @@ def get_db_prep_lookup(self, value, connection):\n             getattr(field, \"get_db_prep_value\", None)\n             or self.lhs.output_field.get_db_prep_value\n         )\n+        if not self.get_db_prep_lookup_value_is_iterable:\n+            value = [value]\n         return (\n             \"%s\",\n-            [get_db_prep_value(v, connection, prepared=True) for v in value]\n-            if self.get_db_prep_lookup_value_is_iterable\n-            else [get_db_prep_value(value, connection, prepared=True)],\n+            [\n+                v\n+                if hasattr(v, \"as_sql\")\n+                else get_db_prep_value(v, connection, prepared=True)\n+                for v in value\n+            ],\n         )\n \n \n", "test_patch": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex d2a3fb67657f..8df02ee76b44 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -4,7 +4,7 @@\n from django.core.management.color import no_style\n from django.db import NotSupportedError, connection, transaction\n from django.db.backends.base.operations import BaseDatabaseOperations\n-from django.db.models import DurationField, Value\n+from django.db.models import DurationField\n from django.db.models.expressions import Col\n from django.db.models.lookups import Exact\n from django.test import (\n@@ -89,17 +89,9 @@ def test_adapt_unknown_value_time(self):\n     def test_adapt_timefield_value_none(self):\n         self.assertIsNone(self.ops.adapt_timefield_value(None))\n \n-    def test_adapt_timefield_value_expression(self):\n-        value = Value(timezone.now().time())\n-        self.assertEqual(self.ops.adapt_timefield_value(value), value)\n-\n     def test_adapt_datetimefield_value_none(self):\n         self.assertIsNone(self.ops.adapt_datetimefield_value(None))\n \n-    def test_adapt_datetimefield_value_expression(self):\n-        value = Value(timezone.now())\n-        self.assertEqual(self.ops.adapt_datetimefield_value(value), value)\n-\n     def test_adapt_timefield_value(self):\n         msg = \"Django does not support timezone-aware times.\"\n         with self.assertRaisesMessage(ValueError, msg):\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex cbb441601cd4..909e317dca11 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1151,7 +1151,7 @@ def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n             [self.c5040, self.c5050, self.c5060],\n         )\n \n-    def test_expressions_in_lookups_join_choice(self):\n+    def test_expressions_range_lookups_join_choice(self):\n         midpoint = datetime.time(13, 0)\n         t1 = Time.objects.create(time=datetime.time(12, 0))\n         t2 = Time.objects.create(time=datetime.time(14, 0))\n@@ -1225,7 +1225,7 @@ def test_expressions_not_introduce_sql_injection_via_untrusted_string_inclusion(\n         queryset = Company.objects.filter(name__in=[F(\"num_chairs\") + \"1)) OR ((1==1\"])\n         self.assertQuerySetEqual(queryset, [], ordered=False)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_datetimes(self):\n+    def test_range_lookup_allows_F_expressions_and_expressions_for_dates(self):\n         start = datetime.datetime(2016, 2, 3, 15, 0, 0)\n         end = datetime.datetime(2016, 2, 5, 15, 0, 0)\n         experiment_1 = Experiment.objects.create(\n@@ -1256,9 +1256,19 @@ def test_in_lookup_allows_F_expressions_and_expressions_for_datetimes(self):\n             experiment=experiment_2,\n             result_time=datetime.datetime(2016, 1, 8, 5, 0, 0),\n         )\n-        within_experiment_time = [F(\"experiment__start\"), F(\"experiment__end\")]\n-        queryset = Result.objects.filter(result_time__range=within_experiment_time)\n-        self.assertSequenceEqual(queryset, [r1])\n+        tests = [\n+            # Datetimes.\n+            ([F(\"experiment__start\"), F(\"experiment__end\")], \"result_time__range\"),\n+            # Dates.\n+            (\n+                [F(\"experiment__start__date\"), F(\"experiment__end__date\")],\n+                \"result_time__date__range\",\n+            ),\n+        ]\n+        for within_experiment_time, lookup in tests:\n+            with self.subTest(lookup=lookup):\n+                queryset = Result.objects.filter(**{lookup: within_experiment_time})\n+                self.assertSequenceEqual(queryset, [r1])\n \n \n class FTests(SimpleTestCase):\n", "problem_statement": "DateField's __range and __in lookups against expressions produce invalid values on SQLite.\nDescription\n\t \n#22288 (4f138fe5a496a81115c4fba6615a517fc62c3b17) only partially addressed the issue of iterable right-hand-side lookups (__range and __in) by adapting Oracle's and SQLite operation modules to special case the adaptation of datetime and time value while missing that date values are still converted to string.\nThis causes queries of the form\nPerson.objects.filter(\n\tdob__between=(F(\"dob\"), F(\"dob\"))\n)\nTo be turned into\nSELECT * FROM person WHERE dob BETWEEN \"Col('dob')\" AND \"Col('dob')\"\nI believe the fundamental flaw in 4f138fe5a496a81115c4fba6615a517fc62c3b17 is that expressions (hasattr(obj, \"resolve_expression\")) should never be passed to Field.get_db_prep_value in the first place during the Lookup's right-hand-side processing phase just like they are not passed to Field.get_prep_value \u200bduring the preparation phase.\nInitially discovered on \u200bthe forum by Joel Feiner.\n", "hints_text": [], "created_at": "2024-01-13T21:18:16Z"}
{"repo": "django/django", "pull_number": 17730, "instance_id": "django__django-17730", "issue_numbers": ["35102"], "base_commit": "92d6cff6a2fee7a3f9244081b84fd82c50cc71aa", "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c20de5995a34..f25ad1af12cc 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -14,7 +14,7 @@\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.query_utils import Q\n from django.utils.deconstruct import deconstructible\n-from django.utils.functional import cached_property\n+from django.utils.functional import cached_property, classproperty\n from django.utils.hashable import make_hashable\n \n \n@@ -402,10 +402,13 @@ def relabeled_clone(self, change_map):\n         return clone\n \n     def replace_expressions(self, replacements):\n+        if not replacements:\n+            return self\n         if replacement := replacements.get(self):\n             return replacement\n+        if not (source_expressions := self.get_source_expressions()):\n+            return self\n         clone = self.copy()\n-        source_expressions = clone.get_source_expressions()\n         clone.set_source_expressions(\n             [\n                 expr.replace_expressions(replacements) if expr else None\n@@ -485,13 +488,18 @@ def select_format(self, compiler, sql, params):\n class Expression(BaseExpression, Combinable):\n     \"\"\"An expression that can be combined with other expressions.\"\"\"\n \n+    @classproperty\n+    @functools.lru_cache(maxsize=128)\n+    def _constructor_signature(cls):\n+        return inspect.signature(cls.__init__)\n+\n     @cached_property\n     def identity(self):\n-        constructor_signature = inspect.signature(self.__init__)\n         args, kwargs = self._constructor_args\n-        signature = constructor_signature.bind_partial(*args, **kwargs)\n+        signature = self._constructor_signature.bind_partial(self, *args, **kwargs)\n         signature.apply_defaults()\n-        arguments = signature.arguments.items()\n+        arguments = iter(signature.arguments.items())\n+        next(arguments)\n         identity = [self.__class__]\n         for arg, value in arguments:\n             if isinstance(value, fields.Field):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a79d66eb21e9..ce4fafb1e2bc 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -972,6 +972,8 @@ def change_aliases(self, change_map):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n+        if not change_map:\n+            return self\n         # If keys and values of change_map were to intersect, an alias might be\n         # updated twice (e.g. T4 -> T5, T5 -> T6, so also T4 -> T6) depending\n         # on their order in change_map.\ndiff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 2f23a2932ce5..8423fcb52892 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -204,6 +204,8 @@ def relabel_aliases(self, change_map):\n         Relabel the alias values of any children. 'change_map' is a dictionary\n         mapping old (current) alias values to the new values.\n         \"\"\"\n+        if not change_map:\n+            return self\n         for pos, child in enumerate(self.children):\n             if hasattr(child, \"relabel_aliases\"):\n                 # For example another WhereNode\n@@ -225,6 +227,8 @@ def relabeled_clone(self, change_map):\n         return clone\n \n     def replace_expressions(self, replacements):\n+        if not replacements:\n+            return self\n         if replacement := replacements.get(self):\n             return replacement\n         clone = self.create(connector=self.connector, negated=self.negated)\n", "test_patch": "", "problem_statement": "Performance regression on Model.objects.count() between Django 4.2 and 5.0\nDescription\n\t \nI was running the djangobench tool against the 4.2 and 5.0.1 tags (and main to verify) and noticed that some of the benchmarks had significant regressions.\nThe one I wanted to highlight is query_count. The other two with regressions were model creation and query_annotate.\ndjangobench --control 4.2 --experiment 5.0.1 query_count -p profiles\nThe profile for both versions shows that in v5, get_aggregation has an additional call to replace_expressions which spends a lot of time in the slow inspect module. In the profile reports I collected this accounts for the 30-40% performance regression on the count aggregation query. \nPerformance regressions with new features are expected, but I wanted to raise this because the [ASV environment for Django](\u200bhttps://github.com/django/django-asv) seemed to have missed some of these regressions when all of the benchmarks suddenly ran faster. \nI've attached profiles for 4.2 and 5.0.1 which can be opened using something like snakeviz\n", "hints_text": [["Profile for Django 4.2", 1704931703.0], ["Profile for Django 5.1-dev", 1704931719.0], ["This is the commit that added the extra call tree \u200bhttps://github.com/django/django/commit/2ee01747c32a7275a7a1a5f7862acba7db764921", 1704932175.0], ["Thanks for the report, I think we could make it faster by avoiding cloning every time: django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index c20de5995a..0e1c265d9e 100644 a b class BaseExpression: 402402 return clone 403403 404404 def replace_expressions(self, replacements): 405 if not replacements: 406 return self 405407 if replacement := replacements.get(self): 406408 return replacement 409 if not (source_expressions := self.get_source_expressions()): 410 return self 407411 clone = self.copy() 408 source_expressions = clone.get_source_expressions() 409412 clone.set_source_expressions( 410413 [ 411414 expr.replace_expressions(replacements) if expr else None Does it work for you?", 1704938310.0], ["Replying to Mariusz Felisiak: Does it work for you? According to my experiments, it reduces regression to ~15%.", 1704941216.0], ["We could avoid cloning in two more places: django/db/models/sql/query.py diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py index a79d66eb21..911d0c7848 100644 a b class Query(BaseExpression): 422422 return obj 423423 424424 def relabeled_clone(self, change_map): 425 if not change_map: 426 return self 425427 clone = self.clone() 426428 clone.change_aliases(change_map) 427429 return clone django/db/models/sql/where.py diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py index 2f23a2932c..ae7a2a1224 100644 a b class WhereNode(tree.Node): 225225 return clone 226226 227227 def replace_expressions(self, replacements): 228 if not replacements: 229 return self 228230 if replacement := replacements.get(self): 229231 return replacement 230232 clone = self.create(connector=self.connector, negated=self.negated)", 1704941787.0], ["Please don't assign ticket to yourself. For now, we're discussing a potential approach, and some improvements have already been proposed.", 1704964600.0], ["get_aggregation has an additional call to replace_expressions which spends a lot of time in the slow inspect module One way we could cut the time spent in Expression.identity significantly would be to cache (e.g. at class initialization time) the inspect.signature(cls.__init__) signature as it represents the vast majority of the time spent by replace_expressions", 1704980948.0], ["If Expression.hash (Expression.identity()) were to implement another mechanism for determining a unique hash that doesn't depend upon using inspect.signature the benchmark would be much faster since this is evaluated twice. I suspect this would impact other benchmarks as well, hash functions should be as fast as possible but I understand why that is challenging for something like expressions. inspect.signature is a very slow function that does a huge amount of processing to build a Signature object for the given callable.", 1704981144.0], ["I suspect this would impact other benchmarks as well, hash functions should be as fast as possible but I understand why that is challenging for something like expressions. inspect.signature is a very slow function that does a huge amount of processing to build a Signature object for the given callable. yeah that's the crux of the issue here. This would require having each expression implement their own correct identity functions based on their __init__ signature which would be a significant maintenance burden and also backward incompatible for third party expressions. I think we can get a lot of benefit by caching inspect.signature calls like the following. django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index c20de5995a..0703a134a9 100644 a b def select_format(self, compiler, sql, params): 485485class Expression(BaseExpression, Combinable): 486486 \"\"\"An expression that can be combined with other expressions.\"\"\" 487487 488 def __init_subclass__(cls, /, **kwargs): 489 super().__init_subclass__(**kwargs) 490 cls._constructor_signature = inspect.signature(cls.__init__) 491 492 _constructor_signature = inspect.signature(BaseExpression.__init__) 493 488494 @cached_property 489495 def identity(self): 490 constructor_signature = inspect.signature(self.__init__) 491496 args, kwargs = self._constructor_args 492 signature = constructor_signature.bind_partial(*args, **kwargs) 497 signature = self._constructor_signature.bind_partial(self, *args, **kwargs) 493498 signature.apply_defaults() 494499 arguments = signature.arguments.items() 495500 identity = [self.__class__] 496501 for arg, value in arguments: 502 if arg == 'self': 503 continue 497504 if isinstance(value, fields.Field): 498505 if value.name and value.model: 499506 value = (value.model._meta.label, value.name)", 1704981877.0], ["Replying to Simon Charette: I think we can get a lot of benefit by caching inspect.signature calls like the following. That patch alone is 1.4x faster djangobench --control main --experiment exp_1 query_count -t 200 Running benchmarks: query_count Control: Django 5.1 (in git branch main) Experiment: Django 5.1 (in git branch exp_1) Running 'query_count' benchmark ... Min: 0.000266 -> 0.000186: 1.4310x faster Avg: 0.000292 -> 0.000202: 1.4424x faster Significant (t=23.676856) Stddev: 0.00004 -> 0.00003: 1.4418x smaller (N = 200)", 1704982593.0], ["And then with Mariusz' patches the overall speedup is 1.8x compared with main: Running benchmarks: query_count Control: Django 5.1 (in git branch main) Experiment: Django 5.1 (in git branch exp_1) Running 'query_count' benchmark ... Min: 0.000294 -> 0.000163: 1.8003x faster Avg: 0.000317 -> 0.000173: 1.8301x faster Significant (t=53.998054) Stddev: 0.00003 -> 0.00002: 1.4805x smaller (N = 200) And an overall improvement on 4.2 Running benchmarks: query_count Control: Django 4.2 (in git branch 4.2) Experiment: Django 5.1 (in git branch exp_1) Running 'query_count' benchmark ... Min: 0.000191 -> 0.000174: 1.0997x faster Avg: 0.000263 -> 0.000200: 1.3143x faster Significant (t=3.949122) Stddev: 0.00022 -> 0.00004: 5.2520x smaller (N = 200) For the query_aggregate benchmark a marginal improvement over 4.2: djangobench --control 4.2 --experiment exp_1 query_aggregate -t 200 Running benchmarks: query_aggregate Control: Django 4.2 (in git branch 4.2) Experiment: Django 5.1 (in git branch exp_1) Running 'query_aggregate' benchmark ... Min: 0.000211 -> 0.000192: 1.0973x faster Avg: 0.000238 -> 0.000217: 1.0976x faster Significant (t=3.652858) Stddev: 0.00004 -> 0.00007: 1.9551x larger (N = 200) And a more significant one to main/5.1 djangobench --control main --experiment exp_1 query_aggregate -t 200 Running benchmarks: query_aggregate Control: Django 5.1 (in git branch main) Experiment: Django 5.1 (in git branch exp_1) Running 'query_aggregate' benchmark ... Min: 0.000263 -> 0.000189: 1.3960x faster Avg: 0.000290 -> 0.000211: 1.3708x faster Significant (t=15.063702) Stddev: 0.00005 -> 0.00005: 1.0220x smaller (N = 200)", 1704983082.0], ["Alternate patch that avoids the cost at class definition time as that might have an effect on Django bootstrapping time given we define tens of Expression subclasses django/db/models/expressions.py diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index c20de5995a..0ecda38353 100644 a b 1414from django.db.models.constants import LOOKUP_SEP 1515from django.db.models.query_utils import Q 1616from django.utils.deconstruct import deconstructible 17 from django.utils.functional import cached_property 17from django.utils.functional import cached_property, classproperty 1818from django.utils.hashable import make_hashable 1919 2020 \u2026 \u2026 def select_format(self, compiler, sql, params): 485485class Expression(BaseExpression, Combinable): 486486 \"\"\"An expression that can be combined with other expressions.\"\"\" 487487 488 @classproperty 489 @functools.lru_cache(maxsize=128) 490 def _constructor_signature(cls): 491 return inspect.signature(cls.__init__) 492 488493 @cached_property 489494 def identity(self): 490 constructor_signature = inspect.signature(self.__init__) 491495 args, kwargs = self._constructor_args 492 signature = constructor_signature.bind_partial(*args, **kwargs) 496 signature = self._constructor_signature.bind_partial(self, *args, **kwargs) 493497 signature.apply_defaults() 494498 arguments = signature.arguments.items() 495499 identity = [self.__class__] 496500 for arg, value in arguments: 501 if arg == 'self': 502 continue 497503 if isinstance(value, fields.Field): 498504 if value.name and value.model: 499505 value = (value.model._meta.label, value.name)", 1704992368.0], ["Submitted a PR that confirms \u200bthe suite is happy with both changes.", 1705154428.0]], "created_at": "2024-01-13T19:26:36Z"}
{"repo": "django/django", "pull_number": 17726, "instance_id": "django__django-17726", "issue_numbers": ["27225"], "base_commit": "d70b79c6b90c8a9657c6bf7f6eca6f3f9424bb45", "patch": "diff --git a/django/middleware/cache.py b/django/middleware/cache.py\nindex 0fdffe1bbeee..196b1995ffbf 100644\n--- a/django/middleware/cache.py\n+++ b/django/middleware/cache.py\n@@ -43,6 +43,8 @@\n \n \"\"\"\n \n+import time\n+\n from django.conf import settings\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.utils.cache import (\n@@ -53,6 +55,7 @@\n     patch_response_headers,\n )\n from django.utils.deprecation import MiddlewareMixin\n+from django.utils.http import parse_http_date_safe\n \n \n class UpdateCacheMiddleware(MiddlewareMixin):\n@@ -171,6 +174,15 @@ def process_request(self, request):\n             request._cache_update_cache = True\n             return None  # No cache information available, need to rebuild.\n \n+        # Derive the age estimation of the cached response.\n+        if (max_age_seconds := get_max_age(response)) is not None and (\n+            expires_timestamp := parse_http_date_safe(response[\"Expires\"])\n+        ) is not None:\n+            now_timestamp = int(time.time())\n+            remaining_seconds = expires_timestamp - now_timestamp\n+            # Use Age: 0 if local clock got turned back.\n+            response[\"Age\"] = max(0, max_age_seconds - remaining_seconds)\n+\n         # hit, return cached response\n         request._cache_update_cache = False\n         return response\n", "test_patch": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e6ebb718f1a6..978efdd9d38f 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -2752,6 +2752,37 @@ def runner():\n \n         self.assertIsNot(thread_caches[0], thread_caches[1])\n \n+    def test_cache_control_max_age(self):\n+        view = cache_page(2)(hello_world_view)\n+        request = self.factory.get(\"/view/\")\n+\n+        # First request. Freshly created response gets returned with no Age\n+        # header.\n+        with mock.patch.object(\n+            time, \"time\", return_value=1468749600\n+        ):  # Sun, 17 Jul 2016 10:00:00 GMT\n+            response = view(request, 1)\n+            response.close()\n+            self.assertIn(\"Expires\", response)\n+            self.assertEqual(response[\"Expires\"], \"Sun, 17 Jul 2016 10:00:02 GMT\")\n+            self.assertIn(\"Cache-Control\", response)\n+            self.assertEqual(response[\"Cache-Control\"], \"max-age=2\")\n+            self.assertNotIn(\"Age\", response)\n+\n+        # Second request one second later. Response from the cache gets\n+        # returned with an Age header set to 1 (second).\n+        with mock.patch.object(\n+            time, \"time\", return_value=1468749601\n+        ):  # Sun, 17 Jul 2016 10:00:01 GMT\n+            response = view(request, 1)\n+            response.close()\n+            self.assertIn(\"Expires\", response)\n+            self.assertEqual(response[\"Expires\"], \"Sun, 17 Jul 2016 10:00:02 GMT\")\n+            self.assertIn(\"Cache-Control\", response)\n+            self.assertEqual(response[\"Cache-Control\"], \"max-age=2\")\n+            self.assertIn(\"Age\", response)\n+            self.assertEqual(response[\"Age\"], \"1\")\n+\n \n @override_settings(\n     CACHE_MIDDLEWARE_KEY_PREFIX=\"settingsprefix\",\ndiff --git a/tests/generic_views/urls.py b/tests/generic_views/urls.py\nindex 2d5301d15e39..277b2c4c1ba0 100644\n--- a/tests/generic_views/urls.py\n+++ b/tests/generic_views/urls.py\n@@ -27,7 +27,7 @@\n     ),\n     path(\n         \"template/cached/<foo>/\",\n-        cache_page(2.0)(TemplateView.as_view(template_name=\"generic_views/about.html\")),\n+        cache_page(2)(TemplateView.as_view(template_name=\"generic_views/about.html\")),\n     ),\n     path(\n         \"template/extra_context/\",\n", "problem_statement": "\"age\" header is not set for responses taken from cache.\nDescription\n\t \nWhen fetching response from the cache, 'Cache-Control' contains 'max-age' corresponding to the moment of original response generation time, thus for another time it usually doesn't match 'Expires' value.\n", "hints_text": [["I'm not sure if the proposed behavior is correct. From \u200bRC2616 sec14.9.3 (which I only skimmed, so please provide another reference if it's wrong): If a response includes both an Expires header and a max-age directive, the max-age directive overrides the Expires header, even if the Expires header is more restrictive. I think I understand the idea behind the \u200bPR, however, it seems to treat the Expires as authoritative rather than max-age.", 1473947624.0], ["Exactly, and that's why it is a bug. It would be correct behavior if response include Date header corresponding to original response generation time. But I'm not sure", 1473948434.0], ["\u200bRFC7234 says about Age header which indicates age of the cache, so instead of Cache-Control's max-age regeneration it is possible to set Age. Also there is good visual explanation how browser cache should work: \u200bhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#Freshness", 1473993297.0], ["My understanding is that the current pull request fix isn't correct then, right?", 1474052272.0], ["Yes, it isn't. I'm going to fix it soon.", 1474157626.0], ["Ready. Changed behavior: FetchFromCacheMiddleware sets Age header now.", 1474206912.0], ["\u200bPR", 1474261017.0], ["I left comments for improvement on the PR. Please uncheck \"Patch needs improvement\" after updating it.", 1475666110.0], ["Created a new (draft) PR: \u200bhttps://github.com/django/django/pull/17726 This one contains not yet all recommended changes from the original PR: \u200bhttps://github.com/django/django/pull/7246", 1705019997.0], ["I updated the PR", 1706544205.0], ["It's not blocked by #35141 anymore", 1706901441.0], ["In 3580b47e: Fixed #27225 -- Added \"Age\" header when fetching cached responses. Co-Authored-By: Author: Alexander Lazarevi\u0107 <laza@\u2026>", 1707116523.0]], "created_at": "2024-01-12T06:36:42Z"}
{"repo": "django/django", "pull_number": 17725, "instance_id": "django__django-17725", "issue_numbers": ["24128"], "base_commit": "1df8983aa3b51bd37a5b9acf92475ad3a9180fe4", "patch": "diff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\nindex 4f970e89b32e..5c18d676f2b7 100644\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -404,8 +404,13 @@ def get_context_data(self, **kwargs):\n             # Non-trivial TEMPLATES settings aren't supported (#24125).\n             pass\n         else:\n-            # This doesn't account for template loaders (#24128).\n-            for index, directory in enumerate(default_engine.dirs):\n+            directories = list(default_engine.dirs)\n+            for loader in default_engine.template_loaders:\n+                if hasattr(loader, \"get_dirs\"):\n+                    for dir_ in loader.get_dirs():\n+                        if dir_ not in directories:\n+                            directories.append(dir_)\n+            for index, directory in enumerate(directories):\n                 template_file = Path(safe_join(directory, template))\n                 if template_file.exists():\n                     template_contents = template_file.read_text()\n", "test_patch": "diff --git a/tests/admin_docs/templates/view_for_loader_test.html b/tests/admin_docs/templates/view_for_loader_test.html\nnew file mode 100644\nindex 000000000000..12130c54cda4\n--- /dev/null\n+++ b/tests/admin_docs/templates/view_for_loader_test.html\n@@ -0,0 +1,8 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+  <meta charset=\"UTF-8\">\n+  <title>Template for Test</title>\n+</head>\n+<body></body>\n+</html>\ndiff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex bf469181b303..ef7fde1bf943 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -138,6 +138,12 @@ def test_template_detail(self):\n             html=True,\n         )\n \n+    def test_template_detail_loader(self):\n+        response = self.client.get(\n+            reverse(\"django-admindocs-templates\", args=[\"view_for_loader_test.html\"])\n+        )\n+        self.assertContains(response, \"view_for_loader_test.html</code></li>\")\n+\n     def test_missing_docutils(self):\n         utils.docutils_is_available = False\n         try:\n", "problem_statement": "Admindocs doesn't account for template loaders\nDescription\n\t \nTemplateDetailView only considers dirs and assumes that the filesystem loader is enabled. It doesn't account for other loaders such as app_directories.\nThe code changed a bit during the multiple-template-engines refactor but this bug existed before and still exists.\n", "hints_text": [["It seems it is quite fixable with something like that: That is probably not the most elegant solution. Tried to get loaders from all the engines and combine their location directories into one to send to enumerator. ... pass else: # This doesn't account for template loaders (#24128). # Fix for #24128 from django.template import engines directories = set(default_engine.dirs) # making set with default engine dirs parameter as initial set for engine in engines.all(): # going through all the engines for loader in engine.engine.template_loaders: # getting each template loader from engine directories.update(loader.get_dirs()) # updating set with new directories from loaders for index, directory in enumerate(directories): # new enumerator with all dirs from default and loaders # for index, directory in enumerate(default_engine.dirs): # commented out original enumerator # End of fix for #24128 template_file = os.path.join(directory, template) templates.append({ ... instead of ... pass else: # This doesn't account for template loaders (#24128). for index, directory in enumerate(default_engine.dirs): template_file = os.path.join(directory, template) templates.append({ ...", 1477479109.0], ["\u200bPR without tests.", 1477489557.0]], "created_at": "2024-01-12T01:12:44Z"}
{"repo": "django/django", "pull_number": 17718, "instance_id": "django__django-17718", "issue_numbers": ["35100"], "base_commit": "8d2c16252e78a0fae2356ead3a7b3f879a653046", "patch": "diff --git a/django/contrib/gis/geoip2.py b/django/contrib/gis/geoip2.py\nindex d59d00283d92..f5058c1c05dc 100644\n--- a/django/contrib/gis/geoip2.py\n+++ b/django/contrib/gis/geoip2.py\n@@ -21,6 +21,7 @@\n from django.core.validators import validate_ipv46_address\n from django.utils._os import to_path\n from django.utils.deprecation import RemovedInDjango60Warning\n+from django.utils.functional import cached_property\n \n __all__ = [\"HAS_GEOIP2\"]\n \n@@ -53,13 +54,8 @@ class GeoIP2:\n         (MODE_AUTO, MODE_MMAP_EXT, MODE_MMAP, MODE_FILE, MODE_MEMORY)\n     )\n \n-    # Paths to the city & country binary databases.\n-    _city_file = \"\"\n-    _country_file = \"\"\n-\n-    # Initially, pointers to GeoIP file references are NULL.\n-    _city = None\n-    _country = None\n+    _path = None\n+    _reader = None\n \n     def __init__(self, path=None, cache=0, country=None, city=None):\n         \"\"\"\n@@ -84,114 +80,69 @@ def __init__(self, path=None, cache=0, country=None, city=None):\n         * city: The name of the GeoIP city data file. Defaults to\n             'GeoLite2-City.mmdb'; overrides the GEOIP_CITY setting.\n         \"\"\"\n-        # Checking the given cache option.\n         if cache not in self.cache_options:\n             raise GeoIP2Exception(\"Invalid GeoIP caching option: %s\" % cache)\n \n-        # Getting the GeoIP data path.\n         path = path or getattr(settings, \"GEOIP_PATH\", None)\n+        city = city or getattr(settings, \"GEOIP_CITY\", \"GeoLite2-City.mmdb\")\n+        country = country or getattr(settings, \"GEOIP_COUNTRY\", \"GeoLite2-Country.mmdb\")\n+\n         if not path:\n             raise GeoIP2Exception(\n                 \"GeoIP path must be provided via parameter or the GEOIP_PATH setting.\"\n             )\n \n         path = to_path(path)\n-        if path.is_dir():\n-            # Constructing the GeoIP database filenames using the settings\n-            # dictionary. If the database files for the GeoLite country\n-            # and/or city datasets exist, then try to open them.\n-            country_db = path / (\n-                country or getattr(settings, \"GEOIP_COUNTRY\", \"GeoLite2-Country.mmdb\")\n-            )\n-            if country_db.is_file():\n-                self._country = geoip2.database.Reader(str(country_db), mode=cache)\n-                self._country_file = country_db\n \n-            city_db = path / (\n-                city or getattr(settings, \"GEOIP_CITY\", \"GeoLite2-City.mmdb\")\n-            )\n-            if city_db.is_file():\n-                self._city = geoip2.database.Reader(str(city_db), mode=cache)\n-                self._city_file = city_db\n-            if not self._reader:\n-                raise GeoIP2Exception(\"Could not load a database from %s.\" % path)\n-        elif path.is_file():\n-            # Otherwise, some detective work will be needed to figure out\n-            # whether the given database path is for the GeoIP country or city\n-            # databases.\n-            reader = geoip2.database.Reader(str(path), mode=cache)\n-            db_type = reader.metadata().database_type\n-\n-            if \"City\" in db_type:\n-                # GeoLite City database detected.\n-                self._city = reader\n-                self._city_file = path\n-            elif \"Country\" in db_type:\n-                # GeoIP Country database detected.\n-                self._country = reader\n-                self._country_file = path\n-            else:\n-                raise GeoIP2Exception(\n-                    \"Unable to recognize database edition: %s\" % db_type\n-                )\n+        # Try the path first in case it is the full path to a database.\n+        for path in (path, path / city, path / country):\n+            if path.is_file():\n+                self._path = path\n+                self._reader = geoip2.database.Reader(path, mode=cache)\n+                break\n         else:\n-            raise GeoIP2Exception(\"GeoIP path must be a valid file or directory.\")\n-\n-    @property\n-    def _reader(self):\n-        return self._country or self._city\n+            raise GeoIP2Exception(\n+                \"Path must be a valid database or directory containing databases.\"\n+            )\n \n-    @property\n-    def _country_or_city(self):\n-        if self._country:\n-            return self._country.country\n-        else:\n-            return self._city.city\n+        database_type = self._metadata.database_type\n+        if not database_type.endswith((\"City\", \"Country\")):\n+            raise GeoIP2Exception(f\"Unable to handle database edition: {database_type}\")\n \n     def __del__(self):\n         # Cleanup any GeoIP file handles lying around.\n-        if self._city:\n-            self._city.close()\n-        if self._country:\n-            self._country.close()\n+        if self._reader:\n+            self._reader.close()\n \n     def __repr__(self):\n-        meta = self._reader.metadata()\n-        version = \"[v%s.%s]\" % (\n-            meta.binary_format_major_version,\n-            meta.binary_format_minor_version,\n-        )\n-        return (\n-            '<%(cls)s %(version)s _country_file=\"%(country)s\", _city_file=\"%(city)s\">'\n-            % {\n-                \"cls\": self.__class__.__name__,\n-                \"version\": version,\n-                \"country\": self._country_file,\n-                \"city\": self._city_file,\n-            }\n-        )\n+        m = self._metadata\n+        version = f\"v{m.binary_format_major_version}.{m.binary_format_minor_version}\"\n+        return f\"<{self.__class__.__name__} [{version}] _path='{self._path}'>\"\n+\n+    @cached_property\n+    def _metadata(self):\n+        return self._reader.metadata()\n \n-    def _check_query(self, query, city=False, city_or_country=False):\n-        \"Check the query and database availability.\"\n+    def _query(self, query, *, require_city=False):\n         if not isinstance(query, (str, ipaddress.IPv4Address, ipaddress.IPv6Address)):\n             raise TypeError(\n                 \"GeoIP query must be a string or instance of IPv4Address or \"\n                 \"IPv6Address, not type %s\" % type(query).__name__,\n             )\n \n-        # Extra checks for the existence of country and city databases.\n-        if city_or_country and not (self._country or self._city):\n-            raise GeoIP2Exception(\"Invalid GeoIP country and city data files.\")\n-        elif city and not self._city:\n-            raise GeoIP2Exception(\"Invalid GeoIP city data file: %s\" % self._city_file)\n+        is_city = self._metadata.database_type.endswith(\"City\")\n+\n+        if require_city and not is_city:\n+            raise GeoIP2Exception(f\"Invalid GeoIP city data file: {self._path}\")\n \n-        # Return the query string back to the caller. GeoIP2 only takes IP addresses.\n         try:\n             validate_ipv46_address(query)\n         except ValidationError:\n+            # GeoIP2 only takes IP addresses, so try to resolve a hostname.\n             query = socket.gethostbyname(query)\n \n-        return query\n+        function = self._reader.city if is_city else self._reader.country\n+        return function(query)\n \n     def city(self, query):\n         \"\"\"\n@@ -199,8 +150,7 @@ def city(self, query):\n         Fully Qualified Domain Name (FQDN). Some information in the dictionary\n         may be undefined (None).\n         \"\"\"\n-        enc_query = self._check_query(query, city=True)\n-        response = self._city.city(enc_query)\n+        response = self._query(query, require_city=True)\n         region = response.subdivisions[0] if response.subdivisions else None\n         return {\n             \"accuracy_radius\": response.location.accuracy_radius,\n@@ -236,9 +186,7 @@ def country(self, query):\n         IP address or a Fully Qualified Domain Name (FQDN). For example, both\n         '24.124.1.80' and 'djangoproject.com' are valid parameters.\n         \"\"\"\n-        # Returning the country code and name\n-        enc_query = self._check_query(query, city_or_country=True)\n-        response = self._country_or_city(enc_query)\n+        response = self._query(query, require_city=False)\n         return {\n             \"continent_code\": response.continent.code,\n             \"continent_name\": response.continent.name,\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 547a38d0b43c..2f672e3dce0c 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -305,6 +305,13 @@ backends.\n \n * Support for GDAL 2.4 is removed.\n \n+* :class:`~django.contrib.gis.geoip2.GeoIP2` no longer opens both city and\n+  country databases when a directory path is provided, preferring the city\n+  database, if it is available. The country database is a subset of the city\n+  database and both are not typically needed. If you require use of the country\n+  database when in the same directory as the city database, explicitly pass the\n+  country database path to the constructor.\n+\n Dropped support for MariaDB 10.4\n --------------------------------\n \n", "test_patch": "diff --git a/tests/gis_tests/test_geoip2.py b/tests/gis_tests/test_geoip2.py\nindex f27c7cb86166..12837725c9a4 100644\n--- a/tests/gis_tests/test_geoip2.py\n+++ b/tests/gis_tests/test_geoip2.py\n@@ -50,17 +50,11 @@ def test_init(self):\n         g2 = GeoIP2(settings.GEOIP_PATH, GeoIP2.MODE_AUTO)\n         # Path provided as a string.\n         g3 = GeoIP2(str(settings.GEOIP_PATH))\n-        for g in (g1, g2, g3):\n-            self.assertTrue(g._country)\n-            self.assertTrue(g._city)\n-\n         # Only passing in the location of one database.\n         g4 = GeoIP2(settings.GEOIP_PATH / settings.GEOIP_CITY, country=\"\")\n-        self.assertTrue(g4._city)\n-        self.assertIsNone(g4._country)\n         g5 = GeoIP2(settings.GEOIP_PATH / settings.GEOIP_COUNTRY, city=\"\")\n-        self.assertTrue(g5._country)\n-        self.assertIsNone(g5._city)\n+        for g in (g1, g2, g3, g4, g5):\n+            self.assertTrue(g._reader)\n \n         # Improper parameters.\n         bad_params = (23, \"foo\", 15.23)\n@@ -76,7 +70,7 @@ def test_init(self):\n \n     def test_no_database_file(self):\n         invalid_path = pathlib.Path(__file__).parent.joinpath(\"data/invalid\").resolve()\n-        msg = f\"Could not load a database from {invalid_path}.\"\n+        msg = \"Path must be a valid database or directory containing databases.\"\n         with self.assertRaisesMessage(GeoIP2Exception, msg):\n             GeoIP2(invalid_path)\n \n@@ -103,6 +97,25 @@ def test_bad_query(self):\n \n     def test_country(self):\n         g = GeoIP2(city=\"<invalid>\")\n+        self.assertIs(g._metadata.database_type.endswith(\"Country\"), True)\n+        for query in self.query_values:\n+            with self.subTest(query=query):\n+                self.assertEqual(\n+                    g.country(query),\n+                    {\n+                        \"continent_code\": \"EU\",\n+                        \"continent_name\": \"Europe\",\n+                        \"country_code\": \"GB\",\n+                        \"country_name\": \"United Kingdom\",\n+                        \"is_in_european_union\": False,\n+                    },\n+                )\n+                self.assertEqual(g.country_code(query), \"GB\")\n+                self.assertEqual(g.country_name(query), \"United Kingdom\")\n+\n+    def test_country_using_city_database(self):\n+        g = GeoIP2(country=\"<invalid>\")\n+        self.assertIs(g._metadata.database_type.endswith(\"City\"), True)\n         for query in self.query_values:\n             with self.subTest(query=query):\n                 self.assertEqual(\n@@ -120,6 +133,7 @@ def test_country(self):\n \n     def test_city(self):\n         g = GeoIP2(country=\"<invalid>\")\n+        self.assertIs(g._metadata.database_type.endswith(\"City\"), True)\n         for query in self.query_values:\n             with self.subTest(query=query):\n                 self.assertEqual(\n@@ -179,40 +193,16 @@ def test_not_found(self):\n \n     def test_del(self):\n         g = GeoIP2()\n-        city = g._city\n-        country = g._country\n-        self.assertIs(city._db_reader.closed, False)\n-        self.assertIs(country._db_reader.closed, False)\n+        reader = g._reader\n+        self.assertIs(reader._db_reader.closed, False)\n         del g\n-        self.assertIs(city._db_reader.closed, True)\n-        self.assertIs(country._db_reader.closed, True)\n+        self.assertIs(reader._db_reader.closed, True)\n \n     def test_repr(self):\n         g = GeoIP2()\n-        meta = g._reader.metadata()\n-        version = \"%s.%s\" % (\n-            meta.binary_format_major_version,\n-            meta.binary_format_minor_version,\n-        )\n-        country_path = g._country_file\n-        city_path = g._city_file\n-        expected = (\n-            '<GeoIP2 [v%(version)s] _country_file=\"%(country)s\", _city_file=\"%(city)s\">'\n-            % {\n-                \"version\": version,\n-                \"country\": country_path,\n-                \"city\": city_path,\n-            }\n-        )\n-        self.assertEqual(repr(g), expected)\n-\n-    def test_check_query(self):\n-        g = GeoIP2()\n-        self.assertEqual(g._check_query(self.fqdn), self.ipv4_str)\n-        self.assertEqual(g._check_query(self.ipv4_str), self.ipv4_str)\n-        self.assertEqual(g._check_query(self.ipv6_str), self.ipv6_str)\n-        self.assertEqual(g._check_query(self.ipv4_addr), self.ipv4_addr)\n-        self.assertEqual(g._check_query(self.ipv6_addr), self.ipv6_addr)\n+        m = g._metadata\n+        version = f\"{m.binary_format_major_version}.{m.binary_format_minor_version}\"\n+        self.assertEqual(repr(g), f\"<GeoIP2 [v{version}] _path='{g._path}'>\")\n \n     def test_coords_deprecation_warning(self):\n         g = GeoIP2()\n@@ -226,8 +216,7 @@ def test_open_deprecation_warning(self):\n         msg = \"GeoIP2.open() is deprecated. Use GeoIP2() instead.\"\n         with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n             g = GeoIP2.open(settings.GEOIP_PATH, GeoIP2.MODE_AUTO)\n-        self.assertTrue(g._country)\n-        self.assertTrue(g._city)\n+        self.assertTrue(g._reader)\n \n \n @skipUnless(HAS_GEOIP2, \"GeoIP2 is required.\")\n@@ -248,7 +237,7 @@ def test_missing_path(self):\n                 GeoIP2()\n \n     def test_unsupported_database(self):\n-        msg = \"Unable to recognize database edition: GeoLite2-ASN\"\n+        msg = \"Unable to handle database edition: GeoLite2-ASN\"\n         with self.settings(GEOIP_PATH=build_geoip_path(\"GeoLite2-ASN-Test.mmdb\")):\n             with self.assertRaisesMessage(GeoIP2Exception, msg):\n                 GeoIP2()\n", "problem_statement": "Simplify initialization of databases in the GeoIP2 wrapper\nDescription\n\t \nThe initialization of the wrapper around the GeoIP2 databases is overcomplicated and should be simplified.\nCurrently when calling GeoIP2.city() and GeoIP2.country() the city and country databases will be used respectively, but this is unnecessary as the country database is merely a subset of the city database. It should be possible to provide a path and attempt to open a database from three possible candidates: path, path / city, and path / country. While a minor incompatibility in that the city database may be used instead, this also reduces the potential for mixing data from two different databases where one might be outdated.\n", "hints_text": [], "created_at": "2024-01-10T11:06:21Z"}
{"repo": "django/django", "pull_number": 17717, "instance_id": "django__django-17717", "issue_numbers": ["34769"], "base_commit": "9b02ad91ead3db75036be981bab2083aebc993a6", "patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 7b9b2ae6b26a..571e6e79f345 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -352,10 +352,13 @@ def as_mysql(self, compiler, connection):\n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return (\n-            \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\"\n-            % ((lhs, json_path) * 2)\n-        ), tuple(params) * 2\n+        if connection.features.supports_primitives_in_json_field:\n+            sql = (\n+                \"COALESCE(JSON_VALUE(%s, '%s'), JSON_QUERY(%s, '%s' DISALLOW SCALARS))\"\n+            )\n+        else:\n+            sql = \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\"\n+        return sql % ((lhs, json_path) * 2), tuple(params) * 2\n \n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n", "test_patch": "", "problem_statement": "JSONField key/path transforms tests fail on Oracle 21c.\nDescription\n\t\t\n(last modified by Mariusz Felisiak)\t\t\nOracle 21c has made significant changes in JSON implementation, e.g. added new JSON data type, check out \u200brelease notes. Currently 22 model_fields.test_jsonfield tests fail on Oracle 21c+, check out logs.\n", "hints_text": [["Mariusz, shall we mark this as release blocker for 5.0?", 1691656095.0], ["Replying to Natalia Bidart: Mariusz, shall we mark this as release blocker for 5.0? No, it's not a regression or a bug in the new feature.", 1691657517.0]], "created_at": "2024-01-10T10:30:59Z"}
{"repo": "django/django", "pull_number": 17712, "instance_id": "django__django-17712", "issue_numbers": ["34949"], "base_commit": "f92641a636a8cb75fc9851396cef4345510a4b52", "patch": "diff --git a/docs/ref/models/constraints.txt b/docs/ref/models/constraints.txt\nindex efe63a8ac183..cc308cedf225 100644\n--- a/docs/ref/models/constraints.txt\n+++ b/docs/ref/models/constraints.txt\n@@ -229,7 +229,8 @@ For example::\n will allow filtering on ``room`` and ``date``, also selecting ``full_name``,\n while fetching data only from the index.\n \n-``include`` is supported only on PostgreSQL.\n+Unique constraints with non-key columns are ignored for databases besides\n+PostgreSQL.\n \n Non-key columns have the same database restrictions as :attr:`Index.include`.\n \n@@ -272,7 +273,8 @@ For example::\n creates a unique constraint that only allows one row to store a ``NULL`` value\n in the ``ordering`` column.\n \n-``nulls_distinct`` is ignored for databases besides PostgreSQL 15+.\n+Unique constraints with ``nulls_distinct`` are ignored for databases besides\n+PostgreSQL 15+.\n \n ``violation_error_code``\n ------------------------\n", "test_patch": "", "problem_statement": "Clarify when unique constraints are ignored.\nDescription\n\t \nConsider the following code:\nclass SomeModel(models.Model):\n\ta = models.IntegerField()\n\tb = models.IntegerField()\n\tc = models.IntegerField()\n\td = models.IntegerField()\n\te = models.IntegerField()\n\tf = models.IntegerField()\n\tg = models.IntegerField(null=True)\n\tclass Meta:\n\t\tindexes = [\n\t\t\tmodels.Index(fields=[\"a\"], name=\"index_a\"),\n\t\t\tmodels.Index(fields=[\"b\"], include=[\"c\"], name=\"index_b_include_c\"),\n\t\t]\n\t\tconstraints = [\n\t\t\tmodels.UniqueConstraint(fields=[\"d\"], name=\"unique_d\"),\n\t\t\tmodels.UniqueConstraint(fields=[\"e\"], include=[\"f\"], name=\"unique_e_include_f\"),\n\t\t\tmodels.UniqueConstraint(fields=[\"g\"], nulls_distinct=True, name=\"unique_g_nulls_distinct\"),\n\t\t]\nExpected Behavior\nFrom the documentation:\ninclude is ignored for databases besides PostgreSQL.\nnulls_distinct is ignored for databases besides PostgreSQL 15+.\nOne would imagine that if we run this on SQLite we\u2019ll end up with five indexes on one field each as though the unsupported parameters were not present. \nActual Behavior\nInstead we get:\nindex_a on a\nindex_b_include_c on b\nunique_d on d\nand no other constraints!\nThe documentation and the behavior are clearly at odds, and the behavior is very confusing. The intention behind indexes like unique_e_include_f is to enforce a constraint and to enable an optimization on top of that, Django is unable to provide the optimization so it doesn\u2019t enforce the constraint either?\nWorkflows Affected\nIt seems to me there are two important workflows, none of which Django currently supports:\nA project for which the DB has been chosen long ago, and a migration to a different one is very unlikely. The developer would like to get the most out of the DB and is willing to use DB-specific features. In this case Django should raise errors if the specific features requested are unavailable.\nA DB-agnostic app intended to be included in other projects. The developer would like Django to create indexes that best match the performance requirements as appropriate for whatever DB the app may end up running on.\nFor example, in the second case, anticipating a lot of SomeModel.objects.filter(b__range=...).values(\"b\", \"c\") the developer would like to create an Index(fields=[\"b\"], include=[\"c\"]) but with a fallback to Index(fields=[\"b\", \"c\"]) if covering indexes aren\u2019t supported. The interface to create custom indexes is \u200bin theory documented but very sparsely (it doesn\u2019t even say what the arguments to create_sql are) so expecting app developers to use this route is unrealistic.\nNote that while in many other cases failing to perform an optimization is considered a graceful fallback, indexes are explicitly created for purposes of optimization and failing to achieve that is an error that should be signaled.\nSuggested Resolution\nUnder no circumstances should Django quietly decline to create a unique constraint.\nIndex and UniqueConstraint classes should have extra parameters to specify what to fall back to if requested features are unavailable. Perhaps something along the lines of\nmodels.Index(\n\tfields=[\"b\"],\n\tinclude=[\"c\"],\n\tfallback=models.Index(fields=[\"b\", \"c\"]),\n\t# where does the name go though?\n)\nmodels.UniqueConstraint(\n\tfields=[\"b\"],\n\tinclude=[\"c\"],\n\tfallback=[\n\t\tmodels.UniqueConstraint(fields=[\"b\"]),\n\t\tmodels.Index(fields=[\"b\", \"c\"]),\n\t],\n)\nmodels.UniqueConstraint(\n\tfields=[\"x\"],\n\tnulls_distinct=True,\n\tfallback=models.UniqueConstraint(Coalesce(F(\"x\"), 0)),\n)\nThere should be a setting to make it a warning or an error if Django encounters an index that it can\u2019t create exactly and that has no user-specified fallback.\nA perfect solution would also provide a way of upgrading indexes if a later version of the DB adds support for the features that were previously missing.\nHere\u2019s my attempt to approximate a solution:\nclass FallbackIndex(models.Index):\n\tdef __init__(self, *a, requires=None, fallback=None, **k):\n\t\tsuper().__init__(*a, **k)\n\t\tself.requires = requires\n\t\tself.fallback = fallback\n\tdef create_sql(self, model, schema_editor, using=\"\", **kwargs):\n\t\treturn (\n\t\t\tsuper()\n\t\t\tif getattr(schema_editor.connection.features, self.requires)\n\t\t\telse self.fallback\n\t\t).create_sql(model, schema_editor, using=using, **kwargs)\n\tdef deconstruct(self):\n\t\tpath, expressions, kwargs = super().deconstruct()\n\t\tkwargs[\"requires\"] = self.requires\n\t\tkwargs[\"fallback\"] = self.fallback\n\t\treturn path, expressions, kwargs\nindexes = [\n\tFallbackIndex(\n\t\tfields=[\"b\"],\n\t\tinclude=[\"c\"],\n\t\tname=\"index_b_include_c\",\n\t\trequires=\"supports_covering_indexes\",\n\t\tfallback=models.Index(fields=[\"b\", \"c\"], name=\"index_b_include_c\"),\n\t),\n]\nexcept it should be possible to determine the required features automatically.\n", "hints_text": [["Hey thanks for the report! Accepting though I don't know whether this will end up being a documentation change or behaviour change. I agree the behaviour is inconsistent between indexes & constraints, though there may be a few factors to consider here and other team members will weigh in on whether making the behaviour consistent is a desirable outcome. (If we do change behaviour this ticket may need to be split in 2 as nulls_distinct is a new Django 5.0 feature.)", 1699315359.0], ["Here's the forum discussion I raised: \u200bhttps://forum.djangoproject.com/t/request-for-comments-about-a-ticket-index-vs-uniqueconstraint-inconsistency/25097 Only got 1 response but I agree with them so that's 2 for changing the behaviour \ud83e\udd37\u200d\u2642\ufe0f Roman, would you like to prepare a patch?", 1700118473.0], ["A patch that would do exactly what? By what means do we make it possible for UniqueConstraint(fields=[\"a\"], include=[\"b\"]) to fall back to UniqueConstraint(fields=[\"a\"]) + Index(fields=[\"a\", \"b\"])?", 1700330235.0], ["I think he intended that models.UniqueConstraint(fields=e, include=f, name=\"unique_e_include_f\") makes 'unique_e_include_f' on 'e' like models.Index. and UniqueConstraint with nulls_distinct act ignored like deferrable so need to update documentation. If you are okay, can i handle this?", 1704444321.0], ["Perhaps the easiest way of implementing this would be something along the lines of class Meta: constraints = [ models.UniqueConstraint(fields=[\"e\"], include=[\"f\"], if_has_features=[\"supports_covering_indexes\"]), models.UniqueConstraint(fields=[\"e\"], unless_has_features=[\"supports_covering_indexes\"]), ] indexes = [ models.Index(fields=[\"e\", \"f\"], unless_has_features=[\"supports_covering_indexes\"]), ] The only question that would remain would be, what if the DB gains support for a feature it previously lacked.", 1704704248.0], ["Thanks for sharing ur thought. Currently I am trying to update two changes. when i check 4options related this issue with below code class Ticket34949(models.Model): a = models.IntegerField() b = models.IntegerField() c = models.IntegerField() d = models.IntegerField() e = models.IntegerField() f = models.IntegerField() class Meta: constraints = [ models.UniqueConstraint(fields=['a'], name='unique_a'), models.UniqueConstraint(fields=['b'], name='unique_b_c', include=['c']), models.UniqueConstraint(fields=['d'], name='unique_d_e', deferrable=models.Deferrable.DEFERRED), models.UniqueConstraint(fields=['e'], name='unique_e', nulls_distinct=False), models.UniqueConstraint(fields=['f'], name='unique_f', opclasses=['varchar_pattern_ops']) ] Django makes only a,f unique constraints in MySQL. I think opclasses, include are option for optimization. so it needs to make unique constraints as David said. And nulls_distinct, deferrable are related to unique constraints behavior. so, Django shouldn't make unique constraints. so, my actions are below two items. 1) fix includes 2) update documents for distinguishing between opclasses, include and nulls_distinct, deferrable.", 1704759155.0], ["I'm not really sure what do we want to achieve in this ticket. Under no circumstances should Django quietly decline to create a unique constraint. It doesn't. Django has system checks for all unsupported options models.W036 -> models.W040 so none of them is silently omitted.", 1704765569.0], ["I'm not really sure what do we want to achieve in this ticket. Suppose I want to write a reusable Django app that others will include in their projects. A model in the app wants an index that\u2019s best described as UniqueConstraint(fields=[\"a\", \"b\"], include=[\"c\", \"d\"]). How do I make Django create constraints and/or indexes that best approximate this on whatever DB the user will run their project?", 1704798336.0], ["If you want to create a cross-database constraint you should use options support by all databases.", 1704808770.0]], "created_at": "2024-01-09T07:26:05Z"}
{"repo": "django/django", "pull_number": 17710, "instance_id": "django__django-17710", "issue_numbers": ["35096"], "base_commit": "415982be105380af5116692a2f6e91c8092803fb", "patch": "diff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex 5ba9d1ff1bf0..1d9fa9858eec 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -195,6 +195,7 @@ fieldset .fieldBox {\n }\n \n form .wide p.help,\n+form .wide ul.errorlist,\n form .wide div.help {\n     padding-left: 50px;\n }\ndiff --git a/django/contrib/admin/static/admin/css/rtl.css b/django/contrib/admin/static/admin/css/rtl.css\nindex 58ba97710b27..bf636720fdda 100644\n--- a/django/contrib/admin/static/admin/css/rtl.css\n+++ b/django/contrib/admin/static/admin/css/rtl.css\n@@ -165,7 +165,9 @@ form .aligned p.time div.help.timezonewarning {\n     padding-right: 0;\n }\n \n-form .wide p.help, form .wide div.help {\n+form .wide p.help,\n+form .wide ul.errorlist,\n+form .wide div.help {\n     padding-left: 0;\n     padding-right: 50px;\n }\n", "test_patch": "", "problem_statement": "Error messages in admin forms with class \"wide\" misaligned\nDescription\n\t\t\n(last modified by Fabian Braun)\t\t\nThe admin allows customizing the styling of fieldsets. \"wide\" is a documented class for a fieldset. It widens the width of the label column from 160px to 200px.\nAlas, if the form has errors, the error messages stay indented at 160px not 200px:\n", "hints_text": [], "created_at": "2024-01-08T22:24:33Z"}
{"repo": "django/django", "pull_number": 17707, "instance_id": "django__django-17707", "issue_numbers": ["33481"], "base_commit": "a9094ec1f43dca7f2a649327afcd5e6226b4959c", "patch": "diff --git a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\nindex 51de847dbf64..950e615f0c86 100644\n--- a/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n+++ b/django/contrib/contenttypes/management/commands/remove_stale_contenttypes.py\n@@ -82,7 +82,7 @@ def handle(self, **options):\n                         \"are:\\n\\n\"\n                         f\"{content_type_display}\\n\\n\"\n                         \"This list doesn't include any cascade deletions to data \"\n-                        \"outside of Django's\\n\"\n+                        \"outside of Django\\n\"\n                         \"models (uncommon).\\n\\n\"\n                         \"Are you sure you want to delete these content types?\\n\"\n                         \"If you're unsure, answer 'no'.\"\n", "test_patch": "", "problem_statement": "Clarify remove_stale_contenttypes data loss warning\nDescription\n\t \nI just wanted to remove stale contenttypes from a system and noticed a pretty significant bug.\nThe command prints a message before you need to confirm the deletion that reads:\nThis list doesn't include any cascade deletions to data outside of Django's models (uncommon).\nHowever, a quick investigation on the objects that are to be deleted includes objects outside of Django's scope.\nIn my case:\n2 auth.Group_permissions object(s)\n7185 joeflow.Task object(s)\n5519 joeflow.Task_parent_task_set object(s)\nThis misinformation can cause users to delete data without double-checking.\n", "hints_text": [["I think you've misunderstood the message. The data you listed seem to be Django objects and relations. Why do you say they are \"outside of Django's scope\"? Aren't they printed as part of the deletion warning?", 1643714394.0], ["Oooooh, now I get it. Wow, OK, is it just me, or is that sentence misleading? Maybe we replace that sentence something that doesn't include brackets at the end and not the term \"Django's models\"? Something a long the lines of: The list above does not include deletions that may be caused by manually added database constraints or triggers.", 1643716288.0], ["I wrote the original sentence in e2dfa81ff7489d97700604d634adacf1384af184. I guess you may have interpreted \"Django's models\" to mean contrib.auth? I don't have an objection to some rewording but for me, it's more intuitive to talk about \"cascade deletions\" and \"relations\" rather than \"constraints or triggers.\" Feel free to submit a PR to continue the discussion with a merger.", 1643743687.0]], "created_at": "2024-01-07T12:42:19Z"}
{"repo": "django/django", "pull_number": 17706, "instance_id": "django__django-17706", "issue_numbers": ["35092"], "base_commit": "9b02ad91ead3db75036be981bab2083aebc993a6", "patch": "diff --git a/django/contrib/gis/geoip2.py b/django/contrib/gis/geoip2.py\nindex d0f3bb9fb344..d59d00283d92 100644\n--- a/django/contrib/gis/geoip2.py\n+++ b/django/contrib/gis/geoip2.py\n@@ -203,18 +203,23 @@ def city(self, query):\n         response = self._city.city(enc_query)\n         region = response.subdivisions[0] if response.subdivisions else None\n         return {\n+            \"accuracy_radius\": response.location.accuracy_radius,\n             \"city\": response.city.name,\n             \"continent_code\": response.continent.code,\n             \"continent_name\": response.continent.name,\n             \"country_code\": response.country.iso_code,\n             \"country_name\": response.country.name,\n-            \"dma_code\": response.location.metro_code,\n             \"is_in_european_union\": response.country.is_in_european_union,\n             \"latitude\": response.location.latitude,\n             \"longitude\": response.location.longitude,\n+            \"metro_code\": response.location.metro_code,\n             \"postal_code\": response.postal.code,\n-            \"region\": region.iso_code if region else None,\n+            \"region_code\": region.iso_code if region else None,\n+            \"region_name\": region.name if region else None,\n             \"time_zone\": response.location.time_zone,\n+            # Kept for backward compatibility.\n+            \"dma_code\": response.location.metro_code,\n+            \"region\": region.iso_code if region else None,\n         }\n \n     def country_code(self, query):\n@@ -235,8 +240,11 @@ def country(self, query):\n         enc_query = self._check_query(query, city_or_country=True)\n         response = self._country_or_city(enc_query)\n         return {\n+            \"continent_code\": response.continent.code,\n+            \"continent_name\": response.continent.name,\n             \"country_code\": response.country.iso_code,\n             \"country_name\": response.country.name,\n+            \"is_in_european_union\": response.country.is_in_european_union,\n         }\n \n     def coords(self, query, ordering=(\"longitude\", \"latitude\")):\ndiff --git a/docs/ref/contrib/gis/geoip2.txt b/docs/ref/contrib/gis/geoip2.txt\nindex 1d27e3965766..2be6ea516c0c 100644\n--- a/docs/ref/contrib/gis/geoip2.txt\n+++ b/docs/ref/contrib/gis/geoip2.txt\n@@ -33,20 +33,28 @@ Here is an example of its usage:\n     >>> from django.contrib.gis.geoip2 import GeoIP2\n     >>> g = GeoIP2()\n     >>> g.country(\"google.com\")\n-    {'country_code': 'US', 'country_name': 'United States'}\n+    {'continent_code': 'NA',\n+     'continent_name': 'North America',\n+     'country_code': 'US',\n+     'country_name': 'United States',\n+     'is_in_european_union': False}\n     >>> g.city(\"72.14.207.99\")\n-    {'city': 'Mountain View',\n-    'continent_code': 'NA',\n-    'continent_name': 'North America',\n-    'country_code': 'US',\n-    'country_name': 'United States',\n-    'dma_code': 807,\n-    'is_in_european_union': False,\n-    'latitude': 37.419200897216797,\n-    'longitude': -122.05740356445312,\n-    'postal_code': '94043',\n-    'region': 'CA',\n-    'time_zone': 'America/Los_Angeles'}\n+    {'accuracy_radius': 1000,\n+     'city': 'Mountain View',\n+     'continent_code': 'NA',\n+     'continent_name': 'North America',\n+     'country_code': 'US',\n+     'country_name': 'United States',\n+     'is_in_european_union': False,\n+     'latitude': 37.419200897216797,\n+     'longitude': -122.05740356445312,\n+     'metro_code': 807,\n+     'postal_code': '94043',\n+     'region_code': 'CA',\n+     'region_name': 'California',\n+     'time_zone': 'America/Los_Angeles',\n+     'dma_code': 807,\n+     'region': 'CA'}\n     >>> g.lat_lon(\"salon.com\")\n     (39.0437, -77.4875)\n     >>> g.lon_lat(\"uh.edu\")\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex d458811471a6..547a38d0b43c 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -62,6 +62,14 @@ Minor features\n * :class:`~django.contrib.gis.geoip2.GeoIP2` now allows querying using\n   :class:`ipaddress.IPv4Address` or :class:`ipaddress.IPv6Address` objects.\n \n+* :meth:`.GeoIP2.country` now exposes the ``continent_code``,\n+  ``continent_name``, and ``is_in_european_union`` values.\n+\n+* :meth:`.GeoIP2.city` now exposes the ``accuracy_radius`` and ``region_name``\n+  values. In addition the ``dma_code`` and ``region`` values are now exposed as\n+  ``metro_code`` and ``region_code``, but the previous keys are also retained\n+  for backward compatibility.\n+\n :mod:`django.contrib.messages`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/gis_tests/test_geoip2.py b/tests/gis_tests/test_geoip2.py\nindex 412728b3f432..f27c7cb86166 100644\n--- a/tests/gis_tests/test_geoip2.py\n+++ b/tests/gis_tests/test_geoip2.py\n@@ -108,8 +108,11 @@ def test_country(self):\n                 self.assertEqual(\n                     g.country(query),\n                     {\n+                        \"continent_code\": \"EU\",\n+                        \"continent_name\": \"Europe\",\n                         \"country_code\": \"GB\",\n                         \"country_name\": \"United Kingdom\",\n+                        \"is_in_european_union\": False,\n                     },\n                 )\n                 self.assertEqual(g.country_code(query), \"GB\")\n@@ -122,18 +125,23 @@ def test_city(self):\n                 self.assertEqual(\n                     g.city(query),\n                     {\n+                        \"accuracy_radius\": 100,\n                         \"city\": \"Boxford\",\n                         \"continent_code\": \"EU\",\n                         \"continent_name\": \"Europe\",\n                         \"country_code\": \"GB\",\n                         \"country_name\": \"United Kingdom\",\n-                        \"dma_code\": None,\n                         \"is_in_european_union\": False,\n                         \"latitude\": 51.75,\n                         \"longitude\": -1.25,\n+                        \"metro_code\": None,\n                         \"postal_code\": \"OX1\",\n-                        \"region\": \"ENG\",\n+                        \"region_code\": \"ENG\",\n+                        \"region_name\": \"England\",\n                         \"time_zone\": \"Europe/London\",\n+                        # Kept for backward compatibility.\n+                        \"dma_code\": None,\n+                        \"region\": \"ENG\",\n                     },\n                 )\n \n@@ -148,8 +156,11 @@ def test_city(self):\n                 self.assertEqual(\n                     g.country(query),\n                     {\n+                        \"continent_code\": \"EU\",\n+                        \"continent_name\": \"Europe\",\n                         \"country_code\": \"GB\",\n                         \"country_name\": \"United Kingdom\",\n+                        \"is_in_european_union\": False,\n                     },\n                 )\n                 self.assertEqual(g.country_code(query), \"GB\")\n", "problem_statement": "Expose additional data in responses from geoip2 queries.\nDescription\n\t \nI'd like to expose some of the data missing in the responses returned for both country and city queries.\nFor country responses, we should return continent_code, continent_name, and is_in_european_union1.\nFor city responses, we should return accuracy_radius and region_name. We should also rename region to region_code and dma_code2 to metro_code. (In my initial patch I've kept the old names around for backward compatibility, but perhaps we should deprecate those keys?)\n1 This was already added for city responses in #30447.\n2 IIRC this is an old name for metro_code that was used in the old v1 of the GeoIP library...\n", "hints_text": [], "created_at": "2024-01-06T17:14:35Z"}
{"repo": "django/django", "pull_number": 17705, "instance_id": "django__django-17705", "issue_numbers": ["35091"], "base_commit": "53fc6ac64976a7693d2272050a03b71e56b16578", "patch": "diff --git a/django/contrib/gis/geoip2.py b/django/contrib/gis/geoip2.py\nindex 5f49954209df..d0f3bb9fb344 100644\n--- a/django/contrib/gis/geoip2.py\n+++ b/django/contrib/gis/geoip2.py\n@@ -12,6 +12,7 @@\n directory corresponding to settings.GEOIP_PATH.\n \"\"\"\n \n+import ipaddress\n import socket\n import warnings\n \n@@ -172,10 +173,10 @@ def __repr__(self):\n \n     def _check_query(self, query, city=False, city_or_country=False):\n         \"Check the query and database availability.\"\n-        # Making sure a string was passed in for the query.\n-        if not isinstance(query, str):\n+        if not isinstance(query, (str, ipaddress.IPv4Address, ipaddress.IPv6Address)):\n             raise TypeError(\n-                \"GeoIP query must be a string, not type %s\" % type(query).__name__\n+                \"GeoIP query must be a string or instance of IPv4Address or \"\n+                \"IPv6Address, not type %s\" % type(query).__name__,\n             )\n \n         # Extra checks for the existence of country and city databases.\ndiff --git a/docs/ref/contrib/gis/geoip2.txt b/docs/ref/contrib/gis/geoip2.txt\nindex aca31bf78b00..1d27e3965766 100644\n--- a/docs/ref/contrib/gis/geoip2.txt\n+++ b/docs/ref/contrib/gis/geoip2.txt\n@@ -107,10 +107,11 @@ and given cache setting.\n Querying\n --------\n \n-All the following querying routines may take either a string IP address\n-or a fully qualified domain name (FQDN). For example, both\n-``'205.186.163.125'`` and ``'djangoproject.com'`` would be valid query\n-parameters.\n+All the following querying routines may take an instance of\n+:class:`~ipaddress.IPv4Address` or :class:`~ipaddress.IPv6Address`, a string IP\n+address, or a fully qualified domain name (FQDN). For example,\n+``IPv4Address(\"205.186.163.125\")``, ``\"205.186.163.125\"``, and\n+``\"djangoproject.com\"`` would all be valid query parameters.\n \n .. method:: GeoIP2.city(query)\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex e84a27a0ec42..d458811471a6 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -59,6 +59,9 @@ Minor features\n * :class:`~django.contrib.gis.db.models.Collect` is now supported on MySQL\n   8.0.24+.\n \n+* :class:`~django.contrib.gis.geoip2.GeoIP2` now allows querying using\n+  :class:`ipaddress.IPv4Address` or :class:`ipaddress.IPv6Address` objects.\n+\n :mod:`django.contrib.messages`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/gis_tests/test_geoip2.py b/tests/gis_tests/test_geoip2.py\nindex 9cd5ffbdfe70..412728b3f432 100644\n--- a/tests/gis_tests/test_geoip2.py\n+++ b/tests/gis_tests/test_geoip2.py\n@@ -1,3 +1,4 @@\n+import ipaddress\n import itertools\n import pathlib\n from unittest import mock, skipUnless\n@@ -25,15 +26,20 @@ def build_geoip_path(*parts):\n )\n class GeoLite2Test(SimpleTestCase):\n     fqdn = \"sky.uk\"\n-    ipv4 = \"2.125.160.216\"\n-    ipv6 = \"::ffff:027d:a0d8\"\n+    ipv4_str = \"2.125.160.216\"\n+    ipv6_str = \"::ffff:027d:a0d8\"\n+    ipv4_addr = ipaddress.ip_address(ipv4_str)\n+    ipv6_addr = ipaddress.ip_address(ipv6_str)\n+    query_values = (fqdn, ipv4_str, ipv6_str, ipv4_addr, ipv6_addr)\n \n     @classmethod\n     def setUpClass(cls):\n         # Avoid referencing __file__ at module level.\n         cls.enterClassContext(override_settings(GEOIP_PATH=build_geoip_path()))\n         # Always mock host lookup to avoid test breakage if DNS changes.\n-        cls.enterClassContext(mock.patch(\"socket.gethostbyname\", return_value=cls.ipv4))\n+        cls.enterClassContext(\n+            mock.patch(\"socket.gethostbyname\", return_value=cls.ipv4_str)\n+        )\n \n         super().setUpClass()\n \n@@ -86,7 +92,10 @@ def test_bad_query(self):\n \n         functions += (g.country, g.country_code, g.country_name)\n         values = (123, 123.45, b\"\", (), [], {}, set(), frozenset(), GeoIP2)\n-        msg = \"GeoIP query must be a string, not type\"\n+        msg = (\n+            \"GeoIP query must be a string or instance of IPv4Address or IPv6Address, \"\n+            \"not type\"\n+        )\n         for function, value in itertools.product(functions, values):\n             with self.subTest(function=function.__qualname__, type=type(value)):\n                 with self.assertRaisesMessage(TypeError, msg):\n@@ -94,7 +103,7 @@ def test_bad_query(self):\n \n     def test_country(self):\n         g = GeoIP2(city=\"<invalid>\")\n-        for query in (self.fqdn, self.ipv4, self.ipv6):\n+        for query in self.query_values:\n             with self.subTest(query=query):\n                 self.assertEqual(\n                     g.country(query),\n@@ -108,7 +117,7 @@ def test_country(self):\n \n     def test_city(self):\n         g = GeoIP2(country=\"<invalid>\")\n-        for query in (self.fqdn, self.ipv4, self.ipv6):\n+        for query in self.query_values:\n             with self.subTest(query=query):\n                 self.assertEqual(\n                     g.city(query),\n@@ -188,15 +197,17 @@ def test_repr(self):\n \n     def test_check_query(self):\n         g = GeoIP2()\n-        self.assertEqual(g._check_query(self.ipv4), self.ipv4)\n-        self.assertEqual(g._check_query(self.ipv6), self.ipv6)\n-        self.assertEqual(g._check_query(self.fqdn), self.ipv4)\n+        self.assertEqual(g._check_query(self.fqdn), self.ipv4_str)\n+        self.assertEqual(g._check_query(self.ipv4_str), self.ipv4_str)\n+        self.assertEqual(g._check_query(self.ipv6_str), self.ipv6_str)\n+        self.assertEqual(g._check_query(self.ipv4_addr), self.ipv4_addr)\n+        self.assertEqual(g._check_query(self.ipv6_addr), self.ipv6_addr)\n \n     def test_coords_deprecation_warning(self):\n         g = GeoIP2()\n         msg = \"GeoIP2.coords() is deprecated. Use GeoIP2.lon_lat() instead.\"\n         with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n-            e1, e2 = g.coords(self.ipv4)\n+            e1, e2 = g.coords(self.ipv4_str)\n         self.assertIsInstance(e1, float)\n         self.assertIsInstance(e2, float)\n \n", "problem_statement": "Allow use of ipaddress standard library module with django.contrib.gis.geoip2\nDescription\n\t \nIt currently isn't possible to pass an ipaddress.IPv4Address or ipaddress.IPv6Address when querying using django.contrib.gis.geoip2.\nI propose to make it possible to pass in these types without the need to coerce them to strings.\n", "hints_text": [], "created_at": "2024-01-06T16:49:28Z"}
{"repo": "django/django", "pull_number": 17703, "instance_id": "django__django-17703", "issue_numbers": ["35090"], "base_commit": "50e95ad5367a4a93f94a66a645f9c126f0609f0a", "patch": "diff --git a/django/urls/converters.py b/django/urls/converters.py\nindex 965282350805..9b4443058047 100644\n--- a/django/urls/converters.py\n+++ b/django/urls/converters.py\n@@ -1,5 +1,8 @@\n import functools\n import uuid\n+import warnings\n+\n+from django.utils.deprecation import RemovedInDjango60Warning\n \n \n class IntConverter:\n@@ -53,6 +56,15 @@ class PathConverter(StringConverter):\n \n \n def register_converter(converter, type_name):\n+    if type_name in REGISTERED_CONVERTERS or type_name in DEFAULT_CONVERTERS:\n+        # RemovedInDjango60Warning: when the deprecation ends, replace with\n+        # raise ValueError(f\"Converter {type_name} is already registered.\")\n+        warnings.warn(\n+            f\"Converter {type_name!r} is already registered. Support for overriding \"\n+            \"registered converters is deprecated and will be removed in Django 6.0.\",\n+            RemovedInDjango60Warning,\n+            stacklevel=2,\n+        )\n     REGISTERED_CONVERTERS[type_name] = converter()\n     get_converters.cache_clear()\n \ndiff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt\nindex e91ac062cb90..807207586482 100644\n--- a/docs/internals/deprecation.txt\n+++ b/docs/internals/deprecation.txt\n@@ -74,6 +74,9 @@ details on these changes.\n * The setter for ``django.contrib.gis.gdal.OGRGeometry.coord_dim`` will be\n   removed.\n \n+* ``django.urls.register_converter()`` will no longer allow overriding existing\n+  converters.\n+\n .. _deprecation-removed-in-5.1:\n \n 5.1\ndiff --git a/docs/ref/urls.txt b/docs/ref/urls.txt\nindex e8d51eeda22b..2ef873d34863 100644\n--- a/docs/ref/urls.txt\n+++ b/docs/ref/urls.txt\n@@ -120,6 +120,10 @@ The ``converter`` argument is a converter class, and ``type_name`` is the\n converter name to use in path patterns. See\n :ref:`registering-custom-path-converters` for an example.\n \n+.. deprecated:: 5.1\n+\n+    Overriding existing converters is deprecated.\n+\n ==================================================\n ``django.conf.urls`` functions for use in URLconfs\n ==================================================\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex a4a7f359c6bc..9a2f2fc6cc13 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -419,6 +419,9 @@ Miscellaneous\n * Setting ``django.contrib.gis.gdal.OGRGeometry.coord_dim`` is deprecated. Use\n   :meth:`~django.contrib.gis.gdal.OGRGeometry.set_3d` instead.\n \n+* Overriding existing converters with ``django.urls.register_converter()`` is\n+  deprecated.\n+\n Features removed in 5.1\n =======================\n \ndiff --git a/docs/topics/http/urls.txt b/docs/topics/http/urls.txt\nindex d8de9635ec2a..8e57732725a8 100644\n--- a/docs/topics/http/urls.txt\n+++ b/docs/topics/http/urls.txt\n@@ -183,6 +183,11 @@ Register custom converter classes in your URLconf using\n         ...,\n     ]\n \n+.. deprecated:: 5.1\n+\n+    Overriding existing converters with ``django.urls.register_converter()`` is\n+    deprecated.\n+\n Using regular expressions\n =========================\n \n", "test_patch": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex f8d73fdb4ad3..37109c9a1193 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -4,10 +4,20 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.test import SimpleTestCase\n from django.test.utils import override_settings\n-from django.urls import NoReverseMatch, Resolver404, path, re_path, resolve, reverse\n+from django.urls import (\n+    NoReverseMatch,\n+    Resolver404,\n+    path,\n+    re_path,\n+    register_converter,\n+    resolve,\n+    reverse,\n+)\n+from django.urls.converters import IntConverter\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.views import View\n \n-from .converters import DynamicConverter\n+from .converters import Base64Converter, DynamicConverter\n from .views import empty_view\n \n included_kwargs = {\"base\": b\"hello\", \"value\": b\"world\"}\n@@ -193,6 +203,28 @@ def test_invalid_converter(self):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             path(\"foo/<nonexistent:var>/\", empty_view)\n \n+    def test_warning_override_default_converter(self):\n+        # RemovedInDjango60Warning: when the deprecation ends, replace with\n+        # msg = \"Converter 'int' is already registered.\"\n+        # with self.assertRaisesMessage(ValueError, msg):\n+        msg = (\n+            \"Converter 'int' is already registered. Support for overriding registered \"\n+            \"converters is deprecated and will be removed in Django 6.0.\"\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            register_converter(IntConverter, \"int\")\n+\n+    def test_warning_override_converter(self):\n+        # RemovedInDjango60Warning: when the deprecation ends, replace with\n+        # msg = \"Converter 'base64' is already registered.\"\n+        # with self.assertRaisesMessage(ValueError, msg):\n+        msg = (\n+            \"Converter 'base64' is already registered. Support for overriding \"\n+            \"registered converters is deprecated and will be removed in Django 6.0.\"\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            register_converter(Base64Converter, \"base64\")\n+\n     def test_invalid_view(self):\n         msg = \"view must be a callable or a list/tuple in the case of include().\"\n         with self.assertRaisesMessage(TypeError, msg):\n", "problem_statement": "Enforce uniqueness on custom path converters\nDescription\n\t\t\n(last modified by Adam Johnson)\t\t\nregister_converter() allows \u200bcustom path converters to silently replace existing converters. This could lead to surprising behaviour, both when two places accidentally use the same custom name or when replacing a default converter. This could be particularly hard to debug if a third-party package uses a custom converter.\nFor example, say two modules register path converters named \u201cyear\u201d. The first allows 1-4 digits:\nclass YearConverter:\n\tregex = r\"[0-9]{1,4}\"\n\t...\nregister_converter(YearConverter, \"year\")\nWhilst the second requires exactly four digits:\nclass YearConverter:\n\tregex = r\"[0-9]{4}\"\n\t...\nregister_converter(YearConverter, \"year\")\nWhichever module is loaded last will silently overwrite the other\u2019s converter. URLs will then only be interpreted with that converter, leading to fewer URLs being matched than intended. This can be particularly difficult to spot as import order may change accidentally due to other code being rearranged.\nSee the full example project at \u200bhttps://github.com/adamchainz/django-ticket-35090\nI propose that support for reusing path converter names be deprecated, eventually raising an exception. I think this should include the default names (int etc.) as replacing them can break URLs from third-party packages.\n", "hints_text": [["I've submitted a PR for this bug: \u200bhttps://github.com/django/django/pull/17703", 1704515287.0], ["As for it's a cleanup not a bug. If someone registers converters with the same name as builtin converters, they will get what they deserve. What if they do it on purpose?", 1704523690.0], ["If someone registers converters with the same name as builtin converters, they will get what they deserve. What if they do it on purpose? Even if done on purpose, users can break URLs in other parts of their project or packages unwittingly. If you need a modified int converter, for example, there\u2019s little harm in requiring it to have a different name, but potential harm in allowing silent replacement.", 1704638662.0], ["OK, let's have it.", 1704684668.0], ["I'm not sure I understand the desired fix: is it to prevent any converter registered name overlap (ie a dynamic check at the time of project load)? or just a check against the Django/default's converters? Would there be a way to override registered converters?", 1704697168.0], ["Replying to Natalia Bidart: I'm not sure I understand the desired fix: is it to prevent any converter registered name overlap (ie a dynamic check at the time of project load)? or just a check against the Django/default's converters? I interpreted it as an issue to avoid overlapping among different registered converters, but please correct me if I misunderstood. Would there be a way to override registered converters? I honestly don't know if there is a possibility to override", 1705032591.0], ["Natalia, I propose preventing *any* overlap, that is, blocking the overriding of both the default and custom converters. Replacing a converter opens the possibility of \u201caction at a distance\u201d and a hard-to-debug lack of correct URL resolution. Unique names prevent that.", 1705846415.0]], "created_at": "2024-01-06T10:22:48Z"}
{"repo": "django/django", "pull_number": 17702, "instance_id": "django__django-17702", "issue_numbers": ["28404"], "base_commit": "ec7651586d2d94e1ccd8f905c6a3776ad936b62d", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex f63f712f3a41..8319353cf551 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -47,6 +47,7 @@ answer newbie questions, and generally made Django that much better:\n     Aleksandra Sendecka <asendecka@hauru.eu>\n     Aleksi H\u00e4kli <aleksi.hakli@iki.fi>\n     Alex Dutton <django@alexdutton.co.uk>\n+    Alexander Lazarevi\u0107 <laza@e11bits.com>\n     Alexander Myodov <alex@myodov.com>\n     Alexandr Tatarinov <tatarinov.dev@gmail.com>\n     Alex Aktsipetrov <alex.akts@gmail.com>\ndiff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex d6c54dd440d1..97a09143ade0 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -433,7 +433,7 @@ def display_for_field(value, field, empty_value_display):\n     # general null test.\n     elif isinstance(field, models.BooleanField):\n         return _boolean_icon(value)\n-    elif value is None:\n+    elif value in field.empty_values:\n         return empty_value_display\n     elif isinstance(field, models.DateTimeField):\n         return formats.localize(timezone.template_localtime(value))\n", "test_patch": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 4870d9bbe974..b4739b572dc3 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -74,15 +74,15 @@\n )\n \n \n-def build_tbody_html(obj, href, extra_fields):\n+def build_tbody_html(obj, href, field_name, extra_fields):\n     return (\n         \"<tbody><tr>\"\n         '<td class=\"action-checkbox\">'\n         '<input type=\"checkbox\" name=\"_selected_action\" value=\"{}\" '\n         'class=\"action-select\" aria-label=\"Select this object for an action - {}\"></td>'\n-        '<th class=\"field-name\"><a href=\"{}\">name</a></th>'\n+        '<th class=\"field-name\"><a href=\"{}\">{}</a></th>'\n         \"{}</tr></tbody>\"\n-    ).format(obj.pk, str(obj), href, extra_fields)\n+    ).format(obj.pk, str(obj), href, field_name, extra_fields)\n \n \n @override_settings(ROOT_URLCONF=\"admin_changelist.urls\")\n@@ -245,7 +245,7 @@ def test_result_list_empty_changelist_value(self):\n         table_output = template.render(context)\n         link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n         row_html = build_tbody_html(\n-            new_child, link, '<td class=\"field-parent nowrap\">-</td>'\n+            new_child, link, \"name\", '<td class=\"field-parent nowrap\">-</td>'\n         )\n         self.assertNotEqual(\n             table_output.find(row_html),\n@@ -253,6 +253,24 @@ def test_result_list_empty_changelist_value(self):\n             \"Failed to find expected row element: %s\" % table_output,\n         )\n \n+    def test_result_list_empty_changelist_value_blank_string(self):\n+        new_child = Child.objects.create(name=\"\", parent=None)\n+        request = self.factory.get(\"/child/\")\n+        request.user = self.superuser\n+        m = ChildAdmin(Child, custom_site)\n+        cl = m.get_changelist_instance(request)\n+        cl.formset = None\n+        template = Template(\n+            \"{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}\"\n+        )\n+        context = Context({\"cl\": cl, \"opts\": Child._meta})\n+        table_output = template.render(context)\n+        link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n+        row_html = build_tbody_html(\n+            new_child, link, \"-\", '<td class=\"field-parent nowrap\">-</td>'\n+        )\n+        self.assertInHTML(row_html, table_output)\n+\n     def test_result_list_set_empty_value_display_on_admin_site(self):\n         \"\"\"\n         Empty value display can be set on AdminSite.\n@@ -272,7 +290,7 @@ def test_result_list_set_empty_value_display_on_admin_site(self):\n         table_output = template.render(context)\n         link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n         row_html = build_tbody_html(\n-            new_child, link, '<td class=\"field-parent nowrap\">???</td>'\n+            new_child, link, \"name\", '<td class=\"field-parent nowrap\">???</td>'\n         )\n         self.assertNotEqual(\n             table_output.find(row_html),\n@@ -299,6 +317,7 @@ def test_result_list_set_empty_value_display_in_model_admin(self):\n         row_html = build_tbody_html(\n             new_child,\n             link,\n+            \"name\",\n             '<td class=\"field-age_display\">&amp;dagger;</td>'\n             '<td class=\"field-age\">-empty-</td>',\n         )\n@@ -327,7 +346,10 @@ def test_result_list_html(self):\n         table_output = template.render(context)\n         link = reverse(\"admin:admin_changelist_child_change\", args=(new_child.id,))\n         row_html = build_tbody_html(\n-            new_child, link, '<td class=\"field-parent nowrap\">%s</td>' % new_parent\n+            new_child,\n+            link,\n+            \"name\",\n+            '<td class=\"field-parent nowrap\">%s</td>' % new_parent,\n         )\n         self.assertNotEqual(\n             table_output.find(row_html),\ndiff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex 582ed23b4d65..393770bd2d09 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -159,9 +159,12 @@ def test_empty_value_display_for_field(self):\n             models.TimeField(),\n         ]\n         for model_field in tests:\n-            with self.subTest(model_field=model_field):\n-                display_value = display_for_field(None, model_field, self.empty_value)\n-                self.assertEqual(display_value, self.empty_value)\n+            for value in model_field.empty_values:\n+                with self.subTest(model_field=model_field, empty_value=value):\n+                    display_value = display_for_field(\n+                        value, model_field, self.empty_value\n+                    )\n+                    self.assertEqual(display_value, self.empty_value)\n \n     def test_empty_value_display_choices(self):\n         model_field = models.CharField(choices=((None, \"test_none\"),))\ndiff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex d497599435f2..50c26095ff21 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -641,7 +641,7 @@ def test_readonly_fields(self):\n         response = self.client.get(reverse(\"admin:admin_widgets_album_add\"))\n         self.assertContains(\n             response,\n-            '<div class=\"readonly\"></div>',\n+            '<div class=\"readonly\">-</div>',\n             html=True,\n         )\n \n", "problem_statement": "Django admin empty_value/empty_value_display doesn't check for empty strings\nDescription\n\t \nAccording to the \u200bDjango documentation, empty_value_display should \"display value for record\u2019s fields that are empty (None, empty string, etc.)\" However, currently this value is only returned when the field value is None and does not check for empty strings. This can be seen here - \u200bhttps://github.com/django/django/blob/5a52d932ef4da8228d82673314341c2c86602248/django/contrib/admin/utils.py#L420\nThus, if you have a CharField with a value of '' (empty string), the empty_value_display value will not appear, contrary to the documentation.\nHow to reproduce:\nCreate a model with a CharField(blank=True, null=True)\nCreate a model_admin and add that field to the list_display list\nCreate two instances of the model, one with that field set to None and another with it set to '' (empty string)\nOpen the admin panel and find those models, you will see that the instance with None shows - but the one with the empty string shows nothing.\n", "hints_text": [["Empty strings with no empty_value", 1500303241.0], ["I'm not immediately convinced that the behavior should be changed instead of correcting the documentation to reflect the current behavior. Has the behavior changed since the documentation was introduced in 0207bdd2d4157c542c981264c86706b78ca246e9 or was the original documentation inaccurate?", 1500325301.0], ["The functionality hasn't changed since the documentation was updated, so it seems as though the original documentation was inaccurate. While I do have a \u200bPR in for the fix (WIP), I agree that it may make more sense to simply correct the documentation. On the other hand, I do feel that this functionality would be useful as an additional overridable property for the ModelAdmin. Perhaps as an optional empty_string_display property?", 1500371381.0], ["I've grown wearisome of all the ModelAdmin hooks and complexity that they add. That's the only grounds on which I'd object to an additional property. If you have a compelling use case, I guess it's okay. I guess you're finding empty_value_display useful?", 1500387642.0], ["I would definitely find it useful if it worked with empty strings as well as None. Currently we have a field in our ModelAdmin that is a CharField with blank=True and null=False and that field is also specified in the list_display_links. Thus, when that field value is an empty string we are unable to click it (you can see this in the image attached to this ticket). Seeing as the blank=True, null=False method is the recommended method for supporting nullable CharFields I imagine that I'm not the only person whose seen this problem. I am open to either allowing empty_value_display to acknowledge empty strings or to creating a new optional attribute for empty strings.", 1500480068.0], ["I don't know if adding a separate property will be simpler than modifying the existing empty_value_display. I guess there could be use cases for a separate value for each case. You could write to the DevelopersMailingList for further feedback.", 1500557312.0], ["Hi, Nazarov Georgiy, you can't check \"Ready for checkin\" yourself, please see \u200btriaging-tickets", 1511763077.0], ["I haven't yet seen a reason not to re-use empty_value_display here (rather than add a new admin option) but we need to consider when that is applied: There are some cases where I really do want an empty string displayed (though not in a linked column). Maybe only use it only when it's an auto-linked field/column? Or maybe only use this behavior in display_for_field()? (So if you use a custom function/method, you can still have full control.) \u2014 \u200bCollin Anderson on Django Dev", 1518056362.0], ["Confirming that this is definitely an issue with Django 1.11, and the docs for 1.11 still say this works for empty strings, which it does not: \u200bhttps://docs.djangoproject.com/en/1.11/ref/contrib/admin/#django.contrib.admin.ModelAdmin.empty_value_display. These docs should be updated to avoid confusion in the future.", 1624977885.0], ["Are there any updates on this? I just stumbled on this issue when trying to use a \"nullable\" char field (blank=True, null=False as the docs suggest) in a changelist filter. The filter option for the empty string is displayed as a literal empty string, which results in the surrounding link element collapsing to height 0 and being virtually unusable since you can't click it. The link itself, once accessed via inspector, works fine. Docs are also unchanged, so what is the verdict on this issue?", 1649852440.0], ["Given the db.models.Field has \u200ban API that defines what empty values should be I think that admin logic should be changed to rely on it? diff --git a/django/contrib/admin/templatetags/admin_list.py b/django/contrib/admin/templatetags/admin_list.py index 5865843dce..a570026b1e 100644 --- a/django/contrib/admin/templatetags/admin_list.py +++ b/django/contrib/admin/templatetags/admin_list.py @@ -227,7 +227,7 @@ def link_in_col(is_first, field_name, cl): else: if isinstance(f.remote_field, models.ManyToOneRel): field_val = getattr(result, f.name) - if field_val is None: + if field_val in f.empty_values: result_repr = empty_value_display else: result_repr = field_va That would at least make the notion of empty coherent between models and the admin. It kind of blurs the line it terms of what change list filtering by empty value mean when there's multiple candidates though (e.g. CharField(blank=True, null=True)). Kind of wish we had an __empty lookup for this purpose that would be an alias for all allowed empty values by the field definition: class EmptyModel(models.Model): text = TextField(blank=True, null=False) nullable_text = TextField(blank=True, null=True) integer = IntegerField(blank=True, null=True) array = ArrayField(TextField(), null=True) json = JSONField() EmptyModel.objects.filter( text__empty=True, # Q(text=\"\") nullable_text__empty=True, # Q(nullable_text=\"\") | Q(nullable_text=None) integer__empty=True, # Q(integer=None) array__empty=True, # Q(array=[]) | Q(array=None) json__empty=True, # Q(json=[]) | Q(json={}) | Q(json=None) ) If this existed the admin filter could for empty value could basically be __empty=True \u200binstead of __isnull=True. I don't think we should change the list display behaviour without fixing the filter one as that would cause a large discrepancy and given the filter one is a bit tricky I'd suggest starting by adjusting the documentation.", 1649857839.0], ["After watching how to perform the \"vulture method\" in (1) I found this ticket. According to \u201cClaiming\u201d tickets' I reassign this ticket to myself, because \"... If a ticket has been assigned for weeks or months without any activity, it\u2019s probably safe to reassign it to yourself.\" I hope that's ok. (1) \u200bhttps://fosstodon.org/@djangonaut@indieweb.social/111697455678403023", 1704385109.0], ["Yes that's completely fine - enjoy!", 1704417696.0], ["New PR \u200bhttps://github.com/django/django/pull/17699 I had to create a fresh PR: \u200bhttps://github.com/django/django/pull/17702", 1704430717.0]], "created_at": "2024-01-06T06:58:31Z"}
{"repo": "django/django", "pull_number": 17701, "instance_id": "django__django-17701", "issue_numbers": ["35088"], "base_commit": "5c043286e2fde48a6230cbd2d91d5bdd3c49a418", "patch": "diff --git a/django/contrib/gis/db/backends/mysql/operations.py b/django/contrib/gis/db/backends/mysql/operations.py\nindex 886db605cd50..1004cfb56484 100644\n--- a/django/contrib/gis/db/backends/mysql/operations.py\n+++ b/django/contrib/gis/db/backends/mysql/operations.py\n@@ -31,6 +31,11 @@ def select(self):\n     def from_text(self):\n         return self.geom_func_prefix + \"GeomFromText\"\n \n+    @cached_property\n+    def collect(self):\n+        if self.connection.features.supports_collect_aggr:\n+            return self.geom_func_prefix + \"Collect\"\n+\n     @cached_property\n     def gis_operators(self):\n         operators = {\n@@ -54,13 +59,18 @@ def gis_operators(self):\n             operators[\"relate\"] = SpatialOperator(func=\"ST_Relate\")\n         return operators\n \n-    disallowed_aggregates = (\n-        models.Collect,\n-        models.Extent,\n-        models.Extent3D,\n-        models.MakeLine,\n-        models.Union,\n-    )\n+    @cached_property\n+    def disallowed_aggregates(self):\n+        disallowed_aggregates = [\n+            models.Extent,\n+            models.Extent3D,\n+            models.MakeLine,\n+            models.Union,\n+        ]\n+        is_mariadb = self.connection.mysql_is_mariadb\n+        if is_mariadb or self.connection.mysql_version < (8, 0, 24):\n+            disallowed_aggregates.insert(0, models.Collect)\n+        return tuple(disallowed_aggregates)\n \n     function_names = {\n         \"FromWKB\": \"ST_GeomFromWKB\",\n@@ -128,3 +138,6 @@ def converter(value, expression, connection):\n                 return geom\n \n         return converter\n+\n+    def spatial_aggregate_name(self, agg_name):\n+        return getattr(self, agg_name.lower())\ndiff --git a/docs/ref/contrib/gis/db-api.txt b/docs/ref/contrib/gis/db-api.txt\nindex f2dd1c7bf433..bce6f2efcca4 100644\n--- a/docs/ref/contrib/gis/db-api.txt\n+++ b/docs/ref/contrib/gis/db-api.txt\n@@ -431,20 +431,20 @@ Aggregate Functions\n -------------------\n \n The following table provides a summary of what GIS-specific aggregate functions\n-are available on each spatial backend. Please note that MySQL does not\n+are available on each spatial backend. Please note that MariaDB does not\n support any of these aggregates, and is thus excluded from the table.\n \n .. currentmodule:: django.contrib.gis.db.models\n \n-=======================  =======  ======  ==========\n-Aggregate                PostGIS  Oracle  SpatiaLite\n-=======================  =======  ======  ==========\n-:class:`Collect`         X                X\n-:class:`Extent`          X        X       X\n+=======================  =======  ======  ============  ==========\n+Aggregate                PostGIS  Oracle  MySQL         SpatiaLite\n+=======================  =======  ======  ============  ==========\n+:class:`Collect`         X                X (\u2265 8.0.24)  X\n+:class:`Extent`          X        X                     X\n :class:`Extent3D`        X\n-:class:`MakeLine`        X                X\n-:class:`Union`           X        X       X\n-=======================  =======  ======  ==========\n+:class:`MakeLine`        X                              X\n+:class:`Union`           X        X                     X\n+=======================  =======  ======  ============  ==========\n \n .. rubric:: Footnotes\n .. [#fnwkt] *See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For SQL <https://portal.ogc.org/files/?artifact_id=829>`_, Document 99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual Representation of Geometry).\ndiff --git a/docs/ref/contrib/gis/geoquerysets.txt b/docs/ref/contrib/gis/geoquerysets.txt\nindex 99b8638a65b3..c0dd8d71c822 100644\n--- a/docs/ref/contrib/gis/geoquerysets.txt\n+++ b/docs/ref/contrib/gis/geoquerysets.txt\n@@ -870,7 +870,7 @@ Example:\n \n .. class:: Collect(geo_field, filter=None)\n \n-*Availability*: `PostGIS <https://postgis.net/docs/ST_Collect.html>`__,\n+*Availability*: `PostGIS <https://postgis.net/docs/ST_Collect.html>`__, MySQL,\n SpatiaLite\n \n Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the geometry\n@@ -883,6 +883,10 @@ caring about dissolving boundaries.\n \n     Support for using the ``filter`` argument was added.\n \n+.. versionchanged:: 5.1\n+\n+    MySQL 8.0.24+ support was added.\n+\n ``Extent``\n ~~~~~~~~~~\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 03ca07f298d2..e84a27a0ec42 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -56,6 +56,9 @@ Minor features\n * :class:`~django.contrib.gis.db.models.functions.BoundingCircle` is now\n   supported on SpatiaLite 5.1+.\n \n+* :class:`~django.contrib.gis.db.models.Collect` is now supported on MySQL\n+  8.0.24+.\n+\n :mod:`django.contrib.messages`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "", "problem_statement": "Add support for ST_Collect on MySQL 8.0.24+.\nDescription\n\t \nSupport for ST_Collect was added to MySQL 8.0.24.\nSee \u200bhttps://dev.mysql.com/doc/refman/8.0/en/spatial-aggregate-functions.html#function_st-collect for details.\n", "hints_text": [["\u200bPR", 1704453456.0]], "created_at": "2024-01-05T17:17:07Z"}
{"repo": "django/django", "pull_number": 17700, "instance_id": "django__django-17700", "issue_numbers": ["35087"], "base_commit": "cc56c22a24ef717cc3111e92ca146136fa518d55", "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex af69f4cb3b56..e3703f586683 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -467,7 +467,8 @@ def lookup_allowed(self, lookup, value, request=None):\n \n         relation_parts = []\n         prev_field = None\n-        for part in lookup.split(LOOKUP_SEP):\n+        parts = lookup.split(LOOKUP_SEP)\n+        for part in parts:\n             try:\n                 field = model._meta.get_field(part)\n             except FieldDoesNotExist:\n@@ -491,7 +492,7 @@ def lookup_allowed(self, lookup, value, request=None):\n             prev_field = field\n             model = field.path_infos[-1].to_opts.model\n \n-        if not relation_parts:\n+        if not relation_parts or len(parts) == 1:\n             # Either a local field filter, or no fields at all.\n             return True\n         valid_lookups = {self.date_hierarchy}\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex 4ba818dcb37a..facfed26f509 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -9,4 +9,6 @@ Django 5.0.2 fixes several bugs in 5.0.1.\n Bugfixes\n ========\n \n-* ...\n+* Reallowed, following a regression in Django 5.0.1, filtering against local\n+  foreign keys not included in :attr:`.ModelAdmin.list_filter`\n+  (:ticket:`35087`).\n", "test_patch": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex e0c4d6e7271f..fad2dfaa1cde 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -162,6 +162,20 @@ class EmployeeProfileAdmin(ModelAdmin):\n             True,\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_for_local_fk_fields(self):\n+        class Country(models.Model):\n+            pass\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class PlaceAdmin(ModelAdmin):\n+            pass\n+\n+        ma = PlaceAdmin(Place, self.site)\n+        self.assertIs(ma.lookup_allowed(\"country\", \"1\", request), True)\n+\n     @isolate_apps(\"modeladmin\")\n     def test_lookup_allowed_non_autofield_primary_key(self):\n         class Country(models.Model):\n", "problem_statement": "DisallowedModelAdminLookup raised when filtering on a ForeignKey not listed in list_filters\nDescription\n\t\t\n(last modified by Maxime Lorant)\t\t\nSince Django 5.0.1, the exception DisallowedModelAdminLookup is raised when I'm trying to filter a list in the Django admin with a foreign key attribute not listed in list_filters. It looks like a regression from #35020, but I'm not exactly sure at 100 %. The exception is not raised when I'm filtering against a foreign key attribute listed in list_filters neither for a standard CharField not listed. Using the following simple example, on a fresh new Django project:\n# models.py\nclass Client(models.Model):\n\tname = models.CharField(\"name\", max_length=100)\nclass Invoice(models.Model):\n\tclient = models.ForeignKey(Client, models.CASCADE, null=False)\n\tnumber = models.CharField(\"number\", max_length=100)\n# admin.py\n@admin.register(models.Invoice)\nclass InvoiceAdmin(admin.ModelAdmin):\n\tpass # note that no list_filters is defined \nThe URL /admin/core/invoice/?client=1 in local:\nreturns a 200, with proper results in Django 4.2.9\nreturns a 200, with proper results in Django 5.0.0\nreturns a 500, from the exception below in Django 5.0.1\nThe exception raised in Django 5.0.1:\n File \"<VENV>/lib/python3.12/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^\n [...]\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"<VENV>/lib/python3.12/site-packages/django/contrib/admin/options.py\", line 1981, in changelist_view\n\tcl = self.get_changelist_instance(request)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"<VENV>/lib/python3.12/site-packages/django/contrib/admin/options.py\", line 862, in get_changelist_instance\n\treturn ChangeList(\n\t\t ^^^^^^^^^^^\n File \"<VENV>/lib/python3.12/site-packages/django/contrib/admin/views/main.py\", line 144, in __init__\n\tself.queryset = self.get_queryset(request)\n\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"<VENV>/lib/python3.12/site-packages/django/contrib/admin/views/main.py\", line 539, in get_queryset\n\t) = self.get_filters(request)\n\t\t^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"<VENV>/lib/python3.12/site-packages/django/contrib/admin/views/main.py\", line 193, in get_filters\n\traise DisallowedModelAdminLookup(f\"Filtering by {key} not allowed\")\ndjango.contrib.admin.exceptions.DisallowedModelAdminLookup: Filtering by client not allowed\nThe URL /admin/core/invoice/?number=ABC works in the three versions with the same behaviour each time (make an exact match on the charfield)\n", "hints_text": [["Thanks for the report! Regression in f80669d2f5a5f1db9e9b73ca893fefba34f955e7.", 1704435805.0], ["\u200bhttps://github.com/django/django/pull/17700 \ud83d\udc4d", 1704438875.0]], "created_at": "2024-01-05T13:13:08Z"}
{"repo": "django/django", "pull_number": 17691, "instance_id": "django__django-17691", "issue_numbers": ["35086"], "base_commit": "9b056aa5afbd1f037189f5b9250ef68e87a93e19", "patch": "diff --git a/django/contrib/gis/db/backends/spatialite/operations.py b/django/contrib/gis/db/backends/spatialite/operations.py\nindex 0b8b26ab6f8b..8a3d84b5de62 100644\n--- a/django/contrib/gis/db/backends/spatialite/operations.py\n+++ b/django/contrib/gis/db/backends/spatialite/operations.py\n@@ -66,6 +66,7 @@ class SpatiaLiteOperations(BaseSpatialOperations, DatabaseOperations):\n \n     function_names = {\n         \"AsWKB\": \"St_AsBinary\",\n+        \"BoundingCircle\": \"GEOSMinimumBoundingCircle\",\n         \"ForcePolygonCW\": \"ST_ForceLHR\",\n         \"FromWKB\": \"ST_GeomFromWKB\",\n         \"FromWKT\": \"ST_GeomFromText\",\n@@ -80,9 +81,11 @@ class SpatiaLiteOperations(BaseSpatialOperations, DatabaseOperations):\n \n     @cached_property\n     def unsupported_functions(self):\n-        unsupported = {\"BoundingCircle\", \"GeometryDistance\", \"IsEmpty\", \"MemSize\"}\n+        unsupported = {\"GeometryDistance\", \"IsEmpty\", \"MemSize\"}\n         if not self.geom_lib_version():\n             unsupported |= {\"Azimuth\", \"GeoHash\", \"MakeValid\"}\n+        if self.spatial_version < (5, 1):\n+            unsupported |= {\"BoundingCircle\"}\n         return unsupported\n \n     @cached_property\ndiff --git a/django/contrib/gis/db/models/functions.py b/django/contrib/gis/db/models/functions.py\nindex bd02e3717d85..419b64c5e8e6 100644\n--- a/django/contrib/gis/db/models/functions.py\n+++ b/django/contrib/gis/db/models/functions.py\n@@ -274,6 +274,13 @@ def as_oracle(self, compiler, connection, **extra_context):\n             compiler, connection, **extra_context\n         )\n \n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        clone = self.copy()\n+        clone.set_source_expressions([self.get_source_expressions()[0]])\n+        return super(BoundingCircle, clone).as_sqlite(\n+            compiler, connection, **extra_context\n+        )\n+\n \n class Centroid(OracleToleranceMixin, GeomOutputGeoFunc):\n     arity = 1\ndiff --git a/docs/ref/contrib/gis/db-api.txt b/docs/ref/contrib/gis/db-api.txt\nindex df1d3847e60c..f2dd1c7bf433 100644\n--- a/docs/ref/contrib/gis/db-api.txt\n+++ b/docs/ref/contrib/gis/db-api.txt\n@@ -397,7 +397,7 @@ Function                              PostGIS  Oracle         MariaDB      MySQL\n :class:`AsWKB`                        X        X              X            X           X\n :class:`AsWKT`                        X        X              X            X           X\n :class:`Azimuth`                      X                                                X (LWGEOM/RTTOPO)\n-:class:`BoundingCircle`               X        X\n+:class:`BoundingCircle`               X        X                                       X (\u2265 5.1)\n :class:`Centroid`                     X        X              X            X           X\n :class:`ClosestPoint`                 X                                                X\n :class:`Difference`                   X        X              X            X           X\ndiff --git a/docs/ref/contrib/gis/functions.txt b/docs/ref/contrib/gis/functions.txt\nindex 36ef651cfe72..f55d314b3f85 100644\n--- a/docs/ref/contrib/gis/functions.txt\n+++ b/docs/ref/contrib/gis/functions.txt\n@@ -230,13 +230,18 @@ south = ``\u03c0``; west = ``3\u03c0/2``.\n \n *Availability*: `PostGIS <https://postgis.net/docs/ST_MinimumBoundingCircle.html>`__,\n `Oracle <https://docs.oracle.com/en/database/oracle/oracle-database/21/spatl/\n-SDO_GEOM-reference.html#GUID-82A61626-BB64-4793-B53D-A0DBEC91831A>`_\n+SDO_GEOM-reference.html#GUID-82A61626-BB64-4793-B53D-A0DBEC91831A>`_,\n+SpatiaLite 5.1+\n \n Accepts a single geographic field or expression and returns the smallest circle\n polygon that can fully contain the geometry.\n \n The ``num_seg`` parameter is used only on PostGIS.\n \n+.. versionchanged:: 5.1\n+\n+    SpatiaLite 5.1+ support was added.\n+\n ``Centroid``\n ============\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 544b1f5d0855..03ca07f298d2 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -53,7 +53,8 @@ Minor features\n :mod:`django.contrib.gis`\n ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* :class:`~django.contrib.gis.db.models.functions.BoundingCircle` is now\n+  supported on SpatiaLite 5.1+.\n \n :mod:`django.contrib.messages`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n", "test_patch": "diff --git a/tests/gis_tests/geoapp/test_functions.py b/tests/gis_tests/geoapp/test_functions.py\nindex 047c7f903602..9edadc48c21e 100644\n--- a/tests/gis_tests/geoapp/test_functions.py\n+++ b/tests/gis_tests/geoapp/test_functions.py\n@@ -258,7 +258,12 @@ def circle_num_points(num_seg):\n             # num_seg is the number of segments per quarter circle.\n             return (4 * num_seg) + 1\n \n-        expected_areas = (169, 136) if connection.ops.postgis else (171, 126)\n+        if connection.ops.postgis:\n+            expected_areas = (169, 136)\n+        elif connection.ops.spatialite:\n+            expected_areas = (168, 135)\n+        else:  # Oracle.\n+            expected_areas = (171, 126)\n         qs = Country.objects.annotate(\n             circle=functions.BoundingCircle(\"mpoly\")\n         ).order_by(\"name\")\n", "problem_statement": "Add BoundedCircle support with SpatiaLite 5.1+\nDescription\n\t \nSpatiaLite added support for BoundedCircle (GEOSMinimumBoundingCircle) \u200bhttps://groups.google.com/g/spatialite-users/c/hAJ2SgitN4M\nGeoDjango already supports this on Oracle / PostGIS backends, we should allow support on SpatiaLite too.\n", "hints_text": [], "created_at": "2024-01-04T20:51:24Z"}
{"repo": "django/django", "pull_number": 17677, "instance_id": "django__django-17677", "issue_numbers": ["35084"], "base_commit": "0c5456ef37a22e2ce0d31e7ebf99d9fa04a5b9c4", "patch": "diff --git a/docs/intro/reusable-apps.txt b/docs/intro/reusable-apps.txt\nindex 19d9063edd2c..f40daf4dfbdf 100644\n--- a/docs/intro/reusable-apps.txt\n+++ b/docs/intro/reusable-apps.txt\n@@ -121,16 +121,17 @@ Python *packaging* refers to preparing your app in a specific format that can\n be easily installed and used. Django itself is packaged very much like\n this. For a small app like polls, this process isn't too difficult.\n \n-#. First, create a parent directory for ``polls``, outside of your Django\n+#. First, create a parent directory for the package, outside of your Django\n    project. Call this directory ``django-polls``.\n \n    .. admonition::  Choosing a name for your app\n \n-       When choosing a name for your package, check resources like PyPI to avoid\n-       naming conflicts with existing packages. It's often useful to prepend\n-       ``django-`` to your module name when creating a package to distribute.\n-       This helps others looking for Django apps identify your app as Django\n-       specific.\n+       When choosing a name for your package, check PyPI to avoid naming\n+       conflicts with existing packages. We recommend using a ``django-``\n+       prefix for package names, to identify your package as specific to\n+       Django, and a corresponding ``django_`` prefix for your module name. For\n+       example, the ``django-ratelimit`` package contains the\n+       ``django_ratelimit`` module.\n \n        Application labels (that is, the final part of the dotted path to\n        application packages) *must* be unique in :setting:`INSTALLED_APPS`.\n@@ -138,19 +139,35 @@ this. For a small app like polls, this process isn't too difficult.\n        </ref/contrib/index>`, for example ``auth``, ``admin``, or\n        ``messages``.\n \n-#. Move the ``polls`` directory into the ``django-polls`` directory.\n+#. Move the ``polls`` directory into ``django-polls`` directory, and rename it\n+   to ``django_polls``.\n+\n+#. Edit ``django_polls/apps.py`` so that :attr:`~.AppConfig.name` refers to the\n+   new module name and add :attr:`~.AppConfig.label` to give a short name for\n+   the app:\n+\n+   .. code-block:: python\n+       :caption: ``django-polls/django_polls/apps.py``\n+\n+       from django.apps import AppConfig\n+\n+\n+       class PollsConfig(AppConfig):\n+           default_auto_field = \"django.db.models.BigAutoField\"\n+           name = \"django_polls\"\n+           label = \"polls\"\n \n #. Create a file ``django-polls/README.rst`` with the following contents:\n \n    .. code-block:: rst\n        :caption: ``django-polls/README.rst``\n \n-       =====\n-       Polls\n-       =====\n+       ============\n+       django-polls\n+       ============\n \n-       Polls is a Django app to conduct web-based polls. For each question,\n-       visitors can choose between a fixed number of answers.\n+       django-polls is a Django app to conduct web-based polls. For each\n+       question, visitors can choose between a fixed number of answers.\n \n        Detailed documentation is in the \"docs\" directory.\n \n@@ -161,19 +178,18 @@ this. For a small app like polls, this process isn't too difficult.\n \n            INSTALLED_APPS = [\n                ...,\n-               \"polls\",\n+               \"django_polls\",\n            ]\n \n        2. Include the polls URLconf in your project urls.py like this::\n \n-           path(\"polls/\", include(\"polls.urls\")),\n+           path(\"polls/\", include(\"django_polls.urls\")),\n \n-       3. Run ``python manage.py migrate`` to create the polls models.\n+       3. Run ``python manage.py migrate`` to create the models.\n \n-       4. Start the development server and visit http://127.0.0.1:8000/admin/\n-          to create a poll (you'll need the Admin app enabled).\n+       4. Start the development server and visit the admin to create a poll.\n \n-       5. Visit http://127.0.0.1:8000/polls/ to participate in the poll.\n+       5. Visit the ``/polls/`` URL to participate in the poll.\n \n #. Create a ``django-polls/LICENSE`` file. Choosing a license is beyond the\n    scope of this tutorial, but suffice it to say that code released publicly\n@@ -251,8 +267,8 @@ this. For a small app like polls, this process isn't too difficult.\n \n        include LICENSE\n        include README.rst\n-       recursive-include polls/static *\n-       recursive-include polls/templates *\n+       recursive-include django_polls/static *\n+       recursive-include django_polls/templates *\n \n #. It's optional, but recommended, to include detailed documentation with your\n    app. Create an empty directory ``django-polls/docs`` for future\n@@ -266,8 +282,8 @@ this. For a small app like polls, this process isn't too difficult.\n    you add some files to it. Many Django apps also provide their documentation\n    online through sites like `readthedocs.org <https://readthedocs.org>`_.\n \n-#. Try building your package with ``python setup.py sdist`` (run from inside\n-   ``django-polls``). This creates a directory called ``dist`` and builds your\n+#. Try building your package by running ``python setup.py sdist`` inside\n+   ``django-polls``. This creates a directory called ``dist`` and builds your\n    new package, ``django-polls-0.1.tar.gz``.\n \n For more information on packaging, see Python's `Tutorial on Packaging and\n@@ -299,14 +315,21 @@ working. We'll now fix this by installing our new ``django-polls`` package.\n \n       python -m pip install --user django-polls/dist/django-polls-0.1.tar.gz\n \n-#. With luck, your Django project should now work correctly again. Run the\n-   server again to confirm this.\n+#. Update ``mysite/settings.py`` to point to the new module name::\n \n-#. To uninstall the package, use pip:\n+    INSTALLED_APPS = [\n+        \"django_polls.apps.PollsConfig\",\n+        ...,\n+    ]\n \n-   .. code-block:: shell\n+#. Update ``mysite/urls.py`` to point to the new module name::\n+\n+    urlpatterns = [\n+        path(\"polls/\", include(\"django_polls.urls\")),\n+        ...,\n+    ]\n \n-      python -m pip uninstall django-polls\n+#. Run the development server to confirm the project continues to work.\n \n Publishing your app\n ===================\n@@ -326,7 +349,7 @@ the world! If this wasn't just an example, you could now:\n Installing Python packages with a virtual environment\n =====================================================\n \n-Earlier, we installed the polls app as a user library. This has some\n+Earlier, we installed ``django-polls`` as a user library. This has some\n disadvantages:\n \n * Modifying the user libraries can affect other Python software on your system.\n", "test_patch": "", "problem_statement": "Recommend reusable app module names use a `django_` prefix\nDescription\n\t \nFollowing \u200bdiscussion on the forum, update the \u201cHow to write reusable apps\u201d tutorial to recommend packaged modules have a django_ prefix.\n", "hints_text": [["Sounds reasonable. TBH, I don't think that such a small cleanup requires a ticket.", 1704295250.0]], "created_at": "2024-01-03T21:19:52Z"}
{"repo": "django/django", "pull_number": 17675, "instance_id": "django__django-17675", "issue_numbers": ["35059"], "base_commit": "b3dc80682e678b20c89fb2a430c0bc77960a29ac", "patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 7b0086fb765a..3af080599ab1 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -186,11 +186,18 @@ async def handle(self, scope, receive, send):\n         if request is None:\n             body_file.close()\n             await self.send_response(error_response, send)\n+            await sync_to_async(error_response.close)()\n             return\n \n         async def process_request(request, send):\n             response = await self.run_get_response(request)\n-            await self.send_response(response, send)\n+            try:\n+                await self.send_response(response, send)\n+            except asyncio.CancelledError:\n+                # Client disconnected during send_response (ignore exception).\n+                pass\n+\n+            return response\n \n         # Try to catch a disconnect while getting response.\n         tasks = [\n@@ -221,6 +228,14 @@ async def process_request(request, send):\n                 except asyncio.CancelledError:\n                     # Task re-raised the CancelledError as expected.\n                     pass\n+\n+        try:\n+            response = tasks[1].result()\n+        except asyncio.CancelledError:\n+            await signals.request_finished.asend(sender=self.__class__)\n+        else:\n+            await sync_to_async(response.close)()\n+\n         body_file.close()\n \n     async def listen_for_disconnect(self, receive):\n@@ -346,7 +361,6 @@ async def send_response(self, response, send):\n                         \"more_body\": not last,\n                     }\n                 )\n-        await sync_to_async(response.close, thread_sensitive=True)()\n \n     @classmethod\n     def chunk_bytes(cls, data):\ndiff --git a/docs/releases/5.0.2.txt b/docs/releases/5.0.2.txt\nindex 83f1af7b4f00..64ffcb88bdae 100644\n--- a/docs/releases/5.0.2.txt\n+++ b/docs/releases/5.0.2.txt\n@@ -28,3 +28,7 @@ Bugfixes\n * Fixed a regression in Django 5.0 that caused a crash of the ``dumpdata``\n   management command when a base queryset used ``prefetch_related()``\n   (:ticket:`35159`).\n+\n+* Fixed a regression in Django 5.0 that caused the ``request_finished`` signal to\n+  sometimes not be fired when running Django through an ASGI server, resulting\n+  in potential resource leaks (:ticket:`35059`).\n", "test_patch": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 3aeade4c05e3..963f45f798d4 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -1,12 +1,15 @@\n import asyncio\n import sys\n import threading\n+import time\n from pathlib import Path\n \n+from asgiref.sync import sync_to_async\n from asgiref.testing import ApplicationCommunicator\n \n from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n from django.core.asgi import get_asgi_application\n+from django.core.exceptions import RequestDataTooBig\n from django.core.handlers.asgi import ASGIHandler, ASGIRequest\n from django.core.signals import request_finished, request_started\n from django.db import close_old_connections\n@@ -20,12 +23,24 @@\n )\n from django.urls import path\n from django.utils.http import http_date\n+from django.views.decorators.csrf import csrf_exempt\n \n from .urls import sync_waiter, test_filename\n \n TEST_STATIC_ROOT = Path(__file__).parent / \"project\" / \"static\"\n \n \n+class SignalHandler:\n+    \"\"\"Helper class to track threads and kwargs when signals are dispatched.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.calls = []\n+\n+    def __call__(self, signal, **kwargs):\n+        self.calls.append({\"thread\": threading.current_thread(), \"kwargs\": kwargs})\n+\n+\n @override_settings(ROOT_URLCONF=\"asgi.urls\")\n class ASGITest(SimpleTestCase):\n     async_request_factory = AsyncRequestFactory()\n@@ -194,6 +209,96 @@ async def test_post_body(self):\n         self.assertEqual(response_body[\"type\"], \"http.response.body\")\n         self.assertEqual(response_body[\"body\"], b\"Echo!\")\n \n+    async def test_create_request_error(self):\n+        # Track request_finished signal.\n+        signal_handler = SignalHandler()\n+        request_finished.connect(signal_handler)\n+        self.addCleanup(request_finished.disconnect, signal_handler)\n+\n+        # Request class that always fails creation with RequestDataTooBig.\n+        class TestASGIRequest(ASGIRequest):\n+\n+            def __init__(self, scope, body_file):\n+                super().__init__(scope, body_file)\n+                raise RequestDataTooBig()\n+\n+        # Handler to use the custom request class.\n+        class TestASGIHandler(ASGIHandler):\n+            request_class = TestASGIRequest\n+\n+        application = TestASGIHandler()\n+        scope = self.async_request_factory._base_scope(path=\"/not-important/\")\n+        communicator = ApplicationCommunicator(application, scope)\n+\n+        # Initiate request.\n+        await communicator.send_input({\"type\": \"http.request\"})\n+        # Give response.close() time to finish.\n+        await communicator.wait()\n+\n+        self.assertEqual(len(signal_handler.calls), 1)\n+        self.assertNotEqual(\n+            signal_handler.calls[0][\"thread\"], threading.current_thread()\n+        )\n+\n+    async def test_cancel_post_request_with_sync_processing(self):\n+        \"\"\"\n+        The request.body object should be available and readable in view\n+        code, even if the ASGIHandler cancels processing part way through.\n+        \"\"\"\n+        loop = asyncio.get_event_loop()\n+        # Events to monitor the view processing from the parent test code.\n+        view_started_event = asyncio.Event()\n+        view_finished_event = asyncio.Event()\n+        # Record received request body or exceptions raised in the test view\n+        outcome = []\n+\n+        # This view will run in a new thread because it is wrapped in\n+        # sync_to_async. The view consumes the POST body data after a short\n+        # delay. The test will cancel the request using http.disconnect during\n+        # the delay, but because this is a sync view the code runs to\n+        # completion. There should be no exceptions raised inside the view\n+        # code.\n+        @csrf_exempt\n+        @sync_to_async\n+        def post_view(request):\n+            try:\n+                loop.call_soon_threadsafe(view_started_event.set)\n+                time.sleep(0.1)\n+                # Do something to read request.body after pause\n+                outcome.append({\"request_body\": request.body})\n+                return HttpResponse(\"ok\")\n+            except Exception as e:\n+                outcome.append({\"exception\": e})\n+            finally:\n+                loop.call_soon_threadsafe(view_finished_event.set)\n+\n+        # Request class to use the view.\n+        class TestASGIRequest(ASGIRequest):\n+            urlconf = (path(\"post/\", post_view),)\n+\n+        # Handler to use request class.\n+        class TestASGIHandler(ASGIHandler):\n+            request_class = TestASGIRequest\n+\n+        application = TestASGIHandler()\n+        scope = self.async_request_factory._base_scope(\n+            method=\"POST\",\n+            path=\"/post/\",\n+        )\n+        communicator = ApplicationCommunicator(application, scope)\n+\n+        await communicator.send_input({\"type\": \"http.request\", \"body\": b\"Body data!\"})\n+\n+        # Wait until the view code has started, then send http.disconnect.\n+        await view_started_event.wait()\n+        await communicator.send_input({\"type\": \"http.disconnect\"})\n+        # Wait until view code has finished.\n+        await view_finished_event.wait()\n+        with self.assertRaises(asyncio.TimeoutError):\n+            await communicator.receive_output()\n+\n+        self.assertEqual(outcome, [{\"request_body\": b\"Body data!\"}])\n+\n     async def test_untouched_request_body_gets_closed(self):\n         application = get_asgi_application()\n         scope = self.async_request_factory._base_scope(method=\"POST\", path=\"/post/\")\n@@ -310,17 +415,12 @@ async def test_non_unicode_query_string(self):\n         self.assertEqual(response_body[\"body\"], b\"\")\n \n     async def test_request_lifecycle_signals_dispatched_with_thread_sensitive(self):\n-        class SignalHandler:\n-            \"\"\"Track threads handler is dispatched on.\"\"\"\n-\n-            threads = []\n-\n-            def __call__(self, **kwargs):\n-                self.threads.append(threading.current_thread())\n-\n+        # Track request_started and request_finished signals.\n         signal_handler = SignalHandler()\n         request_started.connect(signal_handler)\n+        self.addCleanup(request_started.disconnect, signal_handler)\n         request_finished.connect(signal_handler)\n+        self.addCleanup(request_finished.disconnect, signal_handler)\n \n         # Perform a basic request.\n         application = get_asgi_application()\n@@ -337,10 +437,11 @@ def __call__(self, **kwargs):\n         await communicator.wait()\n \n         # AsyncToSync should have executed the signals in the same thread.\n-        request_started_thread, request_finished_thread = signal_handler.threads\n-        self.assertEqual(request_started_thread, request_finished_thread)\n-        request_started.disconnect(signal_handler)\n-        request_finished.disconnect(signal_handler)\n+        self.assertEqual(len(signal_handler.calls), 2)\n+        request_started_call, request_finished_call = signal_handler.calls\n+        self.assertEqual(\n+            request_started_call[\"thread\"], request_finished_call[\"thread\"]\n+        )\n \n     async def test_concurrent_async_uses_multiple_thread_pools(self):\n         sync_waiter.active_threads.clear()\n@@ -376,6 +477,10 @@ async def test_concurrent_async_uses_multiple_thread_pools(self):\n     async def test_asyncio_cancel_error(self):\n         # Flag to check if the view was cancelled.\n         view_did_cancel = False\n+        # Track request_finished signal.\n+        signal_handler = SignalHandler()\n+        request_finished.connect(signal_handler)\n+        self.addCleanup(request_finished.disconnect, signal_handler)\n \n         # A view that will listen for the cancelled error.\n         async def view(request):\n@@ -410,6 +515,13 @@ class TestASGIHandler(ASGIHandler):\n         # Give response.close() time to finish.\n         await communicator.wait()\n         self.assertIs(view_did_cancel, False)\n+        # Exactly one call to request_finished handler.\n+        self.assertEqual(len(signal_handler.calls), 1)\n+        handler_call = signal_handler.calls.pop()\n+        # It was NOT on the async thread.\n+        self.assertNotEqual(handler_call[\"thread\"], threading.current_thread())\n+        # The signal sender is the handler class.\n+        self.assertEqual(handler_call[\"kwargs\"], {\"sender\": TestASGIHandler})\n \n         # Request cycle with a disconnect before the view can respond.\n         application = TestASGIHandler()\n@@ -425,11 +537,22 @@ class TestASGIHandler(ASGIHandler):\n             await communicator.receive_output()\n         await communicator.wait()\n         self.assertIs(view_did_cancel, True)\n+        # Exactly one call to request_finished handler.\n+        self.assertEqual(len(signal_handler.calls), 1)\n+        handler_call = signal_handler.calls.pop()\n+        # It was NOT on the async thread.\n+        self.assertNotEqual(handler_call[\"thread\"], threading.current_thread())\n+        # The signal sender is the handler class.\n+        self.assertEqual(handler_call[\"kwargs\"], {\"sender\": TestASGIHandler})\n \n     async def test_asyncio_streaming_cancel_error(self):\n         # Similar to test_asyncio_cancel_error(), but during a streaming\n         # response.\n         view_did_cancel = False\n+        # Track request_finished signals.\n+        signal_handler = SignalHandler()\n+        request_finished.connect(signal_handler)\n+        self.addCleanup(request_finished.disconnect, signal_handler)\n \n         async def streaming_response():\n             nonlocal view_did_cancel\n@@ -464,6 +587,13 @@ class TestASGIHandler(ASGIHandler):\n         self.assertEqual(response_body[\"body\"], b\"Hello World!\")\n         await communicator.wait()\n         self.assertIs(view_did_cancel, False)\n+        # Exactly one call to request_finished handler.\n+        self.assertEqual(len(signal_handler.calls), 1)\n+        handler_call = signal_handler.calls.pop()\n+        # It was NOT on the async thread.\n+        self.assertNotEqual(handler_call[\"thread\"], threading.current_thread())\n+        # The signal sender is the handler class.\n+        self.assertEqual(handler_call[\"kwargs\"], {\"sender\": TestASGIHandler})\n \n         # Request cycle with a disconnect.\n         application = TestASGIHandler()\n@@ -482,6 +612,13 @@ class TestASGIHandler(ASGIHandler):\n             await communicator.receive_output()\n         await communicator.wait()\n         self.assertIs(view_did_cancel, True)\n+        # Exactly one call to request_finished handler.\n+        self.assertEqual(len(signal_handler.calls), 1)\n+        handler_call = signal_handler.calls.pop()\n+        # It was NOT on the async thread.\n+        self.assertNotEqual(handler_call[\"thread\"], threading.current_thread())\n+        # The signal sender is the handler class.\n+        self.assertEqual(handler_call[\"kwargs\"], {\"sender\": TestASGIHandler})\n \n     async def test_streaming(self):\n         scope = self.async_request_factory._base_scope(\n", "problem_statement": "ASGI server leaves stale DB connections\nDescription\n\t \nThis seems to be a regression from 4.2 to 5.0.\nWe are using Django ASGI server via uvicorn, with a mariadb database. When updating our app servers from Django 4.2.8 to 5.0, we experienced a spike in the number of database connections, eventually going over the limit set for the DB and causing 500 errors due to \ndjango.db.utils.OperationalError: (1040, 'Too many connections')\nI've created a minimal project to reproduce what I think is the phenomenon here using local docker container for the DB:\n\u200bhttps://github.com/jthorniley/django-asgi\nI've put complete reproduction steps in that github link, but I will summarise here:\nWhen running a Django 5.0 ASGI server, some connections are not closed when requests complete, leaving stale connections in the DB. This can be confirmed by running curl against a local server and then show processlist in the mysql CLI when the requests are complete.\nAs a result, if you send a moderate number of parallel requests to the server, it will go past the limit of DB connections (I think the out-of-the-box limit for the mariadb docker container is around 150, but it is configurable). Then new connections will fail with the Too many connections error. Obviously its theoretically possible to go over this limit anyway but it happens sooner due to server processes not cleaning up connections after requests complete.\nYou can downgrade to 4.2.8 and run the same reproduction project and see that there is no issue there. The DB connections are closed after every individual request and hence provided there aren't more parallel requests than allowed connections to the DB you are safe.\n", "hints_text": [["I also experienced this with Postgres. Downgraded to Django 4.2.8", 1703277280.0], ["I also could reproduce this bug using James's repo.", 1703513607.0], ["I don't see it as a regression. As for me it behaves exactly the same on Django 4.2. If you can \u200bbisect to determine the commit where the behavior changed, that would be useful. This may be a duplicate of #33297 or #33497.", 1703554488.0], ["git bisect found commit 7cd187a5ba58d7769039f487faeb9a5a2ff05540 however I think this is a red herring, not sure why it came to that. Reverting the changes from 64cea1e48f285ea2162c669208d95188b32bbc82 on top of 5.0 fix the problems, so I think that is actually the problematic commit. This commit moved the send_response function into a task which can be cancelled if and when http.disconnect is received. However the send_response function was also responsible for calling response.close() which is a sync function called asynchronously using sync_to_async. This introduced a race condition as if the http.disconnect is received during the call to the sync_to_async wrapped code then the response.close() can effectively be cancelled and the associated clean up (triggered by the request_finished signal from inside response.close() never gets called. If created a PR here for review, it seems to solve the issue for me: \u200bhttps://github.com/django/django/pull/17675", 1704277217.0], ["With the test cases, I think we can accept this as a bug in 64cea1e48f285ea2162c669208d95188b32bbc82. Thanks for the investigation James. The request_finished signal should be dispatched in the disconnect case. I left a few initial comments on the PR. Happy to take another look later on.", 1704331200.0], ["Assigning to James following the proposed PR.", 1704697308.0], ["Setting patch needs improvements following the latest batch of review comments made by Carlton.", 1704724100.0], ["Setting as patch needs improvement while I wait for the author to reply to my comments.", 1706000508.0], ["I have this same problem, it caused a massive spike in database connections. I had to revert back to Django 4.2 for now until this is fixed. I came here to report but found your all already on top of it, thank you! Can't wait until this is fixed in 5.0.", 1706352690.0], ["Replying to Josh Orr: I have this same problem, it caused a massive spike in database connections. I had to revert back to Django 4.2 for now until this is fixed. I came here to report but found your all already on top of it, thank you! Can't wait until this is fixed in 5.0. Hi Josh, Does that the proposed patch work for you? Testing would be a huge help.", 1706356834.0], ["#35148 was a duplicate.", 1706540599.0], ["This is pretty much ready for checkin pending two question and one optional test change. I will wait for feedback from either the author or Carlton to merge ASAP (release is planned for Feb 6th). Thanks everyone who helped so far, by either building the fix, reviewing, debugging and/or testing the patch!", 1706627101.0], ["In a43d75e: Refs #35059 -- Made asgi tests' SignalHandler helper class re-usable by other tests.", 1706701436.0], ["In 11393ab: Fixed #35059 -- Ensured that ASGIHandler always sends the request_finished signal. Prior to this work, when async tasks that process the request are cancelled due to receiving an early \"http.disconnect\" ASGI message, the request_finished signal was not being sent, potentially leading to resource leaks (such as database connections). This branch ensures that the request_finished signal is sent even in the case of early termination of the response. Regression in 64cea1e48f285ea2162c669208d95188b32bbc82. Co-authored-by: Natalia <124304+nessita@\u2026> Co-authored-by: Carlton Gibson <carlton.gibson@\u2026>", 1706701436.0], ["In bbb9ef3: [5.0.x] Refs #35059 -- Made asgi tests' SignalHandler helper class re-usable by other tests. Backport of a43d75e81da783fda08bf8d3493252e3676d11ea from main", 1706701581.0], ["In f1fbd061: [5.0.x] Fixed #35059 -- Ensured that ASGIHandler always sends the request_finished signal. Prior to this work, when async tasks that process the request are cancelled due to receiving an early \"http.disconnect\" ASGI message, the request_finished signal was not being sent, potentially leading to resource leaks (such as database connections). This branch ensures that the request_finished signal is sent even in the case of early termination of the response. Regression in 64cea1e48f285ea2162c669208d95188b32bbc82. Co-authored-by: Natalia <124304+nessita@\u2026> Co-authored-by: Carlton Gibson <carlton.gibson@\u2026> Backport of 11393ab1316f973c5fbb534305750740d909b4e4 from main", 1706701581.0]], "created_at": "2024-01-03T16:19:13Z"}
{"repo": "django/django", "pull_number": 17667, "instance_id": "django__django-17667", "issue_numbers": ["35060"], "base_commit": "e29d1870dd2b44f1b12c4ddf29b3fd24a903f7fd", "patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex aa8e9f8a849a..ccfe19fcc1ab 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -54,6 +54,9 @@ class Meta:\n     def __str__(self):\n         return self.get_username()\n \n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def save(self, **kwargs):\n+    #   super().save(**kwargs)\n     def save(self, *args, **kwargs):\n         super().save(*args, **kwargs)\n         if self._password is not None:\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4a9150bf37fa..46ac762ccd46 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -49,6 +49,7 @@\n     pre_save,\n )\n from django.db.models.utils import AltersData, make_model_tuple\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.encoding import force_str\n from django.utils.hashable import make_hashable\n from django.utils.text import capfirst, get_text_list\n@@ -764,8 +765,17 @@ def serializable_value(self, field_name):\n             return getattr(self, field_name)\n         return getattr(self, field.attname)\n \n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # def save(\n+    #   self, *, force_insert=False, force_update=False, using=None, update_fields=None,\n+    # ):\n     def save(\n-        self, force_insert=False, force_update=False, using=None, update_fields=None\n+        self,\n+        *args,\n+        force_insert=False,\n+        force_update=False,\n+        using=None,\n+        update_fields=None,\n     ):\n         \"\"\"\n         Save the current instance. Override this in a subclass if you want to\n@@ -775,6 +785,26 @@ def save(\n         that the \"save\" must be an SQL insert or update (or equivalent for\n         non-SQL backends), respectively. Normally, they should not be set.\n         \"\"\"\n+        # RemovedInDjango60Warning.\n+        if args:\n+            warnings.warn(\n+                \"Passing positional arguments to save() is deprecated\",\n+                RemovedInDjango60Warning,\n+                stacklevel=2,\n+            )\n+            for arg, attr in zip(\n+                args, [\"force_insert\", \"force_update\", \"using\", \"update_fields\"]\n+            ):\n+                if arg:\n+                    if attr == \"force_insert\":\n+                        force_insert = arg\n+                    elif attr == \"force_update\":\n+                        force_update = arg\n+                    elif attr == \"using\":\n+                        using = arg\n+                    else:\n+                        update_fields = arg\n+\n         self._prepare_related_fields_for_save(operation_name=\"save\")\n \n         using = using or router.db_for_write(self.__class__, instance=self)\n@@ -828,9 +858,38 @@ def save(\n \n     save.alters_data = True\n \n+    # RemovedInDjango60Warning: When the deprecation ends, replace with:\n+    # async def asave(\n+    #   self, *, force_insert=False, force_update=False, using=None, update_fields=None,\n+    # ):\n     async def asave(\n-        self, force_insert=False, force_update=False, using=None, update_fields=None\n+        self,\n+        *args,\n+        force_insert=False,\n+        force_update=False,\n+        using=None,\n+        update_fields=None,\n     ):\n+        # RemovedInDjango60Warning.\n+        if args:\n+            warnings.warn(\n+                \"Passing positional arguments to asave() is deprecated\",\n+                RemovedInDjango60Warning,\n+                stacklevel=2,\n+            )\n+            for arg, attr in zip(\n+                args, [\"force_insert\", \"force_update\", \"using\", \"update_fields\"]\n+            ):\n+                if arg:\n+                    if attr == \"force_insert\":\n+                        force_insert = arg\n+                    elif attr == \"force_update\":\n+                        force_update = arg\n+                    elif attr == \"using\":\n+                        using = arg\n+                    else:\n+                        update_fields = arg\n+\n         return await sync_to_async(self.save)(\n             force_insert=force_insert,\n             force_update=force_update,\ndiff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt\nindex a1b00c364a33..07e0f46856a2 100644\n--- a/docs/internals/deprecation.txt\n+++ b/docs/internals/deprecation.txt\n@@ -68,6 +68,9 @@ details on these changes.\n \n * The ``django.contrib.gis.geoip2.GeoIP2.open()`` method will be removed.\n \n+* Support for passing positional arguments to ``Model.save()`` and\n+  ``Model.asave()`` will be removed.\n+\n .. _deprecation-removed-in-5.1:\n \n 5.1\ndiff --git a/docs/ref/models/instances.txt b/docs/ref/models/instances.txt\nindex 81f9bfb43324..45af7f244fc1 100644\n--- a/docs/ref/models/instances.txt\n+++ b/docs/ref/models/instances.txt\n@@ -116,7 +116,7 @@ are loaded from the database::\n         return instance\n \n \n-    def save(self, *args, **kwargs):\n+    def save(self, **kwargs):\n         # Check how the current values differ from ._loaded_values. For example,\n         # prevent changing the creator_id of the model. (This example doesn't\n         # support cases where 'creator_id' is deferred).\n@@ -124,7 +124,7 @@ are loaded from the database::\n             self.creator_id != self._loaded_values[\"creator_id\"]\n         ):\n             raise ValueError(\"Updating the value of creator isn't allowed\")\n-        super().save(*args, **kwargs)\n+        super().save(**kwargs)\n \n The example above shows a full ``from_db()`` implementation to clarify how that\n is done. In this case it would be possible to use a ``super()`` call in the\n@@ -410,8 +410,8 @@ Saving objects\n \n To save an object back to the database, call ``save()``:\n \n-.. method:: Model.save(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)\n-.. method:: Model.asave(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)\n+.. method:: Model.save(*, force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)\n+.. method:: Model.asave(*, force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)\n \n *Asynchronous version*: ``asave()``\n \n@@ -424,6 +424,10 @@ method. See :ref:`overriding-model-methods` for more details.\n \n The model save process also has some subtleties; see the sections below.\n \n+.. deprecated:: 5.1\n+\n+    Support for positional arguments is deprecated.\n+\n Auto-incrementing primary keys\n ------------------------------\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex b825e9be4f2a..539ff566a351 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -331,6 +331,9 @@ Miscellaneous\n * The ``django.contrib.gis.geoip2.GeoIP2.open()`` method is deprecated. Use the\n   :class:`~django.contrib.gis.geoip2.GeoIP2` constructor instead.\n \n+* Passing positional arguments to :meth:`.Model.save` and :meth:`.Model.asave`\n+  is deprecated in favor of keyword-only arguments.\n+\n Features removed in 5.1\n =======================\n \ndiff --git a/docs/topics/db/models.txt b/docs/topics/db/models.txt\nindex b419185bbcf1..244e9bbb16d1 100644\n--- a/docs/topics/db/models.txt\n+++ b/docs/topics/db/models.txt\n@@ -868,9 +868,9 @@ to happen whenever you save an object. For example (see\n         name = models.CharField(max_length=100)\n         tagline = models.TextField()\n \n-        def save(self, *args, **kwargs):\n+        def save(self, **kwargs):\n             do_something()\n-            super().save(*args, **kwargs)  # Call the \"real\" save() method.\n+            super().save(**kwargs)  # Call the \"real\" save() method.\n             do_something_else()\n \n You can also prevent saving::\n@@ -882,24 +882,23 @@ You can also prevent saving::\n         name = models.CharField(max_length=100)\n         tagline = models.TextField()\n \n-        def save(self, *args, **kwargs):\n+        def save(self, **kwargs):\n             if self.name == \"Yoko Ono's blog\":\n                 return  # Yoko shall never have her own blog!\n             else:\n-                super().save(*args, **kwargs)  # Call the \"real\" save() method.\n+                super().save(**kwargs)  # Call the \"real\" save() method.\n \n It's important to remember to call the superclass method -- that's\n-that ``super().save(*args, **kwargs)`` business -- to ensure\n-that the object still gets saved into the database. If you forget to\n-call the superclass method, the default behavior won't happen and the\n-database won't get touched.\n+that ``super().save(**kwargs)`` business -- to ensure that the object still\n+gets saved into the database. If you forget to call the superclass method, the\n+default behavior won't happen and the database won't get touched.\n \n It's also important that you pass through the arguments that can be\n-passed to the model method -- that's what the ``*args, **kwargs`` bit\n-does. Django will, from time to time, extend the capabilities of\n-built-in model methods, adding new arguments. If you use ``*args,\n-**kwargs`` in your method definitions, you are guaranteed that your\n-code will automatically support those arguments when they are added.\n+passed to the model method -- that's what the ``**kwargs`` bit does. Django\n+will, from time to time, extend the capabilities of built-in model methods,\n+adding new keyword arguments. If you use ``**kwargs`` in your method\n+definitions, you are guaranteed that your code will automatically support those\n+arguments when they are added.\n \n If you wish to update a field value in the :meth:`~Model.save` method, you may\n also want to have this field added to the ``update_fields`` keyword argument.\n@@ -914,18 +913,13 @@ example::\n         name = models.CharField(max_length=100)\n         slug = models.TextField()\n \n-        def save(\n-            self, force_insert=False, force_update=False, using=None, update_fields=None\n-        ):\n+        def save(self, **kwargs):\n             self.slug = slugify(self.name)\n-            if update_fields is not None and \"name\" in update_fields:\n+            if (\n+                update_fields := kwargs.get(\"update_fields\")\n+            ) is not None and \"name\" in update_fields:\n                 update_fields = {\"slug\"}.union(update_fields)\n-            super().save(\n-                force_insert=force_insert,\n-                force_update=force_update,\n-                using=using,\n-                update_fields=update_fields,\n-            )\n+            super().save(**kwargs)\n \n See :ref:`ref-models-update-fields` for more details.\n \n", "test_patch": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex ad82cffe8c21..990549edfc4b 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -13,6 +13,8 @@\n     TransactionTestCase,\n     skipUnlessDBFeature,\n )\n+from django.test.utils import ignore_warnings\n+from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.translation import gettext_lazy\n \n from .models import (\n@@ -187,6 +189,50 @@ def test_save_parent_primary_with_default(self):\n         with self.assertNumQueries(2):\n             ChildPrimaryKeyWithDefault().save()\n \n+    def test_save_deprecation(self):\n+        a = Article(headline=\"original\", pub_date=datetime(2014, 5, 16))\n+        msg = \"Passing positional arguments to save() is deprecated\"\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            a.save(False, False, None, None)\n+            self.assertEqual(Article.objects.count(), 1)\n+\n+    async def test_asave_deprecation(self):\n+        a = Article(headline=\"original\", pub_date=datetime(2014, 5, 16))\n+        msg = \"Passing positional arguments to asave() is deprecated\"\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            await a.asave(False, False, None, None)\n+            self.assertEqual(await Article.objects.acount(), 1)\n+\n+    @ignore_warnings(category=RemovedInDjango60Warning)\n+    def test_save_positional_arguments(self):\n+        a = Article.objects.create(headline=\"original\", pub_date=datetime(2014, 5, 16))\n+        a.headline = \"changed\"\n+\n+        a.save(False, False, None, [\"pub_date\"])\n+        a.refresh_from_db()\n+        self.assertEqual(a.headline, \"original\")\n+\n+        a.headline = \"changed\"\n+        a.save(False, False, None, [\"pub_date\", \"headline\"])\n+        a.refresh_from_db()\n+        self.assertEqual(a.headline, \"changed\")\n+\n+    @ignore_warnings(category=RemovedInDjango60Warning)\n+    async def test_asave_positional_arguments(self):\n+        a = await Article.objects.acreate(\n+            headline=\"original\", pub_date=datetime(2014, 5, 16)\n+        )\n+        a.headline = \"changed\"\n+\n+        await a.asave(False, False, None, [\"pub_date\"])\n+        await a.arefresh_from_db()\n+        self.assertEqual(a.headline, \"original\")\n+\n+        a.headline = \"changed\"\n+        await a.asave(False, False, None, [\"pub_date\", \"headline\"])\n+        await a.arefresh_from_db()\n+        self.assertEqual(a.headline, \"changed\")\n+\n \n class ModelTest(TestCase):\n     def test_objects_attribute_is_only_available_on_the_class_itself(self):\ndiff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex b6da15f48ac8..c28461d8627f 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -463,7 +463,7 @@ def __init__(self, *args, **kwargs):\n         self._savecount = 0\n \n     def save(self, force_insert=False, force_update=False):\n-        super().save(force_insert, force_update)\n+        super().save(force_insert=force_insert, force_update=force_update)\n         self._savecount += 1\n \n \n", "problem_statement": "Make Model.save() arguments keyword-only\nDescription\n\t \nFollowing this forum \u200bdiscussion, I suggest making Model.save() accept keyword arguments only (following a deprecation period, of course).\nFor users who need to patch update_fields in an overridden save(), it would be much simpler to only have to drill into **kwargs and not also drill into (and check the length of) *args first.\nImplementing this ticket would alleviate a small part of a current inconsistency in the advice for overridding save(). In one portion, the implementer is advised to pass through both *args and **kwargs:\nIt's also important that you pass through the arguments that can be\npassed to the model method -- that's what the ``*args, **kwargs`` bit\ndoes. Django will, from time to time, extend the capabilities of\nbuilt-in model methods, adding new arguments. If you use ``*args,\n**kwargs`` in your method definitions, you are guaranteed that your\ncode will automatically support those arguments when they are added.\nThen, an example tailored to passing through update_fields, passes through *no* variadic arguments:\n\t\tdef save(\n\t\t\tself, force_insert=False, force_update=False, using=None, update_fields=None\n\t\t):\nWe could make the situation better by taking away swallowed *args as a vector for bugs.\n", "hints_text": [["Sounds reasonable.", 1703433116.0], ["May we create a PR for this now?", 1703745897.0], ["I haven't started, so if you'd like to assign the ticket to yourself, that's fine with me. (Be sure to follow the \"Deprecating a feature\" instructions and update the two documentation examples I mentioned above.)", 1703752932.0], ["Nice one. If this ticket goes well, it might serve as a template for making some other functions keyword-only, such as models.Field.__init__ (except the first two args, verbose_name and name).", 1703784076.0], ["Replying to Adam Johnson: Nice one. If this ticket goes well, it might serve as a template for making some other functions keyword-only, such as models.Field.__init__ (except the first two args, verbose_name and name). We already have \"templates\" for such deprecations e.g. ad18a0102cc2968914232814c6554763f15abbe3 or b8738aea14446b267a47087b52b38a98b440a6aa.", 1703803772.0], ["PR: \u200bhttps://github.com/django/django/pull/17667", 1703994480.0], ["I'm sorry but some tests do not work, so I temporarily closed PR. I will fix them", 1703995076.0], ["Replying to Salvo Polizzi: I'm sorry but some tests do not work, so I temporarily closed PR. I will fix them", 1703999205.0]], "created_at": "2023-12-31T09:47:37Z"}
{"repo": "django/django", "pull_number": 17666, "instance_id": "django__django-17666", "issue_numbers": ["35075"], "base_commit": "f412add786dfc18424eee6281ec8cc97220b04fc", "patch": "diff --git a/django/contrib/postgres/indexes.py b/django/contrib/postgres/indexes.py\nindex 363a9431ae1d..cc944ed33558 100644\n--- a/django/contrib/postgres/indexes.py\n+++ b/django/contrib/postgres/indexes.py\n@@ -117,20 +117,27 @@ def get_with_params(self):\n class BTreeIndex(PostgresIndex):\n     suffix = \"btree\"\n \n-    def __init__(self, *expressions, fillfactor=None, **kwargs):\n+    def __init__(self, *expressions, fillfactor=None, deduplicate_items=None, **kwargs):\n         self.fillfactor = fillfactor\n+        self.deduplicate_items = deduplicate_items\n         super().__init__(*expressions, **kwargs)\n \n     def deconstruct(self):\n         path, args, kwargs = super().deconstruct()\n         if self.fillfactor is not None:\n             kwargs[\"fillfactor\"] = self.fillfactor\n+        if self.deduplicate_items is not None:\n+            kwargs[\"deduplicate_items\"] = self.deduplicate_items\n         return path, args, kwargs\n \n     def get_with_params(self):\n         with_params = []\n         if self.fillfactor is not None:\n             with_params.append(\"fillfactor = %d\" % self.fillfactor)\n+        if self.deduplicate_items is not None:\n+            with_params.append(\n+                \"deduplicate_items = %s\" % (\"on\" if self.deduplicate_items else \"off\")\n+            )\n         return with_params\n \n \ndiff --git a/docs/ref/contrib/postgres/indexes.txt b/docs/ref/contrib/postgres/indexes.txt\nindex 5dfbef5c4c6e..73ef195309bb 100644\n--- a/docs/ref/contrib/postgres/indexes.txt\n+++ b/docs/ref/contrib/postgres/indexes.txt\n@@ -46,14 +46,23 @@ available from the ``django.contrib.postgres.indexes`` module.\n ``BTreeIndex``\n ==============\n \n-.. class:: BTreeIndex(*expressions, fillfactor=None, **options)\n+.. class:: BTreeIndex(*expressions, fillfactor=None, deduplicate_items=None, **options)\n \n     Creates a B-Tree index.\n \n     Provide an integer value from 10 to 100 to the fillfactor_ parameter to\n     tune how packed the index pages will be. PostgreSQL's default is 90.\n \n+    Provide a boolean value to the deduplicate_items_ parameter to control\n+    whether deduplication is enabled. PostgreSQL enables deduplication by\n+    default.\n+\n+    .. versionchanged:: 5.1\n+\n+        The ``deduplicate_items`` parameter was added.\n+\n     .. _fillfactor: https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS\n+    .. _deduplicate_items: https://www.postgresql.org/docs/current/btree-implementation.html#BTREE-DEDUPLICATION\n \n ``GinIndex``\n ============\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 539ff566a351..f949b31ad25b 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -63,7 +63,8 @@ Minor features\n :mod:`django.contrib.postgres`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-* ...\n+* :class:`~django.contrib.postgres.indexes.BTreeIndex` now supports the\n+  ``deduplicate_items`` parameter.\n \n :mod:`django.contrib.redirects`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndiff --git a/docs/spelling_wordlist b/docs/spelling_wordlist\nindex c217719a8a29..5828b24253bb 100644\n--- a/docs/spelling_wordlist\n+++ b/docs/spelling_wordlist\n@@ -119,6 +119,7 @@ datetimes\n declaratively\n decrementing\n deduplicates\n+deduplication\n deepcopy\n deferrable\n deprecations\n", "test_patch": "diff --git a/tests/postgres_tests/test_indexes.py b/tests/postgres_tests/test_indexes.py\nindex d063ac64a2d1..8a7ee39a76ea 100644\n--- a/tests/postgres_tests/test_indexes.py\n+++ b/tests/postgres_tests/test_indexes.py\n@@ -143,12 +143,29 @@ def test_suffix(self):\n         self.assertEqual(BTreeIndex.suffix, \"btree\")\n \n     def test_deconstruction(self):\n-        index = BTreeIndex(fields=[\"title\"], name=\"test_title_btree\", fillfactor=80)\n+        index = BTreeIndex(fields=[\"title\"], name=\"test_title_btree\")\n+        path, args, kwargs = index.deconstruct()\n+        self.assertEqual(path, \"django.contrib.postgres.indexes.BTreeIndex\")\n+        self.assertEqual(args, ())\n+        self.assertEqual(kwargs, {\"fields\": [\"title\"], \"name\": \"test_title_btree\"})\n+\n+        index = BTreeIndex(\n+            fields=[\"title\"],\n+            name=\"test_title_btree\",\n+            fillfactor=80,\n+            deduplicate_items=False,\n+        )\n         path, args, kwargs = index.deconstruct()\n         self.assertEqual(path, \"django.contrib.postgres.indexes.BTreeIndex\")\n         self.assertEqual(args, ())\n         self.assertEqual(\n-            kwargs, {\"fields\": [\"title\"], \"name\": \"test_title_btree\", \"fillfactor\": 80}\n+            kwargs,\n+            {\n+                \"fields\": [\"title\"],\n+                \"name\": \"test_title_btree\",\n+                \"fillfactor\": 80,\n+                \"deduplicate_items\": False,\n+            },\n         )\n \n \n@@ -455,13 +472,18 @@ def test_btree_index(self):\n         )\n \n     def test_btree_parameters(self):\n-        index_name = \"integer_array_btree_fillfactor\"\n-        index = BTreeIndex(fields=[\"field\"], name=index_name, fillfactor=80)\n+        index_name = \"integer_array_btree_parameters\"\n+        index = BTreeIndex(\n+            fields=[\"field\"], name=index_name, fillfactor=80, deduplicate_items=False\n+        )\n         with connection.schema_editor() as editor:\n             editor.add_index(CharFieldModel, index)\n         constraints = self.get_constraints(CharFieldModel._meta.db_table)\n         self.assertEqual(constraints[index_name][\"type\"], BTreeIndex.suffix)\n-        self.assertEqual(constraints[index_name][\"options\"], [\"fillfactor=80\"])\n+        self.assertEqual(\n+            constraints[index_name][\"options\"],\n+            [\"fillfactor=80\", \"deduplicate_items=off\"],\n+        )\n         with connection.schema_editor() as editor:\n             editor.remove_index(CharFieldModel, index)\n         self.assertNotIn(\n", "problem_statement": "Add support for deduplicate_items option to BTreeIndex for PostgreSQL 13+.\nDescription\n\t \nExpose the deduplicate_items option to allow disabling deduplication when needed.\nSee \u200bhttps://www.postgresql.org/docs/16/btree-implementation.html#BTREE-DEDUPLICATION\n", "hints_text": [], "created_at": "2023-12-30T23:51:53Z"}
{"repo": "django/django", "pull_number": 17663, "instance_id": "django__django-17663", "issue_numbers": ["35072"], "base_commit": "c72001644fa794b82fa88a7d2ecc20197b01b6f2", "patch": "diff --git a/docs/topics/db/models.txt b/docs/topics/db/models.txt\nindex cc6c1f5298d0..b419185bbcf1 100644\n--- a/docs/topics/db/models.txt\n+++ b/docs/topics/db/models.txt\n@@ -157,9 +157,12 @@ ones:\n     <Field.blank>`, the field will be required.\n \n :attr:`~Field.choices`\n-    A :term:`sequence` of 2-tuples to use as choices for this field. If this\n-    is given, the default form widget will be a select box instead of the\n-    standard text field and will limit choices to the choices given.\n+    A :term:`sequence` of 2-value tuples, a :term:`mapping`, an\n+    :ref:`enumeration type <field-choices-enum-types>`, or a callable (that\n+    expects no arguments and returns any of the previous formats), to use as\n+    choices for this field. If this is given, the default form widget will be a\n+    select box instead of the standard text field and will limit choices to the\n+    choices given.\n \n     A choices list looks like this::\n \n@@ -216,6 +219,10 @@ ones:\n     Further examples are available in the :ref:`model field reference\n     <field-choices>`.\n \n+    .. versionchanged:: 5.0\n+\n+        Support for mappings and callables was added.\n+\n :attr:`~Field.default`\n     The default value for the field. This can be a value or a callable\n     object. If callable it will be called every time a new object is\n", "test_patch": "", "problem_statement": "Model docs Field.choices inconsistency between reference and topic guide\nDescription\n\t\t\n(last modified by Zowie Beha)\t\t\n\u200bhttps://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.Field.choices\nOn this reference page, Field.choices is described as:\n\"A mapping or iterable in the format described below to use as choices for this field.\"\n\u200bhttps://docs.djangoproject.com/en/5.0/topics/db/models/#field-options\nHere on the topic guide however, the description is:\n\"A sequence of 2-tuples to use as choices for this field.\"\nA mapping is used as an example in the topic guide, however it might be better to mention explicitly/upfront all valid choices values (such as callables for example).\n", "hints_text": [["PR: \u200bhttps://github.com/django/django/pull/17663", 1703954040.0]], "created_at": "2023-12-30T22:23:21Z"}
{"repo": "django/django", "pull_number": 17661, "instance_id": "django__django-17661", "issue_numbers": ["35069"], "base_commit": "94b6f101f7dc363a8e71593570b17527dbb9f77f", "patch": "diff --git a/docs/ref/forms/api.txt b/docs/ref/forms/api.txt\nindex 7bec9b120b9e..28cd452c4e8b 100644\n--- a/docs/ref/forms/api.txt\n+++ b/docs/ref/forms/api.txt\n@@ -909,7 +909,7 @@ It's possible to customize that character, or omit it entirely, using the\n     <div><label for=\"id_for_cc_myself\">Cc myself</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div>\n     >>> f = ContactForm(auto_id=\"id_for_%s\", label_suffix=\" ->\")\n     >>> print(f)\n-    <div><label for=\"id_for_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div>\n+    <div><label for=\"id_for_subject\">Subject -&gt;</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div>\n     <div><label for=\"id_for_message\">Message -&gt;</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div>\n     <div><label for=\"id_for_sender\">Sender -&gt;</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div>\n     <div><label for=\"id_for_cc_myself\">Cc myself -&gt;</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div>\n", "test_patch": "", "problem_statement": "Typo in Form.label_suffix example in docs.\nDescription\n\t \n\u200bhttps://docs.djangoproject.com/en/5.0/ref/forms/api/#django.forms.Form.label_suffix\n\u200bhttps://i.imgur.com/9wgvVRd.png\nHi everyone,\nin this example, a form is created with the label_suffix set to \" ->\". When this form is printed, the output shows that the Subject label does not reflect this change. This leads me to think this line may be a mistake.\n", "hints_text": [["The subject label has the suffix ':', while label_suffix sets it to ' ->'", 1703852656.0], ["Good catch, it looks like a typo in the 9ac97e7eb5a74f813012715c7598c8608e78e178: docs/ref/forms/api.txt diff --git a/docs/ref/forms/api.txt b/docs/ref/forms/api.txt index 7bec9b120b..28cd452c4e 100644 a b It's possible to customize that character, or omit it entirely, using the 909909 <div><label for=\"id_for_cc_myself\">Cc myself</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div> 910910 >>> f = ContactForm(auto_id=\"id_for_%s\", label_suffix=\" ->\") 911911 >>> print(f) 912 <div><label for=\"id_for_subject\">Subject:</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div> 912 <div><label for=\"id_for_subject\">Subject -&gt;</label><input type=\"text\" name=\"subject\" maxlength=\"100\" required id=\"id_for_subject\"></div> 913913 <div><label for=\"id_for_message\">Message -&gt;</label><textarea name=\"message\" cols=\"40\" rows=\"10\" required id=\"id_for_message\"></textarea></div> 914914 <div><label for=\"id_for_sender\">Sender -&gt;</label><input type=\"email\" name=\"sender\" required id=\"id_for_sender\"></div> 915915 <div><label for=\"id_for_cc_myself\">Cc myself -&gt;</label><input type=\"checkbox\" name=\"cc_myself\" id=\"id_for_cc_myself\"></div> Would you like to prepare a patch (via GitHub PR)? For the future, tickets are not necessary to fix typos in docs.", 1703858293.0], ["PR: \u200bhttps://github.com/django/django/pull/17661", 1703905462.0], ["In dc26a3d5: Fixed #35069 -- Fixed typo in docs/ref/forms/api.txt.", 1703923227.0], ["In c69dbc7c: [5.0.x] Fixed #35069 -- Fixed typo in docs/ref/forms/api.txt. Backport of dc26a3d563b1e1d98d40f5d351a6a61c34f12d98 from main", 1703923247.0]], "created_at": "2023-12-30T09:03:20Z"}
{"repo": "django/django", "pull_number": 17658, "instance_id": "django__django-17658", "issue_numbers": ["35064"], "base_commit": "bb560651c489879c22878cba5003a09b6a9f930a", "patch": "diff --git a/django/contrib/postgres/aggregates/mixins.py b/django/contrib/postgres/aggregates/mixins.py\nindex 340a9178793b..68f24a5ce3a3 100644\n--- a/django/contrib/postgres/aggregates/mixins.py\n+++ b/django/contrib/postgres/aggregates/mixins.py\n@@ -3,18 +3,21 @@\n \n class OrderableAggMixin:\n     def __init__(self, *expressions, ordering=(), **extra):\n-        if isinstance(ordering, (list, tuple)):\n+        if not ordering:\n+            self.order_by = None\n+        elif isinstance(ordering, (list, tuple)):\n             self.order_by = OrderByList(*ordering)\n         else:\n             self.order_by = OrderByList(ordering)\n         super().__init__(*expressions, **extra)\n \n     def resolve_expression(self, *args, **kwargs):\n-        self.order_by = self.order_by.resolve_expression(*args, **kwargs)\n+        if self.order_by is not None:\n+            self.order_by = self.order_by.resolve_expression(*args, **kwargs)\n         return super().resolve_expression(*args, **kwargs)\n \n     def get_source_expressions(self):\n-        if self.order_by.source_expressions:\n+        if self.order_by is not None:\n             return super().get_source_expressions() + [self.order_by]\n         return super().get_source_expressions()\n \n@@ -24,6 +27,9 @@ def set_source_expressions(self, exprs):\n         return super().set_source_expressions(exprs)\n \n     def as_sql(self, compiler, connection):\n-        order_by_sql, order_by_params = compiler.compile(self.order_by)\n+        if self.order_by is not None:\n+            order_by_sql, order_by_params = compiler.compile(self.order_by)\n+        else:\n+            order_by_sql, order_by_params = \"\", ()\n         sql, sql_params = super().as_sql(compiler, connection, ordering=order_by_sql)\n         return sql, (*sql_params, *order_by_params)\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 41443dc6db4e..b67a2418d449 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1267,12 +1267,12 @@ def as_sqlite(self, compiler, connection, **extra_context):\n \n     def get_group_by_cols(self):\n         group_by_cols = []\n-        for partition in self.get_source_expressions():\n-            group_by_cols.extend(partition.get_group_by_cols())\n+        for expr in self.get_source_expressions():\n+            group_by_cols.extend(expr.get_group_by_cols())\n         return group_by_cols\n \n \n-class OrderByList(Func):\n+class OrderByList(ExpressionList):\n     allowed_default = False\n     template = \"ORDER BY %(expressions)s\"\n \n@@ -1287,17 +1287,6 @@ def __init__(self, *expressions, **extra):\n         )\n         super().__init__(*expressions, **extra)\n \n-    def as_sql(self, *args, **kwargs):\n-        if not self.source_expressions:\n-            return \"\", ()\n-        return super().as_sql(*args, **kwargs)\n-\n-    def get_group_by_cols(self):\n-        group_by_cols = []\n-        for order_by in self.get_source_expressions():\n-            group_by_cols.extend(order_by.get_group_by_cols())\n-        return group_by_cols\n-\n \n @deconstructible(path=\"django.db.models.ExpressionWrapper\")\n class ExpressionWrapper(SQLiteNumericMixin, Expression):\n", "test_patch": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb14e5634912..fd674e319bc4 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -354,6 +354,29 @@ def test_lag_decimalfield(self):\n             transform=lambda row: (row.name, row.bonus, row.department, row.lag),\n         )\n \n+    def test_order_by_decimalfield(self):\n+        qs = Employee.objects.annotate(\n+            rank=Window(expression=Rank(), order_by=\"bonus\")\n+        ).order_by(\"-bonus\", \"id\")\n+        self.assertQuerySetEqual(\n+            qs,\n+            [\n+                (\"Miller\", 250.0, 12),\n+                (\"Johnson\", 200.0, 11),\n+                (\"Wilkinson\", 150.0, 10),\n+                (\"Smith\", 137.5, 9),\n+                (\"Brown\", 132.5, 8),\n+                (\"Adams\", 125.0, 7),\n+                (\"Jones\", 112.5, 5),\n+                (\"Jenson\", 112.5, 5),\n+                (\"Johnson\", 100.0, 4),\n+                (\"Smith\", 95.0, 3),\n+                (\"Williams\", 92.5, 2),\n+                (\"Moore\", 85.0, 1),\n+            ],\n+            transform=lambda row: (row.name, float(row.bonus), row.rank),\n+        )\n+\n     def test_first_value(self):\n         qs = Employee.objects.annotate(\n             first_value=Window(\n@@ -1934,8 +1957,7 @@ def test_window_repr(self):\n         )\n         self.assertEqual(\n             repr(Window(expression=Avg(\"salary\"), order_by=F(\"department\").asc())),\n-            \"<Window: Avg(F(salary)) OVER (OrderByList(OrderBy(F(department), \"\n-            \"descending=False)))>\",\n+            \"<Window: Avg(F(salary)) OVER (OrderBy(F(department), descending=False))>\",\n         )\n \n     def test_window_frame_repr(self):\n", "problem_statement": "Window.order_by decimal field is broken on SQLite\nDescription\n\t \nInitially reported \u200bon the Discord and demonstrated in \u200bthis Django project.\nclass RankTest(models.Model):\n\tname = models.CharField(max_length=30)\n\tcategory = models.CharField(max_length=30)\n\trating = models.DecimalField(max_digits=8, decimal_places=5)\nlist(\n\tRankTest.objects.annotate(\n\t\trank=Window(\n\t\t\texpression=Rank(),\n\t\t\torder_by='rating'\n\t\t)\n\t)\n)\nThe solution implemented in #31723 (71d10ca8c90ccc1fd0ccd6683716dd3c3116ae6a) wish addressed the improper of casting for Window.expression caused some problematic one for order_by and likely partition_by as well.\n", "hints_text": [["\u200bPR", 1703808685.0], ["In 90d365d8: Refs #35064 -- Made OrderableAggMixin avoid creating empty OrderByList. This paves the way for making OrderByList a simple shim over ExpressionList which requires at least a single item to be provided.", 1703818732.0], ["In e16d0c1: Fixed #35064 -- Fixed Window(order_by) crash with DecimalFields on SQLite. This avoids cast of Window(order_by) for DecimalFields on SQLite. This was achieved by piggy-backing ExpressionList which already implements a specialized as_sqlite() method to override the inherited behaviour of Func through SQLiteNumericMixin. Refs #31723. Thanks Quoates for the report.", 1703818732.0]], "created_at": "2023-12-29T06:09:04Z"}
{"repo": "django/django", "pull_number": 17652, "instance_id": "django__django-17652", "issue_numbers": ["35065"], "base_commit": "751d732a3815a68bdb5b7aceda0e7d5981362c4a", "patch": "diff --git a/django/contrib/admin/static/admin/css/autocomplete.css b/django/contrib/admin/static/admin/css/autocomplete.css\nindex 69c94e734774..7478c2c4e6ce 100644\n--- a/django/contrib/admin/static/admin/css/autocomplete.css\n+++ b/django/contrib/admin/static/admin/css/autocomplete.css\n@@ -273,3 +273,7 @@ select.admin-autocomplete {\n     display: block;\n     padding: 6px;\n }\n+\n+.errors .select2-selection {\n+    border: 1px solid var(--error-fg);\n+}\n", "test_patch": "", "problem_statement": "Autocomplete field is not rendered with error color border.\nDescription\n\t\t\n(last modified by Rigoberto Villalta)\t\t\nIn Django Admin, if the validations of an autocomplete fields fails, the border of the input field isn't\u00b4n of the error color (#ba2121 by default).\nWhy? Because in that case the select html element is hidden.\nYou can test it int this repo \u200bhttps://github.com/Rigo-Villalta/django-autocomplete-error-not-visible.\nSolution: I think the best solution is to add to the end of the file /static/admin/css/autocomplete.css the following rule:\n.errors .select2-selection {\n\tborder: 1px solid var(--error-fg);\n}\nSomeone could think that add the selector to the base.css file could works, but for inheritance doesn't work.\nI will push the pull request in a minutes, but I am not sure if is the best solution.\n", "hints_text": [["Thanks for the report, please submit patch via GitHub PR.", 1703718504.0], ["\u200bPR", 1703730010.0], ["In 63076e36: Fixed #35065 -- Corrected border color for autocomplete fields with errors in admin.", 1703733653.0]], "created_at": "2023-12-28T08:03:28Z"}
{"repo": "django/django", "pull_number": 17647, "instance_id": "django__django-17647", "issue_numbers": ["35056"], "base_commit": "7c26dbf6ef9415f873ae43f12e6ab3742857c898", "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 166502343470..aa43718cd682 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -532,7 +532,7 @@ def _check_filter_item(self, obj, field_name, label):\n                 field=field_name, option=label, obj=obj, id=\"admin.E019\"\n             )\n         else:\n-            if not field.many_to_many:\n+            if not field.many_to_many or isinstance(field, models.ManyToManyRel):\n                 return must_be(\n                     \"a many-to-many field\", option=label, obj=obj, id=\"admin.E020\"\n                 )\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex 15b735b42ee1..4344b0d1818d 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -32,3 +32,7 @@ Bugfixes\n \n * Fixed a regression in Django 5.0 where querysets referenced incorrect field\n   names from ``FilteredRelation()`` (:ticket:`35050`).\n+\n+* Fixed a regression in Django 5.0 that caused a system check crash when\n+  ``ModelAdmin.filter_horizontal`` or ``filter_vertical`` contained a reverse\n+  many-to-many relation with ``related_name`` (:ticket:`35056`).\n", "test_patch": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex 47b1b40ed7c7..73777f05abd7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -322,6 +322,24 @@ class TestModelAdmin(ModelAdmin):\n             \"admin.E020\",\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_invalid_reverse_m2m_field_with_related_name(self):\n+        class Contact(Model):\n+            pass\n+\n+        class Customer(Model):\n+            contacts = ManyToManyField(\"Contact\", related_name=\"customers\")\n+\n+        class TestModelAdmin(ModelAdmin):\n+            filter_vertical = [\"customers\"]\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin,\n+            Contact,\n+            \"The value of 'filter_vertical[0]' must be a many-to-many field.\",\n+            \"admin.E020\",\n+        )\n+\n     @isolate_apps(\"modeladmin\")\n     def test_invalid_m2m_field_with_through(self):\n         class Artist(Model):\n@@ -384,6 +402,24 @@ class TestModelAdmin(ModelAdmin):\n             \"admin.E020\",\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_invalid_reverse_m2m_field_with_related_name(self):\n+        class Contact(Model):\n+            pass\n+\n+        class Customer(Model):\n+            contacts = ManyToManyField(\"Contact\", related_name=\"customers\")\n+\n+        class TestModelAdmin(ModelAdmin):\n+            filter_horizontal = [\"customers\"]\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin,\n+            Contact,\n+            \"The value of 'filter_horizontal[0]' must be a many-to-many field.\",\n+            \"admin.E020\",\n+        )\n+\n     @isolate_apps(\"modeladmin\")\n     def test_invalid_m2m_field_with_through(self):\n         class Artist(Model):\n", "problem_statement": "admin.E013 on ManyToManyField with related_name crashes.\nDescription\n\t \nI'm having problems updating my Django 4.2 project to Django 5.\nTrying manage.py runserver raises an exception when performing system checks:\nException in thread django-main-thread:\nTraceback (most recent call last):\n File \"/opt/homebrew/Cellar/python@3.11/3.11.6_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/threading.py\", line 1045, in _bootstrap_inner\n\tself.run()\n File \"/opt/homebrew/Cellar/python@3.11/3.11.6_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/threading.py\", line 982, in run\n\tself._target(*self._args, **self._kwargs)\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/utils/autoreload.py\", line 64, in wrapper\n\tfn(*args, **kwargs)\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/core/management/commands/runserver.py\", line 133, in inner_run\n\tself.check(display_num_errors=True)\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/core/management/base.py\", line 485, in check\n\tall_issues = checks.run_checks(\n\t\t\t\t ^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/core/checks/registry.py\", line 88, in run_checks\n\tnew_errors = check(app_configs=app_configs, databases=databases)\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/checks.py\", line 52, in check_admin_app\n\terrors.extend(site.check(app_configs))\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/sites.py\", line 89, in check\n\terrors.extend(modeladmin.check())\n\t\t\t\t ^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/options.py\", line 148, in check\n\treturn self.checks_class().check(self, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/checks.py\", line 806, in check\n\t*super().check(admin_obj),\n\t ^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/checks.py\", line 187, in check\n\t*self._check_filter_horizontal(admin_obj),\n\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/checks.py\", line 515, in _check_filter_horizontal\n\treturn list(\n\t\t ^^^^^\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/checks.py\", line 517, in <genexpr>\n\tself._check_filter_item(\n File \"/Users/tf/work/mama2/mama/.venv/lib/python3.11/site-packages/django/contrib/admin/checks.py\", line 539, in _check_filter_item\n\telif not field.remote_field.through._meta.auto_created:\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'ManyToManyField' object has no attribute 'through'\nThe project works fine in Django 4.2.7.\nI found this comes from a filter_horizontal field which is a ManyToManyField's related_name.\n", "hints_text": [["Thanks for the report. Can you provide a small project that reproduces the issue?", 1703157158.0], ["Small reproduction example", 1703162168.0], ["Replying to Mariusz Felisiak: Thanks for the report. Can you provide a small project that reproduces the issue? Sure. Added a small example. While putting this together I realized this also doesn't work in Django 4 but does not raise an exception. The error message could be a little clearer but I'm not sure whether this is a bug or a feature.", 1703162359.0], ["Thanks for the report! ManyToManyFields with the through are generally not supported in the admin (#12203) but this should not crash. It seems that ManyToManyRel is recognized as many_to_many but it's remote_field doesn't have through Regression in 107865780aa44914e21d27fdf4ca269bc61c7f01", 1703212387.0], ["Can i help with this issue? If anyone can give me some advice or reference to other similar issues, I would like to contribute", 1703306962.0], ["Could this be fixed with a simple hasattr(field.remote_field, 'through') check before accessing through?", 1703312693.0], ["\u200bPR", 1703638686.0]], "created_at": "2023-12-27T06:57:42Z"}
{"repo": "django/django", "pull_number": 17646, "instance_id": "django__django-17646", "issue_numbers": ["34971"], "base_commit": "d9b91e38361696014bdc98434d6d018eae809519", "patch": "diff --git a/docs/ref/logging.txt b/docs/ref/logging.txt\nindex a15e2ac91f1d..6d8861299fcc 100644\n--- a/docs/ref/logging.txt\n+++ b/docs/ref/logging.txt\n@@ -199,6 +199,39 @@ This logging does not include framework-level initialization (e.g.\n ``SET TIMEZONE``). Turn on query logging in your database if you wish to view\n all database queries.\n \n+.. _django-utils-autoreloader-logger:\n+\n+``django.utils.autoreload``\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Log messages related to automatic code reloading during the execution of the\n+Django development server. This logger generates an ``INFO`` message upon\n+detecting a modification in a source code file and may produce ``WARNING``\n+messages during filesystem inspection and event subscription processes.\n+\n+.. _django-contrib-gis-logger:\n+\n+``django.contrib.gis``\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+Log messages related to :doc:`contrib/gis/index` at various points: during the\n+loading of external GeoSpatial libraries (GEOS, GDAL, etc.) and when reporting\n+errors. Each ``ERROR`` log record includes the caught exception and relevant\n+contextual data.\n+\n+.. _django-dispatch-logger:\n+\n+``django.dispatch``\n+~~~~~~~~~~~~~~~~~~~\n+\n+This logger is used in :doc:`signals`, specifically within the\n+:mod:`~django.dispatch.Signal` class, to report issues when dispatching a\n+signal to a connected receiver. The ``ERROR`` log record includes the caught\n+exception as ``exc_info`` and adds the following extra context:\n+\n+* ``receiver``: The name of the receiver.\n+* ``err``: The exception that occurred when calling the receiver.\n+\n .. _django-security-logger:\n \n ``django.security.*``\n", "test_patch": "", "problem_statement": "Several loggers missing from logging documentation\nDescription\n\t\t\n(last modified by Ryan Siemens)\t\t\nThe \u200blogging reference which lists the django built in loggers is missing a couple of available logggers.\ndjango.dispatch\ndjango.contrib.gis\ndjango.utils.autoreload\nIt would be nice to have these documented as well. Thanks!\n", "hints_text": [["\u200bPR", 1700403935.0]], "created_at": "2023-12-25T18:28:11Z"}
{"repo": "django/django", "pull_number": 17643, "instance_id": "django__django-17643", "issue_numbers": ["35051", "35051"], "base_commit": "14917c9ae272f47d23401100faa6cefa8e1728bf", "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 6afe17cec477..495657d26496 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -134,6 +134,7 @@ def cleanup_headers(self):\n         if (\n             self.environ[\"REQUEST_METHOD\"] == \"HEAD\"\n             and \"Content-Length\" in self.headers\n+            and str(self.headers[\"Content-Length\"]) == \"0\"\n         ):\n             del self.headers[\"Content-Length\"]\n         # HTTP/1.1 requires support for persistent connections. Send 'close' if\n", "test_patch": "diff --git a/tests/servers/test_basehttp.py b/tests/servers/test_basehttp.py\nindex 1e535e933e24..cc4701114a78 100644\n--- a/tests/servers/test_basehttp.py\n+++ b/tests/servers/test_basehttp.py\n@@ -161,6 +161,45 @@ def makefile(mode, *a, **kw):\n         )\n         self.assertNotIn(b\"Connection: close\\r\\n\", lines)\n \n+    def test_non_zero_content_length_set_head_request(self):\n+        hello_world_body = b\"<!DOCTYPE html><html><body>Hello World</body></html>\"\n+        content_length = len(hello_world_body)\n+\n+        def test_app(environ, start_response):\n+            \"\"\"\n+            A WSGI app that returns a hello world with non-zero Content-Length.\n+            \"\"\"\n+            start_response(\"200 OK\", [(\"Content-length\", str(content_length))])\n+            return [hello_world_body]\n+\n+        rfile = BytesIO(b\"HEAD / HTTP/1.0\\r\\n\")\n+        rfile.seek(0)\n+\n+        wfile = UnclosableBytesIO()\n+\n+        def makefile(mode, *a, **kw):\n+            if mode == \"rb\":\n+                return rfile\n+            elif mode == \"wb\":\n+                return wfile\n+\n+        request = Stub(makefile=makefile)\n+        server = Stub(base_environ={}, get_app=lambda: test_app)\n+\n+        # Prevent logging from appearing in test output.\n+        with self.assertLogs(\"django.server\", \"INFO\"):\n+            # Instantiating a handler runs the request as side effect.\n+            WSGIRequestHandler(request, \"192.168.0.2\", server)\n+\n+        wfile.seek(0)\n+        lines = list(wfile.readlines())\n+        body = lines[-1]\n+        # The body is not returned in a HEAD response.\n+        self.assertEqual(body, b\"\\r\\n\")\n+        # Non-zero Content-Length is not removed.\n+        self.assertEqual(lines[-2], f\"Content-length: {content_length}\\r\\n\".encode())\n+        self.assertNotIn(b\"Connection: close\\r\\n\", lines)\n+\n \n class WSGIServerTestCase(SimpleTestCase):\n     request_factory = RequestFactory()\n", "problem_statement": "HEAD Responses Drop Headers\nDescription\n\t \nWhen using runserver headers are dropped for head requests, in particular content-length. Because my HEAD request is serving a large body content, I do not include it in the body since it is just dropped.\nHeaders from runserver:\nHeaders({'date': 'Tue, 19 Dec 2023 12:52:23 GMT', 'server': 'WSGIServer/0.2 CPython/3.11.2', 'accept-ranges': 'bytes', 'content-type': \n'text/html; charset=utf-8', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'referrer-policy': 'same-origin', 'cross-or\nigin-opener-policy': 'same-origin'})\nHeaders from uvicorn asgi server:\nHeaders({'date': 'Tue, 19 Dec 2023 12:54:49 GMT', 'server': 'uvicorn', 'accept-ranges': 'bytes', 'content-length': '121283919', 'content-type': 'text/html; charset=utf-8', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'referrer-policy': 'same-origin', 'cross-origin-opener-policy': 'same-origin'})\nNotice the uvicorn properly includes the content-length header that was set in the view.\nView source snippet:\nif request.method == 'HEAD':\n\tprint('HEAD Request')\n\treturn HttpResponse(headers={\n\t\t'Accept-Ranges': 'bytes',\n\t\t'Content-Length': str(file_size)\n\t })\nHEAD Responses Drop Headers\nDescription\n\t \nWhen using runserver headers are dropped for head requests, in particular content-length. Because my HEAD request is serving a large body content, I do not include it in the body since it is just dropped.\nHeaders from runserver:\nHeaders({'date': 'Tue, 19 Dec 2023 12:52:23 GMT', 'server': 'WSGIServer/0.2 CPython/3.11.2', 'accept-ranges': 'bytes', 'content-type': \n'text/html; charset=utf-8', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'referrer-policy': 'same-origin', 'cross-or\nigin-opener-policy': 'same-origin'})\nHeaders from uvicorn asgi server:\nHeaders({'date': 'Tue, 19 Dec 2023 12:54:49 GMT', 'server': 'uvicorn', 'accept-ranges': 'bytes', 'content-length': '121283919', 'content-type': 'text/html; charset=utf-8', 'x-frame-options': 'DENY', 'x-content-type-options': 'nosniff', 'referrer-policy': 'same-origin', 'cross-origin-opener-policy': 'same-origin'})\nNotice the uvicorn properly includes the content-length header that was set in the view.\nView source snippet:\nif request.method == 'HEAD':\n\tprint('HEAD Request')\n\treturn HttpResponse(headers={\n\t\t'Accept-Ranges': 'bytes',\n\t\t'Content-Length': str(file_size)\n\t })\n", "hints_text": [["I did some research on the topic and from \u200bthe corresponding RFC it seems that this report is valid and should be accepted: A server MAY send a Content-Length header field in a response to a HEAD request (Section 9.3.2); a server MUST NOT send Content-Length in such a response unless its field value equals the decimal number of octets that would have been sent in the content of a response if the same request had used the GET method. The removal of the Content-Length seems to be located in this code: django/core/servers/basehttp.py diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py index 6afe17cec4..e327974708 100644 a b class ServerHandler(simple_server.ServerHandler): 131131 132132 def cleanup_headers(self): 133133 super().cleanup_headers() 134 if ( 135 self.environ[\"REQUEST_METHOD\"] == \"HEAD\" 136 and \"Content-Length\" in self.headers 137 ): 138 del self.headers[\"Content-Length\"] 139134 # HTTP/1.1 requires support for persistent connections. Send 'close' if 140135 # the content length is unknown to prevent clients from reusing the 141136 # connection. This code was added while fixing ticket #28054, and while it's correct not to return the body of the response, it seems that the Content-Length should be kept. Regression in 8acc433e415cd771f69dfe84e57878a83641e78b", 1702998610.0], ["I don't agree, we intentionally drop the Content-Length. Please check the entire discussion in PR, e.g. this \u200bcomment. As far as I'm aware, the current implementation is RFC compliant. I'd mark this ticket as invalid.", 1703000052.0], ["The use case for this is that your GET request has a large body and so you do not want to have to produce two large bodies, one for the HEAD, one for GET. Instead you want to match the exact headers a GET request would have without producing the body content for the HEAD request. This is essential for producing HTTP Range Requests in Django without a lot of overhead. \u200bhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests As per the docs above, a HTTP HEAD should return Content-Length", 1703002542.0], ["The discussion linked is over Content-Length being returned for the body of the HEAD response, so this is always \"Content-Length: 0\" which doesn't match the GET request. The easiest thing to do at the time was to just remove Content-Length since it is not required. However, for HTTP Range Requests Content-Length is required. So I think the proper thing to do is to allow it if Content-Length is not Zero. If the header is not 0 then that means it was set by the user and should be allowed through.", 1703003261.0], ["something like: def cleanup_headers(self): super().cleanup_headers() if ( self.environ[\"REQUEST_METHOD\"] == \"HEAD\" and \"Content-Length\" in self.headers and str(self.headers[\"Content-Length\"]) == \"0\" ): del self.headers[\"Content-Length\"]", 1703003523.0], ["As for me this is a new feature request for supporting HTTP ranges.", 1703027545.0], ["Replying to Mariusz Felisiak: As for me this is a new feature request for supporting HTTP ranges. I would imagine Content-Length in HEAD requests is also needed for other streaming mechanisms.", 1703054012.0], ["Replying to Mariusz Felisiak: I don't agree, we intentionally drop the Content-Length. Please check the entire discussion in PR, e.g. this \u200bcomment. As far as I'm aware, the current implementation is RFC compliant. I'd mark this ticket as invalid. Thank you Mariusz for the pointer to the specific message from Nick, it provides a very complete and clear reasoning for the change. With that in mind, I agree that this is not a valid bug. Additionally, I agree that the optional return of Content-Length for HEAD requests, enabling specific use cases, should be approached as a new feature, which should be presented and discussed in the \u200bDjango Forum (following \u200bthe documented guidelines for requesting features). Paul, would you be willing to start a new topic explaining the current situation and outlining potential use cases for the feature?", 1703059469.0], ["sounds good", 1703064500.0], ["Reopening based on discussion at: \u200bhttps://forum.djangoproject.com/t/optionally-do-not-drop-content-length-for-head-requests/26305", 1703252408.0], ["I did some research on the topic and from \u200bthe corresponding RFC it seems that this report is valid and should be accepted: A server MAY send a Content-Length header field in a response to a HEAD request (Section 9.3.2); a server MUST NOT send Content-Length in such a response unless its field value equals the decimal number of octets that would have been sent in the content of a response if the same request had used the GET method. The removal of the Content-Length seems to be located in this code: django/core/servers/basehttp.py diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py index 6afe17cec4..e327974708 100644 a b class ServerHandler(simple_server.ServerHandler): 131131 132132 def cleanup_headers(self): 133133 super().cleanup_headers() 134 if ( 135 self.environ[\"REQUEST_METHOD\"] == \"HEAD\" 136 and \"Content-Length\" in self.headers 137 ): 138 del self.headers[\"Content-Length\"] 139134 # HTTP/1.1 requires support for persistent connections. Send 'close' if 140135 # the content length is unknown to prevent clients from reusing the 141136 # connection. This code was added while fixing ticket #28054, and while it's correct not to return the body of the response, it seems that the Content-Length should be kept. Regression in 8acc433e415cd771f69dfe84e57878a83641e78b", 1702998610.0], ["I don't agree, we intentionally drop the Content-Length. Please check the entire discussion in PR, e.g. this \u200bcomment. As far as I'm aware, the current implementation is RFC compliant. I'd mark this ticket as invalid.", 1703000052.0], ["The use case for this is that your GET request has a large body and so you do not want to have to produce two large bodies, one for the HEAD, one for GET. Instead you want to match the exact headers a GET request would have without producing the body content for the HEAD request. This is essential for producing HTTP Range Requests in Django without a lot of overhead. \u200bhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests As per the docs above, a HTTP HEAD should return Content-Length", 1703002542.0], ["The discussion linked is over Content-Length being returned for the body of the HEAD response, so this is always \"Content-Length: 0\" which doesn't match the GET request. The easiest thing to do at the time was to just remove Content-Length since it is not required. However, for HTTP Range Requests Content-Length is required. So I think the proper thing to do is to allow it if Content-Length is not Zero. If the header is not 0 then that means it was set by the user and should be allowed through.", 1703003261.0], ["something like: def cleanup_headers(self): super().cleanup_headers() if ( self.environ[\"REQUEST_METHOD\"] == \"HEAD\" and \"Content-Length\" in self.headers and str(self.headers[\"Content-Length\"]) == \"0\" ): del self.headers[\"Content-Length\"]", 1703003523.0], ["As for me this is a new feature request for supporting HTTP ranges.", 1703027545.0], ["Replying to Mariusz Felisiak: As for me this is a new feature request for supporting HTTP ranges. I would imagine Content-Length in HEAD requests is also needed for other streaming mechanisms.", 1703054012.0], ["Replying to Mariusz Felisiak: I don't agree, we intentionally drop the Content-Length. Please check the entire discussion in PR, e.g. this \u200bcomment. As far as I'm aware, the current implementation is RFC compliant. I'd mark this ticket as invalid. Thank you Mariusz for the pointer to the specific message from Nick, it provides a very complete and clear reasoning for the change. With that in mind, I agree that this is not a valid bug. Additionally, I agree that the optional return of Content-Length for HEAD requests, enabling specific use cases, should be approached as a new feature, which should be presented and discussed in the \u200bDjango Forum (following \u200bthe documented guidelines for requesting features). Paul, would you be willing to start a new topic explaining the current situation and outlining potential use cases for the feature?", 1703059469.0], ["sounds good", 1703064500.0], ["Reopening based on discussion at: \u200bhttps://forum.djangoproject.com/t/optionally-do-not-drop-content-length-for-head-requests/26305", 1703252408.0]], "created_at": "2023-12-24T12:50:28Z"}
{"repo": "django/django", "pull_number": 17639, "instance_id": "django__django-17639", "issue_numbers": ["33277"], "base_commit": "45f778eded9dff59cfdd4dce8720daf87a08cfac", "patch": "diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex f949b31ad25b..544b1f5d0855 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -250,6 +250,9 @@ Tests\n * The new :meth:`.SimpleTestCase.assertNotInHTML` assertion allows testing that\n   an HTML fragment is not contained in the given HTML haystack.\n \n+* In order to enforce test isolation, database connections inside threads are\n+  no longer allowed in :class:`~django.test.SimpleTestCase`.\n+\n URLs\n ~~~~\n \n", "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\nindex b5d426f75fe7..7382f7f0f096 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -10,6 +10,7 @@\n from copy import copy, deepcopy\n from difflib import get_close_matches\n from functools import wraps\n+from unittest import mock\n from unittest.suite import _DebugResult\n from unittest.util import safe_repr\n from urllib.parse import (\n@@ -37,6 +38,7 @@\n from django.core.servers.basehttp import ThreadedWSGIServer, WSGIRequestHandler\n from django.core.signals import setting_changed\n from django.db import DEFAULT_DB_ALIAS, connection, connections, transaction\n+from django.db.backends.base.base import NO_DB_ALIAS, BaseDatabaseWrapper\n from django.forms.fields import CharField\n from django.http import QueryDict\n from django.http.request import split_domain_port, validate_host\n@@ -255,6 +257,13 @@ def _add_databases_failures(cls):\n                 }\n                 method = getattr(connection, name)\n                 setattr(connection, name, _DatabaseFailure(method, message))\n+        cls.enterClassContext(\n+            mock.patch.object(\n+                BaseDatabaseWrapper,\n+                \"ensure_connection\",\n+                new=cls.ensure_connection_patch_method(),\n+            )\n+        )\n \n     @classmethod\n     def _remove_databases_failures(cls):\n@@ -266,6 +275,28 @@ def _remove_databases_failures(cls):\n                 method = getattr(connection, name)\n                 setattr(connection, name, method.wrapped)\n \n+    @classmethod\n+    def ensure_connection_patch_method(cls):\n+        real_ensure_connection = BaseDatabaseWrapper.ensure_connection\n+\n+        def patched_ensure_connection(self, *args, **kwargs):\n+            if (\n+                self.connection is None\n+                and self.alias not in cls.databases\n+                and self.alias != NO_DB_ALIAS\n+            ):\n+                # Connection has not yet been established, but the alias is not allowed.\n+                message = cls._disallowed_database_msg % {\n+                    \"test\": f\"{cls.__module__}.{cls.__qualname__}\",\n+                    \"alias\": self.alias,\n+                    \"operation\": \"threaded connections\",\n+                }\n+                return _DatabaseFailure(self.ensure_connection, message)()\n+\n+            real_ensure_connection(self, *args, **kwargs)\n+\n+        return patched_ensure_connection\n+\n     def __call__(self, result=None):\n         \"\"\"\n         Wrapper around default __call__ method to perform common Django test\ndiff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex ce78ffc0084b..65a782bf87b6 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import threading\n import unittest\n import warnings\n from io import StringIO\n@@ -2093,6 +2094,29 @@ def test_disallowed_database_chunked_cursor_queries(self):\n         with self.assertRaisesMessage(DatabaseOperationForbidden, expected_message):\n             next(Car.objects.iterator())\n \n+    def test_disallowed_thread_database_connection(self):\n+        expected_message = (\n+            \"Database threaded connections to 'default' are not allowed in \"\n+            \"SimpleTestCase subclasses. Either subclass TestCase or TransactionTestCase\"\n+            \" to ensure proper test isolation or add 'default' to \"\n+            \"test_utils.tests.DisallowedDatabaseQueriesTests.databases to \"\n+            \"silence this failure.\"\n+        )\n+\n+        exceptions = []\n+\n+        def thread_func():\n+            try:\n+                Car.objects.first()\n+            except DatabaseOperationForbidden as e:\n+                exceptions.append(e)\n+\n+        t = threading.Thread(target=thread_func)\n+        t.start()\n+        t.join()\n+        self.assertEqual(len(exceptions), 1)\n+        self.assertEqual(exceptions[0].args[0], expected_message)\n+\n \n class AllowedDatabaseQueriesTests(SimpleTestCase):\n     databases = {\"default\"}\n@@ -2103,6 +2127,14 @@ def test_allowed_database_queries(self):\n     def test_allowed_database_chunked_cursor_queries(self):\n         next(Car.objects.iterator(), None)\n \n+    def test_allowed_threaded_database_queries(self):\n+        def thread_func():\n+            next(Car.objects.iterator(), None)\n+\n+        t = threading.Thread(target=thread_func)\n+        t.start()\n+        t.join()\n+\n \n class DatabaseAliasTests(SimpleTestCase):\n     def setUp(self):\n", "problem_statement": "SimpleTestCase does not block database connections in threads\nDescription\n\t\t\n(last modified by Daniel Hahler)\t\t\nDue to ConnectionHandler's connections being thread-local [1] new connections will be used in new threads, which then do not have been patched for disallowed methods [2].\nGiven test_simpletestcase.py:\nimport threading\nfrom django.db import connection\nfrom django.test import SimpleTestCase\nclass MySimpleTestCase(SimpleTestCase):\n\tdef test_this(self):\n\t\ttry:\n\t\t\twith connection.cursor() as cursor:\n\t\t\t\tcursor.execute(\"SELECT 1\")\n\t\t\traise Exception(\"should have failed\")\n\t\texcept AssertionError:\n\t\t\tpass\n\t\tres = []\n\t\tdef thread_func():\n\t\t\tres.append(1)\n\t\t\ttry:\n\t\t\t\twith connection.cursor() as cursor:\n\t\t\t\t\tcursor.execute(\"SELECT 1\")\n\t\t\t\traise Exception(\"should have failed\")\n\t\t\texcept AssertionError:\n\t\t\t\tpass\n\t\t\tres.append(2)\n\t\tt = threading.Thread(target=thread_func)\n\t\tt.start()\n\t\tt.join()\n\t\tassert res == [1, 2], res\n./manage.py test test_simpletestcase.py fails like this:\nException in thread Thread-1:\nTraceback (most recent call last):\n File \"/usr/lib/python3.9/threading.py\", line 973, in _bootstrap_inner\n\tself.run()\n File \"/usr/lib/python3.9/threading.py\", line 910, in run\n\tself._target(*self._args, **self._kwargs)\n File \"\u2026/test_simpletestcase.py\", line 23, in thread_func\n\traise Exception(\"should have failed\")\nException: should have failed\nF\n======================================================================\nFAIL: test_this (test_simpletestcase.MySimpleTestCase)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"\u2026/test_simpletestcase.py\", line 31, in test_this\n\tassert res == [1, 2], res\nAssertionError: [1]\n----------------------------------------------------------------------\nRan 1 test in 0.006s\nFAILED (failures=1)\n(Note that there is some handling of connection.settings_dict for workers of the test runner, which is only slightly related: \u200bhttps://github.com/django/django/blob/dfa1145a22042dcf9e504a5a7edd5557e3e0d07c/django/test/runner.py#L327-L335)\nA possible solution might be to use the existing \u200bconnection_created signal to raise an exception when a connections was created (although that would happen only after the fact - a new pre-connect signal could be used/added for this).\nGiven that the test DB names are not prefixed with test_ with SimpleTestCase you might accidentally change the production DB from within your tests when something like a ThreadPoolExecutor is being used when mixing sync with async etc.\nNote: pytest-django monkeypatches django.db.backends.base.base.BaseDatabaseWrapper.ensure_connection to block DB access, which appears to work better in this regard (across threads).\n1: \u200bhttps://github.com/django/django/blob/dfa1145a22042dcf9e504a5a7edd5557e3e0d07c/django/utils/connection.py#L41\n2: \u200bhttps://github.com/django/django/blob/dfa1145a22042dcf9e504a5a7edd5557e3e0d07c/django/test/testcases.py#L183\n", "hints_text": [["Hi Daniel, thanks for this \u2014 Nice report. (Was momentarily confused by the footnotes linking to the initial commit, e.g. [1] :) Yes, I think SimpleTestCase likely should do the right thing here.", 1637027556.0], ["Hey Sulabh, I see you assigned yourself the ticket, that's great! I've started a \u200bPR some months ago, feel free to check it out if it can give you some inspiration :)", 1693658076.0], ["Hello David, Thank you for getting the ball rolling on this feature! I've looked at the PR, and it's impressive. I'll definitely use it as inspiration to continue the work. If you have any specific insights or tips based on your progress so far, please feel free to share. I'm looking forward to working on this together! Replying to David Wobrock: Hey Sulabh, I see you assigned yourself the ticket, that's great! I've started a \u200bPR some months ago, feel free to check it out if it can give you some inspiration :)", 1693682618.0], ["Hi David, I've been grappling with this issue for a while now, and I haven't made much progress. Given your expertise in this area, I'm reaching out for some much-needed guidance. To address this, I've been contemplating the idea of implementing a \"pre-signal\" solution. However, I must admit that I'm currently stuck, and I'm unsure about how to move forward. I had initially considered intervening at the BaseDataBaseWrapper.connect() level, but I haven't been able to find a clear and effective path for implementation. Since you have experience in related areas of this issue, I was hoping you could provide some insights. What should I be looking for, or are there alternative approaches that might be more suitable? Thank you! Replying to David Wobrock: Hey Sulabh, I see you assigned yourself the ticket, that's great! I've started a \u200bPR some months ago, feel free to check it out if it can give you some inspiration :)", 1694113471.0], ["I do not think I have that much experience. How did you implement the \"pre-signal\" solution? Do you have an open PR/branch to check out the code :) And did you have a look on the \u200bpatching method approach, and play around with it? I feel like it could be a working path - it mainly requires some test fixing. Replying to Sulabh Katila: Hi David, I've been grappling with this issue for a while now, and I haven't made much progress. Given your expertise in this area, I'm reaching out for some much-needed guidance. To address this, I've been contemplating the idea of implementing a \"pre-signal\" solution. However, I must admit that I'm currently stuck, and I'm unsure about how to move forward. I had initially considered intervening at the BaseDataBaseWrapper.connect() level, but I haven't been able to find a clear and effective path for implementation. Since you have experience in related areas of this issue, I was hoping you could provide some insights. What should I be looking for, or are there alternative approaches that might be more suitable? Thank you! Replying to David Wobrock: Hey Sulabh, I see you assigned yourself the ticket, that's great! I've started a \u200bPR some months ago, feel free to check it out if it can give you some inspiration :)", 1696157853.0], ["Hey Sulabh, I took a few more minutes to dig into the issue and I think we are close to a fix :) djangoci.com is down at the time of writing, so I'm missing the complete test suite, but it looks quite promising for now! We just need to fix a few tests. => \u200bPR", 1696162556.0], ["I picked up the existing patch and opened a new \u200bPR.", 1703350343.0]], "created_at": "2023-12-22T19:33:40Z"}
{"repo": "django/django", "pull_number": 17635, "instance_id": "django__django-17635", "issue_numbers": ["35022"], "base_commit": "6c08dba5176606e8a62dd108bb6c9467d678d2f4", "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d616cafb4597..df153da7e5a2 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -1017,7 +1017,10 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n                 from_model._meta.get_field(field).column for field in self.old_fields\n             ]\n             matching_index_name = schema_editor._constraint_names(\n-                from_model, column_names=columns, index=True\n+                from_model,\n+                column_names=columns,\n+                index=True,\n+                unique=False,\n             )\n             if len(matching_index_name) != 1:\n                 raise ValueError(\n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 7643111c348b..2d9d3a38f05c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -3626,6 +3626,26 @@ def test_rename_index_unknown_unnamed_index(self):\n             with self.assertRaisesMessage(ValueError, msg):\n                 operation.database_forwards(app_label, editor, project_state, new_state)\n \n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_rename_index_unnamed_index_with_unique_index(self):\n+        app_label = \"test_rninuniwui\"\n+        project_state = self.set_up_test_model(\n+            app_label,\n+            multicol_index=True,\n+            unique_together=True,\n+        )\n+        table_name = app_label + \"_pony\"\n+        self.assertIndexNotExists(table_name, \"new_pony_test_idx\")\n+        operation = migrations.RenameIndex(\n+            \"Pony\", new_name=\"new_pony_test_idx\", old_fields=[\"pink\", \"weight\"]\n+        )\n+        new_state = project_state.clone()\n+        operation.state_forwards(app_label, new_state)\n+        # Rename index.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n     def test_add_index_state_forwards(self):\n         project_state = self.set_up_test_model(\"test_adinsf\")\n         index = models.Index(fields=[\"pink\"], name=\"test_adinsf_pony_pink_idx\")\n", "problem_statement": "RenameIndex crashes when there is a unique index on the same fields.\nDescription\n\t \nAs index_together is obsolated, i changed in my models.py:\n-\t\tindex_together = [\n-\t\t\t('name', 'host',)\n-\t\t]\n+\t\tindexes = [models.Index(fields=[\"name\", \"host\"])]\nmakemigrations created what seems a legit migration:\n# Generated by Django 5.0.1 on 2023-12-06 12:46\nfrom django.db import migrations\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t('main', '0004_auto_20200327_0040'),\n\t]\n\toperations = [\n\t\tmigrations.RenameIndex(\n\t\t\tmodel_name='list',\n\t\t\tnew_name='main_list_name_cbdf64_idx',\n\t\t\told_fields=('name', 'host'),\n\t\t),\n\t]\nBut the actual migration fails badly:\n% ./manage.py migrate\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, flatpages, main, registration, sessions, sites\nRunning migrations:\n Applying main.0005_rename_list_name_host_main_list_name_cbdf64_idx...\nTraceback (most recent call last):\n File \"/home/orzel/hg/xxx/./manage.py\", line 8, in <module>\n\texecute_from_command_line(sys.argv)\n File \"/usr/lib/python3.11/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/usr/lib/python3.11/site-packages/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/usr/lib/python3.11/site-packages/django/core/management/base.py\", line 412, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/usr/lib/python3.11/site-packages/django/core/management/base.py\", line 458, in execute\n\toutput = self.handle(*args, **options)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.11/site-packages/django/core/management/base.py\", line 106, in wrapper\n\tres = handle_func(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.11/site-packages/django/core/management/commands/migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n\t\t\t^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.11/site-packages/django/db/migrations/executor.py\", line 252, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.11/site-packages/django/db/migrations/migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"/usr/lib/python3.11/site-packages/django/db/migrations/operations/models.py\", line 1050, in database_forwards\n\traise ValueError(\nValueError: Found wrong number (2) of indexes for main_list(name, host).\nI'm currently testing and the database is sqlite3. Browsing the sqlite file i can see 3 indices on this table: one unrelated (id) and two for name_host : one \"idx\" and one \"uniq\".\nMy bet is that having both an index_together and a unique_together is ... bad ? (my bad?).\nOr maybe it just freaks out django ? It might be specific to sqlite.\n", "hints_text": [["Hello, thank you for your report. I have tried to reproduce this with a minimal example using the data you showed above, but I can't reproduce (I used Django 4.2 since that's the version where the deprecation started, and I also tested on Django 5.0). Questions: Did you modified your models.py, generated the migration and migrated using the same Django version? If yes, which one? You refer to a unique_together index which you haven't provided any details for, could you please share minimal but complete models.py to reproduce the issue? Lastly, if you are unsure about whether your models are doing the right thing or not, you could also seek assistance from one of the Django support channels where there are many friendly people that can help you: \u200bhttps://www.djangoproject.com/community/ Closing as worksforme for now, until further details are provided.", 1701859876.0], ["I created a minimal exemple. All of this is done using django 4.2 (but i'm pretty sure it does the same with django 5.0): How to use: ./manage.py makemigrations main && ./manage.py migrate # create initial migrations vi main/models.py # comment index_together, uncomment indexes = ./manage.py makemigrations main && ./manage.py migrate # crash", 1701868566.0], ["minimal example for reproducing the bug", 1701868601.0], ["Thanks for the report. The following patch fixes this for me: django/db/migrations/operations/models.py diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py index d616cafb45..204174f911 100644 a b class RenameIndex(IndexOperation): 10171017 from_model._meta.get_field(field).column for field in self.old_fields 10181018 ] 10191019 matching_index_name = schema_editor._constraint_names( 1020 from_model, column_names=columns, index=True 1020 from_model, column_names=columns, index=True, unique=False, 10211021 ) 10221022 if len(matching_index_name) != 1: 10231023 raise ValueError( Does it work for you?", 1701901954.0], ["I dont understand fully what's happening, but yes, it fixes it for me. Congrats ! I tested with django 5.0 and the line in the file was slightly different.", 1701930726.0], ["is someone working on a merge request for this? if not, can I try submitting this patch?", 1701945543.0], ["Replying to Yash Kumar Verma: is someone working on a merge request for this? if not, can I try submitting this patch? Yes you can, please remember that a regression test is required.", 1701947544.0], ["Replying to Thomas Capricelli: I created a minimal exemple. All of this is done using django 4.2 (but i'm pretty sure it does the same with django 5.0): How to use: ./manage.py makemigrations main && ./manage.py migrate # create initial migrations vi main/models.py # comment index_together, uncomment indexes = ./manage.py makemigrations main && ./manage.py migrate # crash Hey, I tried to reproduce this with your minimal example with Django 5.0 and Django 4.2. However, I couldn't reproduce it. Maybe the example file is missing something that was producing this error for you? I'm not sure", 1702376771.0], ["Opened PRs for 5.0 \u200bhttps://github.com/django/django/pull/17632 and 4.2 \u200bhttps://github.com/django/django/pull/17633 using Mariusz's fix :)", 1703172007.0], ["\u200bPR against main.", 1703213616.0], ["In 70456610: Fixed #35022 -- Fixed RenameIndex() crash on unnamed indexes if exists unique constraint on the same fields.", 1703226335.0]], "created_at": "2023-12-22T08:50:32Z"}
{"repo": "django/django", "pull_number": 17634, "instance_id": "django__django-17634", "issue_numbers": ["35050"], "base_commit": "623597c786e89daae15a52dccfcdded7f808da9f", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 7166b8cb5d96..a79d66eb21e9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -94,14 +94,16 @@ def get_child_with_renamed_prefix(prefix, replacement, child):\n         return rename_prefix_from_q(prefix, replacement, child)\n     if isinstance(child, tuple):\n         lhs, rhs = child\n-        lhs = lhs.replace(prefix, replacement, 1)\n+        if lhs.startswith(prefix + LOOKUP_SEP):\n+            lhs = lhs.replace(prefix, replacement, 1)\n         if not isinstance(rhs, F) and hasattr(rhs, \"resolve_expression\"):\n             rhs = get_child_with_renamed_prefix(prefix, replacement, rhs)\n         return lhs, rhs\n \n     if isinstance(child, F):\n         child = child.copy()\n-        child.name = child.name.replace(prefix, replacement, 1)\n+        if child.name.startswith(prefix + LOOKUP_SEP):\n+            child.name = child.name.replace(prefix, replacement, 1)\n     elif hasattr(child, \"resolve_expression\"):\n         child = child.copy()\n         child.set_source_expressions(\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex 592454e89344..15b735b42ee1 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -29,3 +29,6 @@ Bugfixes\n   overflow the page and become non-interactive (:ticket:`35012`).\n \n * Added compatibility for ``oracledb`` 2.0.0 (:ticket:`35054`).\n+\n+* Fixed a regression in Django 5.0 where querysets referenced incorrect field\n+  names from ``FilteredRelation()`` (:ticket:`35050`).\n", "test_patch": "diff --git a/tests/filtered_relation/models.py b/tests/filtered_relation/models.py\nindex d34a86305fcc..765d4956e2a3 100644\n--- a/tests/filtered_relation/models.py\n+++ b/tests/filtered_relation/models.py\n@@ -36,6 +36,8 @@ class Book(models.Model):\n         related_query_name=\"book\",\n     )\n     editor = models.ForeignKey(Editor, models.CASCADE)\n+    number_editor = models.IntegerField(default=-1)\n+    editor_number = models.IntegerField(default=-2)\n     generic_author = GenericRelation(Author)\n     state = models.CharField(max_length=9, choices=STATES, default=AVAILABLE)\n \ndiff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex 5a21a47f369f..19714e844331 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -792,6 +792,42 @@ def test_conditional_expression_with_multiple_fields(self):\n         ).filter(my_books__isnull=True)\n         self.assertSequenceEqual(qs, [])\n \n+    def test_conditional_expression_rhs_contains_relation_name(self):\n+        qs = Book.objects.annotate(\n+            rel=FilteredRelation(\n+                \"editor\",\n+                condition=Q(id=1 * F(\"number_editor\")),\n+            )\n+        ).filter(rel__isnull=True)\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_conditional_expression_rhs_startswith_relation_name(self):\n+        qs = Book.objects.annotate(\n+            rel=FilteredRelation(\n+                \"editor\",\n+                condition=Q(id=1 * F(\"editor_number\")),\n+            )\n+        ).filter(rel__isnull=True)\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_conditional_expression_lhs_startswith_relation_name(self):\n+        qs = Book.objects.annotate(\n+            rel=FilteredRelation(\n+                \"editor\",\n+                condition=Q(editor_number__gt=1),\n+            )\n+        ).filter(rel__isnull=True)\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_conditional_expression_lhs_contains_relation_name(self):\n+        qs = Book.objects.annotate(\n+            rel=FilteredRelation(\n+                \"editor\",\n+                condition=Q(number_editor__gt=1),\n+            )\n+        ).filter(rel__isnull=True)\n+        self.assertSequenceEqual(qs, [])\n+\n \n class FilteredRelationAggregationTests(TestCase):\n     @classmethod\n", "problem_statement": "Issue filtering on FilteredRelation with F object\nDescription\n\t\t\n(last modified by Mark Zorn)\t\t\nI just started trying to upgrade an existing project from Django 4.2.8 to Django 5 and ran across the following issue.\nI have two classes:\nclass DashboardSuggestion(BaseModel):\n\tactive = models.BooleanField(default=True)\n\ttitle = models.CharField(max_length=50)\n\tbody = models.CharField(max_length=80)\n\tmax_dismissals = models.IntegerField(default=1)\n\tdays_between_dismissals = models.IntegerField(null=True, blank=True)\n\tobjects = DashboardSuggestionQuerySet.as_manager()\n\tclass Meta:\n\t\tdb_table = 'dashboard_suggestion'\nclass DashboardSuggestionDismiss(BaseModel):\n\tsuggestion = models.ForeignKey('suggestions.DashboardSuggestion', on_delete=models.CASCADE, related_name='dismissals')\n\tuser = models.ForeignKey('users.User', on_delete=models.SET_NULL, null=True, blank=True)\n\tcompany = models.ForeignKey('companies.Company', on_delete=models.SET_NULL, null=True, blank=True)\n\tcount = models.IntegerField(default=1)\n\tclass Meta:\n\t\tdb_table = 'dashboard_suggestion_dismiss'\n\t\tunique_together = ['user', 'suggestion', 'company']\nAnd the following QuerySet:\nclass DashboardSuggestionQuerySet(models.QuerySet):\n\tdef for_dashboard(self, user, company):\n\t\tqueryset = self.annotate(\n\t\t\tis_dismissed=FilteredRelation(\n\t\t\t\t'dismissals',\n\t\t\t\tcondition=(\n\t\t\t\t\t\tQ(dismissals__user=user)\n\t\t\t\t\t\t& Q(dismissals__company=company)\n\t\t\t\t\t\t&\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tQ(dismissals__count__gte=F('max_dismissals'))\n\t\t\t\t\t\t\t| Q(dismissals__updated__gt=timezone.now() - timezone.timedelta(days=1) * F('days_between_dismissals'))\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t).filter(\n\t\t\tQ(is_dismissed__isnull=True),\n\t\t)\nWhen I attempt to call DashboardSuggestion.objects.for_dashboard(user, company) I receive the following error:\nCannot resolve keyword 'days_between_is_dismissed' into field. Choices are...\nThe string days_between_is_dismissed does not exist anywhere in my code. I do not see where it is being used or generated at all.\nTrying to do a bit of debugging, somehow the F('days_between_dismissals') in the FilteredRelation condition is getting converted to F(days_between_is_dismissed) but I have not yet found the exact place that is happening.\nThis code was working as I expected in Django 4.2.\nPlease let me know if I can supply any additional information.\n", "hints_text": [["Thanks for the report! Regression in 59f475470494ce5b8cbff816b1e5dafcbd10a3a3.", 1702909187.0]], "created_at": "2023-12-21T22:22:07Z"}
{"repo": "django/django", "pull_number": 17631, "instance_id": "django__django-17631", "issue_numbers": ["35008"], "base_commit": "3ec15b0bcf03cfa397453910d0087fdb13f02189", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex 2f7557fa1b14..aaa9c3441a55 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -482,8 +482,13 @@ textarea {\n     vertical-align: top;\n }\n \n-input[type=text], input[type=password], input[type=email], input[type=url],\n-input[type=number], input[type=tel], textarea, select, .vTextField {\n+/*\n+Minifiers remove the default (text) \"type\" attribute from \"input\" HTML tags.\n+Add input:not([type]) to make the CSS stylesheet work the same.\n+*/\n+input:not([type]), input[type=text], input[type=password], input[type=email],\n+input[type=url], input[type=number], input[type=tel], textarea, select,\n+.vTextField {\n     border: 1px solid var(--border-color);\n     border-radius: 4px;\n     padding: 5px 6px;\n@@ -492,9 +497,13 @@ input[type=number], input[type=tel], textarea, select, .vTextField {\n     background-color: var(--body-bg);\n }\n \n-input[type=text]:focus, input[type=password]:focus, input[type=email]:focus,\n-input[type=url]:focus, input[type=number]:focus, input[type=tel]:focus,\n-textarea:focus, select:focus, .vTextField:focus {\n+/*\n+Minifiers remove the default (text) \"type\" attribute from \"input\" HTML tags.\n+Add input:not([type]) to make the CSS stylesheet work the same.\n+*/\n+input:not([type]):focus, input[type=text]:focus, input[type=password]:focus,\n+input[type=email]:focus, input[type=url]:focus, input[type=number]:focus,\n+input[type=tel]:focus, textarea:focus, select:focus, .vTextField:focus {\n     border-color: var(--body-quiet-color);\n }\n \ndiff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex bb539456d339..b9553415d71a 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -174,6 +174,11 @@ input[type=\"submit\"], button {\n         font-size: 0.875rem;\n     }\n \n+    /*\n+    Minifiers remove the default (text) \"type\" attribute from \"input\" HTML\n+    tags. Add input:not([type]) to make the CSS stylesheet work the same.\n+    */\n+    .form-row input:not([type]),\n     .form-row input[type=text],\n     .form-row input[type=password],\n     .form-row input[type=email],\n", "test_patch": "", "problem_statement": "Minifiers break django contrib admins UI\nDescription\n\t \nI have been using a HTML minifier on django's output and it breaks some UI elements in django's shipped admin by stripping some default attributes, mainly by removing type=\"text\" on inputs, since it is a default html input attribute.\nThis affect anyone who would use a minifier either as middleware or as CDN feature, and the logic is clear, you don't have to keep default html attribute.\nThe problem is that django repo CSS rules don't take that in account and it assume for all attributes to be present.\nDjango would need to have a CSS rule stating input:not([type]), input[type=text] instead of just input[type=text] for the minified version to match the original UI.\nI have found only three places in django.contrib.admin that would need a CSS update, so I believe it is an easy fix:\n// base.css:485\ninput:not([type]),\n...\n{\n\tborder: 1px solid var(--border-color);\n\tborder-radius: 4px;\n\tpadding: 5px 6px;\n\tmargin-top: 0;\n\tcolor: var(--body-fg);\n\tbackground-color: var(--body-bg);\n}\n// base.css:495\ninput:not([type]):focus,\n...\n{\n\tborder-color: var(--body-quiet-color);\n}\n// responsive.css:177\n.form-row input:not([type]),\n...\n{\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 6px 8px;\n\tmin-height: 2.25rem;\n\tfont-size: 0.875rem;\n}\nI create this ticket after having discussed the issue here \u200bhttps://github.com/adamchainz/django-minify-html/issues/165\n", "hints_text": [["It was already proposed, check out \u200bcomment. I'm pretty sure that we will remove them in some cleanup PR titled \"Removed unused CSS rules ...\". We normally don't add CSS rules not used by Django itself.", 1701343871.0], ["Tentatively accepted.", 1701642240.0], ["What about re-opening this PR then? \u200bhttps://github.com/django/django/pull/17183", 1703130653.0], ["Rapha\u00ebl, feel-free to send a new PR (based on PR17183). We need to at least add a comment to the CSS files.", 1703133612.0], ["New PR with added comments \u200bhttps://github.com/django/django/pull/17631", 1703135943.0]], "created_at": "2023-12-21T11:05:33Z"}
{"repo": "django/django", "pull_number": 17630, "instance_id": "django__django-17630", "issue_numbers": ["35054"], "base_commit": "c709a748ce6e0759e415a0e3544e0f4ad3d30f8b", "patch": "diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py\nindex a5e7f97df01c..2d91468d25b2 100644\n--- a/django/db/backends/oracle/base.py\n+++ b/django/db/backends/oracle/base.py\n@@ -453,7 +453,7 @@ def _get_decimal_converter(precision, scale):\n     def _output_type_handler(cursor, name, defaultType, length, precision, scale):\n         \"\"\"\n         Called for each db column fetched from cursors. Return numbers as the\n-        appropriate Python type.\n+        appropriate Python type, and NCLOB with JSON as strings.\n         \"\"\"\n         if defaultType == Database.NUMBER:\n             if scale == -127:\n@@ -483,6 +483,10 @@ def _output_type_handler(cursor, name, defaultType, length, precision, scale):\n                 arraysize=cursor.arraysize,\n                 outconverter=outconverter,\n             )\n+        # oracledb 2.0.0+ returns NLOB columns with IS JSON constraints as\n+        # dicts. Use a no-op converter to avoid this.\n+        elif defaultType == Database.DB_TYPE_NCLOB:\n+            return cursor.var(Database.DB_TYPE_NCLOB, arraysize=cursor.arraysize)\n \n     def _format_params(self, params):\n         try:\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex 79fbf9a0a18b..592454e89344 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -27,3 +27,5 @@ Bugfixes\n \n * Fixed a regression in Django 5.0 where admin fields on the same line could\n   overflow the page and become non-interactive (:ticket:`35012`).\n+\n+* Added compatibility for ``oracledb`` 2.0.0 (:ticket:`35054`).\n", "test_patch": "", "problem_statement": "Add support for oracledb 2.0.\nDescription\n\t \nThe Oracle back-end doesn't work with \u200boracledb==2.0.0, because it changed converters for JSONField and now returns dict instead of str:\n\"Added support for fetching VARCHAR2 and LOB columns which contain JSON (and have the IS JSON check constraint enabled) in the same way as columns of type JSON (which requires Oracle Database 21c or higher) are fetched. In thick mode this requires Oracle Client 19c or higher. The attribute oracledb.__future__.old_json_col_as_obj must be set to the value True for this behavior to occur. In version 2.0 this will become the normal behavior and setting this attribute will no longer be needed.\"\nCheck out \u200bChristopher's article.\n", "hints_text": [["\u200bPR", 1703114674.0]], "created_at": "2023-12-21T05:24:15Z"}
{"repo": "django/django", "pull_number": 17629, "instance_id": "django__django-17629", "issue_numbers": ["35005"], "base_commit": "c709a748ce6e0759e415a0e3544e0f4ad3d30f8b", "patch": "diff --git a/django/contrib/gis/gdal/libgdal.py b/django/contrib/gis/gdal/libgdal.py\nindex e3beb62a7922..1aa7eecfdd7a 100644\n--- a/django/contrib/gis/gdal/libgdal.py\n+++ b/django/contrib/gis/gdal/libgdal.py\n@@ -22,6 +22,7 @@\n elif os.name == \"nt\":\n     # Windows NT shared libraries\n     lib_names = [\n+        \"gdal308\",\n         \"gdal307\",\n         \"gdal306\",\n         \"gdal305\",\n@@ -36,6 +37,7 @@\n     lib_names = [\n         \"gdal\",\n         \"GDAL\",\n+        \"gdal3.8.0\",\n         \"gdal3.7.0\",\n         \"gdal3.6.0\",\n         \"gdal3.5.0\",\ndiff --git a/docs/ref/contrib/gis/install/geolibs.txt b/docs/ref/contrib/gis/install/geolibs.txt\nindex 46cf04c422a3..c12f65f34afb 100644\n--- a/docs/ref/contrib/gis/install/geolibs.txt\n+++ b/docs/ref/contrib/gis/install/geolibs.txt\n@@ -5,16 +5,16 @@ Installing Geospatial libraries\n GeoDjango uses and/or provides interfaces for the following open source\n geospatial libraries:\n \n-========================  ====================================  ================================  ======================================\n+========================  ====================================  ================================  ===========================================\n Program                   Description                           Required                          Supported Versions\n-========================  ====================================  ================================  ======================================\n+========================  ====================================  ================================  ===========================================\n :doc:`GEOS <../geos>`     Geometry Engine Open Source           Yes                               3.12, 3.11, 3.10, 3.9, 3.8\n `PROJ`_                   Cartographic Projections library      Yes (PostgreSQL and SQLite only)  9.x, 8.x, 7.x, 6.x\n-:doc:`GDAL <../gdal>`     Geospatial Data Abstraction Library   Yes                               3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0\n+:doc:`GDAL <../gdal>`     Geospatial Data Abstraction Library   Yes                               3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0\n :doc:`GeoIP <../geoip2>`  IP-based geolocation library          No                                2\n `PostGIS`__               Spatial extensions for PostgreSQL     Yes (PostgreSQL only)             3.4, 3.3, 3.2, 3.1, 3.0\n `SpatiaLite`__            Spatial extensions for SQLite         Yes (SQLite only)                 5.1, 5.0, 4.3\n-========================  ====================================  ================================  ======================================\n+========================  ====================================  ================================  ===========================================\n \n Note that older or more recent versions of these libraries *may* also work\n totally fine with GeoDjango. Your mileage may vary.\n@@ -34,6 +34,7 @@ totally fine with GeoDjango. Your mileage may vary.\n     GDAL 3.5.0 2022-05-13\n     GDAL 3.6.0 2022-11-03\n     GDAL 3.7.0 2023-05-10\n+    GDAL 3.8.0 2023-11-13\n     PostGIS 3.0.0 2019-10-20\n     PostGIS 3.1.0 2020-12-18\n     PostGIS 3.2.0 2021-12-18\n", "test_patch": "", "problem_statement": "Confirm support for GDAL 3.8\nDescription\n\t \nSee \u200brelease notes and previous upgrade to 3.7 in #34572.\n", "hints_text": [], "created_at": "2023-12-20T18:25:14Z"}
{"repo": "django/django", "pull_number": 17628, "instance_id": "django__django-17628", "issue_numbers": ["35048"], "base_commit": "d4c583682e7afc2b4e953b8c85af17f1c1514ba9", "patch": "diff --git a/docs/ref/contrib/gis/install/geolibs.txt b/docs/ref/contrib/gis/install/geolibs.txt\nindex ca47981f9590..079737191257 100644\n--- a/docs/ref/contrib/gis/install/geolibs.txt\n+++ b/docs/ref/contrib/gis/install/geolibs.txt\n@@ -9,7 +9,7 @@ geospatial libraries:\n Program                   Description                           Required                          Supported Versions\n ========================  ====================================  ================================  ===========================================\n :doc:`GEOS <../geos>`     Geometry Engine Open Source           Yes                               3.12, 3.11, 3.10, 3.9, 3.8\n-`PROJ`_                   Cartographic Projections library      Yes (PostgreSQL and SQLite only)  9.x, 8.x, 7.x, 6.x, 5.x\n+`PROJ`_                   Cartographic Projections library      Yes (PostgreSQL and SQLite only)  9.x, 8.x, 7.x, 6.x\n :doc:`GDAL <../gdal>`     Geospatial Data Abstraction Library   Yes                               3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.4\n :doc:`GeoIP <../geoip2>`  IP-based geolocation library          No                                2\n `PostGIS`__               Spatial extensions for PostgreSQL     Yes (PostgreSQL only)             3.4, 3.3, 3.2, 3.1, 3.0\n@@ -45,7 +45,6 @@ totally fine with GeoDjango. Your mileage may vary.\n     PROJ 8.0.0 2021-03-01\n     PROJ 7.0.0 2020-02-25\n     PROJ 6.0.0 2019-02-26\n-    PROJ 5.0.0 2018-03-01\n     SpatiaLite 4.3.0 2015-09-07\n     SpatiaLite 5.0.0 2020-08-23\n     SpatiaLite 5.1.0 2023-08-04\n@@ -191,8 +190,7 @@ PROJ < 7.x) [#]_:\n     $ wget https://download.osgeo.org/proj/proj-data-X.Y.tar.gz\n \n Next, untar the source code archive, and extract the datum shifting files in the\n-``data`` subdirectory (use ``nad`` subdirectory for PROJ < 6.x). This must be\n-done *prior* to configuration:\n+``data`` subdirectory. This must be done *prior* to configuration:\n \n .. code-block:: shell\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 1009ffe73969..6aeee65e90d5 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -271,6 +271,8 @@ backends.\n \n * Support for PostGIS 2.5 is removed.\n \n+* Support for PROJ < 6 is removed.\n+\n Dropped support for MariaDB 10.4\n --------------------------------\n \n", "test_patch": "", "problem_statement": "Drop support for Proj 5.x\nDescription\n\t \nProj 5.x was released in March-2018. By the time Django 5.1 is released 5.x will be more than 5 years old, therefore remove support for this version. \nThis will mean Proj 6.x will become the lowest supported version with the 6.0.0 release in February-2019 with the final release in that series (6.3.2) being in May-2020. Django 5.1 should therefore continue to support the 6.x series. \n\u200bhttps://github.com/django/django/blob/08306bad57761b5eb176894649ac7d4e735c52dd/docs/ref/contrib/gis/install/geolibs.txt\n", "hints_text": [["Accepting following the conversation in the \u200bDjango Forum.", 1702887608.0], ["In fa1d0b11: Fixed #35048 -- Dropped support for PROJ 5.x.", 1703083298.0]], "created_at": "2023-12-20T18:15:50Z"}
{"repo": "django/django", "pull_number": 17627, "instance_id": "django__django-17627", "issue_numbers": ["35049"], "base_commit": "fa1d0b11e4cd5e54bdd9bdce99fbf0efff948ece", "patch": "diff --git a/django/contrib/gis/gdal/libgdal.py b/django/contrib/gis/gdal/libgdal.py\nindex 30cba0f14f63..e3beb62a7922 100644\n--- a/django/contrib/gis/gdal/libgdal.py\n+++ b/django/contrib/gis/gdal/libgdal.py\n@@ -30,7 +30,6 @@\n         \"gdal302\",\n         \"gdal301\",\n         \"gdal300\",\n-        \"gdal204\",\n     ]\n elif os.name == \"posix\":\n     # *NIX library names.\n@@ -45,7 +44,6 @@\n         \"gdal3.2.0\",\n         \"gdal3.1.0\",\n         \"gdal3.0.0\",\n-        \"gdal2.4.0\",\n     ]\n else:\n     raise ImproperlyConfigured('GDAL is unsupported on OS \"%s\".' % os.name)\ndiff --git a/django/contrib/gis/gdal/prototypes/srs.py b/django/contrib/gis/gdal/prototypes/srs.py\nindex 721eba86223f..82d91bd3119e 100644\n--- a/django/contrib/gis/gdal/prototypes/srs.py\n+++ b/django/contrib/gis/gdal/prototypes/srs.py\n@@ -1,6 +1,6 @@\n from ctypes import POINTER, c_char_p, c_int, c_void_p\n \n-from django.contrib.gis.gdal.libgdal import GDAL_VERSION, lgdal, std_call\n+from django.contrib.gis.gdal.libgdal import lgdal, std_call\n from django.contrib.gis.gdal.prototypes.generation import (\n     const_string_output,\n     double_output,\n@@ -36,11 +36,9 @@ def units_func(f):\n     std_call(\"OSRDestroySpatialReference\"), [c_void_p], errcheck=False\n )\n srs_validate = void_output(lgdal.OSRValidate, [c_void_p])\n-\n-if GDAL_VERSION >= (3, 0):\n-    set_axis_strategy = void_output(\n-        lgdal.OSRSetAxisMappingStrategy, [c_void_p, c_int], errcheck=False\n-    )\n+set_axis_strategy = void_output(\n+    lgdal.OSRSetAxisMappingStrategy, [c_void_p, c_int], errcheck=False\n+)\n \n # Getting the semi_major, semi_minor, and flattening functions.\n semi_major = srs_double(lgdal.OSRGetSemiMajor)\ndiff --git a/django/contrib/gis/gdal/srs.py b/django/contrib/gis/gdal/srs.py\nindex cd0554eb1201..9417c6684d13 100644\n--- a/django/contrib/gis/gdal/srs.py\n+++ b/django/contrib/gis/gdal/srs.py\n@@ -32,7 +32,6 @@\n \n from django.contrib.gis.gdal.base import GDALBase\n from django.contrib.gis.gdal.error import SRSException\n-from django.contrib.gis.gdal.libgdal import GDAL_VERSION\n from django.contrib.gis.gdal.prototypes import srs as capi\n from django.utils.encoding import force_bytes, force_str\n \n@@ -66,10 +65,8 @@ def __init__(self, srs_input=\"\", srs_type=\"user\", axis_order=None):\n         if srs_type == \"wkt\":\n             self.ptr = capi.new_srs(c_char_p(b\"\"))\n             self.import_wkt(srs_input)\n-            if self.axis_order == AxisOrder.TRADITIONAL and GDAL_VERSION >= (3, 0):\n+            if self.axis_order == AxisOrder.TRADITIONAL:\n                 capi.set_axis_strategy(self.ptr, self.axis_order)\n-            elif self.axis_order != AxisOrder.TRADITIONAL and GDAL_VERSION < (3, 0):\n-                raise ValueError(\"%s is not supported in GDAL < 3.0.\" % self.axis_order)\n             return\n         elif isinstance(srs_input, str):\n             try:\n@@ -104,10 +101,8 @@ def __init__(self, srs_input=\"\", srs_type=\"user\", axis_order=None):\n         else:\n             self.ptr = srs\n \n-        if self.axis_order == AxisOrder.TRADITIONAL and GDAL_VERSION >= (3, 0):\n+        if self.axis_order == AxisOrder.TRADITIONAL:\n             capi.set_axis_strategy(self.ptr, self.axis_order)\n-        elif self.axis_order != AxisOrder.TRADITIONAL and GDAL_VERSION < (3, 0):\n-            raise ValueError(\"%s is not supported in GDAL < 3.0.\" % self.axis_order)\n         # Importing from either the user input string or an integer SRID.\n         if srs_type == \"user\":\n             self.import_user_input(srs_input)\ndiff --git a/docs/ref/contrib/gis/install/geolibs.txt b/docs/ref/contrib/gis/install/geolibs.txt\nindex 079737191257..46cf04c422a3 100644\n--- a/docs/ref/contrib/gis/install/geolibs.txt\n+++ b/docs/ref/contrib/gis/install/geolibs.txt\n@@ -5,16 +5,16 @@ Installing Geospatial libraries\n GeoDjango uses and/or provides interfaces for the following open source\n geospatial libraries:\n \n-========================  ====================================  ================================  ===========================================\n+========================  ====================================  ================================  ======================================\n Program                   Description                           Required                          Supported Versions\n-========================  ====================================  ================================  ===========================================\n+========================  ====================================  ================================  ======================================\n :doc:`GEOS <../geos>`     Geometry Engine Open Source           Yes                               3.12, 3.11, 3.10, 3.9, 3.8\n `PROJ`_                   Cartographic Projections library      Yes (PostgreSQL and SQLite only)  9.x, 8.x, 7.x, 6.x\n-:doc:`GDAL <../gdal>`     Geospatial Data Abstraction Library   Yes                               3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.4\n+:doc:`GDAL <../gdal>`     Geospatial Data Abstraction Library   Yes                               3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0\n :doc:`GeoIP <../geoip2>`  IP-based geolocation library          No                                2\n `PostGIS`__               Spatial extensions for PostgreSQL     Yes (PostgreSQL only)             3.4, 3.3, 3.2, 3.1, 3.0\n `SpatiaLite`__            Spatial extensions for SQLite         Yes (SQLite only)                 5.1, 5.0, 4.3\n-========================  ====================================  ================================  ===========================================\n+========================  ====================================  ================================  ======================================\n \n Note that older or more recent versions of these libraries *may* also work\n totally fine with GeoDjango. Your mileage may vary.\n@@ -26,7 +26,6 @@ totally fine with GeoDjango. Your mileage may vary.\n     GEOS 3.10.0 2021-10-20\n     GEOS 3.11.0 2022-07-01\n     GEOS 3.12.0 2023-06-27\n-    GDAL 2.4.0 2018-12\n     GDAL 3.0.0 2019-05\n     GDAL 3.1.0 2020-05-07\n     GDAL 3.2.0 2020-11-02\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 6aeee65e90d5..fffaec21c614 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -273,6 +273,8 @@ backends.\n \n * Support for PROJ < 6 is removed.\n \n+* Support for GDAL 2.4 is removed.\n+\n Dropped support for MariaDB 10.4\n --------------------------------\n \n", "test_patch": "diff --git a/tests/gis_tests/gdal_tests/test_srs.py b/tests/gis_tests/gdal_tests/test_srs.py\nindex 9bfe5680daba..5d82a8175aab 100644\n--- a/tests/gis_tests/gdal_tests/test_srs.py\n+++ b/tests/gis_tests/gdal_tests/test_srs.py\n@@ -1,7 +1,4 @@\n-from unittest import skipIf\n-\n from django.contrib.gis.gdal import (\n-    GDAL_VERSION,\n     AxisOrder,\n     CoordTransform,\n     GDALException,\n@@ -358,7 +355,6 @@ def test_unicode(self):\n             self.assertIn(\"Langscho\u00df\", srs.pretty_wkt)\n             self.assertIn(\"Langscho\u00df\", srs.xml)\n \n-    @skipIf(GDAL_VERSION < (3, 0), \"GDAL >= 3.0 is required\")\n     def test_axis_order(self):\n         wgs84_trad = SpatialReference(4326, axis_order=AxisOrder.TRADITIONAL)\n         wgs84_auth = SpatialReference(4326, axis_order=AxisOrder.AUTHORITY)\n@@ -380,12 +376,6 @@ def test_axis_order_invalid(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             SpatialReference(4326, axis_order=\"other\")\n \n-    @skipIf(GDAL_VERSION > (3, 0), \"GDAL < 3.0 doesn't support authority.\")\n-    def test_axis_order_non_traditional_invalid(self):\n-        msg = \"AxisOrder.AUTHORITY is not supported in GDAL < 3.0.\"\n-        with self.assertRaisesMessage(ValueError, msg):\n-            SpatialReference(4326, axis_order=AxisOrder.AUTHORITY)\n-\n     def test_esri(self):\n         srs = SpatialReference(\"NAD83\")\n         pre_esri_wkt = srs.wkt\n", "problem_statement": "Drop support for GDAL 2.4\nDescription\n\t \nGDAL 2.4 was released in December-2018. Therefore by the time Django 5.1 is released it will be more than 5 year old and so support can be removed. \nGDAL 3.0 will become the lowest supported version which was released in May-2019 with the final release in this series (3.0.4) being in Jan-2020. \n\u200bhttps://github.com/django/django/blob/08306bad57761b5eb176894649ac7d4e735c52dd/docs/ref/contrib/gis/install/geolibs.txt\n", "hints_text": [["Accepting following the conversation in the \u200bDjango Forum.", 1702888309.0], ["\u200bPR", 1703083527.0], ["In c709a74: Fixed #35049 -- Dropped support for GDAL 2.4.", 1703086500.0]], "created_at": "2023-12-20T18:07:43Z"}
{"repo": "django/django", "pull_number": 17626, "instance_id": "django__django-17626", "issue_numbers": ["34658"], "base_commit": "5c6906cef4d4858bfe8d00de94eb797aa40b31fd", "patch": "diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex fffaec21c614..cc72346eef01 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -238,6 +238,9 @@ Tests\n      self.client.post(\"/items/1\", query_params={\"action\": \"delete\"})\n      await self.async_client.post(\"/items/1\", query_params={\"action\": \"delete\"})\n \n+* The new :meth:`.SimpleTestCase.assertNotInHTML` assertion allows testing that\n+  an HTML fragment is not contained in the given HTML haystack.\n+\n URLs\n ~~~~\n \n", "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 0e887bdc0b60..b5d426f75fe7 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -922,14 +922,17 @@ def assertInHTML(self, needle, haystack, count=None, msg_prefix=\"\"):\n             msg_prefix += \": \"\n         haystack_repr = safe_repr(haystack)\n         if count is not None:\n-            self.assertEqual(\n-                real_count,\n-                count,\n-                (\n-                    f\"{msg_prefix}Found {real_count} instances of {needle!r} (expected \"\n-                    f\"{count}) in the following response\\n{haystack_repr}\"\n-                ),\n-            )\n+            if count == 0:\n+                msg = (\n+                    f\"{needle!r} unexpectedly found in the following response\\n\"\n+                    f\"{haystack_repr}\"\n+                )\n+            else:\n+                msg = (\n+                    f\"Found {real_count} instances of {needle!r} (expected {count}) in \"\n+                    f\"the following response\\n{haystack_repr}\"\n+                )\n+            self.assertEqual(real_count, count, f\"{msg_prefix}{msg}\")\n         else:\n             self.assertTrue(\n                 real_count != 0,\n@@ -939,6 +942,9 @@ def assertInHTML(self, needle, haystack, count=None, msg_prefix=\"\"):\n                 ),\n             )\n \n+    def assertNotInHTML(self, needle, haystack, msg_prefix=\"\"):\n+        self.assertInHTML(needle, haystack, count=0, msg_prefix=msg_prefix)\n+\n     def assertJSONEqual(self, raw, expected_data, msg=None):\n         \"\"\"\n         Assert that the JSON fragments raw and expected_data are equal.\ndiff --git a/docs/topics/testing/tools.txt b/docs/topics/testing/tools.txt\nindex b01dd35b8c6b..068e452ad0b2 100644\n--- a/docs/topics/testing/tools.txt\n+++ b/docs/topics/testing/tools.txt\n@@ -1905,6 +1905,16 @@ your test suite.\n \n         In older versions, error messages didn't contain the ``haystack``.\n \n+.. method:: SimpleTestCase.assertNotInHTML(needle, haystack, msg_prefix=\"\")\n+\n+    .. versionadded:: 5.1\n+\n+    Asserts that the HTML fragment ``needle`` is *not* contained in the\n+    ``haystack``.\n+\n+    Whitespace in most cases is ignored, and attribute ordering is not\n+    significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more details.\n+\n .. method:: SimpleTestCase.assertJSONEqual(raw, expected_data, msg=None)\n \n     Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal.\ndiff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex bce060f7efe3..ce78ffc0084b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1053,6 +1053,16 @@ def test_long_haystack(self):\n         with self.assertRaisesMessage(AssertionError, msg):\n             self.assertInHTML(\"<b>This</b>\", haystack, 3)\n \n+    def test_assert_not_in_html(self):\n+        haystack = \"<p><b>Hello</b> <span>there</span>! Hi <span>there</span>!</p>\"\n+        self.assertNotInHTML(\"<b>Hi</b>\", haystack=haystack)\n+        msg = (\n+            \"'<b>Hello</b>' unexpectedly found in the following response\"\n+            f\"\\n{haystack!r}\"\n+        )\n+        with self.assertRaisesMessage(AssertionError, msg):\n+            self.assertNotInHTML(\"<b>Hello</b>\", haystack=haystack)\n+\n \n class JSONEqualTests(SimpleTestCase):\n     def test_simple_equal(self):\n", "problem_statement": "New assertion `assertNotInHTML`, like `assertContains` has `assertNotContains`\nDescription\n\t \nDjango\u2019s test assertions have assertContains and assertNotContains which are HTML-aware ways to check what\u2019s inside a response, similar to Python\u2019s assertIn and assertNotIn. Django also offers assertInHTML \u2013 but there is no assertNotInHTML.\nThis is very straightforward to implement \u2013 and I suspect more than a few projects will already have their own implementation if they need this, but I think it\u2019d make much more sense to have this out of the box considering other \"<needle> in <haystack>\" assertions have their -not equivalent built in. For me, the main source of pain here is that I use this often enough to use this but rarely enough to frequently forget:\nWhether this is a Django built-in or not. So I look at \u200bassertions docs and am surprised not to see it.\nWhether the project I work on has it or not. So again I have to look around and potentially add it.\n", "hints_text": [["I fully agree with the rationale, but for this, perhaps, Thibaud could you please create a forum post to allow for people to present any counter argument we may not be considering? Thanks!", 1686915451.0], ["I'm skeptic. Personally, I find the use of *NotIn* assertions really rare and not the best practice. There can many many reasons why something is not in something else, and it becomes even more unreliable when we do this in HTML. It's much more stable and bulletproof to use *In* assertions. I don't think it's worth adding. Please first start a discussion on the DevelopersMailingList, where you'll reach a wider audience and see what other think, and \u200bfollow the guidelines with regards to requesting features.", 1686915797.0], ["Sorry about that, I thought I had read the ticket creation guidelines to check what the protocol is, but clearly missed the most important bits.", 1687146225.0], ["Accepting based on the \u200bdiscussion. Thibaud, would you like to prepare a patch?", 1687222093.0], ["Yes please! Omg I might eventually become a code contributor.", 1687289546.0], ["Adding myself as CC, I'm very interested to see how the patch for this will be implemented. Hope you don't mind Thibaud.", 1695687820.0], ["PR \u200bhttps://github.com/django/django/pull/17626", 1703069793.0]], "created_at": "2023-12-20T16:55:49Z"}
{"repo": "django/django", "pull_number": 17625, "instance_id": "django__django-17625", "issue_numbers": ["34670"], "base_commit": "47033bfd486206d6809068c838d45b999e5c1bd2", "patch": "diff --git a/django/contrib/admin/static/admin/js/theme.js b/django/contrib/admin/static/admin/js/theme.js\nindex 794cd15f701a..e79d375c55cf 100644\n--- a/django/contrib/admin/static/admin/js/theme.js\n+++ b/django/contrib/admin/static/admin/js/theme.js\n@@ -1,56 +1,51 @@\n 'use strict';\n {\n-    window.addEventListener('load', function(e) {\n-\n-        function setTheme(mode) {\n-            if (mode !== \"light\" && mode !== \"dark\" && mode !== \"auto\") {\n-                console.error(`Got invalid theme mode: ${mode}. Resetting to auto.`);\n-                mode = \"auto\";\n-            }\n-            document.documentElement.dataset.theme = mode;\n-            localStorage.setItem(\"theme\", mode);\n+    function setTheme(mode) {\n+        if (mode !== \"light\" && mode !== \"dark\" && mode !== \"auto\") {\n+            console.error(`Got invalid theme mode: ${mode}. Resetting to auto.`);\n+            mode = \"auto\";\n         }\n+        document.documentElement.dataset.theme = mode;\n+        localStorage.setItem(\"theme\", mode);\n+    }\n \n-        function cycleTheme() {\n-            const currentTheme = localStorage.getItem(\"theme\") || \"auto\";\n-            const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n+    function cycleTheme() {\n+        const currentTheme = localStorage.getItem(\"theme\") || \"auto\";\n+        const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n \n-            if (prefersDark) {\n-                // Auto (dark) -> Light -> Dark\n-                if (currentTheme === \"auto\") {\n-                    setTheme(\"light\");\n-                } else if (currentTheme === \"light\") {\n-                    setTheme(\"dark\");\n-                } else {\n-                    setTheme(\"auto\");\n-                }\n+        if (prefersDark) {\n+            // Auto (dark) -> Light -> Dark\n+            if (currentTheme === \"auto\") {\n+                setTheme(\"light\");\n+            } else if (currentTheme === \"light\") {\n+                setTheme(\"dark\");\n             } else {\n-                // Auto (light) -> Dark -> Light\n-                if (currentTheme === \"auto\") {\n-                    setTheme(\"dark\");\n-                } else if (currentTheme === \"dark\") {\n-                    setTheme(\"light\");\n-                } else {\n-                    setTheme(\"auto\");\n-                }\n+                setTheme(\"auto\");\n+            }\n+        } else {\n+            // Auto (light) -> Dark -> Light\n+            if (currentTheme === \"auto\") {\n+                setTheme(\"dark\");\n+            } else if (currentTheme === \"dark\") {\n+                setTheme(\"light\");\n+            } else {\n+                setTheme(\"auto\");\n             }\n         }\n+    }\n \n-        function initTheme() {\n-            // set theme defined in localStorage if there is one, or fallback to auto mode\n-            const currentTheme = localStorage.getItem(\"theme\");\n-            currentTheme ? setTheme(currentTheme) : setTheme(\"auto\");\n-        }\n-\n-        function setupTheme() {\n-            // Attach event handlers for toggling themes\n-            const buttons = document.getElementsByClassName(\"theme-toggle\");\n-            Array.from(buttons).forEach((btn) => {\n-                btn.addEventListener(\"click\", cycleTheme);\n-            });\n-            initTheme();\n-        }\n+    function initTheme() {\n+        // set theme defined in localStorage if there is one, or fallback to auto mode\n+        const currentTheme = localStorage.getItem(\"theme\");\n+        currentTheme ? setTheme(currentTheme) : setTheme(\"auto\");\n+    }\n \n-        setupTheme();\n+    window.addEventListener('load', function(_) {\n+        const buttons = document.getElementsByClassName(\"theme-toggle\");\n+        Array.from(buttons).forEach((btn) => {\n+            btn.addEventListener(\"click\", cycleTheme);\n+        });\n     });\n+\n+    initTheme();\n }\ndiff --git a/django/contrib/admin/templates/admin/base.html b/django/contrib/admin/templates/admin/base.html\nindex 95494187294c..1ca50e508d1d 100644\n--- a/django/contrib/admin/templates/admin/base.html\n+++ b/django/contrib/admin/templates/admin/base.html\n@@ -6,7 +6,7 @@\n <link rel=\"stylesheet\" href=\"{% block stylesheet %}{% static \"admin/css/base.css\" %}{% endblock %}\">\n {% block dark-mode-vars %}\n   <link rel=\"stylesheet\" href=\"{% static \"admin/css/dark_mode.css\" %}\">\n-  <script src=\"{% static \"admin/js/theme.js\" %}\" defer></script>\n+  <script src=\"{% static \"admin/js/theme.js\" %}\"></script>\n {% endblock %}\n {% if not is_popup and is_nav_sidebar_enabled %}\n   <link rel=\"stylesheet\" href=\"{% static \"admin/css/nav_sidebar.css\" %}\">\n", "test_patch": "", "problem_statement": "Django Admin light theme flickers on dark system\nDescription\n\t \nMy system is set to dark mode: macOS 13.4 (22F66) with Safari 16.5 (18615.2.9.11.4).\nClicking any link in django admin will result in first showing the dark theme for a short moment and then switching to the light theme.\n", "hints_text": [["A video of the problem", 1687343111.0], ["This is probably related with Django Debug Toolbar. It slows everything down and makes the switch visible. I don't think there is anything that Django could do better here. Please reopen the ticket if you can provide details about why and where Django is at fault.", 1687355551.0], ["I have been able to replicate this on a fresh install (see latest video) How to replicate: Set OS to dark mode or emulate it via chrome tools - \u200bhttps://dev.to/codepo8/quick-developer-tools-tip-simulating-dark-light-colour-mode-1cpg Force Django Admin to light mode Click around and see Why is this happening you may ask. The JS code that forces the theme to dark/light is set to run on page load. \u200bhttps://github.com/django/django/blob/main/django/contrib/admin/static/admin/js/theme.js#L3 Because of this the full page loads for a moment with the dark theme, then the page load event happens and then the js code changes the theme to light. The initTheme() and setTheme() functions don't really need to be inside the event page load. Nothing in those 2 functions are doing anything that require the entire page to be loaded. It is just using local storage and modify the dataset on the html div. So those functions could be moved outside of the on load event. I don't mind making the merge request for it just wanted to get opinions on it.", 1690366058.0], ["Thanks for details, tentatively accepted.", 1690367167.0], ["Yes, I changed the code to avoid that on djangoproject.com but I forgot to make the change also on Django for the admin. Feel free to make the changes, I'm happy to review it :)", 1690422464.0], ["Since it's been 3 months, I'm happy submit the initial PR.", 1698277181.0], ["I had this problem too, I fixed it this way \u200bPR", 1703062473.0]], "created_at": "2023-12-20T14:50:45Z"}
{"repo": "django/django", "pull_number": 17621, "instance_id": "django__django-17621", "issue_numbers": ["35030"], "base_commit": "1fffa4af1297c01cb1d116a32173271f4889033c", "patch": "diff --git a/django/contrib/auth/decorators.py b/django/contrib/auth/decorators.py\nindex cfcc4a2d3a10..b220cc2bd39e 100644\n--- a/django/contrib/auth/decorators.py\n+++ b/django/contrib/auth/decorators.py\n@@ -1,6 +1,9 @@\n+import asyncio\n from functools import wraps\n from urllib.parse import urlparse\n \n+from asgiref.sync import async_to_sync, sync_to_async\n+\n from django.conf import settings\n from django.contrib.auth import REDIRECT_FIELD_NAME\n from django.core.exceptions import PermissionDenied\n@@ -17,10 +20,7 @@ def user_passes_test(\n     \"\"\"\n \n     def decorator(view_func):\n-        @wraps(view_func)\n-        def _wrapper_view(request, *args, **kwargs):\n-            if test_func(request.user):\n-                return view_func(request, *args, **kwargs)\n+        def _redirect_to_login(request):\n             path = request.build_absolute_uri()\n             resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)\n             # If the login url is the same scheme and net location then just\n@@ -35,7 +35,32 @@ def _wrapper_view(request, *args, **kwargs):\n \n             return redirect_to_login(path, resolved_login_url, redirect_field_name)\n \n-        return _wrapper_view\n+        if asyncio.iscoroutinefunction(view_func):\n+\n+            async def _view_wrapper(request, *args, **kwargs):\n+                auser = await request.auser()\n+                if asyncio.iscoroutinefunction(test_func):\n+                    test_pass = await test_func(auser)\n+                else:\n+                    test_pass = await sync_to_async(test_func)(auser)\n+\n+                if test_pass:\n+                    return await view_func(request, *args, **kwargs)\n+                return _redirect_to_login(request)\n+\n+        else:\n+\n+            def _view_wrapper(request, *args, **kwargs):\n+                if asyncio.iscoroutinefunction(test_func):\n+                    test_pass = async_to_sync(test_func)(request.user)\n+                else:\n+                    test_pass = test_func(request.user)\n+\n+                if test_pass:\n+                    return view_func(request, *args, **kwargs)\n+                return _redirect_to_login(request)\n+\n+        return wraps(view_func)(_view_wrapper)\n \n     return decorator\n \n@@ -64,19 +89,36 @@ def permission_required(perm, login_url=None, raise_exception=False):\n     If the raise_exception parameter is given the PermissionDenied exception\n     is raised.\n     \"\"\"\n+    if isinstance(perm, str):\n+        perms = (perm,)\n+    else:\n+        perms = perm\n+\n+    def decorator(view_func):\n+        if asyncio.iscoroutinefunction(view_func):\n+\n+            async def check_perms(user):\n+                # First check if the user has the permission (even anon users).\n+                if await sync_to_async(user.has_perms)(perms):\n+                    return True\n+                # In case the 403 handler should be called raise the exception.\n+                if raise_exception:\n+                    raise PermissionDenied\n+                # As the last resort, show the login form.\n+                return False\n \n-    def check_perms(user):\n-        if isinstance(perm, str):\n-            perms = (perm,)\n         else:\n-            perms = perm\n-        # First check if the user has the permission (even anon users)\n-        if user.has_perms(perms):\n-            return True\n-        # In case the 403 handler should be called raise the exception\n-        if raise_exception:\n-            raise PermissionDenied\n-        # As the last resort, show the login form\n-        return False\n-\n-    return user_passes_test(check_perms, login_url=login_url)\n+\n+            def check_perms(user):\n+                # First check if the user has the permission (even anon users).\n+                if user.has_perms(perms):\n+                    return True\n+                # In case the 403 handler should be called raise the exception.\n+                if raise_exception:\n+                    raise PermissionDenied\n+                # As the last resort, show the login form.\n+                return False\n+\n+        return user_passes_test(check_perms, login_url=login_url)(view_func)\n+\n+    return decorator\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 4eab41394605..e7a99e8d7b80 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -52,6 +52,11 @@ Minor features\n   form save. This is now available in the admin when visiting the user creation\n   and password change pages.\n \n+* :func:`~.django.contrib.auth.decorators.login_required`,\n+  :func:`~.django.contrib.auth.decorators.permission_required`, and\n+  :func:`~.django.contrib.auth.decorators.user_passes_test` decorators now\n+  support wrapping asynchronous view functions.\n+\n :mod:`django.contrib.contenttypes`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \ndiff --git a/docs/topics/auth/default.txt b/docs/topics/auth/default.txt\nindex 2b57f62f1372..795a1bdacc68 100644\n--- a/docs/topics/auth/default.txt\n+++ b/docs/topics/auth/default.txt\n@@ -617,6 +617,10 @@ The ``login_required`` decorator\n     :func:`django.contrib.admin.views.decorators.staff_member_required`\n     decorator a useful alternative to ``login_required()``.\n \n+.. versionchanged:: 5.1\n+\n+    Support for wrapping asynchronous view functions was added.\n+\n .. currentmodule:: django.contrib.auth.mixins\n \n The ``LoginRequiredMixin`` mixin\n@@ -714,6 +718,11 @@ email in the desired domain and if not, redirects to the login page::\n         @user_passes_test(email_check, login_url=\"/login/\")\n         def my_view(request): ...\n \n+    .. versionchanged:: 5.1\n+\n+        Support for wrapping asynchronous view functions and using asynchronous\n+        test callables was added.\n+\n .. currentmodule:: django.contrib.auth.mixins\n \n .. class:: UserPassesTestMixin\n@@ -818,6 +827,10 @@ The ``permission_required`` decorator\n     ``redirect_authenticated_user=True`` and the logged-in user doesn't have\n     all of the required permissions.\n \n+.. versionchanged:: 5.1\n+\n+    Support for wrapping asynchronous view functions was added.\n+\n .. currentmodule:: django.contrib.auth.mixins\n \n The ``PermissionRequiredMixin`` mixin\n", "test_patch": "diff --git a/tests/auth_tests/test_decorators.py b/tests/auth_tests/test_decorators.py\nindex 6cc92302d639..48fa915c5cb4 100644\n--- a/tests/auth_tests/test_decorators.py\n+++ b/tests/auth_tests/test_decorators.py\n@@ -1,3 +1,7 @@\n+from asyncio import iscoroutinefunction\n+\n+from asgiref.sync import sync_to_async\n+\n from django.conf import settings\n from django.contrib.auth import models\n from django.contrib.auth.decorators import (\n@@ -19,6 +23,22 @@ class LoginRequiredTestCase(AuthViewsTestCase):\n     Tests the login_required decorators\n     \"\"\"\n \n+    factory = RequestFactory()\n+\n+    def test_wrapped_sync_function_is_not_coroutine_function(self):\n+        def sync_view(request):\n+            return HttpResponse()\n+\n+        wrapped_view = login_required(sync_view)\n+        self.assertIs(iscoroutinefunction(wrapped_view), False)\n+\n+    def test_wrapped_async_function_is_coroutine_function(self):\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        wrapped_view = login_required(async_view)\n+        self.assertIs(iscoroutinefunction(wrapped_view), True)\n+\n     def test_callable(self):\n         \"\"\"\n         login_required is assignable to callable objects.\n@@ -63,6 +83,35 @@ def test_login_required_next_url(self):\n             view_url=\"/login_required_login_url/\", login_url=\"/somewhere/\"\n         )\n \n+    async def test_login_required_async_view(self, login_url=None):\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        async def auser_anonymous():\n+            return models.AnonymousUser()\n+\n+        async def auser():\n+            return self.u1\n+\n+        if login_url is None:\n+            async_view = login_required(async_view)\n+            login_url = settings.LOGIN_URL\n+        else:\n+            async_view = login_required(async_view, login_url=login_url)\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = auser_anonymous\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 302)\n+        self.assertIn(login_url, response.url)\n+\n+        request.auser = auser\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_login_required_next_url_async_view(self):\n+        await self.test_login_required_async_view(login_url=\"/somewhere/\")\n+\n \n class PermissionsRequiredDecoratorTest(TestCase):\n     \"\"\"\n@@ -80,6 +129,24 @@ def setUpTestData(cls):\n         )\n         cls.user.user_permissions.add(*perms)\n \n+    @classmethod\n+    async def auser(cls):\n+        return cls.user\n+\n+    def test_wrapped_sync_function_is_not_coroutine_function(self):\n+        def sync_view(request):\n+            return HttpResponse()\n+\n+        wrapped_view = permission_required([])(sync_view)\n+        self.assertIs(iscoroutinefunction(wrapped_view), False)\n+\n+    def test_wrapped_async_function_is_coroutine_function(self):\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        wrapped_view = permission_required([])(async_view)\n+        self.assertIs(iscoroutinefunction(wrapped_view), True)\n+\n     def test_many_permissions_pass(self):\n         @permission_required(\n             [\"auth_tests.add_customuser\", \"auth_tests.change_customuser\"]\n@@ -147,6 +214,73 @@ def a_view(request):\n         with self.assertRaises(PermissionDenied):\n             a_view(request)\n \n+    async def test_many_permissions_pass_async_view(self):\n+        @permission_required(\n+            [\"auth_tests.add_customuser\", \"auth_tests.change_customuser\"]\n+        )\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_many_permissions_in_set_pass_async_view(self):\n+        @permission_required(\n+            {\"auth_tests.add_customuser\", \"auth_tests.change_customuser\"}\n+        )\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_single_permission_pass_async_view(self):\n+        @permission_required(\"auth_tests.add_customuser\")\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_permissioned_denied_redirect_async_view(self):\n+        @permission_required(\n+            [\n+                \"auth_tests.add_customuser\",\n+                \"auth_tests.change_customuser\",\n+                \"nonexistent-permission\",\n+            ]\n+        )\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 302)\n+\n+    async def test_permissioned_denied_exception_raised_async_view(self):\n+        @permission_required(\n+            [\n+                \"auth_tests.add_customuser\",\n+                \"auth_tests.change_customuser\",\n+                \"nonexistent-permission\",\n+            ],\n+            raise_exception=True,\n+        )\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser\n+        with self.assertRaises(PermissionDenied):\n+            await async_view(request)\n+\n \n class UserPassesTestDecoratorTest(TestCase):\n     factory = RequestFactory()\n@@ -162,6 +296,28 @@ def setUpTestData(cls):\n         )\n         cls.user_pass.user_permissions.add(*perms)\n \n+    @classmethod\n+    async def auser_pass(cls):\n+        return cls.user_pass\n+\n+    @classmethod\n+    async def auser_deny(cls):\n+        return cls.user_deny\n+\n+    def test_wrapped_sync_function_is_not_coroutine_function(self):\n+        def sync_view(request):\n+            return HttpResponse()\n+\n+        wrapped_view = user_passes_test(lambda user: True)(sync_view)\n+        self.assertIs(iscoroutinefunction(wrapped_view), False)\n+\n+    def test_wrapped_async_function_is_coroutine_function(self):\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        wrapped_view = user_passes_test(lambda user: True)(async_view)\n+        self.assertIs(iscoroutinefunction(wrapped_view), True)\n+\n     def test_decorator(self):\n         def sync_test_func(user):\n             return bool(\n@@ -180,3 +336,56 @@ def sync_view(request):\n         request.user = self.user_deny\n         response = sync_view(request)\n         self.assertEqual(response.status_code, 302)\n+\n+    def test_decorator_async_test_func(self):\n+        async def async_test_func(user):\n+            return await sync_to_async(user.has_perms)([\"auth_tests.add_customuser\"])\n+\n+        @user_passes_test(async_test_func)\n+        def sync_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.user = self.user_pass\n+        response = sync_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        request.user = self.user_deny\n+        response = sync_view(request)\n+        self.assertEqual(response.status_code, 302)\n+\n+    async def test_decorator_async_view(self):\n+        def sync_test_func(user):\n+            return bool(\n+                models.Group.objects.filter(name__istartswith=user.username).exists()\n+            )\n+\n+        @user_passes_test(sync_test_func)\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser_pass\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        request.auser = self.auser_deny\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 302)\n+\n+    async def test_decorator_async_view_async_test_func(self):\n+        async def async_test_func(user):\n+            return await sync_to_async(user.has_perms)([\"auth_tests.add_customuser\"])\n+\n+        @user_passes_test(async_test_func)\n+        async def async_view(request):\n+            return HttpResponse()\n+\n+        request = self.factory.get(\"/rand\")\n+        request.auser = self.auser_pass\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        request.auser = self.auser_deny\n+        response = await async_view(request)\n+        self.assertEqual(response.status_code, 302)\n", "problem_statement": "Make django.contrib.auth decorators work with async functions.\nDescription\n\t \nWe're slowly moving our code base over to async views and tests. Django 5.0 is a big leap forward for this, but we've found that there's still no async version of the @login_required decorator. \nWe're working around it with some funky decorator usage:\n@sync_to_async\n@login_required\n@async_to_sync\nasync def our_view(request):\nBuuuut, it'd be great not to need to do all this and to either have an async version of login_required (@alogin_required, perhaps?) or for it to just work with async views. \nI don't think there's an open issue for this, but amusingly, in a comment 11 months ago, Carlton Gibson touched on making login_required work with async, but he thought it'd take another five years. Perhaps we can do better. :)\n", "hints_text": [["Related to #34391 and #31949.", 1702334101.0], ["Thank you for CC'ing me. I will study how this function can be implemented, and consider whether I can take on this ticket. I will reply within a day.", 1702334919.0], ["OK, I have achieved a simple demo, I think I can work on this ticket. I'll improve my code further, then submit a PR as soon as possible.", 1702369507.0]], "created_at": "2023-12-18T05:02:13Z"}
{"repo": "django/django", "pull_number": 17617, "instance_id": "django__django-17617", "issue_numbers": ["35042"], "base_commit": "eea4f92f9aa57d1b25f1c28d11c3b5a6a5841e82", "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 2bc16b1df351..7166b8cb5d96 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -520,11 +520,11 @@ def get_aggregation(self, using, aggregate_exprs):\n                         self.model._meta.pk.get_col(inner_query.get_initial_alias()),\n                     )\n                 inner_query.default_cols = False\n-                if not qualify:\n+                if not qualify and not self.combinator:\n                     # Mask existing annotations that are not referenced by\n                     # aggregates to be pushed to the outer query unless\n-                    # filtering against window functions is involved as it\n-                    # requires complex realising.\n+                    # filtering against window functions or if the query is\n+                    # combined as both would require complex realiasing logic.\n                     annotation_mask = set()\n                     if isinstance(self.group_by, tuple):\n                         for expr in self.group_by:\n", "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 62e9c6a27a5a..4408535228fd 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -2344,3 +2344,18 @@ def test_aggregate_reference_lookup_rhs_iter(self):\n             max_book_author=Max(\"book__authors\"),\n         ).aggregate(count=Count(\"id\", filter=Q(id__in=[F(\"max_book_author\"), 0])))\n         self.assertEqual(aggregates, {\"count\": 1})\n+\n+    def test_aggregate_combined_queries(self):\n+        # Combined queries could have members in their values select mask while\n+        # others have them in their annotation mask which makes annotation\n+        # pruning complex to implement hence why it's not implemented.\n+        qs = Author.objects.values(\n+            \"age\",\n+            other=Value(0),\n+        ).union(\n+            Book.objects.values(\n+                age=Value(0),\n+                other=Value(0),\n+            )\n+        )\n+        self.assertEqual(qs.count(), 3)\n", "problem_statement": "Queryset count does not work after union when annotations on aggregation are unused.\nDescription\n\t \nWhile upgrading to Django 4 I've found a bug with count() which can be replicated using the following code. Notice that evaluating the queryset works fine, the issue is that for some reason, when counting django is not including total_count column from the second queryset in the query and this is causing union to fail. In Django 3 the code works fine and produces a correct SQL. I've attached an example project which can be used to reproduce the bug, with command tox -e ALL.\nmodels.py\nclass Foo(models.Model):\n\tname = models.TextField()\nclass Bar(models.Model):\n\tfoo = models.ForeignKey(Foo, on_delete=models.CASCADE)\n\tcount = models.IntegerField()\ntests.py\nqs1 = Foo.objects.all().annotate(\n\t_count=models.Sum('bar__count')\n).values('name').annotate(\n\ttotal_count=models.F('_count')\n).values('name', 'total_count')\nqs2 = Bar.objects.all().annotate(\n\tname=models.F('foo__name'),\n\ttotal_count=models.Value(0, output_field=models.IntegerField())\n).values('name', 'total_count')\nself.assertEqual(list(qs1.union(qs2, all=True)), [])\nself.assertEqual(qs1.union(qs2, all=True).count(), 0)\nException thrown in Django 4+\nTraceback (most recent call last):\n File \"/home/user/foo/bar/tests.py\", line 21, in test_recreate_bug\n\tself.assertEqual(qs1.union(qs2, all=True).count(), 0)\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/models/query.py\", line 618, in count\n\treturn self.query.get_count(using=self.db)\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 616, in get_count\n\treturn obj.get_aggregation(using, {\"__count\": Count(\"*\")})[\"__count\"]\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 602, in get_aggregation\n\tresult = compiler.execute_sql(SINGLE)\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 1562, in execute_sql\n\tcursor.execute(sql, params)\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/backends/utils.py\", line 79, in execute\n\treturn self._execute_with_wrappers(\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/backends/utils.py\", line 92, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/backends/utils.py\", line 100, in _execute \n\twith self.db.wrap_database_errors:\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/utils.py\", line 91, in __exit__ \n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/backends/utils.py\", line 105, in _execute \n\treturn self.cursor.execute(sql, params)\n File \"/home/user/foo/.tox/django5/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py\", line 328, in execute\n\treturn super().execute(query, params)\ndjango.db.utils.OperationalError: SELECTs to the left and right of UNION ALL do not have the same number of result columns\n", "hints_text": [["minimal example", 1702633851.0], ["Thanks for the report. Regression in 59bea9efd2768102fc9d3aedda469502c218e9b7.", 1702643766.0]], "created_at": "2023-12-16T02:02:57Z"}
{"repo": "django/django", "pull_number": 17615, "instance_id": "django__django-17615", "issue_numbers": ["35028"], "base_commit": "02eaee12095eebb3d07d02e7b0bdc3f64785d379", "patch": "diff --git a/django/db/backends/postgresql/base.py b/django/db/backends/postgresql/base.py\nindex d92ad587102c..cba89e0cc798 100644\n--- a/django/db/backends/postgresql/base.py\n+++ b/django/db/backends/postgresql/base.py\n@@ -321,11 +321,26 @@ def init_connection_state(self):\n     @async_unsafe\n     def create_cursor(self, name=None):\n         if name:\n-            # In autocommit mode, the cursor will be used outside of a\n-            # transaction, hence use a holdable cursor.\n-            cursor = self.connection.cursor(\n-                name, scrollable=False, withhold=self.connection.autocommit\n-            )\n+            if is_psycopg3 and (\n+                self.settings_dict.get(\"OPTIONS\", {}).get(\"server_side_binding\")\n+                is not True\n+            ):\n+                # psycopg >= 3 forces the usage of server-side bindings for\n+                # named cursors so a specialized class that implements\n+                # server-side cursors while performing client-side bindings\n+                # must be used if `server_side_binding` is disabled (default).\n+                cursor = ServerSideCursor(\n+                    self.connection,\n+                    name=name,\n+                    scrollable=False,\n+                    withhold=self.connection.autocommit,\n+                )\n+            else:\n+                # In autocommit mode, the cursor will be used outside of a\n+                # transaction, hence use a holdable cursor.\n+                cursor = self.connection.cursor(\n+                    name, scrollable=False, withhold=self.connection.autocommit\n+                )\n         else:\n             cursor = self.connection.cursor()\n \n@@ -469,6 +484,23 @@ class ServerBindingCursor(CursorMixin, Database.Cursor):\n     class Cursor(CursorMixin, Database.ClientCursor):\n         pass\n \n+    class ServerSideCursor(\n+        CursorMixin, Database.client_cursor.ClientCursorMixin, Database.ServerCursor\n+    ):\n+        \"\"\"\n+        psycopg >= 3 forces the usage of server-side bindings when using named\n+        cursors but the ORM doesn't yet support the systematic generation of\n+        prepareable SQL (#20516).\n+\n+        ClientCursorMixin forces the usage of client-side bindings while\n+        ServerCursor implements the logic required to declare and scroll\n+        through named cursors.\n+\n+        Mixing ClientCursorMixin in wouldn't be necessary if Cursor allowed to\n+        specify how parameters should be bound instead, which ServerCursor\n+        would inherit, but that's not the case.\n+        \"\"\"\n+\n     class CursorDebugWrapper(BaseCursorDebugWrapper):\n         def copy(self, statement):\n             with self.debug_sql(statement):\n", "test_patch": "diff --git a/tests/backends/postgresql/test_server_side_cursors.py b/tests/backends/postgresql/test_server_side_cursors.py\nindex 694421b5cb3b..9a6457cce616 100644\n--- a/tests/backends/postgresql/test_server_side_cursors.py\n+++ b/tests/backends/postgresql/test_server_side_cursors.py\n@@ -4,12 +4,18 @@\n from contextlib import contextmanager\n \n from django.db import connection, models\n+from django.db.utils import ProgrammingError\n from django.test import TestCase\n from django.test.utils import garbage_collect\n from django.utils.version import PYPY\n \n from ..models import Person\n \n+try:\n+    from django.db.backends.postgresql.psycopg_any import is_psycopg3\n+except ImportError:\n+    is_psycopg3 = False\n+\n \n @unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL tests\")\n class ServerSideCursorsPostgres(TestCase):\n@@ -20,8 +26,8 @@ class ServerSideCursorsPostgres(TestCase):\n \n     @classmethod\n     def setUpTestData(cls):\n-        Person.objects.create(first_name=\"a\", last_name=\"a\")\n-        Person.objects.create(first_name=\"b\", last_name=\"b\")\n+        cls.p0 = Person.objects.create(first_name=\"a\", last_name=\"a\")\n+        cls.p1 = Person.objects.create(first_name=\"b\", last_name=\"b\")\n \n     def inspect_cursors(self):\n         with connection.cursor() as cursor:\n@@ -108,3 +114,43 @@ def test_server_side_cursors_setting(self):\n         # collection breaks the transaction wrapping the test.\n         with self.override_db_setting(DISABLE_SERVER_SIDE_CURSORS=True):\n             self.assertNotUsesCursor(Person.objects.iterator())\n+\n+    @unittest.skipUnless(\n+        is_psycopg3, \"The server_side_binding option is only effective on psycopg >= 3.\"\n+    )\n+    def test_server_side_binding(self):\n+        \"\"\"\n+        The ORM still generates SQL that is not suitable for usage as prepared\n+        statements but psycopg >= 3 defaults to using server-side bindings for\n+        server-side cursors which requires some specialized logic when the\n+        `server_side_binding` setting is disabled (default).\n+        \"\"\"\n+\n+        def perform_query():\n+            # Generates SQL that is known to be problematic from a server-side\n+            # binding perspective as the parametrized ORDER BY clause doesn't\n+            # use the same binding parameter as the SELECT clause.\n+            qs = (\n+                Person.objects.order_by(\n+                    models.functions.Coalesce(\"first_name\", models.Value(\"\"))\n+                )\n+                .distinct()\n+                .iterator()\n+            )\n+            self.assertSequenceEqual(list(qs), [self.p0, self.p1])\n+\n+        with self.override_db_setting(OPTIONS={}):\n+            perform_query()\n+\n+        with self.override_db_setting(OPTIONS={\"server_side_binding\": False}):\n+            perform_query()\n+\n+        with self.override_db_setting(OPTIONS={\"server_side_binding\": True}):\n+            # This assertion could start failing the moment the ORM generates\n+            # SQL suitable for usage as prepared statements (#20516) or if\n+            # psycopg >= 3 adapts psycopg.Connection(cursor_factory) machinery\n+            # to allow client-side bindings for named cursors. In the first\n+            # case this whole test could be removed, in the second one it would\n+            # most likely need to be adapted.\n+            with self.assertRaises(ProgrammingError):\n+                perform_query()\n", "problem_statement": "psycopg3: distinct query iteration causes psycopg.errors.InvalidColumnReference: for SELECT DISTINCT, ORDER BY expressions must appear in select list\nDescription\n\t\t\n(last modified by Richard Ebeling)\t\t\nUsing PostgreSQL, after upgrading from psycopg2 to psycopg3 (psycopg[binary]==3.1.14), iterating a distinct queryset of a model with an ordering that uses Value expressions causes psycopg.errors.InvalidColumnReference error saying that the ORDER BY expression must appear in the select list.\nThis is a minimal reproducible example:\n### MODELS\nfrom django.db import models\nclass TestModel(models.Model):\n\ttest_field = models.CharField()\n\tclass Meta:\n\t\tordering = [NullIf(\"test_field\", Value(\"\"))]\n### TEST\nfrom name.models import TestModel\nfrom django.test import TestCase\nclass TestTestModel(TestCase):\n\tdef test_iterating(self):\n\t\tfor el in TestModel.objects.all().distinct().iterator():\n\t\t\tpass\nwhich gives this output when running:\n$ ./manage.py test -k test_iterating\nFound 1 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nE\n======================================================================\nERROR: test_iterating (name.tests.test_models.TestTestModel)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/.../venv/lib/python3.10/site-packages/django/db/backends/utils.py\", line 105, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/.../venv/lib/python3.10/site-packages/psycopg/server_cursor.py\", line 294, in execute\n\traise ex.with_traceback(None)\npsycopg.errors.InvalidColumnReference: for SELECT DISTINCT, ORDER BY expressions must appear in select list\nLINE 1: ..._field\", $1) FROM \"name_testmodel\" ORDER BY NULLIF(\"ev...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \".../tests/test_models.py\", line 43, in test_iterating\n\tfor el in TestModel.objects.all().distinct().iterator():\n File \"/.../venv/lib/python3.10/site-packages/django/db/models/query.py\", line 516, in _iterator\n\tyield from iterable\n File \"/.../venv/lib/python3.10/site-packages/django/db/models/query.py\", line 91, in __iter__\n\tresults = compiler.execute_sql(\n File \"/.../venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 1562, in execute_sql\n\tcursor.execute(sql, params)\n File \"/.../venv/lib/python3.10/site-packages/django/db/backends/utils.py\", line 79, in execute\n\treturn self._execute_with_wrappers(\n File \"/.../venv/lib/python3.10/site-packages/django/db/backends/utils.py\", line 92, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/.../venv/lib/python3.10/site-packages/django/db/backends/utils.py\", line 100, in _execute\n\twith self.db.wrap_database_errors:\n File \"/.../venv/lib/python3.10/site-packages/django/db/utils.py\", line 91, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/.../venv/lib/python3.10/site-packages/django/db/backends/utils.py\", line 105, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/.../venv/lib/python3.10/site-packages/psycopg/server_cursor.py\", line 294, in execute\n\traise ex.with_traceback(None)\ndjango.db.utils.ProgrammingError: for SELECT DISTINCT, ORDER BY expressions must appear in select list\nLINE 1: ..._field\", $1) FROM \"name_testmodel\" ORDER BY NULLIF(\"ev...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\n----------------------------------------------------------------------\nRan 1 test in 0.010s\nFAILED (errors=1)\nDestroying test database for alias 'default'...\nRemoving the .distinct() call prevents the error.\nThis is the relevant excerpt from the postgres log:\n2023-12-11 19:15:15.900 UTC [18994] name@test_name ERROR: for SELECT DISTINCT, ORDER BY expressions must appear in select list at character 235\n2023-12-11 19:15:15.900 UTC [18994] name@test_name STATEMENT: DECLARE \"_django_curs_139772156350464_sync_1\" NO SCROLL CURSOR FOR SELECT DISTINCT \"name_testmodel\".\"id\", \"name_testmodel\".\"test_field\", NULLIF(\"name_testmodel\".\"test_field\", $1) FROM \"name_testmodel\" ORDER BY NULLIF(\"name_testmodel\".\"test_field\", $2) ASC\nWhen using psycopg2, this is the resulting postgres log (without errors):\n2023-12-11 19:19:32.456 UTC [19038] name@test_name LOG: statement: DECLARE \"_django_curs_140476300926976_sync_1\" NO SCROLL CURSOR WITHOUT HOLD FOR SELECT DISTINCT \"name_testmodel\".\"id\", \"name_testmodel\".\"test_field\", NULLIF(\"name_testmodel\".\"test_field\", '') FROM \"name_testmodel\" ORDER BY NULLIF(\"name_testmodel\".\"test_field\", '') ASC\n2023-12-11 19:19:32.456 UTC [19038] name@test_name LOG: statement: FETCH FORWARD 2000 FROM \"_django_curs_140476300926976_sync_1\"\n2023-12-11 19:19:32.456 UTC [19038] name@test_name LOG: statement: CLOSE \"_django_curs_140476300926976_sync_1\"\n", "hints_text": [["Have \u200byou enabled server-side parameters bindings?", 1702316627.0], ["Replying to Simon Charette: Have \u200byou enabled server-side parameters bindings? No, in the database configuration, no OPTIONS are defined, so it should default to client-side binding. The test I posted above fails independently of this setting (i.e., both with \"OPTIONS\": { \"server_side_binding\": True } and with \"OPTIONS\": { \"server_side_binding\": False }).", 1702368638.0], ["It appears that psycopg>=3 will \u200balways use server-side cursors and ignores cursor_factory when using a named cursor and we know they are causing issues with how the ORM generates SQL (DISTINCT, GROUP BY, ORDER BY) as it doesn't have proper prepared statement support yet (#20516). I see a few paths forward here Adapt psycopg3 to allow the use of named client cursors or have Django directly create cursors instead of calling create_cursor so it can issue the proper DECLARE, FETCH, CLOSE commands. I'm not sure this is possible but I assume it is given it was the case of psycopg2. On the Django side, when on psycopg>=3, make it so the DISABLE_SERVER_SIDE_CURSORS \u200bsetting defaults to not db_settings.get(\"server_side_binding\", False) and consider merging both settings under a single server_side_cursors: bool setting instead. This would disable server side cursors on psycopg>=3 entirely until #20516 is fixed which I think is the right thing to do until we've demonstrated that we actually support this configuration properly. Invest significant efforts in getting #20516 fixed so we can enable server side cursors which require the ORM to generate SQL that can be prepared. Until a solution lands Richard you have two choices Keep using psycopg2 Use psycopg>=3 but \u200bdisable server side cursors", 1702378272.0], ["Elevating to release blocker for 4.2 as it's a bug in a newly released feature (psycopg>=3 support). Just submitted \u200ba patch for it.", 1702662124.0]], "created_at": "2023-12-15T23:39:20Z"}
{"repo": "django/django", "pull_number": 17613, "instance_id": "django__django-17613", "issue_numbers": ["29942"], "base_commit": "f030236a86a64a4befd3cc8093e2bbeceef52a31", "patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex e279751601af..c8e5893f19b6 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -1,6 +1,6 @@\n from django.core.exceptions import ValidationError\n-from django.forms import Form\n from django.forms.fields import BooleanField, IntegerField\n+from django.forms.forms import Form\n from django.forms.renderers import get_default_renderer\n from django.forms.utils import ErrorList, RenderableFormMixin\n from django.forms.widgets import CheckboxInput, HiddenInput, NumberInput\ndiff --git a/docs/_ext/github_links.py b/docs/_ext/github_links.py\nnew file mode 100644\nindex 000000000000..32af97186dfe\n--- /dev/null\n+++ b/docs/_ext/github_links.py\n@@ -0,0 +1,149 @@\n+import ast\n+import functools\n+import importlib.util\n+import pathlib\n+\n+\n+class CodeLocator(ast.NodeVisitor):\n+    def __init__(self):\n+        super().__init__()\n+        self.current_path = []\n+        self.node_line_numbers = {}\n+        self.import_locations = {}\n+\n+    @classmethod\n+    def from_code(cls, code):\n+        tree = ast.parse(code)\n+        locator = cls()\n+        locator.visit(tree)\n+        return locator\n+\n+    def visit_node(self, node):\n+        self.current_path.append(node.name)\n+        self.node_line_numbers[\".\".join(self.current_path)] = node.lineno\n+        self.generic_visit(node)\n+        self.current_path.pop()\n+\n+    def visit_FunctionDef(self, node):\n+        self.visit_node(node)\n+\n+    def visit_ClassDef(self, node):\n+        self.visit_node(node)\n+\n+    def visit_ImportFrom(self, node):\n+        for alias in node.names:\n+            if alias.asname:\n+                # Exclude linking aliases (`import x as y`) to avoid confusion\n+                # when clicking a source link to a differently named entity.\n+                continue\n+            if alias.name == \"*\":\n+                # Resolve wildcard imports.\n+                file = module_name_to_file_path(node.module)\n+                file_contents = file.read_text(encoding=\"utf-8\")\n+                locator = CodeLocator.from_code(file_contents)\n+                self.import_locations |= locator.import_locations\n+                self.import_locations |= {\n+                    n: node.module for n in locator.node_line_numbers if \".\" not in n\n+                }\n+            else:\n+                self.import_locations[alias.name] = (\".\" * node.level) + (\n+                    node.module or \"\"\n+                )\n+\n+\n+@functools.lru_cache(maxsize=1024)\n+def get_locator(file):\n+    file_contents = file.read_text(encoding=\"utf-8\")\n+    return CodeLocator.from_code(file_contents)\n+\n+\n+class CodeNotFound(Exception):\n+    pass\n+\n+\n+def module_name_to_file_path(module_name):\n+    # Avoid importlib machinery as locating a module involves importing its\n+    # parent, which would trigger import side effects.\n+\n+    for suffix in [\".py\", \"/__init__.py\"]:\n+        file_path = pathlib.Path(__file__).parents[2] / (\n+            module_name.replace(\".\", \"/\") + suffix\n+        )\n+        if file_path.exists():\n+            return file_path\n+\n+    raise CodeNotFound\n+\n+\n+def get_path_and_line(module, fullname):\n+    path = module_name_to_file_path(module_name=module)\n+\n+    locator = get_locator(path)\n+\n+    lineno = locator.node_line_numbers.get(fullname)\n+\n+    if lineno is not None:\n+        return path, lineno\n+\n+    imported_object = fullname.split(\".\", maxsplit=1)[0]\n+    try:\n+        imported_path = locator.import_locations[imported_object]\n+    except KeyError:\n+        raise CodeNotFound\n+\n+    # From a statement such as:\n+    # from . import y.z\n+    # - either y.z might be an object in the parent module\n+    # - or y might be a module, and z be an object in y\n+    # also:\n+    # - either the current file is x/__init__.py, and z would be in x.y\n+    # - or the current file is x/a.py, and z would be in x.a.y\n+    if path.name != \"__init__.py\":\n+        # Look in parent module\n+        module = module.rsplit(\".\", maxsplit=1)[0]\n+    try:\n+        imported_module = importlib.util.resolve_name(\n+            name=imported_path, package=module\n+        )\n+    except ImportError as error:\n+        raise ImportError(\n+            f\"Could not import '{imported_path}' in '{module}'.\"\n+        ) from error\n+    try:\n+        return get_path_and_line(module=imported_module, fullname=fullname)\n+    except CodeNotFound:\n+        if \".\" not in fullname:\n+            raise\n+\n+        first_element, remainder = fullname.rsplit(\".\", maxsplit=1)\n+        # Retrying, assuming the first element of the fullname is a module.\n+        return get_path_and_line(\n+            module=f\"{imported_module}.{first_element}\", fullname=remainder\n+        )\n+\n+\n+def get_branch(version, next_version):\n+    if version == next_version:\n+        return \"main\"\n+    else:\n+        return f\"stable/{version}.x\"\n+\n+\n+def github_linkcode_resolve(domain, info, *, version, next_version):\n+    if domain != \"py\":\n+        return None\n+\n+    if not (module := info[\"module\"]):\n+        return None\n+\n+    try:\n+        path, lineno = get_path_and_line(module=module, fullname=info[\"fullname\"])\n+    except CodeNotFound:\n+        return None\n+\n+    branch = get_branch(version=version, next_version=next_version)\n+    relative_path = path.relative_to(pathlib.Path(__file__).parents[2])\n+    # Use \"/\" explicitely to join the path parts since str(file), on Windows,\n+    # uses the Windows path separator which is incorrect for URLs.\n+    url_path = \"/\".join(relative_path.parts)\n+    return f\"https://github.com/django/django/blob/{branch}/{url_path}#L{lineno}\"\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 3c71ced6bf86..a7bfe9fc5243 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -9,6 +9,7 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n \n+import functools\n import sys\n from os.path import abspath, dirname, join\n \n@@ -29,6 +30,10 @@\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n sys.path.append(abspath(join(dirname(__file__), \"_ext\")))\n \n+# Use the module to GitHub url resolver, but import it after the _ext directoy\n+# it lives in has been added to sys.path.\n+import github_links  # NOQA\n+\n # -- General configuration -----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n@@ -40,8 +45,8 @@\n     \"djangodocs\",\n     \"sphinx.ext.extlinks\",\n     \"sphinx.ext.intersphinx\",\n-    \"sphinx.ext.viewcode\",\n     \"sphinx.ext.autosectionlabel\",\n+    \"sphinx.ext.linkcode\",\n ]\n \n # AutosectionLabel settings.\n@@ -432,3 +437,9 @@ def django_release():\n \n # If false, no index is generated.\n # epub_use_index = True\n+\n+linkcode_resolve = functools.partial(\n+    github_links.github_linkcode_resolve,\n+    version=version,\n+    next_version=django_next_version,\n+)\n", "test_patch": "diff --git a/tests/sphinx/__init__.py b/tests/sphinx/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/sphinx/test_github_links.py b/tests/sphinx/test_github_links.py\nnew file mode 100644\nindex 000000000000..c0ca43b0920a\n--- /dev/null\n+++ b/tests/sphinx/test_github_links.py\n@@ -0,0 +1,211 @@\n+import pathlib\n+import sys\n+\n+from django.test import SimpleTestCase\n+\n+\n+def last_n_parts(path, n):\n+    return \"/\".join(path.parts[-n:])\n+\n+\n+# The import must happen at the end of setUpClass, so it can't be imported at\n+# the top of the file.\n+github_links = None\n+\n+\n+class GitHubLinkTests(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        # The file implementing the code under test is in the docs folder and\n+        # is not part of the Django package. This means it cannot be imported\n+        # through standard means. Include its parent in the pythonpath for the\n+        # duration of the tests to allow the code to be imported.\n+        cls.ext_path = str((pathlib.Path(__file__).parents[2] / \"docs/_ext\").resolve())\n+        sys.path.insert(0, cls.ext_path)\n+        cls.addClassCleanup(sys.path.remove, cls.ext_path)\n+        cls.addClassCleanup(sys.modules.pop, \"github_links\", None)\n+        # Linters/IDEs may not be able to detect this as a valid import.\n+        import github_links as _github_links\n+\n+        global github_links\n+        github_links = _github_links\n+\n+    def test_code_locator(self):\n+        locator = github_links.CodeLocator.from_code(\n+            \"\"\"\n+from a import b, c\n+from .d import e, f as g\n+\n+def h():\n+    pass\n+\n+class I:\n+    def j(self):\n+        pass\"\"\"\n+        )\n+\n+        self.assertEqual(locator.node_line_numbers, {\"h\": 5, \"I\": 8, \"I.j\": 9})\n+        self.assertEqual(locator.import_locations, {\"b\": \"a\", \"c\": \"a\", \"e\": \".d\"})\n+\n+    def test_module_name_to_file_path_package(self):\n+        path = github_links.module_name_to_file_path(\"django\")\n+\n+        self.assertEqual(last_n_parts(path, 2), \"django/__init__.py\")\n+\n+    def test_module_name_to_file_path_module(self):\n+        path = github_links.module_name_to_file_path(\"django.shortcuts\")\n+\n+        self.assertEqual(last_n_parts(path, 2), \"django/shortcuts.py\")\n+\n+    def test_get_path_and_line_class(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\", fullname=\"MyClass\"\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5), \"tests/sphinx/testdata/package/module.py\"\n+        )\n+        self.assertEqual(line, 12)\n+\n+    def test_get_path_and_line_func(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\", fullname=\"my_function\"\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5), \"tests/sphinx/testdata/package/module.py\"\n+        )\n+        self.assertEqual(line, 24)\n+\n+    def test_get_path_and_line_method(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\", fullname=\"MyClass.my_method\"\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5), \"tests/sphinx/testdata/package/module.py\"\n+        )\n+        self.assertEqual(line, 16)\n+\n+    def test_get_path_and_line_cached_property(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\",\n+            fullname=\"MyClass.my_cached_property\",\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5), \"tests/sphinx/testdata/package/module.py\"\n+        )\n+        self.assertEqual(line, 20)\n+\n+    def test_get_path_and_line_forwarded_import(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\", fullname=\"MyOtherClass\"\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5), \"tests/sphinx/testdata/package/other_module.py\"\n+        )\n+        self.assertEqual(line, 1)\n+\n+    def test_get_path_and_line_wildcard_import(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\", fullname=\"WildcardClass\"\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5),\n+            \"tests/sphinx/testdata/package/wildcard_module.py\",\n+        )\n+        self.assertEqual(line, 4)\n+\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\",\n+            fullname=\"WildcardMixin\",\n+        )\n+        self.assertEqual(\n+            last_n_parts(path, 5),\n+            \"tests/sphinx/testdata/package/wildcard_base.py\",\n+        )\n+        self.assertEqual(line, 1)\n+\n+    def test_get_path_and_line_forwarded_import_module(self):\n+        path, line = github_links.get_path_and_line(\n+            module=\"tests.sphinx.testdata.package.module\",\n+            fullname=\"other_module.MyOtherClass\",\n+        )\n+\n+        self.assertEqual(\n+            last_n_parts(path, 5), \"tests/sphinx/testdata/package/other_module.py\"\n+        )\n+        self.assertEqual(line, 1)\n+\n+    def test_get_branch_stable(self):\n+        branch = github_links.get_branch(version=\"2.2\", next_version=\"3.2\")\n+        self.assertEqual(branch, \"stable/2.2.x\")\n+\n+    def test_get_branch_latest(self):\n+        branch = github_links.get_branch(version=\"3.2\", next_version=\"3.2\")\n+        self.assertEqual(branch, \"main\")\n+\n+    def test_github_linkcode_resolve_unspecified_domain(self):\n+        domain = \"unspecified\"\n+        info = {}\n+        self.assertIsNone(\n+            github_links.github_linkcode_resolve(\n+                domain, info, version=\"3.2\", next_version=\"3.2\"\n+            )\n+        )\n+\n+    def test_github_linkcode_resolve_unspecified_info(self):\n+        domain = \"py\"\n+        info = {\"module\": None, \"fullname\": None}\n+        self.assertIsNone(\n+            github_links.github_linkcode_resolve(\n+                domain, info, version=\"3.2\", next_version=\"3.2\"\n+            )\n+        )\n+\n+    def test_github_linkcode_resolve_not_found(self):\n+        info = {\n+            \"module\": \"foo.bar.baz.hopefully_non_existant_module\",\n+            \"fullname\": \"MyClass\",\n+        }\n+        self.assertIsNone(\n+            github_links.github_linkcode_resolve(\n+                \"py\", info, version=\"3.2\", next_version=\"3.2\"\n+            )\n+        )\n+\n+    def test_github_linkcode_resolve_link_to_object(self):\n+        info = {\n+            \"module\": \"tests.sphinx.testdata.package.module\",\n+            \"fullname\": \"MyClass\",\n+        }\n+        self.assertEqual(\n+            github_links.github_linkcode_resolve(\n+                \"py\", info, version=\"3.2\", next_version=\"3.2\"\n+            ),\n+            \"https://github.com/django/django/blob/main/tests/sphinx/\"\n+            \"testdata/package/module.py#L12\",\n+        )\n+\n+    def test_github_linkcode_resolve_link_to_class_older_version(self):\n+        info = {\n+            \"module\": \"tests.sphinx.testdata.package.module\",\n+            \"fullname\": \"MyClass\",\n+        }\n+        self.assertEqual(\n+            github_links.github_linkcode_resolve(\n+                \"py\", info, version=\"2.2\", next_version=\"3.2\"\n+            ),\n+            \"https://github.com/django/django/blob/stable/2.2.x/tests/sphinx/\"\n+            \"testdata/package/module.py#L12\",\n+        )\n+\n+    def test_import_error(self):\n+        msg = \"Could not import '.....test' in 'tests.sphinx.testdata.package'.\"\n+        with self.assertRaisesMessage(ImportError, msg):\n+            github_links.get_path_and_line(\n+                module=\"tests.sphinx.testdata.package.import_error\", fullname=\"Test\"\n+            )\ndiff --git a/tests/sphinx/testdata/package/__init__.py b/tests/sphinx/testdata/package/__init__.py\nnew file mode 100644\nindex 000000000000..3a41636b7b89\n--- /dev/null\n+++ b/tests/sphinx/testdata/package/__init__.py\n@@ -0,0 +1,2 @@\n+# This file should never get imported. If it is, then something failed already.\n+raise Exception\ndiff --git a/tests/sphinx/testdata/package/import_error.py b/tests/sphinx/testdata/package/import_error.py\nnew file mode 100644\nindex 000000000000..3eb0a2288f25\n--- /dev/null\n+++ b/tests/sphinx/testdata/package/import_error.py\n@@ -0,0 +1,5 @@\n+from .....test import Test  # noqa\n+\n+\n+class MyClass:\n+    pass\ndiff --git a/tests/sphinx/testdata/package/module.py b/tests/sphinx/testdata/package/module.py\nnew file mode 100644\nindex 000000000000..987923b55ee1\n--- /dev/null\n+++ b/tests/sphinx/testdata/package/module.py\n@@ -0,0 +1,25 @@\n+\"\"\"\n+Example docstring\n+\"\"\"\n+\n+from django.utils.functional import cached_property\n+from tests.sphinx.testdata.package.wildcard_module import *  # noqa\n+\n+from . import other_module  # noqa\n+from .other_module import MyOtherClass  # noqa\n+\n+\n+class MyClass(object):\n+    def __init__(self):\n+        pass\n+\n+    def my_method(self):\n+        pass\n+\n+    @cached_property\n+    def my_cached_property(self):\n+        pass\n+\n+\n+def my_function(self):\n+    pass\ndiff --git a/tests/sphinx/testdata/package/other_module.py b/tests/sphinx/testdata/package/other_module.py\nnew file mode 100644\nindex 000000000000..f210b8e158e1\n--- /dev/null\n+++ b/tests/sphinx/testdata/package/other_module.py\n@@ -0,0 +1,2 @@\n+class MyOtherClass:\n+    pass\ndiff --git a/tests/sphinx/testdata/package/wildcard_base.py b/tests/sphinx/testdata/package/wildcard_base.py\nnew file mode 100644\nindex 000000000000..e8c5b97cb96f\n--- /dev/null\n+++ b/tests/sphinx/testdata/package/wildcard_base.py\n@@ -0,0 +1,2 @@\n+class WildcardMixin:\n+    pass\ndiff --git a/tests/sphinx/testdata/package/wildcard_module.py b/tests/sphinx/testdata/package/wildcard_module.py\nnew file mode 100644\nindex 000000000000..187e367b7278\n--- /dev/null\n+++ b/tests/sphinx/testdata/package/wildcard_module.py\n@@ -0,0 +1,5 @@\n+from .wildcard_base import WildcardMixin  # noqa\n+\n+\n+class WildcardClass:\n+    pass\n", "problem_statement": "viewsource links to contrib.auth.forms not appearing\nDescription\n\t \nDev URL borken: \u200bhttps://docs.djangoproject.com/en/dev/_modules/django/contrib/auth/forms/\nThis \"1.8\" URL works: \u200bhttps://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/forms/\nBut navigating to the Dev version breaks with 404\n", "hints_text": [["It looks like the issue started in Django 1.9. I wonder if the imports changes in fe914341c83b37fd6aa8fd85620cf49dd2328ab0 may be at fault. I haven't looked into how sphinx.ext.viewcode works.", 1541869107.0], ["It is not only contrib.auth.forms. here are the missing source code files list. django/db/models/fields/related_descriptors.html django/contrib/contenttypes/fields.html django/contrib/contenttypes/admin.html django/contrib/contenttypes/forms.html django/contrib/contenttypes/models.html django/contrib/admin/models.html django/contrib/admin/apps.html django/contrib/sessions/base_session.html django/contrib/auth/validators.html django/contrib/auth/views.html django/contrib/auth/mixins.html django/contrib/auth/middleware.html django/contrib/auth/backends.html django/contrib/auth/forms.html django/contrib/auth/models.html django/contrib/auth/base_user.html from \u200bSphinx viewcode extensions: Basically, viewcode extension will import the modules being linked to. when Sphinx tries to do for example import django.contrib.auth.forms, it will get django.core.exceptions.ImproperlyConfigured: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings. So, I created a \u200bPR to load the apps in \u200bhttps://github.com/django/django/blob/master/docs/conf.py. But the docs test failed. But in my local machine, it works and missed source files generated successfully. I don't know this is a good solution or not. just a PR to start the discussion.", 1574589705.0], ["I spent some time trying to understand this issue and the longer I think about it, the less clear it becomes to me which parts of the source code should be linked to and which shouldn't. The list of linked modules at \u200bhttps://docs.djangoproject.com/en/dev/_modules/ is missing a lot of modules, which could well be intentional. (That list is the list of files generated by the viewcode extension, so it contains all the source code files that are linked to somewhere in the documentation, like here: \u200bhttps://docs.djangoproject.com/en/dev/ref/applications/#django.apps.AppConfig.) The modules mentioned in this ticket have not been linked to for a long time (and thus their source code has not been included in the /_modules/.. section of the documentation for that same time). So is this maybe something that we do not actually want to link to?", 1664010362.0], ["\u200bhttps://github.com/django/django/pull/16825", 1683204056.0], ["Updating the status to \"Accepted\" as edits have been pushed recently and need a review :)", 1684727986.0], ["\u200bNew PR", 1685611917.0]], "created_at": "2023-12-15T17:04:32Z"}
{"repo": "django/django", "pull_number": 17604, "instance_id": "django__django-17604", "issue_numbers": ["35032"], "base_commit": "2190096f50c06ac4dd5754cdaa92f250e87b7b6e", "patch": "diff --git a/docs/releases/5.0.txt b/docs/releases/5.0.txt\nindex 4c86337b7456..746eaae83673 100644\n--- a/docs/releases/5.0.txt\n+++ b/docs/releases/5.0.txt\n@@ -508,6 +508,12 @@ Django < 5.0 should be replaced with a ``UUIDField`` subclass backed by\n         def db_type(self, connection):\n             return \"char(32)\"\n \n+        def get_db_prep_value(self, value, connection, prepared=False):\n+            value = super().get_db_prep_value(value, connection, prepared)\n+            if value is not None:\n+                value = value.hex\n+            return value\n+\n For example::\n \n     class MyModel(models.Model):\n@@ -516,8 +522,7 @@ For example::\n Should become::\n \n     class Char32UUIDField(models.UUIDField):\n-        def db_type(self, connection):\n-            return \"char(32)\"\n+        ...\n \n \n     class MyModel(models.Model):\n", "test_patch": "", "problem_statement": "Cannot save record with UUID field after migrating existing UUIDField created in Django < 5.0\nDescription\n\t \nDjango 5.0 release notes specifies that on MariaDB 10.7+, UUIDField is now created as UUID column rather than CHAR(32) column and migrations where \"char(32)\" is hardcoded must be added to keep compatibility for UUIDField<s> created before version 5.0: \u200bhttps://docs.djangoproject.com/en/5.0/releases/5.0/#migrating-existing-uuidfield-on-mariadb-10-7\nHowever after applying such migrations as described in the release notes records cannot be saved anymore:\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/query.py\", line 953, in get_or_create\n\treturn self.create(**params), True\n\t\t ^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/query.py\", line 677, in create\n\tobj.save(force_insert=True, using=self.db)\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/base.py\", line 814, in save\n\tself.save_base(\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/base.py\", line 901, in save_base\n\tupdated = self._save_table(\n\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/base.py\", line 1059, in _save_table\n\tresults = self._do_insert(\n\t\t\t ^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/base.py\", line 1100, in _do_insert\n\treturn manager._insert(\n\t\t ^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/manager.py\", line 87, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/query.py\", line 1845, in _insert\n\treturn query.get_compiler(using=using).execute_sql(returning_fields)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py\", line 1822, in execute_sql\n\tcursor.execute(sql, params)\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 79, in execute\n\treturn self._execute_with_wrappers(\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 92, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 100, in _execute\n\twith self.db.wrap_database_errors:\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/utils.py\", line 91, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 105, in _execute\n\treturn self.cursor.execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/django/db/backends/mysql/base.py\", line 75, in execute\n\treturn self.cursor.execute(query, args)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/MySQLdb/cursors.py\", line 179, in execute\n\tres = self._query(mogrified_query)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/manu/venv/lib/python3.11/site-packages/MySQLdb/cursors.py\", line 330, in _query\n\tdb.query(q)\n File \"/home/manu/venv/lib/python3.11/site-packages/MySQLdb/connections.py\", line 255, in query\n\t_mysql.connection.query(self, query)\ndjango.db.utils.DataError: (1406, \"Data too long for column 'id' at row 1\")\nThat is because, before this commit \u200bhttps://github.com/django/django/commit/7cd187a5ba58d7769039f487faeb9a5a2ff05540, has_native_uuid_field would return False and after the 5.0 change, saving an UUID for old fields that must still use CHAR(32) will not try to save it using the hex value of UUID: \u200bhttps://github.com/django/django/blob/main/django/db/models/fields/__init__.py#L2737\n", "hints_text": [["I've included a possible fix here: \u200bhttps://github.com/django/django/pull/17604/commits/432d4a28b7c79db18f79f091bd66d428ae606483", 1702459367.0], ["Thanks for the report! Sounds reasonable, I'm not sure if we want to add workarounds to the Django itself. What do you think about updating release notes? For example: docs/releases/5.0.txt diff --git a/docs/releases/5.0.txt b/docs/releases/5.0.txt index 4c86337b74..87fda8d866 100644 a b Django < 5.0 should be replaced with a ``UUIDField`` subclass backed by (this hunk was shorter than expected) 508508 def db_type(self, connection): 509509 return \"char(32)\" 510 511 def get_db_prep_value(self, value, connection, prepared=False): 512 value = super().get_db_prep_value(value, connection, prepared) 513 if value is not None: 514 value = value.hex 515 return value 516 510517For example:: 511518 512519 class MyModel(models.Model): \u2026 \u2026 For example:: 516523Should become:: 517524 518525 class Char32UUIDField(models.UUIDField): 519 def db_type(self, connection): 520 return \"char(32)\" 526 ... 521527 522528 523529 class MyModel(models.Model): Regression in 7cd187a5ba58d7769039f487faeb9a5a2ff05540.", 1702474456.0]], "created_at": "2023-12-13T15:18:34Z"}
{"repo": "django/django", "pull_number": 17596, "instance_id": "django__django-17596", "issue_numbers": ["29049"], "base_commit": "e16d0c176e9b89628cdec5e58c418378c4a2436a", "patch": "diff --git a/django/contrib/postgres/fields/array.py b/django/contrib/postgres/fields/array.py\nindex c8e8e132e01d..4171af82f9d2 100644\n--- a/django/contrib/postgres/fields/array.py\n+++ b/django/contrib/postgres/fields/array.py\n@@ -234,6 +234,12 @@ def formfield(self, **kwargs):\n             }\n         )\n \n+    def slice_expression(self, expression, start, length):\n+        # If length is not provided, don't specify an end to slice to the end\n+        # of the array.\n+        end = None if length is None else start + length - 1\n+        return SliceTransform(start, end, expression)\n+\n \n class ArrayRHSMixin:\n     def __init__(self, lhs, rhs):\n@@ -351,9 +357,11 @@ def __init__(self, start, end, *args, **kwargs):\n \n     def as_sql(self, compiler, connection):\n         lhs, params = compiler.compile(self.lhs)\n-        if not lhs.endswith(\"]\"):\n-            lhs = \"(%s)\" % lhs\n-        return \"%s[%%s:%%s]\" % lhs, (*params, self.start, self.end)\n+        # self.start is set to 1 if slice start is not provided.\n+        if self.end is None:\n+            return f\"({lhs})[%s:]\", (*params, self.start)\n+        else:\n+            return f\"({lhs})[%s:%s]\", (*params, self.start, self.end)\n \n \n class SliceTransformFactory:\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex b67a2418d449..c20de5995a34 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -851,6 +851,9 @@ def __init__(self, name):\n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.name)\n \n+    def __getitem__(self, subscript):\n+        return Sliced(self, subscript)\n+\n     def resolve_expression(\n         self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False\n     ):\n@@ -925,6 +928,63 @@ def relabeled_clone(self, relabels):\n         return self\n \n \n+class Sliced(F):\n+    \"\"\"\n+    An object that contains a slice of an F expression.\n+\n+    Object resolves the column on which the slicing is applied, and then\n+    applies the slicing if possible.\n+    \"\"\"\n+\n+    def __init__(self, obj, subscript):\n+        super().__init__(obj.name)\n+        self.obj = obj\n+        if isinstance(subscript, int):\n+            if subscript < 0:\n+                raise ValueError(\"Negative indexing is not supported.\")\n+            self.start = subscript + 1\n+            self.length = 1\n+        elif isinstance(subscript, slice):\n+            if (subscript.start is not None and subscript.start < 0) or (\n+                subscript.stop is not None and subscript.stop < 0\n+            ):\n+                raise ValueError(\"Negative indexing is not supported.\")\n+            if subscript.step is not None:\n+                raise ValueError(\"Step argument is not supported.\")\n+            if subscript.stop and subscript.start and subscript.stop < subscript.start:\n+                raise ValueError(\"Slice stop must be greater than slice start.\")\n+            self.start = 1 if subscript.start is None else subscript.start + 1\n+            if subscript.stop is None:\n+                self.length = None\n+            else:\n+                self.length = subscript.stop - (subscript.start or 0)\n+        else:\n+            raise TypeError(\"Argument to slice must be either int or slice instance.\")\n+\n+    def __repr__(self):\n+        start = self.start - 1\n+        stop = None if self.length is None else start + self.length\n+        subscript = slice(start, stop)\n+        return f\"{self.__class__.__qualname__}({self.obj!r}, {subscript!r})\"\n+\n+    def resolve_expression(\n+        self,\n+        query=None,\n+        allow_joins=True,\n+        reuse=None,\n+        summarize=False,\n+        for_save=False,\n+    ):\n+        resolved = query.resolve_ref(self.name, allow_joins, reuse, summarize)\n+        if isinstance(self.obj, (OuterRef, self.__class__)):\n+            expr = self.obj.resolve_expression(\n+                query, allow_joins, reuse, summarize, for_save\n+            )\n+        else:\n+            expr = resolved\n+        return resolved.output_field.slice_expression(expr, self.start, self.length)\n+\n+\n @deconstructible(path=\"django.db.models.Func\")\n class Func(SQLiteNumericMixin, Expression):\n     \"\"\"An SQL function call.\"\"\"\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 41735d3b7f18..5186f0c414dd 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -15,6 +15,7 @@\n from django.db import connection, connections, router\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.query_utils import DeferredAttribute, RegisterLookupMixin\n+from django.db.utils import NotSupportedError\n from django.utils import timezone\n from django.utils.choices import (\n     BlankChoiceIterator,\n@@ -1143,6 +1144,10 @@ def value_from_object(self, obj):\n         \"\"\"Return the value of this field in the given model instance.\"\"\"\n         return getattr(obj, self.attname)\n \n+    def slice_expression(self, expression, start, length):\n+        \"\"\"Return a slice of this field.\"\"\"\n+        raise NotSupportedError(\"This field does not support slicing.\")\n+\n \n class BooleanField(Field):\n     empty_strings_allowed = False\n@@ -1303,6 +1308,11 @@ def deconstruct(self):\n             kwargs[\"db_collation\"] = self.db_collation\n         return name, path, args, kwargs\n \n+    def slice_expression(self, expression, start, length):\n+        from django.db.models.functions import Substr\n+\n+        return Substr(expression, start, length)\n+\n \n class CommaSeparatedIntegerField(CharField):\n     default_validators = [validators.validate_comma_separated_integer_list]\n@@ -2497,6 +2507,11 @@ def deconstruct(self):\n             kwargs[\"db_collation\"] = self.db_collation\n         return name, path, args, kwargs\n \n+    def slice_expression(self, expression, start, length):\n+        from django.db.models.functions import Substr\n+\n+        return Substr(expression, start, length)\n+\n \n class TimeField(DateTimeCheckMixin, Field):\n     empty_strings_allowed = False\ndiff --git a/docs/ref/models/expressions.txt b/docs/ref/models/expressions.txt\nindex 9d85442d9ca6..67baef7dfc26 100644\n--- a/docs/ref/models/expressions.txt\n+++ b/docs/ref/models/expressions.txt\n@@ -183,6 +183,28 @@ the field value of each one, and saving each one back to the database::\n * getting the database, rather than Python, to do work\n * reducing the number of queries some operations require\n \n+.. _slicing-using-f:\n+\n+Slicing ``F()`` expressions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. versionadded:: 5.1\n+\n+For string-based fields, text-based fields, and\n+:class:`~django.contrib.postgres.fields.ArrayField`, you can use Python's\n+array-slicing syntax. The indices are 0-based and the ``step`` argument to\n+``slice`` is not supported. For example:\n+\n+.. code-block:: pycon\n+\n+    >>> # Replacing a name with a substring of itself.\n+    >>> writer = Writers.objects.get(name=\"Priyansh\")\n+    >>> writer.name = F(\"name\")[1:5]\n+    >>> writer.save()\n+    >>> writer.refresh_from_db()\n+    >>> writer.name\n+    'riya'\n+\n .. _avoiding-race-conditions-using-f:\n \n Avoiding race conditions using ``F()``\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex cc72346eef01..b825e9be4f2a 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -184,6 +184,14 @@ Models\n * :meth:`.QuerySet.order_by` now supports ordering by annotation transforms\n   such as ``JSONObject`` keys and ``ArrayAgg`` indices.\n \n+* :class:`F() <django.db.models.F>` and :class:`OuterRef()\n+  <django.db.models.OuterRef>` expressions that output\n+  :class:`~django.db.models.CharField`, :class:`~django.db.models.EmailField`,\n+  :class:`~django.db.models.SlugField`, :class:`~django.db.models.URLField`,\n+  :class:`~django.db.models.TextField`, or\n+  :class:`~django.contrib.postgres.fields.ArrayField` can now be :ref:`sliced\n+  <slicing-using-f>`.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/expressions/models.py b/tests/expressions/models.py\nindex 0a8a0a6584db..bd4db9050e6a 100644\n--- a/tests/expressions/models.py\n+++ b/tests/expressions/models.py\n@@ -106,3 +106,7 @@ class UUIDPK(models.Model):\n class UUID(models.Model):\n     uuid = models.UUIDField(null=True)\n     uuid_fk = models.ForeignKey(UUIDPK, models.CASCADE, null=True)\n+\n+\n+class Text(models.Model):\n+    name = models.TextField()\ndiff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 073e2e925838..cbb441601cd4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -84,6 +84,7 @@\n     RemoteEmployee,\n     Result,\n     SimulationRun,\n+    Text,\n     Time,\n )\n \n@@ -205,6 +206,100 @@ def test_update(self):\n             ],\n         )\n \n+    def _test_slicing_of_f_expressions(self, model):\n+        tests = [\n+            (F(\"name\")[:], \"Example Inc.\", \"Example Inc.\"),\n+            (F(\"name\")[:7], \"Example Inc.\", \"Example\"),\n+            (F(\"name\")[:6][:5], \"Example\", \"Examp\"),  # Nested slicing.\n+            (F(\"name\")[0], \"Examp\", \"E\"),\n+            (F(\"name\")[5], \"E\", \"\"),\n+            (F(\"name\")[7:], \"Foobar Ltd.\", \"Ltd.\"),\n+            (F(\"name\")[0:10], \"Ltd.\", \"Ltd.\"),\n+            (F(\"name\")[2:7], \"Test GmbH\", \"st Gm\"),\n+            (F(\"name\")[1:][:3], \"st Gm\", \"t G\"),\n+            (F(\"name\")[2:2], \"t G\", \"\"),\n+        ]\n+        for expression, name, expected in tests:\n+            with self.subTest(expression=expression, name=name, expected=expected):\n+                obj = model.objects.get(name=name)\n+                obj.name = expression\n+                obj.save()\n+                obj.refresh_from_db()\n+                self.assertEqual(obj.name, expected)\n+\n+    def test_slicing_of_f_expressions_charfield(self):\n+        self._test_slicing_of_f_expressions(Company)\n+\n+    def test_slicing_of_f_expressions_textfield(self):\n+        Text.objects.bulk_create(\n+            [Text(name=company.name) for company in Company.objects.all()]\n+        )\n+        self._test_slicing_of_f_expressions(Text)\n+\n+    def test_slicing_of_f_expressions_with_annotate(self):\n+        qs = Company.objects.annotate(\n+            first_three=F(\"name\")[:3],\n+            after_three=F(\"name\")[3:],\n+            random_four=F(\"name\")[2:5],\n+            first_letter_slice=F(\"name\")[:1],\n+            first_letter_index=F(\"name\")[0],\n+        )\n+        tests = [\n+            (\"first_three\", [\"Exa\", \"Foo\", \"Tes\"]),\n+            (\"after_three\", [\"mple Inc.\", \"bar Ltd.\", \"t GmbH\"]),\n+            (\"random_four\", [\"amp\", \"oba\", \"st \"]),\n+            (\"first_letter_slice\", [\"E\", \"F\", \"T\"]),\n+            (\"first_letter_index\", [\"E\", \"F\", \"T\"]),\n+        ]\n+        for annotation, expected in tests:\n+            with self.subTest(annotation):\n+                self.assertCountEqual(qs.values_list(annotation, flat=True), expected)\n+\n+    def test_slicing_of_f_expression_with_annotated_expression(self):\n+        qs = Company.objects.annotate(\n+            new_name=Case(\n+                When(based_in_eu=True, then=Concat(Value(\"EU:\"), F(\"name\"))),\n+                default=F(\"name\"),\n+            ),\n+            first_two=F(\"new_name\")[:3],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"first_two\", flat=True),\n+            [\"Exa\", \"EU:\", \"Tes\"],\n+        )\n+\n+    def test_slicing_of_f_expressions_with_negative_index(self):\n+        msg = \"Negative indexing is not supported.\"\n+        indexes = [slice(0, -4), slice(-4, 0), slice(-4), -5]\n+        for i in indexes:\n+            with self.subTest(i=i), self.assertRaisesMessage(ValueError, msg):\n+                F(\"name\")[i]\n+\n+    def test_slicing_of_f_expressions_with_slice_stop_less_than_slice_start(self):\n+        msg = \"Slice stop must be greater than slice start.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            F(\"name\")[4:2]\n+\n+    def test_slicing_of_f_expressions_with_invalid_type(self):\n+        msg = \"Argument to slice must be either int or slice instance.\"\n+        with self.assertRaisesMessage(TypeError, msg):\n+            F(\"name\")[\"error\"]\n+\n+    def test_slicing_of_f_expressions_with_step(self):\n+        msg = \"Step argument is not supported.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            F(\"name\")[::4]\n+\n+    def test_slicing_of_f_unsupported_field(self):\n+        msg = \"This field does not support slicing.\"\n+        with self.assertRaisesMessage(NotSupportedError, msg):\n+            Company.objects.update(num_chairs=F(\"num_chairs\")[:4])\n+\n+    def test_slicing_of_outerref(self):\n+        inner = Company.objects.filter(name__startswith=OuterRef(\"ceo__firstname\")[0])\n+        outer = Company.objects.filter(Exists(inner)).values_list(\"name\", flat=True)\n+        self.assertSequenceEqual(outer, [\"Foobar Ltd.\"])\n+\n     def test_arithmetic(self):\n         # We can perform arithmetic operations in expressions\n         # Make sure we have 2 spare chairs\n@@ -2359,6 +2454,12 @@ def test_expressions(self):\n             repr(Func(\"published\", function=\"TO_CHAR\")),\n             \"Func(F(published), function=TO_CHAR)\",\n         )\n+        self.assertEqual(\n+            repr(F(\"published\")[0:2]), \"Sliced(F(published), slice(0, 2, None))\"\n+        )\n+        self.assertEqual(\n+            repr(OuterRef(\"name\")[1:5]), \"Sliced(OuterRef(name), slice(1, 5, None))\"\n+        )\n         self.assertEqual(repr(OrderBy(Value(1))), \"OrderBy(Value(1), descending=False)\")\n         self.assertEqual(repr(RawSQL(\"table.col\", [])), \"RawSQL(table.col, [])\")\n         self.assertEqual(\ndiff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 8aaa7be07773..386a0afa3a97 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -10,7 +10,7 @@\n from django.core.exceptions import FieldError\n from django.core.management import call_command\n from django.db import IntegrityError, connection, models\n-from django.db.models.expressions import Exists, OuterRef, RawSQL, Value\n+from django.db.models.expressions import Exists, F, OuterRef, RawSQL, Value\n from django.db.models.functions import Cast, JSONObject, Upper\n from django.test import TransactionTestCase, override_settings, skipUnlessDBFeature\n from django.test.utils import isolate_apps\n@@ -594,6 +594,40 @@ def test_slice_annotation(self):\n             [None, [1], [2], [2, 3], [20, 30]],\n         )\n \n+    def test_slicing_of_f_expressions(self):\n+        tests = [\n+            (F(\"field\")[:2], [1, 2]),\n+            (F(\"field\")[2:], [3, 4]),\n+            (F(\"field\")[1:3], [2, 3]),\n+            (F(\"field\")[3], [4]),\n+            (F(\"field\")[:3][1:], [2, 3]),  # Nested slicing.\n+            (F(\"field\")[:3][1], [2]),  # Slice then index.\n+        ]\n+        for expression, expected in tests:\n+            with self.subTest(expression=expression, expected=expected):\n+                instance = IntegerArrayModel.objects.create(field=[1, 2, 3, 4])\n+                instance.field = expression\n+                instance.save()\n+                instance.refresh_from_db()\n+                self.assertEqual(instance.field, expected)\n+\n+    def test_slicing_of_f_expressions_with_annotate(self):\n+        IntegerArrayModel.objects.create(field=[1, 2, 3])\n+        annotated = IntegerArrayModel.objects.annotate(\n+            first_two=F(\"field\")[:2],\n+            after_two=F(\"field\")[2:],\n+            random_two=F(\"field\")[1:3],\n+        ).get()\n+        self.assertEqual(annotated.first_two, [1, 2])\n+        self.assertEqual(annotated.after_two, [3])\n+        self.assertEqual(annotated.random_two, [2, 3])\n+\n+    def test_slicing_of_f_expressions_with_len(self):\n+        queryset = NullableIntegerArrayModel.objects.annotate(\n+            subarray=F(\"field\")[:1]\n+        ).filter(field__len=F(\"subarray__len\"))\n+        self.assertSequenceEqual(queryset, self.objs[:2])\n+\n     def test_usage_in_subquery(self):\n         self.assertSequenceEqual(\n             NullableIntegerArrayModel.objects.filter(\n", "problem_statement": "Add slicing notation to F expressions\nDescription\n\t \nFor fields that are string expressions, the slicing notation should utilize database functions Substr, Left, and Right. Those functions could even be deprecated to require the use of slicing notation.\nFor fields that are iterable expressions, such as ArrayFields or HStoreFields, those could utilize slicing notation in a Pythonic manner.\n", "hints_text": [["Could you give an example of what the syntax would look like?", 1516794410.0], ["I think this is a reference to \u200bmy post on the developers mailing list. That would be F('textfield')[0:5] which would map to SubStr and F('arrayfield')[0:10] which would map to PostgreSQL arrayfield[1:10].", 1516797894.0], ["\u200bPR", 1517933284.0], ["Comments on PR.", 1524111597.0], ["Taking over this since the current asignee hasn't worked on it in a while.", 1555137006.0], ["New PR: \u200bhttps://github.com/django/django/pull/11208", 1555147226.0], ["Since feedback on the review came 10 months after I submitted the patch, and it now has been more than a year since it was submitted, it would be too much of an effort for me to put my mind into this again and get it into a mergable state.", 1593502597.0], ["\u200bPR", 1634648924.0], ["I have been reading up about this issue to continue and finish it off from where David left it, and I have some doubts. The SQL query left by Felix \u200bin this comment also doesn't generate any QuerySet or objects. I tried to run that query using Manager.raw(), which generated no results. Further I investigated the resolve_expression method of SliceableF class in django/db/models/expressions.py, and compared it to other implementations of resolve_expression method in other classes but couldn't find anything concrete which might point to where the error might be. Does a special method for handling slicing and indexing for OuterRef query need to be written so it is properly resolved? That is what I'm thinking because I can't find anything else that is properly handling slicing for OuterRef Queries, unless I'm missing something. Also should None be used instead of '' in slice_expression for end if length is not provided?", 1667880548.0], ["\u200bPR", 1668785076.0]], "created_at": "2023-12-11T12:32:26Z"}
{"repo": "django/django", "pull_number": 17592, "instance_id": "django__django-17592", "issue_numbers": ["28344"], "base_commit": "f3d10546a850df4fe3796f972d5b7e16adf52f54", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 46ac762ccd46..b15bdd032ab0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -673,7 +673,7 @@ def get_deferred_fields(self):\n             if f.attname not in self.__dict__\n         }\n \n-    def refresh_from_db(self, using=None, fields=None):\n+    def refresh_from_db(self, using=None, fields=None, from_queryset=None):\n         \"\"\"\n         Reload field values from the database.\n \n@@ -705,10 +705,13 @@ def refresh_from_db(self, using=None, fields=None):\n                     \"are not allowed in fields.\" % LOOKUP_SEP\n                 )\n \n-        hints = {\"instance\": self}\n-        db_instance_qs = self.__class__._base_manager.db_manager(\n-            using, hints=hints\n-        ).filter(pk=self.pk)\n+        if from_queryset is None:\n+            hints = {\"instance\": self}\n+            from_queryset = self.__class__._base_manager.db_manager(using, hints=hints)\n+        elif using is not None:\n+            from_queryset = from_queryset.using(using)\n+\n+        db_instance_qs = from_queryset.filter(pk=self.pk)\n \n         # Use provided fields, if not set then reload all non-deferred fields.\n         deferred_fields = self.get_deferred_fields()\n@@ -729,9 +732,12 @@ def refresh_from_db(self, using=None, fields=None):\n                 # This field wasn't refreshed - skip ahead.\n                 continue\n             setattr(self, field.attname, getattr(db_instance, field.attname))\n-            # Clear cached foreign keys.\n-            if field.is_relation and field.is_cached(self):\n-                field.delete_cached_value(self)\n+            # Clear or copy cached foreign keys.\n+            if field.is_relation:\n+                if field.is_cached(db_instance):\n+                    field.set_cached_value(self, field.get_cached_value(db_instance))\n+                elif field.is_cached(self):\n+                    field.delete_cached_value(self)\n \n         # Clear cached relations.\n         for field in self._meta.related_objects:\n@@ -745,8 +751,10 @@ def refresh_from_db(self, using=None, fields=None):\n \n         self._state.db = db_instance._state.db\n \n-    async def arefresh_from_db(self, using=None, fields=None):\n-        return await sync_to_async(self.refresh_from_db)(using=using, fields=fields)\n+    async def arefresh_from_db(self, using=None, fields=None, from_queryset=None):\n+        return await sync_to_async(self.refresh_from_db)(\n+            using=using, fields=fields, from_queryset=from_queryset\n+        )\n \n     def serializable_value(self, field_name):\n         \"\"\"\ndiff --git a/docs/ref/models/instances.txt b/docs/ref/models/instances.txt\nindex 45af7f244fc1..6d1a7e5db458 100644\n--- a/docs/ref/models/instances.txt\n+++ b/docs/ref/models/instances.txt\n@@ -142,8 +142,8 @@ value from the database:\n     >>> del obj.field\n     >>> obj.field  # Loads the field from the database\n \n-.. method:: Model.refresh_from_db(using=None, fields=None)\n-.. method:: Model.arefresh_from_db(using=None, fields=None)\n+.. method:: Model.refresh_from_db(using=None, fields=None, from_queryset=None)\n+.. method:: Model.arefresh_from_db(using=None, fields=None, from_queryset=None)\n \n *Asynchronous version*: ``arefresh_from_db()``\n \n@@ -197,6 +197,27 @@ all of the instance's fields when a deferred field is reloaded::\n                     fields = fields.union(deferred_fields)\n             super().refresh_from_db(using, fields, **kwargs)\n \n+The ``from_queryset`` argument allows using a different queryset than the one\n+created from :attr:`~django.db.models.Model._base_manager`. It gives you more\n+control over how the model is reloaded. For example, when your model uses soft\n+deletion you can make ``refresh_from_db()`` to take this into account::\n+\n+    obj.refresh_from_db(from_queryset=MyModel.active_objects.all())\n+\n+You can cache related objects that otherwise would be cleared from the reloaded\n+instance::\n+\n+    obj.refresh_from_db(from_queryset=MyModel.objects.select_related(\"related_field\"))\n+\n+You can lock the row until the end of transaction before reloading a model's\n+values::\n+\n+    obj.refresh_from_db(from_queryset=MyModel.objects.select_for_update())\n+\n+.. versionchanged:: 5.1\n+\n+    The ``from_queryset`` argument was added.\n+\n .. method:: Model.get_deferred_fields()\n \n A helper method that returns a set containing the attribute names of all those\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 2f672e3dce0c..30317eaa1916 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -208,6 +208,11 @@ Models\n   :class:`~django.contrib.postgres.fields.ArrayField` can now be :ref:`sliced\n   <slicing-using-f>`.\n \n+* The new ``from_queryset`` argument of :meth:`.Model.refresh_from_db` and\n+  :meth:`.Model.arefresh_from_db`  allows customizing the queryset used to\n+  reload a model's value. This can be used to lock the row before reloading or\n+  to select related objects.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/async/test_async_model_methods.py b/tests/async/test_async_model_methods.py\nindex 94e0370e3560..d988d7befcb4 100644\n--- a/tests/async/test_async_model_methods.py\n+++ b/tests/async/test_async_model_methods.py\n@@ -23,3 +23,14 @@ async def test_arefresh_from_db(self):\n         await SimpleModel.objects.filter(pk=self.s1.pk).aupdate(field=20)\n         await self.s1.arefresh_from_db()\n         self.assertEqual(self.s1.field, 20)\n+\n+    async def test_arefresh_from_db_from_queryset(self):\n+        await SimpleModel.objects.filter(pk=self.s1.pk).aupdate(field=20)\n+        with self.assertRaises(SimpleModel.DoesNotExist):\n+            await self.s1.arefresh_from_db(\n+                from_queryset=SimpleModel.objects.filter(field=0)\n+            )\n+        await self.s1.arefresh_from_db(\n+            from_queryset=SimpleModel.objects.filter(field__gt=0)\n+        )\n+        self.assertEqual(self.s1.field, 20)\ndiff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 990549edfc4b..8a304e9ace04 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -4,7 +4,14 @@\n from unittest import mock\n \n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n-from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n+from django.db import (\n+    DEFAULT_DB_ALIAS,\n+    DatabaseError,\n+    connection,\n+    connections,\n+    models,\n+    transaction,\n+)\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n@@ -13,7 +20,8 @@\n     TransactionTestCase,\n     skipUnlessDBFeature,\n )\n-from django.test.utils import ignore_warnings\n+from django.test.utils import CaptureQueriesContext, ignore_warnings\n+from django.utils.connection import ConnectionDoesNotExist\n from django.utils.deprecation import RemovedInDjango60Warning\n from django.utils.translation import gettext_lazy\n \n@@ -1003,3 +1011,47 @@ def test_prefetched_cache_cleared(self):\n         # Cache was cleared and new results are available.\n         self.assertCountEqual(a2_prefetched.selfref_set.all(), [s])\n         self.assertCountEqual(a2_prefetched.cited.all(), [s])\n+\n+    @skipUnlessDBFeature(\"has_select_for_update\")\n+    def test_refresh_for_update(self):\n+        a = Article.objects.create(pub_date=datetime.now())\n+        for_update_sql = connection.ops.for_update_sql()\n+\n+        with transaction.atomic(), CaptureQueriesContext(connection) as ctx:\n+            a.refresh_from_db(from_queryset=Article.objects.select_for_update())\n+        self.assertTrue(\n+            any(for_update_sql in query[\"sql\"] for query in ctx.captured_queries)\n+        )\n+\n+    def test_refresh_with_related(self):\n+        a = Article.objects.create(pub_date=datetime.now())\n+        fa = FeaturedArticle.objects.create(article=a)\n+\n+        from_queryset = FeaturedArticle.objects.select_related(\"article\")\n+        with self.assertNumQueries(1):\n+            fa.refresh_from_db(from_queryset=from_queryset)\n+            self.assertEqual(fa.article.pub_date, a.pub_date)\n+        with self.assertNumQueries(2):\n+            fa.refresh_from_db()\n+            self.assertEqual(fa.article.pub_date, a.pub_date)\n+\n+    def test_refresh_overwrites_queryset_using(self):\n+        a = Article.objects.create(pub_date=datetime.now())\n+\n+        from_queryset = Article.objects.using(\"nonexistent\")\n+        with self.assertRaises(ConnectionDoesNotExist):\n+            a.refresh_from_db(from_queryset=from_queryset)\n+        a.refresh_from_db(using=\"default\", from_queryset=from_queryset)\n+\n+    def test_refresh_overwrites_queryset_fields(self):\n+        a = Article.objects.create(pub_date=datetime.now())\n+        headline = \"headline\"\n+        Article.objects.filter(pk=a.pk).update(headline=headline)\n+\n+        from_queryset = Article.objects.only(\"pub_date\")\n+        with self.assertNumQueries(1):\n+            a.refresh_from_db(from_queryset=from_queryset)\n+            self.assertNotEqual(a.headline, headline)\n+        with self.assertNumQueries(1):\n+            a.refresh_from_db(fields=[\"headline\"], from_queryset=from_queryset)\n+            self.assertEqual(a.headline, headline)\n", "problem_statement": "Add from_queryset parameter to Model.refresh_from_db()\nDescription\n\t \nI have a project where we deal with many financial operations that rely on transactions and row-level locking a lot to guard against race conditions. Unfortunately it's a common pattern for a function to accept an instance of model A, start an atomic block, fetch a new instance of the same row with select_for_update(), do a change, call save() and then refresh the original instance. It would all be easier if I could just call instance.refresh_from_db(for_update=True) and it would save a me a DB roundtrip to refresh the original instance passed (Django ORM does not have a session manager so the old object will not otherwise reflect the changes).\n", "hints_text": [["Looks okay at first glance. Is the implementation fairly simple?", 1498652065.0], ["Count me -0 on adding this given all the available select_for_update() options. I fear we might open a can of worms here and have to either say no to nowait, skip_locked and now of support in the future or allow for_update to be a dict delegating kwargs to the underlying select_for_update() call. From my personal experience using select_for_update() with refresh_from_db() is not a common enough pattern to warrant the addition of this kwarg. Just me two cents.", 1498829350.0], ["The basic implementation is fairly simple, but I also share concerns about full (with all options) support for select_for_update() with refresh_from_db().", 1498921429.0], ["Would refresh_for_update make more sense? My case is really common in domains where resources are either shared or have to be protected from race conditions.", 1498931379.0], ["I've had to deal with similar patterns many times (mostly, when avoiding race conditions is critical -- for example, when closing and charging an order). However, I think I might prefer an alternative pattern for this; I'd very much prefer if a model instance can lock it's own row. Currently, I've to construct a single queryset like : # Assume obj is a model instance: MyModel.objects.filter(pk=obj.pk).select_for_update() obj.some_attr = 13 obj.save() A cleaner pattern for this sort of of thing would probably be something like: with obj.lock_for_update(): obj.some_attr = 13 # Would this be auto-saved at the end of the CM's block?", 1504476959.0], ["I don't think a context manager would work as there is no way to unlock a row save for committing the transaction. Also would self.lock_for_update() be a refresh_from_db in disguise or would you prefer for it not to update the instance (potentially overwriting any unsaved changes)?", 1504494671.0], ["If the transaction is written as I did in my example, you don't need to call refresh_from_db, since you only ever keep the reference to one loaded instance. I guess that saving when exiting the context manager would solve any doubts.", 1505420607.0], ["Hugo, I appreciate your example but in my case I am dealing with financial transactions where I absolutely need to keep a database audit trail. This means I can't just wrap everything in a large transaction and risk it getting rolled back. Instead I have a number of tiny atomic blocks that need to be placed with surgical precision. This means I have to fetch the same object multiple times for it to act as the transaction synchronization point (via SELECT FOR UPDATE within each atomic block). Maybe it would be easier to introduce transaction.atomic_with_locked(obj) that would be the equivalent of: with transaction.atomic(): Foo.objects.select_for_update.get(pk=foo.pk) # discarding the result is fine as the lock is now in place yield", 1505455325.0], ["@Patryk that code block you suggest has a bug. foo = Foo.objects.get(id=1) # loads entire record (call these _old_ values) # Now, what happens here if somebody _else_ writes to foo? with transaction.atomic(): Foo.objects.select_for_update.get(pk=foo.pk) # selects and ignores _new_ values yield # Modifies foo ... but foo.save() will save the _old_ values I think this goes to show how necessary this feature is. Until it comes, I'll use this workaround: foo = Foo.objects.get(id=1) with transaction.atomic(): Foo.objects.select_for_update.get(pk=foo.pk) foo.reload_from_db() yield ... which selects the row three times", 1531757799.0], ["I'm investigating this ticket for possible implementation at PyCon UK sprints. Initial thoughts: I like the pattern suggested above: with obj.lock_for_update(): obj.some_attr = 13 # Would this be auto-saved at the end of the CM's block? However, this one implies both a transaction and an auto-save to me. So my proposal would be to \"decorate\" the lock_for_update() with three parameters: atomic: bool=True auto-save: bool=True refresh_from_db: bool=True Would this be an acceptable solution?", 1537334525.0], ["Sorry for commenting on a ticket update 3 years ago, but any plans on it? Honestly I don't think the trick-around is not a common enough pattern...", 1663929984.0], ["ActiveRecord has obj.with_lock { do stuff } which I have used extensively in a variety of applications. I would appreciate something similar in Django.", 1687345051.0], ["Replying to Jure Erzno\u017enik: with obj.lock_for_update(): obj.some_attr = 13 # Would this be auto-saved at the end of the CM's block? However, this one implies both a transaction and an auto-save to me. So my proposal would be to \"decorate\" the lock_for_update() with three parameters: atomic: bool=True auto-save: bool=True refresh_from_db: bool=True Can you elaborate on what those parameters would do? If I understand refresh_from_db correctly - it opens the door to the bug mentioned in comment:10. foo = Foo.objects.filter(...).get() ... Foo.objects.select_for_update.get(pk=foo.pk) it leads to a situation where the object foo differs from the now locked database record. That's why I would like to have a single operation to lock the object and refresh the object with the latest \"locked\" values. I'm all for something like refresh_from_db or refresh_for_update to avoid programming errors and reduce the number of database operations at the same time. That said, I have objections to RoR way of obj.lock_for_update or obj.with_lock: it implies that the lock will be released once the block ends, but that is not the case. Once locked, the record will be locked until the main transaction is committed or rolled back. Nested transactions (savepoints) may release locks when rolled back, but it differs between databases: Oracle does not release locks, but Postgres does (IMHO). It looks nice, but it gives the wrong impression of how it works.", 1702190207.0], ["with transaction.atomic(): a = Account.objects.get(id=1) with transaction.atomic(): Account.objects.select_for_update().get(id=a.pk) a.refresh_from_db() # The lock is not released here # The lock is released here For obj.with_lock to match what is happening in the database we would have to ensure it's called outside transaction but that makes it useless when we have to acquire more than one lock", 1702200215.0], ["Replying to Simon Charette: I fear we might open a can of worms here and have to either say no to nowait, skip_locked and now of support in the future or allow for_update to be a dict delegating kwargs to the underlying select_for_update() call. I think most of those parameters do not apply to operations on the specific model: of when multiple models have to be locked, a QuerySet should be the right choice skip_locked does not make sense when working with one specific instance of Model (primary key) nowait might be interesting - something similar to threading.Lock.acquire(blocking=False). But unlike acquire which returns a boolean, select_for_update raises DatabaseError. Raising an exception from refresh_from_db would suggest the object is in an invalid state. Code that uses the object after the exception would raise eyebrows during code review. Making refresh_from_db return a boolean indicating if it succeeded or not could also lead to issues because people are not used to checking the result of refresh_from_db. So I think the default select_for_update is the only right solution. Adding nowait might be an option together with a new dedicated method refresh_for_update but I haven't seen use for that in my domain.", 1702218449.0], ["of when multiple models have to be locked, a QuerySet should be the right choice What about MTI when a single model involves multiple tables which is something refresh_from_db(fields) supports? MTI is the main reason of \u200bwas added in the first place so isn't incoherent that refresh_from_db(fields) supports inherited fields but refresh_from_db(for_update) doesn't? skip_locked does not make sense when working with one specific instance of Model (primary key) That I agree with. So I think the default select_for_update is the only right solution. I'm still struggling to see the appeal for adding this option to be honest. The reported use case is to handle calls that pass model instance and want to lock the object for the duration of the transaction. Thing is refresh_from_db overwrites any attributes that might have been set on the objet passed by reference and results in the creation of a new temporary model instance anyway so what are the benefits over simply doing a queryset lookup with select_for_update by the primary key and doing a few attribute assignments?", 1702222423.0], ["Replying to Simon Charette: So I think the default select_for_update is the only right solution. I'm still struggling to see the appeal for adding this option to be honest. The reported use case is to handle calls that pass model instance and want to lock the object for the duration of the transaction. Thing is refresh_from_db overwrites any attributes that might have been set on the objet passed by reference and results in the creation of a new temporary model instance anyway so what are the benefits over simply doing a queryset lookup with select_for_update by the primary key and doing a few attribute assignments? I think all this applies to refresh_from_db regardless of locking or not. I don't know what pros and cons were discussed before adding refresh_from_db. Nothing prevents us from assigning attributes after lookup by the primary key but refresh_from_db makes it easier when we do not care about previous values. The locking part gets a bit more annoying in the financial domain because it's a common approach to optimize for concurrency: first reading models with all related models and performing status and conditions checks and locking models just before modifications. I also write entry journals and audit trails before doing updates and rely on rollbacks to clean that up if updates fail.", 1702226673.0]], "created_at": "2023-12-10T19:55:28Z"}
{"repo": "django/django", "pull_number": 17589, "instance_id": "django__django-17589", "issue_numbers": ["35012"], "base_commit": "ed656106537fda0b0ad7e3de1e960817fc9561a5", "patch": "diff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex 65cf0aaf123a..5ba9d1ff1bf0 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -26,6 +26,10 @@ form .form-row p {\n     display: flex;\n }\n \n+.form-multiline {\n+    flex-wrap: wrap;\n+}\n+\n .form-multiline > div {\n     padding-bottom: 10px;\n }\ndiff --git a/docs/releases/4.2.9.txt b/docs/releases/4.2.9.txt\nindex f98803f5eafb..5202fbb6e77e 100644\n--- a/docs/releases/4.2.9.txt\n+++ b/docs/releases/4.2.9.txt\n@@ -9,4 +9,5 @@ Django 4.2.9 fixes a bug in 4.2.8.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 4.2.8 where admin fields on the same line could\n+  overflow the page and become non-interactive (:ticket:`35012`).\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex 2e720e57f09f..79fbf9a0a18b 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -24,3 +24,6 @@ Bugfixes\n * Fixed a bug in Django 5.0 that caused a migration crash on Oracle < 23c when\n   adding a ``GeneratedField`` with ``output_field=BooleanField``\n   (:ticket:`35018`).\n+\n+* Fixed a regression in Django 5.0 where admin fields on the same line could\n+  overflow the page and become non-interactive (:ticket:`35012`).\n", "test_patch": "", "problem_statement": "Wide fieldset fields are hidden.\nDescription\n\t\t\n(last modified by James Gillard)\t\t\nI've traced a change in how one of our fieldsets that contains 3 wide text inputs displays in the admin. The form fields are overflowing the edge of the page. In the 4.2.8-narrow screenshot, the 3rd is initially completely hidden from view. The UI cannot be scrolled but can be tabbed through. Re-adding this removed line of CSS fixes it for me: \u200bhttps://github.com/django/django/commit/bd0ea8c2ba9943ed245771265f55645dc3bfeae8#diff-ec6643f5575f7b320d2f0f6b342a6ff8d3d5b29e305e6d3b45ca115774012f99L27\nThis was working on 4.2.7, breaks on 4.2.8, and I've tested main also and see the same visual change. I don't understand the full history of this change hence I'm not suggesting a fix.\n", "hints_text": [["Hello James, thank you for your report. Could you please try with the latest stable release, 5.0 and let us know how that goes?", 1701695888.0], ["Hi Natalia, the same issue exists on 5.0.0.", 1701696460.0], ["Thank you James! Could you please provide minimal models.py and admin.py to reproduce the issue?", 1701697678.0], ["Here's a zip containing a minimal reproduction, and just the models.py and admin.py files below. The issue is visible with only 2 fields, but I've included 3 as that was what my setup has. class Foo(models.Model): a = models.CharField(max_length=200) b = models.CharField(max_length=200) c = models.CharField(max_length=200) @admin.register(Foo) class FooAdmin(admin.ModelAdmin): fieldsets = ( ( None, { \"fields\": ((\"a\", \"b\", \"c\"),), }, ), )", 1701699664.0], ["Thanks for the report! Regression in bd0ea8c2ba9943ed245771265f55645dc3bfeae.", 1701729891.0]], "created_at": "2023-12-08T16:37:39Z"}
{"repo": "django/django", "pull_number": 17588, "instance_id": "django__django-17588", "issue_numbers": ["34013"], "base_commit": "fcf95e592774a6ededec35481a2061474d467a2b", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex cb559308cd0d..10338259d589 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -387,18 +387,24 @@ def _order_by_pairs(self):\n                     True,\n                 )\n                 continue\n-            if col in self.query.annotations:\n-                # References to an expression which is masked out of the SELECT\n-                # clause.\n+\n+            ref, *transforms = col.split(LOOKUP_SEP)\n+            if expr := self.query.annotations.get(ref):\n                 if self.query.combinator and self.select:\n+                    if transforms:\n+                        raise NotImplementedError(\n+                            \"Ordering combined queries by transforms is not \"\n+                            \"implemented.\"\n+                        )\n                     # Don't use the resolved annotation because other\n-                    # combinated queries might define it differently.\n-                    expr = F(col)\n-                else:\n-                    expr = self.query.annotations[col]\n-                    if isinstance(expr, Value):\n-                        # output_field must be resolved for constants.\n-                        expr = Cast(expr, expr.output_field)\n+                    # combined queries might define it differently.\n+                    expr = F(ref)\n+                if transforms:\n+                    for name in transforms:\n+                        expr = self.query.try_transform(expr, name)\n+                if isinstance(expr, Value):\n+                    # output_field must be resolved for constants.\n+                    expr = Cast(expr, expr.output_field)\n                 yield OrderBy(expr, descending=descending), False\n                 continue\n \ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex 395acb5a8902..1009ffe73969 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -181,6 +181,9 @@ Models\n   :class:`~django.db.models.expressions.ValueRange` allows excluding rows,\n   groups, and ties from the window frames.\n \n+* :meth:`.QuerySet.order_by` now supports ordering by annotation transforms\n+  such as ``JSONObject`` keys and ``ArrayAgg`` indices.\n+\n Requests and Responses\n ~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b01df88109a2..bedc2730a260 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -25,6 +25,7 @@\n     Subquery,\n     Sum,\n     TimeField,\n+    Transform,\n     Value,\n     Variance,\n     When,\n@@ -1727,6 +1728,28 @@ def test_aggregation_random_ordering(self):\n             ordered=False,\n         )\n \n+    def test_order_by_aggregate_transform(self):\n+        class Mod100(Mod, Transform):\n+            def __init__(self, expr):\n+                super().__init__(expr, 100)\n+\n+        sum_field = IntegerField()\n+        sum_field.register_instance_lookup(Mod100, \"mod100\")\n+        publisher_pages = (\n+            Book.objects.values(\"publisher\")\n+            .annotate(sum_pages=Sum(\"pages\", output_field=sum_field))\n+            .order_by(\"sum_pages__mod100\")\n+        )\n+        self.assertQuerySetEqual(\n+            publisher_pages,\n+            [\n+                {\"publisher\": self.p2.id, \"sum_pages\": 528},\n+                {\"publisher\": self.p4.id, \"sum_pages\": 946},\n+                {\"publisher\": self.p1.id, \"sum_pages\": 747},\n+                {\"publisher\": self.p3.id, \"sum_pages\": 1482},\n+            ],\n+        )\n+\n     def test_empty_result_optimization(self):\n         with self.assertNumQueries(0):\n             self.assertEqual(\ndiff --git a/tests/db_functions/comparison/test_json_object.py b/tests/db_functions/comparison/test_json_object.py\nindex 7a10657317de..9a3d48288c4d 100644\n--- a/tests/db_functions/comparison/test_json_object.py\n+++ b/tests/db_functions/comparison/test_json_object.py\n@@ -12,7 +12,12 @@\n class JSONObjectTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n-        Author.objects.create(name=\"Ivan Ivanov\", alias=\"iivanov\")\n+        Author.objects.bulk_create(\n+            [\n+                Author(name=\"Ivan Ivanov\", alias=\"iivanov\"),\n+                Author(name=\"Bertha Berthy\", alias=\"bberthy\"),\n+            ]\n+        )\n \n     def test_empty(self):\n         obj = Author.objects.annotate(json_object=JSONObject()).first()\n@@ -88,6 +93,18 @@ def test_textfield(self):\n         obj = Article.objects.annotate(json_object=JSONObject(text=F(\"text\"))).first()\n         self.assertEqual(obj.json_object, {\"text\": \"x\" * 4000})\n \n+    def test_order_by_key(self):\n+        qs = Author.objects.annotate(attrs=JSONObject(alias=F(\"alias\"))).order_by(\n+            \"attrs__alias\"\n+        )\n+        self.assertQuerySetEqual(qs, Author.objects.order_by(\"alias\"))\n+\n+    def test_order_by_nested_key(self):\n+        qs = Author.objects.annotate(\n+            attrs=JSONObject(nested=JSONObject(alias=F(\"alias\")))\n+        ).order_by(\"-attrs__nested__alias\")\n+        self.assertQuerySetEqual(qs, Author.objects.order_by(\"-alias\"))\n+\n \n @skipIfDBFeature(\"has_json_object_function\")\n class JSONObjectNotSupportedTests(TestCase):\ndiff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 48b03c626a9d..8aaa7be07773 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -469,6 +469,16 @@ def test_group_by_order_by_select_index(self):\n         self.assertIn(\"GROUP BY 2\", sql)\n         self.assertIn(\"ORDER BY 2\", sql)\n \n+    def test_order_by_arrayagg_index(self):\n+        qs = (\n+            NullableIntegerArrayModel.objects.values(\"order\")\n+            .annotate(ids=ArrayAgg(\"id\"))\n+            .order_by(\"-ids__0\")\n+        )\n+        self.assertQuerySetEqual(\n+            qs, [{\"order\": obj.order, \"ids\": [obj.id]} for obj in reversed(self.objs)]\n+        )\n+\n     def test_index(self):\n         self.assertSequenceEqual(\n             NullableIntegerArrayModel.objects.filter(field__0=2), self.objs[1:3]\ndiff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 71d2418f2b24..cb5ba1a26919 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,7 +1,16 @@\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n-from django.db.models import Exists, F, IntegerField, OuterRef, Subquery, Value\n+from django.db.models import (\n+    Exists,\n+    F,\n+    IntegerField,\n+    OuterRef,\n+    Subquery,\n+    Transform,\n+    Value,\n+)\n+from django.db.models.functions import Mod\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import CaptureQueriesContext\n \n@@ -322,6 +331,23 @@ def test_union_with_values_list_and_order_on_annotation(self):\n             operator.itemgetter(\"num\"),\n         )\n \n+    def test_order_by_annotation_transform(self):\n+        class Mod2(Mod, Transform):\n+            def __init__(self, expr):\n+                super().__init__(expr, 2)\n+\n+        output_field = IntegerField()\n+        output_field.register_instance_lookup(Mod2, \"mod2\")\n+        qs1 = Number.objects.annotate(\n+            annotation=Value(1, output_field=output_field),\n+        )\n+        qs2 = Number.objects.annotate(\n+            annotation=Value(2, output_field=output_field),\n+        )\n+        msg = \"Ordering combined queries by transforms is not implemented.\"\n+        with self.assertRaisesMessage(NotImplementedError, msg):\n+            list(qs1.union(qs2).order_by(\"annotation__mod2\"))\n+\n     def test_union_with_select_related_and_order(self):\n         e1 = ExtraInfo.objects.create(value=7, info=\"e1\")\n         a1 = Author.objects.create(name=\"a1\", num=1, extra=e1)\n", "problem_statement": "Support ordering by annotation transforms (e.g JSONObject/ArrayAgg transforms).\nDescription\n\t \nPlease see the example:\nqueryset = Model.objects.all().annotate(\n\tjson_field=functions.JSONObject(\n\t\ttest_pk=models.Value(100) + models.F(\"pk\"),\n\t),\n\ttest_pk_from_json_field=models.F(\"json_field__test_pk\"),\n)\nprint(queryset.order_by(\"json_field__test_pk\")) # AttributeError: 'JSONField' object has no attribute 'model'\nprint(queryset.order_by(\"test_pk_from_json_field\")) # Successful\nFull traceback for ordering by json_field__test_pk:\nTraceback (most recent call last):\n File \"<console>\", line 1, in <module>\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/query.py\", line 256, in __repr__\n\tdata = list(self[:REPR_OUTPUT_SIZE + 1])\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/query.py\", line 280, in __iter__\n\tself._fetch_all()\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/query.py\", line 1324, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/query.py\", line 51, in __iter__\n\tresults = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 1162, in execute_sql\n\tsql, params = self.as_sql()\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 513, in as_sql\n\textra_select, order_by, group_by = self.pre_sql_setup()\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 56, in pre_sql_setup\n\torder_by = self.get_order_by()\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 356, in get_order_by\n\torder_by.extend(self.find_ordering_name(\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 769, in find_ordering_name\n\treturn [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/compiler.py\", line 769, in <listcomp>\n\treturn [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1666, in transform\n\twrapped = previous(field, alias)\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/sql/query.py\", line 1641, in final_transformer\n\treturn field.get_col(alias)\n File \"/usr/local/lib/python3.10/site-packages/django/db/models/fields/__init__.py\", line 397, in get_col\n\tif alias != self.model._meta.db_table or output_field != self:\nAttributeError: 'JSONField' object has no attribute 'model'\nIt seems there is a lack of support JSONField in order_by queryset.\n", "hints_text": [["Thanks for the report. Tentatively accepted for an investigation, I'm not sure if it's feasible.", 1663292145.0], ["\"It seems there is a lack of support JSONField in order_by queryset.\" this is not true as JSONField based example queryset is working fine with order_by method i guess it's more likely lack of support for lookup expression on annotated JSONObject", 1663338115.0], ["i think the issue is JSONObject returns a JSONField and since it's annotated JSONField doesn't get populated with the details of model it belongs to since field generally are called in a model so they get populated with details of that model , here JSONField didn't get any details , including \"self. model\" which causes an error . so the main error occurs when order_by gets a lookup expression \"\" with double underscore , and by default it looks for an in relationship model's field which is populated by model's info but JSONField returned by JSONObject is not populated .thus throwing an error . so ordey_by takes \" \" look up for models in relationship , that is what the syntax is meant for , it never meant to support this syntax for json elements so should i close the ticket or try to work on it and change the status to feature", 1663499460.0], ["i was trying to populate the Model and freshly created JSONField with each other's info like trying to populate JSONField.model with model info and model._meta with JSONField info while the execution of annotate-> order_by-> add_ordering ->names_to_path (where lookup is processed ) but that approach is very naive and making me fall deeper.", 1663679485.0], ["Try this from django.db.models.fields.json import KeyTextTransform Model.objects.all().annotate( json_field=functions.JSONObject( test_pk=models.Value(100) + models.F(\"pk\"), ), test_pk_from_json_field=KeyTextTransform( \"test_pk\", \"json_field\" ) )", 1670397514.0], ["Is this issue still valid? I'm trying to find a good first issue to create a PR for and did some digging here. It looks like a model is attached to a Field object using the contribute_to_class method. It seems that the contribute_to_class method is called when fields are added to the model class during its creation or when fields are added dynamically. In this case, we're not adding or modifying fields in the model class; we're only working with the queryset and computing new values based on existing fields. The queryset annotations do not modify the model class itself, so contribute_to_class is not called in this context.", 1682831926.0], ["I haven't tested this problem with the latest versions of Django 4.2 and postgres 3. Nonetheless, I don't believe that the issue is linked to the modifications made in Django 4.2. So, you can try to run the code from the example and I think it will be still not working.", 1682835308.0], ["Replying to Eugene Morozov: I haven't tested this problem with the latest versions of Django 4.2 and postgres 3. Nonetheless, I don't believe that the issue is linked to the modifications made in Django 4.2. So, you can try to run the code from the example and I think it will be still not working. Thanks for the quick response. I was able to reproduce it on the main branch but to fix it, a model would need to be attached to the JSONField inside the JSONObject method but it can't be done since annotations don't modify the model itself. So it seems like it might require a big architectural change for this to work.", 1682836321.0], ["#35025 was a duplicate for ArrayField returned by ArrayAgg.", 1701988920.0], ["Feels like this is more of a new feature than a bug after all since adding support for JSONObject key ordering required adding generic support for ordering by annotation transforms.", 1701999534.0]], "created_at": "2023-12-08T07:05:38Z"}
{"repo": "django/django", "pull_number": 17587, "instance_id": "django__django-17587", "issue_numbers": ["35024"], "base_commit": "2dca98f4f76e1296b842b183a9287086ec416b58", "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7cec040ceeed..cb559308cd0d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1819,6 +1819,7 @@ def execute_sql(self, returning_fields=None):\n         )\n         opts = self.query.get_meta()\n         self.returning_fields = returning_fields\n+        cols = []\n         with self.connection.cursor() as cursor:\n             for sql, params in self.as_sql():\n                 cursor.execute(sql, params)\n@@ -1829,6 +1830,7 @@ def execute_sql(self, returning_fields=None):\n                 and len(self.query.objs) > 1\n             ):\n                 rows = self.connection.ops.fetch_returned_insert_rows(cursor)\n+                cols = [field.get_col(opts.db_table) for field in self.returning_fields]\n             elif self.connection.features.can_return_columns_from_insert:\n                 assert len(self.query.objs) == 1\n                 rows = [\n@@ -1837,7 +1839,9 @@ def execute_sql(self, returning_fields=None):\n                         self.returning_params,\n                     )\n                 ]\n+                cols = [field.get_col(opts.db_table) for field in self.returning_fields]\n             else:\n+                cols = [opts.pk.get_col(opts.db_table)]\n                 rows = [\n                     (\n                         self.connection.ops.last_insert_id(\n@@ -1847,7 +1851,6 @@ def execute_sql(self, returning_fields=None):\n                         ),\n                     )\n                 ]\n-        cols = [field.get_col(opts.db_table) for field in self.returning_fields]\n         converters = self.get_converters(cols)\n         if converters:\n             rows = list(self.apply_converters(rows, converters))\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex 871f55ec6d64..a8b886c6e2f4 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -12,3 +12,7 @@ Bugfixes\n * Reallowed, following a regression in Django 5.0, using a foreign key to a\n   model with a primary key that is not ``AutoField`` in\n   :attr:`.ModelAdmin.list_filter` (:ticket:`35020`).\n+\n+* Fixed a long standing bug in handling the ``RETURNING INTO`` clause that\n+  caused a crash when creating a model instance with a ``GeneratedField`` which\n+  ``output_field`` had backend-specific converters (:ticket:`35024`).\n", "test_patch": "diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\nindex b4b7b5bd4c5f..aea02964e2d1 100644\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -482,6 +482,18 @@ class UUIDGrandchild(UUIDChild):\n     pass\n \n \n+class GeneratedModelFieldWithConverters(models.Model):\n+    field = models.UUIDField()\n+    field_copy = models.GeneratedField(\n+        expression=F(\"field\"),\n+        output_field=models.UUIDField(),\n+        db_persist=True,\n+    )\n+\n+    class Meta:\n+        required_db_features = {\"supports_stored_generated_columns\"}\n+\n+\n class GeneratedModel(models.Model):\n     a = models.IntegerField()\n     b = models.IntegerField()\ndiff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex 9e5d9d87c361..056a80c29430 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -1,3 +1,5 @@\n+import uuid\n+\n from django.apps import apps\n from django.db import IntegrityError, connection\n from django.db.models import (\n@@ -14,6 +16,7 @@\n \n from .models import (\n     GeneratedModel,\n+    GeneratedModelFieldWithConverters,\n     GeneratedModelNull,\n     GeneratedModelNullVirtual,\n     GeneratedModelOutputFieldDbCollation,\n@@ -266,6 +269,11 @@ class StoredGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n     output_field_db_collation_model = GeneratedModelOutputFieldDbCollation\n     params_model = GeneratedModelParams\n \n+    def test_create_field_with_db_converters(self):\n+        obj = GeneratedModelFieldWithConverters.objects.create(field=uuid.uuid4())\n+        obj = self._refresh_if_needed(obj)\n+        self.assertEqual(obj.field, obj.field_copy)\n+\n \n @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n class VirtualGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n", "problem_statement": "Creating model objects crashes on fields with database converters when RETURNING is not supported.\nDescription\n\t \nCreating model objects crashes on fields with database converters when RETURNING is not supported. For example\nclass GeneratedBooleanFieldModel(Model):\n\tvalue = IntegerField(null=True)\n\thas_value = GeneratedField(\n\t\texpression=Q(value__isnull=False),\n\t\toutput_field=BooleanField(),\n\t\tdb_persist=False,\n\t)\ncrashes with:\n File \"/home/jenkins/workspace/pull-requests-focal/database/spatialite/label/focal-pr/python/python3.10/django/db/models/query.py\", line 1845, in _insert\n\treturn query.get_compiler(using=using).execute_sql(returning_fields)\n File \"/home/jenkins/workspace/pull-requests-focal/database/spatialite/label/focal-pr/python/python3.10/django/db/models/sql/compiler.py\", line 1853, in execute_sql\n\trows = list(self.apply_converters(rows, converters))\n File \"/home/jenkins/workspace/pull-requests-focal/database/spatialite/label/focal-pr/python/python3.10/django/db/models/sql/compiler.py\", line 1500, in apply_converters\n\tvalue = row[pos]\nIndexError: list index out of range\nThis is a long standing issue, however it caused a crash of GeneratedField for all output fields that have backend-specific converters when RETURNING clause is not supported (MySQL and SQLite < 3.35). We should exacerbate severity to a release blocker.\nRegression in d9de74141e8a920940f1b91ed0a3ccb835b55729.\n", "hints_text": [["\u200bPR", 1701934015.0]], "created_at": "2023-12-07T13:24:31Z"}
{"repo": "django/django", "pull_number": 17586, "instance_id": "django__django-17586", "issue_numbers": ["35016"], "base_commit": "705b1702bda78e5d3f63d726efe01f87095d9e96", "patch": "diff --git a/docs/ref/databases.txt b/docs/ref/databases.txt\nindex 8c5f877dfc3f..5a31ceeaaead 100644\n--- a/docs/ref/databases.txt\n+++ b/docs/ref/databases.txt\n@@ -160,8 +160,14 @@ password from the `password file`_, you must specify them in the\n \n     localhost:5432:NAME:USER:PASSWORD\n \n+The PostgreSQL backend passes the content of :setting:`OPTIONS` as keyword\n+arguments to the connection constructor, allowing for more advanced control\n+of driver behavior. All available `parameters`_ are described in detail in the\n+PostgreSQL documentation.\n+\n .. _connection service file: https://www.postgresql.org/docs/current/libpq-pgservice.html\n .. _password file: https://www.postgresql.org/docs/current/libpq-pgpass.html\n+.. _parameters: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS\n \n .. warning::\n \n", "test_patch": "", "problem_statement": "Missing documentation for setting libpq options with the PostgreSQL backend\nDescription\n\t\t\n(last modified by Yashas Donthi)\t\t\nAs far as I can see, when a database uses the django.db.backends.postgresql engine, any options from the OPTIONS key that are not recognized by the engine itself are passed directly to the underlying libpq library. This way you can set options like \u200b`sslmode`.\nBut this doesn't seem to actually be documented anywhere, so it's unclear whether this is actually a supported feature or just an implementation artifact.\nIf this really is supported, then it should be documented - presumably in \u200bPostgreSQL notes.\nPR #17586 to fix this: \u200bhttps://github.com/django/django/pull/17586\n", "hints_text": [["This vary depending on your database backend (as \u200bdocumented), but I agree that it's worth mentioning that the PostgreSQL backend passes the content of OPTIONS as keyword arguments to the connection constructor, allowing for more advanced control of driver behavior. Would you like to prepare a patch?", 1701817306.0]], "created_at": "2023-12-07T11:06:52Z"}
{"repo": "django/django", "pull_number": 17585, "instance_id": "django__django-17585", "issue_numbers": ["35018"], "base_commit": "b287af5dc954628d4b336aefc5027b2edceee64b", "patch": "diff --git a/django/db/backends/oracle/base.py b/django/db/backends/oracle/base.py\nindex 70b280dd0869..a5e7f97df01c 100644\n--- a/django/db/backends/oracle/base.py\n+++ b/django/db/backends/oracle/base.py\n@@ -300,7 +300,7 @@ def init_connection_state(self):\n \n     @async_unsafe\n     def create_cursor(self, name=None):\n-        return FormatStylePlaceholderCursor(self.connection)\n+        return FormatStylePlaceholderCursor(self.connection, self)\n \n     def _commit(self):\n         if self.connection is not None:\n@@ -365,11 +365,15 @@ def __init__(self, param, cursor, strings_only=False):\n             param = Oracle_datetime.from_datetime(param)\n \n         string_size = 0\n-        # Oracle doesn't recognize True and False correctly.\n-        if param is True:\n-            param = 1\n-        elif param is False:\n-            param = 0\n+        has_boolean_data_type = (\n+            cursor.database.features.supports_boolean_expr_in_select_clause\n+        )\n+        if not has_boolean_data_type:\n+            # Oracle < 23c doesn't recognize True and False correctly.\n+            if param is True:\n+                param = 1\n+            elif param is False:\n+                param = 0\n         if hasattr(param, \"bind_parameter\"):\n             self.force_bytes = param.bind_parameter(cursor)\n         elif isinstance(param, (Database.Binary, datetime.timedelta)):\n@@ -389,6 +393,8 @@ def __init__(self, param, cursor, strings_only=False):\n             self.input_size = Database.DB_TYPE_CLOB\n         elif isinstance(param, datetime.datetime):\n             self.input_size = Database.DB_TYPE_TIMESTAMP\n+        elif has_boolean_data_type and isinstance(param, bool):\n+            self.input_size = Database.DB_TYPE_BOOLEAN\n         else:\n             self.input_size = None\n \n@@ -426,9 +432,10 @@ class FormatStylePlaceholderCursor:\n \n     charset = \"utf-8\"\n \n-    def __init__(self, connection):\n+    def __init__(self, connection, database):\n         self.cursor = connection.cursor()\n         self.cursor.outputtypehandler = self._output_type_handler\n+        self.database = database\n \n     @staticmethod\n     def _output_number_converter(value):\n@@ -528,14 +535,24 @@ def _fix_for_params(self, query, params, unify_by_values=False):\n             # values. It can be used only in single query execute() because\n             # executemany() shares the formatted query with each of the params\n             # list. e.g. for input params = [0.75, 2, 0.75, 'sth', 0.75]\n-            # params_dict = {0.75: ':arg0', 2: ':arg1', 'sth': ':arg2'}\n+            # params_dict = {\n+            #     (float, 0.75): ':arg0',\n+            #     (int, 2): ':arg1',\n+            #     (str, 'sth'): ':arg2',\n+            # }\n             # args = [':arg0', ':arg1', ':arg0', ':arg2', ':arg0']\n             # params = {':arg0': 0.75, ':arg1': 2, ':arg2': 'sth'}\n+            # The type of parameters in param_types keys is necessary to avoid\n+            # unifying 0/1 with False/True.\n+            param_types = [(type(param), param) for param in params]\n             params_dict = {\n-                param: \":arg%d\" % i for i, param in enumerate(dict.fromkeys(params))\n+                param_type: \":arg%d\" % i\n+                for i, param_type in enumerate(dict.fromkeys(param_types))\n+            }\n+            args = [params_dict[param_type] for param_type in param_types]\n+            params = {\n+                placeholder: param for (_, param), placeholder in params_dict.items()\n             }\n-            args = [params_dict[param] for param in params]\n-            params = {value: key for key, value in params_dict.items()}\n             query %= tuple(args)\n         else:\n             # Handle params as sequence\ndiff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\nindex dfec605c1b43..f7937f24e359 100644\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -76,7 +76,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     supports_slicing_ordering_in_compound = True\n     requires_compound_order_by_subquery = True\n     allows_multiple_constraints_on_same_fields = False\n-    supports_boolean_expr_in_select_clause = False\n     supports_comparing_boolean_expr = False\n     supports_json_field_contains = False\n     supports_collation_on_textfield = False\n@@ -119,6 +118,9 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n         \"Oracle doesn't support comparing NCLOB to NUMBER.\": {\n             \"generic_relations_regress.tests.GenericRelationTests.test_textlink_filter\",\n         },\n+        \"Oracle doesn't support casting filters to NUMBER.\": {\n+            \"lookup.tests.LookupQueryingTests.test_aggregate_combined_lookup\",\n+        },\n     }\n     django_test_expected_failures = {\n         # A bug in Django/oracledb with respect to string handling (#23843).\n@@ -170,3 +172,7 @@ def supports_primitives_in_json_field(self):\n     @cached_property\n     def supports_frame_exclusion(self):\n         return self.connection.oracle_version >= (21,)\n+\n+    @cached_property\n+    def supports_boolean_expr_in_select_clause(self):\n+        return self.connection.oracle_version >= (23,)\ndiff --git a/django/db/backends/oracle/utils.py b/django/db/backends/oracle/utils.py\nindex a5ec2f3899c2..57d97b3f771e 100644\n--- a/django/db/backends/oracle/utils.py\n+++ b/django/db/backends/oracle/utils.py\n@@ -21,6 +21,7 @@ class InsertVar:\n         \"PositiveBigIntegerField\": int,\n         \"PositiveSmallIntegerField\": int,\n         \"PositiveIntegerField\": int,\n+        \"BooleanField\": int,\n         \"FloatField\": Database.DB_TYPE_BINARY_DOUBLE,\n         \"DateTimeField\": Database.DB_TYPE_TIMESTAMP,\n         \"DateField\": Database.Date,\ndiff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 36c0bbd50acb..41443dc6db4e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1705,10 +1705,13 @@ def as_sql(self, compiler, connection, template=None, **extra_context):\n         return (template % placeholders).rstrip(), params\n \n     def as_oracle(self, compiler, connection):\n-        # Oracle doesn't allow ORDER BY EXISTS() or filters unless it's wrapped\n-        # in a CASE WHEN.\n-        if connection.ops.conditional_expression_supported_in_where_clause(\n-            self.expression\n+        # Oracle < 23c doesn't allow ORDER BY EXISTS() or filters unless it's\n+        # wrapped in a CASE WHEN.\n+        if (\n+            not connection.features.supports_boolean_expr_in_select_clause\n+            and connection.ops.conditional_expression_supported_in_where_clause(\n+                self.expression\n+            )\n         ):\n             copy = self.copy()\n             copy.expression = Case(\ndiff --git a/django/db/models/fields/generated.py b/django/db/models/fields/generated.py\nindex 95d19582de1a..257feeeba269 100644\n--- a/django/db/models/fields/generated.py\n+++ b/django/db/models/fields/generated.py\n@@ -58,7 +58,13 @@ def generated_sql(self, connection):\n         resolved_expression = self.expression.resolve_expression(\n             self._query, allow_joins=False\n         )\n-        return compiler.compile(resolved_expression)\n+        sql, params = compiler.compile(resolved_expression)\n+        if (\n+            getattr(self.expression, \"conditional\", False)\n+            and not connection.features.supports_boolean_expr_in_select_clause\n+        ):\n+            sql = f\"CASE WHEN {sql} THEN 1 ELSE 0 END\"\n+        return sql, params\n \n     def check(self, **kwargs):\n         databases = kwargs.get(\"databases\") or []\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex 6b0b6de66cbf..2e720e57f09f 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -20,3 +20,7 @@ Bugfixes\n * Fixed a regression in Django 5.0 that caused a crash of ``Model.save()`` for\n   models with both ``GeneratedField`` and ``ForeignKey`` fields\n   (:ticket:`35019`).\n+\n+* Fixed a bug in Django 5.0 that caused a migration crash on Oracle < 23c when\n+  adding a ``GeneratedField`` with ``output_field=BooleanField``\n+  (:ticket:`35018`).\n", "test_patch": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 8af459ccd7c1..a198a13b62b5 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1522,7 +1522,6 @@ def test_lookup_in_order_by(self):\n         qs = Season.objects.order_by(LessThan(F(\"year\"), 1910), F(\"year\"))\n         self.assertSequenceEqual(qs, [self.s1, self.s3, self.s2])\n \n-    @skipUnlessDBFeature(\"supports_boolean_expr_in_select_clause\")\n     def test_aggregate_combined_lookup(self):\n         expression = Cast(GreaterThan(F(\"year\"), 1900), models.IntegerField())\n         qs = Season.objects.aggregate(modern=models.Sum(expression))\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex d44b8e25aaf6..c4e61976f16b 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -846,6 +846,27 @@ class Meta:\n             False,\n         )\n \n+    @isolate_apps(\"schema\")\n+    @skipUnlessDBFeature(\"supports_virtual_generated_columns\")\n+    def test_add_generated_boolean_field(self):\n+        class GeneratedBooleanFieldModel(Model):\n+            value = IntegerField(null=True)\n+            has_value = GeneratedField(\n+                expression=Q(value__isnull=False),\n+                output_field=BooleanField(),\n+                db_persist=False,\n+            )\n+\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(GeneratedBooleanFieldModel)\n+        obj = GeneratedBooleanFieldModel.objects.create()\n+        self.assertIs(obj.has_value, False)\n+        obj = GeneratedBooleanFieldModel.objects.create(value=1)\n+        self.assertIs(obj.has_value, True)\n+\n     @isolate_apps(\"schema\")\n     @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n     def test_add_generated_field(self):\n", "problem_statement": "GeneratedField crashes on Oracle 19c when output_field is BooleanField.\nDescription\n\t \nI'm not sure this is actual bug or I am doing something wrong (please point me to the doc if I missed one).\nI am trying GeneratedField on Django 5.0 in a project running on Oracle Database 19c Enterprise Edition, Version 19.18.0.0.0. My real use case is bit more complicated so made up a simpler one - I have ts_password_changed as DateTimeField(blank=True, null=True) and I'm trying to add generated boolean field:\n\tis_password_changed = GeneratedField(\n\t\texpression=ExpressionWrapper(Q(ts_password_changed__isnull=False), output_field=models.BooleanField()),\n\t\toutput_field=models.BooleanField(),\n\t\tdb_persist=False\n\t)\nThe generated migration SQL looks like this:\nALTER TABLE \"CORE_USER\" ADD \"IS_PASSWORD_CHANGED\" NUMBER(1) GENERATED ALWAYS AS (\"TS_PASSWORD_CHANGED\" IS NOT NULL) VIRTUAL;\nand Oracle refuses it with\nORA-54016: Invalid column expression was specified, Position 81\nHowever, it works when I modify the query to\nALTER TABLE \"CORE_USER\" ADD \"IS_PASSWORD_CHANGED\" NUMBER(1) GENERATED ALWAYS AS (CASE WHEN \"TS_PASSWORD_CHANGED\" IS NOT NULL THEN 1 ELSE 0 END) VIRTUAL;\nwhich is probably what Django should be generating.\n", "hints_text": [["Thanks for the report. Unexpectedly, it works fine on Oracle 23c without CASE .... Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.", 1701831574.0], ["Replying to Mariusz Felisiak: Unexpectedly, it works fine on Oracle 23c without CASE .... \u200bOracle 23c introduced BOOLEAN data type in SQL \ud83d\ude31 I never expected this to finally happen.", 1701832052.0]], "created_at": "2023-12-07T10:55:38Z"}
{"repo": "django/django", "pull_number": 17584, "instance_id": "django__django-17584", "issue_numbers": ["34742"], "base_commit": "5b3b791e9046461901df3898be8544e14d91b931", "patch": "diff --git a/django/middleware/common.py b/django/middleware/common.py\nindex 12d006127b65..9f71b9d27885 100644\n--- a/django/middleware/common.py\n+++ b/django/middleware/common.py\n@@ -78,12 +78,12 @@ def get_full_path_with_slash(self, request):\n         Return the full path of the request with a trailing slash appended.\n \n         Raise a RuntimeError if settings.DEBUG is True and request.method is\n-        POST, PUT, or PATCH.\n+        DELETE, POST, PUT, or PATCH.\n         \"\"\"\n         new_path = request.get_full_path(force_append_slash=True)\n         # Prevent construction of scheme relative urls.\n         new_path = escape_leading_slashes(new_path)\n-        if settings.DEBUG and request.method in (\"POST\", \"PUT\", \"PATCH\"):\n+        if settings.DEBUG and request.method in (\"DELETE\", \"POST\", \"PUT\", \"PATCH\"):\n             raise RuntimeError(\n                 \"You called this URL via %(method)s, but the URL doesn't end \"\n                 \"in a slash and you have APPEND_SLASH set. Django can't \"\n", "test_patch": "diff --git a/tests/middleware/tests.py b/tests/middleware/tests.py\nindex 2153a0bb5a69..4dc1c83c42a3 100644\n--- a/tests/middleware/tests.py\n+++ b/tests/middleware/tests.py\n@@ -107,11 +107,11 @@ def test_append_slash_redirect_querystring_have_slash(self):\n         self.assertEqual(resp.url, \"/slash/?test=slash/\")\n \n     @override_settings(APPEND_SLASH=True, DEBUG=True)\n-    def test_append_slash_no_redirect_on_POST_in_DEBUG(self):\n+    def test_append_slash_no_redirect_in_DEBUG(self):\n         \"\"\"\n         While in debug mode, an exception is raised with a warning\n-        when a failed attempt is made to POST, PUT, or PATCH to an URL which\n-        would normally be redirected to a slashed version.\n+        when a failed attempt is made to DELETE, POST, PUT, or PATCH to an URL\n+        which would normally be redirected to a slashed version.\n         \"\"\"\n         msg = \"maintaining %s data. Change your form to point to testserver/slash/\"\n         request = self.rf.get(\"/slash\")\n@@ -126,6 +126,9 @@ def test_append_slash_no_redirect_on_POST_in_DEBUG(self):\n         request.method = \"PATCH\"\n         with self.assertRaisesMessage(RuntimeError, msg % request.method):\n             CommonMiddleware(get_response_404)(request)\n+        request = self.rf.delete(\"/slash\")\n+        with self.assertRaisesMessage(RuntimeError, msg % request.method):\n+            CommonMiddleware(get_response_404)(request)\n \n     @override_settings(APPEND_SLASH=False)\n     def test_append_slash_disabled(self):\n", "problem_statement": "calling a DELETE endpoint without a trailing slash does not thow RuntimeError in DEBUG mode\nDescription\n\t\t\n(last modified by Troy Sankey)\t\t\nIf DEBUG mode is enabled, and APPEND_SLASH is set to True, calling a standard DRF-generated POST, PUT, or PATCH endpoint without a trailing slash will result in intentionally raising a RuntimeError in order to warn developers that API clients should be fixed to include a trailing slash or else the 301 redirect will silently convert the request into a GET and clear the request payload:\n\u200bhttps://github.com/django/django/blob/fbac2a4dd846b52c4f379eacb5bab654fe9540cc/django/middleware/common.py#L86\nThe problem:\nThe above linked code doesn't also do the same for DELETE, so DELETE calls missing trailing slashes are silently converted to GET calls in development environments which could result in uncaught bugs in production.\nI proposed a simple fix: \u200bhttps://github.com/django/django/pull/17072/files\n", "hints_text": [["Accepting this ticket as it's coherent with #24145 (5b74134f27eabf92870e1c5e81f9e4999f113eab). See tests/middleware/tests.py to add an assertion to test_append_slash_no_redirect_on_POST_in_DEBUG Troy.", 1690305199.0], ["I have added an assertion to test_append_slash_no_redirect_in_DEBUG in tests/middleware/tests.py which would check for DELETE request along with POST, PUT, and PATCH. The pull request can be found here: \u200bhttps://github.com/django/django/pull/17584", 1701918548.0], ["Please don't mark your own PRs as \u200bReady for checkin.", 1701918794.0]], "created_at": "2023-12-07T08:59:51Z"}
{"repo": "django/django", "pull_number": 17583, "instance_id": "django__django-17583", "issue_numbers": ["35019"], "base_commit": "eeb2119985d9879b1d9ac3730ea0b53c0c019221", "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6eaa600f107b..4a9150bf37fa 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -781,7 +781,11 @@ def save(\n         if force_insert and (force_update or update_fields):\n             raise ValueError(\"Cannot force both insert and updating in model saving.\")\n \n-        deferred_fields = self.get_deferred_fields()\n+        deferred_non_generated_fields = {\n+            f.attname\n+            for f in self._meta.concrete_fields\n+            if f.attname not in self.__dict__ and f.generated is False\n+        }\n         if update_fields is not None:\n             # If update_fields is empty, skip the save. We do also check for\n             # no-op saves later on for inheritance cases. This bailout is\n@@ -802,12 +806,16 @@ def save(\n \n         # If saving to the same database, and this model is deferred, then\n         # automatically do an \"update_fields\" save on the loaded fields.\n-        elif not force_insert and deferred_fields and using == self._state.db:\n+        elif (\n+            not force_insert\n+            and deferred_non_generated_fields\n+            and using == self._state.db\n+        ):\n             field_names = set()\n             for field in self._meta.concrete_fields:\n                 if not field.primary_key and not hasattr(field, \"through\"):\n                     field_names.add(field.attname)\n-            loaded_fields = field_names.difference(deferred_fields)\n+            loaded_fields = field_names.difference(deferred_non_generated_fields)\n             if loaded_fields:\n                 update_fields = frozenset(loaded_fields)\n \ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex a8b886c6e2f4..6b0b6de66cbf 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -16,3 +16,7 @@ Bugfixes\n * Fixed a long standing bug in handling the ``RETURNING INTO`` clause that\n   caused a crash when creating a model instance with a ``GeneratedField`` which\n   ``output_field`` had backend-specific converters (:ticket:`35024`).\n+\n+* Fixed a regression in Django 5.0 that caused a crash of ``Model.save()`` for\n+  models with both ``GeneratedField`` and ``ForeignKey`` fields\n+  (:ticket:`35019`).\n", "test_patch": "diff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\nindex aea02964e2d1..69b4e26145ce 100644\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -502,6 +502,7 @@ class GeneratedModel(models.Model):\n         output_field=models.IntegerField(),\n         db_persist=True,\n     )\n+    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=True)\n \n     class Meta:\n         required_db_features = {\"supports_stored_generated_columns\"}\n@@ -515,6 +516,7 @@ class GeneratedModelVirtual(models.Model):\n         output_field=models.IntegerField(),\n         db_persist=False,\n     )\n+    fk = models.ForeignKey(Foo, on_delete=models.CASCADE, null=True)\n \n     class Meta:\n         required_db_features = {\"supports_virtual_generated_columns\"}\ndiff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex 056a80c29430..589f78cbb042 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -1,4 +1,5 @@\n import uuid\n+from decimal import Decimal\n \n from django.apps import apps\n from django.db import IntegrityError, connection\n@@ -15,6 +16,7 @@\n from django.test.utils import isolate_apps\n \n from .models import (\n+    Foo,\n     GeneratedModel,\n     GeneratedModelFieldWithConverters,\n     GeneratedModelNull,\n@@ -187,6 +189,19 @@ def test_save(self):\n         m.refresh_from_db()\n         self.assertEqual(m.field, 8)\n \n+    def test_save_model_with_foreign_key(self):\n+        fk_object = Foo.objects.create(a=\"abc\", d=Decimal(\"12.34\"))\n+        m = self.base_model(a=1, b=2, fk=fk_object)\n+        m.save()\n+        m = self._refresh_if_needed(m)\n+        self.assertEqual(m.field, 3)\n+\n+    def test_generated_fields_can_be_deferred(self):\n+        fk_object = Foo.objects.create(a=\"abc\", d=Decimal(\"12.34\"))\n+        m = self.base_model.objects.create(a=1, b=2, fk=fk_object)\n+        m = self.base_model.objects.defer(\"field\").get(id=m.id)\n+        self.assertEqual(m.get_deferred_fields(), {\"field\"})\n+\n     def test_update(self):\n         m = self.base_model.objects.create(a=1, b=2)\n         self.base_model.objects.update(b=3)\n", "problem_statement": "Model with GeneratedField and ForeignKey raises an error on save().\nDescription\n\t\t\n(last modified by Deb Kumar Das)\t\t\nWhen using GeneratedField column along with a ForeignKey column, getting error while saving.\nThe below model throws error while saving data from admin panel.\nclass Square(models.Model):\n\tside = models.IntegerField()\n\tarea = models.GeneratedField(\n\t\texpression=F(\"side\") * F(\"side\"),\n\t\toutput_field=models.BigIntegerField(),\n\t\tdb_persist=True,\n\t)\n\tuser = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)\nThrows the below error\nCannot force an update in save() with no primary key.\nattached error screenshot\n", "hints_text": [["Good catch! Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.", 1701838849.0], ["The patch will need some improvements as we must consider that generated fields can also be deferred. We'll likely want to add tests for generated field deferral as well.", 1701893240.0]], "created_at": "2023-12-06T22:19:46Z"}
{"repo": "django/django", "pull_number": 17582, "instance_id": "django__django-17582", "issue_numbers": ["35015"], "base_commit": "47033bfd486206d6809068c838d45b999e5c1bd2", "patch": "diff --git a/docs/topics/migrations.txt b/docs/topics/migrations.txt\nindex 248a7addbe4e..9e339852b674 100644\n--- a/docs/topics/migrations.txt\n+++ b/docs/topics/migrations.txt\n@@ -77,16 +77,17 @@ meaning that if a migration fails to apply you will have to manually unpick\n the changes in order to try again (it's impossible to roll back to an\n earlier point).\n \n-In addition, MySQL will fully rewrite tables for almost every schema operation\n-and generally takes a time proportional to the number of rows in the table to\n-add or remove columns. On slower hardware this can be worse than a minute per\n-million rows - adding a few columns to a table with just a few million rows\n-could lock your site up for over ten minutes.\n-\n-Finally, MySQL has relatively small limits on name lengths for columns, tables\n-and indexes, as well as a limit on the combined size of all columns an index\n-covers. This means that indexes that are possible on other backends will\n-fail to be created under MySQL.\n+MySQL 8.0 introduced significant performance enhancements for\n+`DDL operations`_, making them more efficient and reducing the need for full\n+table rebuilds. However, it cannot guarantee a complete absence of locks or\n+interruptions. In situations where locks are still necessary, the duration of\n+these operations will be proportionate to the number of rows involved.\n+\n+Finally, MySQL has a relatively small limit on the combined size of all columns\n+an index covers. This means that indexes that are possible on other backends\n+will fail to be created under MySQL.\n+\n+.. _DDL operations: https://dev.mysql.com/doc/refman/en/innodb-online-ddl-operations.html\n \n SQLite\n ------\n", "test_patch": "", "problem_statement": "Update MySQL migration documentation for Mysql 8\nDescription\n\t\t\n(last modified by Nicolas Lupien)\t\t\nNow that Django dropped support for MySQL 5.7, I think the documentation is no longer valid. \nMySQL lacks support for transactions around schema alteration operations, meaning that if a migration fails to apply you will have to manually unpick the changes in order to try again (it\u2019s impossible to roll back to an earlier point).\nIn addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes.\nFinally, MySQL has relatively small limits on name lengths for columns, tables and indexes, as well as a limit on the combined size of all columns an index covers. This means that indexes that are possible on other backends will fail to be created under MySQL.\n\u200bhttps://docs.djangoproject.com/en/5.0/topics/migrations/#mysql\n", "hints_text": [["MySQL lacks support for transactions around schema alteration operations, meaning that if a migration fails to apply you will have to manually unpick the changes in order to try again (it\u2019s impossible to roll back to an earlier point). This is still true. In addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes. That's no longer true for most operations and should be adjusted. I guess \u200bwe could link to MySQL's Online DDL operations docs. Finally, MySQL has relatively small limits on name lengths for columns, tables and indexes, as well as a limit on the combined size of all columns an index covers. This means that indexes that are possible on other backends will fail to be created under MySQL. I'm pretty sure \u200bthis is still true to a certain extent. Which parts of the documentation you believe are not accurate? Would you be interested in submitting a patch that addresses the inaccuracies?", 1701771701.0], ["Which parts of the documentation you believe are not accurate? I'm not a MySQL expert, it's just that reading this section of the docs seemed outdated. Like you pointed out, many DDL operations in MySQL 8 happens without locking. Would you be interested in submitting a patch that addresses the inaccuracies? Yes, I'll be happy to do the research and submit a patch!", 1701771994.0], ["Maybe a middle sentence: In addition, MySQL will fully rewrite tables for almost every schema operation and generally takes a time proportional to the number of rows in the table to add or remove columns. On slower hardware this can be worse than a minute per million rows - adding a few columns to a table with just a few million rows could lock your site up for over ten minutes. is a bit inaccurate, but you haven't presented any references to prove it. Also, generally this paragraph is still valid. Closing as \"needsinfo\" for now. Feel-free to investigate and provide details what and where is wrong in docs.", 1701781844.0], ["This is my first contribution, let me know if I missed something. \u200bhttps://github.com/django/django/pull/17582", 1701864727.0]], "created_at": "2023-12-06T18:11:15Z"}
{"repo": "django/django", "pull_number": 17581, "instance_id": "django__django-17581", "issue_numbers": ["35020"], "base_commit": "00ef74376e382cf33d6a9529bb9fc1b412e0bc7d", "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b045b2df0251..af69f4cb3b56 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -474,24 +474,24 @@ def lookup_allowed(self, lookup, value, request=None):\n                 # Lookups on nonexistent fields are ok, since they're ignored\n                 # later.\n                 break\n-            if not prev_field or (\n-                prev_field.is_relation\n-                and field not in model._meta.parents.values()\n-                and field is not model._meta.auto_field\n-                and (\n-                    model._meta.auto_field is None\n-                    or part not in getattr(prev_field, \"to_fields\", [])\n-                )\n-            ):\n-                relation_parts.append(part)\n             if not getattr(field, \"path_infos\", None):\n                 # This is not a relational field, so further parts\n                 # must be transforms.\n                 break\n+            if (\n+                not prev_field\n+                or (field.is_relation and field not in model._meta.parents.values())\n+                or (\n+                    prev_field.is_relation\n+                    and model._meta.auto_field is None\n+                    and part not in getattr(prev_field, \"to_fields\", [])\n+                )\n+            ):\n+                relation_parts.append(part)\n             prev_field = field\n             model = field.path_infos[-1].to_opts.model\n \n-        if len(relation_parts) <= 1:\n+        if not relation_parts:\n             # Either a local field filter, or no fields at all.\n             return True\n         valid_lookups = {self.date_hierarchy}\ndiff --git a/docs/releases/5.0.1.txt b/docs/releases/5.0.1.txt\nindex f1b6e0f8bbe1..871f55ec6d64 100644\n--- a/docs/releases/5.0.1.txt\n+++ b/docs/releases/5.0.1.txt\n@@ -9,4 +9,6 @@ Django 5.0.1 fixes several bugs in 5.0.\n Bugfixes\n ========\n \n-* ...\n+* Reallowed, following a regression in Django 5.0, using a foreign key to a\n+  model with a primary key that is not ``AutoField`` in\n+  :attr:`.ModelAdmin.list_filter` (:ticket:`35020`).\n", "test_patch": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex ec46b04c2eaf..e0c4d6e7271f 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -162,6 +162,20 @@ class EmployeeProfileAdmin(ModelAdmin):\n             True,\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_non_autofield_primary_key(self):\n+        class Country(models.Model):\n+            id = models.CharField(max_length=2, primary_key=True)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class PlaceAdmin(ModelAdmin):\n+            list_filter = [\"country\"]\n+\n+        ma = PlaceAdmin(Place, self.site)\n+        self.assertIs(ma.lookup_allowed(\"country__id__exact\", \"DE\", request), True)\n+\n     @isolate_apps(\"modeladmin\")\n     def test_lookup_allowed_foreign_primary(self):\n         class Country(models.Model):\n", "problem_statement": "DisallowedModelAdminLookup for foreign key to non-AutoField primary key\nDescription\n\t \nI have a model whose primary key is not an AutoField, and another model with a foreign key pointing at that:\nclass Country(models.Model):\n\tid = models.CharField(max_length=2, primary_key=True)\nclass Place(models.Model):\n\tcountry = models.ForeignKey(Country, models.CASCADE)\nAnd a ModelAdmin with this list_filter:\n@admin.register(models.Place)\nclass PlaceAdmin(admin.ModelAdmin):\n\tlist_filter = [\"country\"]\nSince 45ecd9acca9b36093e274f47b6877a5f79108d9e, filtering places by country in the admin site raises django.contrib.admin.exceptions.DisallowedModelAdminLookup: Filtering by country__id__exact not allowed\n", "hints_text": [["I can reproduce in latest Django main and I confirm that this is a regression in the reported revision 45ecd9acca9b36093e274f47b6877a5f79108d9e", 1701848434.0]], "created_at": "2023-12-06T18:04:54Z"}
{"repo": "django/django", "pull_number": 17575, "instance_id": "django__django-17575", "issue_numbers": ["34305"], "base_commit": "b0ad41198b3e333f57351e3fce5a1fb47f23f376", "patch": "diff --git a/django/contrib/gis/geoip2.py b/django/contrib/gis/geoip2.py\nindex 898f5d596da8..5f49954209df 100644\n--- a/django/contrib/gis/geoip2.py\n+++ b/django/contrib/gis/geoip2.py\n@@ -25,19 +25,12 @@\n \n try:\n     import geoip2.database\n-except ImportError:\n+except ImportError:  # pragma: no cover\n     HAS_GEOIP2 = False\n else:\n     HAS_GEOIP2 = True\n     __all__ += [\"GeoIP2\", \"GeoIP2Exception\"]\n \n-# Creating the settings dictionary with any settings, if needed.\n-GEOIP_SETTINGS = {\n-    \"GEOIP_PATH\": getattr(settings, \"GEOIP_PATH\", None),\n-    \"GEOIP_CITY\": getattr(settings, \"GEOIP_CITY\", \"GeoLite2-City.mmdb\"),\n-    \"GEOIP_COUNTRY\": getattr(settings, \"GEOIP_COUNTRY\", \"GeoLite2-Country.mmdb\"),\n-}\n-\n \n class GeoIP2Exception(Exception):\n     pass\n@@ -95,7 +88,7 @@ def __init__(self, path=None, cache=0, country=None, city=None):\n             raise GeoIP2Exception(\"Invalid GeoIP caching option: %s\" % cache)\n \n         # Getting the GeoIP data path.\n-        path = path or GEOIP_SETTINGS[\"GEOIP_PATH\"]\n+        path = path or getattr(settings, \"GEOIP_PATH\", None)\n         if not path:\n             raise GeoIP2Exception(\n                 \"GeoIP path must be provided via parameter or the GEOIP_PATH setting.\"\n@@ -106,12 +99,16 @@ def __init__(self, path=None, cache=0, country=None, city=None):\n             # Constructing the GeoIP database filenames using the settings\n             # dictionary. If the database files for the GeoLite country\n             # and/or city datasets exist, then try to open them.\n-            country_db = path / (country or GEOIP_SETTINGS[\"GEOIP_COUNTRY\"])\n+            country_db = path / (\n+                country or getattr(settings, \"GEOIP_COUNTRY\", \"GeoLite2-Country.mmdb\")\n+            )\n             if country_db.is_file():\n                 self._country = geoip2.database.Reader(str(country_db), mode=cache)\n                 self._country_file = country_db\n \n-            city_db = path / (city or GEOIP_SETTINGS[\"GEOIP_CITY\"])\n+            city_db = path / (\n+                city or getattr(settings, \"GEOIP_CITY\", \"GeoLite2-City.mmdb\")\n+            )\n             if city_db.is_file():\n                 self._city = geoip2.database.Reader(str(city_db), mode=cache)\n                 self._city_file = city_db\n", "test_patch": "diff --git a/django/test/testcases.py b/django/test/testcases.py\nindex 9855c318be3f..0e887bdc0b60 100644\n--- a/django/test/testcases.py\n+++ b/django/test/testcases.py\n@@ -51,6 +51,7 @@\n     override_settings,\n )\n from django.utils.functional import classproperty\n+from django.utils.version import PY311\n from django.views.static import serve\n \n logger = logging.getLogger(\"django.test\")\n@@ -64,6 +65,24 @@\n )\n \n \n+if not PY311:\n+    # Backport of unittest.case._enter_context() from Python 3.11.\n+    def _enter_context(cm, addcleanup):\n+        # Look up the special methods on the type to match the with statement.\n+        cls = type(cm)\n+        try:\n+            enter = cls.__enter__\n+            exit = cls.__exit__\n+        except AttributeError:\n+            raise TypeError(\n+                f\"'{cls.__module__}.{cls.__qualname__}' object does not support the \"\n+                f\"context manager protocol\"\n+            ) from None\n+        result = enter(cm)\n+        addcleanup(exit, cm, None, None, None)\n+        return result\n+\n+\n def to_list(value):\n     \"\"\"Put value into a list if it's not already one.\"\"\"\n     if not isinstance(value, list):\n@@ -312,6 +331,12 @@ def _post_teardown(self):\n         \"\"\"Perform post-test things.\"\"\"\n         pass\n \n+    if not PY311:\n+        # Backport of unittest.TestCase.enterClassContext() from Python 3.11.\n+        @classmethod\n+        def enterClassContext(cls, cm):\n+            return _enter_context(cm, cls.addClassCleanup)\n+\n     def settings(self, **kwargs):\n         \"\"\"\n         A context manager that temporarily sets a setting and reverts to the\ndiff --git a/tests/gis_tests/data/geoip2/GeoIP2-City-Test.mmdb b/tests/gis_tests/data/geoip2/GeoIP2-City-Test.mmdb\nnew file mode 100644\nindex 000000000000..3197ef122fa3\nBinary files /dev/null and b/tests/gis_tests/data/geoip2/GeoIP2-City-Test.mmdb differ\ndiff --git a/tests/gis_tests/data/geoip2/GeoIP2-Country-Test.mmdb b/tests/gis_tests/data/geoip2/GeoIP2-Country-Test.mmdb\nnew file mode 100644\nindex 000000000000..d79c9933bb98\nBinary files /dev/null and b/tests/gis_tests/data/geoip2/GeoIP2-Country-Test.mmdb differ\ndiff --git a/tests/gis_tests/data/geoip2/GeoLite2-ASN-Test.mmdb b/tests/gis_tests/data/geoip2/GeoLite2-ASN-Test.mmdb\nnew file mode 100644\nindex 000000000000..afa7e956e4cd\nBinary files /dev/null and b/tests/gis_tests/data/geoip2/GeoLite2-ASN-Test.mmdb differ\ndiff --git a/tests/gis_tests/data/geoip2/GeoLite2-City-Test.mmdb b/tests/gis_tests/data/geoip2/GeoLite2-City-Test.mmdb\nnew file mode 100644\nindex 000000000000..028a6984d93f\nBinary files /dev/null and b/tests/gis_tests/data/geoip2/GeoLite2-City-Test.mmdb differ\ndiff --git a/tests/gis_tests/data/geoip2/GeoLite2-Country-Test.mmdb b/tests/gis_tests/data/geoip2/GeoLite2-Country-Test.mmdb\nnew file mode 100644\nindex 000000000000..a2cbb0831697\nBinary files /dev/null and b/tests/gis_tests/data/geoip2/GeoLite2-Country-Test.mmdb differ\ndiff --git a/tests/gis_tests/data/geoip2/LICENSE b/tests/gis_tests/data/geoip2/LICENSE\nnew file mode 100644\nindex 000000000000..f86abbd73e1c\n--- /dev/null\n+++ b/tests/gis_tests/data/geoip2/LICENSE\n@@ -0,0 +1,4 @@\n+This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n+Unported License. To view a copy of this license, visit\n+http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative\n+Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.\ndiff --git a/tests/gis_tests/data/geoip2/README b/tests/gis_tests/data/geoip2/README\nnew file mode 100644\nindex 000000000000..b6a21720a38d\n--- /dev/null\n+++ b/tests/gis_tests/data/geoip2/README\n@@ -0,0 +1,3 @@\n+These test databases are taken from the following repository:\n+\n+https://github.com/maxmind/MaxMind-DB/\ndiff --git a/tests/gis_tests/test_geoip2.py b/tests/gis_tests/test_geoip2.py\nindex acdfde9ec720..9cd5ffbdfe70 100644\n--- a/tests/gis_tests/test_geoip2.py\n+++ b/tests/gis_tests/test_geoip2.py\n@@ -1,50 +1,59 @@\n-import os\n+import itertools\n import pathlib\n from unittest import mock, skipUnless\n \n from django.conf import settings\n from django.contrib.gis.geoip2 import HAS_GEOIP2\n from django.contrib.gis.geos import GEOSGeometry\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n from django.utils.deprecation import RemovedInDjango60Warning\n \n if HAS_GEOIP2:\n+    import geoip2\n+\n     from django.contrib.gis.geoip2 import GeoIP2, GeoIP2Exception\n \n \n-# Note: Requires both the GeoIP country and city datasets.\n-# The GEOIP_DATA path should be the only setting set (the directory\n-# should contain links or the actual database files 'GeoLite2-City.mmdb' and\n-# 'GeoLite2-City.mmdb'.\n-@skipUnless(\n-    HAS_GEOIP2 and getattr(settings, \"GEOIP_PATH\", None),\n-    \"GeoIP is required along with the GEOIP_PATH setting.\",\n-)\n-class GeoIPTest(SimpleTestCase):\n-    addr = \"129.237.192.1\"\n-    fqdn = \"ku.edu\"\n-\n-    def test01_init(self):\n-        \"GeoIP initialization.\"\n-        g1 = GeoIP2()  # Everything inferred from GeoIP path\n-        path = settings.GEOIP_PATH\n-        g2 = GeoIP2(path, 0)  # Passing in data path explicitly.\n-        # path accepts str and pathlib.Path.\n-        if isinstance(path, str):\n-            g3 = GeoIP2(pathlib.Path(path))\n-        else:\n-            g3 = GeoIP2(str(path))\n+def build_geoip_path(*parts):\n+    return pathlib.Path(__file__).parent.joinpath(\"data/geoip2\", *parts).resolve()\n+\n \n+@skipUnless(HAS_GEOIP2, \"GeoIP2 is required.\")\n+@override_settings(\n+    GEOIP_CITY=\"GeoLite2-City-Test.mmdb\",\n+    GEOIP_COUNTRY=\"GeoLite2-Country-Test.mmdb\",\n+)\n+class GeoLite2Test(SimpleTestCase):\n+    fqdn = \"sky.uk\"\n+    ipv4 = \"2.125.160.216\"\n+    ipv6 = \"::ffff:027d:a0d8\"\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        # Avoid referencing __file__ at module level.\n+        cls.enterClassContext(override_settings(GEOIP_PATH=build_geoip_path()))\n+        # Always mock host lookup to avoid test breakage if DNS changes.\n+        cls.enterClassContext(mock.patch(\"socket.gethostbyname\", return_value=cls.ipv4))\n+\n+        super().setUpClass()\n+\n+    def test_init(self):\n+        # Everything inferred from GeoIP path.\n+        g1 = GeoIP2()\n+        # Path passed explicitly.\n+        g2 = GeoIP2(settings.GEOIP_PATH, GeoIP2.MODE_AUTO)\n+        # Path provided as a string.\n+        g3 = GeoIP2(str(settings.GEOIP_PATH))\n         for g in (g1, g2, g3):\n             self.assertTrue(g._country)\n             self.assertTrue(g._city)\n \n         # Only passing in the location of one database.\n-        city = os.path.join(path, \"GeoLite2-City.mmdb\")\n-        cntry = os.path.join(path, \"GeoLite2-Country.mmdb\")\n-        g4 = GeoIP2(city, country=\"\")\n+        g4 = GeoIP2(settings.GEOIP_PATH / settings.GEOIP_CITY, country=\"\")\n+        self.assertTrue(g4._city)\n         self.assertIsNone(g4._country)\n-        g5 = GeoIP2(cntry, city=\"\")\n+        g5 = GeoIP2(settings.GEOIP_PATH / settings.GEOIP_COUNTRY, city=\"\")\n+        self.assertTrue(g5._country)\n         self.assertIsNone(g5._city)\n \n         # Improper parameters.\n@@ -57,99 +66,96 @@ def test01_init(self):\n             else:\n                 e = TypeError\n             with self.assertRaises(e):\n-                GeoIP2(bad, 0)\n+                GeoIP2(bad, GeoIP2.MODE_AUTO)\n \n     def test_no_database_file(self):\n-        invalid_path = os.path.join(os.path.dirname(__file__), \"data\")\n-        msg = \"Could not load a database from %s.\" % invalid_path\n+        invalid_path = pathlib.Path(__file__).parent.joinpath(\"data/invalid\").resolve()\n+        msg = f\"Could not load a database from {invalid_path}.\"\n         with self.assertRaisesMessage(GeoIP2Exception, msg):\n             GeoIP2(invalid_path)\n \n-    def test02_bad_query(self):\n-        \"GeoIP query parameter checking.\"\n-        cntry_g = GeoIP2(city=\"<foo>\")\n-        # No city database available, these calls should fail.\n-        with self.assertRaises(GeoIP2Exception):\n-            cntry_g.city(\"tmc.edu\")\n-\n-        # Non-string query should raise TypeError\n-        with self.assertRaises(TypeError):\n-            cntry_g.country_code(17)\n-        with self.assertRaises(TypeError):\n-            cntry_g.country_name(GeoIP2)\n-\n-    @mock.patch(\"socket.gethostbyname\")\n-    def test03_country(self, gethostbyname):\n-        \"GeoIP country querying methods.\"\n-        gethostbyname.return_value = \"128.249.1.1\"\n-        g = GeoIP2(city=\"<foo>\")\n-\n-        for query in (self.fqdn, self.addr):\n-            self.assertEqual(\n-                \"US\",\n-                g.country_code(query),\n-                \"Failed for func country_code and query %s\" % query,\n-            )\n-            self.assertEqual(\n-                \"United States\",\n-                g.country_name(query),\n-                \"Failed for func country_name and query %s\" % query,\n-            )\n-            self.assertEqual(\n-                {\"country_code\": \"US\", \"country_name\": \"United States\"},\n-                g.country(query),\n-            )\n-\n-    @mock.patch(\"socket.gethostbyname\")\n-    def test04_city(self, gethostbyname):\n-        \"GeoIP city querying methods.\"\n-        gethostbyname.return_value = \"129.237.192.1\"\n-        g = GeoIP2(country=\"<foo>\")\n-\n-        for query in (self.fqdn, self.addr):\n-            # Country queries should still work.\n-            self.assertEqual(\n-                \"US\",\n-                g.country_code(query),\n-                \"Failed for func country_code and query %s\" % query,\n-            )\n-            self.assertEqual(\n-                \"United States\",\n-                g.country_name(query),\n-                \"Failed for func country_name and query %s\" % query,\n-            )\n-            self.assertEqual(\n-                {\"country_code\": \"US\", \"country_name\": \"United States\"},\n-                g.country(query),\n-            )\n-\n-            # City information dictionary.\n-            d = g.city(query)\n-            self.assertEqual(\"NA\", d[\"continent_code\"])\n-            self.assertEqual(\"North America\", d[\"continent_name\"])\n-            self.assertEqual(\"US\", d[\"country_code\"])\n-            self.assertEqual(\"Lawrence\", d[\"city\"])\n-            self.assertEqual(\"KS\", d[\"region\"])\n-            self.assertEqual(\"America/Chicago\", d[\"time_zone\"])\n-            self.assertFalse(d[\"is_in_european_union\"])\n-            geom = g.geos(query)\n-            self.assertIsInstance(geom, GEOSGeometry)\n-\n-            for e1, e2 in (\n-                geom.tuple,\n-                g.lon_lat(query),\n-                g.lat_lon(query),\n-            ):\n-                self.assertIsInstance(e1, float)\n-                self.assertIsInstance(e2, float)\n-\n-    def test06_ipv6_query(self):\n-        \"GeoIP can lookup IPv6 addresses.\"\n-        g = GeoIP2()\n-        d = g.city(\"2002:81ed:c9a5::81ed:c9a5\")  # IPv6 address for www.nhm.ku.edu\n-        self.assertEqual(\"US\", d[\"country_code\"])\n-        self.assertEqual(\"Lawrence\", d[\"city\"])\n-        self.assertEqual(\"KS\", d[\"region\"])\n+    def test_bad_query(self):\n+        g = GeoIP2(city=\"<invalid>\")\n+\n+        functions = (g.city, g.geos, g.lat_lon, g.lon_lat)\n+        msg = \"Invalid GeoIP city data file: \"\n+        for function in functions:\n+            with self.subTest(function=function.__qualname__):\n+                with self.assertRaisesMessage(GeoIP2Exception, msg):\n+                    function(\"example.com\")\n+\n+        functions += (g.country, g.country_code, g.country_name)\n+        values = (123, 123.45, b\"\", (), [], {}, set(), frozenset(), GeoIP2)\n+        msg = \"GeoIP query must be a string, not type\"\n+        for function, value in itertools.product(functions, values):\n+            with self.subTest(function=function.__qualname__, type=type(value)):\n+                with self.assertRaisesMessage(TypeError, msg):\n+                    function(value)\n+\n+    def test_country(self):\n+        g = GeoIP2(city=\"<invalid>\")\n+        for query in (self.fqdn, self.ipv4, self.ipv6):\n+            with self.subTest(query=query):\n+                self.assertEqual(\n+                    g.country(query),\n+                    {\n+                        \"country_code\": \"GB\",\n+                        \"country_name\": \"United Kingdom\",\n+                    },\n+                )\n+                self.assertEqual(g.country_code(query), \"GB\")\n+                self.assertEqual(g.country_name(query), \"United Kingdom\")\n+\n+    def test_city(self):\n+        g = GeoIP2(country=\"<invalid>\")\n+        for query in (self.fqdn, self.ipv4, self.ipv6):\n+            with self.subTest(query=query):\n+                self.assertEqual(\n+                    g.city(query),\n+                    {\n+                        \"city\": \"Boxford\",\n+                        \"continent_code\": \"EU\",\n+                        \"continent_name\": \"Europe\",\n+                        \"country_code\": \"GB\",\n+                        \"country_name\": \"United Kingdom\",\n+                        \"dma_code\": None,\n+                        \"is_in_european_union\": False,\n+                        \"latitude\": 51.75,\n+                        \"longitude\": -1.25,\n+                        \"postal_code\": \"OX1\",\n+                        \"region\": \"ENG\",\n+                        \"time_zone\": \"Europe/London\",\n+                    },\n+                )\n+\n+                geom = g.geos(query)\n+                self.assertIsInstance(geom, GEOSGeometry)\n+                self.assertEqual(geom.srid, 4326)\n+                self.assertEqual(geom.tuple, (-1.25, 51.75))\n+\n+                self.assertEqual(g.lat_lon(query), (51.75, -1.25))\n+                self.assertEqual(g.lon_lat(query), (-1.25, 51.75))\n+                # Country queries should still work.\n+                self.assertEqual(\n+                    g.country(query),\n+                    {\n+                        \"country_code\": \"GB\",\n+                        \"country_name\": \"United Kingdom\",\n+                    },\n+                )\n+                self.assertEqual(g.country_code(query), \"GB\")\n+                self.assertEqual(g.country_name(query), \"United Kingdom\")\n+\n+    def test_not_found(self):\n+        g1 = GeoIP2(city=\"<invalid>\")\n+        g2 = GeoIP2(country=\"<invalid>\")\n+        for function, query in itertools.product(\n+            (g1.country, g2.city), (\"127.0.0.1\", \"::1\")\n+        ):\n+            with self.subTest(function=function.__qualname__, query=query):\n+                msg = f\"The address {query} is not in the database.\"\n+                with self.assertRaisesMessage(geoip2.errors.AddressNotFoundError, msg):\n+                    function(query)\n \n     def test_del(self):\n         g = GeoIP2()\n@@ -162,8 +168,7 @@ def test_del(self):\n         self.assertIs(country._db_reader.closed, True)\n \n     def test_repr(self):\n-        path = settings.GEOIP_PATH\n-        g = GeoIP2(path=path)\n+        g = GeoIP2()\n         meta = g._reader.metadata()\n         version = \"%s.%s\" % (\n             meta.binary_format_major_version,\n@@ -181,26 +186,47 @@ def test_repr(self):\n         )\n         self.assertEqual(repr(g), expected)\n \n-    @mock.patch(\"socket.gethostbyname\", return_value=\"expected\")\n-    def test_check_query(self, gethostbyname):\n+    def test_check_query(self):\n         g = GeoIP2()\n-        self.assertEqual(g._check_query(\"127.0.0.1\"), \"127.0.0.1\")\n-        self.assertEqual(\n-            g._check_query(\"2002:81ed:c9a5::81ed:c9a5\"), \"2002:81ed:c9a5::81ed:c9a5\"\n-        )\n-        self.assertEqual(g._check_query(\"invalid-ip-address\"), \"expected\")\n+        self.assertEqual(g._check_query(self.ipv4), self.ipv4)\n+        self.assertEqual(g._check_query(self.ipv6), self.ipv6)\n+        self.assertEqual(g._check_query(self.fqdn), self.ipv4)\n \n     def test_coords_deprecation_warning(self):\n         g = GeoIP2()\n         msg = \"GeoIP2.coords() is deprecated. Use GeoIP2.lon_lat() instead.\"\n         with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n-            e1, e2 = g.coords(self.fqdn)\n+            e1, e2 = g.coords(self.ipv4)\n         self.assertIsInstance(e1, float)\n         self.assertIsInstance(e2, float)\n \n     def test_open_deprecation_warning(self):\n         msg = \"GeoIP2.open() is deprecated. Use GeoIP2() instead.\"\n         with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n-            g = GeoIP2.open(settings.GEOIP_PATH, 0)\n+            g = GeoIP2.open(settings.GEOIP_PATH, GeoIP2.MODE_AUTO)\n         self.assertTrue(g._country)\n         self.assertTrue(g._city)\n+\n+\n+@skipUnless(HAS_GEOIP2, \"GeoIP2 is required.\")\n+@override_settings(\n+    GEOIP_CITY=\"GeoIP2-City-Test.mmdb\",\n+    GEOIP_COUNTRY=\"GeoIP2-Country-Test.mmdb\",\n+)\n+class GeoIP2Test(GeoLite2Test):\n+    \"\"\"Non-free GeoIP2 databases are supported.\"\"\"\n+\n+\n+@skipUnless(HAS_GEOIP2, \"GeoIP2 is required.\")\n+class ErrorTest(SimpleTestCase):\n+    def test_missing_path(self):\n+        msg = \"GeoIP path must be provided via parameter or the GEOIP_PATH setting.\"\n+        with self.settings(GEOIP_PATH=None):\n+            with self.assertRaisesMessage(GeoIP2Exception, msg):\n+                GeoIP2()\n+\n+    def test_unsupported_database(self):\n+        msg = \"Unable to recognize database edition: GeoLite2-ASN\"\n+        with self.settings(GEOIP_PATH=build_geoip_path(\"GeoLite2-ASN-Test.mmdb\")):\n+            with self.assertRaisesMessage(GeoIP2Exception, msg):\n+                GeoIP2()\n", "problem_statement": "Refactor the GeoIP2 tests to use MaxMind test data\nDescription\n\t \nAttempted to run the gis_tests today. Ran into the django-docker-box \u200bissue that depends on a refactor in Django itself, so opening a ticket here to track that work.\nEssentially, Tom Forbes proposes committing MaxMind test data to the django repo to enable the test_geoip2 to run without having to download the city and country test files. Looking at the PR, a small refactor was also necessary to enable using @override_settings to point to the files.\n\u200bPR\n", "hints_text": [["Looks good! Please refer to this ticket number in the commit message.", 1675215169.0], ["Both PRs are no longer mergeable.", 1675217501.0], ["\u200bPR", 1701769538.0], ["In ed4f837: Refs #34305 -- Added SimpleTestCase.enterClassContext() on Python < 3.11.", 1702357134.0], ["In a93375e8: Fixed #34305 -- Changed GeoIP2 tests to use MaxMind test databases. GEOIP_SETTINGS is removed from the global scope as this prevents modifications to the settings using @override_settings in tests. Additional improvements now that we have stable test databases include: Made testing more comprehensive and improved coverage Patched socket.gethostbyname() for whole test case Added testing of non-free GeoIP2 databases Co-authored-by: Tom Forbes <tom@\u2026>", 1702357134.0]], "created_at": "2023-12-05T15:45:12Z"}
{"repo": "django/django", "pull_number": 17567, "instance_id": "django__django-17567", "issue_numbers": ["35002"], "base_commit": "dec8aa68f6a2729e57a58c36a21d36daa9a99fed", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex aeb3cde9a4df..f01abf46b084 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -111,7 +111,7 @@ class BaseDatabaseSchemaEditor:\n \n     sql_create_unique = (\n         \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s \"\n-        \"UNIQUE (%(columns)s)%(deferrable)s\"\n+        \"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\n     )\n     sql_delete_unique = sql_delete_constraint\n \n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex d1d18bab176d..d44b8e25aaf6 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3468,7 +3468,7 @@ def test_func_unique_constraint_nondeterministic(self):\n                 editor.add_constraint(Author, constraint)\n \n     @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n-    def test_unique_constraint_nulls_distinct(self):\n+    def test_unique_constraint_index_nulls_distinct(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         nulls_distinct = UniqueConstraint(\n@@ -3491,6 +3491,29 @@ def test_unique_constraint_nulls_distinct(self):\n         self.assertNotIn(nulls_distinct.name, constraints)\n         self.assertNotIn(nulls_not_distinct.name, constraints)\n \n+    @skipUnlessDBFeature(\"supports_nulls_distinct_unique_constraints\")\n+    def test_unique_constraint_nulls_distinct(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(\n+            fields=[\"height\", \"weight\"], name=\"constraint\", nulls_distinct=False\n+        )\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+        Author.objects.create(name=\"\", height=None, weight=None)\n+        Author.objects.create(name=\"\", height=1, weight=None)\n+        Author.objects.create(name=\"\", height=None, weight=1)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"\", height=None, weight=None)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"\", height=1, weight=None)\n+        with self.assertRaises(IntegrityError):\n+            Author.objects.create(name=\"\", height=None, weight=1)\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        constraints = self.get_constraints(Author._meta.db_table)\n+        self.assertNotIn(constraint.name, constraints)\n+\n     @skipIfDBFeature(\"supports_nulls_distinct_unique_constraints\")\n     def test_unique_constraint_nulls_distinct_unsupported(self):\n         # UniqueConstraint is ignored on databases that don't support\n", "problem_statement": "nulls_distinct not honored for ALTER\nDescription\n\t \nThe SQL template for creating uniqueness constraints (BaseDatabaseSchemaEditor.sql_create_unique) does not include the nulls_distinct field necessary to support #34701.\nAs a result, adding a UNIQUE NULLS NOT DISTINCT on migration will end up with standard UNIQUE constraint.\nReplacing\n\t\t\"UNIQUE (%(columns)s)%(deferrable)s\"\nwith\n\t\t\"UNIQUE%(nulls_distinct)s (%(columns)s)%(deferrable)s\"\non line 114 (5.0rc1) worked for me. I'll be happy to create a PR for that.\nAlso, I noticed that the include field does not appear to be rendered in this template as well, although the UniqueConstraint class does have an include argument. I wonder if it should also be included there, as follows (inspired by the sql_create_unique_index template, which I think should only differ w.r.t. to the condition field):\n\t\t\"UNIQUE%(nulls_distinct)s (%(columns)s)%(include)s%(deferrable)s\"\nI picked \"release blocker\" because it's a new feature that's broken, not a random bug unrelated to this release. I hope that was right.\n", "hints_text": [["Definitely a release blocker thanks for testing against the release candidate. Please submit a PR with the proposed changes and a regression test. I'd suggest making the includes change in a distinct commit as this feature was added in 3.2 and thus I don't think it will qualify for a backport.", 1701265970.0], ["Peter, Do you have time today or tomorrow to work on this? The final 5.0 release is scheduled for Monday, so we're in a hurry. If you don't have time, I can handle it.", 1701312798.0], ["I should be able to do it tomorrow.", 1701314040.0], ["I should be able to do it tomorrow.", 1701314040.0], ["FYI, I am on it. -- I found that the includes field missing in this template isn't a bug, because when that modifier is given, another template is used (sql_create_unique_index). The patch will thus contain only the fix for sql_create_unique.", 1701411797.0], ["Patch is here: \u200bhttps://github.com/django/django/pull/17567 Note the comment there regarding the second test.", 1701415112.0]], "created_at": "2023-12-01T13:14:15Z"}
{"repo": "django/django", "pull_number": 17566, "instance_id": "django__django-17566", "issue_numbers": ["35001"], "base_commit": "79099a7ba454581ab521fcb4ea61fc6ed3dccf26", "patch": "diff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex 7a41223ba505..bb539456d339 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -670,10 +670,10 @@ input[type=\"submit\"], button {\n \n     .selector {\n         flex-direction: column;\n+        gap: 10px 0;\n     }\n \n     .selector-available, .selector-chosen {\n-        margin-bottom: 0;\n         flex: 1 1 auto;\n     }\n \ndiff --git a/django/contrib/admin/static/admin/css/widgets.css b/django/contrib/admin/static/admin/css/widgets.css\nindex f5b769333bad..d3d4732cb355 100644\n--- a/django/contrib/admin/static/admin/css/widgets.css\n+++ b/django/contrib/admin/static/admin/css/widgets.css\n@@ -3,7 +3,7 @@\n .selector {\n     display: flex;\n     flex-grow: 1;\n-    gap: 10px;\n+    gap: 0 10px;\n }\n \n .selector select {\n@@ -15,7 +15,6 @@\n \n .selector-available, .selector-chosen {\n     text-align: center;\n-    margin-bottom: 5px;\n     display: flex;\n     flex-direction: column;\n     flex: 1 1;\n@@ -88,6 +87,7 @@\n     width: 22px;\n     background-color: var(--selected-bg);\n     border-radius: 10px;\n+    margin: 0;\n     padding: 0;\n     transform: translateY(-17px);\n }\n@@ -151,7 +151,7 @@ a.selector-chooseall, a.selector-clearall {\n     display: inline-block;\n     height: 16px;\n     text-align: left;\n-    margin: 1px auto 3px;\n+    margin: 0 auto;\n     overflow: hidden;\n     font-weight: bold;\n     line-height: 16px;\n@@ -580,8 +580,10 @@ ul.timelist, .timelist li {\n /* RELATED WIDGET WRAPPER */\n .related-widget-wrapper {\n     display: flex;\n-    gap: 10px;\n+    gap: 0 10px;\n     flex-grow: 1;\n+    flex-wrap: wrap;\n+    margin-bottom: 5px;\n }\n \n .related-widget-wrapper-link {\n", "test_patch": "", "problem_statement": "Add related object icon (green plus sign) is not fully visible in some screens\nDescription\n\t \nWhile reviewing and debugging ticket #34995, I've noticed that the \"green plus sign\" used to add related objects is not fully visible in some screens (see attached). As far as I've investigated, this may be caused by having the following in responsive.css for @media (max-width: 767px):\n\t.aligned .form-row,\n\t.aligned .form-row > div {\n\t\tmax-width: 100vw;\n\t}\nI'm unclear if this is a release blocker though.\n", "hints_text": [["Example of issue in Django 5.0", 1701249458.0], ["Example of issue in 4.2", 1701249473.0], ["Regression in d687febce5868545f99974d2499a91f81a32fef5", 1701249869.0], ["Example of how the selector overflows the overall form row margin (RTL is irrelevant in this case I think)", 1701258137.0], ["Sorry I shouldn't have accepted my own ticket :-)", 1701353609.0], ["Replying to Natalia Bidart: Regression in d687febce5868545f99974d2499a91f81a32fef5 I don't think it's a proper commit. I can see \"+\" before and after this commit, it may be in different places but it's still visible. However 999ba9db6d6331eaa58af77debba42754bcc1a8e made it not visible in some screens when sidebar is open, so we need to treat this as a regression. Before 999ba9db6d6331eaa58af77debba42754bcc1a8e After 999ba9db6d6331eaa58af77debba42754bcc1a8e", 1701397493.0], ["Maybe we could add flex-wrap: wrap-reverse to make it always visible, it's not perfect, but ... django/contrib/admin/static/admin/css/widgets.css diff --git a/django/contrib/admin/static/admin/css/widgets.css b/django/contrib/admin/static/admin/css/widgets.css index f5b769333b..64628652ec 100644 a b ul.timelist, .timelist li { 582582 display: flex; 583583 gap: 10px; 584584 flex-grow: 1; 585 flex-wrap: wrap-reverse; 585586} 586587 587588.related-widget-wrapper-link {", 1701398180.0], ["\u200bPR", 1701403541.0], ["In dec8aa6: Fixed #35001 -- Fixed position of related widget action icons in admin for some screen sizes.", 1701414190.0], ["In 6c502734: [5.0.x] Fixed #35001 -- Fixed position of related widget action icons in admin for some screen sizes. Backport of dec8aa68f6a2729e57a58c36a21d36daa9a99fed from main", 1701414277.0]], "created_at": "2023-12-01T09:51:30Z"}
{"repo": "django/django", "pull_number": 17558, "instance_id": "django__django-17558", "issue_numbers": ["35003"], "base_commit": "57c1dd466ff0d41760049d6818e82be9d767c7da", "patch": "diff --git a/django/contrib/admin/static/admin/css/rtl.css b/django/contrib/admin/static/admin/css/rtl.css\nindex 307606f15675..48f08a3e736f 100644\n--- a/django/contrib/admin/static/admin/css/rtl.css\n+++ b/django/contrib/admin/static/admin/css/rtl.css\n@@ -151,6 +151,7 @@ form ul.inline li {\n \n form .aligned p.help,\n form .aligned div.help {\n+    margin-left: 0;\n     margin-right: 160px;\n     padding-right: 10px;\n }\n@@ -169,14 +170,6 @@ form .wide p.help, form .wide div.help {\n     padding-right: 50px;\n }\n \n-form .wide p,\n-form .wide ul.errorlist,\n-form .wide input + p.help,\n-form .wide input + div.help {\n-    margin-right: 200px;\n-    margin-left: 0px;\n-}\n-\n .submit-row {\n     text-align: right;\n }\n", "test_patch": "", "problem_statement": "Incorrect margin for RTL languages\nDescription\n\t \nWhile reviewing and debugging the PR for ticket #34995, I've noticed that some widgets and help text are not properly placed for RTL languages. See screenshots attached for more details.\n", "hints_text": [["Example in Django 4.2", 1701266796.0], ["Example in Django 5.0", 1701266812.0], ["Other example Django 5.0", 1701266828.0], ["\u200bPR", 1701312755.0], ["This is exactly what I was trying to report in #34982. Marking as duplicate and reopening #34982.", 1701316988.0], ["OK, it's about left, not right margin. Nevertheless we can treat this as a duplicate, IMO.", 1701317790.0], ["Reopening as it's related to #34982, but it's not a regression, left margins are there in Django 4.1 as well:", 1701318306.0], ["In b34a4771: Fixed #35003 -- Corrected margins in admin for RTL languages.", 1701318473.0]], "created_at": "2023-11-30T08:51:49Z"}
{"repo": "django/django", "pull_number": 17557, "instance_id": "django__django-17557", "issue_numbers": ["35006"], "base_commit": "06c5cb1284557edc05f963afb6f6bcdd55b00911", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex ef859907de8c..aeb3cde9a4df 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -670,13 +670,14 @@ def alter_db_table(self, model, old_db_table, new_db_table):\n                 sql.rename_table_references(old_db_table, new_db_table)\n \n     def alter_db_table_comment(self, model, old_db_table_comment, new_db_table_comment):\n-        self.execute(\n-            self.sql_alter_table_comment\n-            % {\n-                \"table\": self.quote_name(model._meta.db_table),\n-                \"comment\": self.quote_value(new_db_table_comment or \"\"),\n-            }\n-        )\n+        if self.sql_alter_table_comment and self.connection.features.supports_comments:\n+            self.execute(\n+                self.sql_alter_table_comment\n+                % {\n+                    \"table\": self.quote_name(model._meta.db_table),\n+                    \"comment\": self.quote_value(new_db_table_comment or \"\"),\n+                }\n+            )\n \n     def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):\n         \"\"\"Move a model's table between tablespaces.\"\"\"\ndiff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 64cf0188d2bc..d27a8bbd65d7 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -19,6 +19,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s\"\n     sql_create_unique = \"CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)\"\n     sql_delete_unique = \"DROP INDEX %(name)s\"\n+    sql_alter_table_comment = None\n+    sql_alter_column_comment = None\n \n     def __enter__(self):\n         # Some SQLite schema alterations need foreign key constraints to be\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex 0550e026bb64..1cce9030ec37 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -35,3 +35,6 @@ Bugfixes\n * Fixed a regression in Django 4.2 where the admin's read-only password widget\n   and some help texts were incorrectly aligned at tablet widths\n   (:ticket:`34982`).\n+\n+* Fixed a regression in Django 4.2 that caused a migration crash on SQLite when\n+  altering unsupported ``Meta.db_table_comment`` (:ticket:`35006`).\n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 46d16e9fdb6b..d1d18bab176d 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -4741,6 +4741,23 @@ class Meta:\n             [None, \"\"],\n         )\n \n+    @isolate_apps(\"schema\")\n+    @skipIfDBFeature(\"supports_comments\")\n+    def test_db_comment_table_unsupported(self):\n+        class ModelWithDbTableComment(Model):\n+            class Meta:\n+                app_label = \"schema\"\n+                db_table_comment = \"Custom table comment\"\n+\n+        # Table comments are ignored on databases that don't support them.\n+        with connection.schema_editor() as editor, self.assertNumQueries(1):\n+            editor.create_model(ModelWithDbTableComment)\n+        self.isolated_local_models = [ModelWithDbTableComment]\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_db_table_comment(\n+                ModelWithDbTableComment, \"Custom table comment\", \"New table comment\"\n+            )\n+\n     @isolate_apps(\"schema\")\n     @skipUnlessDBFeature(\"supports_comments\", \"supports_foreign_keys\")\n     def test_db_comments_from_abstract_model(self):\n", "problem_statement": "migrate crashes with db_table_comment added to existing model on SQLite\nDescription\n\t\t\n(last modified by \u042e\u0440\u0438\u0439)\t\t\nIt seems that I have found a bug in all 4.2+ versions of Django (including main branch and 5.0rc). I made a repo with steps to reproduce and full description of the bug \u2013 \u200bhttps://github.com/FeroxTL/django-sqlite-bug . Long story short: sqlite does not support comments, but when you change (not create) Meta.db_table_comment sqlite backend django.db.backends.sqlite3.schema.DatabaseSchemaEditor tries to generate COMMENT sql and it obviously falls.\n$./manage.py migrate\nSystem check identified some issues:\nWARNINGS:\nquestion.QuestionThree: (models.W046) SQLite does not support comments on tables (db_table_comment).\nOperations to perform:\n Apply all migrations: admin, auth, contenttypes, question, sessions\nRunning migrations:\n Applying question.0001_initial... OK\n Applying question.0002_alter_questionthree_table_comment...Traceback (most recent call last):\n File \"env/lib/python3.10/site-packages/django/db/backends/utils.py\", line 89, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"env/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py\", line 328, in execute\n\treturn super().execute(query, params)\nsqlite3.OperationalError: near \"COMMENT\": syntax error\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"proj/./manage.py\", line 22, in <module>\n\tmain()\n File \"proj/./manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"env/lib/python3.10/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"env/lib/python3.10/site-packages/django/core/management/__init__.py\", line 436, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"env/lib/python3.10/site-packages/django/core/management/base.py\", line 412, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"env/lib/python3.10/site-packages/django/core/management/base.py\", line 458, in execute\n\toutput = self.handle(*args, **options)\n File \"env/lib/python3.10/site-packages/django/core/management/base.py\", line 106, in wrapper\n\tres = handle_func(*args, **kwargs)\n File \"env/lib/python3.10/site-packages/django/core/management/commands/migrate.py\", line 356, in handle\n\tpost_migrate_state = executor.migrate(\n File \"env/lib/python3.10/site-packages/django/db/migrations/executor.py\", line 135, in migrate\n\tstate = self._migrate_all_forwards(\n File \"env/lib/python3.10/site-packages/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards\n\tstate = self.apply_migration(\n File \"env/lib/python3.10/site-packages/django/db/migrations/executor.py\", line 252, in apply_migration\n\tstate = migration.apply(state, schema_editor)\n File \"env/lib/python3.10/site-packages/django/db/migrations/migration.py\", line 132, in apply\n\toperation.database_forwards(\n File \"env/lib/python3.10/site-packages/django/db/migrations/operations/models.py\", line 610, in database_forwards\n\tschema_editor.alter_db_table_comment(\n File \"env/lib/python3.10/site-packages/django/db/backends/base/schema.py\", line 640, in alter_db_table_comment\n\tself.execute(\n File \"env/lib/python3.10/site-packages/django/db/backends/base/schema.py\", line 201, in execute\n\tcursor.execute(sql, params)\n File \"env/lib/python3.10/site-packages/django/db/backends/utils.py\", line 102, in execute\n\treturn super().execute(sql, params)\n File \"env/lib/python3.10/site-packages/django/db/backends/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(\n File \"env/lib/python3.10/site-packages/django/db/backends/utils.py\", line 80, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"env/lib/python3.10/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\twith self.db.wrap_database_errors:\n File \"env/lib/python3.10/site-packages/django/db/utils.py\", line 91, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"env/lib/python3.10/site-packages/django/db/backends/utils.py\", line 89, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"env/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py\", line 328, in execute\n\treturn super().execute(query, params)\ndjango.db.utils.OperationalError: near \"COMMENT\": syntax error\n", "hints_text": [["Thanks for the report \ud83c\udfc6", 1701309346.0], ["The simple fix is to add the supports_comments condition to AlterModelTableComment.database_forwards() [1] A better solution may be to use hooks like we've been doing recently so that the \"supports\" decision is centralised and won't be inadvertently left out anywhere. [1] \u200bhttps://github.com/django/django/blob/06c5cb1284557edc05f963afb6f6bcdd55b00911/django/db/migrations/operations/models.py#L581", 1701310649.0], ["Regression in 78f163a4fb3937aca2e71786fbdd51a0ef39629e.", 1701311131.0], ["\u200bPR", 1701311499.0], ["In 37fc832: Fixed #35006 -- Fixed migrations crash when altering Meta.db_table_comment on SQLite. Thanks \u042e\u0440\u0438\u0439 for the report. Regression in 78f163a4fb3937aca2e71786fbdd51a0ef39629e.", 1701313833.0]], "created_at": "2023-11-30T08:31:28Z"}
{"repo": "django/django", "pull_number": 17556, "instance_id": "django__django-17556", "issue_numbers": ["35004"], "base_commit": "06c5cb1284557edc05f963afb6f6bcdd55b00911", "patch": "diff --git a/django/contrib/admin/static/admin/css/responsive_rtl.css b/django/contrib/admin/static/admin/css/responsive_rtl.css\nindex 31dc8ff7db1c..08a6cd7038c3 100644\n--- a/django/contrib/admin/static/admin/css/responsive_rtl.css\n+++ b/django/contrib/admin/static/admin/css/responsive_rtl.css\n@@ -58,6 +58,22 @@\n         padding-left: 0;\n         padding-right: 16px;\n     }\n+\n+    [dir=\"rtl\"] .selector-add {\n+        background-position: 0 -80px;\n+    }\n+\n+    [dir=\"rtl\"] .selector-remove {\n+        background-position: 0 -120px;\n+    }\n+\n+    [dir=\"rtl\"] .active.selector-add:focus, .active.selector-add:hover {\n+        background-position: 0 -100px;\n+    }\n+\n+    [dir=\"rtl\"] .active.selector-remove:focus, .active.selector-remove:hover {\n+        background-position: 0 -140px;\n+    }\n }\n \n /* MOBILE */\n", "test_patch": "", "problem_statement": "Arrows between \"selector available\" and \"selector chosen\" are backwards for RTL languages\nDescription\n\t \nWhile reviewing and debugging the PR for ticket #34995, I've noticed that the arrows to move objects between \"selector available\" and \"selector chosen\" (in M2M relationships) point to the wrong side for RTL laguages in \"tablet size\" screens. See screenshots attached.\n", "hints_text": [["Example in Django 4.2", 1701267434.0], ["Example in Django 5.0", 1701267451.0], ["Removing status of Release Blocker since the issue is also present in 4.1.", 1701267533.0], ["\u200bPR", 1701299214.0], ["In 57c1dd4: Fixed #35004 -- Corrected the direction of arrows in admin selector boxes for RTL languages on small screens. Follow up to 12617fbd859b1244e91bcf182a2fdf356b388821.", 1701311952.0]], "created_at": "2023-11-30T05:06:35Z"}
{"repo": "django/django", "pull_number": 17539, "instance_id": "django__django-17539", "issue_numbers": ["35000"], "base_commit": "e72b2826ff1eaf2f48ee54a40d2f2988a1fdbb0a", "patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex 905a26bfbabf..8651348ee234 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -69,12 +69,22 @@ def _is_limited_data_type(self, field):\n             and db_type.lower() in self.connection._limited_data_types\n         )\n \n+    def _is_text_or_blob(self, field):\n+        db_type = field.db_type(self.connection)\n+        return db_type and db_type.lower().endswith((\"blob\", \"text\"))\n+\n     def skip_default(self, field):\n+        default_is_empty = self.effective_default(field) in (\"\", b\"\")\n+        if default_is_empty and self._is_text_or_blob(field):\n+            return True\n         if not self._supports_limited_data_type_defaults:\n             return self._is_limited_data_type(field)\n         return False\n \n     def skip_default_on_alter(self, field):\n+        default_is_empty = self.effective_default(field) in (\"\", b\"\")\n+        if default_is_empty and self._is_text_or_blob(field):\n+            return True\n         if self._is_limited_data_type(field) and not self.connection.mysql_is_mariadb:\n             # MySQL doesn't support defaults for BLOB and TEXT in the\n             # ALTER COLUMN statement.\n", "test_patch": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex c4e61976f16b..61244f75b4d3 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -1078,11 +1078,14 @@ def test_alter_text_field(self):\n     def test_alter_text_field_to_not_null_with_default_value(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Note)\n+        note = Note.objects.create(address=None)\n         old_field = Note._meta.get_field(\"address\")\n         new_field = TextField(blank=True, default=\"\", null=False)\n         new_field.set_attributes_from_name(\"address\")\n         with connection.schema_editor() as editor:\n             editor.alter_field(Note, old_field, new_field, strict=True)\n+        note.refresh_from_db()\n+        self.assertEqual(note.address, \"\")\n \n     @skipUnlessDBFeature(\"can_defer_constraint_checks\", \"can_rollback_ddl\")\n     def test_alter_fk_checks_deferred_constraints(self):\n", "problem_statement": "Skip redundant defaults to allow INSTANT longtext (among others) column addition in MySQL\nDescription\n\t \nMySQL 8+ is capable of adding new columns instantly just by editing the meta information. It automatically chooses the fasted algorithm for ALTER TABLE statements (\u200bhttps://dev.mysql.com/doc/refman/8.0/en/alter-table.html), so I was wondering if the migration SQL code generated by django actually makes use of this.\nPR is here: \u200bhttps://github.com/django/django/pull/17539\nOriginal comment with workaround: https://code.djangoproject.com/ticket/27676#comment:8\n", "hints_text": [["In d6c868a1: Fixed #35000 -- Skipped declaring empty string defaults on BLOB/TEXT field on MySQL. Empty string defaults are redundant on MySQL and prevent use of ALGORITHM=INSTANT.", 1702530472.0]], "created_at": "2023-11-28T14:10:56Z"}
{"repo": "django/django", "pull_number": 17533, "instance_id": "django__django-17533", "issue_numbers": ["34633"], "base_commit": "729266c6f29c7a0677b24926a86a767ef3078b26", "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 46a5823647da..f5a81ab49c0e 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -840,6 +840,7 @@ async def aadd(self, *objs, bulk=True):\n \n         def create(self, **kwargs):\n             self._check_fk_val()\n+            self._remove_prefetched_objects()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).create(**kwargs)\ndiff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt\nindex 9f2a41788100..b9f263f7090a 100644\n--- a/docs/ref/models/querysets.txt\n+++ b/docs/ref/models/querysets.txt\n@@ -1259,6 +1259,7 @@ database.\n \n     Also, if you call the database-altering methods\n     :meth:`~django.db.models.fields.related.RelatedManager.add`,\n+    :meth:`~django.db.models.fields.related.RelatedManager.create`,\n     :meth:`~django.db.models.fields.related.RelatedManager.remove`,\n     :meth:`~django.db.models.fields.related.RelatedManager.clear` or\n     :meth:`~django.db.models.fields.related.RelatedManager.set`, on\n", "test_patch": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex b07972ec3115..ac5b35e055b9 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -800,6 +800,14 @@ def test_hasattr_related_object(self):\n         # refs #21563\n         self.assertFalse(hasattr(Article(), \"reporter\"))\n \n+    def test_create_after_prefetch(self):\n+        c = City.objects.create(name=\"Musical City\")\n+        d1 = District.objects.create(name=\"Ladida\", city=c)\n+        city = City.objects.prefetch_related(\"districts\").get(id=c.id)\n+        self.assertSequenceEqual(city.districts.all(), [d1])\n+        d2 = city.districts.create(name=\"Goa\")\n+        self.assertSequenceEqual(city.districts.all(), [d1, d2])\n+\n     def test_clear_after_prefetch(self):\n         c = City.objects.create(name=\"Musical City\")\n         d = District.objects.create(name=\"Ladida\", city=c)\n", "problem_statement": "Add prefetch_related() cache invalidation for create() in reverse many-to-one managers.\nDescription\n\t \n\u200bThe documentation says:\nif you call the database-altering methods add(), remove(), clear() or set(), on related managers, any prefetched cache for the relation will be cleared.\nThis is accurate. However, there are other database-altering methods, such as create(), for which the cache ought to be cleared but isn't. This results in this confusing state of affairs:\nx = MyModel.objects.prefetch_related(\"related_objects\").get()\nassert len(x.related_objects.all()) == 0\nx.related_objects.create()\nassert len(x.related_objects.all()) == 1 # Assertion fails because the prefetch cache isn't cleared by create()\nUsing add() rather than create() would cause the above code to work as expected. If there's a good reason for create() not clearing the cache, could that be documented please? Otherwise, could it clear the cache? From a search of Stack Overflow, this is definitely a source of confusion for some.\n", "hints_text": [["The original ticket #26706, \u200bML thread & \u200bPR didn't seem to make any mention of create() I'd agree this seems inconsistent but keen to see what felix & charettes (charettes reviewed the PR) think \ud83e\udd14", 1685951285.0], ["Thanks for the report, it seems that it's only missing for create() in reverse many-to-one managers. It works for many-to-many managers (we could add an extra test method for this, see \u200bPR) and GenericRelation (see #29612). See a regression test: tests/many_to_one/tests.py diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py index 7a6d112a09..d360cd9164 100644 a b class ManyToOneTests(TestCase): 799799 # refs #21563 800800 self.assertFalse(hasattr(Article(), \"reporter\")) 801801 802 def test_create_after_prefetch(self): 803 c = City.objects.create(name=\"Musical City\") 804 d1 = District.objects.create(name=\"Ladida\", city=c) 805 city = City.objects.prefetch_related(\"districts\").get(id=c.id) 806 self.assertSequenceEqual(city.districts.all(), [d1]) 807 d2 = city.districts.create(name=\"Goa\") 808 self.assertSequenceEqual(city.districts.all(), [d1, d2]) 809 802810 def test_clear_after_prefetch(self): 803811 c = City.objects.create(name=\"Musical City\") 804812 d = District.objects.create(name=\"Ladida\", city=c) Rob, would you like to prepare a patch?", 1686005192.0], ["In 40a2c811: Refs #26706, Refs #34633 -- Added test for prefetch_related() cache invalidation in ManyRelatedManager.create().", 1686011690.0], ["Sure, I can look at creating a patch for this. Hey are you working on this patch bcz i am interested to work on it", 1686222015.0], ["Please do not close a ticket before a patch is merged into the main branch.", 1692196794.0], ["PR up \u200bhttps://github.com/django/django/pull/17533", 1701088469.0]], "created_at": "2023-11-27T17:55:29Z"}
{"repo": "django/django", "pull_number": 17532, "instance_id": "django__django-17532", "issue_numbers": ["34978"], "base_commit": "9baaf89eed42f9e747c774bc79543f47ea9697f8", "patch": "diff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt\nindex b23b4a4ff92b..37cf228dc7cd 100644\n--- a/docs/releases/4.2.txt\n+++ b/docs/releases/4.2.txt\n@@ -409,6 +409,16 @@ fields modified in the custom ``save()`` methods should be added to the\n ``update_fields`` keyword argument before calling ``super()``. See\n :ref:`overriding-model-methods` for more details.\n \n+Dropped support for raw aggregations on MySQL\n+---------------------------------------------\n+\n+MySQL 8+ allows functional dependencies on ``GROUP BY`` columns, so the\n+pre-Django 4.2 workaround of grouping by primary keys of the main table is\n+removed. As a consequence, using ``RawSQL()`` aggregations is no longer\n+supported on MySQL as there is no way to determine if such aggregations are\n+needed or valid in the ``GROUP BY`` clause. Use :ref:`aggregation-functions`\n+instead.\n+\n Miscellaneous\n -------------\n \n", "test_patch": "", "problem_statement": "Annotating through an aggregate with RawSQL() raises 1056 \"Can't group on\" on MySQL/MariaDB.\nDescription\n\t \nI have some code I am trying to update from Django 3.2 to 4.2, using MariaDB, that has worked in previous Django versions, and works fine in 4.1, but fails in 4.2. You can see an example GitHub Action output at \u200bhttps://github.com/dracos/Theatricalia/actions/runs/6922955832 showing 3 and 4.1 passing, but 4.2 failing.\nOne problem query is the following code:\n\tseen = user.visit_set.annotate(min_press_date=Min('production__place__press_date')).annotate(best_date=RawSQL('MIN(IFNULL(productions_place.press_date, IF(productions_place.end_date!=\"\", productions_place.end_date, productions_place.start_date)))', ())).order_by('-best_date')\nIn Django 4.1, this produces the following SQL, which works fine:\nSELECT `productions_visit`.`id`, `productions_visit`.`production_id`, `productions_visit`.`user_id`, `productions_visit`.`recommend`, `productions_visit`.`date`, MIN(`productions_place`.`press_date`) AS `min_press_date`, (MIN(IFNULL(productions_place.press_date, IF(productions_place.end_date!=\"\", productions_place.end_date, productions_place.start_date)))) AS `best_date` FROM `productions_visit` INNER JOIN `productions_production` ON (`productions_visit`.`production_id` = `productions_production`.`id`) LEFT OUTER JOIN `productions_place` ON (`productions_production`.`id` = `productions_place`.`production_id`) WHERE `productions_visit`.`user_id` = 1 GROUP BY `productions_visit`.`id` ORDER BY `best_date` DESC\nWhilst the SQL produced by Django 4.2 is:\nSELECT `productions_visit`.`id`, `productions_visit`.`production_id`, `productions_visit`.`user_id`, `productions_visit`.`recommend`, `productions_visit`.`date`, MIN(`productions_place`.`press_date`) AS `min_press_date`, (MIN(IFNULL(productions_place.press_date, IF(productions_place.end_date!=\"\", productions_place.end_date, productions_place.start_date)))) AS `best_date` FROM `productions_visit` INNER JOIN `productions_production` ON (`productions_visit`.`production_id` = `productions_production`.`id`) LEFT OUTER JOIN `productions_place` ON (`productions_production`.`id` = `productions_place`.`production_id`) WHERE `productions_visit`.`user_id` = 1 GROUP BY `productions_visit`.`id`, 7 ORDER BY 7 DESC LIMIT 21\nIt has added a group by on column 7 (which is best_date) and this then gives a \"1056 Can't group by best_date\" error from MySQL/MariaDB.\nI have bisected Django between 4.1 and 4.2, and the problem was introduced by the fix for #31331 in 041551d716b69ee7c81199eee86a2d10a72e15ab. Somehow that fix means my annotation is now being included in the group by when it shouldn't be, as it's an aggregate per visit ID, as far as I understand. Let me know if you need any other details.\n", "hints_text": [["Thanks for the report. Regression in 041551d716b69ee7c81199eee86a2d10a72e15ab.", 1700434067.0], ["Failing test in case that helps: --- a/tests/aggregation/tests.py +++ b/tests/aggregation/tests.py @@ -2135,6 +2135,39 @@ class AggregateTestCase(TestCase): ) self.assertEqual(list(author_qs), [337]) + def test_annotate_raw_expression(self): + qs = ( + Book.objects.values(\"publisher\") + .annotate(min_price=Min(\"price\")) + .annotate(max_price=RawSQL(\"MAX(price)\", params=[])) + .values(\"publisher__name\", \"min_price\", \"max_price\") + ) + self.assertEqual( + list(qs), + [ + { + \"max_price\": Decimal(\"30.00\"), + \"min_price\": Decimal(\"29.69\"), + \"publisher__name\": \"Apress\", + }, + { + \"max_price\": Decimal(\"23.09\"), + \"min_price\": Decimal(\"23.09\"), + \"publisher__name\": \"Sams\", + }, + { + \"max_price\": Decimal(\"82.80\"), + \"min_price\": Decimal(\"29.69\"), + \"publisher__name\": \"Prentice Hall\", + }, + { + \"max_price\": Decimal(\"75.00\"), + \"min_price\": Decimal(\"75.00\"), + \"publisher__name\": \"Morgan Kaufmann\", + }, + ], + ) + class AggregateAnnotationPruningTests(TestCase): @classmethod This one's interesting because we can't dig into RawSQL to determine whether it's valid in a GROUP BY or not. EDIT: Actually this test fails before 041551d716b69ee7c81199eee86a2d10a72e15ab. The difference is the values('publisher') vs the OP's example of sorting by the raw expression. The latter includes the pk so it can be reduced, the former cannot.", 1700449537.0], ["See #26602 Provide a way to manage grouping with RawSQL which was closed because due to a lack of justified use case. I would say that the same can be said about this ticket as the reported problem can be fixed in multiple ways with the provided ORM interfaces. The most obvious and non-invasive one is to use Min(RawSQL(...)) instead annotate( best_date=Min( RawSQL( 'IFNULL(productions_place.press_date, IF(productions_place.end_date!=\"\", productions_place.end_date, productions_place.start_date))', (), ), ) ) a second one is to use expressions entirely annotate(best_date=Min(Coalesce(\"press_date\", Case(When(end_date=\"\", then=F(\"start_date\")), default=F(\"end_date\")))) a third one, assuming the user wants to stick to IF and IFNULL from django.db.models import Func class If(Func): function = \"IF\" class IfNull(Func): function = \"IFNULL\" annotate(best_date=Min( IfNull(\"press_date\", If(end_date=\"\", \"start_date\", \"end_date\")) )) This one's interesting because we can't dig into RawSQL to determine whether it's valid in a GROUP BY or not. That's right David, it's the crux of the issue. The ORM must choose between grouping or not by the expression and since most RawSQL usage are assumed to not be aggregation it determines that it must do so as it's a blackbox from an introspection perspective. The reason why 041551d716b69ee7c81199eee86a2d10a72e15ab broke the reported use that is that prior to this change the ORM supported a non-standard feature of MySQL \u200bdisabled in recent versions that allowed grouping solely by the primary key of the first entry in FROM. It's important to note that using RawSQL to aggregate was only working on MySQL due to this feature and never worked on any of the other backends that follow the functional dependency detection in GROUP BY clauses as specified by the SQL:1999 standard. The nail in the coffin of this feature was went it was discovered that it had a peculiarity when dealing with subqueries #31331 that would have required a significant amount of work to get working. I could see us go three ways about dealing with this issue Revert the changes made in 041551d716b69ee7c81199eee86a2d10a72e15ab while making allows_group_by_pk based on the absence of ONLY_FULL_GROUP_BY. Note that this won't resolve the aggregation over the annotation of a dependant subquery but will restore the usage of RawSQL for aggregation on MySQL only when ONLY_FULL_GROUP_BY is disabled. 1 + adjustments to the allows_group_by_pk to special case dependant subquery annotations Adjust the 4.2 existing release notes about this change to better communicate that this version of Django removed support for doing RawSQL aggregations on MySQL and that they should use proper expressions instead going forward. Due to lack of demonstration that some aggregates or window function cannot be expressed using the documented primitives offered by the ORM, that non-ONLY_FULL_GROUP_BY model is a non standard MySQL feature that is not enabled by default since 8.0, and that this change happens to standardize the usage of RawSQL for aggregations on all backends I'd be inclined to go with 3.", 1700472177.0], ["Replying to Simon Charette: I could see us go three ways about dealing with this issue Revert the changes made in 041551d716b69ee7c81199eee86a2d10a72e15ab while making allows_group_by_pk based on the absence of ONLY_FULL_GROUP_BY. Note that this won't resolve the aggregation over the annotation of a dependant subquery but will restore the usage of RawSQL for aggregation on MySQL only when ONLY_FULL_GROUP_BY is disabled. 1 + adjustments to the allows_group_by_pk to special case dependant subquery annotations Adjust the 4.2 existing release notes about this change to better communicate that this version of Django removed support for doing RawSQL aggregations on MySQL and that they should use proper expressions instead going forward. Given your rationale and considering that there are multiple workarounds as you proposed, I'm also in favor of option 3.", 1700480374.0], ["Given the same query does already use Min(), as quoted, I am at a loss as to why I wasn't using it in the other part! Thanks for the investigation; an addition to the 4.2 release notes explaining the change further (I did read those, but only saw the reference to changes in \"third-party database backends\") would be welcome, thank you. With the change to your first option\u00b9, my code passes on Django 4.2 fine with ONLY_FULL_GROUP_BY turned off, thank you; turning that option on I get a lot of 1055 errors, even with a query that's only e.g. Play.objects.annotate(Count('authors')), without any RawSQL, I get (1055, \"'theatricalia.plays_play.title' isn't in GROUP BY\"), but assume that's my issue somehow. \u00b9 If you're interested, regarding your second/third code change options, press_date is a DateField but start_date/end_date are ApproximateDateFields from my \u200bhttps://pypi.org/project/django-date-extensions/ so that becomes a bit more complex.", 1700482712.0], ["I get a lot of 1055 errors, even with a query that's only e.g. Play.objects.annotate(Count('authors')), without any RawSQL, I get (1055, \"'theatricalia.plays_play.title' isn't in GROUP BY\"), but assume that's my issue somehow. That's interesting. If it's happening for models of the form class Author(models.Model): pass class Play(models.Model): title = models.CharField() authors = models.ManyToManyField(Author) I would expect Play.objects.annotate(Count('authors')) to generate SELECT play.id, play.name, COUNT(author.id) FROM play LEFT JOIN play_authors ON (play_authors.play_id = play.id) LEFT JOIN author ON (play_authors.author_id = author.id) GROUP BY play.id And by \u200bMySQL docs MySQL implements detection of functional dependence. If the ONLY_FULL_GROUP_BY SQL mode is enabled (which it is by default), MySQL rejects queries for which the select list, HAVING condition, or ORDER BY list refer to nonaggregated columns that are neither named in the GROUP BY clause nor are functionally dependent on them. So in this case play.name is functionally dependant on play.id (as it's the primary key of play) so if you're using a version of MySQL supported on Django 4.2 we'd definitely like to learn more about it as it's unexpected.", 1700490800.0], ["Replying to Simon Charette: Revert the changes made in 041551d716b69ee7c81199eee86a2d10a72e15ab while making allows_group_by_pk based on the absence of ONLY_FULL_GROUP_BY. Note that this won't resolve the aggregation over the annotation of a dependant subquery but will restore the usage of RawSQL for aggregation on MySQL only when ONLY_FULL_GROUP_BY is disabled. 1 + adjustments to the allows_group_by_pk to special case dependant subquery annotations Adjust the 4.2 existing release notes about this change to better communicate that this version of Django removed support for doing RawSQL aggregations on MySQL and that they should use proper expressions instead going forward. We could also have a user-definable attribute RawSQL.contains_aggregates though I think that's making things too complex. Option 3 sounds good \ud83d\udc4d", 1700503971.0], ["Agreed, let's document it.", 1700528730.0], ["So in this case play.name is functionally dependant on play.id (as it's the primary key of play) so if you're using a version of MySQL supported on Django 4.2 we'd definitely like to learn more about it as it's unexpected. So it turns out the database is MariaDB (11.1.2), not MySQL, and MariaDB does not appear to include/have the functional dependency requirement that this is based on. I don't know if you'd like me to raise that as a separate ticket, if Django is supposed to support both entirely equally, but yes, it looks like the code will not work at all with MariaDB with ONLY_FULL_GROUP_BY turned on.", 1700655238.0], ["it looks like the code will not work at all with MariaDB with ONLY_FULL_GROUP_BY turned on. That's good to know thanks for investigating further that's appreciated! I think it's worth having a separate ticket for it yes. The solution will likely be to turn off the allows_group_by_selected_pks feature on MariaDB when ONLY_FULL_GROUP_BY mode is turned on. Note that the allows_group_by_selected_pks feature is different from the allows_group_by_pk feature removed in 041551d716b69ee7c81199eee86a2d10a72e15ab.", 1700662684.0], ["Have opened #34992. Thanks :)", 1700711858.0], ["\u200bPR", 1701060761.0], ["In a652f07: Fixed #34978, Refs #31331 -- Added backward incompatibility note about raw aggregations on MySQL. Thanks Matthew Somerville for the report.", 1701078221.0], ["In cdb14cc1: [4.2.x] Fixed #34978, Refs #31331 -- Added backward incompatibility note about raw aggregations on MySQL. Thanks Matthew Somerville for the report. Backport of a652f0759651dd7103ed04336ef85dc410f680c1 from main", 1701078308.0], ["In cbd1e91: [5.0.x] Fixed #34978, Refs #31331 -- Added backward incompatibility note about raw aggregations on MySQL. Thanks Matthew Somerville for the report. Backport of a652f0759651dd7103ed04336ef85dc410f680c1 from main", 1701078346.0]], "created_at": "2023-11-27T10:52:23Z"}
{"repo": "django/django", "pull_number": 17529, "instance_id": "django__django-17529", "issue_numbers": ["34992"], "base_commit": "0203771b626c27c1af24cdeb0e425ccca3d19ad5", "patch": "diff --git a/django/db/backends/mysql/features.py b/django/db/backends/mysql/features.py\nindex 637bcbd17c29..cafc6702ebba 100644\n--- a/django/db/backends/mysql/features.py\n+++ b/django/db/backends/mysql/features.py\n@@ -6,7 +6,6 @@\n \n class DatabaseFeatures(BaseDatabaseFeatures):\n     empty_fetchmany_value = ()\n-    allows_group_by_selected_pks = True\n     related_fields_match_type = True\n     # MySQL doesn't support sliced subqueries with IN/ALL/ANY/SOME.\n     allow_sliced_subqueries_with_in = False\n@@ -319,3 +318,9 @@ def supports_expression_defaults(self):\n     def has_native_uuid_field(self):\n         is_mariadb = self.connection.mysql_is_mariadb\n         return is_mariadb and self.connection.mysql_version >= (10, 7)\n+\n+    @cached_property\n+    def allows_group_by_selected_pks(self):\n+        if self.connection.mysql_is_mariadb:\n+            return \"ONLY_FULL_GROUP_BY\" not in self.connection.sql_mode\n+        return True\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex 5b0b558c358a..44d80060b5ac 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -27,3 +27,7 @@ Bugfixes\n \n * Fixed a regression in Django 4.2 where checkboxes in the admin would be\n   centered on narrower screen widths (:ticket:`34994`).\n+\n+* Fixed a regression in Django 4.2 that caused a crash of querysets with\n+  aggregations on MariaDB when the ``ONLY_FULL_GROUP_BY`` SQL mode was enabled\n+  (:ticket:`34992`).\n", "test_patch": "diff --git a/tests/backends/mysql/test_features.py b/tests/backends/mysql/test_features.py\nindex 96e1ed3b497d..4e5c7c294fbd 100644\n--- a/tests/backends/mysql/test_features.py\n+++ b/tests/backends/mysql/test_features.py\n@@ -28,3 +28,21 @@ def test_allows_auto_pk_0(self):\n             _connection.sql_mode = {\"NO_AUTO_VALUE_ON_ZERO\"}\n             database_features = DatabaseFeatures(_connection)\n             self.assertIs(database_features.allows_auto_pk_0, True)\n+\n+    def test_allows_group_by_selected_pks(self):\n+        with mock.MagicMock() as _connection:\n+            _connection.mysql_is_mariadb = False\n+            database_features = DatabaseFeatures(_connection)\n+            self.assertIs(database_features.allows_group_by_selected_pks, True)\n+\n+        with mock.MagicMock() as _connection:\n+            _connection.mysql_is_mariadb = False\n+            _connection.sql_mode = {}\n+            database_features = DatabaseFeatures(_connection)\n+            self.assertIs(database_features.allows_group_by_selected_pks, True)\n+\n+        with mock.MagicMock() as _connection:\n+            _connection.mysql_is_mariadb = True\n+            _connection.sql_mode = {\"ONLY_FULL_GROUP_BY\"}\n+            database_features = DatabaseFeatures(_connection)\n+            self.assertIs(database_features.allows_group_by_selected_pks, False)\n", "problem_statement": "MariaDB does not support functional group by dependencies\nDescription\n\t \nRequested to be opened from comment 11 on #34978. If you're using MariaDB with ONLY_FULL_GROUP_BY turned on, all queries that end up using a GROUP BY fail. Given a model such as:\nclass Author(models.Model):\n\tpass\nclass Play(models.Model):\n\ttitle = models.CharField(max_length=100)\n\tauthors = models.ManyToManyField(Author)\nThen list(Play.objects.annotate(Count('authors'))) generates the SQL:\nSELECT app_play.id, app_play.title, COUNT(app_play_authors.author_id) AS authors__count\nFROM app_play\nLEFT OUTER JOIN app_play_authors ON (app_play.id = app_play_authors.play_id)\nGROUP BY app_play.id\nORDER BY NULL\nWhich errors with django.db.utils.OperationalError: (1055, \"'mariadbtest.app_play.title' isn't in GROUP BY\")\nUnlike MySQL since 5.7.5 (release notes: \"MySQL now recognizes when a nonaggregated selected column is functionally dependent on (uniquely determined by) GROUP BY columns.\"), MariaDB does not support this feature. But Django 4.2 assumes both MySQL and MariaDB support it.\nSimon's comment on #34978 said: \"The solution will likely be to turn off the allows_group_by_selected_pks feature on MariaDB when ONLY_FULL_GROUP_BY mode is turned on. Note that the allows_group_by_selected_pks feature is different from the allows_group_by_pk feature removed in 041551d716b69ee7c81199eee86a2d10a72e15ab.\"\n", "hints_text": [["Thanks for creating this Matthew \ud83c\udfc6", 1700716238.0], ["I think I understand the problem here, and I was able to test a simple solution locally. However, this is my first ticket, so it may be a few days before I have a patch ready. I need to get more acquainted with the tests and the general workflow.", 1701010129.0]], "created_at": "2023-11-26T23:56:56Z"}
{"repo": "django/django", "pull_number": 17518, "instance_id": "django__django-17518", "issue_numbers": ["34982"], "base_commit": "a652f0759651dd7103ed04336ef85dc410f680c1", "patch": "diff --git a/django/contrib/admin/static/admin/css/forms.css b/django/contrib/admin/static/admin/css/forms.css\nindex e45abe1c07e9..6cfe9da11949 100644\n--- a/django/contrib/admin/static/admin/css/forms.css\n+++ b/django/contrib/admin/static/admin/css/forms.css\n@@ -24,7 +24,6 @@ form .form-row p {\n \n .flex-container {\n     display: flex;\n-    flex-wrap: wrap;\n }\n \n .form-multiline > div {\n@@ -78,6 +77,7 @@ form ul.inline li {\n .aligned label {\n     display: block;\n     padding: 4px 10px 0 0;\n+    min-width: 160px;\n     width: 160px;\n     word-wrap: break-word;\n     line-height: 1;\ndiff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex f58f1e552d2a..bbcfd3929ecb 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -588,6 +588,7 @@ input[type=\"submit\"], button {\n \n     .aligned label {\n         width: 100%;\n+        min-width: auto;\n         padding: 0 0 10px;\n     }\n \ndiff --git a/django/contrib/admin/static/admin/css/widgets.css b/django/contrib/admin/static/admin/css/widgets.css\nindex f8d888ed5146..3ab5fb1eb296 100644\n--- a/django/contrib/admin/static/admin/css/widgets.css\n+++ b/django/contrib/admin/static/admin/css/widgets.css\n@@ -69,6 +69,7 @@\n     padding: 0;\n     overflow: hidden;\n     line-height: 1;\n+    min-width: auto;\n }\n \n .selector .selector-available input,\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex 44d80060b5ac..0550e026bb64 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -31,3 +31,7 @@ Bugfixes\n * Fixed a regression in Django 4.2 that caused a crash of querysets with\n   aggregations on MariaDB when the ``ONLY_FULL_GROUP_BY`` SQL mode was enabled\n   (:ticket:`34992`).\n+\n+* Fixed a regression in Django 4.2 where the admin's read-only password widget\n+  and some help texts were incorrectly aligned at tablet widths\n+  (:ticket:`34982`).\n", "test_patch": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex ecb177e47f4d..c87779766732 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5754,6 +5754,7 @@ def test_prepopulated_fields(self):\n         and with stacked and tabular inlines.\n         Refs #13068, #9264, #9983, #9784.\n         \"\"\"\n+        from selenium.webdriver import ActionChains\n         from selenium.webdriver.common.by import By\n \n         self.admin_login(\n@@ -5766,6 +5767,8 @@ def test_prepopulated_fields(self):\n \n         # Main form ----------------------------------------------------------\n         self.selenium.find_element(By.ID, \"id_pubdate\").send_keys(\"2012-02-18\")\n+        status = self.selenium.find_element(By.ID, \"id_status\")\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.select_option(\"#id_status\", \"option two\")\n         self.selenium.find_element(By.ID, \"id_name\").send_keys(\n             \" the mAin n\u00c0M\u00eb and it's aw\u03b5\u0161ome\u0131\u0131\u0131\u0130\"\n@@ -5784,6 +5787,10 @@ def test_prepopulated_fields(self):\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-0-pubdate\"\n         ).send_keys(\"2011-12-17\")\n+        status = self.selenium.find_element(\n+            By.ID, \"id_relatedprepopulated_set-0-status\"\n+        )\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.select_option(\"#id_relatedprepopulated_set-0-status\", \"option one\")\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-0-name\"\n@@ -5815,6 +5822,10 @@ def test_prepopulated_fields(self):\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-1-pubdate\"\n         ).send_keys(\"1999-01-25\")\n+        status = self.selenium.find_element(\n+            By.ID, \"id_relatedprepopulated_set-1-status\"\n+        )\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.select_option(\"#id_relatedprepopulated_set-1-status\", \"option two\")\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-1-name\"\n@@ -5838,10 +5849,10 @@ def test_prepopulated_fields(self):\n \n         # Tabular inlines ----------------------------------------------------\n         # Initial inline\n-        element = self.selenium.find_element(\n+        status = self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-2-0-status\"\n         )\n-        self.selenium.execute_script(\"window.scrollTo(0, %s);\" % element.location[\"y\"])\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-2-0-pubdate\"\n         ).send_keys(\"1234-12-07\")\n@@ -5872,6 +5883,10 @@ def test_prepopulated_fields(self):\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-2-1-pubdate\"\n         ).send_keys(\"1981-08-22\")\n+        status = self.selenium.find_element(\n+            By.ID, \"id_relatedprepopulated_set-2-1-status\"\n+        )\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.select_option(\"#id_relatedprepopulated_set-2-1-status\", \"option one\")\n         self.selenium.find_element(\n             By.ID, \"id_relatedprepopulated_set-2-1-name\"\n@@ -5898,6 +5913,8 @@ def test_prepopulated_fields(self):\n         # Initial inline.\n         row_id = \"id_relatedprepopulated_set-4-0-\"\n         self.selenium.find_element(By.ID, f\"{row_id}pubdate\").send_keys(\"2011-12-12\")\n+        status = self.selenium.find_element(By.ID, f\"{row_id}status\")\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.select_option(f\"#{row_id}status\", \"option one\")\n         self.selenium.find_element(By.ID, f\"{row_id}name\").send_keys(\n             \" s\u0164\u0101\u00c7ke\u00f0  inline !  \"\n@@ -5917,6 +5934,8 @@ def test_prepopulated_fields(self):\n         )[3].click()\n         row_id = \"id_relatedprepopulated_set-4-1-\"\n         self.selenium.find_element(By.ID, f\"{row_id}pubdate\").send_keys(\"1999-01-20\")\n+        status = self.selenium.find_element(By.ID, f\"{row_id}status\")\n+        ActionChains(self.selenium).move_to_element(status).click(status).perform()\n         self.select_option(f\"#{row_id}status\", \"option two\")\n         self.selenium.find_element(By.ID, f\"{row_id}name\").send_keys(\n             \" now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very loooong \"\n", "problem_statement": "Visual regression for helptext at certain screen sizes\nDescription\n\t\t\n(last modified by Mariusz Felisiak)\t\t\nDjango 4.1 on small screens (< 1024 px)\nDjango 4.2 on small screens (< 1024 px)\nLANGUAGE_CODE = \"ar-DZ\"\nRegression in 96a598356a9ea8c2c05b22cadc12e256a3b295fd.\n", "hints_text": [["I reworded the summary as it doesn't only affect RTL. I still don't see a reasonable way to fix it, and since we're making some effort to have admin fields be stacked rather than inline it might not be worth going to a lot of effort to fix if it's not simple.", 1700723198.0], ["\u200bPR", 1700739145.0]], "created_at": "2023-11-23T17:31:53Z"}
{"repo": "django/django", "pull_number": 17517, "instance_id": "django__django-17517", "issue_numbers": ["34995"], "base_commit": "af2fd368156439b79e4c1eb2278c433246771e44", "patch": "diff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex bbcfd3929ecb..7a41223ba505 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -237,22 +237,6 @@ input[type=\"submit\"], button {\n         padding: 7px;\n     }\n \n-    /* Related widget */\n-\n-    .related-widget-wrapper {\n-        float: none;\n-    }\n-\n-    .related-widget-wrapper-link + .selector {\n-        max-width: calc(100% - 30px);\n-        margin-right: 15px;\n-    }\n-\n-    select + .related-widget-wrapper-link,\n-    .related-widget-wrapper-link + .related-widget-wrapper-link {\n-        margin-left: 10px;\n-    }\n-\n     /* Selector */\n \n     .selector {\n@@ -270,7 +254,7 @@ input[type=\"submit\"], button {\n     }\n \n     .selector .selector-filter input {\n-        width: auto;\n+        width: 100%;\n         min-height: 0;\n         flex: 1 1;\n     }\n@@ -292,7 +276,6 @@ input[type=\"submit\"], button {\n         width: 26px;\n         height: 52px;\n         padding: 2px 0;\n-        margin: auto 15px;\n         border-radius: 20px;\n         transform: translateY(-10px);\n     }\n@@ -336,7 +319,6 @@ input[type=\"submit\"], button {\n         width: 52px;\n         height: 26px;\n         padding: 0 2px;\n-        margin: 15px auto;\n         transform: none;\n     }\n \n@@ -684,21 +666,12 @@ input[type=\"submit\"], button {\n         align-self: center;\n     }\n \n-    select + .related-widget-wrapper-link,\n-    .related-widget-wrapper-link + .related-widget-wrapper-link {\n-        margin-left: 15px;\n-    }\n-\n     /* Selector */\n \n     .selector {\n         flex-direction: column;\n     }\n \n-    .selector > * {\n-        float: none;\n-    }\n-\n     .selector-available, .selector-chosen {\n         margin-bottom: 0;\n         flex: 1 1 auto;\n@@ -710,11 +683,9 @@ input[type=\"submit\"], button {\n \n     .selector ul.selector-chooser {\n         display: block;\n-        float: none;\n         width: 52px;\n         height: 26px;\n         padding: 0 2px;\n-        margin: 15px auto 20px;\n         transform: none;\n     }\n \ndiff --git a/django/contrib/admin/static/admin/css/rtl.css b/django/contrib/admin/static/admin/css/rtl.css\nindex 48f08a3e736f..58ba97710b27 100644\n--- a/django/contrib/admin/static/admin/css/rtl.css\n+++ b/django/contrib/admin/static/admin/css/rtl.css\n@@ -289,3 +289,7 @@ form .form-row p.datetime {\n     margin-left: inherit;\n     margin-right: 2px;\n }\n+\n+.selector .selector-chooser {\n+    margin: 0;\n+}\ndiff --git a/django/contrib/admin/static/admin/css/widgets.css b/django/contrib/admin/static/admin/css/widgets.css\nindex 3ab5fb1eb296..f5b769333bad 100644\n--- a/django/contrib/admin/static/admin/css/widgets.css\n+++ b/django/contrib/admin/static/admin/css/widgets.css\n@@ -1,23 +1,24 @@\n /* SELECTOR (FILTER INTERFACE) */\n \n .selector {\n-    width: 800px;\n-    float: left;\n     display: flex;\n+    flex-grow: 1;\n+    gap: 10px;\n }\n \n .selector select {\n-    width: 380px;\n     height: 17.2em;\n     flex: 1 0 auto;\n+    overflow: scroll;\n+    width: 100%;\n }\n \n .selector-available, .selector-chosen {\n-    width: 380px;\n     text-align: center;\n     margin-bottom: 5px;\n     display: flex;\n     flex-direction: column;\n+    flex: 1 1;\n }\n \n .selector-available h2, .selector-chosen h2 {\n@@ -58,6 +59,7 @@\n     font-size: 0.625rem;\n     margin: 0;\n     text-align: left;\n+    display: flex;\n }\n \n .selector .selector-filter label,\n@@ -72,9 +74,12 @@\n     min-width: auto;\n }\n \n+.selector-filter input {\n+    flex-grow: 1;\n+}\n+\n .selector .selector-available input,\n .selector .selector-chosen input {\n-    width: 320px;\n     margin-left: 8px;\n }\n \n@@ -83,7 +88,6 @@\n     width: 22px;\n     background-color: var(--selected-bg);\n     border-radius: 10px;\n-    margin: 0 5px;\n     padding: 0;\n     transform: translateY(-17px);\n }\n@@ -575,8 +579,9 @@ ul.timelist, .timelist li {\n \n /* RELATED WIDGET WRAPPER */\n .related-widget-wrapper {\n-    float: left;       /* display properly in form rows with multiple fields */\n-    overflow: hidden;  /* clear floated contents */\n+    display: flex;\n+    gap: 10px;\n+    flex-grow: 1;\n }\n \n .related-widget-wrapper-link {\n@@ -589,11 +594,6 @@ ul.timelist, .timelist li {\n     filter: grayscale(0);\n }\n \n-select + .related-widget-wrapper-link,\n-.related-widget-wrapper-link + .related-widget-wrapper-link {\n-    margin-left: 7px;\n-}\n-\n /* GIS MAPS */\n .dj_map {\n     width: 600px;\ndiff --git a/django/contrib/admin/static/admin/js/SelectFilter2.js b/django/contrib/admin/static/admin/js/SelectFilter2.js\nindex 9a4e0a3a91bb..fc59eba7c44f 100644\n--- a/django/contrib/admin/static/admin/js/SelectFilter2.js\n+++ b/django/contrib/admin/static/admin/js/SelectFilter2.js\n@@ -30,6 +30,9 @@ Requires core.js and SelectBox.js.\n \n             // <div class=\"selector\"> or <div class=\"selector stacked\">\n             const selector_div = quickElement('div', from_box.parentNode);\n+            // Make sure the selector div is at the beginning so that the\n+            // add link would be displayed to the right of the widget.\n+            from_box.parentNode.prepend(selector_div);\n             selector_div.className = is_stacked ? 'selector stacked' : 'selector';\n \n             // <div class=\"selector-available\">\n", "test_patch": "diff --git a/js_tests/admin/SelectFilter2.test.js b/js_tests/admin/SelectFilter2.test.js\nindex 387bfd669c5c..0b1317cff567 100644\n--- a/js_tests/admin/SelectFilter2.test.js\n+++ b/js_tests/admin/SelectFilter2.test.js\n@@ -5,9 +5,13 @@ QUnit.module('admin.SelectFilter2');\n \n QUnit.test('init', function(assert) {\n     const $ = django.jQuery;\n-    $('<form><select id=\"id\"></select></form>').appendTo('#qunit-fixture');\n-    $('<option value=\"0\">A</option>').appendTo('#id');\n+    $('<form id=\"test\"></form>').appendTo('#qunit-fixture');\n+    $('<label for=\"id_id\">Test</label>').appendTo('#test');\n+    $('<div class=\"helptext\">This is helpful.</div>').appendTo('#test');\n+    $('<select id=\"id\"><option value=\"0\">A</option></select>').appendTo('#test');\n     SelectFilter.init('id', 'things', 0);\n+    assert.equal($('#test').children().first().prop(\"tagName\"), \"DIV\");\n+    assert.equal($('#test').children().first().attr(\"class\"), \"selector\");\n     assert.equal($('.selector-available h2').text().trim(), \"Available things\");\n     assert.equal($('.selector-chosen h2').text().trim(), \"Chosen things\");\n     assert.equal($('.selector-chosen select')[0].getAttribute('multiple'), '');\n", "problem_statement": "Add link for admin's related widget is in the wrong place\nDescription\n\t\t\n(last modified by Tom Carrick)\n", "hints_text": [["\u200bPR", 1700739720.0], ["Regression in \u200b1699f8b52ac15f687cc39088401c2641022c71cd. So I think this is a release blocker for 5.0, not 4.2?", 1700749745.0], ["Agreed, this is a 5.0 release blocker.", 1700750165.0]], "created_at": "2023-11-23T16:43:30Z"}
{"repo": "django/django", "pull_number": 17516, "instance_id": "django__django-17516", "issue_numbers": ["34994"], "base_commit": "4eb9c3d90aff55182151b6be0122f7d0b28832fd", "patch": "diff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css\nindex e3923448ac76..f58f1e552d2a 100644\n--- a/django/contrib/admin/static/admin/css/responsive.css\n+++ b/django/contrib/admin/static/admin/css/responsive.css\n@@ -565,6 +565,10 @@ input[type=\"submit\"], button {\n         flex-flow: column;\n     }\n \n+    .flex-container.checkbox-row {\n+        flex-flow: row;\n+    }\n+\n     textarea {\n         max-width: none;\n     }\n@@ -598,10 +602,6 @@ input[type=\"submit\"], button {\n         max-width: 100%;\n     }\n \n-    .aligned .checkbox-row {\n-        align-items: center;\n-    }\n-\n     .aligned .checkbox-row input {\n         flex: 0 1 auto;\n         margin: 0;\ndiff --git a/django/contrib/admin/static/admin/css/responsive_rtl.css b/django/contrib/admin/static/admin/css/responsive_rtl.css\nindex 639e20b2d18e..31dc8ff7db1c 100644\n--- a/django/contrib/admin/static/admin/css/responsive_rtl.css\n+++ b/django/contrib/admin/static/admin/css/responsive_rtl.css\n@@ -78,4 +78,7 @@\n         margin-left: 0;\n         margin-right: 0;\n     }\n+    [dir=\"rtl\"] .aligned .vCheckboxLabel {\n+        padding: 1px 5px 0 0;\n+    }\n }\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex be87f010547b..5b0b558c358a 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -24,3 +24,6 @@ Bugfixes\n * Fixed a regression in Django 4.2 where the admin's change list page had\n   misaligned pagination links and inputs when using ``list_editable``\n   (:ticket:`34991`).\n+\n+* Fixed a regression in Django 4.2 where checkboxes in the admin would be\n+  centered on narrower screen widths (:ticket:`34994`).\n", "test_patch": "", "problem_statement": "Visual regression in admin checkboxes on mobile\nDescription\n\t\t\n(last modified by Tom Carrick)\t\t\nI think it may have been intentional, but it looks pretty wrong.\n", "hints_text": [["oops, sorry", 1700728092.0], ["\u200bPR", 1700728138.0], ["As per my testing, this is a regression in d687febce5868545f99974d2499a91f81a32fef5 not in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07.", 1700739518.0], ["Replying to Natalia Bidart: As per my testing, this is a regression in d687febce5868545f99974d2499a91f81a32fef5 not in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Are you sure? I checked with Django 4.2.7 and it's centered, it looks fine in Django 4.1.13.", 1700746383.0], ["Replying to Mariusz Felisiak: Replying to Natalia Bidart: As per my testing, this is a regression in d687febce5868545f99974d2499a91f81a32fef5 not in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Are you sure? I checked with Django 4.2.7 and it's centered, it looks fine in Django 4.1.13. Yes, I'm sure. I checked out revno d687febce5868545f99974d2499a91f81a32fef5 and the problem is clearly there, and then I checked out the revno right before it (21757bbdcd6ef31f2a4092fa1bd55dff29214c7a) and the check boxes are OK. d687febce5868545f99974d2499a91f81a32fef5 was backported to 4.2 in revno 788f7b8100dbef050129bf5c1e0af47e7bc89b28", 1700746632.0], ["d687febce5868545f99974d2499a91f81a32fef5 was backported to 4.2 in revno 788f7b8100dbef050129bf5c1e0af47e7bc89b28 So it's still a release blocker for Django 4.2.", 1700747232.0], ["In a89c715c: Fixed #34994 -- Fixed checkbox layout in admin's change page for narrow screen widths. Regression in d687febce5868545f99974d2499a91f81a32fef5.", 1700747691.0], ["In 4d33816c: [5.0.x] Fixed #34994 -- Fixed checkbox layout in admin's change page for narrow screen widths. Regression in d687febce5868545f99974d2499a91f81a32fef5. Backport of a89c715c3bcf7ab1a90747cf8658ebce6304b6e4 from main", 1700747833.0], ["In bac9e94: [4.2.x] Fixed #34994 -- Fixed checkbox layout in admin's change page for narrow screen widths. Regression in d687febce5868545f99974d2499a91f81a32fef5. Backport of a89c715c3bcf7ab1a90747cf8658ebce6304b6e4 from main", 1700747865.0]], "created_at": "2023-11-23T14:11:31Z"}
{"repo": "django/django", "pull_number": 17514, "instance_id": "django__django-17514", "issue_numbers": ["34991"], "base_commit": "a03593967f098cf8dab79065bcabbcebd461f05b", "patch": "diff --git a/django/contrib/admin/static/admin/css/base.css b/django/contrib/admin/static/admin/css/base.css\nindex fb27dcc4c0f8..2f7557fa1b14 100644\n--- a/django/contrib/admin/static/admin/css/base.css\n+++ b/django/contrib/admin/static/admin/css/base.css\n@@ -1100,6 +1100,9 @@ a.deletelink:focus, a.deletelink:hover {\n /* PAGINATOR */\n \n .paginator {\n+    display: flex;\n+    align-items: center;\n+    gap: 4px;\n     font-size: 0.8125rem;\n     padding-top: 10px;\n     padding-bottom: 10px;\n@@ -1143,6 +1146,10 @@ a.deletelink:focus, a.deletelink:hover {\n     background: var(--link-hover-color);\n }\n \n+.paginator input {\n+    margin-left: auto;\n+}\n+\n .base-svgs {\n     display: none;\n }\ndiff --git a/django/contrib/admin/static/admin/css/rtl.css b/django/contrib/admin/static/admin/css/rtl.css\nindex ec5a2256ec48..307606f15675 100644\n--- a/django/contrib/admin/static/admin/css/rtl.css\n+++ b/django/contrib/admin/static/admin/css/rtl.css\n@@ -107,6 +107,16 @@ thead th.sorted .text {\n     border-left: none;\n }\n \n+.paginator .end {\n+    margin-left: 6px;\n+    margin-right: 0;\n+}\n+\n+.paginator input {\n+    margin-left: 0;\n+    margin-right: auto;\n+}\n+\n /* FORMS */\n \n .aligned label {\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex f155e309c3d8..be87f010547b 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -20,3 +20,7 @@ Bugfixes\n * Fixed a regression in Django 4.2 that caused a crash when annotating a\n   ``QuerySet`` with a ``Window`` expressions composed of a ``partition_by``\n   clause mixing field types and aggregation expressions (:ticket:`34987`).\n+\n+* Fixed a regression in Django 4.2 where the admin's change list page had\n+  misaligned pagination links and inputs when using ``list_editable``\n+  (:ticket:`34991`).\n", "test_patch": "", "problem_statement": "Wrong layout of pagination buttons with editable list in the admin.\nDescription\n\t \nHello, there is a small bug in Admin panel pagination css style.\nTo reproduce, one must register model in Admin panel with at least one item in list_editable attribute (so the \"Save\" button will show up). It seems .this-page class has vertical align top and because button is large, it doesn't fit. Fix is to use vertical-align: middle, as far as i can see, this is the only place where this class is used.\ncurrently:\n\u200bhttps://user-images.githubusercontent.com/51059348/285057879-100f638f-5b6a-4ec7-afc5-588064cc9a84.png\nafter fix:\n\u200bhttps://user-images.githubusercontent.com/51059348/285059957-61c41c7f-0784-49f0-bdd8-16d5d6f263c2.png\n", "hints_text": [["\u200bhttps://github.com/django/django/pull/17513", 1700671898.0], ["Thanks for the report. This is a visual regression in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. I don't think that fixing an alignment of this-page is enough, we should restore the pre-Django 4.2 look: now:", 1700693295.0], ["I'll take a look, this seems reasonable.", 1700705534.0], ["\u200bPR", 1700713468.0], ["Rafa\u0142, not sure if you were still working on this. If so, sorry!", 1700713513.0], ["In 4eb9c3d9: Fixed #34991 -- Fixed pagination links and input layout in admin's change list page when using list_editable. Regression in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Thanks Tom Carrick for the report and fix.", 1700724067.0], ["In 3d943c4f: [4.2.x] Fixed #34991 -- Fixed pagination links and input layout in admin's change list page when using list_editable. Regression in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Thanks Tom Carrick for the report and fix. Backport of 4eb9c3d90aff55182151b6be0122f7d0b28832fd from main", 1700724186.0], ["In 15d49c8: [5.0.x] Fixed #34991 -- Fixed pagination links and input layout in admin's change list page when using list_editable. Regression in b4817d20b9e55df30be0b1b2ca8c8bb6d61aab07. Thanks Tom Carrick for the report and fix. Backport of 4eb9c3d90aff55182151b6be0122f7d0b28832fd from main", 1700724241.0]], "created_at": "2023-11-23T10:23:03Z"}
{"repo": "django/django", "pull_number": 17512, "instance_id": "django__django-17512", "issue_numbers": ["34990"], "base_commit": "101a85a5a06585ba16ecb25860146d034a8a55ec", "patch": "diff --git a/docs/ref/csrf.txt b/docs/ref/csrf.txt\nindex ae94ccdee499..12a14091d03a 100644\n--- a/docs/ref/csrf.txt\n+++ b/docs/ref/csrf.txt\n@@ -18,7 +18,7 @@ The first defense against CSRF attacks is to ensure that GET requests (and other\n Requests via 'unsafe' methods, such as POST, PUT, and DELETE, can then be\n protected by the steps outlined in :ref:`using-csrf`.\n \n-.. _Cross Site Request Forgeries: https://www.squarefree.com/securitytips/web-developers.html#CSRF\n+.. _Cross Site Request Forgeries: https://owasp.org/www-community/attacks/csrf#overview\n \n .. _how-csrf-works:\n \n", "test_patch": "", "problem_statement": "Change external link for CSRF reference docs to OWASP\nDescription\n\t \nThe CSRF reference docs links to \u200bhttps://www.squarefree.com/securitytips/web-developers.html#CSRF\nI propose it should link to \u200bhttps://owasp.org/www-community/attacks/csrf#overview\nOpen Worldwide Application Security Project (OWASP) is the standard for security related questions, we should be pushing developers to that resource. Beyond that, the examples on that page do a much better job of explaining a CSRF attack and how to protect against it.\n", "hints_text": [], "created_at": "2023-11-22T21:52:11Z"}
{"repo": "django/django", "pull_number": 17511, "instance_id": "django__django-17511", "issue_numbers": ["34987"], "base_commit": "101a85a5a06585ba16ecb25860146d034a8a55ec", "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 74ae9cab8e54..36c0bbd50acb 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1265,6 +1265,12 @@ def as_sqlite(self, compiler, connection, **extra_context):\n         # Casting to numeric is unnecessary.\n         return self.as_sql(compiler, connection, **extra_context)\n \n+    def get_group_by_cols(self):\n+        group_by_cols = []\n+        for partition in self.get_source_expressions():\n+            group_by_cols.extend(partition.get_group_by_cols())\n+        return group_by_cols\n+\n \n class OrderByList(Func):\n     allowed_default = False\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex 5c2d089b7f2d..f155e309c3d8 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -16,3 +16,7 @@ Bugfixes\n * Fixed a regression in Django 4.2 that caused a crash of\n   ``QuerySet.aggregate()`` with aggregates referencing other aggregates or\n   window functions through conditional expressions (:ticket:`34975`).\n+\n+* Fixed a regression in Django 4.2 that caused a crash when annotating a\n+  ``QuerySet`` with a ``Window`` expressions composed of a ``partition_by``\n+  clause mixing field types and aggregation expressions (:ticket:`34987`).\n", "test_patch": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex ee51ace93b00..fb14e5634912 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -838,23 +838,24 @@ def test_multiple_partitioning(self):\n             max=Window(\n                 expression=Max(\"salary\"),\n                 partition_by=[F(\"department\"), F(\"hire_date__year\")],\n-            )\n+            ),\n+            past_department_count=Count(\"past_departments\"),\n         ).order_by(\"department\", \"hire_date\", \"name\")\n         self.assertQuerySetEqual(\n             qs,\n             [\n-                (\"Jones\", 45000, \"Accounting\", datetime.date(2005, 11, 1), 45000),\n-                (\"Jenson\", 45000, \"Accounting\", datetime.date(2008, 4, 1), 45000),\n-                (\"Williams\", 37000, \"Accounting\", datetime.date(2009, 6, 1), 37000),\n-                (\"Adams\", 50000, \"Accounting\", datetime.date(2013, 7, 1), 50000),\n-                (\"Wilkinson\", 60000, \"IT\", datetime.date(2011, 3, 1), 60000),\n-                (\"Moore\", 34000, \"IT\", datetime.date(2013, 8, 1), 34000),\n-                (\"Miller\", 100000, \"Management\", datetime.date(2005, 6, 1), 100000),\n-                (\"Johnson\", 80000, \"Management\", datetime.date(2005, 7, 1), 100000),\n-                (\"Smith\", 38000, \"Marketing\", datetime.date(2009, 10, 1), 38000),\n-                (\"Johnson\", 40000, \"Marketing\", datetime.date(2012, 3, 1), 40000),\n-                (\"Smith\", 55000, \"Sales\", datetime.date(2007, 6, 1), 55000),\n-                (\"Brown\", 53000, \"Sales\", datetime.date(2009, 9, 1), 53000),\n+                (\"Jones\", 45000, \"Accounting\", datetime.date(2005, 11, 1), 45000, 0),\n+                (\"Jenson\", 45000, \"Accounting\", datetime.date(2008, 4, 1), 45000, 0),\n+                (\"Williams\", 37000, \"Accounting\", datetime.date(2009, 6, 1), 37000, 0),\n+                (\"Adams\", 50000, \"Accounting\", datetime.date(2013, 7, 1), 50000, 0),\n+                (\"Wilkinson\", 60000, \"IT\", datetime.date(2011, 3, 1), 60000, 0),\n+                (\"Moore\", 34000, \"IT\", datetime.date(2013, 8, 1), 34000, 0),\n+                (\"Miller\", 100000, \"Management\", datetime.date(2005, 6, 1), 100000, 1),\n+                (\"Johnson\", 80000, \"Management\", datetime.date(2005, 7, 1), 100000, 0),\n+                (\"Smith\", 38000, \"Marketing\", datetime.date(2009, 10, 1), 38000, 0),\n+                (\"Johnson\", 40000, \"Marketing\", datetime.date(2012, 3, 1), 40000, 1),\n+                (\"Smith\", 55000, \"Sales\", datetime.date(2007, 6, 1), 55000, 0),\n+                (\"Brown\", 53000, \"Sales\", datetime.date(2009, 9, 1), 53000, 0),\n             ],\n             transform=lambda row: (\n                 row.name,\n@@ -862,6 +863,7 @@ def test_multiple_partitioning(self):\n                 row.department,\n                 row.hire_date,\n                 row.max,\n+                row.past_department_count,\n             ),\n         )\n \n", "problem_statement": "\"Expression contains mixed types\" exception when performing window function on query that also has aggregates.\nDescription\n\t \nWe're currently upgrading from Django 3.2.x -> 4.2.7 and have encountered a weird bug when using both Window functions and aggregates in a query annotation, the example below works fine in Django 3.2. For now I've cast all the fields in the Window partition to CharField, but it's a bit of a hack... I tested this with both mssql and sqlite connectors.\nclass TestModel(models.Model):\n\tfield_1 = models.IntegerField()\n\tfield_2 = models.IntegerField()\n\tfield_3 = models.DateField()\nTestModel.objects.annotate(\n\txyz=Window(\n\t\texpression=Sum('field_1'),\n\t\tpartition_by=[F('field_2'), F('field_3')]\n\t),\n\tyxz=Max('field_2')\n)\ndjango.core.exceptions.FieldError: Expression contains mixed types: AutoField, DateField. You must set output_field.\n", "hints_text": [["Hi ElRoberto538, Thanks for the report \ud83c\udfc6 Bisected to f387d024fc75569d2a4a338bfda76cc2f328f627 @Simon ticket appears similar to #34717 which is fixed, though can still replicate this issue on main.", 1700604738.0], ["Settings as release blocker since the bisected revision was released in 4.2a1", 1700630945.0], ["I'm pretty sure that the issue is due to Window's output field resolving is considering partition_by as part of its output when it shouldn't.", 1700662102.0]], "created_at": "2023-11-22T21:08:27Z"}
{"repo": "django/django", "pull_number": 17510, "instance_id": "django__django-17510", "issue_numbers": ["26827"], "base_commit": "a89c715c3bcf7ab1a90747cf8658ebce6304b6e4", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 0247503197da..f63f712f3a41 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -816,6 +816,7 @@ answer newbie questions, and generally made Django that much better:\n     plisk\n     polpak@yahoo.com\n     pradeep.gowda@gmail.com\n+    Prashant Pandey <https://prashantpandey9.in>\n     Preston Holmes <preston@ptone.com>\n     Preston Timmons <prestontimmons@gmail.com>\n     Priyank Panchal <priyankpanchal872000@gmail.com>\ndiff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 4aa6e1f6cc64..5ffd7fc07a74 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -738,13 +738,15 @@ def __init__(\n             # Sanity-check that relation fields are NOT referring to a model class.\n             if field.is_relation and hasattr(field.related_model, \"_meta\"):\n                 raise ValueError(\n-                    'ModelState.fields cannot refer to a model class - \"%s.to\" does. '\n-                    \"Use a string reference instead.\" % name\n+                    'Model fields in \"ModelState.fields\" cannot refer to a model class '\n+                    f'- \"{self.app_label}.{self.name}.{name}.to\" does. Use a string '\n+                    \"reference instead.\"\n                 )\n             if field.many_to_many and hasattr(field.remote_field.through, \"_meta\"):\n                 raise ValueError(\n-                    'ModelState.fields cannot refer to a model class - \"%s.through\" '\n-                    \"does. Use a string reference instead.\" % name\n+                    'Model fields in \"ModelState.fields\" cannot refer to a model class '\n+                    f'- \"{self.app_label}.{self.name}.{name}.through\" does. Use a '\n+                    \"string reference instead.\"\n                 )\n         # Sanity-check that indexes have their name set.\n         for index in self.options[\"indexes\"]:\n", "test_patch": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex f1ac78c9926e..686eba450038 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -1651,8 +1651,8 @@ def test_sanity_check_to(self):\n         field = models.ForeignKey(UnicodeModel, models.CASCADE)\n         with self.assertRaisesMessage(\n             ValueError,\n-            'ModelState.fields cannot refer to a model class - \"field.to\" does. '\n-            \"Use a string reference instead.\",\n+            'Model fields in \"ModelState.fields\" cannot refer to a model class - '\n+            '\"app.Model.field.to\" does. Use a string reference instead.',\n         ):\n             ModelState(\"app\", \"Model\", [(\"field\", field)])\n \n@@ -1661,8 +1661,8 @@ def test_sanity_check_through(self):\n         field.remote_field.through = UnicodeModel\n         with self.assertRaisesMessage(\n             ValueError,\n-            'ModelState.fields cannot refer to a model class - \"field.through\" does. '\n-            \"Use a string reference instead.\",\n+            'Model fields in \"ModelState.fields\" cannot refer to a model class - '\n+            '\"app.Model.field.through\" does. Use a string reference instead.',\n         ):\n             ModelState(\"app\", \"Model\", [(\"field\", field)])\n \n", "problem_statement": "\"ModelState.fields cannot refer to a model class ... Use a string reference instead.\" when using custom model field derived from ManyToMany\nDescription\n\t\t\n(last modified by Zaheer Soebhan)\t\t\nI ended up in a weird situation (Django 1.9.7) where I couldn't make any additional migrations. So I reset my migrations thinking the problem was somehow in the migration scripts themselves:\n\tValueError: ModelState.fields cannot refer to a model class - \"runs.to\" does. Use a string reference instead.\nI still got the error after restarting migrations from scratch, so I determined it is about the migration looking at the currently declared models, not the historical model migration scripts. \nI have this (trimmed) code:\nclass Run(models.Model):\n\t pass\nclass _RunsField(models.ManyToManyField):\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t def __init__(self, *args, **kwargs):\t\t\t\t\t\t\t\t\t\t\n\t\t super(_RunsField, self).__init__(Run, through='BaselineAssignment') \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \nclass Baseline(models.Model):\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\t runs = _RunsField()\n class BaselineAssignment(models.Model):\t\t\t \n\t run = models.ForeignKey('Run', on_delete=models.CASCADE)\t\t\t\t\t\n\t baseline = models.ForeignKey('Baseline', on_delete=models.CASCADE)\t\t \n \nIf I change Run in the __init__ in _RunsField to 'Run' (quoted) the problem goes away.\nThis seems like this is something that should have been handled by the underlying migration code, and even if it isn't, the error message is quite unhelpful.\n", "hints_text": [["Confirmed the bug in 1.9.7 and 1.11.dev.", 1467435269.0], ["Removed raisings of exceptions to see if other tests would fail and figure out a way to use classes instead of strings. As it turns out, the existing tests don't fail. (Default tests/runtests.py with Python3). Both strings and classnames can be used now.", 1467446815.0], ["The checks are in there for reasons (which is why there are tests as well ;) ). This has performance, consistency resons while moving ModelStates from migration to migration. Instead we should add a comment to the docs in the \"Custom Model Fields\" part that one cannot do what you did above but should use 'myapp.Run' as a string reference instead. I'm also fine if you update the message to something along the lines: raise ValueError( \"Model fields in 'ModelState.fields' cannot refer to a model class - '%s.%s.%s.to' does. \" \"Use a string reference instead.\" % (self.app_label, self.name, name) )", 1467448544.0], ["\u200bhttps://github.com/django/django/pull/17510", 1700694151.0]], "created_at": "2023-11-22T18:48:36Z"}
{"repo": "django/django", "pull_number": 17506, "instance_id": "django__django-17506", "issue_numbers": ["34985"], "base_commit": "0d407bcce5449d839fab138baeb9220f6df6bd6d", "patch": "diff --git a/django/db/models/fields/generated.py b/django/db/models/fields/generated.py\nindex 9a73b7fe373c..95d19582de1a 100644\n--- a/django/db/models/fields/generated.py\n+++ b/django/db/models/fields/generated.py\n@@ -13,7 +13,6 @@ class GeneratedField(Field):\n     db_returning = True\n \n     _query = None\n-    _resolved_expression = None\n     output_field = None\n \n     def __init__(self, *, expression, output_field, db_persist=None, **kwargs):\n@@ -48,9 +47,6 @@ def contribute_to_class(self, *args, **kwargs):\n         super().contribute_to_class(*args, **kwargs)\n \n         self._query = Query(model=self.model, alias_cols=False)\n-        self._resolved_expression = self.expression.resolve_expression(\n-            self._query, allow_joins=False\n-        )\n         # Register lookups from the output_field class.\n         for lookup_name, lookup in self.output_field.get_class_lookups().items():\n             self.register_lookup(lookup, lookup_name=lookup_name)\n@@ -59,7 +55,10 @@ def generated_sql(self, connection):\n         compiler = connection.ops.compiler(\"SQLCompiler\")(\n             self._query, connection=connection, using=None\n         )\n-        return compiler.compile(self._resolved_expression)\n+        resolved_expression = self.expression.resolve_expression(\n+            self._query, allow_joins=False\n+        )\n+        return compiler.compile(resolved_expression)\n \n     def check(self, **kwargs):\n         databases = kwargs.get(\"databases\") or []\n", "test_patch": "diff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex 04d52f679974..9e5d9d87c361 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -1,3 +1,4 @@\n+from django.apps import apps\n from django.db import IntegrityError, connection\n from django.db.models import (\n     CharField,\n@@ -33,6 +34,25 @@ def test_editable_unsupported(self):\n                 db_persist=False,\n             )\n \n+    @isolate_apps(\"model_fields\")\n+    def test_contribute_to_class(self):\n+        class BareModel(Model):\n+            pass\n+\n+        new_field = GeneratedField(\n+            expression=Lower(\"nonexistent\"),\n+            output_field=IntegerField(),\n+            db_persist=True,\n+        )\n+        apps.models_ready = False\n+        try:\n+            # GeneratedField can be added to the model even when apps are not\n+            # fully loaded.\n+            new_field.contribute_to_class(BareModel, \"name\")\n+            self.assertEqual(BareModel._meta.get_field(\"name\"), new_field)\n+        finally:\n+            apps.models_ready = True\n+\n     def test_blank_unsupported(self):\n         with self.assertRaisesMessage(ValueError, \"GeneratedField must be blank.\"):\n             GeneratedField(\n@@ -217,10 +237,6 @@ def test_output_field_db_collation(self):\n         db_parameters = field.db_parameters(connection)\n         self.assertEqual(db_parameters[\"collation\"], collation)\n         self.assertEqual(db_parameters[\"type\"], field.output_field.db_type(connection))\n-        self.assertNotEqual(\n-            db_parameters[\"type\"],\n-            field._resolved_expression.output_field.db_type(connection),\n-        )\n \n     def test_db_type_parameters(self):\n         db_type_parameters = self.output_field_db_collation_model._meta.get_field(\n", "problem_statement": "Migrations raise AppRegistryNotReady when GeneratedField references incorrect fields.\nDescription\n\t \nNote: In my experiments, I am sure I have encountered similar errors even in cases that are simpler to reproduce, without models with multi-table inheritance to clarify, but in this case, I cannot find the example code of the field generated to reproduce it, so I report below the example that certainly allows you to reproduce the error.\nI tried to test the behavior of the generated fields in the case of multi-table inheritance.\nI was expecting an error since the documentation specifies that:\nThe expressions should be deterministic and only reference fields within the model (in the same database table).\nThe generation of migrations of two inheritance models occurs successfully (without generated fields)\nfrom django.db import models\nclass Person(models.Model):\n\tfirst_name = models.CharField(max_length=150)\n\tlast_name = models.CharField(max_length=150)\nclass Profile(Person):\n\temail = models.EmailField()\n$ python3 -m manage makemigrations\nMigrations for 'samples':\n samples/migrations/0010_person_profile.py\n\t- Create model Person\n\t- Create model Profile\n$ python3 -m manage sqlmigrate samples 0010\nBEGIN;\n--\n-- Create model Person\n--\nCREATE TABLE \"samples_person\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"first_name\" varchar(150) NOT NULL, \"last_name\" varchar(150) NOT NULL);\n--\n-- Create model Profile\n--\nCREATE TABLE \"samples_profile\" (\"person_ptr_id\" bigint NOT NULL PRIMARY KEY REFERENCES \"samples_person\" (\"id\") DEFERRABLE INITIALLY DEFERRED, \"email\" varchar(254) NOT NULL);\nCOMMIT;\nInstead, if in the second model, I create a generated field that references the fields in the first model I get a very unclear error that perhaps we could make more clear.\nfrom django.db import models\nfrom django.db.models import Value\nfrom django.db.models.functions import (\n\tConcat,\n)\nclass Person(models.Model):\n\tfirst_name = models.CharField(max_length=150)\n\tlast_name = models.CharField(max_length=150)\nclass Profile(Person):\n\temail = models.EmailField()\n\tdisplay_name = models.GeneratedField(\n\t\texpression=Concat(\"first_name\", Value(\" \"), \"last_name\", Value(\" \"), \"email\",),\n\t\tdb_persist=True,\n\t\toutput_field=models.TextField(),\n\t)\n$ python3 -m manage makemigrations\nTraceback (most recent call last):\n File \"<frozen runpy>\", line 198, in _run_module_as_main\n File \"<frozen runpy>\", line 88, in _run_code\n File \"/home/paulox/Projects/generatedfields/manage.py\", line 22, in <module>\n\tmain()\n File \"/home/paulox/Projects/generatedfields/manage.py\", line 18, in main\n\texecute_from_command_line(sys.argv)\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/core/management/__init__.py\", line 442, in execute_from_command_line\n\tutility.execute()\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/core/management/__init__.py\", line 416, in execute\n\tdjango.setup()\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/__init__.py\", line 24, in setup\n\tapps.populate(settings.INSTALLED_APPS)\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/apps/registry.py\", line 116, in populate\n\tapp_config.import_models()\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/apps/config.py\", line 269, in import_models\n\tself.models_module = import_module(models_module_name)\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/usr/lib/python3.12/importlib/__init__.py\", line 90, in import_module\n\treturn _bootstrap._gcd_import(name[level:], package, level)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"<frozen importlib._bootstrap>\", line 1381, in _gcd_import\n File \"<frozen importlib._bootstrap>\", line 1354, in _find_and_load\n File \"<frozen importlib._bootstrap>\", line 1325, in _find_and_load_unlocked\n File \"<frozen importlib._bootstrap>\", line 929, in _load_unlocked\n File \"<frozen importlib._bootstrap_external>\", line 994, in exec_module\n File \"<frozen importlib._bootstrap>\", line 488, in _call_with_frames_removed\n File \"/home/paulox/Projects/generatedfields/samples/models.py\", line 233, in <module>\n\tclass Profile(User):\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/base.py\", line 194, in __new__\n\tnew_class.add_to_class(obj_name, obj)\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/base.py\", line 371, in add_to_class\n\tvalue.contribute_to_class(cls, name)\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/fields/generated.py\", line 51, in contribute_to_class\n\tself._resolved_expression = self.expression.resolve_expression(\n\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/expressions.py\", line 975, in resolve_expression\n\tc.source_expressions[pos] = arg.resolve_expression(\n\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/expressions.py\", line 975, in resolve_expression\n\tc.source_expressions[pos] = arg.resolve_expression(\n\t\t\t\t\t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/expressions.py\", line 854, in resolve_expression\n\treturn query.resolve_ref(self.name, allow_joins, reuse, summarize)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/sql/query.py\", line 2001, in resolve_ref\n\tjoin_info = self.setup_joins(\n\t\t\t\t^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/sql/query.py\", line 1854, in setup_joins\n\tpath, final_field, targets, rest = self.names_to_path(\n\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/sql/query.py\", line 1754, in names_to_path\n\t*get_field_names_from_opts(opts),\n\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/sql/query.py\", line 63, in get_field_names_from_opts\n\t(f.name, f.attname) if f.concrete else (f.name,) for f in opts.get_fields()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/options.py\", line 858, in get_fields\n\treturn self._get_fields(\n\t\t ^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/options.py\", line 931, in _get_fields\n\tall_fields = self._relation_tree\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/utils/functional.py\", line 47, in __get__\n\tres = instance.__dict__[self.name] = self.func(instance)\n\t\t\t\t\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/options.py\", line 831, in _relation_tree\n\treturn self._populate_directed_relation_graph()\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/db/models/options.py\", line 798, in _populate_directed_relation_graph\n\tall_models = self.apps.get_models(include_auto_created=True)\n\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/apps/registry.py\", line 181, in get_models\n\tself.check_models_ready()\n File \"/home/paulox/.virtualenvs/generatedfields/lib/python3.12/site-packages/django/apps/registry.py\", line 143, in check_models_ready\n\traise AppRegistryNotReady(\"Models aren't loaded yet.\")\ndjango.core.exceptions.AppRegistryNotReady: Models aren't loaded yet.\n", "hints_text": [["Thanks for the report. We could add a small check for GeneratedField references, e.g. django/db/models/base.py diff --git a/django/db/models/base.py b/django/db/models/base.py index 64d54380da..62ce34c4f8 100644 a b class Model(AltersData, metaclass=ModelBase): 16011601 *cls._check_constraints(databases), 16021602 *cls._check_default_pk(), 16031603 *cls._check_db_table_comment(databases), 1604 *cls._check_generated_fields(databases), 16041605 ] 16051606 16061607 return errors \u2026 \u2026 class Model(AltersData, metaclass=ModelBase): 19571958 errors.extend(cls._check_local_fields(fields, \"unique_together\")) 19581959 return errors 19591960 1961 @classmethod 1962 def _check_generated_fields(cls, databases): 1963 errors = [] 1964 for f in cls._meta.local_fields: 1965 if not f.generated: 1966 continue 1967 references = { 1968 ref[0] for ref in cls._get_expr_references(f.expression) 1969 } 1970 errors.extend(cls._check_local_fields(references, f.name)) 1971 return errors 1972 19601973 @classmethod 19611974 def _check_indexes(cls, databases): 19621975 \"\"\"Check fields, names, and conditions of indexes.\"\"\" Unfortunately, this would still required catching exceptions when resolving GeneratedField expressions.", 1700607632.0], ["Unfortunately, this would still required catching exceptions when resolving GeneratedField expressions. Or we can move resolving an expression to the generated_sql() which is not the end of the world: django/db/models/fields/generated.py diff --git a/django/db/models/fields/generated.py b/django/db/models/fields/generated.py index 9a73b7fe37..95d19582de 100644 a b class GeneratedField(Field): 1313 db_returning = True 1414 1515 _query = None 16 _resolved_expression = None 1716 output_field = None 1817 1918 def __init__(self, *, expression, output_field, db_persist=None, **kwargs): \u2026 \u2026 class GeneratedField(Field): 4847 super().contribute_to_class(*args, **kwargs) 4948 5049 self._query = Query(model=self.model, alias_cols=False) 51 self._resolved_expression = self.expression.resolve_expression( 52 self._query, allow_joins=False 53 ) 5450 # Register lookups from the output_field class. 5551 for lookup_name, lookup in self.output_field.get_class_lookups().items(): 5652 self.register_lookup(lookup, lookup_name=lookup_name) \u2026 \u2026 class GeneratedField(Field): 5955 compiler = connection.ops.compiler(\"SQLCompiler\")( 6056 self._query, connection=connection, using=None 6157 ) 62 return compiler.compile(self._resolved_expression) 58 resolved_expression = self.expression.resolve_expression( 59 self._query, allow_joins=False 60 ) 61 return compiler.compile(resolved_expression) 6362 6463 def check(self, **kwargs): 6564 databases = kwargs.get(\"databases\") or []", 1700608044.0], ["On reconsideration, system check is not necessary. makemigrations doesn't crash with the proposed diff, and migrate raises: django.core.exceptions.FieldError: Joined field references are not permitted in this query which is fine, IMO.", 1700618207.0], ["\u200bPR", 1700625005.0], ["In 101a85a: Fixed #34985 -- Fixed GeneratedFields.contribute_to_class() crash when apps are not populated. Thanks Paolo Melchiorre for the report. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.", 1700635299.0], ["In 48eebdc: [5.0.x] Fixed #34985 -- Fixed GeneratedFields.contribute_to_class() crash when apps are not populated. Thanks Paolo Melchiorre for the report. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95. Backport of 101a85a5a06585ba16ecb25860146d034a8a55ec from main", 1700635832.0]], "created_at": "2023-11-22T09:49:51Z"}
{"repo": "django/django", "pull_number": 17505, "instance_id": "django__django-17505", "issue_numbers": ["34984"], "base_commit": "0d407bcce5449d839fab138baeb9220f6df6bd6d", "patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex a8200a1a8c70..64cf0188d2bc 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -107,6 +107,7 @@ def is_self_referential(f):\n         mapping = {\n             f.column: self.quote_name(f.column)\n             for f in model._meta.local_concrete_fields\n+            if f.generated is False\n         }\n         # This maps field names (not columns) for things like unique_together\n         rename_mapping = {}\n@@ -163,7 +164,7 @@ def is_self_referential(f):\n         # Remove any deleted fields\n         if delete_field:\n             del body[delete_field.name]\n-            del mapping[delete_field.column]\n+            mapping.pop(delete_field.column, None)\n             # Remove any implicit M2M tables\n             if (\n                 delete_field.many_to_many\n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 21e8ab069a2e..7643111c348b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -5801,6 +5801,42 @@ def test_remove_generated_field_stored(self):\n     def test_remove_generated_field_virtual(self):\n         self._test_remove_generated_field(db_persist=False)\n \n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_add_field_after_generated_field(self):\n+        app_label = \"test_adfagf\"\n+        project_state = self.set_up_test_model(app_label)\n+        operation_1 = migrations.AddField(\n+            \"Pony\",\n+            \"generated\",\n+            models.GeneratedField(\n+                expression=Value(1),\n+                output_field=models.IntegerField(),\n+                db_persist=True,\n+            ),\n+        )\n+        operation_2 = migrations.AddField(\n+            \"Pony\",\n+            \"static\",\n+            models.IntegerField(default=2),\n+        )\n+        new_state = project_state.clone()\n+        operation_1.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation_1.database_forwards(app_label, editor, project_state, new_state)\n+        project_state, new_state = new_state, new_state.clone()\n+        pony_old = new_state.apps.get_model(app_label, \"Pony\").objects.create(weight=20)\n+        self.assertEqual(pony_old.generated, 1)\n+        operation_2.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation_2.database_forwards(app_label, editor, project_state, new_state)\n+        Pony = new_state.apps.get_model(app_label, \"Pony\")\n+        pony_old = Pony.objects.get(pk=pony_old.pk)\n+        self.assertEqual(pony_old.generated, 1)\n+        self.assertEqual(pony_old.static, 2)\n+        pony_new = Pony.objects.create(weight=20)\n+        self.assertEqual(pony_new.generated, 1)\n+        self.assertEqual(pony_new.static, 2)\n+\n \n class SwappableOperationTests(OperationTestBase):\n     \"\"\"\n", "problem_statement": "Adding a field with default crashes for models with GeneratedField on SQLite.\nDescription\n\t \nI added a non-nullable field (in example new_field_temporary_default) to a model containing a GeneratedField and in my migration prompt I added a one-off default. I am using SQLite.\nModel \nclass Article(models.Model):\n\tcreated_at = models.DateTimeField(db_default=Now())\n\ttitle = models.CharField(max_length=300)\n\tslug = models.GeneratedField(\n\t\texpression=Lower(Replace(F(\"title\"), Value(\" \"), Value(\"-\"))),\n\t\tdb_persist=True,\n\t\tunique=True,\n\t)\n\tnew_field_temporary_default = models.TextField() # This field added after table was created\nGenerated migration:\n# Generated by Django 5.0b1 on 2023-11-21 12:52\nfrom django.db import migrations, models\nclass Migration(migrations.Migration):\n\tdependencies = [\n\t\t(\"blog\", \"0001_initial\"),\n\t]\n\toperations = [\n\t\tmigrations.AddField(\n\t\t\tmodel_name=\"article\",\n\t\t\tname=\"new_field_temporary_default\",\n\t\t\tfield=models.TextField(default=\"Temp default\"),\n\t\t\tpreserve_default=False,\n\t\t),\n\t]\nThis failed to migrate with the error\n\treturn super().execute(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ndjango.db.utils.OperationalError: cannot INSERT into generated column \"slug\"\nNot certain if this is an issue. Thought I should raise.\n", "hints_text": [["Hey Sarah, thank you for the report! Could you please re-test with latest 5.0 rc1? The GeneratedField was changed so the output_field is required, and when using that, I can't reproduce. I tried both with 5.0rc1 and latest main.", 1700552591.0], ["I've upgraded to the release candidate and replicated. Initially the model looks like this: class Article(models.Model): created_at = models.DateTimeField(db_default=Now()) title = models.CharField(max_length=300) slug = models.GeneratedField( expression=Lower(Replace(F(\"title\"), Value(\" \"), Value(\"-\"))), db_persist=True, unique=True, output_field=models.TextField(), ) First migration file: # Generated by Django 5.0rc1 on 2023-11-21 13:58 import django.db.models.functions.datetime import django.db.models.functions.text from django.db import migrations, models class Migration(migrations.Migration): initial = True dependencies = [] operations = [ migrations.CreateModel( name=\"Article\", fields=[ ( \"id\", models.BigAutoField( auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\", ), ), ( \"created_at\", models.DateTimeField( db_default=django.db.models.functions.datetime.Now() ), ), (\"title\", models.CharField(max_length=300)), ( \"slug\", models.GeneratedField( db_persist=True, expression=django.db.models.functions.text.Lower( django.db.models.functions.text.Replace( models.F(\"title\"), models.Value(\" \"), models.Value(\"-\") ) ), output_field=models.TextField(), unique=True, ), ), ], ), ] Then I add new_field_temporary_default = models.TextField() make migrations, it prompts me that this field is non nullable and without a default, I go for the option to add a temporary default Second migration file # Generated by Django 5.0rc1 on 2023-11-21 13:58 from django.db import migrations, models class Migration(migrations.Migration): dependencies = [ (\"blog\", \"0001_initial\"), ] operations = [ migrations.AddField( model_name=\"article\", name=\"new_field_temporary_default\", field=models.TextField(default=\"Temp value\"), preserve_default=False, ), ] And migrate, same error: return super().execute(query, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ django.db.utils.OperationalError: cannot INSERT into generated column \"slug\"", 1700553897.0], ["Thanks Sarah \ud83c\udfc6. Confirmed on main, full traceback: django-sample % dj migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, htc, query_json_in, sessions, ticket_34984_one_off_default, union_issue Running migrations: Applying ticket_34984_one_off_default.0002_article_new_field_temporary_default...Traceback (most recent call last): File \"/path/to/django/django/db/backends/utils.py\", line 105, in _execute return self.cursor.execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/backends/sqlite3/base.py\", line 328, in execute return super().execute(query, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ sqlite3.OperationalError: cannot INSERT into generated column \"slug\" The above exception was the direct cause of the following exception: Traceback (most recent call last): File \"/path/to/sample-project/./manage.py\", line 22, in <module> main() File \"/path/to/sample-project/./manage.py\", line 18, in main execute_from_command_line(sys.argv) File \"/path/to/django/django/core/management/__init__.py\", line 442, in execute_from_command_line utility.execute() File \"/path/to/django/django/core/management/__init__.py\", line 436, in execute self.fetch_command(subcommand).run_from_argv(self.argv) File \"/path/to/django/django/core/management/base.py\", line 412, in run_from_argv self.execute(*args, **cmd_options) File \"/path/to/django/django/core/management/base.py\", line 458, in execute output = self.handle(*args, **options) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/core/management/base.py\", line 106, in wrapper res = handle_func(*args, **kwargs) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/core/management/commands/migrate.py\", line 356, in handle post_migrate_state = executor.migrate( ^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/migrations/executor.py\", line 135, in migrate state = self._migrate_all_forwards( ^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/migrations/executor.py\", line 167, in _migrate_all_forwards state = self.apply_migration( ^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/migrations/executor.py\", line 252, in apply_migration state = migration.apply(state, schema_editor) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/migrations/migration.py\", line 132, in apply operation.database_forwards( File \"/path/to/django/django/db/migrations/operations/fields.py\", line 108, in database_forwards schema_editor.add_field( File \"/path/to/django/django/db/backends/sqlite3/schema.py\", line 303, in add_field self._remake_table(model, create_field=field) File \"/path/to/django/django/db/backends/sqlite3/schema.py\", line 233, in _remake_table self.execute( File \"/path/to/django/django/db/backends/base/schema.py\", line 201, in execute cursor.execute(sql, params) File \"/path/to/django/django/db/backends/utils.py\", line 122, in execute return super().execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/backends/utils.py\", line 79, in execute return self._execute_with_wrappers( ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/backends/utils.py\", line 92, in _execute_with_wrappers return executor(sql, params, many, context) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/backends/utils.py\", line 100, in _execute with self.db.wrap_database_errors: File \"/path/to/django/django/db/utils.py\", line 91, in __exit__ raise dj_exc_value.with_traceback(traceback) from exc_value File \"/path/to/django/django/db/backends/utils.py\", line 105, in _execute return self.cursor.execute(sql, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/path/to/django/django/db/backends/sqlite3/base.py\", line 328, in execute return super().execute(query, params) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ django.db.utils.OperationalError: cannot INSERT into generated column \"slug\"", 1700554348.0], ["Thank you Sarah, I tried again and I was able to reproduce, I must have had some misconfiguration in my test project. Thank you!", 1700554755.0], ["SQL of the migration: BEGIN; -- -- Add field new_field_temporary_default to article -- CREATE TABLE \"new__ticket_34984_article\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"new_field_temporary_default\" text NOT NULL, \"created_at\" datetime DEFAULT (STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')) NOT NULL, \"title\" varchar(300) NOT NULL, \"slug\" text GENERATED ALWAYS AS (LOWER(REPLACE(\"title\", ' ', '-'))) STORED UNIQUE); INSERT INTO \"new__ticket_34984_article\" (\"id\", \"created_at\", \"title\", \"slug\", \"new_field_temporary_default\") SELECT \"id\", \"created_at\", \"title\", \"slug\", 'temp' FROM \"ticket_34984_article\"; DROP TABLE \"ticket_34984_article\"; ALTER TABLE \"new__ticket_34984_article\" RENAME TO \"ticket_34984_article\"; COMMIT;", 1700554869.0], ["Looks like felix already narrowed it down but here's a failing test case just in case someone can use it: --- a/tests/migrations/test_operations.py +++ b/tests/migrations/test_operations.py @@ -5801,6 +5801,36 @@ class OperationTests(OperationTestBase): def test_remove_generated_field_virtual(self): self._test_remove_generated_field(db_persist=False) + @skipUnlessDBFeature(\"supports_stored_generated_columns\") + def test_add_field_after_generated_field(self): + app_label = \"test_adfagf\" + project_state = self.set_up_test_model(app_label) + operation_1 = migrations.AddField( + \"Pony\", + \"generated\", + models.GeneratedField( + expression=Value(1), + output_field=models.IntegerField(), + db_persist=True, + ), + ) + operation_2 = migrations.AddField( + \"Pony\", + \"static\", + models.IntegerField(default=2), + ) + new_state = project_state.clone() + operation_1.state_forwards(app_label, new_state) + with connection.schema_editor() as editor: + operation_1.database_forwards(app_label, editor, project_state, new_state) + project_state, new_state = new_state, new_state.clone() + operation_2.state_forwards(app_label, new_state) + with connection.schema_editor() as editor: + operation_2.database_forwards(app_label, editor, project_state, new_state) + pony = new_state.apps.get_model(app_label, \"Pony\").objects.create(weight=20) + self.assertEqual(pony.generated, 1) + self.assertEqual(pony.static, 2) + class SwappableOperationTests(OperationTestBase): \"\"\"", 1700556322.0], ["I think it's enough to skip GeneratedFields when remaking tables on SQLite: django/db/backends/sqlite3/schema.py diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py index a8200a1a8c..713ef31437 100644 a b class DatabaseSchemaEditor(BaseDatabaseSchemaEditor): 106106 # its values must be already quoted. 107107 mapping = { 108108 f.column: self.quote_name(f.column) 109 for f in model._meta.local_concrete_fields 109 for f in model._meta.local_concrete_fields if f.generated is False 110110 } 111111 # This maps field names (not columns) for things like unique_together 112112 rename_mapping = {} Sarah, would you like to prepare a patch?", 1700556891.0], ["I can tomorrow, if anyone wants to pick it up sooner that's also fine \ud83d\ude42", 1700557057.0], ["Replying to Sarah Boyce: I can tomorrow, if anyone wants to pick it up sooner that's also fine \ud83d\ude42 No rush, we can wait until tomorrow.", 1700557805.0], ["\u200bPR", 1700631030.0], ["In 828082da: Fixed #34984 -- Skipped GeneratedFields when remaking tables on SQLite. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.t Co-authored-by: Mariusz Felisiak <felisiak.mariusz@\u2026> Co-authored-by: David Sanders <shang.xiao.sanders@\u2026>", 1700634456.0], ["In 0c6ca522: [5.0.x] Fixed #34984 -- Skipped GeneratedFields when remaking tables on SQLite. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.t Co-authored-by: Mariusz Felisiak <felisiak.mariusz@\u2026> Co-authored-by: David Sanders <shang.xiao.sanders@\u2026> Backport of 828082dad954e87d09a99b53424e6faa1860ccc7 from main", 1700634475.0]], "created_at": "2023-11-22T09:02:27Z"}
{"repo": "django/django", "pull_number": 17498, "instance_id": "django__django-17498", "issue_numbers": ["34983"], "base_commit": "eabfa2d0e38670365aa74117ad2f8710b81065c5", "patch": "diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py\nindex 85330e2c0e6f..e5ef1bb52381 100644\n--- a/django/contrib/auth/models.py\n+++ b/django/contrib/auth/models.py\n@@ -1,3 +1,5 @@\n+from collections.abc import Iterable\n+\n from django.apps import apps\n from django.contrib import auth\n from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager\n@@ -8,7 +10,6 @@\n from django.db import models\n from django.db.models.manager import EmptyManager\n from django.utils import timezone\n-from django.utils.itercompat import is_iterable\n from django.utils.translation import gettext_lazy as _\n \n from .validators import UnicodeUsernameValidator\n@@ -315,7 +316,7 @@ def has_perms(self, perm_list, obj=None):\n         Return True if the user has each of the specified permissions. If\n         object is passed, check if the user has all required perms for it.\n         \"\"\"\n-        if not is_iterable(perm_list) or isinstance(perm_list, str):\n+        if not isinstance(perm_list, Iterable) or isinstance(perm_list, str):\n             raise ValueError(\"perm_list must be an iterable of permissions.\")\n         return all(self.has_perm(perm, obj) for perm in perm_list)\n \n@@ -480,7 +481,7 @@ def has_perm(self, perm, obj=None):\n         return _user_has_perm(self, perm, obj=obj)\n \n     def has_perms(self, perm_list, obj=None):\n-        if not is_iterable(perm_list) or isinstance(perm_list, str):\n+        if not isinstance(perm_list, Iterable) or isinstance(perm_list, str):\n             raise ValueError(\"perm_list must be an iterable of permissions.\")\n         return all(self.has_perm(perm, obj) for perm in perm_list)\n \ndiff --git a/django/core/checks/registry.py b/django/core/checks/registry.py\nindex f4bdea8691fc..146b28f65ead 100644\n--- a/django/core/checks/registry.py\n+++ b/django/core/checks/registry.py\n@@ -1,7 +1,7 @@\n+from collections.abc import Iterable\n from itertools import chain\n \n from django.utils.inspect import func_accepts_kwargs\n-from django.utils.itercompat import is_iterable\n \n \n class Tags:\n@@ -86,7 +86,7 @@ def run_checks(\n \n         for check in checks:\n             new_errors = check(app_configs=app_configs, databases=databases)\n-            if not is_iterable(new_errors):\n+            if not isinstance(new_errors, Iterable):\n                 raise TypeError(\n                     \"The function %r did not return a list. All functions \"\n                     \"registered with the checks registry must return a list.\" % check,\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 67e8ddc98650..41735d3b7f18 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -5,6 +5,7 @@\n import uuid\n import warnings\n from base64 import b64decode, b64encode\n+from collections.abc import Iterable\n from functools import partialmethod, total_ordering\n \n from django import forms\n@@ -31,7 +32,6 @@\n from django.utils.duration import duration_microseconds, duration_string\n from django.utils.functional import Promise, cached_property\n from django.utils.ipv6 import clean_ipv6_address\n-from django.utils.itercompat import is_iterable\n from django.utils.text import capfirst\n from django.utils.translation import gettext_lazy as _\n \n@@ -317,13 +317,13 @@ def _check_field_name(self):\n \n     @classmethod\n     def _choices_is_value(cls, value):\n-        return isinstance(value, (str, Promise)) or not is_iterable(value)\n+        return isinstance(value, (str, Promise)) or not isinstance(value, Iterable)\n \n     def _check_choices(self):\n         if not self.choices:\n             return []\n \n-        if not is_iterable(self.choices) or isinstance(self.choices, str):\n+        if not isinstance(self.choices, Iterable) or isinstance(self.choices, str):\n             return [\n                 checks.Error(\n                     \"'choices' must be a mapping (e.g. a dictionary) or an iterable \"\ndiff --git a/django/template/defaulttags.py b/django/template/defaulttags.py\nindex 188bdf8c05ab..40c2917f561e 100644\n--- a/django/template/defaulttags.py\n+++ b/django/template/defaulttags.py\n@@ -3,6 +3,7 @@\n import sys\n import warnings\n from collections import namedtuple\n+from collections.abc import Iterable\n from datetime import datetime\n from itertools import cycle as itertools_cycle\n from itertools import groupby\n@@ -10,7 +11,6 @@\n from django.conf import settings\n from django.utils import timezone\n from django.utils.html import conditional_escape, escape, format_html\n-from django.utils.itercompat import is_iterable\n from django.utils.lorem_ipsum import paragraphs, words\n from django.utils.safestring import mark_safe\n \n@@ -1198,7 +1198,7 @@ def query_string(context, query_dict=None, **kwargs):\n         if value is None:\n             if key in query_dict:\n                 del query_dict[key]\n-        elif is_iterable(value) and not isinstance(value, str):\n+        elif isinstance(value, Iterable) and not isinstance(value, str):\n             query_dict.setlist(key, value)\n         else:\n             query_dict[key] = value\ndiff --git a/django/template/library.py b/django/template/library.py\nindex 16db79e4cd88..4ee96cea893f 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -1,9 +1,9 @@\n+from collections.abc import Iterable\n from functools import wraps\n from importlib import import_module\n from inspect import getfullargspec, unwrap\n \n from django.utils.html import conditional_escape\n-from django.utils.itercompat import is_iterable\n \n from .base import Node, Template, token_kwargs\n from .exceptions import TemplateSyntaxError\n@@ -263,7 +263,9 @@ def render(self, context):\n                 t = self.filename\n             elif isinstance(getattr(self.filename, \"template\", None), Template):\n                 t = self.filename.template\n-            elif not isinstance(self.filename, str) and is_iterable(self.filename):\n+            elif not isinstance(self.filename, str) and isinstance(\n+                self.filename, Iterable\n+            ):\n                 t = context.template.engine.select_template(self.filename)\n             else:\n                 t = context.template.engine.get_template(self.filename)\ndiff --git a/django/utils/hashable.py b/django/utils/hashable.py\nindex 042e1a4373b7..323dfe74e723 100644\n--- a/django/utils/hashable.py\n+++ b/django/utils/hashable.py\n@@ -1,4 +1,4 @@\n-from django.utils.itercompat import is_iterable\n+from collections.abc import Iterable\n \n \n def make_hashable(value):\n@@ -19,7 +19,7 @@ def make_hashable(value):\n     try:\n         hash(value)\n     except TypeError:\n-        if is_iterable(value):\n+        if isinstance(value, Iterable):\n             return tuple(map(make_hashable, value))\n         # Non-hashable, non-iterable.\n         raise\ndiff --git a/django/utils/itercompat.py b/django/utils/itercompat.py\nindex 9895e3f81657..e4b34cd5342b 100644\n--- a/django/utils/itercompat.py\n+++ b/django/utils/itercompat.py\n@@ -1,5 +1,18 @@\n+# RemovedInDjango60Warning: Remove this entire module.\n+\n+import warnings\n+\n+from django.utils.deprecation import RemovedInDjango60Warning\n+\n+\n def is_iterable(x):\n     \"An implementation independent way of checking for iterables\"\n+    warnings.warn(\n+        \"django.utils.itercompat.is_iterable() is deprecated. \"\n+        \"Use isinstance(..., collections.abc.Iterable) instead.\",\n+        RemovedInDjango60Warning,\n+        stacklevel=2,\n+    )\n     try:\n         iter(x)\n     except TypeError:\ndiff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt\nindex a2968ab625f3..dd6712e936c8 100644\n--- a/docs/internals/deprecation.txt\n+++ b/docs/internals/deprecation.txt\n@@ -59,6 +59,9 @@ details on these changes.\n * The ``ModelAdmin.log_deletion()`` and ``LogEntryManager.log_action()``\n   methods will be removed.\n \n+* The undocumented ``django.utils.itercompat.is_iterable()`` function and the\n+  ``django.utils.itercompat`` module will be removed.\n+\n .. _deprecation-removed-in-5.1:\n \n 5.1\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex dc48321f5cc8..4c95e4677f68 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -303,6 +303,10 @@ Miscellaneous\n   ``ModelAdmin.log_deletions()`` and  ``LogEntryManager.log_actions()``\n   instead.\n \n+* The undocumented ``django.utils.itercompat.is_iterable()`` function and the\n+  ``django.utils.itercompat`` module are deprecated. Use\n+  ``isinstance(..., collections.abc.Iterable)`` instead.\n+\n Features removed in 5.1\n =======================\n \n", "test_patch": "diff --git a/django/test/client.py b/django/test/client.py\nindex 48e058870283..d1fd428ea8cc 100644\n--- a/django/test/client.py\n+++ b/django/test/client.py\n@@ -2,6 +2,7 @@\n import mimetypes\n import os\n import sys\n+from collections.abc import Iterable\n from copy import copy\n from functools import partial\n from http import HTTPStatus\n@@ -25,7 +26,6 @@\n from django.utils.encoding import force_bytes\n from django.utils.functional import SimpleLazyObject\n from django.utils.http import urlencode\n-from django.utils.itercompat import is_iterable\n from django.utils.regex_helper import _lazy_re_compile\n \n __all__ = (\n@@ -303,7 +303,7 @@ def is_file(thing):\n             )\n         elif is_file(value):\n             lines.extend(encode_file(boundary, key, value))\n-        elif not isinstance(value, str) and is_iterable(value):\n+        elif not isinstance(value, str) and isinstance(value, Iterable):\n             for item in value:\n                 if is_file(item):\n                     lines.extend(encode_file(boundary, key, item))\ndiff --git a/tests/utils_tests/test_itercompat.py b/tests/utils_tests/test_itercompat.py\nnew file mode 100644\nindex 000000000000..e6ea278ab402\n--- /dev/null\n+++ b/tests/utils_tests/test_itercompat.py\n@@ -0,0 +1,15 @@\n+# RemovedInDjango60Warning: Remove this entire module.\n+\n+from django.test import SimpleTestCase\n+from django.utils.deprecation import RemovedInDjango60Warning\n+from django.utils.itercompat import is_iterable\n+\n+\n+class TestIterCompat(SimpleTestCase):\n+    def test_is_iterable_deprecation(self):\n+        msg = (\n+            \"django.utils.itercompat.is_iterable() is deprecated. \"\n+            \"Use isinstance(..., collections.abc.Iterable) instead.\"\n+        )\n+        with self.assertWarnsMessage(RemovedInDjango60Warning, msg):\n+            is_iterable([])\n", "problem_statement": "Deprecate django.utils.itercompat.is_iterable().\nDescription\n\t \nWhile reviewing the \u200bPR for #10941, I saw that we are still using the django.utils.itercompat.is_iterable() helper function.\nIt seems that this was originally added in ad077ccbc03f11c3db3951aab110ec98c5907729 to fix #5445 back in 2007. This was required because Jython 2.2 didn't have support for __iter__(). Django's support for Jython was removed in 2017 in #28954.\nAs pointed out in \u200bthis comment, is_iterable() also handles the older fallback to determining if something is iterable by the presence of __getitem__() as mentioned in Python's \u200bdocumentation:\nChecking isinstance(obj, Iterable) detects classes that are registered as Iterable or that have an __iter__() method, but it does not detect classes that iterate with the __getitem__() method. The only reliable way to determine whether an object is iterable is to call iter(obj).\nIn practice, however, it is rare that iterables do not support __iter__() and, for all uses of this internal function, it doesn't seem to be necessary.\nI propose that we replace this function with the more standard isinstance(..., collections.abc.Iterable) and deprecate it. (Although the function is private and undocumented, it is likely used in the wild and other past functions from this module have been through a deprecation process.)\n", "hints_text": [["\u200bPR", 1700544135.0], ["Thanks for the ticket. Have you checked how it looks like for PyPy? I'm afraid removing it will make things worse for PyPy. For example ChoiceIterators don't use is_iterable() and they seem to be broken on PyPy: ./runtests.py model_fields .... django.core.management.base.SystemCheckError: SystemCheckError: System check identified some issues: ERRORS: model_fields.Choiceful.choices_from_callable: (fields.E004) 'choices' must be a mapping (e.g. a dictionary) or an iterable (e.g. a list or tuple). model_fields.Choiceful.with_choices_dict: (fields.E005) 'choices' must be a mapping of actual values to human readable names or an iterable containing (actual value, human readable name) tuples. model_fields.Choiceful.with_choices_nested_dict: (fields.E005) 'choices' must be a mapping of actual values to human readable names or an iterable containing (actual value, human readable name) tuples. model_fields.Whiz.c: (fields.E005) 'choices' must be a mapping of actual values to human readable names or an iterable containing (actual value, human readable name) tuples. model_fields.WhizDelayed.c: (fields.E005) 'choices' must be a mapping of actual values to human readable names or an iterable containing (actual value, human readable name) tuples. model_fields.WhizIter.c: (fields.E005) 'choices' must be a mapping of actual values to human readable names or an iterable containing (actual value, human readable name) tuples. System check identified 6 issues (0 silenced).", 1700545623.0], ["I'll dig into the issues around the choices stuff some more, but in the general simple case it seems like it should be fine: \u276f pypy3 Python 3.10.13 (f1607341da97ff5a1e93430b6e8c4af0ad1aa019, Oct 02 2023, 19:25:21) [PyPy 7.3.13 with GCC 13.2.1 20230801] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>> from collections.abc import Iterable >>>> class A: .... def __iter__(self): .... pass .... >>>> isinstance(A(), Iterable) True >>>>", 1700546705.0], ["It seems that 500e01073adda32d5149624ee9a5cb7aa3d3583f introduces a big regression on PyPy, e.g. before we had 3 failures in forms_tests, after failures=13, errors=32, before we had no failures in model_fields, after system check identifies issues, etc.", 1700548679.0], ["Replying to Mariusz Felisiak: It seems that 500e01073adda32d5149624ee9a5cb7aa3d3583f introduces a big regression on PyPy, e.g. While doing the review for that PR, I did check PyPy compatibility. Is that something we should be doing? Thanks!", 1700551004.0], ["So 3.10 support in PyPy is still quite new - less than 6 months old. It looks like we've found a bug for which I've opened an issue: \u200bhttps://foss.heptapod.net/pypy/pypy/-/issues/4036 That is not related to this ticket, however - what we're looking at here seems to work fine.", 1700552740.0]], "created_at": "2023-11-21T11:21:57Z"}
{"repo": "django/django", "pull_number": 17494, "instance_id": "django__django-17494", "issue_numbers": ["34980"], "base_commit": "00a950f923435188a6c1d4ccdcb42c37cdc3976a", "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex a823b0373847..6b01403d18af 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1,6 +1,7 @@\n import functools\n import re\n-from collections import defaultdict\n+from collections import defaultdict, namedtuple\n+from enum import Enum\n from graphlib import TopologicalSorter\n from itertools import chain\n \n@@ -16,6 +17,26 @@\n     RegexObject,\n     resolve_relation,\n )\n+from django.utils.functional import cached_property\n+\n+\n+class OperationDependency(\n+    namedtuple(\"OperationDependency\", \"app_label model_name field_name type\")\n+):\n+    class Type(Enum):\n+        CREATE = 0\n+        REMOVE = 1\n+        ALTER = 2\n+        REMOVE_ORDER_WRT = 3\n+        ALTER_FOO_TOGETHER = 4\n+\n+    @cached_property\n+    def model_name_lower(self):\n+        return self.model_name.lower()\n+\n+    @cached_property\n+    def field_name_lower(self):\n+        return self.field_name.lower()\n \n \n class MigrationAutodetector:\n@@ -255,12 +276,20 @@ def _resolve_dependency(dependency):\n         Return the resolved dependency and a boolean denoting whether or not\n         it was swappable.\n         \"\"\"\n-        if dependency[0] != \"__setting__\":\n+        if dependency.app_label != \"__setting__\":\n             return dependency, False\n         resolved_app_label, resolved_object_name = getattr(\n-            settings, dependency[1]\n+            settings, dependency.model_name\n         ).split(\".\")\n-        return (resolved_app_label, resolved_object_name.lower()) + dependency[2:], True\n+        return (\n+            OperationDependency(\n+                resolved_app_label,\n+                resolved_object_name.lower(),\n+                dependency.field_name,\n+                dependency.type,\n+            ),\n+            True,\n+        )\n \n     def _build_migration_list(self, graph=None):\n         \"\"\"\n@@ -296,11 +325,11 @@ def _build_migration_list(self, graph=None):\n                         # swappable dependencies.\n                         original_dep = dep\n                         dep, is_swappable_dep = self._resolve_dependency(dep)\n-                        if dep[0] != app_label:\n+                        if dep.app_label != app_label:\n                             # External app dependency. See if it's not yet\n                             # satisfied.\n                             for other_operation in self.generated_operations.get(\n-                                dep[0], []\n+                                dep.app_label, []\n                             ):\n                                 if self.check_dependency(other_operation, dep):\n                                     deps_satisfied = False\n@@ -310,11 +339,17 @@ def _build_migration_list(self, graph=None):\n                             else:\n                                 if is_swappable_dep:\n                                     operation_dependencies.add(\n-                                        (original_dep[0], original_dep[1])\n+                                        (\n+                                            original_dep.app_label,\n+                                            original_dep.model_name,\n+                                        )\n                                     )\n-                                elif dep[0] in self.migrations:\n+                                elif dep.app_label in self.migrations:\n                                     operation_dependencies.add(\n-                                        (dep[0], self.migrations[dep[0]][-1].name)\n+                                        (\n+                                            dep.app_label,\n+                                            self.migrations[dep.app_label][-1].name,\n+                                        )\n                                     )\n                                 else:\n                                     # If we can't find the other app, we add a\n@@ -328,13 +363,13 @@ def _build_migration_list(self, graph=None):\n                                         # contains the target field. If it's\n                                         # not yet migrated or has no\n                                         # migrations, we use __first__.\n-                                        if graph and graph.leaf_nodes(dep[0]):\n+                                        if graph and graph.leaf_nodes(dep.app_label):\n                                             operation_dependencies.add(\n-                                                graph.leaf_nodes(dep[0])[0]\n+                                                graph.leaf_nodes(dep.app_label)[0]\n                                             )\n                                         else:\n                                             operation_dependencies.add(\n-                                                (dep[0], \"__first__\")\n+                                                (dep.app_label, \"__first__\")\n                                             )\n                                     else:\n                                         deps_satisfied = False\n@@ -389,7 +424,7 @@ def _sort_migrations(self):\n                     # Resolve intra-app dependencies to handle circular\n                     # references involving a swappable model.\n                     dep = self._resolve_dependency(dep)[0]\n-                    if dep[0] != app_label:\n+                    if dep.app_label != app_label:\n                         continue\n                     ts.add(op, *(x for x in ops if self.check_dependency(x, dep)))\n             self.generated_operations[app_label] = list(ts.static_order())\n@@ -418,58 +453,79 @@ def check_dependency(self, operation, dependency):\n         False otherwise.\n         \"\"\"\n         # Created model\n-        if dependency[2] is None and dependency[3] is True:\n+        if (\n+            dependency.field_name is None\n+            and dependency.type == OperationDependency.Type.CREATE\n+        ):\n             return (\n                 isinstance(operation, operations.CreateModel)\n-                and operation.name_lower == dependency[1].lower()\n+                and operation.name_lower == dependency.model_name_lower\n             )\n         # Created field\n-        elif dependency[2] is not None and dependency[3] is True:\n+        elif (\n+            dependency.field_name is not None\n+            and dependency.type == OperationDependency.Type.CREATE\n+        ):\n             return (\n                 isinstance(operation, operations.CreateModel)\n-                and operation.name_lower == dependency[1].lower()\n-                and any(dependency[2] == x for x, y in operation.fields)\n+                and operation.name_lower == dependency.model_name_lower\n+                and any(dependency.field_name == x for x, y in operation.fields)\n             ) or (\n                 isinstance(operation, operations.AddField)\n-                and operation.model_name_lower == dependency[1].lower()\n-                and operation.name_lower == dependency[2].lower()\n+                and operation.model_name_lower == dependency.model_name_lower\n+                and operation.name_lower == dependency.field_name_lower\n             )\n         # Removed field\n-        elif dependency[2] is not None and dependency[3] is False:\n+        elif (\n+            dependency.field_name is not None\n+            and dependency.type == OperationDependency.Type.REMOVE\n+        ):\n             return (\n                 isinstance(operation, operations.RemoveField)\n-                and operation.model_name_lower == dependency[1].lower()\n-                and operation.name_lower == dependency[2].lower()\n+                and operation.model_name_lower == dependency.model_name_lower\n+                and operation.name_lower == dependency.field_name_lower\n             )\n         # Removed model\n-        elif dependency[2] is None and dependency[3] is False:\n+        elif (\n+            dependency.field_name is None\n+            and dependency.type == OperationDependency.Type.REMOVE\n+        ):\n             return (\n                 isinstance(operation, operations.DeleteModel)\n-                and operation.name_lower == dependency[1].lower()\n+                and operation.name_lower == dependency.model_name_lower\n             )\n         # Field being altered\n-        elif dependency[2] is not None and dependency[3] == \"alter\":\n+        elif (\n+            dependency.field_name is not None\n+            and dependency.type == OperationDependency.Type.ALTER\n+        ):\n             return (\n                 isinstance(operation, operations.AlterField)\n-                and operation.model_name_lower == dependency[1].lower()\n-                and operation.name_lower == dependency[2].lower()\n+                and operation.model_name_lower == dependency.model_name_lower\n+                and operation.name_lower == dependency.field_name_lower\n             )\n         # order_with_respect_to being unset for a field\n-        elif dependency[2] is not None and dependency[3] == \"order_wrt_unset\":\n+        elif (\n+            dependency.field_name is not None\n+            and dependency.type == OperationDependency.Type.REMOVE_ORDER_WRT\n+        ):\n             return (\n                 isinstance(operation, operations.AlterOrderWithRespectTo)\n-                and operation.name_lower == dependency[1].lower()\n+                and operation.name_lower == dependency.model_name_lower\n                 and (operation.order_with_respect_to or \"\").lower()\n-                != dependency[2].lower()\n+                != dependency.field_name_lower\n             )\n         # Field is removed and part of an index/unique_together\n-        elif dependency[2] is not None and dependency[3] == \"foo_together_change\":\n+        elif (\n+            dependency.field_name is not None\n+            and dependency.type == OperationDependency.Type.ALTER_FOO_TOGETHER\n+        ):\n             return (\n                 isinstance(\n                     operation,\n                     (operations.AlterUniqueTogether, operations.AlterIndexTogether),\n                 )\n-                and operation.name_lower == dependency[1].lower()\n+                and operation.name_lower == dependency.model_name_lower\n             )\n         # Unknown dependency. Raise an error.\n         else:\n@@ -615,13 +671,22 @@ def generate_created_models(self):\n             )\n             # Depend on the deletion of any possible proxy version of us\n             dependencies = [\n-                (app_label, model_name, None, False),\n+                OperationDependency(\n+                    app_label, model_name, None, OperationDependency.Type.REMOVE\n+                ),\n             ]\n             # Depend on all bases\n             for base in model_state.bases:\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n-                    dependencies.append((base_app_label, base_name, None, True))\n+                    dependencies.append(\n+                        OperationDependency(\n+                            base_app_label,\n+                            base_name,\n+                            None,\n+                            OperationDependency.Type.CREATE,\n+                        )\n+                    )\n                     # Depend on the removal of base fields if the new model has\n                     # a field with the same name.\n                     old_base_model_state = self.from_state.models.get(\n@@ -640,17 +705,21 @@ def generate_created_models(self):\n                         )\n                         for removed_base_field in removed_base_fields:\n                             dependencies.append(\n-                                (base_app_label, base_name, removed_base_field, False)\n+                                OperationDependency(\n+                                    base_app_label,\n+                                    base_name,\n+                                    removed_base_field,\n+                                    OperationDependency.Type.REMOVE,\n+                                )\n                             )\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append(\n-                    resolve_relation(\n-                        primary_key_rel,\n-                        app_label,\n-                        model_name,\n-                    )\n-                    + (None, True)\n+                    OperationDependency(\n+                        *resolve_relation(primary_key_rel, app_label, model_name),\n+                        None,\n+                        OperationDependency.Type.CREATE,\n+                    ),\n                 )\n             # Generate creation operation\n             self.add_operation(\n@@ -683,7 +752,11 @@ def generate_created_models(self):\n                     self.to_state,\n                 )\n                 # Depend on our own model being created\n-                dependencies.append((app_label, model_name, None, True))\n+                dependencies.append(\n+                    OperationDependency(\n+                        app_label, model_name, None, OperationDependency.Type.CREATE\n+                    )\n+                )\n                 # Make operation\n                 self.add_operation(\n                     app_label,\n@@ -703,14 +776,28 @@ def generate_created_models(self):\n                         order_with_respect_to=order_with_respect_to,\n                     ),\n                     dependencies=[\n-                        (app_label, model_name, order_with_respect_to, True),\n-                        (app_label, model_name, None, True),\n+                        OperationDependency(\n+                            app_label,\n+                            model_name,\n+                            order_with_respect_to,\n+                            OperationDependency.Type.CREATE,\n+                        ),\n+                        OperationDependency(\n+                            app_label, model_name, None, OperationDependency.Type.CREATE\n+                        ),\n                     ],\n                 )\n             related_dependencies = [\n-                (app_label, model_name, name, True) for name in sorted(related_fields)\n+                OperationDependency(\n+                    app_label, model_name, name, OperationDependency.Type.CREATE\n+                )\n+                for name in sorted(related_fields)\n             ]\n-            related_dependencies.append((app_label, model_name, None, True))\n+            related_dependencies.append(\n+                OperationDependency(\n+                    app_label, model_name, None, OperationDependency.Type.CREATE\n+                )\n+            )\n             for index in indexes:\n                 self.add_operation(\n                     app_label,\n@@ -754,7 +841,14 @@ def generate_created_models(self):\n                                 name=related_field_name,\n                                 field=related_field,\n                             ),\n-                            dependencies=[(app_label, model_name, None, True)],\n+                            dependencies=[\n+                                OperationDependency(\n+                                    app_label,\n+                                    model_name,\n+                                    None,\n+                                    OperationDependency.Type.CREATE,\n+                                )\n+                            ],\n                         )\n \n     def generate_created_proxies(self):\n@@ -769,13 +863,22 @@ def generate_created_proxies(self):\n             assert model_state.options.get(\"proxy\")\n             # Depend on the deletion of any possible non-proxy version of us\n             dependencies = [\n-                (app_label, model_name, None, False),\n+                OperationDependency(\n+                    app_label, model_name, None, OperationDependency.Type.REMOVE\n+                ),\n             ]\n             # Depend on all bases\n             for base in model_state.bases:\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n-                    dependencies.append((base_app_label, base_name, None, True))\n+                    dependencies.append(\n+                        OperationDependency(\n+                            base_app_label,\n+                            base_name,\n+                            None,\n+                            OperationDependency.Type.CREATE,\n+                        )\n+                    )\n             # Generate creation operation\n             self.add_operation(\n                 app_label,\n@@ -847,25 +950,34 @@ def generate_deleted_models(self):\n             ), relation_related_fields in relations[app_label, model_name].items():\n                 for field_name, field in relation_related_fields.items():\n                     dependencies.append(\n-                        (related_object_app_label, object_name, field_name, False),\n+                        OperationDependency(\n+                            related_object_app_label,\n+                            object_name,\n+                            field_name,\n+                            OperationDependency.Type.REMOVE,\n+                        ),\n                     )\n                     if not field.many_to_many:\n                         dependencies.append(\n-                            (\n+                            OperationDependency(\n                                 related_object_app_label,\n                                 object_name,\n                                 field_name,\n-                                \"alter\",\n+                                OperationDependency.Type.ALTER,\n                             ),\n                         )\n \n             for name in sorted(related_fields):\n-                dependencies.append((app_label, model_name, name, False))\n+                dependencies.append(\n+                    OperationDependency(\n+                        app_label, model_name, name, OperationDependency.Type.REMOVE\n+                    )\n+                )\n             # We're referenced in another field's through=\n             through_user = self.through_users.get((app_label, model_state.name_lower))\n             if through_user:\n                 dependencies.append(\n-                    (through_user[0], through_user[1], through_user[2], False)\n+                    OperationDependency(*through_user, OperationDependency.Type.REMOVE),\n                 )\n             # Finally, make the operation, deduping any dependencies\n             self.add_operation(\n@@ -998,7 +1110,11 @@ def generate_added_fields(self):\n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.to_state.models[app_label, model_name].get_field(field_name)\n         # Adding a field always depends at least on its removal.\n-        dependencies = [(app_label, model_name, field_name, False)]\n+        dependencies = [\n+            OperationDependency(\n+                app_label, model_name, field_name, OperationDependency.Type.REMOVE\n+            )\n+        ]\n         # Fields that are foreignkeys/m2ms depend on stuff.\n         if field.remote_field and field.remote_field.model:\n             dependencies.extend(\n@@ -1065,8 +1181,18 @@ def _generate_removed_field(self, app_label, model_name, field_name):\n             # order_with_respect_to or index/unique_together operation;\n             # this is safely ignored if there isn't one\n             dependencies=[\n-                (app_label, model_name, field_name, \"order_wrt_unset\"),\n-                (app_label, model_name, field_name, \"foo_together_change\"),\n+                OperationDependency(\n+                    app_label,\n+                    model_name,\n+                    field_name,\n+                    OperationDependency.Type.REMOVE_ORDER_WRT,\n+                ),\n+                OperationDependency(\n+                    app_label,\n+                    model_name,\n+                    field_name,\n+                    OperationDependency.Type.ALTER_FOO_TOGETHER,\n+                ),\n             ],\n         )\n \n@@ -1399,14 +1525,25 @@ def _get_dependencies_for_foreign_key(app_label, model_name, field, project_stat\n                 app_label,\n                 model_name,\n             )\n-        dependencies = [(dep_app_label, dep_object_name, None, True)]\n+        dependencies = [\n+            OperationDependency(\n+                dep_app_label, dep_object_name, None, OperationDependency.Type.CREATE\n+            )\n+        ]\n         if getattr(field.remote_field, \"through\", None):\n             through_app_label, through_object_name = resolve_relation(\n                 field.remote_field.through,\n                 app_label,\n                 model_name,\n             )\n-            dependencies.append((through_app_label, through_object_name, None, True))\n+            dependencies.append(\n+                OperationDependency(\n+                    through_app_label,\n+                    through_object_name,\n+                    None,\n+                    OperationDependency.Type.CREATE,\n+                )\n+            )\n         return dependencies\n \n     def _get_dependencies_for_model(self, app_label, model_name):\n@@ -1617,11 +1754,11 @@ def generate_altered_order_with_respect_to(self):\n                 dependencies = []\n                 if new_model_state.options.get(\"order_with_respect_to\"):\n                     dependencies.append(\n-                        (\n+                        OperationDependency(\n                             app_label,\n                             model_name,\n                             new_model_state.options[\"order_with_respect_to\"],\n-                            True,\n+                            OperationDependency.Type.CREATE,\n                         )\n                     )\n                 # Actually generate the operation\n", "test_patch": "", "problem_statement": "Change migration operation dependencies to namedtuples.\nDescription\n\t \nUsing namedtuples and Enums should make the migration autodetector more readable and maintainable.\n", "hints_text": [], "created_at": "2023-11-20T09:41:50Z"}
{"repo": "django/django", "pull_number": 17489, "instance_id": "django__django-17489", "issue_numbers": ["34977"], "base_commit": "d658a3162fbeb68d148d1b2fcf4da4fe1437eddb", "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 5f71f032581e..ab46caa12ecd 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -36,10 +36,9 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n \n     def get_context(self, name, value, attrs):\n         context = super().get_context(name, value, attrs)\n+        usable_password = value and not value.startswith(UNUSABLE_PASSWORD_PREFIX)\n         summary = []\n-        if not value or value.startswith(UNUSABLE_PASSWORD_PREFIX):\n-            summary.append({\"label\": gettext(\"No password set.\")})\n-        else:\n+        if usable_password:\n             try:\n                 hasher = identify_hasher(value)\n             except ValueError:\n@@ -53,7 +52,12 @@ def get_context(self, name, value, attrs):\n             else:\n                 for key, value_ in hasher.safe_summary(value).items():\n                     summary.append({\"label\": gettext(key), \"value\": value_})\n+        else:\n+            summary.append({\"label\": gettext(\"No password set.\")})\n         context[\"summary\"] = summary\n+        context[\"button_label\"] = (\n+            _(\"Reset password\") if usable_password else _(\"Set password\")\n+        )\n         return context\n \n     def id_for_label(self, id_):\n@@ -253,9 +257,8 @@ class UserChangeForm(forms.ModelForm):\n     password = ReadOnlyPasswordHashField(\n         label=_(\"Password\"),\n         help_text=_(\n-            \"Raw passwords are not stored, so there is no way to see this \"\n-            \"user\u2019s password, but you can change or unset the password using \"\n-            '<a href=\"{}\">this form</a>.'\n+            \"Raw passwords are not stored, so there is no way to see \"\n+            \"the user\u2019s password.\"\n         ),\n     )\n \n@@ -271,11 +274,8 @@ def __init__(self, *args, **kwargs):\n             if self.instance and not self.instance.has_usable_password():\n                 password.help_text = _(\n                     \"Enable password-based authentication for this user by setting a \"\n-                    'password using <a href=\"{}\">this form</a>.'\n+                    \"password.\"\n                 )\n-            password.help_text = password.help_text.format(\n-                f\"../../{self.instance.pk}/password/\"\n-            )\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\ndiff --git a/django/contrib/auth/templates/auth/widgets/read_only_password_hash.html b/django/contrib/auth/templates/auth/widgets/read_only_password_hash.html\nindex c73042b18f94..e95fa3e9dab8 100644\n--- a/django/contrib/auth/templates/auth/widgets/read_only_password_hash.html\n+++ b/django/contrib/auth/templates/auth/widgets/read_only_password_hash.html\n@@ -1,5 +1,8 @@\n <div{% include 'django/forms/widgets/attrs.html' %}>\n-{% for entry in summary %}\n-<strong>{{ entry.label }}</strong>{% if entry.value %}: <bdi>{{ entry.value }}</bdi>{% endif %}\n-{% endfor %}\n+  <p>\n+    {% for entry in summary %}\n+    <strong>{{ entry.label }}</strong>{% if entry.value %}: <bdi>{{ entry.value }}</bdi>{% endif %}\n+    {% endfor %}\n+  </p>\n+  <p><a class=\"button\" href=\"{{ password_url|default:\"../password/\" }}\">{{ button_label }}</a></p>\n </div>\ndiff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex fbb05d754873..a07f8942a5aa 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -57,6 +57,12 @@ Minor features\n   :func:`~.django.contrib.auth.decorators.user_passes_test` decorators now\n   support wrapping asynchronous view functions.\n \n+* ``ReadOnlyPasswordHashWidget`` now includes a button to reset the user's\n+  password, which replaces the link previously embedded in the\n+  ``ReadOnlyPasswordHashField``'s help text, improving the overall\n+  accessibility of the\n+  :class:`~django.contrib.auth.forms.UserChangeForm`.\n+\n :mod:`django.contrib.contenttypes`\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n", "test_patch": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 373a9819559d..b44f1edb242b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1023,34 +1023,42 @@ def test_bug_19349_bound_password_field(self):\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n     @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n-    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+    def test_link_to_password_reset_in_user_change_form(self):\n         cases = [\n             (\n                 \"testclient\",\n-                'you can change or unset the password using <a href=\"(.*?)\">',\n+                \"Raw passwords are not stored, so there is no way to see \"\n+                \"the user\u2019s password.\",\n+                \"Reset password\",\n             ),\n             (\n                 \"unusable_password\",\n-                \"Enable password-based authentication for this user by setting \"\n-                'a password using <a href=\"(.*?)\">this form</a>.',\n+                \"Enable password-based authentication for this user by setting a \"\n+                \"password.\",\n+                \"Set password\",\n             ),\n         ]\n-        for username, expected_help_text in cases:\n+        password_reset_link = r'<a class=\"button\" href=\"([^\"]*)\">([^<]*)</a>'\n+        for username, expected_help_text, expected_button_label in cases:\n             with self.subTest(username=username):\n                 user = User.objects.get(username=username)\n                 form = UserChangeForm(data={}, instance=user)\n                 password_help_text = form.fields[\"password\"].help_text\n-                matches = re.search(expected_help_text, password_help_text)\n+                self.assertEqual(password_help_text, expected_help_text)\n \n+                matches = re.search(password_reset_link, form.as_p())\n+                self.assertIsNotNone(matches)\n+                self.assertEqual(len(matches.groups()), 2)\n                 url_prefix = f\"admin:{user._meta.app_label}_{user._meta.model_name}\"\n                 # URL to UserChangeForm in admin via to_field (instead of pk).\n-                user_change_url = reverse(f\"{url_prefix}_change\", args=(user.username,))\n+                user_change_url = reverse(f\"{url_prefix}_change\", args=(user.pk,))\n                 joined_url = urllib.parse.urljoin(user_change_url, matches.group(1))\n \n                 pw_change_url = reverse(\n                     f\"{url_prefix}_password_change\", args=(user.pk,)\n                 )\n                 self.assertEqual(joined_url, pw_change_url)\n+                self.assertEqual(matches.group(2), expected_button_label)\n \n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n@@ -1345,11 +1353,14 @@ def test_render(self):\n         self.assertHTMLEqual(\n             widget.render(\"name\", value, {\"id\": \"id_password\"}),\n             '<div id=\"id_password\">'\n+            \"  <p>\"\n             \"    <strong>algorithm</strong>: <bdi>pbkdf2_sha256</bdi>\"\n             \"    <strong>iterations</strong>: <bdi>100000</bdi>\"\n             \"    <strong>salt</strong>: <bdi>a6Pucb******</bdi>\"\n             \"    <strong>hash</strong>: \"\n             \"       <bdi>WmCkn9**************************************</bdi>\"\n+            \"  </p>\"\n+            '  <p><a class=\"button\" href=\"../password/\">Reset password</a></p>'\n             \"</div>\",\n         )\n \ndiff --git a/tests/auth_tests/test_views.py b/tests/auth_tests/test_views.py\nindex d6bf6fbf528b..53e33785b077 100644\n--- a/tests/auth_tests/test_views.py\n+++ b/tests/auth_tests/test_views.py\n@@ -1442,7 +1442,7 @@ def test_user_with_usable_password_change_password(self):\n         response = self.client.get(user_change_url)\n         # Test the link inside password field help_text.\n         rel_link = re.search(\n-            r'change or unset the password using <a href=\"([^\"]*)\">this form</a>',\n+            r'<a class=\"button\" href=\"([^\"]*)\">Reset password</a>',\n             response.content.decode(),\n         )[1]\n         self.assertEqual(urljoin(user_change_url, rel_link), password_change_url)\n@@ -1538,7 +1538,7 @@ def test_user_with_unusable_password_change_password(self):\n         response = self.client.get(user_change_url)\n         # Test the link inside password field help_text.\n         rel_link = re.search(\n-            r'by setting a password using <a href=\"([^\"]*)\">this form</a>',\n+            r'<a class=\"button\" href=\"([^\"]*)\">Set password</a>',\n             response.content.decode(),\n         )[1]\n         self.assertEqual(urljoin(user_change_url, rel_link), password_change_url)\n", "problem_statement": "Turn link to change password form in admin user change form into a button\nDescription\n\t\t\n(last modified by Fabian Braun)\t\t\nCurrently, to change a user's password the admin user must got to the change user form, find the password field and click a link in its help text.\nFor better user guidance and accessibility, I suggest turning this link into a button:\nAs David Smith pointed out, links in help texts are not read by screen readers:\n\"Do not include links within hint text. While screen readers will read out the link text when describing the field, they will not tell users that the text is a link.\" (\u200bhttps://design-system.service.gov.uk/components/text-input/#hint-text).\nI'll be happy to provide a patch.\n", "hints_text": [["Current link to change password form", 1700378741.0], ["Potential new change or (in this case) set password button.", 1700378864.0], ["I added some review comments proposing a slightly different approach: instead of having either a link or a button *in* the help text, I would like that we separate the help text legend from the \"convenience shortcut\" to hint the admin user where they can act regarding the password. I'd like the accessibility team's input, I attached a possible diff to the \u200blinked PR.", 1704721675.0], ["I would like to work on this issue :)", 1706165060.0], ["Replying to Abhii67534: I would like to work on this issue :) Thank you for your interest in helping, but there is already a submitted PR solving this issue, we are just waiting on some specific feedback.", 1706165456.0], ["Setting as patch needs improvement until conflicts are solved and the PR is reviewable again.", 1709812759.0]], "created_at": "2023-11-19T13:52:12Z"}
{"repo": "django/django", "pull_number": 17487, "instance_id": "django__django-17487", "issue_numbers": ["34975"], "base_commit": "594873befbbec13a2d9a048a361757dd3cf178da", "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3a0c75ebf2c6..74ae9cab8e54 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -417,6 +417,8 @@ def replace_expressions(self, replacements):\n     def get_refs(self):\n         refs = set()\n         for expr in self.get_source_expressions():\n+            if expr is None:\n+                continue\n             refs |= expr.get_refs()\n         return refs\n \ndiff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex a562a3db386f..c0bcc1b3bf13 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -471,6 +471,14 @@ class IntegerLessThanOrEqual(IntegerFieldOverflow, LessThanOrEqual):\n class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n     lookup_name = \"in\"\n \n+    def get_refs(self):\n+        refs = super().get_refs()\n+        if self.rhs_is_direct_value():\n+            for rhs in self.rhs:\n+                if get_rhs_refs := getattr(rhs, \"get_refs\", None):\n+                    refs |= get_rhs_refs()\n+        return refs\n+\n     def get_prep_lookup(self):\n         from django.db.models.sql.query import Query  # avoid circular import\n \ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4690fd304d67..2bc16b1df351 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -451,13 +451,14 @@ def get_aggregation(self, using, aggregate_exprs):\n             # Temporarily add aggregate to annotations to allow remaining\n             # members of `aggregates` to resolve against each others.\n             self.append_annotation_mask([alias])\n+            aggregate_refs = aggregate.get_refs()\n             refs_subquery |= any(\n                 getattr(self.annotations[ref], \"contains_subquery\", False)\n-                for ref in aggregate.get_refs()\n+                for ref in aggregate_refs\n             )\n             refs_window |= any(\n                 getattr(self.annotations[ref], \"contains_over_clause\", True)\n-                for ref in aggregate.get_refs()\n+                for ref in aggregate_refs\n             )\n             aggregate = aggregate.replace_expressions(replacements)\n             self.annotations[alias] = aggregate\n@@ -1256,18 +1257,19 @@ def as_sql(self, compiler, connection):\n             sql = \"(%s)\" % sql\n         return sql, params\n \n-    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n+    def resolve_lookup_value(self, value, can_reuse, allow_joins, summarize=False):\n         if hasattr(value, \"resolve_expression\"):\n             value = value.resolve_expression(\n                 self,\n                 reuse=can_reuse,\n                 allow_joins=allow_joins,\n+                summarize=summarize,\n             )\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n             values = (\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                self.resolve_lookup_value(sub_value, can_reuse, allow_joins, summarize)\n                 for sub_value in value\n             )\n             type_ = type(value)\n@@ -1487,7 +1489,7 @@ def build_filter(\n             raise FieldError(\"Joined field references are not permitted in this query\")\n \n         pre_joins = self.alias_refcount.copy()\n-        value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n+        value = self.resolve_lookup_value(value, can_reuse, allow_joins, summarize)\n         used_joins = {\n             k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)\n         }\ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex 5804589408ce..222932436277 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -11,3 +11,7 @@ Bugfixes\n \n * Fixed a regression in Django 4.2 that caused :option:`makemigrations --check`\n   to stop displaying pending migrations (:ticket:`34457`).\n+\n+* Fixed a regression in Django 4.2 that caused a crash of\n+  ``QuerySet.aggregate()`` with aggregates referencing other aggregates or\n+  window functions through conditional expressions (:ticket:`34975`).\n", "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a073d01590f8..b01df88109a2 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -2309,3 +2309,15 @@ def test_referenced_window_requires_wrapping(self):\n             aggregate,\n             {\"sum_avg_publisher_pages\": 1100.0, \"books_count\": 2},\n         )\n+\n+    def test_aggregate_reference_lookup_rhs(self):\n+        aggregates = Author.objects.annotate(\n+            max_book_author=Max(\"book__authors\"),\n+        ).aggregate(count=Count(\"id\", filter=Q(id=F(\"max_book_author\"))))\n+        self.assertEqual(aggregates, {\"count\": 1})\n+\n+    def test_aggregate_reference_lookup_rhs_iter(self):\n+        aggregates = Author.objects.annotate(\n+            max_book_author=Max(\"book__authors\"),\n+        ).aggregate(count=Count(\"id\", filter=Q(id__in=[F(\"max_book_author\"), 0])))\n+        self.assertEqual(aggregates, {\"count\": 1})\n", "problem_statement": "aggregate() crashes when referencing existing aggregations or window expressions through conditional expressions\nDescription\n\t\t\n(last modified by Sergey Nesterenko)\t\t\nI found out that getting refs in QuerySet doesn't work with models.Window when I try to use aggregate method. It happened when I tried to update Django to 4.2.7.\nFor example:\nMyModel.objects.annotate( \n\tnew_ordering=Window(RowNumber(), order_by=[F('ordering')]) \n).aggregate( \n\tnew_count=Count('id', filter=Q(ordering=F('new_ordering')))\n)\nAnd as a result, it fails with:\nTraceback (most recent call last):\n File \"/main.py\", line 38, in <module>\n\tresult = ordering_query.aggregate(\n File \"/python3.10/site-packages/django/db/models/query.py\", line 592, in aggregate\n\treturn self.query.chain().get_aggregation(self.db, kwargs)\n File \"/python3.10/site-packages/django/db/models/sql/query.py\", line 398, in get_aggregation\n\taggregate = aggregate_expr.resolve_expression(\n File \"/python3.10/site-packages/django/db/models/aggregates.py\", line 70, in resolve_expression\n\tfor ref in c.get_refs():\n File \"/python3.10/site-packages/django/db/models/expressions.py\", line 418, in get_refs\n\trefs |= expr.get_refs()\n File \"/python3.10/site-packages/django/db/models/sql/where.py\", line 233, in get_refs\n\trefs |= child.get_refs()\n File \"/python3.10/site-packages/django/db/models/expressions.py\", line 418, in get_refs\n\trefs |= expr.get_refs()\n File \"/python3.10/site-packages/django/db/models/expressions.py\", line 418, in get_refs\n\trefs |= expr.get_refs()\nAttributeError: 'NoneType' object has no attribute 'get_refs'\nIt happens because of Window.get_source_expressions return:\ndef get_source_expressions(self): \n\treturn [self.source_expression, self.partition_by, self.order_by, self.frame]\nand if we don't specify 'frame' (for example) it will be None in the list.\nAnd in models.aggregates.Aggregate.resolve_expression when we try to find all refs \u200bhttps://github.com/django/django/blob/47f9b8dca16b1fdc054b338d81eb080eabad0edf/django/db/models/aggregates.py#L70C30-L70C30 it fails because of we have None in Window.get_source_expressions\ndef get_refs(self): \n\trefs = set() \n\tfor expr in self.get_source_expressions(): \n\t\trefs |= expr.get_refs() \n\treturn refs\n", "hints_text": [["Another instance of a crash due to mishandling of get_source_expressions() being Expression | None.", 1700223025.0], ["I'm not sure if something else will break as I don't think we have extensive testing for performing filtered aggregation over a window function but does the following patch helps diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index 3a0c75ebf2..74ae9cab8e 100644 --- a/django/db/models/expressions.py +++ b/django/db/models/expressions.py @@ -417,6 +417,8 @@ def replace_expressions(self, replacements): def get_refs(self): refs = set() for expr in self.get_source_expressions(): + if expr is None: + continue refs |= expr.get_refs() return refs", 1700223210.0], ["Replying to Simon Charette: I'm not sure if something else will break as I don't think we have extensive testing for performing filtered aggregation over a window function but does the following patch helps diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py index 3a0c75ebf2..74ae9cab8e 100644 --- a/django/db/models/expressions.py +++ b/django/db/models/expressions.py @@ -417,6 +417,8 @@ def replace_expressions(self, replacements): def get_refs(self): refs = set() for expr in self.get_source_expressions(): + if expr is None: + continue refs |= expr.get_refs() return refs I thought about it, but I wasn't sure it wouldn't break anything, but it might work.", 1700223487.0], ["I've got an idea of how to solve this, it's not clear to me if it's a regression as the underlying cause has little to do with window functions. In the mean time, can you confirm that switching the order of your lookup resolve the issue. That is doing filter=Q(new_ordering=F('ordering')) instead of filter=Q(ordering=F('new_ordering')).", 1700242035.0], ["Confirmed regression in b181cae2e3697b2e53b5b67ac67e59f3b05a6f0d, refs #25307.", 1700249384.0]], "created_at": "2023-11-18T01:46:01Z"}
{"repo": "django/django", "pull_number": 17472, "instance_id": "django__django-17472", "issue_numbers": ["34970"], "base_commit": "36ed45d27cb97fe3a41eca219ba75ff69f16b93c", "patch": "diff --git a/docs/topics/auth/passwords.txt b/docs/topics/auth/passwords.txt\nindex d0a812f39812..54a5e069d025 100644\n--- a/docs/topics/auth/passwords.txt\n+++ b/docs/topics/auth/passwords.txt\n@@ -526,8 +526,9 @@ can write your own as well.\n \n Each password validator must provide a help text to explain the requirements to\n the user, validate a given password and return an error message if it does not\n-meet the requirements, and optionally receive passwords that have been set.\n-Validators can also have optional settings to fine tune their behavior.\n+meet the requirements, and optionally define a callback to be notified when\n+the password for a user has been changed. Validators can also have optional\n+settings to fine tune their behavior.\n \n Validation is controlled by the :setting:`AUTH_PASSWORD_VALIDATORS` setting.\n The default for the setting is an empty list, which means no validators are\n", "test_patch": "", "problem_statement": "Unclear wording in password validator docs\nDescription\n\t \n\u200bThis page has the following paragraph:\nEach password validator must provide a help text to explain the requirements to the user, validate a given password and return an error message if it does not meet the requirements, and optionally receive passwords that have been set. Validators can also have optional settings to fine tune their behavior.\nIt's unclear to me what \"optionally receive passwords\" means. Is it a typo?\n", "hints_text": [["It could be a little clearer but I believe it's referring to optional extra information like a dictionary of common passwords that are blacklisted. Do you have suggestions on how to improve it? If you do you're welcome to submit a doc PR \u263a\ufe0f \ud83d\udc4d", 1699859774.0], ["Hi Markus, thanks for the ticket. I agree the wording is confusing, accepting. Would you like to propose a patch?", 1699873344.0], ["\u200bPR", 1699933539.0]], "created_at": "2023-11-14T09:44:59Z"}
{"repo": "django/django", "pull_number": 17471, "instance_id": "django__django-17471", "issue_numbers": ["34955"], "base_commit": "bdf30b952c66701075bb7cbbbd3467d3e908fe62", "patch": "diff --git a/django/db/models/functions/text.py b/django/db/models/functions/text.py\nindex 2b49f5432878..500fbea19403 100644\n--- a/django/db/models/functions/text.py\n+++ b/django/db/models/functions/text.py\n@@ -73,7 +73,7 @@ class ConcatPair(Func):\n \n     function = \"CONCAT\"\n \n-    def as_sqlite(self, compiler, connection, **extra_context):\n+    def pipes_concat_sql(self, compiler, connection, **extra_context):\n         coalesced = self.coalesce()\n         return super(ConcatPair, coalesced).as_sql(\n             compiler,\n@@ -83,19 +83,19 @@ def as_sqlite(self, compiler, connection, **extra_context):\n             **extra_context,\n         )\n \n+    as_sqlite = pipes_concat_sql\n+\n     def as_postgresql(self, compiler, connection, **extra_context):\n-        copy = self.copy()\n-        copy.set_source_expressions(\n+        c = self.copy()\n+        c.set_source_expressions(\n             [\n-                Cast(expression, TextField())\n-                for expression in copy.get_source_expressions()\n+                expression\n+                if isinstance(expression.output_field, (CharField, TextField))\n+                else Cast(expression, TextField())\n+                for expression in c.get_source_expressions()\n             ]\n         )\n-        return super(ConcatPair, copy).as_sql(\n-            compiler,\n-            connection,\n-            **extra_context,\n-        )\n+        return c.pipes_concat_sql(compiler, connection, **extra_context)\n \n     def as_mysql(self, compiler, connection, **extra_context):\n         # Use CONCAT_WS with an empty separator so that NULLs are ignored.\n@@ -132,16 +132,20 @@ class Concat(Func):\n     def __init__(self, *expressions, **extra):\n         if len(expressions) < 2:\n             raise ValueError(\"Concat must take at least two expressions\")\n-        paired = self._paired(expressions)\n+        paired = self._paired(expressions, output_field=extra.get(\"output_field\"))\n         super().__init__(paired, **extra)\n \n-    def _paired(self, expressions):\n+    def _paired(self, expressions, output_field):\n         # wrap pairs of expressions in successive concat functions\n         # exp = [a, b, c, d]\n         # -> ConcatPair(a, ConcatPair(b, ConcatPair(c, d))))\n         if len(expressions) == 2:\n-            return ConcatPair(*expressions)\n-        return ConcatPair(expressions[0], self._paired(expressions[1:]))\n+            return ConcatPair(*expressions, output_field=output_field)\n+        return ConcatPair(\n+            expressions[0],\n+            self._paired(expressions[1:], output_field=output_field),\n+            output_field=output_field,\n+        )\n \n \n class Left(Func):\n", "test_patch": "diff --git a/tests/db_functions/text/test_concat.py b/tests/db_functions/text/test_concat.py\nindex 1441e31e97aa..6e4cb91d3a93 100644\n--- a/tests/db_functions/text/test_concat.py\n+++ b/tests/db_functions/text/test_concat.py\n@@ -75,7 +75,10 @@ def test_mixed_char_text(self):\n         expected = article.title + \" - \" + article.text\n         self.assertEqual(expected.upper(), article.title_text)\n \n-    @skipUnless(connection.vendor == \"sqlite\", \"sqlite specific implementation detail.\")\n+    @skipUnless(\n+        connection.vendor in (\"sqlite\", \"postgresql\"),\n+        \"SQLite and PostgreSQL specific implementation detail.\",\n+    )\n     def test_coalesce_idempotent(self):\n         pair = ConcatPair(V(\"a\"), V(\"b\"))\n         # Check nodes counts\n@@ -89,3 +92,18 @@ def test_sql_generation_idempotency(self):\n         qs = Article.objects.annotate(description=Concat(\"title\", V(\": \"), \"summary\"))\n         # Multiple compilations should not alter the generated query.\n         self.assertEqual(str(qs.query), str(qs.all().query))\n+\n+    def test_concat_non_str(self):\n+        Author.objects.create(name=\"The Name\", age=42)\n+        with self.assertNumQueries(1) as ctx:\n+            author = Author.objects.annotate(\n+                name_text=Concat(\n+                    \"name\", V(\":\"), \"alias\", V(\":\"), \"age\", output_field=TextField()\n+                ),\n+            ).get()\n+        self.assertEqual(author.name_text, \"The Name::42\")\n+        # Only non-string columns are casted on PostgreSQL.\n+        self.assertEqual(\n+            ctx.captured_queries[0][\"sql\"].count(\"::text\"),\n+            1 if connection.vendor == \"postgresql\" else 0,\n+        )\n", "problem_statement": "Make Concat() use the database operator `||` on PostgreSQL.\nDescription\n\t \nThe django.db.models.functions.Concat database ORM function in the PostgreSQL database backend use the CONCAT SQL function.\nUnfortunately, the CONCAT function in PostgreSQL is not IMMUTABLE and cannot be used in functional indexes or generated fields.\nFor example, if you use Concat(\"first_name\", Value(\" \"), \"last_name\") in a GeneratedField you get the following error:\npsycopg.errors.InvalidObjectDefinition: generation expression is not immutable\nI propose to make the string concatenation operator || available in the PostgreSQL database backend in addition to the already available string concatenation function CONCAT.\n", "hints_text": [["I'm not convinced, there are other built-in functions that could be implemented differently and currently cannot be used in GeneratedFields, e.g. SHA512, SHA384, SHA224, SHA1, or MD5 on Oracle. I'm pessimistic about adding multiple new functions for such cases. This may open a can of worms. The current thread is to keep Django a core framework, not providing every utility which might be useful.", 1699417277.0], ["Replying to Mariusz Felisiak: I'm not convinced, there are other built-in functions that could be implemented differently and currently cannot be used in GeneratedFields The string concatenation operator || is not an exotic function specific to PostgreSQL, but an operator already used in other database backends, so your concern about the possible increase in requests to add new database functions to databases does not apply. I would add that I would have liked to open this issue since the introduction of functional indexes in Django 3.2, but I never did so due to lack of time. I decided to open this issue now after seeing that the choice to use the non-immutable concatenation function CONCAT instead of the immutable concatenation operator || in the PostgreSQL backend also affects the case of GeneratedFields. I'm pessimistic about adding multiple new functions for such cases. This may open a can of worms. The current thread is to keep Django a core framework, not providing every utility which might be useful. Among other things, the string concatenation example is the most used to explain Generated Fields (e.g \u200bfly.io, \u200bdjangochat.com, \u200bpaulox.net, ...), but, due to this bug in the PostgreSQL backend database, it only works on a subset of Django backend databases, unlike the current thread of keeping Django a core framework, as you reiterated.", 1699421294.0], ["... databases does not apply. I don't understand why TBH. Do you want to say that it doesn't apply because it's PostgreSQL and we should treat it specially? I would argue with that. This is definitively not a bug. Concat() is implemented this way from the very beginning and database limitations for GeneratedField are \u200bdocumented.", 1699426484.0], ["Moreover, there is no easy way to implement Concat() on PostgreSQL such that it uses || , is immutable, and work the same way as now, because it uses COALESCE() which is also considered mutable by PostgreSQL. I understand that you want to use new goodies on PostgreSQL but it's a database limitation, not a Django fault.", 1699427002.0], ["Replying to Mariusz Felisiak: ... I understand that you want to use new goodies on PostgreSQL ... This isn't about me wanting to play with the latest Django features with PostgreSQL, I solved the problem in my code some time ago by writing a function that uses || instead of CONCAT. The problem, however, remains non-expert users to whom we reiterate that the generated fields are compatible with all supported databases, and then the first example we do, uses strings concatenations, that we already know will not work with at least one of these databases out-of-the-box. Moreover, there is no easy way to implement Concat() on PostgreSQL such that it uses || , is immutable, and work the same way as now, because it uses COALESCE() which is also considered mutable by PostgreSQL ... it's a database limitation, not a Django fault. On the contrary, in PostgreSQL, you can concatenate strings into a generated column without any problem. See for example: CREATE TABLE \"samples_fullnames\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, \"first_name\" varchar(150) NOT NULL, \"last_name\" varchar(150) NOT NULL, \"full_name\" text GENERATED ALWAYS AS ( \"first_name\"::text || ' '::text || \"last_name\"::text ) STORED ); But also: (mimicking the SQL code generated by the ORM for SQLite) CREATE TABLE \"samples_names\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, \"first_name\" varchar(150) NOT NULL, \"last_name\" varchar(150) NOT NULL, \"full_name\" text GENERATED ALWAYS AS ( COALESCE((\"first_name\")::text, '') || COALESCE(COALESCE((' ')::text, '') || COALESCE((\"last_name\")::text, ''), '') ) STORED ); If there is a limitation I would say it lies in how the Django ORM generates the SQL code for PostgreSQL. CREATE TABLE \"samples_user\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, \"first_name\" varchar(150) NOT NULL, \"last_name\" varchar(150) NOT NULL, \"full_name\" text GENERATED ALWAYS AS ( CONCAT((\"first_name\")::text, (CONCAT((' ')::text, (\"last_name\")::text))::text) ) STORED );", 1699431361.0], ["Replying to Mariusz Felisiak: ... databases does not apply. I don't understand why TBH. You quoted my sentence so much that I had to go and reread it :-D Do you want to say that it doesn't apply because it's PostgreSQL and we should treat it specially? I would argue with that. My intention was not to ask for special treatment for PostgreSQL, but on the contrary to ask that it not be the only one treated differently in this particular case. I tried to explain that the || operator is not a function, but an operator, and that among other things it has already been used in other supported backend databases, so requesting that it ALSO be used in PostgreSQL doesn't seem right to me. a special request. This is definitively not a bug. Concat() is implemented this way from the very beginning and database limitations for GeneratedField are \u200bdocumented. I don't know the reasons for using CONCAT instead of ||, but I reiterate that this choice was already a problem for functional indexes, and now generated fields have been added. It therefore seems to me that that choice can at least be reevaluated. Note: I realize that explaining myself in writing in English could be a limitation of mine, and in case what I write is misunderstood or arrogant, I reiterate here that this is not my intention. :-)", 1699431996.0], ["Throwing some fuel on the fire with a few fyi points Firstly just want to make it clear that pg marking concat() not immutable is a feature (by design) not a bug :D (it's \"stable\" but not \"immutable\" because settings can still affect the output) Apparently || is ANSI (TIL) Even though it is ANSI you still have to set mode PIPES_AS_CONCAT [1] on MySQL Concat() doesn't actually use Coalesce() for pg because it doesn't need it, NULLs are ignored with CONCAT() on pg [2] Unfortunately we can't change Concat() to use || because on pg it _does_ evaluate NULLs. If it were to use || then we _would_ need to make use of Coalesce() to make it consistent. I'm kinda hoping though that we do get a (separate) immutable concat for pg because concatenating strings seems to be a common desire, at least for me :D But at the same time I recognise how easy it is to create one and agree with the whole Django-isnt-a-kitchen-sink-framework. Lastly can I just say that (somewhat jokingly but semi-serious)... we may be missing the perfect opportunity to make use of the __floordiv__() operator method [3] ;D GeneratedField(expression=F('first_name') // F('last_name')) [1] \u200bhttps://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_pipes_as_concat [2] \u200bhttps://www.postgresql.org/docs/current/functions-string.html [3] \u200bhttps://docs.python.org/3/reference/datamodel.html#emulating-numeric-types Edit: I mean NOT immutable.", 1699434069.0], ["If casting to text data-type fixes the issue then I'd consider documenting this workaround instead of adding a PostgreSQL-specific function (where text casting would still be required). For example, adding the following sentence: \"In order to make an IMMUTABLE expression MUTABLE on PostgreSQL, you can wrap the expression with Cast(), e.g. Cast(Concat(F(\"first_name\"), Value(\" \"), F(\"last_name\")), TextField()).\" in the warning about IMMUTABLE functions on PostgreSQL.", 1699504724.0], ["Replying to Mariusz Felisiak: If casting to text data-type fixes the issue then I'd consider documenting this workaround instead of adding a PostgreSQL-specific function (where text casting would still be required). For example, adding the following sentence: \"In order to make an IMMUTABLE expression MUTABLE on PostgreSQL, you can wrap the expression with Cast(), e.g. Cast(Concat(F(\"first_name\"), Value(\" \"), F(\"last_name\")), TextField()).\" in the warning about IMMUTABLE functions on PostgreSQL. Unfortunately the SQL code generate by the Django ORM is still broken in PostgreSQL. I wrote the class as susggested by Mariusz: class Person(models.Model): first_name = models.CharField() last_name = models.CharField() full_name = models.GeneratedField( expression=Cast( Concat(\"first_name\", V(\" \"), \"last_name\"), models.TextField(), ), db_persist=True, output_field=models.TextField(), ) But the migrations generate this SQL code: CREATE TABLE \"samples_person\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, \"first_name\" varchar NOT NULL, \"last_name\" varchar NOT NULL, \"full_name\" text GENERATED ALWAYS AS ( ( CONCAT( (\"first_name\")::text, (CONCAT((' ')::text, (\"last_name\")::text))::text ) )::text ) STORED ); that generated this error message psycopg.errors.InvalidObjectDefinition: generation expression is not immutable", 1699507175.0], ["I need to clarify an incorrect assumption I was making in my earlier comment. COALESCE() is acceptable for use in generated fields & function indexes. This is because it's not a \"real\" function, it's an expression. This means that Paolo's proposal to make Concat() on Postgres more like it does on SQLite an acceptable change keeping behaviour consistent.", 1699507432.0], ["Unfortunately we can't change Concat() to use || because on pg it _does_ evaluate NULLs. If it were to use || then we _would_ need to make use of Coalesce() to make it consistent. That's the crux of the issue and why we had to go back and forth on how it was implemented on Postgres when adding support for functional index and constraints. There are few tickets related to this such one such as #29582 and #30385. the migrations generate this SQL code (code snipped with many unnecessary ::text) This is a side effect of 09ffc5c1212d4ced58b708cbbf3dfbfb77b782ca (#33308) to accommodate support for psycopg>3 server-side bindings. See 779cd28acb1f7eb06f629c0ea4ded99b5ebb670a (#34840) which removed many of them but \u200bsome still remain. Based on #30385 I think that the best way forward here is to stop using CONCAT entirely and use a strategy where it relies on || with Coalesce and Cast appropriately when dealing with expressions that are nullable and/or non-text. The challenge here is that we can't trust .null as the our output field resolving strategy doesn't carry null affinity. If we want to make sure Concat maintains is previous behaviour on Postgres we must wrap every source expression in Coalesce. Normally when we change the SQL generated by an expression it leaves all index generated with the previous implementation unusable and forces users to re-create them but in this case it wasn't possible to even create such index as Concat is not IMMUTABLE so I don't think that's an issue.", 1699522486.0], ["Replying to Simon Charette: Unfortunately we can't change Concat() to use || because on pg it _does_ evaluate NULLs. If it were to use || then we _would_ need to make use of Coalesce() to make it consistent. That's the crux of the issue and why we had to go back and forth on how it was implemented on Postgres when adding support for functional index and constraints. There are few tickets related to this such one such as #29582 and #30385. Thanks, for pointing us to these old issues. the migrations generate this SQL code (code snipped with many unnecessary ::text) This is a side effect of 09ffc5c1212d4ced58b708cbbf3dfbfb77b782ca (#33308) to accommodate support for psycopg>3 server-side bindings. See 779cd28acb1f7eb06f629c0ea4ded99b5ebb670a (#34840) which removed many of them but \u200bsome still remain. Are you suggesting opening an issue to remove all the remaining unnecessary CAST? Based on #30385 I think that the best way forward here is to stop using CONCAT entirely and use a strategy where it relies on || with Coalesce and Cast appropriately when dealing with expressions that are nullable and/or non-text. The challenge here is that we can't trust .null as the our output field resolving strategy doesn't carry null affinity. If we want to make sure Concat maintains is previous behaviour on Postgres we must wrap every source expression in Coalesce. I understand that GeneratedField is only the last one affected by the fact that CONCAT is not IMMUTABLE I agree with the plan to replace CONCAT everywhere with || given how many problems it would solve. Normally when we change the SQL generated by an expression it leaves all index generated with the previous implementation unusable and forces users to re-create them but in this case it wasn't possible to even create such index as Concat is not IMMUTABLE so I don't think that's an issue. Better this way I would say, there will be no indexes that the user needs to re-create.", 1699526098.0], ["In 6364b6ee: Fixed #34955 -- Made Concat() use operator on PostgreSQL. This also avoids casting string based expressions in Concat() on PostgreSQL.", 1699940789.0]], "created_at": "2023-11-14T08:33:33Z"}
{"repo": "django/django", "pull_number": 17470, "instance_id": "django__django-17470", "issue_numbers": ["34944"], "base_commit": "de4884b114534f43c49cf8c5b7f10181e737f4e9", "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 205a41c1935f..ce3bebb59176 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -286,6 +286,8 @@ def _check_field_name(self):\n         Check if field name is valid, i.e. 1) does not end with an\n         underscore, 2) does not contain \"__\" and 3) is not \"pk\".\n         \"\"\"\n+        if self.name is None:\n+            return []\n         if self.name.endswith(\"_\"):\n             return [\n                 checks.Error(\ndiff --git a/django/db/models/fields/generated.py b/django/db/models/fields/generated.py\nindex abafc3ad2748..9a73b7fe373c 100644\n--- a/django/db/models/fields/generated.py\n+++ b/django/db/models/fields/generated.py\n@@ -16,7 +16,7 @@ class GeneratedField(Field):\n     _resolved_expression = None\n     output_field = None\n \n-    def __init__(self, *, expression, db_persist=None, output_field=None, **kwargs):\n+    def __init__(self, *, expression, output_field, db_persist=None, **kwargs):\n         if kwargs.setdefault(\"editable\", False):\n             raise ValueError(\"GeneratedField cannot be editable.\")\n         if not kwargs.setdefault(\"blank\", True):\n@@ -29,7 +29,7 @@ def __init__(self, *, expression, db_persist=None, output_field=None, **kwargs):\n             raise ValueError(\"GeneratedField.db_persist must be True or False.\")\n \n         self.expression = expression\n-        self._output_field = output_field\n+        self.output_field = output_field\n         self.db_persist = db_persist\n         super().__init__(**kwargs)\n \n@@ -51,11 +51,6 @@ def contribute_to_class(self, *args, **kwargs):\n         self._resolved_expression = self.expression.resolve_expression(\n             self._query, allow_joins=False\n         )\n-        self.output_field = (\n-            self._output_field\n-            if self._output_field is not None\n-            else self._resolved_expression.output_field\n-        )\n         # Register lookups from the output_field class.\n         for lookup_name, lookup in self.output_field.get_class_lookups().items():\n             self.register_lookup(lookup, lookup_name=lookup_name)\n@@ -68,11 +63,45 @@ def generated_sql(self, connection):\n \n     def check(self, **kwargs):\n         databases = kwargs.get(\"databases\") or []\n-        return [\n+        errors = [\n             *super().check(**kwargs),\n             *self._check_supported(databases),\n             *self._check_persistence(databases),\n         ]\n+        output_field_clone = self.output_field.clone()\n+        output_field_clone.model = self.model\n+        output_field_checks = output_field_clone.check(databases=databases)\n+        if output_field_checks:\n+            separator = \"\\n    \"\n+            error_messages = separator.join(\n+                f\"{output_check.msg} ({output_check.id})\"\n+                for output_check in output_field_checks\n+                if isinstance(output_check, checks.Error)\n+            )\n+            if error_messages:\n+                errors.append(\n+                    checks.Error(\n+                        \"GeneratedField.output_field has errors:\"\n+                        f\"{separator}{error_messages}\",\n+                        obj=self,\n+                        id=\"fields.E223\",\n+                    )\n+                )\n+            warning_messages = separator.join(\n+                f\"{output_check.msg} ({output_check.id})\"\n+                for output_check in output_field_checks\n+                if isinstance(output_check, checks.Warning)\n+            )\n+            if warning_messages:\n+                errors.append(\n+                    checks.Warning(\n+                        \"GeneratedField.output_field has warnings:\"\n+                        f\"{separator}{warning_messages}\",\n+                        obj=self,\n+                        id=\"fields.W224\",\n+                    )\n+                )\n+        return errors\n \n     def _check_supported(self, databases):\n         errors = []\n@@ -150,8 +179,7 @@ def deconstruct(self):\n         del kwargs[\"editable\"]\n         kwargs[\"db_persist\"] = self.db_persist\n         kwargs[\"expression\"] = self.expression\n-        if self._output_field is not None:\n-            kwargs[\"output_field\"] = self._output_field\n+        kwargs[\"output_field\"] = self.output_field\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\ndiff --git a/docs/ref/checks.txt b/docs/ref/checks.txt\nindex 1bf6ce538355..f0eeaca26848 100644\n--- a/docs/ref/checks.txt\n+++ b/docs/ref/checks.txt\n@@ -213,6 +213,8 @@ Model fields\n   ``GeneratedField``\\s.\n * **fields.E222**: ``<database>`` does not support persisted\n   ``GeneratedField``\\s.\n+* **fields.E223**: ``GeneratedField.output_field`` has errors: ...\n+* **fields.W224**: ``GeneratedField.output_field`` has warnings: ...\n * **fields.E900**: ``IPAddressField`` has been removed except for support in\n   historical migrations.\n * **fields.W900**: ``IPAddressField`` has been deprecated. Support for it\ndiff --git a/docs/ref/models/fields.txt b/docs/ref/models/fields.txt\nindex 9e945b7f27a7..a29d06c00a8a 100644\n--- a/docs/ref/models/fields.txt\n+++ b/docs/ref/models/fields.txt\n@@ -1237,7 +1237,7 @@ when :attr:`~django.forms.Field.localize` is ``False`` or\n \n .. versionadded:: 5.0\n \n-.. class:: GeneratedField(expression, db_persist=None, output_field=None, **kwargs)\n+.. class:: GeneratedField(expression, output_field, db_persist=None, **kwargs)\n \n A field that is always computed based on other fields in the model. This field\n is managed and updated by the database itself. Uses the ``GENERATED ALWAYS``\n@@ -1259,6 +1259,10 @@ materialized view.\n     the model (in the same database table). Generated fields cannot reference\n     other generated fields. Database backends can impose further restrictions.\n \n+.. attribute:: GeneratedField.output_field\n+\n+    A model field instance to define the field's data type.\n+\n .. attribute:: GeneratedField.db_persist\n \n     Determines if the database column should occupy storage as if it were a\n@@ -1268,12 +1272,6 @@ materialized view.\n     PostgreSQL only supports persisted columns. Oracle only supports virtual\n     columns.\n \n-.. attribute:: GeneratedField.output_field\n-\n-    An optional model field instance to define the field's data type. This can\n-    be used to customize attributes like the field's collation. By default, the\n-    output field is derived from ``expression``.\n-\n .. admonition:: Refresh the data\n \n     Since the database always computed the value, the object must be reloaded\ndiff --git a/docs/releases/5.0.txt b/docs/releases/5.0.txt\nindex b60f7a6c7640..db75a6b0a39d 100644\n--- a/docs/releases/5.0.txt\n+++ b/docs/releases/5.0.txt\n@@ -142,7 +142,11 @@ to create a field that is always computed from other fields. For example::\n \n     class Square(models.Model):\n         side = models.IntegerField()\n-        area = models.GeneratedField(expression=F(\"side\") * F(\"side\"), db_persist=True)\n+        area = models.GeneratedField(\n+            expression=F(\"side\") * F(\"side\"),\n+            output_field=models.BigIntegerField(),\n+            db_persist=True,\n+        )\n \n More options for declaring field choices\n ----------------------------------------\n", "test_patch": "diff --git a/tests/admin_views/models.py b/tests/admin_views/models.py\nindex 67d3ec4c86c7..bd2dc65d2e17 100644\n--- a/tests/admin_views/models.py\n+++ b/tests/admin_views/models.py\n@@ -1147,6 +1147,7 @@ class Square(models.Model):\n     area = models.GeneratedField(\n         db_persist=True,\n         expression=models.F(\"side\") * models.F(\"side\"),\n+        output_field=models.BigIntegerField(),\n     )\n \n     class Meta:\ndiff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex ceeb254e578d..e30d41113809 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -4,7 +4,7 @@\n from django.core.checks import Error\n from django.core.checks import Warning as DjangoWarning\n from django.db import connection, models\n-from django.db.models.functions import Coalesce, Pi\n+from django.db.models.functions import Coalesce, LPad, Pi\n from django.test import SimpleTestCase, TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test.utils import isolate_apps, override_settings\n from django.utils.functional import lazy\n@@ -1216,7 +1216,9 @@ def test_not_supported(self):\n         class Model(models.Model):\n             name = models.IntegerField()\n             field = models.GeneratedField(\n-                expression=models.F(\"name\"), db_persist=db_persist\n+                expression=models.F(\"name\"),\n+                output_field=models.IntegerField(),\n+                db_persist=db_persist,\n             )\n \n         expected_errors = []\n@@ -1252,7 +1254,11 @@ class Model(models.Model):\n     def test_not_supported_stored_required_db_features(self):\n         class Model(models.Model):\n             name = models.IntegerField()\n-            field = models.GeneratedField(expression=models.F(\"name\"), db_persist=True)\n+            field = models.GeneratedField(\n+                expression=models.F(\"name\"),\n+                output_field=models.IntegerField(),\n+                db_persist=True,\n+            )\n \n             class Meta:\n                 required_db_features = {\"supports_stored_generated_columns\"}\n@@ -1262,7 +1268,11 @@ class Meta:\n     def test_not_supported_virtual_required_db_features(self):\n         class Model(models.Model):\n             name = models.IntegerField()\n-            field = models.GeneratedField(expression=models.F(\"name\"), db_persist=False)\n+            field = models.GeneratedField(\n+                expression=models.F(\"name\"),\n+                output_field=models.IntegerField(),\n+                db_persist=False,\n+            )\n \n             class Meta:\n                 required_db_features = {\"supports_virtual_generated_columns\"}\n@@ -1273,7 +1283,11 @@ class Meta:\n     def test_not_supported_virtual(self):\n         class Model(models.Model):\n             name = models.IntegerField()\n-            field = models.GeneratedField(expression=models.F(\"name\"), db_persist=False)\n+            field = models.GeneratedField(\n+                expression=models.F(\"name\"),\n+                output_field=models.IntegerField(),\n+                db_persist=False,\n+            )\n             a = models.TextField()\n \n         excepted_errors = (\n@@ -1298,7 +1312,11 @@ class Model(models.Model):\n     def test_not_supported_stored(self):\n         class Model(models.Model):\n             name = models.IntegerField()\n-            field = models.GeneratedField(expression=models.F(\"name\"), db_persist=True)\n+            field = models.GeneratedField(\n+                expression=models.F(\"name\"),\n+                output_field=models.IntegerField(),\n+                db_persist=True,\n+            )\n             a = models.TextField()\n \n         expected_errors = (\n@@ -1318,3 +1336,79 @@ class Model(models.Model):\n             Model._meta.get_field(\"field\").check(databases={\"default\"}),\n             expected_errors,\n         )\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_output_field_check_error(self):\n+        class Model(models.Model):\n+            value = models.DecimalField(max_digits=5, decimal_places=2)\n+            field = models.GeneratedField(\n+                expression=models.F(\"value\") * 2,\n+                output_field=models.DecimalField(max_digits=-1, decimal_places=-1),\n+                db_persist=True,\n+            )\n+\n+        expected_errors = [\n+            Error(\n+                \"GeneratedField.output_field has errors:\"\n+                \"\\n    'decimal_places' must be a non-negative integer. (fields.E131)\"\n+                \"\\n    'max_digits' must be a positive integer. (fields.E133)\",\n+                obj=Model._meta.get_field(\"field\"),\n+                id=\"fields.E223\",\n+            ),\n+        ]\n+        self.assertEqual(\n+            Model._meta.get_field(\"field\").check(databases={\"default\"}),\n+            expected_errors,\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_output_field_charfield_unlimited_error(self):\n+        class Model(models.Model):\n+            name = models.CharField(max_length=255)\n+            field = models.GeneratedField(\n+                expression=LPad(\"name\", 7, models.Value(\"xy\")),\n+                output_field=models.CharField(),\n+                db_persist=True,\n+            )\n+\n+        expected_errors = (\n+            []\n+            if connection.features.supports_unlimited_charfield\n+            else [\n+                Error(\n+                    \"GeneratedField.output_field has errors:\"\n+                    \"\\n    CharFields must define a 'max_length' attribute. \"\n+                    \"(fields.E120)\",\n+                    obj=Model._meta.get_field(\"field\"),\n+                    id=\"fields.E223\",\n+                ),\n+            ]\n+        )\n+        self.assertEqual(\n+            Model._meta.get_field(\"field\").check(databases={\"default\"}),\n+            expected_errors,\n+        )\n+\n+    @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n+    def test_output_field_check_warning(self):\n+        class Model(models.Model):\n+            value = models.IntegerField()\n+            field = models.GeneratedField(\n+                expression=models.F(\"value\") * 2,\n+                output_field=models.IntegerField(max_length=40),\n+                db_persist=True,\n+            )\n+\n+        expected_warnings = [\n+            DjangoWarning(\n+                \"GeneratedField.output_field has warnings:\"\n+                \"\\n    'max_length' is ignored when used with IntegerField. \"\n+                \"(fields.W122)\",\n+                obj=Model._meta.get_field(\"field\"),\n+                id=\"fields.W224\",\n+            ),\n+        ]\n+        self.assertEqual(\n+            Model._meta.get_field(\"field\").check(databases={\"default\"}),\n+            expected_warnings,\n+        )\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 57a9086c1963..21e8ab069a2e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -5664,10 +5664,14 @@ def assertModelsAndTables(after_db):\n     def _test_invalid_generated_field_changes(self, db_persist):\n         regular = models.IntegerField(default=1)\n         generated_1 = models.GeneratedField(\n-            expression=F(\"pink\") + F(\"pink\"), db_persist=db_persist\n+            expression=F(\"pink\") + F(\"pink\"),\n+            output_field=models.IntegerField(),\n+            db_persist=db_persist,\n         )\n         generated_2 = models.GeneratedField(\n-            expression=F(\"pink\") + F(\"pink\") + F(\"pink\"), db_persist=db_persist\n+            expression=F(\"pink\") + F(\"pink\") + F(\"pink\"),\n+            output_field=models.IntegerField(),\n+            db_persist=db_persist,\n         )\n         tests = [\n             (\"test_igfc_1\", regular, generated_1),\n@@ -5707,12 +5711,20 @@ def test_invalid_generated_field_persistency_change(self):\n             migrations.AddField(\n                 \"Pony\",\n                 \"modified_pink\",\n-                models.GeneratedField(expression=F(\"pink\"), db_persist=True),\n+                models.GeneratedField(\n+                    expression=F(\"pink\"),\n+                    output_field=models.IntegerField(),\n+                    db_persist=True,\n+                ),\n             ),\n             migrations.AlterField(\n                 \"Pony\",\n                 \"modified_pink\",\n-                models.GeneratedField(expression=F(\"pink\"), db_persist=False),\n+                models.GeneratedField(\n+                    expression=F(\"pink\"),\n+                    output_field=models.IntegerField(),\n+                    db_persist=False,\n+                ),\n             ),\n         ]\n         msg = (\n@@ -5729,7 +5741,9 @@ def _test_add_generated_field(self, db_persist):\n             \"Pony\",\n             \"modified_pink\",\n             models.GeneratedField(\n-                expression=F(\"pink\") + F(\"pink\"), db_persist=db_persist\n+                expression=F(\"pink\") + F(\"pink\"),\n+                output_field=models.IntegerField(),\n+                db_persist=db_persist,\n             ),\n         )\n         project_state, new_state = self.make_test_state(app_label, operation)\n@@ -5760,7 +5774,9 @@ def _test_remove_generated_field(self, db_persist):\n             \"Pony\",\n             \"modified_pink\",\n             models.GeneratedField(\n-                expression=F(\"pink\") + F(\"pink\"), db_persist=db_persist\n+                expression=F(\"pink\") + F(\"pink\"),\n+                output_field=models.IntegerField(),\n+                db_persist=db_persist,\n             ),\n         )\n         project_state, new_state = self.make_test_state(app_label, operation)\ndiff --git a/tests/model_fields/models.py b/tests/model_fields/models.py\nindex 7804c198815a..b4b7b5bd4c5f 100644\n--- a/tests/model_fields/models.py\n+++ b/tests/model_fields/models.py\n@@ -485,7 +485,11 @@ class UUIDGrandchild(UUIDChild):\n class GeneratedModel(models.Model):\n     a = models.IntegerField()\n     b = models.IntegerField()\n-    field = models.GeneratedField(expression=F(\"a\") + F(\"b\"), db_persist=True)\n+    field = models.GeneratedField(\n+        expression=F(\"a\") + F(\"b\"),\n+        output_field=models.IntegerField(),\n+        db_persist=True,\n+    )\n \n     class Meta:\n         required_db_features = {\"supports_stored_generated_columns\"}\n@@ -494,7 +498,11 @@ class Meta:\n class GeneratedModelVirtual(models.Model):\n     a = models.IntegerField()\n     b = models.IntegerField()\n-    field = models.GeneratedField(expression=F(\"a\") + F(\"b\"), db_persist=False)\n+    field = models.GeneratedField(\n+        expression=F(\"a\") + F(\"b\"),\n+        output_field=models.IntegerField(),\n+        db_persist=False,\n+    )\n \n     class Meta:\n         required_db_features = {\"supports_virtual_generated_columns\"}\n@@ -503,6 +511,7 @@ class Meta:\n class GeneratedModelParams(models.Model):\n     field = models.GeneratedField(\n         expression=Value(\"Constant\", output_field=models.CharField(max_length=10)),\n+        output_field=models.CharField(max_length=10),\n         db_persist=True,\n     )\n \n@@ -513,6 +522,7 @@ class Meta:\n class GeneratedModelParamsVirtual(models.Model):\n     field = models.GeneratedField(\n         expression=Value(\"Constant\", output_field=models.CharField(max_length=10)),\n+        output_field=models.CharField(max_length=10),\n         db_persist=False,\n     )\n \n@@ -520,7 +530,7 @@ class Meta:\n         required_db_features = {\"supports_virtual_generated_columns\"}\n \n \n-class GeneratedModelOutputField(models.Model):\n+class GeneratedModelOutputFieldDbCollation(models.Model):\n     name = models.CharField(max_length=10)\n     lower_name = models.GeneratedField(\n         expression=Lower(\"name\"),\n@@ -532,7 +542,7 @@ class Meta:\n         required_db_features = {\"supports_stored_generated_columns\"}\n \n \n-class GeneratedModelOutputFieldVirtual(models.Model):\n+class GeneratedModelOutputFieldDbCollationVirtual(models.Model):\n     name = models.CharField(max_length=10)\n     lower_name = models.GeneratedField(\n         expression=Lower(\"name\"),\n@@ -547,7 +557,10 @@ class Meta:\n class GeneratedModelNull(models.Model):\n     name = models.CharField(max_length=10, null=True)\n     lower_name = models.GeneratedField(\n-        expression=Lower(\"name\"), db_persist=True, null=True\n+        expression=Lower(\"name\"),\n+        output_field=models.CharField(max_length=10),\n+        db_persist=True,\n+        null=True,\n     )\n \n     class Meta:\n@@ -557,7 +570,10 @@ class Meta:\n class GeneratedModelNullVirtual(models.Model):\n     name = models.CharField(max_length=10, null=True)\n     lower_name = models.GeneratedField(\n-        expression=Lower(\"name\"), db_persist=False, null=True\n+        expression=Lower(\"name\"),\n+        output_field=models.CharField(max_length=10),\n+        db_persist=False,\n+        null=True,\n     )\n \n     class Meta:\ndiff --git a/tests/model_fields/test_generatedfield.py b/tests/model_fields/test_generatedfield.py\nindex a37e37498138..04d52f679974 100644\n--- a/tests/model_fields/test_generatedfield.py\n+++ b/tests/model_fields/test_generatedfield.py\n@@ -1,5 +1,12 @@\n from django.db import IntegrityError, connection\n-from django.db.models import F, FloatField, GeneratedField, IntegerField, Model\n+from django.db.models import (\n+    CharField,\n+    F,\n+    FloatField,\n+    GeneratedField,\n+    IntegerField,\n+    Model,\n+)\n from django.db.models.functions import Lower\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import isolate_apps\n@@ -8,8 +15,8 @@\n     GeneratedModel,\n     GeneratedModelNull,\n     GeneratedModelNullVirtual,\n-    GeneratedModelOutputField,\n-    GeneratedModelOutputFieldVirtual,\n+    GeneratedModelOutputFieldDbCollation,\n+    GeneratedModelOutputFieldDbCollationVirtual,\n     GeneratedModelParams,\n     GeneratedModelParamsVirtual,\n     GeneratedModelVirtual,\n@@ -19,41 +26,77 @@\n class BaseGeneratedFieldTests(SimpleTestCase):\n     def test_editable_unsupported(self):\n         with self.assertRaisesMessage(ValueError, \"GeneratedField cannot be editable.\"):\n-            GeneratedField(expression=Lower(\"name\"), editable=True, db_persist=False)\n+            GeneratedField(\n+                expression=Lower(\"name\"),\n+                output_field=CharField(max_length=255),\n+                editable=True,\n+                db_persist=False,\n+            )\n \n     def test_blank_unsupported(self):\n         with self.assertRaisesMessage(ValueError, \"GeneratedField must be blank.\"):\n-            GeneratedField(expression=Lower(\"name\"), blank=False, db_persist=False)\n+            GeneratedField(\n+                expression=Lower(\"name\"),\n+                output_field=CharField(max_length=255),\n+                blank=False,\n+                db_persist=False,\n+            )\n \n     def test_default_unsupported(self):\n         msg = \"GeneratedField cannot have a default.\"\n         with self.assertRaisesMessage(ValueError, msg):\n-            GeneratedField(expression=Lower(\"name\"), default=\"\", db_persist=False)\n+            GeneratedField(\n+                expression=Lower(\"name\"),\n+                output_field=CharField(max_length=255),\n+                default=\"\",\n+                db_persist=False,\n+            )\n \n     def test_database_default_unsupported(self):\n         msg = \"GeneratedField cannot have a database default.\"\n         with self.assertRaisesMessage(ValueError, msg):\n-            GeneratedField(expression=Lower(\"name\"), db_default=\"\", db_persist=False)\n+            GeneratedField(\n+                expression=Lower(\"name\"),\n+                output_field=CharField(max_length=255),\n+                db_default=\"\",\n+                db_persist=False,\n+            )\n \n     def test_db_persist_required(self):\n         msg = \"GeneratedField.db_persist must be True or False.\"\n         with self.assertRaisesMessage(ValueError, msg):\n-            GeneratedField(expression=Lower(\"name\"))\n+            GeneratedField(\n+                expression=Lower(\"name\"), output_field=CharField(max_length=255)\n+            )\n         with self.assertRaisesMessage(ValueError, msg):\n-            GeneratedField(expression=Lower(\"name\"), db_persist=None)\n+            GeneratedField(\n+                expression=Lower(\"name\"),\n+                output_field=CharField(max_length=255),\n+                db_persist=None,\n+            )\n \n     def test_deconstruct(self):\n-        field = GeneratedField(expression=F(\"a\") + F(\"b\"), db_persist=True)\n+        field = GeneratedField(\n+            expression=F(\"a\") + F(\"b\"), output_field=IntegerField(), db_persist=True\n+        )\n         _, path, args, kwargs = field.deconstruct()\n         self.assertEqual(path, \"django.db.models.GeneratedField\")\n         self.assertEqual(args, [])\n-        self.assertEqual(kwargs, {\"db_persist\": True, \"expression\": F(\"a\") + F(\"b\")})\n+        self.assertEqual(kwargs[\"db_persist\"], True)\n+        self.assertEqual(kwargs[\"expression\"], F(\"a\") + F(\"b\"))\n+        self.assertEqual(\n+            kwargs[\"output_field\"].deconstruct(), IntegerField().deconstruct()\n+        )\n \n     @isolate_apps(\"model_fields\")\n     def test_get_col(self):\n         class Square(Model):\n             side = IntegerField()\n-            area = GeneratedField(expression=F(\"side\") * F(\"side\"), db_persist=True)\n+            area = GeneratedField(\n+                expression=F(\"side\") * F(\"side\"),\n+                output_field=IntegerField(),\n+                db_persist=True,\n+            )\n \n         col = Square._meta.get_field(\"area\").get_col(\"alias\")\n         self.assertIsInstance(col.output_field, IntegerField)\n@@ -74,7 +117,9 @@ def test_cached_col(self):\n         class Sum(Model):\n             a = IntegerField()\n             b = IntegerField()\n-            total = GeneratedField(expression=F(\"a\") + F(\"b\"), db_persist=True)\n+            total = GeneratedField(\n+                expression=F(\"a\") + F(\"b\"), output_field=IntegerField(), db_persist=True\n+            )\n \n         field = Sum._meta.get_field(\"total\")\n         cached_col = field.cached_col\n@@ -165,9 +210,9 @@ def test_output_field_lookups(self):\n         with self.assertNumQueries(0), self.assertRaises(does_not_exist):\n             self.base_model.objects.get(field__gte=overflow_value)\n \n-    def test_output_field(self):\n+    def test_output_field_db_collation(self):\n         collation = connection.features.test_collations[\"virtual\"]\n-        m = self.output_field_model.objects.create(name=\"NAME\")\n+        m = self.output_field_db_collation_model.objects.create(name=\"NAME\")\n         field = m._meta.get_field(\"lower_name\")\n         db_parameters = field.db_parameters(connection)\n         self.assertEqual(db_parameters[\"collation\"], collation)\n@@ -178,7 +223,7 @@ def test_output_field(self):\n         )\n \n     def test_db_type_parameters(self):\n-        db_type_parameters = self.output_field_model._meta.get_field(\n+        db_type_parameters = self.output_field_db_collation_model._meta.get_field(\n             \"lower_name\"\n         ).db_type_parameters(connection)\n         self.assertEqual(db_type_parameters[\"max_length\"], 11)\n@@ -202,7 +247,7 @@ def test_nullable(self):\n class StoredGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n     base_model = GeneratedModel\n     nullable_model = GeneratedModelNull\n-    output_field_model = GeneratedModelOutputField\n+    output_field_db_collation_model = GeneratedModelOutputFieldDbCollation\n     params_model = GeneratedModelParams\n \n \n@@ -210,5 +255,5 @@ class StoredGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n class VirtualGeneratedFieldTests(GeneratedFieldTestMixin, TestCase):\n     base_model = GeneratedModelVirtual\n     nullable_model = GeneratedModelNullVirtual\n-    output_field_model = GeneratedModelOutputFieldVirtual\n+    output_field_db_collation_model = GeneratedModelOutputFieldDbCollationVirtual\n     params_model = GeneratedModelParamsVirtual\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 72f90c934b73..46d16e9fdb6b 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -829,7 +829,11 @@ def test_add_binaryfield_mediumblob(self):\n     def test_add_generated_field_with_kt_model(self):\n         class GeneratedFieldKTModel(Model):\n             data = JSONField()\n-            status = GeneratedField(expression=KT(\"data__status\"), db_persist=True)\n+            status = GeneratedField(\n+                expression=KT(\"data__status\"),\n+                output_field=TextField(),\n+                db_persist=True,\n+            )\n \n             class Meta:\n                 app_label = \"schema\"\n@@ -844,7 +848,7 @@ class Meta:\n \n     @isolate_apps(\"schema\")\n     @skipUnlessDBFeature(\"supports_stored_generated_columns\")\n-    def test_add_generated_field_with_output_field(self):\n+    def test_add_generated_field(self):\n         class GeneratedFieldOutputFieldModel(Model):\n             price = DecimalField(max_digits=7, decimal_places=2)\n             vat_price = GeneratedField(\n", "problem_statement": "Missing or misinferred attributes in output fields of generated fields\nDescription\n\t\t\n(last modified by Paolo Melchiorre)\t\t\nContinuing with my experiments with the generated fields I found these two error situations which I reported together because they are very connected and could lead to a single solution.\nI do not rule out that there are other examples of use of the generated fields that could lead to the same errors and if they come to mind, please add them in the comments.\nMisinferred attributes\nIn the common example of a field generated as a concatenation of two CharField in a Model:\nclass Person(models.Model):\n\tfirst_name = models.CharField(max_length=255)\n\tlast_name = models.CharField(max_length=255)\n\tfull_name = models.GeneratedField(\n\t\texpression=Concat(\n\t\t\t\"first_name\", models.Value(\" \"), \"last_name\"\n\t\t),\n\t\tdb_persist=True,\n\t)\nThe SQL code for the generated column has an automatically inferred max length of only 255 characters (varchar(255)), while the field should be able to contain strings of 511 characters (varchar(511)):\nCREATE TABLE \"community_person\" (\n\t\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"first_name\" varchar(255) NOT NULL,\n\t\"last_name\" varchar(255) NOT NULL,\n\t\"full_name\" varchar(255) GENERATED ALWAYS AS (\n\t\tCOALESCE(\"first_name\", '') ||\n\t\tCOALESCE(COALESCE(' ', '') ||\n\t\tCOALESCE(\"last_name\", ''), '')\n\t) STORED\n);\nProposal\nTo solve the problem you could alternatively:\nmake the maximum length extraction process smarter for the automatically created output fields\nmandatorily require specifying the output field when some of the fields involved could lead to situations like the ones above\nMissing attributes\nIf in the previous example, I explicitly specify the output field without attributes, the migration is generated without generating errors:\nclass Person(models.Model):\n\tfirst_name = models.CharField(max_length=255)\n\tlast_name = models.CharField(max_length=255)\n\tfull_name = models.GeneratedField(\n\t\texpression=Concat(\n\t\t\t\"first_name\", models.Value(\" \"), \"last_name\"\n\t\t),\n\t\tdb_persist=True,\n\t\toutput_field=models.CharField(),\n\t)\nThe SQL code contains an incorrect varchar(None) type:\nCREATE TABLE \"community_person\" (\n\t\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\"first_name\" varchar(255) NOT NULL,\n\t\"last_name\" varchar(255) NOT NULL,\n\t\"full_name\" varchar(None) GENERATED ALWAYS AS (\n\t\tCOALESCE(\"first_name\", '') ||\n\t\tCOALESCE(COALESCE(' ', '') ||\n\t\tCOALESCE(\"last_name\", ''), '')\n\t) STORED\n);\nwhich will generate an error when trying to apply the migration to the database:\nsqlite3.OperationalError: near \"None\": syntax error\nProposal\nTo solve the problem you could alternatively:\nmake the SQL code generation process smarter so as to generate working SQL code\nrequest to specify mandatory attributes for the output fields raising an error in the migration creation phase\nCumulative proposal\nTo solve both problems shown above, given the little time remaining before the release of the stable version of Django 5, the two most drastic solutions from both of the above proposals could be adopted.\nRequired output field\nAlways require specifying the output field (except when you are sure that the extracted type cannot generate error situations?)\nExample of error message:\ndjango.core.exceptions.FieldError: Expression doesn't contain an explicit type. You must set output_field.\nRequired attributes\nRequest to specify mandatory attributes for the output fields raising an error in the migration creation phase.\n$ python3 -m manage makemigrations\nSystemCheckError: System check identified some issues:\nERRORS:\ncommunity.Person.full_name: (fields.E120) CharFields must define a 'max_length' attribute.\n", "hints_text": [["Thank you Paolo! I reproduced both scenarios, accepting.", 1699250607.0], ["Hello, I would like to work on this issue. As pointed out by Paolo, I can - make the output_field required when it can generate errors and ask to specify the required attributes like max_length on migration creation phase.", 1699313631.0], ["Replying to Om Dahale: Hello, I would like to work on this issue. Since this issue is a release blocker I hope you have time to propose an MR ASAP :) As pointed out by Paolo, I can - make the output_field required when it can generate errors and ask to specify the required attributes like max_length on migration creation phase. Precisely, the two points I proposed as a solution are the ones that can be implemented faster than others. For the point above: \"when it can generate errors\" it can be difficult in all the cases, maybe you can start asking every time for output_field \"attributes like max_length\" we need to add tests for all model field types", 1699319269.0], ["Hm I think there are 2 tickets here\u2026 or at least 2 PRs. Perhaps forum discussion is required but I don't think we ought to go down the route of trying to make resolve_expression() smart enough to determine that concat'ing 2 varchars means we need to add the max-lengths together \u2013 there may be a can of worms here since expressions could be ever so complex? \ud83e\udd14 We definitely need to fix the broken \"None\" in the DDL \ud83d\udc4d Always require specifying the output field (except when you are sure that the extracted type cannot generate error situations?) Perhaps \ud83d\udc4d \"Explicit is better than implicit\" and all that, though I think that documenting \"For complex expressions consider always declaring an output_field\" is a nice option. I'm keen to hear Mariusz & Lily's thoughts.", 1699320097.0], ["Replying to Paolo Melchiorre: Since this issue is a release blocker I hope you have time to propose an MR ASAP :) Okay Precisely, the two points I proposed as a solution are the ones that can be implemented faster than others. For the point above: \"when it can generate errors\" it can be difficult in all the cases, maybe you can start asking every time for output_field \"attributes like max_length\" we need to add tests for all model field types Noted", 1699324897.0], ["Replying to David Sanders: Hm I think there are 2 tickets here\u2026 or at least 2 PRs. Perhaps forum discussion is required but I don't think we ought to go down the route of trying to make resolve_expression() smart enough to determine that concat'ing 2 varchars means we need to add the max-lengths together \u2013 there may be a can of worms here since expressions could be ever so complex? \ud83e\udd14 We definitely need to fix the broken \"None\" in the DDL \ud83d\udc4d Always require specifying the output field (except when you are sure that the extracted type cannot generate error situations?) Perhaps \ud83d\udc4d \"Explicit is better than implicit\" and all that, though I think that documenting \"For complex expressions consider always declaring an output_field\" is a nice option. I'm keen to hear Mariusz & Lily's thoughts. So shall I continue my work on the 2 points given above?", 1699325078.0], ["Replying to David Sanders: Perhaps forum discussion is required ... I started a discussion in the forum: \u200bhttps://forum.djangoproject.com/t/release-blocker-missing-or-misinferred-attributes-in-output-fields-of-generated-fields/25103 ... I don't think we ought to go down the route of trying to make resolve_expression() smart enough to determine that concat'ing 2 varchars means we need to add the max-lengths together ... \ud83e\udd14 In fact, in my proposal for the \"Cumulative proposal\", I excluded this hypothesis. We definitely need to fix the broken \"None\" in the DDL \ud83d\udc4d Yes, I think it absolutely needs to be resolved. Always require specifying the output field (except when you are sure that the extracted type cannot generate error situations?) Perhaps \ud83d\udc4d \"Explicit is better than implicit\" and all that, though I think that documenting \"For complex expressions consider always declaring an output_field\" is a nice option. It could be a good solution, but it should be highlighted that deriving the output_field from the expression could hide pitfalls even in apparently simple cases such as concatenating two CharField on SQLite. Not all Django developers look under the hood of the ORM or check the SQL code generated by migrations. Perhaps it might be safer to always require the user to specify an output_field. I'm keen to hear Mariusz & Lily's thoughts. Me too, and also the people who collaborated on this feature like Simon, Lily, and Adam.", 1699326346.0], ["Replying to Om Dahale: So shall I continue my work on the 2 points given above? I think you should.", 1699328116.0], ["Replying to Paolo Melchiorre: Replying to Om Dahale: So shall I continue my work on the 2 points given above? I think you should. Okay", 1699330119.0], ["I'm curious if there are other expressions that could lead to an increased column size or if it's just Concat. Maybe we could add something to Concat (and other relevant expressions) that can express that column size change? If that's not feasible I would lean towards detecting the case where the column size could be invalid and require output_field explicitly in those cases. I'd be sad if GeneratedField always required an explicit output_field.", 1699346257.0], ["I published an introduction to database generated columns, using SQLite and the new GeneratedField added in Django 5.0 In this article, I shared the work I have done in testing GenerateField using SQLite as a database backend, and I hope it can be useful to people working in this issue. \u200bhttps://www.paulox.net/2023/11/07/database-generated-columns-part-1-django-and-sqlite/", 1699365239.0], ["Replying to Lily Foote: I'm curious if there are other expressions that could lead to an increased column size or if it's just Concat. Unfortunately, many other cases come to mind, for example a field generated as a product of two IntegerField which should be a BigIntegerField. If that's not feasible I would lean towards detecting the case where the column size could be invalid and require output_field explicitly in those cases. I'd be sad if GeneratedField always required an explicit output_field. I agree with you but from the various tests I have done there are more and more cases in which the automatically derived output field has problems.", 1699365813.0], ["Resolving the output_field of combined expressions is a complex task that the ORM only has limited support for #26355, #31506, #33397, this is not a problem specific to GenerateField. It is particularly tricky in the case of varchar(x) + varchar(y) as some backends restrict the allowed length of varchar (e.g. MySQL at 255) and using a TextField might come with backend specific limitations. Our stance so far has been to make a best effort guess and \u200brefuse the temptation to guess. The SQL code for the generated column has an automatically inferred max length of only 255 characters (varchar(255)) I wish we were more rigid in this particular case when dealing with parameterized fields such as CharFied, ArrayField, DecimalField but it's non-trivial and often backward incompatible. In this particular case it's tempting to adjust the logic of Concat._resolve_output_field to be smarter and generate a CharField(max_length=511) but I suspect it might have unintended effect and not something we'd like to include in 5.0 at this point. I suggest that we take the same approach here and expect the user to specify an explicit output_field. For the second part of the problem, CharField(None), I think that the addition of a check is in order. Adding a GeneratedField._check_output_field that simply delegates to self.output_field.check(**kwargs) seems like the way to go to catch all misuse of output_field.", 1699387767.0], ["Just fyi I am getting the hang of it now and will be raising a PR soon \ud83d\ude42", 1699388905.0], ["Thanks Simon. I think we all seem to be in consensus about explicit output_field\u2026 Lily & I were chatting on Discord (Paolo I believe you're on there too) about how it seems unavoidable. \ud83d\udc4d @Om Dahale Thanks, I was going to suggest actually starting with an easier ticket as I assumed you were a new contributor? But if you feel like you're up to the task then good luck, just be aware that someone else may need to \"take over\" if things stall seeing as this is a release blocker ;)", 1699389383.0], ["FWIW I create \u200ba draft MR to demonstrate how Concat resolving could be enhanced but I still think that we should not included it in 5.0. Might be worth a follow up cleanup/optimization ticket though.", 1699391187.0], ["Replying to Simon Charette: Resolving the output_field of combined expressions is a complex task that the ORM only has limited support for #26355, #31506, #33397, this is not a problem specific to GenerateField. Thanks for pointing this out, it helped me put this issue in the right perspective. It is particularly tricky in the case of varchar(x) + varchar(y) as some backends restrict the allowed length of varchar (e.g. MySQL at 255) ... I would add that, to complicate things, the restrictions on the various types of fields also vary between different versions of the same database. The SQL code for the generated column has an automatically inferred max length of only 255 characters (varchar(255)) ... In this particular case it's tempting to adjust the logic of Concat._resolve_output_field to be smarter and generate a CharField(max_length=511) but I suspect it might have unintended effect and not something we'd like to include in 5.0 at this point. I suggest that we take the same approach here and expect the user to specify an explicit output_field. I totally agree, and thanks for rephrasing my initial proposal more clearly. For the second part of the problem, CharField(None), I think that the addition of a check is in order. Adding a GeneratedField._check_output_field that simply delegates to self.output_field.check(**kwargs) seems like the way to go to catch all misuse of output_field. Thanks for pointing out this approach.", 1699408397.0], ["Replying to David Sanders: Thanks Simon. I think we all seem to be in consensus about explicit output_field\u2026 Lily & I were chatting on Discord (Paolo I believe you're on there too) about how it seems unavoidable. \ud83d\udc4d Given the different time zone, I have only now read Discord, but I repeat that, as I suspected in the description of the issue, it is inevitable at this point to request an explicit output_field. ... just be aware that someone else may need to \"take over\" if things stall seeing as this is a release blocker ;) Thanks for making that clear.", 1699408555.0], ["Replying to Simon Charette: FWIW I create \u200ba draft MR to demonstrate how Concat resolving could be enhanced but I still think that we should not included it in 5.0. Might be worth a follow up cleanup/optimization ticket though. To avoid mixing too many things here, I have already opened Issue #34954", 1699409589.0], ["In 8b1acc04: Refs #30446, Refs #34944 -- Fixed crash when adding GeneratedField with string Value(). This should allow smarter output_field inferring in functions dealing with text expressions. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95.", 1699428046.0], ["In 73869a51: [5.0.x] Refs #30446, Refs #34944 -- Fixed crash when adding GeneratedField with string Value(). This should allow smarter output_field inferring in functions dealing with text expressions. Regression in f333e3513e8bdf5ffeb6eeb63021c230082e6f95. Backport of 8b1acc0440418ac8f45ba48e2dfcf5126c83341b from main", 1699428062.0], ["Replying to Simon Charette: For the second part of the problem, CharField(None), I think that the addition of a check is in order. Adding a GeneratedField._check_output_field that simply delegates to self.output_field.check(**kwargs) seems like the way to go to catch all misuse of output_field. Hello, Simon! I raised a \u200bPR can you please have a look and let me know if I am going in the right direction?", 1699450576.0], ["Replying to David Sanders: @Om Dahale Thanks, I was going to suggest actually starting with an easier ticket as I assumed you were a new contributor? But if you feel like you're up to the task then good luck, just be aware that someone else may need to \"take over\" if things stall seeing as this is a release blocker ;) Yes, understood.", 1699450838.0], ["\u200bhttps://github.com/django/django/pull/17458", 1699455278.0], ["Reposting from PR.. I did this and now receiving the message to specify max_length def check(self, **kwargs): databases = kwargs.get(\"databases\") or [] return [ *super().check(**kwargs), *self._check_output_field(**kwargs), *self._check_supported(databases), *self._check_persistence(databases), ] def _check_output_field(self, **kwargs): # Ignore field name checks as the output_field is not a field. self.output_field.name = self.name + \"_output_field\" self.output_field.model = self.model return self.output_field.check(**kwargs) is this correct?", 1699482679.0], ["I am available full day today so let's wrap this up quickly", 1699485432.0], ["Hello, Paolo Simon David Can you help me out, just let me know if it is correct and if not then please point out the mistakes?", 1699586135.0], ["\u200bPR", 1699839729.0]], "created_at": "2023-11-12T19:56:32Z"}
{"repo": "django/django", "pull_number": 17468, "instance_id": "django__django-17468", "issue_numbers": ["34967"], "base_commit": "1b56b24f81a2e64b4bd3059abad9b6fd0c801c66", "patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex b1d818d90e22..d5a40eb46eed 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -231,6 +231,13 @@ def field_cast_sql(self, db_type, internal_type):\n         )\n         return \"%s\"\n \n+    def force_group_by(self):\n+        \"\"\"\n+        Return a GROUP BY clause to use with a HAVING clause when no grouping\n+        is specified.\n+        \"\"\"\n+        return []\n+\n     def force_no_ordering(self):\n         \"\"\"\n         Return a list used in the \"ORDER BY\" clause to force no ordering at\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 85ad8043487b..dfc9857b84c3 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -14,6 +14,8 @@\n from django.utils.dateparse import parse_date, parse_datetime, parse_time\n from django.utils.functional import cached_property\n \n+from .base import Database\n+\n \n class DatabaseOperations(BaseDatabaseOperations):\n     cast_char_field_without_max_length = \"text\"\n@@ -439,3 +441,6 @@ def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fiel\n             update_fields,\n             unique_fields,\n         )\n+\n+    def force_group_by(self):\n+        return [\"GROUP BY TRUE\"] if Database.sqlite_version_info < (3, 39) else []\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba37..7cec040ceeed 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -877,6 +877,8 @@ def as_sql(self, with_limits=True, with_col_aliases=False):\n                     if self._meta_ordering:\n                         order_by = None\n                 if having:\n+                    if not grouping:\n+                        result.extend(self.connection.ops.force_group_by())\n                     result.append(\"HAVING %s\" % having)\n                     params.extend(h_params)\n \n", "test_patch": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 8d8e46e312b8..a073d01590f8 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -2126,6 +2126,15 @@ def test_group_by_reference_subquery(self):\n         qs = Publisher.objects.filter(pk__in=author_qs)\n         self.assertCountEqual(qs, [self.p1, self.p2, self.p3, self.p4])\n \n+    def test_having_with_no_group_by(self):\n+        author_qs = (\n+            Author.objects.values(static_value=Value(\"static-value\"))\n+            .annotate(sum=Sum(\"age\"))\n+            .filter(sum__gte=0)\n+            .values_list(\"sum\", flat=True)\n+        )\n+        self.assertEqual(list(author_qs), [337])\n+\n \n class AggregateAnnotationPruningTests(TestCase):\n     @classmethod\n", "problem_statement": "Queries not generating GROUP BY clause with static annotation crashes on SQLite\nDescription\n\t \nDjango ORM is not generating a GROUP BY clause with static annotation. \nAfter filtering, Django ORM inserts a HAVING clause, but GROUP BY is missing.\nExpected Behavior\nThe Django ORM should generate a SQL query with a GROUP_BY clause when using .values() and .annotate() methods on a queryset.\nActual Behvaior\nThe ORM is not generating a GROUP BY clause when a static annotation is used. However, it does generate it when a non-trivial annotation is used.\nSteps to reproduce\nWith a small model\nclass Book(models.Model):\n\ttitle = models.CharField(max_length=100)\n\tpages = models.IntegerField(default=0)\nand the corresponding view\ndef bug_view(request):\n\tqueryset = Book.objects.all()\n\tprint(f\"query: {queryset.query}\")\n\t# trivial annotation\n\tannotated_queryset = queryset.annotate(group=Value('all'))\n\tprint(f\"annotated_query: {annotated_queryset.query}\")\n\t# grouped_and_annotated_query won't have a GROUP BY clause\n\tgrouped_and_annotated_queryset = \n\tannotated_queryset.values('group').annotate(sum=models.Sum('pages'))\n\tprint(f\"grouped_and_annotated_query: {grouped_and_annotated_queryset.query}\")\n\t# filtered_query contains HAVING clause but no GROUP BY clause\n\tfiltered_queryset = grouped_and_annotated_queryset.filter(sum__gt=10)\n\tprint(f\"filtered_query: {filtered_queryset.query}\")\n\treturn HttpResponse(filtered_queryset)\nDjango raises a django.db.utils.OperationalError. The (printed) querries are\nquery: SELECT \"books_book\".\"id\", \"books_book\".\"title\", \"books_book\".\"pages\" FROM \"books_book\"\nannotated_query: SELECT \"books_book\".\"id\", \"books_book\".\"title\", \"books_book\".\"pages\", all AS \"group\" FROM \"books_book\"\ngrouped_and_annotated_query: SELECT all AS \"group\", SUM(\"books_book\".\"pages\") AS \"sum\" FROM \"books_book\"\nfiltered_query: SELECT all AS \"group\", SUM(\"books_book\".\"pages\") AS \"sum\" FROM \"books_book\" HAVING SUM(\"books_book\".\"pages\") > 10\nAs you can see, there is no GROUP BY keyword in the grouped_and_annotated_query. But after filtering, a HAVING keyword is inserted, without a GROUP BY. This is the main reason for this error. This happens only to static annotations. If i evaluate a more complex annotation, the grouping works as intended: \ndef without_bug_view(request):\n\tqueryset = Book.objects.all()\n\tprint(f\"query: {queryset.query}\")\n\t# non-trivial annotation\n\tannotated_queryset = queryset.annotate(large=Case(\n\t\tWhen(pages__gt=650, then=Value(True)),\n\t\tdefault=Value(False),\n\t\toutput_field=BooleanField()))\n\tprint(f\"annotated_query: {annotated_queryset.query}\")\n\tgrouped_and_annotated_queryset = annotated_queryset.values('large').annotate(sum=models.Sum('pages'))\n\tprint(f\"grouped_and_annotated_query: {grouped_and_annotated_queryset.query}\")\n\tfiltered_queryset = grouped_and_annotated_queryset.filter(sum__gt=0)\n\tprint(f\"filtered_query: {filtered_queryset.query}\")\n\treturn HttpResponse(filtered_queryset)\nquerries:\nquery: SELECT \"books_book\".\"id\", \"books_book\".\"title\", \"books_book\".\"pages\" FROM \"books_book\"\nannotated_query: SELECT \"books_book\".\"id\", \"books_book\".\"title\", \"books_book\".\"pages\", CASE WHEN \"books_book\".\"pages\" > 650 THEN True ELSE False END AS \"large\" FROM \"books_book\"\ngrouped_and_annotated_query: SELECT CASE WHEN \"books_book\".\"pages\" > 650 THEN True ELSE False END AS \"large\", SUM(\"books_book\".\"pages\") AS \"sum\" FROM \"books_book\" GROUP BY 1\nfiltered_query: SELECT CASE WHEN \"books_book\".\"pages\" > 650 THEN True ELSE False END AS \"large\", SUM(\"books_book\".\"pages\") AS \"sum\" FROM \"books_book\" GROUP BY 1 HAVING SUM(\"books_book\".\"pages\") > 0\nThe GROUP BY keyword is inserted as is should.\nHere is the Stack Trace for completeness:\nError\nTraceback (most recent call last):\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 89, in _execute\n\treturn self.cursor.execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py\", line 328, in execute\n\treturn super().execute(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsqlite3.OperationalError: a GROUP BY clause is required before HAVING\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/books/tests.py\", line 8, in test_bug_view\n\tresponse = client.get(\"/books/bug\")\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/test/client.py\", line 927, in get\n\tresponse = super().get(path, data=data, secure=secure, headers=headers, **extra)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/test/client.py\", line 457, in get\n\treturn self.generic(\n\t\t ^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/test/client.py\", line 609, in generic\n\treturn self.request(**r)\n\t\t ^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/test/client.py\", line 891, in request\n\tself.check_exception(response)\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/test/client.py\", line 738, in check_exception\n\traise exc_value\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/core/handlers/exception.py\", line 55, in inner\n\tresponse = get_response(request)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/core/handlers/base.py\", line 197, in _get_response\n\tresponse = wrapped_callback(request, *callback_args, **callback_kwargs)\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/books/views.py\", line 23, in bug_view\n\treturn HttpResponse(filtered_queryset)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/http/response.py\", line 376, in __init__\n\tself.content = content\n\t^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/http/response.py\", line 401, in content\n\tcontent = b\"\".join(self.make_bytes(chunk) for chunk in value)\n\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/models/query.py\", line 398, in __iter__\n\tself._fetch_all()\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/models/query.py\", line 1881, in _fetch_all\n\tself._result_cache = list(self._iterable_class(self))\n\t\t\t\t\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/models/query.py\", line 208, in __iter__\n\tfor row in compiler.results_iter(\n\t\t\t ^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py\", line 1513, in results_iter\n\tresults = self.execute_sql(\n\t\t\t ^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py\", line 1562, in execute_sql\n\tcursor.execute(sql, params)\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 67, in execute\n\treturn self._execute_with_wrappers(\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 80, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\twith self.db.wrap_database_errors:\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/utils.py\", line 91, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/utils.py\", line 89, in _execute\n\treturn self.cursor.execute(sql, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File \"/home/simonlegtenborg/PycharmProjects/djangoProject/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py\", line 328, in execute\n\treturn super().execute(query, params)\n\t\t ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ndjango.db.utils.OperationalError: a GROUP BY clause is required before HAVING\n", "hints_text": [["Thanks for the report \ud83d\udc4d", 1699771693.0], ["This appears to only affect SQLite. I haven't tested on Oracle.", 1699773067.0]], "created_at": "2023-11-12T13:47:06Z"}
{"repo": "django/django", "pull_number": 17465, "instance_id": "django__django-17465", "issue_numbers": ["34830"], "base_commit": "8fcb9f1f106cf60d953d88aeaa412cc625c60029", "patch": "diff --git a/django/views/csrf.py b/django/views/csrf.py\nindex 3c572a621ade..adc629e843a9 100644\n--- a/django/views/csrf.py\n+++ b/django/views/csrf.py\n@@ -67,13 +67,14 @@ def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n     }\n     try:\n         t = loader.get_template(template_name)\n+        body = t.render(request=request)\n     except TemplateDoesNotExist:\n         if template_name == CSRF_FAILURE_TEMPLATE_NAME:\n             # If the default template doesn't exist, use the fallback template.\n             with builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh:\n                 t = Engine().from_string(fh.read())\n-            c = Context(c)\n+            body = t.render(Context(c))\n         else:\n             # Raise if a developer-specified template doesn't exist.\n             raise\n-    return HttpResponseForbidden(t.render(c))\n+    return HttpResponseForbidden(body)\ndiff --git a/django/views/defaults.py b/django/views/defaults.py\nindex ccad802a549c..8f56a8fb8953 100644\n--- a/django/views/defaults.py\n+++ b/django/views/defaults.py\n@@ -109,6 +109,7 @@ def bad_request(request, exception, template_name=ERROR_400_TEMPLATE_NAME):\n     \"\"\"\n     try:\n         template = loader.get_template(template_name)\n+        body = template.render(request=request)\n     except TemplateDoesNotExist:\n         if template_name != ERROR_400_TEMPLATE_NAME:\n             # Reraise if it's a missing custom template.\n@@ -118,7 +119,7 @@ def bad_request(request, exception, template_name=ERROR_400_TEMPLATE_NAME):\n         )\n     # No exception content is passed to the template, to not disclose any\n     # sensitive information.\n-    return HttpResponseBadRequest(template.render())\n+    return HttpResponseBadRequest(body)\n \n \n @requires_csrf_token\n", "test_patch": "diff --git a/tests/view_tests/tests/test_csrf.py b/tests/view_tests/tests/test_csrf.py\nindex ef4a50dd4508..af16ffd740e0 100644\n--- a/tests/view_tests/tests/test_csrf.py\n+++ b/tests/view_tests/tests/test_csrf.py\n@@ -112,6 +112,7 @@ def test_custom_template(self):\n         \"\"\"A custom CSRF_FAILURE_TEMPLATE_NAME is used.\"\"\"\n         response = self.client.post(\"/\")\n         self.assertContains(response, \"Test template for CSRF failure\", status_code=403)\n+        self.assertIs(response.wsgi_request, response.context.request)\n \n     def test_custom_template_does_not_exist(self):\n         \"\"\"An exception is raised if a nonexistent template is supplied.\"\"\"\ndiff --git a/tests/view_tests/tests/test_defaults.py b/tests/view_tests/tests/test_defaults.py\nindex f99066e5bb03..415a9a8c6746 100644\n--- a/tests/view_tests/tests/test_defaults.py\n+++ b/tests/view_tests/tests/test_defaults.py\n@@ -102,6 +102,29 @@ def test_bad_request(self):\n         response = bad_request(request, Exception())\n         self.assertContains(response, b\"<h1>Bad Request (400)</h1>\", status_code=400)\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                \"OPTIONS\": {\n+                    \"loaders\": [\n+                        (\n+                            \"django.template.loaders.locmem.Loader\",\n+                            {\n+                                \"400.html\": (\n+                                    \"This is a test template for a 400 error \"\n+                                ),\n+                            },\n+                        ),\n+                    ],\n+                },\n+            }\n+        ]\n+    )\n+    def test_custom_bad_request_template(self):\n+        response = self.client.get(\"/raises400/\")\n+        self.assertIs(response.wsgi_request, response.context[-1].request)\n+\n     @override_settings(\n         TEMPLATES=[\n             {\n", "problem_statement": "csrf_failure and bad_request views missing context processors\nDescription\n\t \nThe default csrf_failure view does not pass the request to the template rendering engine which means that all context processors are missing.\nThis is problematic if you override the default 403_csrf.html template without customising the view and are expecting the same default context you would get access to in other templates.\nI think the most straight forward way to replicate on a default Django deployment would be to add a custom 403_csrf.html template to your templates dir and attempt to access from some of Django's built-in context processors e.g. request or TIME_ZONE\nThe fix should be very straight forward unless there's a good reason not to pass the request to the template engine in this view. The view currently looks like this:\ndef csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n\t\"\"\"\n\tDefault view used when request fails CSRF protection\n\t\"\"\"\n\tfrom django.middleware.csrf import REASON_NO_CSRF_COOKIE, REASON_NO_REFERER\n\tc = {\n\t\t\"title\": _(\"Forbidden\"),\n\t\t...\n\t}\n\ttry:\n\t\tt = loader.get_template(template_name)\n\texcept TemplateDoesNotExist:\n\t\tif template_name == CSRF_FAILURE_TEMPLATE_NAME:\n\t\t\t# If the default template doesn't exist, use the fallback template.\n\t\t\twith builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh:\n\t\t\t\tt = Engine().from_string(fh.read())\n\t\t\tc = Context(c)\n\t\telse:\n\t\t\t# Raise if a developer-specified template doesn't exist.\n\t\t\traise\n\treturn HttpResponseForbidden(t.render(c))\nSo it just needs modifying to t.render(c, request)\n", "hints_text": [["Accepting since it's easily reproducible and the proposed fix makes sense. As far as I see, the change should not be backwards incompatible. Do note that the request should be pass in the context and not as an extra param: django/views/csrf.py a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6768 } 6869 try: 6970 t = loader.get_template(template_name)", 1694540217.0], ["Hello, please assign me this issue. I am working on django for about 3 years, I would love to get started contributing to this amazing repository.", 1694570272.0], ["Hello faizan2700, you can assign the ticket yourself once you are ready to start working on it. You can use the \"assign to\" box in this page. If you haven't already, please go over the \u200bcontributing documentation for submitting patches. Thank you for your interest in contributing!", 1694586795.0], ["Hey @faizan2700 As you didn't pick up this issue, if you don't mind, I assign it to myself.", 1695386838.0], ["I think based on the issue description, in addition to the request, maybe settings need to be provided to get the timezone. Something like that: \"more\": _(\"More information is available with DEBUG=True.\"), \"request\": request, \"settings\": reporter_filter.get_safe_settings(), } Like HttpResponseNotFound. Not sure, just curious!", 1695490629.0], ["Replying to Natalia Bidart: Accepting since it's easily reproducible and the proposed fix makes sense. As far as I see, the change should not be backwards compatible. Do note that the request should be pass in the context and not as an extra param: django/views/csrf.py a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6768 } 6869 try: 6970 t = loader.get_template(template_name) Sorry I had a slightly different understanding of the issue here but I'm not super familiar with the internals of Django's template rendering so tell me if I'm wrong. The render method takes an extra request argument as well as the context: def render(self, context=None, request=None): context = make_context( context, request, autoescape=self.backend.engine.autoescape ) try: return self.template.render(context) except TemplateDoesNotExist as exc: reraise(exc, self.backend) And that make_context does: def make_context(context, request=None, **kwargs): \"\"\" Create a suitable Context from a plain dict and optionally an HttpRequest. \"\"\" if context is not None and not isinstance(context, dict): raise TypeError( \"context must be a dict rather than %s.\" % context.__class__.__name__ ) if request is None: context = Context(context, **kwargs) else: # The following pattern is required to ensure values from # context override those from template context processors. original_context = context context = RequestContext(request, **kwargs) if original_context: context.push(original_context) return context And it is inside RequestContext rather than Context that the context processor magic happens: def bind_template(self, template): if self.template is not None: raise RuntimeError(\"Context is already bound to a template\") self.template = template # Set context processors according to the template engine's settings. processors = template.engine.template_context_processors + self._processors updates = {} for processor in processors: context = processor(self.request) So I thought the fix was to explicitly pass the request rather than add it to the context dict", 1695616593.0], ["Replying to Alex Henman: So I thought the fix was to explicitly pass the request rather than add it to the context dict My advice would be to try your patch and run the tests :-) (this is what I did when reproducing/accepting the ticket). Spoiler alert, some tests fail with: TypeError: Template.render() got an unexpected keyword argument 'request' This is why the Template class that is being used is the one defined in django/template/base.py which render method is defined as def render(self, context). I hope this helps!", 1695889471.0], ["Replying to Natalia Bidart: Replying to Alex Henman: So I thought the fix was to explicitly pass the request rather than add it to the context dict My advice would be to try your patch and run the tests :-) (this is what I did when reproducing/accepting the ticket). Spoiler alert, some tests fail with: TypeError: Template.render() got an unexpected keyword argument 'request' This is why the Template class that is being used is the one defined in django/template/base.py which render method is defined as def render(self, context). I hope this helps! Ahh I see: sorry I was just trying to help out those who were keen to take on working on a fix. I don't really have a working Django development environment set up so haven't been able to test out any of my suggested changes here. I think the key thing is that just passing request in to the context might not be enough as for my use case what I want is the context processors in my configured template backend. That is perhaps not as simple as I'd hoped then", 1695891650.0], ["In 535f7b5: Fixed #34830 -- Added request to csrf_failure view's template context. Co-authored-by: nessita <124304+nessita@\u2026>", 1699341319.0], ["As Alex stated in comment 8, I don't think passing the request like this causes the template to be rendered with RequestContext (which makes the values from context processors available in the template). The ticket summary should at least be retitled to reflect what was actually changed, e.g. \"Add request to csrf_failure view context.\"", 1699343270.0], ["Replying to Tim Graham: As Alex stated in comment 8, I don't think passing the request like this causes the template to be rendered with RequestContext (which makes the values from context processors available in the template). The ticket summary should at least be retitled to reflect what was actually changed, e.g. \"Add request to csrf_failure view context.\" Thank you Tim for the comment, indeed your have a valid point. I started drafting a possible solution so a RequestContext is used, I ended up with this diff. It still needs tests and some validation that this is an acceptable solution: django/views/csrf.py diff --git a/django/views/csrf.py b/django/views/csrf.py index e282ebb2b6..8da5f2b082 100644 a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6867 } 6968 try: 7069 t = loader.get_template(template_name) \u2026 \u2026 def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 7372 # If the default template doesn't exist, use the fallback template. 7473 with builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh: 7574 t = Engine().from_string(fh.read()) 76 c = Context(c) 7775 else: 7876 # Raise if a developer-specified template doesn't exist. 7977 raise 80 return HttpResponseForbidden(t.render(c)) 78 try: 79 response = t.render(c, request=request) 80 except TypeError: 81 c[\"request\"] = request 82 response = t.render(Context(c)) 83 return HttpResponseForbidden(response)}}}", 1699351843.0], ["I think this might be the way to go: django/views/csrf.py diff --git a/django/views/csrf.py b/django/views/csrf.py index 3c572a621a..60c564b809 100644 a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 7272 # If the default template doesn't exist, use the fallback template. 7373 with builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh: 7474 t = Engine().from_string(fh.read()) 75 c = Context(c) 75 body = t.render(Context(c)) 7676 else: 7777 # Raise if a developer-specified template doesn't exist. 7878 raise 79 return HttpResponseForbidden(t.render(c)) 79 else: 80 body = t.render(c, request) 81 return HttpResponseForbidden(body) See \u200bsimilar code in django.views.default.page_not_found.", 1699360047.0], ["Thank you Tim for the pointer. After some investigation, I see that server_error and bad_request suffer from the same issue (request is not passed when rendering the loaded/custom template). I did some git history analysis and both page_not_found and server_error rendering got a RequestContext added in #688 (\u200bcommit), but server_error got it quickly replaced by a Context in \u200bthis commit to \"lessen the chance that the 500 view would raise an error in itself\". OTOH, permission_denied was built with a RequestContext from the start when fixing #9847 in \u200bthis commit. Then, \u200bbad_request and \u200bcsrf_failure views were \"born\" without getting the request passed when rendering the template, and one could argue that these should be doing a similar template handling to what page_not_found is doing. So, at this point, I'm guessing we should leave server_error as is, but I'm inclined to fix both bad_request and csrf_failure views, effectively matching what page_not_found provides. I'm unclear on whether we should re-title this ticket as you originally proposed, and create a new one to \"fix\" the mentioned views; or re-title this ticket to something like \"Missing context processors in bad_request and csrf_failure views\" and tackle the same conceptual fix in one (follow up) PR. Any preference/guidance? Thanks again! I have TIL a lot today :partying_face:", 1699366777.0], ["Sounds good. I think I would revert the original commit here, then add a commit or two to fix the two views. It's simple enough that those commits could all be in the same PR.", 1699380473.0], ["In 5f2f12f6: Reverted \"Fixed #34830 -- Added request to csrf_failure view's template context.\" This reverts commit 535f7b5c6cea54a0796d85bbe213183d50002689.", 1699425888.0], ["De-assigning myself in case someone else can grab this before I get to it. The commentary explains in details what should be done to properly solve the ticket.", 1699426444.0], ["\u200bPR", 1699677270.0]], "created_at": "2023-11-11T10:31:55Z"}
{"repo": "django/django", "pull_number": 17463, "instance_id": "django__django-17463", "issue_numbers": ["34968"], "base_commit": "5e28cd3f2cfc31bf947a747256bc036f8f64888a", "patch": "diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py\nindex 5ab63455efcd..dfd406c35eac 100644\n--- a/django/http/multipartparser.py\n+++ b/django/http/multipartparser.py\n@@ -41,6 +41,7 @@ class InputStreamExhausted(Exception):\n FILE = \"file\"\n FIELD = \"field\"\n FIELD_TYPES = frozenset([FIELD, RAW])\n+MAX_TOTAL_HEADER_SIZE = 1024\n \n \n class MultiPartParser:\n@@ -682,21 +683,30 @@ def parse_boundary_stream(stream, max_header_size):\n     \"\"\"\n     Parse one and exactly one stream that encapsulates a boundary.\n     \"\"\"\n-    # Stream at beginning of header, look for end of header\n-    # and parse it if found. The header must fit within one\n-    # chunk.\n-    chunk = stream.read(max_header_size)\n-\n-    # 'find' returns the top of these four bytes, so we'll\n-    # need to munch them later to prevent them from polluting\n-    # the payload.\n-    header_end = chunk.find(b\"\\r\\n\\r\\n\")\n-\n-    if header_end == -1:\n-        # we find no header, so we just mark this fact and pass on\n-        # the stream verbatim\n+\n+    # Look for the end of headers and if not found extend the search to double\n+    # the size up to the MAX_TOTAL_HEADER_SIZE.\n+    headers_chunk_size = 1024\n+    while True:\n+        if headers_chunk_size > max_header_size:\n+            raise MultiPartParserError(\"Request max total header size exceeded.\")\n+\n+        # Stream at beginning of header, look for end of header and parse it if\n+        # found. The header must fit within one chunk.\n+        chunk = stream.read(headers_chunk_size)\n+        # 'find' returns the top of these four bytes, so munch them later to\n+        # prevent them from polluting the payload.\n+        header_end = chunk.find(b\"\\r\\n\\r\\n\")\n+        if header_end != -1:\n+            break\n+\n+        # Find no header, mark this fact and pass on the stream verbatim.\n         stream.unget(chunk)\n-        return (RAW, {}, stream)\n+        # No more data to read.\n+        if len(chunk) < headers_chunk_size:\n+            return (RAW, {}, stream)\n+        # Double the chunk size.\n+        headers_chunk_size *= 2\n \n     header = chunk[:header_end]\n \n@@ -740,4 +750,4 @@ def __iter__(self):\n         boundarystream = InterBoundaryIter(self._stream, self._separator)\n         for sub_stream in boundarystream:\n             # Iterate over each part\n-            yield parse_boundary_stream(sub_stream, 1024)\n+            yield parse_boundary_stream(sub_stream, MAX_TOTAL_HEADER_SIZE)\n", "test_patch": "diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex 693efc4c62b5..9fdef5732498 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -16,6 +16,7 @@\n from django.core.files.uploadedfile import SimpleUploadedFile, UploadedFile\n from django.http.multipartparser import (\n     FILE,\n+    MAX_TOTAL_HEADER_SIZE,\n     MultiPartParser,\n     MultiPartParserError,\n     Parser,\n@@ -603,6 +604,57 @@ def __iter__(self):\n             temp_path = response.json()[\"temp_path\"]\n             self.assertIs(os.path.exists(temp_path), False)\n \n+    def test_upload_large_header_fields(self):\n+        payload = client.FakePayload(\n+            \"\\r\\n\".join(\n+                [\n+                    \"--\" + client.BOUNDARY,\n+                    'Content-Disposition: form-data; name=\"my_file\"; '\n+                    'filename=\"test.txt\"',\n+                    \"Content-Type: text/plain\",\n+                    \"X-Long-Header: %s\" % (\"-\" * 500),\n+                    \"\",\n+                    \"file contents\",\n+                    \"--\" + client.BOUNDARY + \"--\\r\\n\",\n+                ]\n+            ),\n+        )\n+        r = {\n+            \"CONTENT_LENGTH\": len(payload),\n+            \"CONTENT_TYPE\": client.MULTIPART_CONTENT,\n+            \"PATH_INFO\": \"/echo_content/\",\n+            \"REQUEST_METHOD\": \"POST\",\n+            \"wsgi.input\": payload,\n+        }\n+        response = self.client.request(**r)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.json(), {\"my_file\": \"file contents\"})\n+\n+    def test_upload_header_fields_too_large(self):\n+        payload = client.FakePayload(\n+            \"\\r\\n\".join(\n+                [\n+                    \"--\" + client.BOUNDARY,\n+                    'Content-Disposition: form-data; name=\"my_file\"; '\n+                    'filename=\"test.txt\"',\n+                    \"Content-Type: text/plain\",\n+                    \"X-Long-Header: %s\" % (\"-\" * (MAX_TOTAL_HEADER_SIZE + 1)),\n+                    \"\",\n+                    \"file contents\",\n+                    \"--\" + client.BOUNDARY + \"--\\r\\n\",\n+                ]\n+            ),\n+        )\n+        r = {\n+            \"CONTENT_LENGTH\": len(payload),\n+            \"CONTENT_TYPE\": client.MULTIPART_CONTENT,\n+            \"PATH_INFO\": \"/echo_content/\",\n+            \"REQUEST_METHOD\": \"POST\",\n+            \"wsgi.input\": payload,\n+        }\n+        response = self.client.request(**r)\n+        self.assertEqual(response.status_code, 400)\n+\n     def test_fileupload_getlist(self):\n         file = tempfile.NamedTemporaryFile\n         with file() as file1, file() as file2, file() as file2a:\ndiff --git a/tests/requests_tests/tests.py b/tests/requests_tests/tests.py\nindex 228198ae8a87..035552713c55 100644\n--- a/tests/requests_tests/tests.py\n+++ b/tests/requests_tests/tests.py\n@@ -11,7 +11,7 @@\n     RawPostDataException,\n     UnreadablePostError,\n )\n-from django.http.multipartparser import MultiPartParserError\n+from django.http.multipartparser import MAX_TOTAL_HEADER_SIZE, MultiPartParserError\n from django.http.request import split_domain_port\n from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.client import BOUNDARY, MULTIPART_CONTENT, FakePayload\n@@ -691,6 +691,31 @@ def test_multipart_non_ascii_content_type(self):\n         with self.assertRaisesMessage(MultiPartParserError, msg):\n             request.POST\n \n+    def test_multipart_with_header_fields_too_large(self):\n+        payload = FakePayload(\n+            \"\\r\\n\".join(\n+                [\n+                    \"--boundary\",\n+                    'Content-Disposition: form-data; name=\"name\"',\n+                    \"X-Long-Header: %s\" % (\"-\" * (MAX_TOTAL_HEADER_SIZE + 1)),\n+                    \"\",\n+                    \"value\",\n+                    \"--boundary--\",\n+                ]\n+            )\n+        )\n+        request = WSGIRequest(\n+            {\n+                \"REQUEST_METHOD\": \"POST\",\n+                \"CONTENT_TYPE\": \"multipart/form-data; boundary=boundary\",\n+                \"CONTENT_LENGTH\": len(payload),\n+                \"wsgi.input\": payload,\n+            }\n+        )\n+        msg = \"Request max total header size exceeded.\"\n+        with self.assertRaisesMessage(MultiPartParserError, msg):\n+            request.POST\n+\n     def test_POST_connection_error(self):\n         \"\"\"\n         If wsgi.input.read() raises an exception while trying to read() the\n", "problem_statement": "MultiPartParser silent large header fields size failures\nDescription\n\t\t\n(last modified by Standa Opichal)\t\t\nThe MultiPartParser silently ignores parts of which the http header fields exceed 1024 bytes. This causes file uploads to 'ignore' the attached file without receiving any type of error or exception.\nThis is caused by the 1024 value being hardcoded here \u200bhttps://github.com/django/django/blob/main/django/http/multipartparser.py#L743\nHere is a common http header fields limits across popular web servers (from \u200bhttps://stackoverflow.com/a/60623751/2448773):\nApache - 8K\nNginx - 4K-8K\nIIS - 8K-16K\nTomcat - 8K \u2013 48K\nNode (<13) - 8K; (>13) - 16K\nAlso reported at \u200bhttps://stackoverflow.com/questions/70572148/django-silently-discarding-uploaded-files-with-long-paths\n", "hints_text": [], "created_at": "2023-11-10T18:52:51Z"}
{"repo": "django/django", "pull_number": 17456, "instance_id": "django__django-17456", "issue_numbers": ["34830"], "base_commit": "535f7b5c6cea54a0796d85bbe213183d50002689", "patch": "diff --git a/django/views/csrf.py b/django/views/csrf.py\nindex e282ebb2b677..3c572a621ade 100644\n--- a/django/views/csrf.py\n+++ b/django/views/csrf.py\n@@ -64,7 +64,6 @@ def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n         \"DEBUG\": settings.DEBUG,\n         \"docs_version\": get_docs_version(),\n         \"more\": _(\"More information is available with DEBUG=True.\"),\n-        \"request\": request,\n     }\n     try:\n         t = loader.get_template(template_name)\n", "test_patch": "diff --git a/tests/view_tests/tests/test_csrf.py b/tests/view_tests/tests/test_csrf.py\nindex d85c1b69dd2d..ef4a50dd4508 100644\n--- a/tests/view_tests/tests/test_csrf.py\n+++ b/tests/view_tests/tests/test_csrf.py\n@@ -131,7 +131,3 @@ def test_template_encoding(self):\n         with mock.patch.object(Path, \"open\") as m:\n             csrf_failure(mock.MagicMock(), mock.Mock())\n             m.assert_called_once_with(encoding=\"utf-8\")\n-\n-    def test_csrf_response_has_request_context_processor(self):\n-        response = self.client.post(\"/\")\n-        self.assertIs(response.wsgi_request, response.context.get(\"request\"))\n", "problem_statement": "csrf_failure and bad_request views missing context processors\nDescription\n\t \nThe default csrf_failure view does not pass the request to the template rendering engine which means that all context processors are missing.\nThis is problematic if you override the default 403_csrf.html template without customising the view and are expecting the same default context you would get access to in other templates.\nI think the most straight forward way to replicate on a default Django deployment would be to add a custom 403_csrf.html template to your templates dir and attempt to access from some of Django's built-in context processors e.g. request or TIME_ZONE\nThe fix should be very straight forward unless there's a good reason not to pass the request to the template engine in this view. The view currently looks like this:\ndef csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n\t\"\"\"\n\tDefault view used when request fails CSRF protection\n\t\"\"\"\n\tfrom django.middleware.csrf import REASON_NO_CSRF_COOKIE, REASON_NO_REFERER\n\tc = {\n\t\t\"title\": _(\"Forbidden\"),\n\t\t...\n\t}\n\ttry:\n\t\tt = loader.get_template(template_name)\n\texcept TemplateDoesNotExist:\n\t\tif template_name == CSRF_FAILURE_TEMPLATE_NAME:\n\t\t\t# If the default template doesn't exist, use the fallback template.\n\t\t\twith builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh:\n\t\t\t\tt = Engine().from_string(fh.read())\n\t\t\tc = Context(c)\n\t\telse:\n\t\t\t# Raise if a developer-specified template doesn't exist.\n\t\t\traise\n\treturn HttpResponseForbidden(t.render(c))\nSo it just needs modifying to t.render(c, request)\n", "hints_text": [["Accepting since it's easily reproducible and the proposed fix makes sense. As far as I see, the change should not be backwards incompatible. Do note that the request should be pass in the context and not as an extra param: django/views/csrf.py a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6768 } 6869 try: 6970 t = loader.get_template(template_name)", 1694540217.0], ["Hello, please assign me this issue. I am working on django for about 3 years, I would love to get started contributing to this amazing repository.", 1694570272.0], ["Hello faizan2700, you can assign the ticket yourself once you are ready to start working on it. You can use the \"assign to\" box in this page. If you haven't already, please go over the \u200bcontributing documentation for submitting patches. Thank you for your interest in contributing!", 1694586795.0], ["Hey @faizan2700 As you didn't pick up this issue, if you don't mind, I assign it to myself.", 1695386838.0], ["I think based on the issue description, in addition to the request, maybe settings need to be provided to get the timezone. Something like that: \"more\": _(\"More information is available with DEBUG=True.\"), \"request\": request, \"settings\": reporter_filter.get_safe_settings(), } Like HttpResponseNotFound. Not sure, just curious!", 1695490629.0], ["Replying to Natalia Bidart: Accepting since it's easily reproducible and the proposed fix makes sense. As far as I see, the change should not be backwards compatible. Do note that the request should be pass in the context and not as an extra param: django/views/csrf.py a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6768 } 6869 try: 6970 t = loader.get_template(template_name) Sorry I had a slightly different understanding of the issue here but I'm not super familiar with the internals of Django's template rendering so tell me if I'm wrong. The render method takes an extra request argument as well as the context: def render(self, context=None, request=None): context = make_context( context, request, autoescape=self.backend.engine.autoescape ) try: return self.template.render(context) except TemplateDoesNotExist as exc: reraise(exc, self.backend) And that make_context does: def make_context(context, request=None, **kwargs): \"\"\" Create a suitable Context from a plain dict and optionally an HttpRequest. \"\"\" if context is not None and not isinstance(context, dict): raise TypeError( \"context must be a dict rather than %s.\" % context.__class__.__name__ ) if request is None: context = Context(context, **kwargs) else: # The following pattern is required to ensure values from # context override those from template context processors. original_context = context context = RequestContext(request, **kwargs) if original_context: context.push(original_context) return context And it is inside RequestContext rather than Context that the context processor magic happens: def bind_template(self, template): if self.template is not None: raise RuntimeError(\"Context is already bound to a template\") self.template = template # Set context processors according to the template engine's settings. processors = template.engine.template_context_processors + self._processors updates = {} for processor in processors: context = processor(self.request) So I thought the fix was to explicitly pass the request rather than add it to the context dict", 1695616593.0], ["Replying to Alex Henman: So I thought the fix was to explicitly pass the request rather than add it to the context dict My advice would be to try your patch and run the tests :-) (this is what I did when reproducing/accepting the ticket). Spoiler alert, some tests fail with: TypeError: Template.render() got an unexpected keyword argument 'request' This is why the Template class that is being used is the one defined in django/template/base.py which render method is defined as def render(self, context). I hope this helps!", 1695889471.0], ["Replying to Natalia Bidart: Replying to Alex Henman: So I thought the fix was to explicitly pass the request rather than add it to the context dict My advice would be to try your patch and run the tests :-) (this is what I did when reproducing/accepting the ticket). Spoiler alert, some tests fail with: TypeError: Template.render() got an unexpected keyword argument 'request' This is why the Template class that is being used is the one defined in django/template/base.py which render method is defined as def render(self, context). I hope this helps! Ahh I see: sorry I was just trying to help out those who were keen to take on working on a fix. I don't really have a working Django development environment set up so haven't been able to test out any of my suggested changes here. I think the key thing is that just passing request in to the context might not be enough as for my use case what I want is the context processors in my configured template backend. That is perhaps not as simple as I'd hoped then", 1695891650.0], ["In 535f7b5: Fixed #34830 -- Added request to csrf_failure view's template context. Co-authored-by: nessita <124304+nessita@\u2026>", 1699341319.0], ["As Alex stated in comment 8, I don't think passing the request like this causes the template to be rendered with RequestContext (which makes the values from context processors available in the template). The ticket summary should at least be retitled to reflect what was actually changed, e.g. \"Add request to csrf_failure view context.\"", 1699343270.0], ["Replying to Tim Graham: As Alex stated in comment 8, I don't think passing the request like this causes the template to be rendered with RequestContext (which makes the values from context processors available in the template). The ticket summary should at least be retitled to reflect what was actually changed, e.g. \"Add request to csrf_failure view context.\" Thank you Tim for the comment, indeed your have a valid point. I started drafting a possible solution so a RequestContext is used, I ended up with this diff. It still needs tests and some validation that this is an acceptable solution: django/views/csrf.py diff --git a/django/views/csrf.py b/django/views/csrf.py index e282ebb2b6..8da5f2b082 100644 a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6867 } 6968 try: 7069 t = loader.get_template(template_name) \u2026 \u2026 def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 7372 # If the default template doesn't exist, use the fallback template. 7473 with builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh: 7574 t = Engine().from_string(fh.read()) 76 c = Context(c) 7775 else: 7876 # Raise if a developer-specified template doesn't exist. 7977 raise 80 return HttpResponseForbidden(t.render(c)) 78 try: 79 response = t.render(c, request=request) 80 except TypeError: 81 c[\"request\"] = request 82 response = t.render(Context(c)) 83 return HttpResponseForbidden(response)}}}", 1699351843.0], ["I think this might be the way to go: django/views/csrf.py diff --git a/django/views/csrf.py b/django/views/csrf.py index 3c572a621a..60c564b809 100644 a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 7272 # If the default template doesn't exist, use the fallback template. 7373 with builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh: 7474 t = Engine().from_string(fh.read()) 75 c = Context(c) 75 body = t.render(Context(c)) 7676 else: 7777 # Raise if a developer-specified template doesn't exist. 7878 raise 79 return HttpResponseForbidden(t.render(c)) 79 else: 80 body = t.render(c, request) 81 return HttpResponseForbidden(body) See \u200bsimilar code in django.views.default.page_not_found.", 1699360047.0], ["Thank you Tim for the pointer. After some investigation, I see that server_error and bad_request suffer from the same issue (request is not passed when rendering the loaded/custom template). I did some git history analysis and both page_not_found and server_error rendering got a RequestContext added in #688 (\u200bcommit), but server_error got it quickly replaced by a Context in \u200bthis commit to \"lessen the chance that the 500 view would raise an error in itself\". OTOH, permission_denied was built with a RequestContext from the start when fixing #9847 in \u200bthis commit. Then, \u200bbad_request and \u200bcsrf_failure views were \"born\" without getting the request passed when rendering the template, and one could argue that these should be doing a similar template handling to what page_not_found is doing. So, at this point, I'm guessing we should leave server_error as is, but I'm inclined to fix both bad_request and csrf_failure views, effectively matching what page_not_found provides. I'm unclear on whether we should re-title this ticket as you originally proposed, and create a new one to \"fix\" the mentioned views; or re-title this ticket to something like \"Missing context processors in bad_request and csrf_failure views\" and tackle the same conceptual fix in one (follow up) PR. Any preference/guidance? Thanks again! I have TIL a lot today :partying_face:", 1699366777.0], ["Sounds good. I think I would revert the original commit here, then add a commit or two to fix the two views. It's simple enough that those commits could all be in the same PR.", 1699380473.0], ["In 5f2f12f6: Reverted \"Fixed #34830 -- Added request to csrf_failure view's template context.\" This reverts commit 535f7b5c6cea54a0796d85bbe213183d50002689.", 1699425888.0], ["De-assigning myself in case someone else can grab this before I get to it. The commentary explains in details what should be done to properly solve the ticket.", 1699426444.0]], "created_at": "2023-11-08T11:54:15Z"}
{"repo": "django/django", "pull_number": 17455, "instance_id": "django__django-17455", "issue_numbers": ["34919"], "base_commit": "ad41f1c53aa9f2c938df32e4386d8a80138923fc", "patch": "diff --git a/django/contrib/admindocs/templates/admin_doc/model_detail.html b/django/contrib/admindocs/templates/admin_doc/model_detail.html\nindex ebeeafc8e809..d4a380aa3898 100644\n--- a/django/contrib/admindocs/templates/admin_doc/model_detail.html\n+++ b/django/contrib/admindocs/templates/admin_doc/model_detail.html\n@@ -32,9 +32,9 @@ <h3>{% translate 'Fields' %}</h3>\n <table class=\"model\">\n <thead>\n <tr>\n-    <th>{% translate 'Field' %}</th>\n-    <th>{% translate 'Type' %}</th>\n-    <th>{% translate 'Description' %}</th>\n+    <th scope=\"col\">{% translate 'Field' %}</th>\n+    <th scope=\"col\">{% translate 'Type' %}</th>\n+    <th scope=\"col\">{% translate 'Description' %}</th>\n </tr>\n </thead>\n <tbody>\n@@ -55,9 +55,9 @@ <h3>{% translate 'Methods with arguments' %}</h3>\n <table class=\"model\">\n <thead>\n <tr>\n-    <th>{% translate 'Method' %}</th>\n-    <th>{% translate 'Arguments' %}</th>\n-    <th>{% translate 'Description' %}</th>\n+    <th scope=\"col\">{% translate 'Method' %}</th>\n+    <th scope=\"col\">{% translate 'Arguments' %}</th>\n+    <th scope=\"col\">{% translate 'Description' %}</th>\n </tr>\n </thead>\n <tbody>\ndiff --git a/django/contrib/admindocs/templates/admin_doc/model_index.html b/django/contrib/admindocs/templates/admin_doc/model_index.html\nindex 2342be4ba6f2..b3ecb7ce9c2b 100644\n--- a/django/contrib/admindocs/templates/admin_doc/model_index.html\n+++ b/django/contrib/admindocs/templates/admin_doc/model_index.html\n@@ -27,7 +27,7 @@ <h2 id=\"app-{{ group.grouper.label }}\">{{ group.grouper.verbose_name }} ({{ grou\n <table class=\"xfull\">\n {% for model in group.list %}\n <tr>\n-<th><a href=\"{% url 'django-admindocs-models-detail' app_label=model.app_label model_name=model.model_name %}\">{{ model.object_name }}</a></th>\n+<th scope=\"col\"><a href=\"{% url 'django-admindocs-models-detail' app_label=model.app_label model_name=model.model_name %}\">{{ model.object_name }}</a></th>\n </tr>\n {% endfor %}\n </table>\n", "test_patch": "diff --git a/tests/admin_docs/test_views.py b/tests/admin_docs/test_views.py\nindex 7969f6cd42f9..bf469181b303 100644\n--- a/tests/admin_docs/test_views.py\n+++ b/tests/admin_docs/test_views.py\n@@ -240,6 +240,20 @@ def setUp(self):\n                 reverse(\"django-admindocs-models-detail\", args=[\"admin_docs\", \"Person\"])\n             )\n \n+    def test_table_headers(self):\n+        tests = [\n+            (\"Method\", 1),\n+            (\"Arguments\", 1),\n+            (\"Description\", 2),\n+            (\"Field\", 1),\n+            (\"Type\", 1),\n+            (\"Method\", 1),\n+        ]\n+        for table_header, count in tests:\n+            self.assertContains(\n+                self.response, f'<th scope=\"col\">{table_header}</th>', count=count\n+            )\n+\n     def test_method_excludes(self):\n         \"\"\"\n         Methods that begin with strings defined in\n", "problem_statement": "Missing scope attribute in admin doc table headers.\nDescription\n\t\t\n(last modified by Louis-Cloud)\t\t\nThere are a number of tables throughout \u200bDjango's admin docs that are lacking the scope attribute. Having this attribute in the table headers makes table navigation easier for a screen reader user. \nAcceptance Criteria\nAll table column header (th) needs to have a scope = \"col\" attribute.\nAll table row headers (first column) should have a scope = \"row\" attribute\nRelevant Files:\ndjango/contrib/admindocs/templates/admin_doc/model_detail.html\ndjango/contrib/admindocs/templates/admin_doc/model_index.html\nFor more information\n\u200bW3 - Tables with Two Headers\n\u200bMDN Web Docs - Using column and row headers\n", "hints_text": [], "created_at": "2023-11-08T09:36:59Z"}
{"repo": "django/django", "pull_number": 17452, "instance_id": "django__django-17452", "issue_numbers": ["34952"], "base_commit": "b863c5ffde0bafa5eaa9f262103eaeb71877787c", "patch": "diff --git a/django/core/management/commands/compilemessages.py b/django/core/management/commands/compilemessages.py\nindex 9ed3ef7c31e7..eddf31b794dd 100644\n--- a/django/core/management/commands/compilemessages.py\n+++ b/django/core/management/commands/compilemessages.py\n@@ -91,7 +91,8 @@ def handle(self, **options):\n \n         # Walk entire tree, looking for locale directories\n         for dirpath, dirnames, filenames in os.walk(\".\", topdown=True):\n-            for dirname in dirnames:\n+            # As we may modify dirnames, iterate through a copy of it instead\n+            for dirname in list(dirnames):\n                 if is_ignored_path(\n                     os.path.normpath(os.path.join(dirpath, dirname)), ignore_patterns\n                 ):\n", "test_patch": "diff --git a/tests/i18n/test_compilation.py b/tests/i18n/test_compilation.py\nindex ab74927c402f..7da95ba9e98c 100644\n--- a/tests/i18n/test_compilation.py\n+++ b/tests/i18n/test_compilation.py\n@@ -195,6 +195,64 @@ def test_ignores_based_on_pattern(self):\n         self.assertNoneExist(self.CACHE_DIR, [\"en\", \"fr\", \"it\"])\n         self.assertNoneExist(self.NESTED_DIR, [\"en\", \"fr\", \"it\"])\n \n+    def test_no_dirs_accidentally_skipped(self):\n+        os_walk_results = [\n+            # To discover .po filepaths, compilemessages uses with a starting list of\n+            # basedirs to inspect, which in this scenario are:\n+            #   [\"conf/locale\", \"locale\"]\n+            # Then os.walk is used to discover other locale dirs, ignoring dirs matching\n+            # `ignore_patterns`. Mock the results to place an ignored directory directly\n+            # before and after a directory named \"locale\".\n+            [(\"somedir\", [\"ignore\", \"locale\", \"ignore\"], [])],\n+            # This will result in three basedirs discovered:\n+            #   [\"conf/locale\", \"locale\", \"somedir/locale\"]\n+            # os.walk is called for each locale in each basedir looking for .po files.\n+            # In this scenario, we need to mock os.walk results for \"en\", \"fr\", and \"it\"\n+            # locales for each basedir:\n+            [(\"exclude/locale/LC_MESSAGES\", [], [\"en.po\"])],\n+            [(\"exclude/locale/LC_MESSAGES\", [], [\"fr.po\"])],\n+            [(\"exclude/locale/LC_MESSAGES\", [], [\"it.po\"])],\n+            [(\"exclude/conf/locale/LC_MESSAGES\", [], [\"en.po\"])],\n+            [(\"exclude/conf/locale/LC_MESSAGES\", [], [\"fr.po\"])],\n+            [(\"exclude/conf/locale/LC_MESSAGES\", [], [\"it.po\"])],\n+            [(\"exclude/somedir/locale/LC_MESSAGES\", [], [\"en.po\"])],\n+            [(\"exclude/somedir/locale/LC_MESSAGES\", [], [\"fr.po\"])],\n+            [(\"exclude/somedir/locale/LC_MESSAGES\", [], [\"it.po\"])],\n+        ]\n+\n+        module_path = \"django.core.management.commands.compilemessages\"\n+        with mock.patch(f\"{module_path}.os.walk\", side_effect=os_walk_results):\n+            with mock.patch(f\"{module_path}.os.path.isdir\", return_value=True):\n+                with mock.patch(\n+                    f\"{module_path}.Command.compile_messages\"\n+                ) as mock_compile_messages:\n+                    call_command(\"compilemessages\", ignore=[\"ignore\"], verbosity=4)\n+\n+        expected = [\n+            (\n+                [\n+                    (\"exclude/locale/LC_MESSAGES\", \"en.po\"),\n+                    (\"exclude/locale/LC_MESSAGES\", \"fr.po\"),\n+                    (\"exclude/locale/LC_MESSAGES\", \"it.po\"),\n+                ],\n+            ),\n+            (\n+                [\n+                    (\"exclude/conf/locale/LC_MESSAGES\", \"en.po\"),\n+                    (\"exclude/conf/locale/LC_MESSAGES\", \"fr.po\"),\n+                    (\"exclude/conf/locale/LC_MESSAGES\", \"it.po\"),\n+                ],\n+            ),\n+            (\n+                [\n+                    (\"exclude/somedir/locale/LC_MESSAGES\", \"en.po\"),\n+                    (\"exclude/somedir/locale/LC_MESSAGES\", \"fr.po\"),\n+                    (\"exclude/somedir/locale/LC_MESSAGES\", \"it.po\"),\n+                ],\n+            ),\n+        ]\n+        self.assertEqual([c.args for c in mock_compile_messages.mock_calls], expected)\n+\n \n class CompilationErrorHandling(MessageCompilationTests):\n     def test_error_reported_by_msgfmt(self):\n", "problem_statement": "manage.py compilemessages may skip locale folders if ignore is used.\nDescription\n\t \nmanage.py compilemessages uses os.walk and iterates through the same dirnames instance that it removes members from when the ignore option is used. \nThis will cause compilemessages to accidentally ignore a locale directory that directly follows a skipped directory in the list. Unfortunately it is not easy to predict when this will occur or which directories may be affected as os.walk provides the list of dirnames in 'arbitrary' order according to the python docs.\nI've provided the miniscule patch to fix this as well as a much lengthier regression test, however I'm not positive that the test is capable of recreating the correct conditions on all operating systems. I've tested on OSX only. Regardless, the issue at hand is a basic language error (modifying a value that you are iterating through) and the fix is extremely simple (i.e. copy dirnames before iterating, in my patch I just wrap it in list()), so this should not be a controversial patch.\nNote: this was originally mentioned as a comment on my other ticket https://code.djangoproject.com/ticket/34925, I'm separating it for clarity and I will attach the PR here.\n", "hints_text": [["Here is the PR: \u200bhttps://github.com/django/django/pull/17452", 1699335331.0], ["Thank you! Accepting.", 1699336433.0]], "created_at": "2023-11-07T11:35:08Z"}
{"repo": "django/django", "pull_number": 17448, "instance_id": "django__django-17448", "issue_numbers": ["34457"], "base_commit": "427f0ed98d7ecf4381cebd4f7773f761e2446851", "patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 35661d49972d..22498af3c07d 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -72,7 +72,7 @@ def add_arguments(self, parser):\n             dest=\"check_changes\",\n             help=(\n                 \"Exit with a non-zero status if model changes are missing migrations \"\n-                \"and don't actually write them.\"\n+                \"and don't actually write them. Implies --dry-run.\"\n             ),\n         )\n         parser.add_argument(\n@@ -114,6 +114,8 @@ def handle(self, *app_labels, **options):\n             raise CommandError(\"The migration name must be a valid Python identifier.\")\n         self.include_header = options[\"include_header\"]\n         check_changes = options[\"check_changes\"]\n+        if check_changes:\n+            self.dry_run = True\n         self.scriptable = options[\"scriptable\"]\n         self.update = options[\"update\"]\n         # If logs and prompts are diverted to stderr, remove the ERROR style.\n@@ -251,12 +253,12 @@ def handle(self, *app_labels, **options):\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n-            if check_changes:\n-                sys.exit(1)\n             if self.update:\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n+            if check_changes:\n+                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\ndiff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt\nindex 86cac790faaa..7f3fa271c874 100644\n--- a/docs/ref/django-admin.txt\n+++ b/docs/ref/django-admin.txt\n@@ -742,7 +742,7 @@ Generate migration files without Django version and timestamp header.\n .. django-admin-option:: --check\n \n Makes ``makemigrations`` exit with a non-zero status when model changes without\n-migrations are detected.\n+migrations are detected. Implies ``--dry-run``.\n \n .. django-admin-option:: --scriptable\n \ndiff --git a/docs/releases/4.2.8.txt b/docs/releases/4.2.8.txt\nindex b8bf62cdc979..5804589408ce 100644\n--- a/docs/releases/4.2.8.txt\n+++ b/docs/releases/4.2.8.txt\n@@ -9,4 +9,5 @@ Django 4.2.8 fixes several bugs in 4.2.7.\n Bugfixes\n ========\n \n-* ...\n+* Fixed a regression in Django 4.2 that caused :option:`makemigrations --check`\n+  to stop displaying pending migrations (:ticket:`34457`).\n", "test_patch": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 387cef924af3..a9c1cdf8938d 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2392,20 +2392,35 @@ def test_makemigrations_with_invalid_custom_name(self):\n                 \"makemigrations\", \"migrations\", \"--name\", \"invalid name\", \"--empty\"\n             )\n \n-    def test_makemigrations_check(self):\n+    def test_makemigrations_check_with_changes(self):\n         \"\"\"\n         makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n         \"\"\"\n+        out = io.StringIO()\n         with self.temporary_migration_module() as tmpdir:\n-            with self.assertRaises(SystemExit):\n-                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n-            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\n+                    \"makemigrations\",\n+                    \"--check\",\n+                    \"migrations\",\n+                    stdout=out,\n+                )\n+            self.assertEqual(os.listdir(tmpdir), [\"__init__.py\"])\n+        self.assertEqual(cm.exception.code, 1)\n+        self.assertIn(\"Migrations for 'migrations':\", out.getvalue())\n \n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when there are no\n+        changes.\n+        \"\"\"\n+        out = io.StringIO()\n         with self.temporary_migration_module(\n             module=\"migrations.test_migrations_no_changes\"\n         ):\n-            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", stdout=out)\n+        self.assertEqual(\"No changes detected in app 'migrations'\\n\", out.getvalue())\n \n     def test_makemigrations_migration_path_output(self):\n         \"\"\"\n", "problem_statement": "makemigrations --check no longer prints the changes\nDescription\n\t \nAs a result of #34051 the --check flag on makemigrations simply exits 1 without writing any changes.\nThis makes sense as it's consistent with other uses of --check.\nHowever one consequence of this change is that my CI server no longer prints the changes it thinks I need to make \u2013\u00a0and this makes the situations where the local dev & CI are different, harder to debug.\nI'd like to propose reverting this change and instead forcing --dry-run to be set if --check is supplied. This way makemigrations goes through the motions of what it needs to write, outputting those changes to the log but the dry flag prevents any migrations from being written.\n", "hints_text": [["PR: \u200bhttps://github.com/django/django/pull/16723", 1680595307.0], ["Thanks for the ticket, however I don't think it's worth the inconsistency. You could re-run makemigrations when makemigrations --check exists with 1, e.g. RESULT=`makemigrations --check` if [ \"$RESULT\" -gt 0 ]; then makemigrations --dry-run fi; exit $RESULT", 1680600564.0], ["Or instead of a bash script, use something like if: failure() in your CI pipeline. Forcing --dry-run to once again be provided when --check is provided goes against the original motivation for the change: it's unintuitive (to me) that for --check you would need to guard against files being written your tree and therefore even know about the --dry-run option.", 1680682166.0], ["Forcing --dry-run to once again be provided when --check is provided goes against the original motivation for the change By forcing I mean makemigrations does the forcing\u2026 see the PR for what I mean ;)", 1680682542.0], ["Accepting based on \u200bforum discussion.", 1699002165.0], ["Marking as a release blocker because I consider it a regression, as discussed on the forum.", 1699199956.0], ["\u200bnew PR", 1699204504.0]], "created_at": "2023-11-05T22:03:55Z"}
{"repo": "django/django", "pull_number": 17447, "instance_id": "django__django-17447", "issue_numbers": ["14611"], "base_commit": "e76cc93b0168fa3abbafb9af1ab4535814b751f0", "patch": "diff --git a/docs/releases/5.1.txt b/docs/releases/5.1.txt\nindex b90808be3c72..dc48321f5cc8 100644\n--- a/docs/releases/5.1.txt\n+++ b/docs/releases/5.1.txt\n@@ -224,6 +224,17 @@ Tests\n * The Django test runner now supports a ``--screenshots`` option to save\n   screenshots for Selenium tests.\n \n+* The :class:`~django.test.RequestFactory`,\n+  :class:`~django.test.AsyncRequestFactory`, :class:`~django.test.Client`, and\n+  :class:`~django.test.AsyncClient` classes now support the ``query_params``\n+  parameter, which accepts a dictionary of query string keys and values. This\n+  allows setting query strings on any HTTP methods more easily.\n+\n+  .. code-block:: python\n+\n+     self.client.post(\"/items/1\", query_params={\"action\": \"delete\"})\n+     await self.async_client.post(\"/items/1\", query_params={\"action\": \"delete\"})\n+\n URLs\n ~~~~\n \n", "test_patch": "diff --git a/django/test/client.py b/django/test/client.py\nindex 766b60863fc3..48e058870283 100644\n--- a/django/test/client.py\n+++ b/django/test/client.py\n@@ -381,13 +381,22 @@ class RequestFactory:\n     just as if that view had been hooked up using a URLconf.\n     \"\"\"\n \n-    def __init__(self, *, json_encoder=DjangoJSONEncoder, headers=None, **defaults):\n+    def __init__(\n+        self,\n+        *,\n+        json_encoder=DjangoJSONEncoder,\n+        headers=None,\n+        query_params=None,\n+        **defaults,\n+    ):\n         self.json_encoder = json_encoder\n         self.defaults = defaults\n         self.cookies = SimpleCookie()\n         self.errors = BytesIO()\n         if headers:\n             self.defaults.update(HttpHeaders.to_wsgi_names(headers))\n+        if query_params:\n+            self.defaults[\"QUERY_STRING\"] = urlencode(query_params, doseq=True)\n \n     def _base_environ(self, **request):\n         \"\"\"\n@@ -459,18 +468,21 @@ def _get_path(self, parsed):\n         # Refs comment in `get_bytes_from_wsgi()`.\n         return path.decode(\"iso-8859-1\")\n \n-    def get(self, path, data=None, secure=False, *, headers=None, **extra):\n+    def get(\n+        self, path, data=None, secure=False, *, headers=None, query_params=None, **extra\n+    ):\n         \"\"\"Construct a GET request.\"\"\"\n-        data = {} if data is None else data\n+        if query_params and data:\n+            raise ValueError(\"query_params and data arguments are mutually exclusive.\")\n+        query_params = data or query_params\n+        query_params = {} if query_params is None else query_params\n         return self.generic(\n             \"GET\",\n             path,\n             secure=secure,\n             headers=headers,\n-            **{\n-                \"QUERY_STRING\": urlencode(data, doseq=True),\n-                **extra,\n-            },\n+            query_params=query_params,\n+            **extra,\n         )\n \n     def post(\n@@ -481,6 +493,7 @@ def post(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Construct a POST request.\"\"\"\n@@ -494,26 +507,37 @@ def post(\n             content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n \n-    def head(self, path, data=None, secure=False, *, headers=None, **extra):\n+    def head(\n+        self, path, data=None, secure=False, *, headers=None, query_params=None, **extra\n+    ):\n         \"\"\"Construct a HEAD request.\"\"\"\n-        data = {} if data is None else data\n+        if query_params and data:\n+            raise ValueError(\"query_params and data arguments are mutually exclusive.\")\n+        query_params = data or query_params\n+        query_params = {} if query_params is None else query_params\n         return self.generic(\n             \"HEAD\",\n             path,\n             secure=secure,\n             headers=headers,\n-            **{\n-                \"QUERY_STRING\": urlencode(data, doseq=True),\n-                **extra,\n-            },\n+            query_params=query_params,\n+            **extra,\n         )\n \n-    def trace(self, path, secure=False, *, headers=None, **extra):\n+    def trace(self, path, secure=False, *, headers=None, query_params=None, **extra):\n         \"\"\"Construct a TRACE request.\"\"\"\n-        return self.generic(\"TRACE\", path, secure=secure, headers=headers, **extra)\n+        return self.generic(\n+            \"TRACE\",\n+            path,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n+        )\n \n     def options(\n         self,\n@@ -523,11 +547,19 @@ def options(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"Construct an OPTIONS request.\"\n         return self.generic(\n-            \"OPTIONS\", path, data, content_type, secure=secure, headers=headers, **extra\n+            \"OPTIONS\",\n+            path,\n+            data,\n+            content_type,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n \n     def put(\n@@ -538,12 +570,20 @@ def put(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Construct a PUT request.\"\"\"\n         data = self._encode_json(data, content_type)\n         return self.generic(\n-            \"PUT\", path, data, content_type, secure=secure, headers=headers, **extra\n+            \"PUT\",\n+            path,\n+            data,\n+            content_type,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n \n     def patch(\n@@ -554,12 +594,20 @@ def patch(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Construct a PATCH request.\"\"\"\n         data = self._encode_json(data, content_type)\n         return self.generic(\n-            \"PATCH\", path, data, content_type, secure=secure, headers=headers, **extra\n+            \"PATCH\",\n+            path,\n+            data,\n+            content_type,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n \n     def delete(\n@@ -570,12 +618,20 @@ def delete(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Construct a DELETE request.\"\"\"\n         data = self._encode_json(data, content_type)\n         return self.generic(\n-            \"DELETE\", path, data, content_type, secure=secure, headers=headers, **extra\n+            \"DELETE\",\n+            path,\n+            data,\n+            content_type,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n \n     def generic(\n@@ -587,6 +643,7 @@ def generic(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Construct an arbitrary HTTP request.\"\"\"\n@@ -608,6 +665,8 @@ def generic(\n             )\n         if headers:\n             extra.update(HttpHeaders.to_wsgi_names(headers))\n+        if query_params:\n+            extra[\"QUERY_STRING\"] = urlencode(query_params, doseq=True)\n         r.update(extra)\n         # If QUERY_STRING is absent or empty, we want to extract it from the URL.\n         if not r.get(\"QUERY_STRING\"):\n@@ -685,6 +744,7 @@ def generic(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Construct an arbitrary HTTP request.\"\"\"\n@@ -705,18 +765,20 @@ def generic(\n                 ]\n             )\n             s[\"_body_file\"] = FakePayload(data)\n-        if query_string := extra.pop(\"QUERY_STRING\", None):\n+        if query_params:\n+            s[\"query_string\"] = urlencode(query_params, doseq=True)\n+        elif query_string := extra.pop(\"QUERY_STRING\", None):\n             s[\"query_string\"] = query_string\n+        else:\n+            # If QUERY_STRING is absent or empty, we want to extract it from\n+            # the URL.\n+            s[\"query_string\"] = parsed[4]\n         if headers:\n             extra.update(HttpHeaders.to_asgi_names(headers))\n         s[\"headers\"] += [\n             (key.lower().encode(\"ascii\"), value.encode(\"latin1\"))\n             for key, value in extra.items()\n         ]\n-        # If QUERY_STRING is absent or empty, we want to extract it from the\n-        # URL.\n-        if not s.get(\"query_string\"):\n-            s[\"query_string\"] = parsed[4]\n         return self.request(**s)\n \n \n@@ -889,7 +951,14 @@ def _parse_json(self, response, **extra):\n         return response._json\n \n     def _follow_redirect(\n-        self, response, *, data=\"\", content_type=\"\", headers=None, **extra\n+        self,\n+        response,\n+        *,\n+        data=\"\",\n+        content_type=\"\",\n+        headers=None,\n+        query_params=None,\n+        **extra,\n     ):\n         \"\"\"Follow a single redirect contained in response using GET.\"\"\"\n         response_url = response.url\n@@ -934,6 +1003,7 @@ def _follow_redirect(\n             content_type=content_type,\n             follow=False,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n \n@@ -978,9 +1048,10 @@ def __init__(\n         raise_request_exception=True,\n         *,\n         headers=None,\n+        query_params=None,\n         **defaults,\n     ):\n-        super().__init__(headers=headers, **defaults)\n+        super().__init__(headers=headers, query_params=query_params, **defaults)\n         self.handler = ClientHandler(enforce_csrf_checks)\n         self.raise_request_exception = raise_request_exception\n         self.exc_info = None\n@@ -1042,15 +1113,23 @@ def get(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using GET.\"\"\"\n         self.extra = extra\n         self.headers = headers\n-        response = super().get(path, data=data, secure=secure, headers=headers, **extra)\n+        response = super().get(\n+            path,\n+            data=data,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n+        )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, headers=headers, **extra\n+                response, data=data, headers=headers, query_params=query_params, **extra\n             )\n         return response\n \n@@ -1063,6 +1142,7 @@ def post(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using POST.\"\"\"\n@@ -1074,11 +1154,17 @@ def post(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1090,17 +1176,23 @@ def head(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using HEAD.\"\"\"\n         self.extra = extra\n         self.headers = headers\n         response = super().head(\n-            path, data=data, secure=secure, headers=headers, **extra\n+            path,\n+            data=data,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, headers=headers, **extra\n+                response, data=data, headers=headers, query_params=query_params, **extra\n             )\n         return response\n \n@@ -1113,6 +1205,7 @@ def options(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using OPTIONS.\"\"\"\n@@ -1124,11 +1217,17 @@ def options(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1141,6 +1240,7 @@ def put(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a resource to the server using PUT.\"\"\"\n@@ -1152,11 +1252,17 @@ def put(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1169,6 +1275,7 @@ def patch(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a resource to the server using PATCH.\"\"\"\n@@ -1180,11 +1287,17 @@ def patch(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1197,6 +1310,7 @@ def delete(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a DELETE request to the server.\"\"\"\n@@ -1208,11 +1322,17 @@ def delete(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1224,17 +1344,23 @@ def trace(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a TRACE request to the server.\"\"\"\n         self.extra = extra\n         self.headers = headers\n         response = super().trace(\n-            path, data=data, secure=secure, headers=headers, **extra\n+            path,\n+            data=data,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n         if follow:\n             response = self._handle_redirects(\n-                response, data=data, headers=headers, **extra\n+                response, data=data, headers=headers, query_params=query_params, **extra\n             )\n         return response\n \n@@ -1244,6 +1370,7 @@ def _handle_redirects(\n         data=\"\",\n         content_type=\"\",\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"\n@@ -1257,6 +1384,7 @@ def _handle_redirects(\n                 data=data,\n                 content_type=content_type,\n                 headers=headers,\n+                query_params=query_params,\n                 **extra,\n             )\n             response.redirect_chain = redirect_chain\n@@ -1278,9 +1406,10 @@ def __init__(\n         raise_request_exception=True,\n         *,\n         headers=None,\n+        query_params=None,\n         **defaults,\n     ):\n-        super().__init__(headers=headers, **defaults)\n+        super().__init__(headers=headers, query_params=query_params, **defaults)\n         self.handler = AsyncClientHandler(enforce_csrf_checks)\n         self.raise_request_exception = raise_request_exception\n         self.exc_info = None\n@@ -1341,17 +1470,23 @@ async def get(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using GET.\"\"\"\n         self.extra = extra\n         self.headers = headers\n         response = await super().get(\n-            path, data=data, secure=secure, headers=headers, **extra\n+            path,\n+            data=data,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, headers=headers, **extra\n+                response, data=data, headers=headers, query_params=query_params, **extra\n             )\n         return response\n \n@@ -1364,6 +1499,7 @@ async def post(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using POST.\"\"\"\n@@ -1375,11 +1511,17 @@ async def post(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1391,17 +1533,23 @@ async def head(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using HEAD.\"\"\"\n         self.extra = extra\n         self.headers = headers\n         response = await super().head(\n-            path, data=data, secure=secure, headers=headers, **extra\n+            path,\n+            data=data,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, headers=headers, **extra\n+                response, data=data, headers=headers, query_params=query_params, **extra\n             )\n         return response\n \n@@ -1414,6 +1562,7 @@ async def options(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Request a response from the server using OPTIONS.\"\"\"\n@@ -1425,11 +1574,17 @@ async def options(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1442,6 +1597,7 @@ async def put(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a resource to the server using PUT.\"\"\"\n@@ -1453,11 +1609,17 @@ async def put(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1470,6 +1632,7 @@ async def patch(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a resource to the server using PATCH.\"\"\"\n@@ -1481,11 +1644,17 @@ async def patch(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1498,6 +1667,7 @@ async def delete(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a DELETE request to the server.\"\"\"\n@@ -1509,11 +1679,17 @@ async def delete(\n             content_type=content_type,\n             secure=secure,\n             headers=headers,\n+            query_params=query_params,\n             **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, content_type=content_type, headers=headers, **extra\n+                response,\n+                data=data,\n+                content_type=content_type,\n+                headers=headers,\n+                query_params=query_params,\n+                **extra,\n             )\n         return response\n \n@@ -1525,17 +1701,23 @@ async def trace(\n         secure=False,\n         *,\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"Send a TRACE request to the server.\"\"\"\n         self.extra = extra\n         self.headers = headers\n         response = await super().trace(\n-            path, data=data, secure=secure, headers=headers, **extra\n+            path,\n+            data=data,\n+            secure=secure,\n+            headers=headers,\n+            query_params=query_params,\n+            **extra,\n         )\n         if follow:\n             response = await self._ahandle_redirects(\n-                response, data=data, headers=headers, **extra\n+                response, data=data, headers=headers, query_params=query_params, **extra\n             )\n         return response\n \n@@ -1545,6 +1727,7 @@ async def _ahandle_redirects(\n         data=\"\",\n         content_type=\"\",\n         headers=None,\n+        query_params=None,\n         **extra,\n     ):\n         \"\"\"\n@@ -1558,6 +1741,7 @@ async def _ahandle_redirects(\n                 data=data,\n                 content_type=content_type,\n                 headers=headers,\n+                query_params=query_params,\n                 **extra,\n             )\n             response.redirect_chain = redirect_chain\ndiff --git a/docs/topics/testing/advanced.txt b/docs/topics/testing/advanced.txt\nindex 6f3f54e34129..d889bd02ee20 100644\n--- a/docs/topics/testing/advanced.txt\n+++ b/docs/topics/testing/advanced.txt\n@@ -32,6 +32,10 @@ restricted subset of the test client API:\n   attributes must be supplied by the test itself if required\n   for the view to function properly.\n \n+.. versionchanged:: 5.1\n+\n+    The ``query_params`` parameter was added.\n+\n Example\n -------\n \n@@ -85,6 +89,10 @@ difference being that it returns ``ASGIRequest`` instances rather than\n Arbitrary keyword arguments in ``defaults`` are added directly into the ASGI\n scope.\n \n+.. versionchanged:: 5.1\n+\n+    The ``query_params`` parameter was added.\n+\n Testing class-based views\n =========================\n \ndiff --git a/docs/topics/testing/tools.txt b/docs/topics/testing/tools.txt\nindex a171941a854f..b01dd35b8c6b 100644\n--- a/docs/topics/testing/tools.txt\n+++ b/docs/topics/testing/tools.txt\n@@ -120,7 +120,7 @@ Making requests\n \n Use the ``django.test.Client`` class to make requests.\n \n-.. class:: Client(enforce_csrf_checks=False, raise_request_exception=True, json_encoder=DjangoJSONEncoder, *, headers=None, **defaults)\n+.. class:: Client(enforce_csrf_checks=False, raise_request_exception=True, json_encoder=DjangoJSONEncoder, *, headers=None, query_params=None, **defaults)\n \n     A testing HTTP client. Takes several arguments that can customize behavior.\n \n@@ -129,6 +129,9 @@ Use the ``django.test.Client`` class to make requests.\n \n         client = Client(headers={\"user-agent\": \"curl/7.79.1\"})\n \n+    ``query_params`` allows you to specify the default query string that will\n+    be set on every request.\n+\n     Arbitrary keyword arguments in ``**defaults`` set WSGI\n     :pep:`environ variables <3333#environ-variables>`. For example, to set the\n     script name::\n@@ -140,8 +143,8 @@ Use the ``django.test.Client`` class to make requests.\n         Keyword arguments starting with a ``HTTP_`` prefix are set as headers,\n         but the ``headers`` parameter should be preferred for readability.\n \n-    The values from the ``headers`` and ``extra`` keyword arguments passed to\n-    :meth:`~django.test.Client.get()`,\n+    The values from the ``headers``, ``query_params``, and ``extra`` keyword\n+    arguments passed to :meth:`~django.test.Client.get()`,\n     :meth:`~django.test.Client.post()`, etc. have precedence over\n     the defaults passed to the class constructor.\n \n@@ -155,21 +158,25 @@ Use the ``django.test.Client`` class to make requests.\n     The ``json_encoder`` argument allows setting a custom JSON encoder for\n     the JSON serialization that's described in :meth:`post`.\n \n+    .. versionchanged:: 5.1\n+\n+        The ``query_params`` argument was added.\n+\n     Once you have a ``Client`` instance, you can call any of the following\n     methods:\n \n-    .. method:: Client.get(path, data=None, follow=False, secure=False, *, headers=None, **extra)\n+    .. method:: Client.get(path, data=None, follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a GET request on the provided ``path`` and returns a ``Response``\n         object, which is documented below.\n \n-        The key-value pairs in the ``data`` dictionary are used to create a GET\n-        data payload. For example:\n+        The key-value pairs in the ``query_params`` dictionary are used to set\n+        query strings. For example:\n \n         .. code-block:: pycon\n \n             >>> c = Client()\n-            >>> c.get(\"/customers/details/\", {\"name\": \"fred\", \"age\": 7})\n+            >>> c.get(\"/customers/details/\", query_params={\"name\": \"fred\", \"age\": 7})\n \n         ...will result in the evaluation of a GET request equivalent to:\n \n@@ -177,6 +184,10 @@ Use the ``django.test.Client`` class to make requests.\n \n             /customers/details/?name=fred&age=7\n \n+        It is also possible to pass these parameters into the ``data``\n+        parameter. However, ``query_params`` is preferred as it works for any\n+        HTTP method.\n+\n         The ``headers`` parameter can be used to specify headers to be sent in\n         the request. For example:\n \n@@ -185,7 +196,7 @@ Use the ``django.test.Client`` class to make requests.\n             >>> c = Client()\n             >>> c.get(\n             ...     \"/customers/details/\",\n-            ...     {\"name\": \"fred\", \"age\": 7},\n+            ...     query_params={\"name\": \"fred\", \"age\": 7},\n             ...     headers={\"accept\": \"application/json\"},\n             ... )\n \n@@ -211,8 +222,8 @@ Use the ``django.test.Client`` class to make requests.\n             >>> c = Client()\n             >>> c.get(\"/customers/details/?name=fred&age=7\")\n \n-        If you provide a URL with both an encoded GET data and a data argument,\n-        the data argument will take precedence.\n+        If you provide a URL with both an encoded GET data and either a\n+        query_params or data argument these arguments will take precedence.\n \n         If you set ``follow`` to ``True`` the client will follow any redirects\n         and a ``redirect_chain`` attribute will be set in the response object\n@@ -230,7 +241,11 @@ Use the ``django.test.Client`` class to make requests.\n         If you set ``secure`` to ``True`` the client will emulate an HTTPS\n         request.\n \n-    .. method:: Client.post(path, data=None, content_type=MULTIPART_CONTENT, follow=False, secure=False, *, headers=None, **extra)\n+        .. versionchanged:: 5.1\n+\n+            The ``query_params`` argument was added.\n+\n+    .. method:: Client.post(path, data=None, content_type=MULTIPART_CONTENT, follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a POST request on the provided ``path`` and returns a\n         ``Response`` object, which is documented below.\n@@ -321,8 +336,8 @@ Use the ``django.test.Client`` class to make requests.\n         such as an image, this means you will need to open the file in\n         ``rb`` (read binary) mode.\n \n-        The ``headers`` and ``extra`` parameters acts the same as for\n-        :meth:`Client.get`.\n+        The ``headers``, ``query_params``, and ``extra`` parameters acts the\n+        same as for :meth:`Client.get`.\n \n         If the URL you request with a POST contains encoded parameters, these\n         parameters will be made available in the request.GET data. For example,\n@@ -330,7 +345,9 @@ Use the ``django.test.Client`` class to make requests.\n \n         .. code-block:: pycon\n \n-            >>> c.post(\"/login/?visitor=true\", {\"name\": \"fred\", \"passwd\": \"secret\"})\n+            >>> c.post(\n+            ...     \"/login/\", {\"name\": \"fred\", \"passwd\": \"secret\"}, query_params={\"visitor\": \"true\"}\n+            ... )\n \n         ... the view handling this request could interrogate request.POST\n         to retrieve the username and password, and could interrogate request.GET\n@@ -343,14 +360,22 @@ Use the ``django.test.Client`` class to make requests.\n         If you set ``secure`` to ``True`` the client will emulate an HTTPS\n         request.\n \n-    .. method:: Client.head(path, data=None, follow=False, secure=False, *, headers=None, **extra)\n+        .. versionchanged:: 5.1\n+\n+            The ``query_params`` argument was added.\n+\n+    .. method:: Client.head(path, data=None, follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a HEAD request on the provided ``path`` and returns a\n         ``Response`` object. This method works just like :meth:`Client.get`,\n-        including the ``follow``, ``secure``, ``headers``, and ``extra``\n-        parameters, except it does not return a message body.\n+        including the ``follow``, ``secure``, ``headers``, ``query_params``,\n+        and ``extra`` parameters, except it does not return a message body.\n \n-    .. method:: Client.options(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, **extra)\n+        .. versionchanged:: 5.1\n+\n+            The ``query_params`` argument was added.\n+\n+    .. method:: Client.options(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes an OPTIONS request on the provided ``path`` and returns a\n         ``Response`` object. Useful for testing RESTful interfaces.\n@@ -358,10 +383,14 @@ Use the ``django.test.Client`` class to make requests.\n         When ``data`` is provided, it is used as the request body, and\n         a ``Content-Type`` header is set to ``content_type``.\n \n-        The ``follow``, ``secure``, ``headers``, and ``extra`` parameters act\n-        the same as for :meth:`Client.get`.\n+        The ``follow``, ``secure``, ``headers``, ``query_params``, and\n+        ``extra`` parameters act the same as for :meth:`Client.get`.\n+\n+        .. versionchanged:: 5.1\n \n-    .. method:: Client.put(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, **extra)\n+            The ``query_params`` argument was added.\n+\n+    .. method:: Client.put(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a PUT request on the provided ``path`` and returns a\n         ``Response`` object. Useful for testing RESTful interfaces.\n@@ -369,18 +398,26 @@ Use the ``django.test.Client`` class to make requests.\n         When ``data`` is provided, it is used as the request body, and\n         a ``Content-Type`` header is set to ``content_type``.\n \n-        The ``follow``, ``secure``, ``headers``, and ``extra`` parameters act\n-        the same as for :meth:`Client.get`.\n+        The ``follow``, ``secure``, ``headers``, ``query_params``, and\n+        ``extra`` parameters act the same as for :meth:`Client.get`.\n+\n+        .. versionchanged:: 5.1\n+\n+            The ``query_params`` argument was added.\n \n-    .. method:: Client.patch(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, **extra)\n+    .. method:: Client.patch(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a PATCH request on the provided ``path`` and returns a\n         ``Response`` object. Useful for testing RESTful interfaces.\n \n-        The ``follow``, ``secure``, ``headers``, and ``extra`` parameters act\n-        the same as for :meth:`Client.get`.\n+        The ``follow``, ``secure``, ``headers``, ``query_params``, and\n+        ``extra`` parameters act the same as for :meth:`Client.get`.\n \n-    .. method:: Client.delete(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, **extra)\n+        .. versionchanged:: 5.1\n+\n+            The ``query_params`` argument was added.\n+\n+    .. method:: Client.delete(path, data='', content_type='application/octet-stream', follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a DELETE request on the provided ``path`` and returns a\n         ``Response`` object. Useful for testing RESTful interfaces.\n@@ -388,10 +425,14 @@ Use the ``django.test.Client`` class to make requests.\n         When ``data`` is provided, it is used as the request body, and\n         a ``Content-Type`` header is set to ``content_type``.\n \n-        The ``follow``, ``secure``, ``headers``, and ``extra`` parameters act\n-        the same as for :meth:`Client.get`.\n+        The ``follow``, ``secure``, ``headers``, ``query_params``, and\n+        ``extra`` parameters act the same as for :meth:`Client.get`.\n+\n+        .. versionchanged:: 5.1\n \n-    .. method:: Client.trace(path, follow=False, secure=False, *, headers=None, **extra)\n+            The ``query_params`` argument was added.\n+\n+    .. method:: Client.trace(path, follow=False, secure=False, *, headers=None, query_params=None, **extra)\n \n         Makes a TRACE request on the provided ``path`` and returns a\n         ``Response`` object. Useful for simulating diagnostic probes.\n@@ -400,8 +441,12 @@ Use the ``django.test.Client`` class to make requests.\n         parameter in order to comply with :rfc:`9110#section-9.3.8`, which\n         mandates that TRACE requests must not have a body.\n \n-        The ``follow``, ``secure``, ``headers``, and ``extra`` parameters act\n-        the same as for :meth:`Client.get`.\n+        The ``follow``, ``secure``, ``headers``, ``query_params``, and\n+        ``extra`` parameters act the same as for :meth:`Client.get`.\n+\n+        .. versionchanged:: 5.1\n+\n+            The ``query_params`` argument was added.\n \n     .. method:: Client.login(**credentials)\n     .. method:: Client.alogin(**credentials)\n@@ -1997,7 +2042,7 @@ If you are testing from an asynchronous function, you must also use the\n asynchronous test client. This is available as ``django.test.AsyncClient``,\n or as ``self.async_client`` on any test.\n \n-.. class:: AsyncClient(enforce_csrf_checks=False, raise_request_exception=True, *, headers=None, **defaults)\n+.. class:: AsyncClient(enforce_csrf_checks=False, raise_request_exception=True, *, headers=None, query_params=None, **defaults)\n \n ``AsyncClient`` has the same methods and signatures as the synchronous (normal)\n test client, with the following exceptions:\n@@ -2017,6 +2062,10 @@ test client, with the following exceptions:\n \n     Support for the ``follow`` parameter was added to the ``AsyncClient``.\n \n+.. versionchanged:: 5.1\n+\n+    The ``query_params`` argument was added.\n+\n Using ``AsyncClient`` any method that makes a request must be awaited::\n \n     async def test_my_thing(self):\ndiff --git a/tests/test_client/tests.py b/tests/test_client/tests.py\nindex 15f5cbe44e1d..cfd040f7bce3 100644\n--- a/tests/test_client/tests.py\n+++ b/tests/test_client/tests.py\n@@ -1002,6 +1002,36 @@ def test_uploading_named_temp_file(self):\n             )\n         self.assertEqual(response.content, b\"named_temp_file\")\n \n+    def test_query_params(self):\n+        tests = (\n+            \"get\",\n+            \"post\",\n+            \"put\",\n+            \"patch\",\n+            \"delete\",\n+            \"head\",\n+            \"options\",\n+            \"trace\",\n+        )\n+        for method in tests:\n+            with self.subTest(method=method):\n+                client_method = getattr(self.client, method)\n+                response = client_method(\"/get_view/\", query_params={\"example\": \"data\"})\n+                self.assertEqual(response.wsgi_request.GET[\"example\"], \"data\")\n+\n+    def test_cannot_use_data_and_query_params_together(self):\n+        tests = [\"get\", \"head\"]\n+        msg = \"query_params and data arguments are mutually exclusive.\"\n+        for method in tests:\n+            with self.subTest(method=method):\n+                client_method = getattr(self.client, method)\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    client_method(\n+                        \"/get_view/\",\n+                        data={\"example\": \"data\"},\n+                        query_params={\"q\": \"terms\"},\n+                    )\n+\n \n @override_settings(\n     MIDDLEWARE=[\"django.middleware.csrf.CsrfViewMiddleware\"],\n@@ -1127,6 +1157,23 @@ def test_request_factory_sets_headers(self):\n             self.assertEqual(request.headers[\"x-another-header\"], \"some other value\")\n             self.assertIn(\"HTTP_X_ANOTHER_HEADER\", request.META)\n \n+    def test_request_factory_query_params(self):\n+        tests = (\n+            \"get\",\n+            \"post\",\n+            \"put\",\n+            \"patch\",\n+            \"delete\",\n+            \"head\",\n+            \"options\",\n+            \"trace\",\n+        )\n+        for method in tests:\n+            with self.subTest(method=method):\n+                factory = getattr(self.request_factory, method)\n+                request = factory(\"/somewhere\", query_params={\"example\": \"data\"})\n+                self.assertEqual(request.GET[\"example\"], \"data\")\n+\n \n @override_settings(ROOT_URLCONF=\"test_client.urls\")\n class AsyncClientTest(TestCase):\n@@ -1183,6 +1230,25 @@ async def test_body_read_on_get_data(self):\n         response = await self.async_client.get(\"/post_view/\")\n         self.assertContains(response, \"Viewing GET page.\")\n \n+    async def test_query_params(self):\n+        tests = (\n+            \"get\",\n+            \"post\",\n+            \"put\",\n+            \"patch\",\n+            \"delete\",\n+            \"head\",\n+            \"options\",\n+            \"trace\",\n+        )\n+        for method in tests:\n+            with self.subTest(method=method):\n+                client_method = getattr(self.async_client, method)\n+                response = await client_method(\n+                    \"/async_get_view/\", query_params={\"example\": \"data\"}\n+                )\n+                self.assertEqual(response.asgi_request.GET[\"example\"], \"data\")\n+\n \n @override_settings(ROOT_URLCONF=\"test_client.urls\")\n class AsyncRequestFactoryTest(SimpleTestCase):\n@@ -1264,3 +1330,33 @@ def test_request_factory_query_string(self):\n         request = self.request_factory.get(\"/somewhere/\", {\"example\": \"data\"})\n         self.assertNotIn(\"Query-String\", request.headers)\n         self.assertEqual(request.GET[\"example\"], \"data\")\n+\n+    def test_request_factory_query_params(self):\n+        tests = (\n+            \"get\",\n+            \"post\",\n+            \"put\",\n+            \"patch\",\n+            \"delete\",\n+            \"head\",\n+            \"options\",\n+            \"trace\",\n+        )\n+        for method in tests:\n+            with self.subTest(method=method):\n+                factory = getattr(self.request_factory, method)\n+                request = factory(\"/somewhere\", query_params={\"example\": \"data\"})\n+                self.assertEqual(request.GET[\"example\"], \"data\")\n+\n+    def test_cannot_use_data_and_query_params_together(self):\n+        tests = [\"get\", \"head\"]\n+        msg = \"query_params and data arguments are mutually exclusive.\"\n+        for method in tests:\n+            with self.subTest(method=method):\n+                factory = getattr(self.request_factory, method)\n+                with self.assertRaisesMessage(ValueError, msg):\n+                    factory(\n+                        \"/somewhere\",\n+                        data={\"example\": \"data\"},\n+                        query_params={\"q\": \"terms\"},\n+                    )\ndiff --git a/tests/test_client_regress/tests.py b/tests/test_client_regress/tests.py\nindex d5b9807f4daa..a3545ebfc7aa 100644\n--- a/tests/test_client_regress/tests.py\n+++ b/tests/test_client_regress/tests.py\n@@ -1197,6 +1197,10 @@ def test_post_like_requests(self):\n         self.assertEqual(response.context[\"get-foo\"], \"whiz\")\n         self.assertIsNone(response.context[\"post-foo\"])\n \n+        response = self.client.post(\"/request_data/\", query_params={\"foo\": \"whiz\"})\n+        self.assertEqual(response.context[\"get-foo\"], \"whiz\")\n+        self.assertIsNone(response.context[\"post-foo\"])\n+\n         # POST data provided in the URL augments actual form data\n         response = self.client.post(\"/request_data/?foo=whiz\", data={\"foo\": \"bang\"})\n         self.assertEqual(response.context[\"get-foo\"], \"whiz\")\n", "problem_statement": "Added dedicated option to test.Client methods (other than get()) for passing query parameters.\nDescription\n\t \nI have a view that takes GET and POST parameters, currently there exists django.test.Client.post() and Client.get() but they don't provide means to test this combination cleanly.\nAs an example solution I suggest to implement Client.request() also which would take POST and GET parameters, e.g.\nc = Client()\nc.request(reverse('my-view-name'), \n\t\t get={'getvar' : 'value'}, \n\t\t post={'postvar' : 'value'}, ...)\nCurrently workaround is to fake this using the post method like this:\nc = Client()\nc.post(reverse('my-test-view') + '?' + django.utils.http.urlencode({'getvar' : 'value'}), \n\t {'postvar' : 'value'}, ...)\nWhich as said, is not very clean.\n", "hints_text": [["I dislike the TestClient.request method, because it hides which actual HTTP method is used. The only way to do an HTTP POST should be TestClient.post to avoid ambiguity. However I think that this would work pretty well: c = Client() c.post(reverse('my-view-name'), getdata={'getvar' : 'value'}, data={'postvar' : 'value'}, ...) i.e., adding a getdata kwarg to the post method. This is useful and doesn't break compatibility, and we still keep a single obvious way to do POST requests.", 1289636945.0], ["Yes you are totally right. Though I suggest for backwards compatibility to put the getdata as at least third kwarg, if not last, since people probably use the Client.post without specifying the kwarg name, like: c = Client() c.post(reverse('my-view-name'], {'postvar': 'value'}, ...)", 1289637430.0], ["To be honest, the title of this ticket doesn't make much sense given how HTTP works. There are two orthogonal mechanisms involved here: 1) HTTP methods Client.get performs a GET request; Client.post performs a POST request. 2) HTML forms when submitted with a GET, form data is encoded in the query string, and Django exposes it in request.GET; when submitted with a POST, it's in the request body, and Django exposes it in request.POST. The data argument of the test client is designed to hold simulated form data, and is automatically inserted in requests according to these rules. That said, it's absolutely legal to use query string parameters in the URL of a POST request. But that isn't be form data. Adding an argument called get_data would be extremely confusing. In addition, I'm not eager to add a query_string_parameters argument to the test client, because Django favors clean URL design. I'm also afraid of possible confusions with form data in GET requests. So, for all these reasons, I'm going to reject this ticket. The recommended solution is to use self.client.post('/my/url/?param=value', form_data).", 1324721735.0], ["Would it be possible to reopen and reevaluate this ticket? It\u2019s 11 years later, and I feel this would be a great, simple addition to Django\u2019s testing toolset.", 1687193933.0], ["Replying to Dan Strokirk: Would it be possible to reopen and reevaluate this ticket? It\u2019s 11 years later, and I feel this would be a great, simple addition to Django\u2019s testing toolset. For now, I don't see a consensus in the \u200bdiscussion and we need it to reopen the ticket. I'd wait a little longer and get more opinions.", 1687213350.0], ["Replying to Mariusz Felisiak: Replying to Dan Strokirk: Would it be possible to reopen and reevaluate this ticket? It\u2019s 11 years later, and I feel this would be a great, simple addition to Django\u2019s testing toolset. For now, I don't see a consensus in the \u200bdiscussion and we need it to reopen the ticket. I'd wait a little longer and get more opinions. I think we have consensus in the linked thread and should reopen.", 1696403420.0], ["Replying to Lily Foote: I think we have consensus in the linked thread and should reopen. Thread discuss adding a dedicated keyword-argument, but I don't see any concrete proposition. How would you like to call it to avoid confusion? query_params maybe.", 1696458669.0], ["The forum discussion suggested that query_params is the most consistent with similar apis in Django. I'd go with that.", 1696489310.0], ["Accepted based on the forum discussion.", 1696494903.0], ["\u200bPR", 1699185803.0]], "created_at": "2023-11-05T17:53:13Z"}
{"repo": "django/django", "pull_number": 17446, "instance_id": "django__django-17446", "issue_numbers": ["34946"], "base_commit": "656192c2c96bb955a399d92f381e38fe2254fe17", "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 191809441afd..ef859907de8c 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -744,9 +744,9 @@ def add_field(self, model, field):\n         }\n         self.execute(sql, params)\n         # Drop the default if we need to\n-        # (Django usually does not use in-database defaults)\n         if (\n-            not self.skip_default_on_alter(field)\n+            field.db_default is NOT_PROVIDED\n+            and not self.skip_default_on_alter(field)\n             and self.effective_default(field) is not None\n         ):\n             changes_sql, params = self._alter_column_default_sql(\n", "test_patch": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex d58da8b7acd3..57a9086c1963 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1692,15 +1692,22 @@ def test_add_field_both_defaults(self):\n         field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n         self.assertEqual(field.default, 3)\n         self.assertEqual(field.db_default, Value(4))\n-        project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4)\n+        pre_pony_pk = (\n+            project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4).pk\n+        )\n         self.assertColumnNotExists(table_name, \"height\")\n         # Add field.\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertColumnExists(table_name, \"height\")\n+        post_pony_pk = (\n+            project_state.apps.get_model(app_label, \"pony\").objects.create(weight=10).pk\n+        )\n         new_model = new_state.apps.get_model(app_label, \"pony\")\n-        old_pony = new_model.objects.get()\n-        self.assertEqual(old_pony.height, 4)\n+        pre_pony = new_model.objects.get(pk=pre_pony_pk)\n+        self.assertEqual(pre_pony.height, 4)\n+        post_pony = new_model.objects.get(pk=post_pony_pk)\n+        self.assertEqual(post_pony.height, 4)\n         new_pony = new_model.objects.create(weight=5)\n         if not connection.features.can_return_columns_from_insert:\n             new_pony.refresh_from_db()\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 20a00e29f78e..72f90c934b73 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2257,6 +2257,23 @@ class Meta:\n         columns = self.column_classes(AuthorDbDefault)\n         self.assertEqual(columns[\"renamed_year\"][1].default, \"1985\")\n \n+    @isolate_apps(\"schema\")\n+    def test_add_field_both_defaults_preserves_db_default(self):\n+        class Author(Model):\n+            class Meta:\n+                app_label = \"schema\"\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        field = IntegerField(default=1985, db_default=1988)\n+        field.set_attributes_from_name(\"birth_year\")\n+        field.model = Author\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, field)\n+        columns = self.column_classes(Author)\n+        self.assertEqual(columns[\"birth_year\"][1].default, \"1988\")\n+\n     @skipUnlessDBFeature(\n         \"supports_column_check_constraints\", \"can_introspect_check_constraints\"\n     )\n", "problem_statement": "Adding a field with default and db_default drops database level DEFAULT\nDescription\n\t \n\u200bThe documentation for Field.db_default states\nIf both db_default and Field.default are set, default will take precedence when creating instances in Python code. db_default will still be set at the database level and will be used when inserting rows outside of the ORM or when adding a new field in a migration.\nHowever adding a field with both results in the following SQL\nALTER TABLE \"foo\" ADD COLUMN \"bar\" integer DEFAULT 42 NOT NULL;\nALTER TABLE \"foo\" ALTER COLUMN \"bar\" DROP DEFAULT;\nThe DEFAULT should never be dropped if the field has a db_default defined.\nThe following patch reproduces and demonstrate \u200bwhy the test that intended to cover this case didn't catch it.\ntests/migrations/test_operations.py\ndiff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex d58da8b7ac..57a9086c19 100644\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n def test_add_field_both_defaults(self):\n\t\t\t \u00a0\n\t\t\t\n16921692\u00a0 \u00a0 \u00a0 \u00a0 field = new_state.models[app_label, \"pony\"].fields[\"height\"]\n16931693\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(field.default, 3)\n16941694\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(field.db_default, Value(4))\n1695\u00a0\u00a0 \u00a0 \u00a0 \u00a0 project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4)\n\u00a01695\u00a0 \u00a0 \u00a0 \u00a0 pre_pony_pk = (\n\u00a01696\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project_state.apps.get_model(app_label, \"pony\").objects.create(weight=4).pk\n\u00a01697\u00a0 \u00a0 \u00a0 \u00a0 )\n16961698\u00a0 \u00a0 \u00a0 \u00a0 self.assertColumnNotExists(table_name, \"height\")\n16971699\u00a0 \u00a0 \u00a0 \u00a0 # Add field.\n16981700\u00a0 \u00a0 \u00a0 \u00a0 with connection.schema_editor() as editor:\n16991701\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 operation.database_forwards(app_label, editor, project_state, new_state)\n17001702\u00a0 \u00a0 \u00a0 \u00a0 self.assertColumnExists(table_name, \"height\")\n\u00a01703\u00a0 \u00a0 \u00a0 \u00a0 post_pony_pk = (\n\u00a01704\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 project_state.apps.get_model(app_label, \"pony\").objects.create(weight=10).pk\n\u00a01705\u00a0 \u00a0 \u00a0 \u00a0 )\n17011706\u00a0 \u00a0 \u00a0 \u00a0 new_model = new_state.apps.get_model(app_label, \"pony\")\n1702\u00a0\u00a0 \u00a0 \u00a0 \u00a0 old_pony = new_model.objects.get()\n1703\u00a0\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(old_pony.height, 4)\n\u00a01707\u00a0 \u00a0 \u00a0 \u00a0 pre_pony = new_model.objects.get(pk=pre_pony_pk)\n\u00a01708\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(pre_pony.height, 4)\n\u00a01709\u00a0 \u00a0 \u00a0 \u00a0 post_pony = new_model.objects.get(pk=post_pony_pk)\n\u00a01710\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(post_pony.height, 4)\n17041711\u00a0 \u00a0 \u00a0 \u00a0 new_pony = new_model.objects.create(weight=5)\n17051712\u00a0 \u00a0 \u00a0 \u00a0 if not connection.features.can_return_columns_from_insert:\n17061713\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new_pony.refresh_from_db()\ntests/schema/tests.py\ndiff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 20a00e29f7..80fdead190 100644\n\t\t\t a\n\t\t\t\n\t\t\t b\n\t\t\t\n class Meta:\n\t\t\t \u00a0\n\t\t\t\n22572257\u00a0 \u00a0 \u00a0 \u00a0 columns = self.column_classes(AuthorDbDefault)\n22582258\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(columns[\"renamed_year\"][1].default, \"1985\")\n22592259\n\u00a02260\u00a0 \u00a0 @isolate_apps(\"schema\")\n\u00a02261\u00a0 \u00a0 def test_add_field_both_defaults_preserves_db_default(self):\n\u00a02262\u00a0 \u00a0 \u00a0 \u00a0 class Author(Model):\n\u00a02263\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class Meta:\n\u00a02264\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 app_label = \"schema\"\n\u00a02265\n\u00a02266\u00a0 \u00a0 \u00a0 \u00a0 #self.isolated_local_models = [Author]\n\u00a02267\u00a0 \u00a0 \u00a0 \u00a0 with connection.schema_editor() as editor:\n\u00a02268\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 editor.create_model(Author)\n\u00a02269\n\u00a02270\u00a0 \u00a0 \u00a0 \u00a0 field = IntegerField(default=1985, db_default=1988)\n\u00a02271\u00a0 \u00a0 \u00a0 \u00a0 field.set_attributes_from_name(\"birth_year\")\n\u00a02272\u00a0 \u00a0 \u00a0 \u00a0 field.model = Author\n\u00a02273\u00a0 \u00a0 \u00a0 \u00a0 with connection.schema_editor() as editor:\n\u00a02274\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 editor.add_field(Author, field)\n\u00a02275\u00a0 \u00a0 \u00a0 \u00a0 columns = self.column_classes(Author)\n\u00a02276\u00a0 \u00a0 \u00a0 \u00a0 self.assertEqual(columns[\"birth_year\"][1].default, \"1988\")\n\u00a02277\n22602278\u00a0 \u00a0 @skipUnlessDBFeature(\n22612279\u00a0 \u00a0 \u00a0 \u00a0 \"supports_column_check_constraints\", \"can_introspect_check_constraints\"\n22622280\u00a0 \u00a0 )\n", "hints_text": [["Thanks!", 1699198458.0]], "created_at": "2023-11-05T17:27:06Z"}
{"repo": "django/django", "pull_number": 17441, "instance_id": "django__django-17441", "issue_numbers": ["34941"], "base_commit": "7a09ba0962e0eaf4ad396475b392ba3234bf60ee", "patch": "diff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py\nindex de00a468dd18..dfec605c1b43 100644\n--- a/django/db/backends/oracle/features.py\n+++ b/django/db/backends/oracle/features.py\n@@ -119,12 +119,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n         \"Oracle doesn't support comparing NCLOB to NUMBER.\": {\n             \"generic_relations_regress.tests.GenericRelationTests.test_textlink_filter\",\n         },\n-        \"DecimalField.db_default doesn't return decimal.Decimal instances on Oracle \"\n-        \"(#34941).\": {\n-            \"field_defaults.tests.DefaultTests.test_field_db_defaults_returning\",\n-            \"migrations.test_operations.OperationTests.\"\n-            \"test_alter_field_change_nullable_to_decimal_database_default_not_null\",\n-        },\n     }\n     django_test_expected_failures = {\n         # A bug in Django/oracledb with respect to string handling (#23843).\ndiff --git a/django/db/backends/oracle/utils.py b/django/db/backends/oracle/utils.py\nindex 318a26564543..930b8e09186e 100644\n--- a/django/db/backends/oracle/utils.py\n+++ b/django/db/backends/oracle/utils.py\n@@ -1,4 +1,5 @@\n import datetime\n+import decimal\n \n from .base import Database\n \n@@ -23,7 +24,7 @@ class InsertVar:\n         \"FloatField\": Database.NATIVE_FLOAT,\n         \"DateTimeField\": Database.TIMESTAMP,\n         \"DateField\": Database.Date,\n-        \"DecimalField\": Database.NUMBER,\n+        \"DecimalField\": decimal.Decimal,\n     }\n \n     def __init__(self, field):\n", "test_patch": "", "problem_statement": "db_default with decimal.Decimal() doesn't return Decimal instances on Oracle.\nDescription\n\t\t\n(last modified by Mariusz Felisiak)\t\t\nWhile working on #34936 I noticed that DecimalField with db_default set to a Decimal() instance doesn't return Decimal() on Oracle:\n/runtests.py field_defaults\nTesting against Django installed in '/django/django' with up to 8 processes\nFound 16 test(s).\nCreating test database for alias 'default'...\nCreating test user...\nSystem check identified no issues (0 silenced).\n.....s..sF......\n======================================================================\nFAIL: test_field_db_defaults_returning (field_defaults.tests.DefaultTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/django/django/test/testcases.py\", line 1427, in skip_wrapper\n\treturn test_func(*args, **kwargs)\n File \"/django/tests/field_defaults/tests.py\", line 48, in test_field_db_defaults_returning\n\tself.assertEqual(a.cost, Decimal(\"3.33\"))\nAssertionError: 3.33 != Decimal('3.33')\n----------------------------------------------------------------------\nRan 16 tests in 0.089s\nFAILED (failures=1, skipped=2)\nDestroying test database for alias 'default'...\nDestroying test user...\nDestroying test database tables...\nIt works properly when using bulk_create().\nRegression in 7414704e88d73dafbcfbb85f9bc54cb6111439d3.\n", "hints_text": [["Thanks!", 1698932291.0], ["In 7a09ba0: Refs #34941 -- Skipped OperationTests.test_alter_field_change_nullable_to_decimal_database_default_not_null on Oracle.", 1698967752.0], ["In e2330ccd: [5.0.x] Refs #34941 -- Skipped OperationTests.test_alter_field_change_nullable_to_decimal_database_default_not_null on Oracle. Backport of 7a09ba0962e0eaf4ad396475b392ba3234bf60ee from main", 1698967845.0], ["\u200bPR", 1698983379.0]], "created_at": "2023-11-03T08:48:32Z"}
{"repo": "django/django", "pull_number": 17438, "instance_id": "django__django-17438", "issue_numbers": ["34830"], "base_commit": "8a28e983df091d94eaba77cb82fbe3ef60a80799", "patch": "diff --git a/django/views/csrf.py b/django/views/csrf.py\nindex 3c572a621ade..e282ebb2b677 100644\n--- a/django/views/csrf.py\n+++ b/django/views/csrf.py\n@@ -64,6 +64,7 @@ def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n         \"DEBUG\": settings.DEBUG,\n         \"docs_version\": get_docs_version(),\n         \"more\": _(\"More information is available with DEBUG=True.\"),\n+        \"request\": request,\n     }\n     try:\n         t = loader.get_template(template_name)\n", "test_patch": "diff --git a/tests/view_tests/tests/test_csrf.py b/tests/view_tests/tests/test_csrf.py\nindex ef4a50dd4508..d85c1b69dd2d 100644\n--- a/tests/view_tests/tests/test_csrf.py\n+++ b/tests/view_tests/tests/test_csrf.py\n@@ -131,3 +131,7 @@ def test_template_encoding(self):\n         with mock.patch.object(Path, \"open\") as m:\n             csrf_failure(mock.MagicMock(), mock.Mock())\n             m.assert_called_once_with(encoding=\"utf-8\")\n+\n+    def test_csrf_response_has_request_context_processor(self):\n+        response = self.client.post(\"/\")\n+        self.assertIs(response.wsgi_request, response.context.get(\"request\"))\n", "problem_statement": "csrf_failure and bad_request views missing context processors\nDescription\n\t \nThe default csrf_failure view does not pass the request to the template rendering engine which means that all context processors are missing.\nThis is problematic if you override the default 403_csrf.html template without customising the view and are expecting the same default context you would get access to in other templates.\nI think the most straight forward way to replicate on a default Django deployment would be to add a custom 403_csrf.html template to your templates dir and attempt to access from some of Django's built-in context processors e.g. request or TIME_ZONE\nThe fix should be very straight forward unless there's a good reason not to pass the request to the template engine in this view. The view currently looks like this:\ndef csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME):\n\t\"\"\"\n\tDefault view used when request fails CSRF protection\n\t\"\"\"\n\tfrom django.middleware.csrf import REASON_NO_CSRF_COOKIE, REASON_NO_REFERER\n\tc = {\n\t\t\"title\": _(\"Forbidden\"),\n\t\t...\n\t}\n\ttry:\n\t\tt = loader.get_template(template_name)\n\texcept TemplateDoesNotExist:\n\t\tif template_name == CSRF_FAILURE_TEMPLATE_NAME:\n\t\t\t# If the default template doesn't exist, use the fallback template.\n\t\t\twith builtin_template_path(\"csrf_403.html\").open(encoding=\"utf-8\") as fh:\n\t\t\t\tt = Engine().from_string(fh.read())\n\t\t\tc = Context(c)\n\t\telse:\n\t\t\t# Raise if a developer-specified template doesn't exist.\n\t\t\traise\n\treturn HttpResponseForbidden(t.render(c))\nSo it just needs modifying to t.render(c, request)\n", "hints_text": [["Accepting since it's easily reproducible and the proposed fix makes sense. As far as I see, the change should not be backwards incompatible. Do note that the request should be pass in the context and not as an extra param: django/views/csrf.py a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6768 } 6869 try: 6970 t = loader.get_template(template_name)", 1694540217.0], ["Hello, please assign me this issue. I am working on django for about 3 years, I would love to get started contributing to this amazing repository.", 1694570272.0], ["Hello faizan2700, you can assign the ticket yourself once you are ready to start working on it. You can use the \"assign to\" box in this page. If you haven't already, please go over the \u200bcontributing documentation for submitting patches. Thank you for your interest in contributing!", 1694586795.0], ["Hey @faizan2700 As you didn't pick up this issue, if you don't mind, I assign it to myself.", 1695386838.0], ["I think based on the issue description, in addition to the request, maybe settings need to be provided to get the timezone. Something like that: \"more\": _(\"More information is available with DEBUG=True.\"), \"request\": request, \"settings\": reporter_filter.get_safe_settings(), } Like HttpResponseNotFound. Not sure, just curious!", 1695490629.0], ["Replying to Natalia Bidart: Accepting since it's easily reproducible and the proposed fix makes sense. As far as I see, the change should not be backwards compatible. Do note that the request should be pass in the context and not as an extra param: django/views/csrf.py a b def csrf_failure(request, reason=\"\", template_name=CSRF_FAILURE_TEMPLATE_NAME): 6464 \"DEBUG\": settings.DEBUG, 6565 \"docs_version\": get_docs_version(), 6666 \"more\": _(\"More information is available with DEBUG=True.\"), 67 \"request\": request, 6768 } 6869 try: 6970 t = loader.get_template(template_name) Sorry I had a slightly different understanding of the issue here but I'm not super familiar with the internals of Django's template rendering so tell me if I'm wrong. The render method takes an extra request argument as well as the context: def render(self, context=None, request=None): context = make_context( context, request, autoescape=self.backend.engine.autoescape ) try: return self.template.render(context) except TemplateDoesNotExist as exc: reraise(exc, self.backend) And that make_context does: def make_context(context, request=None, **kwargs): \"\"\" Create a suitable Context from a plain dict and optionally an HttpRequest. \"\"\" if context is not None and not isinstance(context, dict): raise TypeError( \"context must be a dict rather than %s.\" % context.__class__.__name__ ) if request is None: context = Context(context, **kwargs) else: # The following pattern is required to ensure values from # context override those from template context processors. original_context = context context = RequestContext(request, **kwargs) if original_context: context.push(original_context) return context And it is inside RequestContext rather than Context that the context processor magic happens: def bind_template(self, template): if self.template is not None: raise RuntimeError(\"Context is already bound to a template\") self.template = template # Set context processors according to the template engine's settings. processors = template.engine.template_context_processors + self._processors updates = {} for processor in processors: context = processor(self.request) So I thought the fix was to explicitly pass the request rather than add it to the context dict", 1695616593.0], ["Replying to Alex Henman: So I thought the fix was to explicitly pass the request rather than add it to the context dict My advice would be to try your patch and run the tests :-) (this is what I did when reproducing/accepting the ticket). Spoiler alert, some tests fail with: TypeError: Template.render() got an unexpected keyword argument 'request' This is why the Template class that is being used is the one defined in django/template/base.py which render method is defined as def render(self, context). I hope this helps!", 1695889471.0], ["Replying to Natalia Bidart: Replying to Alex Henman: So I thought the fix was to explicitly pass the request rather than add it to the context dict My advice would be to try your patch and run the tests :-) (this is what I did when reproducing/accepting the ticket). Spoiler alert, some tests fail with: TypeError: Template.render() got an unexpected keyword argument 'request' This is why the Template class that is being used is the one defined in django/template/base.py which render method is defined as def render(self, context). I hope this helps! Ahh I see: sorry I was just trying to help out those who were keen to take on working on a fix. I don't really have a working Django development environment set up so haven't been able to test out any of my suggested changes here. I think the key thing is that just passing request in to the context might not be enough as for my use case what I want is the context processors in my configured template backend. That is perhaps not as simple as I'd hoped then", 1695891650.0]], "created_at": "2023-11-02T10:54:39Z"}
{"repo": "django/django", "pull_number": 17435, "instance_id": "django__django-17435", "issue_numbers": ["34927"], "base_commit": "36173cf29d6ad0b0f0cd24326834dddfff2db7f3", "patch": "diff --git a/AUTHORS b/AUTHORS\nindex 2a331e4818fc..0247503197da 100644\n--- a/AUTHORS\n+++ b/AUTHORS\n@@ -93,6 +93,7 @@ answer newbie questions, and generally made Django that much better:\n     ant9000@netwise.it\n     Anthony Briggs <anthony.briggs@gmail.com>\n     Anthony Wright <ryow.college@gmail.com>\n+    Antoine Ch\u00e9neau <antoine.cheneau@outlook.com>\n     Anton Samarchyan <desecho@gmail.com>\n     Antoni Aloy\n     Antonio Cavedoni <http://cavedoni.com/>\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex ff4b83fe5960..6a2608c0b3c3 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1211,6 +1211,7 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\n         if len(fks_to_parent) == 1:\n             fk = fks_to_parent[0]\n             parent_list = parent_model._meta.get_parent_list()\n+            parent_list.append(parent_model)\n             if (\n                 not isinstance(fk, ForeignKey)\n                 or (\n@@ -1236,6 +1237,7 @@ def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\n     else:\n         # Try to discover what the ForeignKey from model to parent_model is\n         parent_list = parent_model._meta.get_parent_list()\n+        parent_list.append(parent_model)\n         fks_to_parent = [\n             f\n             for f in opts.fields\n", "test_patch": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex 2ed27f8a3dde..47b1b40ed7c7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1268,6 +1268,45 @@ class TestModelAdmin(ModelAdmin):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    def test_proxy_model(self):\n+        class Reporter(Model):\n+            pass\n+\n+        class ProxyJournalist(Reporter):\n+            class Meta:\n+                proxy = True\n+\n+        class Article(Model):\n+            reporter = ForeignKey(ProxyJournalist, on_delete=CASCADE)\n+\n+        class ArticleInline(admin.TabularInline):\n+            model = Article\n+\n+        class ReporterAdmin(admin.ModelAdmin):\n+            inlines = [ArticleInline]\n+\n+        self.assertIsValid(ReporterAdmin, Reporter)\n+\n+    def test_proxy_model_fk_name(self):\n+        class ReporterFkName(Model):\n+            pass\n+\n+        class ProxyJournalistFkName(ReporterFkName):\n+            class Meta:\n+                proxy = True\n+\n+        class ArticleFkName(Model):\n+            reporter = ForeignKey(ProxyJournalistFkName, on_delete=CASCADE)\n+\n+        class ArticleInline(admin.TabularInline):\n+            model = ArticleFkName\n+            fk_name = \"reporter\"\n+\n+        class ReporterAdmin(admin.ModelAdmin):\n+            inlines = [ArticleInline]\n+\n+        self.assertIsValid(ReporterAdmin, ReporterFkName)\n+\n     def test_proxy_model_parent(self):\n         class Parent(Model):\n             pass\n", "problem_statement": "ModelAdmin for model with InlineModelAdmin for proxy class reference results in admin.E202\nDescription\n\t \nThis is similar to #30273 and #32975. A class references a proxy model, and we define an inline for the proxied model. This fails with admin.E202 because Django does not recognize that the FK to the proxy model is the same as an FK to the proxied model.\nAssume models as follows:\nclass Reporter(models.Model):\n\tname = models.CharField(max_length=50)\nclass Journalist(Reporter):\n\tclass Meta:\n\t\tproxy = True\nclass Article(models.Model):\n\treporter = models.ForeignKey(Journalist, on_delete=models.CASCADE)\nand an admin as follows:\nclass ArticleInline(admin.TabularInline):\n\tmodel = Article\n\tfk_name = 'reporter'\n@admin.register(Reporter)\nclass ReporterAdmin(admin.ModelAdmin):\n\tinlines = [ArticleInline]\nThis will result in <class 'testapp.admin.ArticleInline'>: (admin.E202) fk_name 'reporter' is not a ForeignKey to 'testapp.Reporter'.\nThe problem seems to be that the parent list does not include the model itself, and as such Django does not recognize the equality here.\n", "hints_text": [["Was able to reproduce this on my end.", 1698258102.0], ["Made a PR here: \u200bhttps://github.com/django/django/pull/17435", 1698814745.0]], "created_at": "2023-11-01T10:39:54Z"}
