{"repo": "pallets/flask", "pull_number": 5526, "instance_id": "pallets__flask-5526", "issue_numbers": ["5504"], "base_commit": "66af0e55ef6631d05c691707da19d0f1c46921ea", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex bffdbdce80..985c8a0d72 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -3,7 +3,9 @@ Version 3.1.0\n \n -   Provide a configuration option to control automatic option\n     responses. :pr:`5496`\n-\n+-   ``Flask.open_resource``/``open_instance_resource`` and\n+    ``Blueprint.open_resource`` take an ``encoding`` parameter to use when\n+    opening in text mode. It defaults to ``utf-8``. :issue:`5504`\n \n Version 3.0.3\n -------------\ndiff --git a/src/flask/app.py b/src/flask/app.py\nindex 5124233c72..53eb602c2a 100644\n--- a/src/flask/app.py\n+++ b/src/flask/app.py\n@@ -320,9 +320,10 @@ def send_static_file(self, filename: str) -> Response:\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Open a resource file relative to :attr:`root_path` for\n-        reading.\n+    def open_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to :attr:`root_path` for reading.\n \n         For example, if the file ``schema.sql`` is next to the file\n         ``app.py`` where the ``Flask`` app is defined, it can be opened\n@@ -333,31 +334,46 @@ def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n             with app.open_resource(\"schema.sql\") as f:\n                 conn.executescript(f.read())\n \n-        :param resource: Path to the resource relative to\n-            :attr:`root_path`.\n-        :param mode: Open the file in this mode. Only reading is\n-            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n-\n-        Note this is a duplicate of the same method in the Flask\n-        class.\n+        :param resource: Path to the resource relative to :attr:`root_path`.\n+        :param mode: Open the file in this mode. Only reading is supported,\n+            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n \n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n         if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading.\")\n \n-        return open(os.path.join(self.root_path, resource), mode)\n+        path = os.path.join(self.root_path, resource)\n+\n+        if mode == \"rb\":\n+            return open(path, mode)\n \n-    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Opens a resource from the application's instance folder\n-        (:attr:`instance_path`).  Otherwise works like\n-        :meth:`open_resource`.  Instance resources can also be opened for\n-        writing.\n+        return open(path, mode, encoding=encoding)\n \n-        :param resource: the name of the resource.  To access resources within\n-                         subfolders use forward slashes as separator.\n-        :param mode: resource file opening mode, default is 'rb'.\n+    def open_instance_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to the application's instance folder\n+        :attr:`instance_path`. Unlike :meth:`open_resource`, files in the\n+        instance folder can be opened for writing.\n+\n+        :param resource: Path to the resource relative to :attr:`instance_path`.\n+        :param mode: Open the file in this mode.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n+\n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n-        return open(os.path.join(self.instance_path, resource), mode)\n+        path = os.path.join(self.instance_path, resource)\n+\n+        if \"b\" in mode:\n+            return open(path, mode)\n+\n+        return open(path, mode, encoding=encoding)\n \n     def create_jinja_environment(self) -> Environment:\n         \"\"\"Create the Jinja environment based on :attr:`jinja_options`\ndiff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex aa9eacf21b..86c5d59aa2 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -101,29 +101,28 @@ def send_static_file(self, filename: str) -> Response:\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Open a resource file relative to :attr:`root_path` for\n-        reading.\n-\n-        For example, if the file ``schema.sql`` is next to the file\n-        ``app.py`` where the ``Flask`` app is defined, it can be opened\n-        with:\n-\n-        .. code-block:: python\n-\n-            with app.open_resource(\"schema.sql\") as f:\n-                conn.executescript(f.read())\n-\n-        :param resource: Path to the resource relative to\n-            :attr:`root_path`.\n-        :param mode: Open the file in this mode. Only reading is\n-            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n-\n-        Note this is a duplicate of the same method in the Flask\n-        class.\n-\n+    def open_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to :attr:`root_path` for reading. The\n+        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\n+        method.\n+\n+        :param resource: Path to the resource relative to :attr:`root_path`.\n+        :param mode: Open the file in this mode. Only reading is supported,\n+            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n+\n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n         if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading.\")\n \n-        return open(os.path.join(self.root_path, resource), mode)\n+        path = os.path.join(self.root_path, resource)\n+\n+        if mode == \"rb\":\n+            return open(path, mode)\n+\n+        return open(path, mode, encoding=encoding)\n", "test_patch": "diff --git a/tests/test_helpers.py b/tests/test_helpers.py\nindex 3566385cf1..ee77f1760c 100644\n--- a/tests/test_helpers.py\n+++ b/tests/test_helpers.py\n@@ -334,16 +334,27 @@ def test_make_response(self):\n             assert rv.data == b\"Hello\"\n             assert rv.mimetype == \"text/html\"\n \n-    @pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\n-    def test_open_resource(self, mode):\n-        app = flask.Flask(__name__)\n \n-        with app.open_resource(\"static/index.html\", mode) as f:\n-            assert \"<h1>Hello World!</h1>\" in str(f.read())\n+@pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\n+def test_open_resource(mode):\n+    app = flask.Flask(__name__)\n \n-    @pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\n-    def test_open_resource_exceptions(self, mode):\n-        app = flask.Flask(__name__)\n+    with app.open_resource(\"static/index.html\", mode) as f:\n+        assert \"<h1>Hello World!</h1>\" in str(f.read())\n \n-        with pytest.raises(ValueError):\n-            app.open_resource(\"static/index.html\", mode)\n+\n+@pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\n+def test_open_resource_exceptions(mode):\n+    app = flask.Flask(__name__)\n+\n+    with pytest.raises(ValueError):\n+        app.open_resource(\"static/index.html\", mode)\n+\n+\n+@pytest.mark.parametrize(\"encoding\", (\"utf-8\", \"utf-16-le\"))\n+def test_open_resource_with_encoding(tmp_path, encoding):\n+    app = flask.Flask(__name__, root_path=os.fspath(tmp_path))\n+    (tmp_path / \"test\").write_text(\"test\", encoding=encoding)\n+\n+    with app.open_resource(\"test\", mode=\"rt\", encoding=encoding) as f:\n+        assert f.read() == \"test\"\n", "problem_statement": "allow setting encoding in open_resource()\nThis is a duplicate of #1740 &mdash; that may have been closed for lack of a clear rationale, however, and I'd like to suggest it again with the following reasoning.\r\n\r\nThe documentation currently gives this example for using `open_resource()`:\r\n\r\n```python\r\nwith app.open_resource(\"schema.sql\") as f:\r\n    conn.executescript(f.read())\r\n```\r\n\r\nOn Windows, however, this can fail to open a file encoded in UTF-8, which most are these days, and safer code looks like this:\r\n\r\n```python\r\nwith app.open_resource(\"schema.sql\", mode=\"rb\") as f:\r\n   conn.executescript(f.read().decode(\"utf-8\"))  # type: ignore [attr-defined]\r\n```\r\n\r\n(The type comment is needed to prevent mypy from complaining about `f.read()` possibly being a string with no `.decode()` method, as it can't tell that the file was opened in 'rb' mode.)\r\n\r\nIt would be cleaner and more flexible to be able to write:\r\n\r\n```python\r\nwith app.open_resource(\"schema.sql\", encoding=\"utf-8\") as f:\r\n   conn.executescript(f.read())\r\n```\r\n\n", "hints_text": "", "created_at": "2024-07-10T11:57:00Z"}
{"repo": "pallets/flask", "pull_number": 5393, "instance_id": "pallets__flask-5393", "issue_numbers": ["5391"], "base_commit": "3435d2ff1589eb0c1a85cc294a20985910a1a606", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex 302abec441..edbaa963ae 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,6 +4,8 @@ Version 3.0.2\n Unreleased\n \n -   Correct type for ``jinja_loader`` property. :issue:`5388`\n+-   Fix error with ``--extra-files`` and ``--exclude-patterns`` CLI options.\n+    :issue:`5391`\n \n \n Version 3.0.1\ndiff --git a/src/flask/cli.py b/src/flask/cli.py\nindex ffdcb182a7..d4df2802b2 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -858,7 +858,9 @@ def convert(\n         self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n     ) -> t.Any:\n         items = self.split_envvar_value(value)\n-        return [super().convert(item, param, ctx) for item in items]\n+        # can't call no-arg super() inside list comprehension until Python 3.12\n+        super_convert = super().convert\n+        return [super_convert(item, param, ctx) for item in items]\n \n \n @click.command(\"run\", short_help=\"Run a development server.\")\n", "test_patch": "diff --git a/tests/test_cli.py b/tests/test_cli.py\nindex 79de1fc8d1..09995488cc 100644\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -679,3 +679,8 @@ def test_cli_empty(app):\n \n     result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n     assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n+\n+\n+def test_run_exclude_patterns():\n+    ctx = run_command.make_context(\"run\", [\"--exclude-patterns\", __file__])\n+    assert ctx.params[\"exclude_patterns\"] == [__file__]\n", "problem_statement": "Flask 3.0.1 breaks path-separated command line arguments\nIn a minimal flask app, running `flask run --extra-files=` or using any other argument that internally uses `SeparatedPathType` results in `TypeError: super(type, obj): obj must be an instance or subtype of type`\r\n\r\n\r\n\r\n1. Create a minimal flask application (follow [the Quickstart](https://flask.palletsprojects.com/en/3.0.x/quickstart/#a-minimal-application)).\r\n2. Install flask==3.0.1 (this bug is not reproducible with 3.0.0 AFAIK)\r\n3. Run `flask run --extra-files=a`\r\n\r\n**Expected Behavior:**\r\nThe server should start up.\r\n\r\n**Actual Behavior:**\r\nThe command raises a `Type Error` and exits with code 1\r\n\r\n<details><summary>Full Traceback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \".../flask-cli-bug/..venv/bin/flask\", line 8, in <module>\r\n    sys.exit(main())\r\n             ^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/flask/cli.py\", line 1105, in main\r\n    cli.main()\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 1078, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 1686, in invoke\r\n    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 943, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 1408, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2400, in handle_parse_result\r\n    value = self.process_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2356, in process_value\r\n    value = self.type_cast_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2344, in type_cast_value\r\n    return convert(value)\r\n           ^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2316, in convert\r\n    return self.type(value, param=self, ctx=ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/types.py\", line 83, in __call__\r\n    return self.convert(value, param, ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in convert\r\n    return [super().convert(item, param, ctx) for item in items]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in <listcomp>\r\n    return [super().convert(item, param, ctx) for item in items]\r\n            ^^^^^^^\r\nTypeError: super(type, obj): obj must be an instance or subtype of type\r\n```\r\n</details>\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.11.6\r\n- Flask version: 3.0.1\r\n\r\nOutput from `pip freeze`:\r\n```\r\nblinker==1.7.0\r\nclick==8.1.7\r\nFlask==3.0.1\r\nitsdangerous==2.1.2\r\nJinja2==3.1.3\r\nMarkupSafe==2.1.4\r\nWerkzeug==3.0.1\r\n```\r\n\r\nDemo Repo: https://github.com/alexrudy/flask-3.0.1-cli-bug\r\n\n", "hints_text": "I can confirm that this bug was introduced in 3.0.1. In our case, we're using the `--exclude-patterns` command line parameter.\r\n\r\n# versions\r\n\r\n- python 3.11.5\r\n- flask 3.0.1\r\n- click 8.1.7\r\n- ubuntu 22.04.1\r\n\r\n# command\r\n\r\n```bash\r\nflask --app app:start run --debug --exclude-patterns \"*/tests/*:*/venv/*:*/temp/*\"\r\n```\r\n\r\n# traceback\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/__main__.py\", line 3, in <module>\r\n    main()\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/cli.py\", line 1105, in main\r\n    cli.main()\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 1078, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 1686, in invoke\r\n    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 943, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 1408, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2400, in handle_parse_result\r\n    value = self.process_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2356, in process_value\r\n    value = self.type_cast_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2344, in type_cast_value\r\n    return convert(value)\r\n           ^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2316, in convert\r\n    return self.type(value, param=self, ctx=ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/types.py\", line 83, in __call__\r\n    return self.convert(value, param, ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in convert\r\n    return [super().convert(item, param, ctx) for item in items]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in <listcomp>\r\n    return [super().convert(item, param, ctx) for item in items]\r\n            ^^^^^^^\r\nTypeError: super(type, obj): obj must be an instance or subtype of type\r\n```", "created_at": "2024-01-26T02:21:43Z"}
