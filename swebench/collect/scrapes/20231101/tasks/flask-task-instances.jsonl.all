{"repo": "pallets/flask", "pull_number": 5526, "instance_id": "pallets__flask-5526", "issue_numbers": ["5504"], "base_commit": "66af0e55ef6631d05c691707da19d0f1c46921ea", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex bffdbdce80..985c8a0d72 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -3,7 +3,9 @@ Version 3.1.0\n \n -   Provide a configuration option to control automatic option\n     responses. :pr:`5496`\n-\n+-   ``Flask.open_resource``/``open_instance_resource`` and\n+    ``Blueprint.open_resource`` take an ``encoding`` parameter to use when\n+    opening in text mode. It defaults to ``utf-8``. :issue:`5504`\n \n Version 3.0.3\n -------------\ndiff --git a/src/flask/app.py b/src/flask/app.py\nindex 5124233c72..53eb602c2a 100644\n--- a/src/flask/app.py\n+++ b/src/flask/app.py\n@@ -320,9 +320,10 @@ def send_static_file(self, filename: str) -> Response:\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Open a resource file relative to :attr:`root_path` for\n-        reading.\n+    def open_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to :attr:`root_path` for reading.\n \n         For example, if the file ``schema.sql`` is next to the file\n         ``app.py`` where the ``Flask`` app is defined, it can be opened\n@@ -333,31 +334,46 @@ def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n             with app.open_resource(\"schema.sql\") as f:\n                 conn.executescript(f.read())\n \n-        :param resource: Path to the resource relative to\n-            :attr:`root_path`.\n-        :param mode: Open the file in this mode. Only reading is\n-            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n-\n-        Note this is a duplicate of the same method in the Flask\n-        class.\n+        :param resource: Path to the resource relative to :attr:`root_path`.\n+        :param mode: Open the file in this mode. Only reading is supported,\n+            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n \n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n         if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading.\")\n \n-        return open(os.path.join(self.root_path, resource), mode)\n+        path = os.path.join(self.root_path, resource)\n+\n+        if mode == \"rb\":\n+            return open(path, mode)\n \n-    def open_instance_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Opens a resource from the application's instance folder\n-        (:attr:`instance_path`).  Otherwise works like\n-        :meth:`open_resource`.  Instance resources can also be opened for\n-        writing.\n+        return open(path, mode, encoding=encoding)\n \n-        :param resource: the name of the resource.  To access resources within\n-                         subfolders use forward slashes as separator.\n-        :param mode: resource file opening mode, default is 'rb'.\n+    def open_instance_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to the application's instance folder\n+        :attr:`instance_path`. Unlike :meth:`open_resource`, files in the\n+        instance folder can be opened for writing.\n+\n+        :param resource: Path to the resource relative to :attr:`instance_path`.\n+        :param mode: Open the file in this mode.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n+\n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n-        return open(os.path.join(self.instance_path, resource), mode)\n+        path = os.path.join(self.instance_path, resource)\n+\n+        if \"b\" in mode:\n+            return open(path, mode)\n+\n+        return open(path, mode, encoding=encoding)\n \n     def create_jinja_environment(self) -> Environment:\n         \"\"\"Create the Jinja environment based on :attr:`jinja_options`\ndiff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex aa9eacf21b..86c5d59aa2 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -101,29 +101,28 @@ def send_static_file(self, filename: str) -> Response:\n             t.cast(str, self.static_folder), filename, max_age=max_age\n         )\n \n-    def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:\n-        \"\"\"Open a resource file relative to :attr:`root_path` for\n-        reading.\n-\n-        For example, if the file ``schema.sql`` is next to the file\n-        ``app.py`` where the ``Flask`` app is defined, it can be opened\n-        with:\n-\n-        .. code-block:: python\n-\n-            with app.open_resource(\"schema.sql\") as f:\n-                conn.executescript(f.read())\n-\n-        :param resource: Path to the resource relative to\n-            :attr:`root_path`.\n-        :param mode: Open the file in this mode. Only reading is\n-            supported, valid values are \"r\" (or \"rt\") and \"rb\".\n-\n-        Note this is a duplicate of the same method in the Flask\n-        class.\n-\n+    def open_resource(\n+        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n+    ) -> t.IO[t.AnyStr]:\n+        \"\"\"Open a resource file relative to :attr:`root_path` for reading. The\n+        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\n+        method.\n+\n+        :param resource: Path to the resource relative to :attr:`root_path`.\n+        :param mode: Open the file in this mode. Only reading is supported,\n+            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n+        :param encoding: Open the file with this encoding when opening in text\n+            mode. This is ignored when opening in binary mode.\n+\n+        .. versionchanged:: 3.1\n+            Added the ``encoding`` parameter.\n         \"\"\"\n         if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading.\")\n \n-        return open(os.path.join(self.root_path, resource), mode)\n+        path = os.path.join(self.root_path, resource)\n+\n+        if mode == \"rb\":\n+            return open(path, mode)\n+\n+        return open(path, mode, encoding=encoding)\n", "test_patch": "diff --git a/tests/test_helpers.py b/tests/test_helpers.py\nindex 3566385cf1..ee77f1760c 100644\n--- a/tests/test_helpers.py\n+++ b/tests/test_helpers.py\n@@ -334,16 +334,27 @@ def test_make_response(self):\n             assert rv.data == b\"Hello\"\n             assert rv.mimetype == \"text/html\"\n \n-    @pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\n-    def test_open_resource(self, mode):\n-        app = flask.Flask(__name__)\n \n-        with app.open_resource(\"static/index.html\", mode) as f:\n-            assert \"<h1>Hello World!</h1>\" in str(f.read())\n+@pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\n+def test_open_resource(mode):\n+    app = flask.Flask(__name__)\n \n-    @pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\n-    def test_open_resource_exceptions(self, mode):\n-        app = flask.Flask(__name__)\n+    with app.open_resource(\"static/index.html\", mode) as f:\n+        assert \"<h1>Hello World!</h1>\" in str(f.read())\n \n-        with pytest.raises(ValueError):\n-            app.open_resource(\"static/index.html\", mode)\n+\n+@pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\n+def test_open_resource_exceptions(mode):\n+    app = flask.Flask(__name__)\n+\n+    with pytest.raises(ValueError):\n+        app.open_resource(\"static/index.html\", mode)\n+\n+\n+@pytest.mark.parametrize(\"encoding\", (\"utf-8\", \"utf-16-le\"))\n+def test_open_resource_with_encoding(tmp_path, encoding):\n+    app = flask.Flask(__name__, root_path=os.fspath(tmp_path))\n+    (tmp_path / \"test\").write_text(\"test\", encoding=encoding)\n+\n+    with app.open_resource(\"test\", mode=\"rt\", encoding=encoding) as f:\n+        assert f.read() == \"test\"\n", "problem_statement": "allow setting encoding in open_resource()\nThis is a duplicate of #1740 &mdash; that may have been closed for lack of a clear rationale, however, and I'd like to suggest it again with the following reasoning.\r\n\r\nThe documentation currently gives this example for using `open_resource()`:\r\n\r\n```python\r\nwith app.open_resource(\"schema.sql\") as f:\r\n    conn.executescript(f.read())\r\n```\r\n\r\nOn Windows, however, this can fail to open a file encoded in UTF-8, which most are these days, and safer code looks like this:\r\n\r\n```python\r\nwith app.open_resource(\"schema.sql\", mode=\"rb\") as f:\r\n   conn.executescript(f.read().decode(\"utf-8\"))  # type: ignore [attr-defined]\r\n```\r\n\r\n(The type comment is needed to prevent mypy from complaining about `f.read()` possibly being a string with no `.decode()` method, as it can't tell that the file was opened in 'rb' mode.)\r\n\r\nIt would be cleaner and more flexible to be able to write:\r\n\r\n```python\r\nwith app.open_resource(\"schema.sql\", encoding=\"utf-8\") as f:\r\n   conn.executescript(f.read())\r\n```\r\n\n", "hints_text": "", "created_at": "2024-07-10T11:57:00Z"}
{"repo": "pallets/flask", "pull_number": 5464, "instance_id": "pallets__flask-5464", "issue_numbers": ["5462"], "base_commit": "bea5876e46144080a06170222396b953a361af48", "patch": "diff --git a/docs/config.rst b/docs/config.rst\nindex 7828fb92a1..732cfd303a 100644\n--- a/docs/config.rst\n+++ b/docs/config.rst\n@@ -142,6 +142,12 @@ The following configuration values are used internally by Flask:\n \n     Default: ``None``\n \n+    .. warning::\n+        If this is changed after the browser created a cookie is created with\n+        one setting, it may result in another being created. Browsers may send\n+        send both in an undefined order. In that case, you may want to change\n+        :data:`SESSION_COOKIE_NAME` as well or otherwise invalidate old sessions.\n+\n     .. versionchanged:: 2.3\n         Not set by default, does not fall back to ``SERVER_NAME``.\n \n", "test_patch": "", "problem_statement": "Conflicting cookies shenanigans with `SESSION_COOKIE_DOMAIN`\nHi,\r\nI encountered a strange behavior of flask regarding cookies when the value of `SESSION_COOKIE_DOMAIN` is updated after some cookies have been set.\r\nI observed this with Python 3.11, Flask 3.0.2 and Werkzeug 3.0.2 with both Firefox 124 and Chrome 123.\r\nFirst of all, I could not reproduce the issue when serving on http://localhost:5000, so you might need to add `127.0.0.1 flask.localhost` in your `/etc/hosts` to be able to reproduce this, and access the app from http://flask.localhost:5000.\r\n\r\n0. Put the following snippet in an `app.py` and run it with `env FLASK_DEBUG=1 FLASK_APP=app flask run`. \r\n```python\r\nimport flask\r\nimport base64\r\napp = flask.Flask(__name__)\r\napp.config[\"SECRET_KEY\"] = \"super secret\"\r\napp.config[\"SERVER_NAME\"] = \"flask.localhost:5000\"\r\napp.config[\"SESSION_COOKIE_DOMAIN\"] = app.config[\"SERVER_NAME\"]\r\n\r\n@app.route(\"/\", methods=(\"GET\", \"POST\"))\r\ndef index():\r\n    if flask.request.form:\r\n        flask.session[\"value\"] = flask.request.form[\"value\"]\r\n\r\n    session_cookies = [\r\n        base64.b64decode(cookie.split(\".\")[0]).decode()\r\n        for cookie in flask.request.cookies.getlist(\"session\")\r\n    ]\r\n    return (\r\n        '<form action=\"/\" method=\"post\"><input name=\"value\"><input type=\"submit\"></form\"><br>\\n'\r\n        + f'value {flask.session.get(\"value\")}<br>\\n'\r\n        + \"cookies: \" + \" \".join(session_cookies)\r\n    )\r\n```\r\n\r\n2. **Open http://flask.localhost:5000, clean the cookies if existing.**\r\n`flask.session` is empty.\r\n3. **Write `foo` in the form, validate.**\r\n`session[\"value\"]` contains `foo`.\r\n4. **Reload the page**\r\n`session[\"value\"]` still contains `foo`.\r\nThe firefox dev tools indicate that the cookie domain is `.flask.localhost` (with a leading dot).\r\n5. **Comment the `app.config[\"SESSION_COOKIE_DOMAIN\"] = app.config[\"SERVER_NAME\"]` line**\r\n6. **Reload the page**\r\n`session[\"value\"]` still contains `foo`.\r\n7. **Write `bar` in the form, validate.**\r\n`session[\"value\"]` still contains `bar`.\r\n8. **Reload the page**\r\n`session[\"value\"]` contains `foo`, which is unexpected.\r\nA cookie has been set on step 6, and the firefox dev tools indicate that the cookie domain is `flask.localhost` (without a leading dot).\r\nHowever it seems the value is read from the step 2. cookie. that is still around.\r\n`flask.request.cookies.getlist(\"session\")` contains two cookies, with the values `foo` and `bar`.\r\n\r\nThose steps work also by starting with the `SESSION_COOKIE_DOMAIN` commented and then uncomment it at step 4.\r\nThe issue is not reproductible without the `app.config[\"SERVER_NAME\"] = \"flask.localhost:5000\"` line.\r\n\r\nThe [SESSION_COOKIE_DOMAIN documentation](https://flask.palletsprojects.com/en/3.0.x/config/#SESSION_COOKIE_DOMAIN) mentions that different values produce different cookies. However it does not mention that different cookies could conflict, neither that changing the value should be avoided.\r\n\r\nMaybe there is some misconfiguration on my side (is it?) but nonetheless it feels strange that Flask could write in one session cookie (step 6.) and then read from another session cookie (step 7.).\r\n\r\nDeleting the cookies solve the situation, however I can not expect the users of my production application to delete their cookies so the application is functionning again. And the curse is that some of my users have their cookies created with subdomains support, and some other have their cookies without subdomains support. So setting or deleting `SESSION_COOKIE_DOMAIN` will fix the issue for ones while provoking it for the other ones.\r\n\r\nWhat do you think?\n", "hints_text": "I am confident that we are currently doing the right thing with cookie domain. I spent a long time looking through the relevant current specs and browser behavior when reviewing that code last year.\r\n\r\nGiven the current way browsers handle cookies, it is less secure to set the domain property than to leave it unset. You're seeing the result of the two different behaviors here. When you set a domain, the cookie is valid for that and all subdomains. When you don't set a domain, the browser makes it valid only for the domain that requested it. When both cookies are set, the browser has to pick one to send first.\nYou can attempt to issue an few extra `response.delete_cookie` calls for each setting on some response, but beyond that we can't really affect what the browser stores and sends if you start sending it different overlapping things at different times.\n> When both cookies are set, the browser has to pick one to send first.\r\n\r\nDoes Flask has to pick the first one sent by the browser, or would it make sense for Flask to use the cookie with the most suitable domain, if that information is ever available?\r\n\r\n> You can attempt to issue an few extra response.delete_cookie calls for each setting on some response\r\n\r\n`response.delete_cookie(\"session\", \"flask.localhost\")` works, but `response.delete_cookie(\"session\", \".flask.localhost\")` does not, whatever the value of `SESSION_COOKIE_DOMAIN`.\nThe domain information is not present in the `Cookie` request header, it is only `key=value`.\r\n\r\nA leading dot is irrelevant in modern browsers, it's equivalent to the same domain without the dot. So both those calls are the same. The other call would be `delete_cookie` without the domain at all.\nI see, thank you for your insight.\r\nIn the end I could solve the situation simply by abandoning both cookies by changing the `SESSION_COOKIE_NAME`.\r\n\r\nI think this would be worth mentioning in the documentation though. Would you be OK if I\u00a0write a little caveat paragraph about this?\nSure, but where? It might be mentioned in the Werkzeug API docs already. Maybe in the security section for the Flask docs?\nI can think of the [Configuration Handling > SESSION_COOKIE_DOMAIN](https://flask.palletsprojects.com/en/3.0.x/config/#SESSION_COOKIE_DOMAIN) section, or in the [Security > Set-Cookie Options](https://flask.palletsprojects.com/en/3.0.x/config/#SESSION_COOKIE_DOMAIN) section indeed.\r\n\r\nI would expect to read this more on the configuration I think. As you want.", "created_at": "2024-04-15T16:35:07Z"}
{"repo": "pallets/flask", "pull_number": 5460, "instance_id": "pallets__flask-5460", "issue_numbers": ["5448"], "base_commit": "7320e311a0a3f190351173f8be90cab31dadbf73", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex 3c04b2f4a2..0908a02d24 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -3,6 +3,10 @@ Version 3.0.3\n \n Unreleased\n \n+-   The default ``hashlib.sha1`` may not be available in FIPS builds. Don't\n+    access it at import time so the developer has time to change the default.\n+    :issue:`5448`\n+\n \n Version 3.0.2\n -------------\ndiff --git a/src/flask/sessions.py b/src/flask/sessions.py\nindex bb753eb814..ee19ad6387 100644\n--- a/src/flask/sessions.py\n+++ b/src/flask/sessions.py\n@@ -277,6 +277,14 @@ def save_session(\n session_json_serializer = TaggedJSONSerializer()\n \n \n+def _lazy_sha1(string: bytes = b\"\") -> t.Any:\n+    \"\"\"Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\n+    SHA-1, in which case the import and use as a default would fail before the\n+    developer can configure something else.\n+    \"\"\"\n+    return hashlib.sha1(string)\n+\n+\n class SecureCookieSessionInterface(SessionInterface):\n     \"\"\"The default session interface that stores sessions in signed cookies\n     through the :mod:`itsdangerous` module.\n@@ -286,7 +294,7 @@ class SecureCookieSessionInterface(SessionInterface):\n     #: signing of cookie based sessions.\n     salt = \"cookie-session\"\n     #: the hash function to use for the signature.  The default is sha1\n-    digest_method = staticmethod(hashlib.sha1)\n+    digest_method = staticmethod(_lazy_sha1)\n     #: the name of the itsdangerous supported key derivation.  The default\n     #: is hmac.\n     key_derivation = \"hmac\"\n", "test_patch": "", "problem_statement": "Use of `hashlib.sha1` causes issue in FIPS build\nThe use of SHA1 found here: https://github.com/pallets/flask/blob/b90a4f1f4a370e92054b9cc9db0efcb864f87ebe/src/flask/sessions.py#L289\r\nprevents applications from running in a FIPS Enabled Environment/OS. The OS will abruptly stop the application from running when it detects a non compliant Hash Algorithm is used.\r\n\r\nDescribe how to replicate the bug:\r\nEnforce FIPS Enabled on the OS (such as RHEL9)\r\n\r\n\r\nUnexpected Behavior Error output:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/opt/abc-app/app.py\", line 1, in <module>\r\n    from xxxxxxxxxx import xxxxxxx\r\n  File \"/opt/abc-app/abc-app_ui.py\", line 67, in <module>\r\n    sess.init_app(app=app)\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/flask_session/__init__.py\", line 50, in init_app\r\n    app.session_interface = self._get_interface(app)\r\n                            ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/flask_session/__init__.py\", line 79, in _get_interface\r\n    session_interface = FileSystemSessionInterface(\r\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/flask_session/sessions.py\", line 312, in __init__\r\n    self.cache = FileSystemCache(cache_dir, threshold=threshold, mode=mode)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/cachelib/file.py\", line 73, in __init__\r\n    self._update_count(value=len(list(self._list_dir())))\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/cachelib/file.py\", line 95, in _update_count\r\n    self.set(self._fs_count_file, new_count, mgmt_element=True)\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/cachelib/file.py\", line 244, in set\r\n    filename = self._get_filename(key)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/abc-app/venv/lib/python3.11/site-packages/cachelib/file.py\", line 201, in _get_filename\r\n    bkey_hash = self._hash_method(bkey).hexdigest()\r\n                ^^^^^^^^^^^^^^^^^^^^^^^\r\n_hashlib.UnsupportedDigestmodError: [digital envelope routines] unsupported\r\n```\r\n\r\nEnvironment:\r\nRHEL9 FIPS Enabled and Enforced\r\n\r\n- Python version: 3.x\r\n- Flask version: 3.0.2\r\n\n", "hints_text": "Already reported to cachelib: https://github.com/pallets-eco/cachelib/issues/361\nWait nevermind, the traceback is for Flask-Session but you're pointing at Flask code in the link. So the problem is that the default of `sha1` causes `hashlib` to raise an error before it's possible to override that, so even if the user wants to choose something other than the default they can't do that in time.\nLooking into this more, only MD5 is called out as not being available in FIPS mode: https://docs.python.org/3/library/hashlib.html#hash-algorithms. Has this changed recently to include SHA-1? If so, you should report that to Python as well to update the documentation to reflect what FIPS actually does.\r\n\r\nI found this announcement https://www.nist.gov/news-events/news/2022/12/nist-retires-sha-1-cryptographic-algorithm which states that FIPS 180-5 will be released by 2030, but I can't find anything detailing how you'd get a FIPS build of OpenSSL that doesn't support SHA-1 today. I need some more info on how OpenSSL/Python is being built, because it looks like the build is different than what FIPS actually requires.", "created_at": "2024-04-07T18:36:22Z"}
{"repo": "pallets/flask", "pull_number": 5393, "instance_id": "pallets__flask-5393", "issue_numbers": ["5391"], "base_commit": "3435d2ff1589eb0c1a85cc294a20985910a1a606", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex 302abec441..edbaa963ae 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,6 +4,8 @@ Version 3.0.2\n Unreleased\n \n -   Correct type for ``jinja_loader`` property. :issue:`5388`\n+-   Fix error with ``--extra-files`` and ``--exclude-patterns`` CLI options.\n+    :issue:`5391`\n \n \n Version 3.0.1\ndiff --git a/src/flask/cli.py b/src/flask/cli.py\nindex ffdcb182a7..d4df2802b2 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -858,7 +858,9 @@ def convert(\n         self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n     ) -> t.Any:\n         items = self.split_envvar_value(value)\n-        return [super().convert(item, param, ctx) for item in items]\n+        # can't call no-arg super() inside list comprehension until Python 3.12\n+        super_convert = super().convert\n+        return [super_convert(item, param, ctx) for item in items]\n \n \n @click.command(\"run\", short_help=\"Run a development server.\")\n", "test_patch": "diff --git a/tests/test_cli.py b/tests/test_cli.py\nindex 79de1fc8d1..09995488cc 100644\n--- a/tests/test_cli.py\n+++ b/tests/test_cli.py\n@@ -679,3 +679,8 @@ def test_cli_empty(app):\n \n     result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n     assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n+\n+\n+def test_run_exclude_patterns():\n+    ctx = run_command.make_context(\"run\", [\"--exclude-patterns\", __file__])\n+    assert ctx.params[\"exclude_patterns\"] == [__file__]\n", "problem_statement": "Flask 3.0.1 breaks path-separated command line arguments\nIn a minimal flask app, running `flask run --extra-files=` or using any other argument that internally uses `SeparatedPathType` results in `TypeError: super(type, obj): obj must be an instance or subtype of type`\r\n\r\n\r\n\r\n1. Create a minimal flask application (follow [the Quickstart](https://flask.palletsprojects.com/en/3.0.x/quickstart/#a-minimal-application)).\r\n2. Install flask==3.0.1 (this bug is not reproducible with 3.0.0 AFAIK)\r\n3. Run `flask run --extra-files=a`\r\n\r\n**Expected Behavior:**\r\nThe server should start up.\r\n\r\n**Actual Behavior:**\r\nThe command raises a `Type Error` and exits with code 1\r\n\r\n<details><summary>Full Traceback</summary>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \".../flask-cli-bug/..venv/bin/flask\", line 8, in <module>\r\n    sys.exit(main())\r\n             ^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/flask/cli.py\", line 1105, in main\r\n    cli.main()\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 1078, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 1686, in invoke\r\n    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 943, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 1408, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2400, in handle_parse_result\r\n    value = self.process_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2356, in process_value\r\n    value = self.type_cast_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2344, in type_cast_value\r\n    return convert(value)\r\n           ^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/core.py\", line 2316, in convert\r\n    return self.type(value, param=self, ctx=ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/click/types.py\", line 83, in __call__\r\n    return self.convert(value, param, ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in convert\r\n    return [super().convert(item, param, ctx) for item in items]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../flask-cli-bug/..venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in <listcomp>\r\n    return [super().convert(item, param, ctx) for item in items]\r\n            ^^^^^^^\r\nTypeError: super(type, obj): obj must be an instance or subtype of type\r\n```\r\n</details>\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.11.6\r\n- Flask version: 3.0.1\r\n\r\nOutput from `pip freeze`:\r\n```\r\nblinker==1.7.0\r\nclick==8.1.7\r\nFlask==3.0.1\r\nitsdangerous==2.1.2\r\nJinja2==3.1.3\r\nMarkupSafe==2.1.4\r\nWerkzeug==3.0.1\r\n```\r\n\r\nDemo Repo: https://github.com/alexrudy/flask-3.0.1-cli-bug\r\n\n", "hints_text": "I can confirm that this bug was introduced in 3.0.1. In our case, we're using the `--exclude-patterns` command line parameter.\r\n\r\n# versions\r\n\r\n- python 3.11.5\r\n- flask 3.0.1\r\n- click 8.1.7\r\n- ubuntu 22.04.1\r\n\r\n# command\r\n\r\n```bash\r\nflask --app app:start run --debug --exclude-patterns \"*/tests/*:*/venv/*:*/temp/*\"\r\n```\r\n\r\n# traceback\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<frozen runpy>\", line 198, in _run_module_as_main\r\n  File \"<frozen runpy>\", line 88, in _run_code\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/__main__.py\", line 3, in <module>\r\n    main()\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/cli.py\", line 1105, in main\r\n    cli.main()\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 1078, in main\r\n    rv = self.invoke(ctx)\r\n         ^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 1686, in invoke\r\n    sub_ctx = cmd.make_context(cmd_name, args, parent=ctx)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 943, in make_context\r\n    self.parse_args(ctx, args)\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 1408, in parse_args\r\n    value, args = param.handle_parse_result(ctx, opts, args)\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2400, in handle_parse_result\r\n    value = self.process_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2356, in process_value\r\n    value = self.type_cast_value(ctx, value)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2344, in type_cast_value\r\n    return convert(value)\r\n           ^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/core.py\", line 2316, in convert\r\n    return self.type(value, param=self, ctx=ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/click/types.py\", line 83, in __call__\r\n    return self.convert(value, param, ctx)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in convert\r\n    return [super().convert(item, param, ctx) for item in items]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"<project>/venv/lib/python3.11/site-packages/flask/cli.py\", line 861, in <listcomp>\r\n    return [super().convert(item, param, ctx) for item in items]\r\n            ^^^^^^^\r\nTypeError: super(type, obj): obj must be an instance or subtype of type\r\n```", "created_at": "2024-01-26T02:21:43Z"}
{"repo": "pallets/flask", "pull_number": 5389, "instance_id": "pallets__flask-5389", "issue_numbers": ["5388"], "base_commit": "3207af8827d4162ef5841249c46fbb9da043c551", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex f97bc35ac6..302abec441 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -3,6 +3,8 @@ Version 3.0.2\n \n Unreleased\n \n+-   Correct type for ``jinja_loader`` property. :issue:`5388`\n+\n \n Version 3.0.1\n -------------\ndiff --git a/src/flask/sansio/scaffold.py b/src/flask/sansio/scaffold.py\nindex 40534f53c8..5355700899 100644\n--- a/src/flask/sansio/scaffold.py\n+++ b/src/flask/sansio/scaffold.py\n@@ -9,6 +9,7 @@\n from functools import update_wrapper\n \n import click\n+from jinja2 import BaseLoader\n from jinja2 import FileSystemLoader\n from werkzeug.exceptions import default_exceptions\n from werkzeug.exceptions import HTTPException\n@@ -272,7 +273,7 @@ def static_url_path(self, value: str | None) -> None:\n         self._static_url_path = value\n \n     @cached_property\n-    def jinja_loader(self) -> FileSystemLoader | None:\n+    def jinja_loader(self) -> BaseLoader | None:\n         \"\"\"The Jinja loader for this object's templates. By default this\n         is a class :class:`jinja2.loaders.FileSystemLoader` to\n         :attr:`template_folder` if it is set.\n", "test_patch": "", "problem_statement": "jinja_loader type bug\nI have\r\n```Python\r\nfrom jinja2 import ChoiceLoader, FileSystemLoader\r\n\r\n\r\napp.jinja_loader = ChoiceLoader([\r\n    FileSystemLoader(project_dir / 'templates/'),\r\n    app.jinja_loader,\r\n])\r\n```\r\n\r\nThere is a mypy error\r\n```\r\nerror: Incompatible types in assignment (expression has type \"ChoiceLoader\", variable has type \"FileSystemLoader | None\")  [assignment]\r\nerror: List item 1 has incompatible type \"FileSystemLoader | None\"; expected \"BaseLoader\"  [list-item]\r\n```\r\n\r\nThere shouldn't be an error.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.12.1\r\n- Flask version: 3.0.1\r\n\n", "hints_text": "", "created_at": "2024-01-23T16:40:43Z"}
{"repo": "pallets/flask", "pull_number": 5382, "instance_id": "pallets__flask-5382", "issue_numbers": ["5381"], "base_commit": "c275573147b426fbe1a37c6bce143f7895b603b2", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9f79995b46..27c04f7f3e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -5,6 +5,9 @@ Unreleased\n \n -   Correct type for ``path`` argument to ``send_file``. :issue:`5230`\n -   Fix a typo in an error message for the ``flask run --key`` option. :pr:`5344`\n+-   Session data is untagged without relying on the built-in ``json.loads``\n+    ``object_hook``. This allows other JSON providers that don't implement that.\n+    :issue:`5381`\n \n \n Version 3.0.0\ndiff --git a/src/flask/json/tag.py b/src/flask/json/tag.py\nindex 91cc4412d6..069739f264 100644\n--- a/src/flask/json/tag.py\n+++ b/src/flask/json/tag.py\n@@ -305,10 +305,22 @@ def untag(self, value: dict[str, t.Any]) -> t.Any:\n \n         return self.tags[key].to_python(value[key])\n \n+    def _untag_scan(self, value: t.Any) -> t.Any:\n+        if isinstance(value, dict):\n+            # untag each item recursively\n+            value = {k: self._untag_scan(v) for k, v in value.items()}\n+            # untag the dict itself\n+            value = self.untag(value)\n+        elif isinstance(value, list):\n+            # untag each item recursively\n+            value = [self._untag_scan(item) for item in value]\n+\n+        return value\n+\n     def dumps(self, value: t.Any) -> str:\n         \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"\n         return dumps(self.tag(value), separators=(\",\", \":\"))\n \n     def loads(self, value: str) -> t.Any:\n         \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"\n-        return loads(value, object_hook=self.untag)\n+        return self._untag_scan(loads(value))\n", "test_patch": "", "problem_statement": "Session data is not untagged properly when using other JSON providers\nProviders such as `orjson` and `ujson` do not implement `object_hook`. The \"tagged JSON\" scheme used to encode types for session data currently calls `loads(data, object_hook=...)`, so providers that ignore that option return the data still tagged. Untagging needs to be implemented without using `object_hook`.\n", "hints_text": "", "created_at": "2024-01-15T15:50:22Z"}
{"repo": "pallets/flask", "pull_number": 5344, "instance_id": "pallets__flask-5344", "issue_numbers": ["5342"], "base_commit": "b97165db75c6f4e99c3307b4a5a1f3b0d9f4de25", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex c7ae2f651f..9f79995b46 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -4,6 +4,7 @@ Version 3.0.1\n Unreleased\n \n -   Correct type for ``path`` argument to ``send_file``. :issue:`5230`\n+-   Fix a typo in an error message for the ``flask run --key`` option. :pr:`5344`\n \n \n Version 3.0.0\ndiff --git a/src/flask/cli.py b/src/flask/cli.py\nindex dda266b30c..751dfd1f60 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -795,7 +795,9 @@ def _validate_key(ctx, param, value):\n \n         if is_context:\n             raise click.BadParameter(\n-                'When \"--cert\" is an SSLContext object, \"--key is not used.', ctx, param\n+                'When \"--cert\" is an SSLContext object, \"--key\" is not used.',\n+                ctx,\n+                param,\n             )\n \n         if not cert:\n", "test_patch": "", "problem_statement": "The double quote is missing in the string\nhttps://github.com/pallets/flask/blob/d61198941adcb191ddb591f08d7d912e40bde8bc/src/flask/cli.py#L798\r\n\r\nThere is no double quote in the first argument of `click.BadParameter` `\"--key is not used`.\n", "hints_text": "", "created_at": "2023-11-24T22:07:31Z"}
{"repo": "pallets/flask", "pull_number": 5336, "instance_id": "pallets__flask-5336", "issue_numbers": ["5320"], "base_commit": "66743d4f9d865775258c845db339d3fcccd016b5", "patch": "diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5c42cc76b3..c7ae2f651f 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -3,6 +3,8 @@ Version 3.0.1\n \n Unreleased\n \n+-   Correct type for ``path`` argument to ``send_file``. :issue:`5230`\n+\n \n Version 3.0.0\n -------------\ndiff --git a/src/flask/helpers.py b/src/flask/helpers.py\nindex 8601c2fd87..8460891215 100644\n--- a/src/flask/helpers.py\n+++ b/src/flask/helpers.py\n@@ -387,7 +387,7 @@ def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n \n \n def send_file(\n-    path_or_file: os.PathLike | str | t.BinaryIO,\n+    path_or_file: os.PathLike[t.AnyStr] | str | t.BinaryIO,\n     mimetype: str | None = None,\n     as_attachment: bool = False,\n     download_name: str | None = None,\n", "test_patch": "", "problem_statement": "flask.send_file() with Pylance in strict mode shows reportUnknownMemberType\nI was using this method fine, until I switched on 'strict' mode in the Pylance plugin for vscode. This gave me the error at calling the method:\r\n\r\n```\r\nType of \"send_file\" is partially unknown\r\n  Type of \"send_file\" is \"(path_or_file: PathLike[Unknown] | str | BinaryIO, mimetype: str | None = None, as_attachment: bool = False, download_name: str | None = None, conditional: bool = True, etag: bool | str = True, last_modified: datetime | int | float | None = None, max_age: int | ((str | None) -> (int | None)) | None = None) -> Response\" \r\n```\r\nCode that causes the error:\r\n```\r\n@app.route('/')\r\ndef home():\r\n    return flask.send_file('web/index.html')\r\n```\r\nThe error sits on: \"flask.send_file\"\r\n\r\nI've been trying to infer this type and googled around, but can't seem to resolve this issue. having investigated \"PathLike[Unknown]\" for a while now looking into this, I've come to the conclusion that this issue is likely cause by the fact that PathLike requires a generic type to be declared.  If I manually (and temporary) add this generic type in, the error goes away.\r\n\r\nIn helpers.py (around line 391) I change:\r\n```\r\ndef send_file(\r\n    path_or_file: t.Union[os.PathLike, str, t.BinaryIO],\r\n```\r\ninto:\r\n```\r\ndef send_file(\r\n    path_or_file: t.Union[os.PathLike[str], str, t.BinaryIO],\r\n```\r\nI've added the \"[str]\" generic type to PathLike. Possibly this might need to be \"[AnyStr]\" as that is the type declared in os.\r\n\r\nI hope this is an easy fix, and that this isn't a user error that I have mistaken as an issue.\r\n\r\nEnvironment:\r\nPython 3.11.2\r\nFlask 2.2.2\r\nWerkzeug 2.2.2\n", "hints_text": "This sounds reasonable. Happy to review a PR. \nHi, I'm new to contributing to this project and would love to raise a PR if no one else is working on this.\nHey, thanks for being interested! Here, in our project, there's no need to ask to work on an issue. As long as the issue is not assigned to anyone and doesn't have have a linked open PR (both can be seen in the sidebar), anyone is welcome to work on any issue. So please go ahead! If you need help, you can ask here or on [our Discord server](https://discord.gg/pallets).", "created_at": "2023-11-13T11:34:27Z"}
